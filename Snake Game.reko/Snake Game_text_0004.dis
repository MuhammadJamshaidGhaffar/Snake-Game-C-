// fn0000000000441480
// Return size: 8
define fn0000000000441480
fn0000000000441480_entry:
	rsp = fp
	// succ:  l0000000000441480
l0000000000441480:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	rax = Mem0[r8:word64]
	rdx = Mem0[r8 + 8<64>:word64]
	rsi = rcx
	r15 = Mem0[rbp + 0x48<64>:word64]
	Mem0[rbp - 0x40<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rbp - 0x38<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rbp - 0x50<64>:word64] = rax
	rax = Mem0[rbp + 0x58<64>:word64]
	Mem0[rbp - 0x48<64>:word64] = rdx
	rcx = rax + 0xD0<64>
	call fn0000000000473020 (retsize: 8;)
	r13 = rax
	rax = Mem0[rbp + 0x50<64>:word64]
	rax = CONVERT(0x1E<32> + rax * 8<64>, word32, word64)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rbx = rbp - 0x40<64>
	rdx = rbp - 0x50<64>
	rsp = rsp - rax
	SCZO = cond(rsp)
	r12 = rsp + 0x20<64>
	rcx = rbx
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000441784
	// succ:  l0000000000441505 l0000000000441784
l0000000000441505:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	// succ:  l000000000044150D
l000000000044150D:
	rcx = Mem0[rbp - 0x40<64>:word64]
	rdi = r14 + r14
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000441607
	// succ:  l000000000044151E l0000000000441607
l000000000044151E:
	// succ:  l0000000000441520
l0000000000441520:
	eax = CONVERT(Mem0[rbp - 0x38<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l00000000004416A0
	// succ:  l000000000044152E l00000000004416A0
l000000000044152E:
	rcx = Mem0[rbp - 0x50<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044156A
	// succ:  l0000000000441539 l000000000044156A
l0000000000441539:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbp - 0x48<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000441622
	// succ:  l0000000000441546 l0000000000441622
l0000000000441546:
	SCZO = cond(al - dl)
	branch Test(EQ,Z) l0000000000441650
	// succ:  l000000000044154E l0000000000441650
l000000000044154E:
	rcx = Mem0[rbp - 0x40<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044156A
	// succ:  l000000000044155C l000000000044156A
l000000000044155C:
	eax = CONVERT(Mem0[rbp - 0x38<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l00000000004416D0
	// succ:  l000000000044156A l00000000004416D0
l000000000044156A:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000441664
	// succ:  l0000000000441573 l0000000000441664
l0000000000441573:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	goto l000000000044158D
	// succ:  l000000000044158D
l0000000000441580:
	rcx = rcx + 1<64>
	SCZO = cond(rcx)
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	// succ:  l0000000000441588
l0000000000441588:
	SCZO = cond(rbx - rdx)
	branch Test(ULE,CZ) l00000000004415C5
	// succ:  l000000000044158D l00000000004415C5
l000000000044158D:
	r9 = r12 + rdx * 4<64>
	r8 = CONVERT(Mem0[r9:word32], word32, int64)
	r10 = Mem0[r15 + r8 * 8<64>:word64]
	r8 = r13 + 0<64> + rdx * 8<64>
	SCZO = cond(r14 - Mem0[r8:word64])
	branch Test(UGE,C) l0000000000441580
	// succ:  l00000000004415A2 l0000000000441580
l00000000004415A2:
	SCZO = cond(Mem0[r10 + rdi:word16] - ax)
	branch Test(EQ,Z) l0000000000441690
	// succ:  l00000000004415AD l0000000000441690
l00000000004415AD:
	rbx = rbx - 1<64>
	SCZO = cond(rbx)
	r10d = Mem0[r12 + rbx * 4<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(rbx - rdx)
	Mem0[r9:word32] = r10d
	r9 = Mem0[r13 + 0<64> + rbx * 8<64>:word64]
	Mem0[r8:word64] = r9
	branch Test(UGT,CZ) l000000000044158D
	// succ:  l00000000004415C5 l000000000044158D
l00000000004415C5:
	SCZO = cond(rbx - rcx)
	branch Test(EQ,Z) l0000000000441650
	// succ:  l00000000004415CE l0000000000441650
l00000000004415CE:
	rcx = Mem0[rbp - 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004415F6
	// succ:  l00000000004415D7 l00000000004415F6
l00000000004415D7:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000044171F
	// succ:  l00000000004415E5 l000000000044171F
l00000000004415E5:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l00000000004415ED
l00000000004415ED:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp - 0x38<64>:word16] = ax
	// succ:  l00000000004415F6
l00000000004415F6:
	r14 = r14 + 1<64>
	SCZO = cond(r14)
	rdi = rdi + 2<64>
	SCZO = cond(rdi)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000441520
	// succ:  l0000000000441607 l0000000000441520
l0000000000441607:
	rcx = Mem0[rbp - 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000441650
	// succ:  l0000000000441610 l0000000000441650
l0000000000441610:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbp - 0x48<64>:word16] - 0xFFFF<16>)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l0000000000441546
	// succ:  l0000000000441622 l0000000000441546
l0000000000441622:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000044175C
	// succ:  l0000000000441630 l000000000044175C
l0000000000441630:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000441633
l0000000000441633:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000441700
	// succ:  l000000000044163D l0000000000441700
l000000000044163D:
	Mem0[rbp - 0x48<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - dl)
	branch Test(NE,Z) l000000000044154E
	// succ:  l000000000044164B l000000000044154E
l000000000044164B:
	// succ:  l0000000000441650
l0000000000441650:
	SCZO = cond(rbx - 1<64>)
	branch Test(EQ,Z) l0000000000441855
	// succ:  l000000000044165A l0000000000441855
l000000000044165A:
	SCZO = cond(rbx - 2<64>)
	branch Test(EQ,Z) l000000000044172E
	// succ:  l0000000000441664 l000000000044172E
l0000000000441664:
	rax = Mem0[rbp + 0x60<64>:word64]
	v35 = Mem0[rax:word32] | 4<32>
	Mem0[rax:word32] = v35
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l000000000044166B
l000000000044166B:
	rax = Mem0[rbp - 0x40<64>:word64]
	rdx = Mem0[rbp - 0x38<64>:word64]
	Mem0[rsi:word64] = rax
	rax = rsi
	Mem0[rsi + 8<64>:word64] = rdx
	rsp = rbp - 0x28<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000441480_exit
l0000000000441690:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	goto l0000000000441588
	// succ:  l0000000000441588
l00000000004416A0:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000044176E
	// succ:  l00000000004416AE l000000000044176E
l00000000004416AE:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004416B1
l00000000004416B1:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l00000000004416F0
	// succ:  l00000000004416B7 l00000000004416F0
l00000000004416B7:
	rcx = Mem0[rbp - 0x50<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbp - 0x38<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000441539
	// succ:  l00000000004416CA l0000000000441539
l00000000004416CA:
	goto l000000000044154E
	// succ:  l000000000044154E
l00000000004416D0:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000441779
	// succ:  l00000000004416DE l0000000000441779
l00000000004416DE:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004416E1
l00000000004416E1:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000441712
	// succ:  l00000000004416E7 l0000000000441712
l00000000004416E7:
	Mem0[rbp - 0x38<64>:word16] = ax
	goto l000000000044156A
	// succ:  l000000000044156A
l00000000004416F0:
	Mem0[rbp - 0x40<64>:word64] = 0<64>
	goto l0000000000441607
	// succ:  l0000000000441607
l0000000000441700:
	Mem0[rbp - 0x50<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000441546
	// succ:  l0000000000441546
l0000000000441712:
	Mem0[rbp - 0x40<64>:word64] = 0<64>
	goto l000000000044156A
	// succ:  l000000000044156A
l000000000044171F:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rbp - 0x40<64>:word64]
	goto l00000000004415ED
	// succ:  l00000000004415ED
l000000000044172E:
	SCZO = cond(Mem0[r13 + 0<64>:word64] - r14)
	branch Test(EQ,Z) l000000000044173E
	// succ:  l0000000000441734 l000000000044173E
l0000000000441734:
	SCZO = cond(Mem0[r13 + 8<64>:word64] - r14)
	branch Test(NE,Z) l0000000000441664
	// succ:  l000000000044173E l0000000000441664
l000000000044173E:
	rcx = CONVERT(Mem0[r12:word32], word32, int64)
	edx = ecx
	rdx = CONVERT(edx, word32, uint64)
	edx = edx - Mem0[rbp + 0x50<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(Mem0[rbp + 0x50<64>:word64] - rcx)
	rax = rcx
	branch Test(UGT,CZ) l0000000000441751
	// succ:  l000000000044174E_1 l0000000000441751
l000000000044174E_1:
	eax = edx
	// succ:  l0000000000441751
l0000000000441751:
	rdx = Mem0[rbp + 0x40<64>:word64]
	Mem0[rdx:word32] = eax
	goto l000000000044166B
	// succ:  l000000000044166B
l000000000044175C:
	rax = Mem0[rcx:word64]
	Mem0[rbp - 0x58<64>:byte] = dl
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	edx = CONVERT(Mem0[rbp - 0x58<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000441633
	// succ:  l0000000000441633
l000000000044176E:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l00000000004416B1
	// succ:  l00000000004416B1
l0000000000441779:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l00000000004416E1
	// succ:  l00000000004416E1
l0000000000441784:
	rcx = rbx
	call fn000000000042B1B0 (retsize: 8;)
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	rax = Mem0[rbp + 0x50<64>:word64]
	rax = rax + rax
	SCZO = cond(rax)
	Mem0[rbp - 0x58<64>:word64] = rax
	branch Test(EQ,Z) l0000000000441505
	// succ:  l00000000004417A0 l0000000000441505
l00000000004417A0:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l00000000004417CA
	// succ:  l00000000004417CA
l00000000004417B0:
	rax = Mem0[r13 + 0<64>:word64]
	rcx = r13
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(r14w - ax)
	branch Test(EQ,Z) l00000000004417D7
	// succ:  l00000000004417C0 l00000000004417D7
l00000000004417C0:
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	SCZO = cond(rdi - Mem0[rbp - 0x58<64>:word64])
	branch Test(EQ,Z) l00000000004417E9
	// succ:  l00000000004417CA l00000000004417E9
l00000000004417CA:
	rax = Mem0[r15 + rdi * 8<64>:word64]
	edx = CONVERT(Mem0[rax:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(r14w - dx)
	branch Test(NE,Z) l00000000004417B0
	// succ:  l00000000004417D7 l00000000004417B0
l00000000004417D7:
	Mem0[r12 + rbx * 4<64>:word32] = edi
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	SCZO = cond(rdi - Mem0[rbp - 0x58<64>:word64])
	branch Test(NE,Z) l00000000004417CA
	// succ:  l00000000004417E9 l00000000004417CA
l00000000004417E9:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000441505
	// succ:  l00000000004417F2 l0000000000441505
l00000000004417F2:
	rcx = Mem0[rbp - 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000441809
	// succ:  l00000000004417FB l0000000000441809
l00000000004417FB:
	call fn0000000000462DD0 (retsize: 8;)
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbp - 0x38<64>:word16] = dx
	// succ:  l0000000000441809
l0000000000441809:
	rax = CONVERT(0x1E<32> + rbx * 8<64>, word32, word64)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	rsp = rsp - rax
	SCZO = cond(rsp)
	r14 = rsp + 0x20<64>
	r13 = r14
	// succ:  l0000000000441830
l0000000000441830:
	rax = CONVERT(Mem0[r12 + rdi * 4<64>:word32], word32, int64)
	rcx = Mem0[r15 + rax * 8<64>:word64]
	eax = wcslen(rcx)
	Mem0[r14 + rdi * 8<64>:word64] = rax
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	SCZO = cond(rdi - rbx)
	branch Test(NE,Z) l0000000000441830
	// succ:  l000000000044184A l0000000000441830
l000000000044184A:
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	goto l000000000044150D
	// succ:  l000000000044150D
l0000000000441855:
	SCZO = cond(Mem0[r13 + 0<64>:word64] - r14)
	branch Test(NE,Z) l0000000000441664
	// succ:  l000000000044185F l0000000000441664
l000000000044185F:
	goto l000000000044173E
	// succ:  l000000000044173E
fn0000000000441480_exit:


// fn0000000000441870
// Return size: 8
define fn0000000000441870
fn0000000000441870_entry:
	rsp = fp
	// succ:  l0000000000441870
l0000000000441870:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x20<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000441870_exit
fn0000000000441870_exit:


// fn00000000004418E0
// Return size: 8
define fn00000000004418E0
fn00000000004418E0_entry:
	rsp = fp
	// succ:  l00000000004418E0
l00000000004418E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x18<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004418E0_exit
fn00000000004418E0_exit:


// fn0000000000441950
// Return size: 8
define fn0000000000441950
fn0000000000441950_entry:
	rsp = fp
	// succ:  l0000000000441950
l0000000000441950:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x38<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000441950_exit
fn0000000000441950_exit:


// fn00000000004419C0
// Return size: 8
define fn00000000004419C0
fn00000000004419C0_entry:
	rsp = fp
	// succ:  l00000000004419C0
l00000000004419C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x98<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp + 0x110<64>:word64]
	r13 = Mem0[rsp + 0x118<64>:word64]
	Mem0[rsp + 0xE0<64>:word64] = rcx
	r14 = Mem0[r8 + 8<64>:word64]
	rcx = r9 + 0xD0<64>
	r15 = rdx
	Mem0[rsp + 0xF8<64>:word64] = r9
	ebp = CONVERT(Mem0[rsp + 0x100<64>:byte], byte, word32)
	rbp = CONVERT(ebp, word32, uint64)
	rdi = Mem0[r8:word64]
	call fn0000000000472FC0 (retsize: 8;)
	SCZO = cond(rbx - r13)
	esi = r14d
	rsi = CONVERT(esi, word32, uint64)
	r12 = rax
	branch Test(EQ,Z) l0000000000441B50
	// succ:  l0000000000441A20 l0000000000441B50
l0000000000441A20:
	rax = rsp + 0x80<64>
	Mem0[rsp + 0x48<64>:word64] = rax
	rax = rsp + 0x70<64>
	Mem0[rsp + 0x50<64>:word64] = rax
	eax = CONVERT(bpl, byte, int32)
	Mem0[rsp + 0x5C<64>:word32] = eax
	goto l0000000000441B07
	// succ:  l0000000000441B07
l0000000000441A44:
	r9 = rbx + 1<64>
	SCZO = cond(r13 - r9)
	branch Test(EQ,Z) l0000000000441B50
	// succ:  l0000000000441A51 l0000000000441B50
l0000000000441A51:
	r11d = CONVERT(Mem0[rbx + 1<64>:byte], byte, word32)
	r11 = CONVERT(r11d, word32, uint64)
	ebp = CONVERT(Mem0[r12 + 0x139<64> + r11:byte], byte, int32)
	rax = r11
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l0000000000441BB0
	// succ:  l0000000000441A6B l0000000000441BB0
l0000000000441A6B:
	SCZO = cond(bpl - 0x4F<8>)
	branch Test(EQ,Z) l0000000000441A7B
	// succ:  l0000000000441A71 l0000000000441A7B
l0000000000441A71:
	SCZO = cond(bpl - 0x45<8>)
	branch Test(NE,Z) l0000000000441C20
	// succ:  l0000000000441A7B l0000000000441C20
l0000000000441A7B:
	r9 = rbx + 2<64>
	SCZO = cond(r13 - r9)
	branch Test(EQ,Z) l0000000000441B50
	// succ:  l0000000000441A88 l0000000000441B50
l0000000000441A88:
	ebx = CONVERT(Mem0[rbx + 2<64>:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	edx = CONVERT(Mem0[r12 + 0x139<64> + rbx:byte], byte, int32)
	rax = rbx
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l0000000000441BE0
	// succ:  l0000000000441AA0 l0000000000441BE0
l0000000000441AA0:
	rbx = r9
	// succ:  l0000000000441AA3
l0000000000441AA3:
	rcx = Mem0[rsp + 0x108<64>:word64]
	rax = Mem0[r15:word64]
	r14b = sil
	r9 = Mem0[rsp + 0xF8<64>:word64]
	r8 = Mem0[rsp + 0x50<64>:word64]
	rax = Mem0[rax + 0x10<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rcx
	ecx = Mem0[rsp + 0x5C<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x70<64>:word64] = rdi
	Mem0[rsp + 0x78<64>:word64] = r14
	Mem0[rsp + 0x30<64>:word32] = edx
	rdx = r15
	Mem0[rsp + 0x38<64>:word32] = ebp
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = Mem0[rsp + 0x48<64>:word64]
	call rax (retsize: 8;)
	rsi = Mem0[rsp + 0x88<64>:word64]
	rdi = Mem0[rsp + 0x80<64>:word64]
	r14b = sil
	// succ:  l0000000000441AFE
l0000000000441AFE:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	SCZO = cond(r13 - rbx)
	branch Test(EQ,Z) l0000000000441B50
	// succ:  l0000000000441B07 l0000000000441B50
l0000000000441B07:
	ebp = CONVERT(Mem0[rbx:byte], byte, word32)
	rbp = CONVERT(ebp, word32, uint64)
	edx = CONVERT(Mem0[r12 + 0x139<64> + rbp:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l0000000000441B80
	// succ:  l0000000000441B1A l0000000000441B80
l0000000000441B1A:
	SCZO = cond(dl - 0x25<8>)
	branch Test(EQ,Z) l0000000000441A44
	// succ:  l0000000000441B23 l0000000000441A44
l0000000000441B23:
	SZO = cond(sil & sil)
	C = false
	eax = CONVERT(Mem0[rbx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l0000000000441AFE
	// succ:  l0000000000441B2B l0000000000441AFE
l0000000000441B2B:
	rdx = Mem0[rdi + 0x28<64>:word64]
	SCZO = cond(rdx - Mem0[rdi + 0x30<64>:word64])
	branch Test(UGE,C) l0000000000441C90
	// succ:  l0000000000441B39 l0000000000441C90
l0000000000441B39:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	Mem0[rdx:byte] = al
	v30 = Mem0[rdi + 0x28<64>:word64] + 1<64>
	Mem0[rdi + 0x28<64>:word64] = v30
	SCZO = cond(v30)
	SCZO = cond(r13 - rbx)
	branch Test(NE,Z) l0000000000441B07
	// succ:  l0000000000441B49 l0000000000441B07
l0000000000441B49:
	// succ:  l0000000000441B50
l0000000000441B50:
	rax = Mem0[rsp + 0xE0<64>:word64]
	r14b = sil
	Mem0[rax:word64] = rdi
	Mem0[rax + 8<64>:word64] = r14
	rsp = rsp + 0x98<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004419C0_exit
l0000000000441B80:
	rdx = Mem0[r12:word64]
	r9 = Mem0[rdx + 0x40<64>:word64]
	rdx = 0x000000000042B620<p64>
	SCZO = cond(r9 - rdx)
	branch Test(NE,Z) l0000000000441C30
	// succ:  l0000000000441B98 l0000000000441C30
l0000000000441B98:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000441B23
	// succ:  l0000000000441B9C l0000000000441B23
l0000000000441B9C:
	Mem0[r12 + 0x139<64> + rbp:byte] = al
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000441B1A
	// succ:  l0000000000441B1A
l0000000000441BB0:
	rdx = Mem0[r12:word64]
	rbp = Mem0[rdx + 0x40<64>:word64]
	rdx = 0x000000000042B620<p64>
	SCZO = cond(rbp - rdx)
	branch Test(NE,Z) l0000000000441C42
	// succ:  l0000000000441BC4 l0000000000441C42
l0000000000441BC4:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000441C10
	// succ:  l0000000000441BC8 l0000000000441C10
l0000000000441BC8:
	Mem0[r12 + 0x139<64> + r11:byte] = al
	ebp = CONVERT(al, byte, int32)
	goto l0000000000441A6B
	// succ:  l0000000000441A6B
l0000000000441BE0:
	rdx = Mem0[r12:word64]
	rcx = 0x000000000042B620<p64>
	r11 = Mem0[rdx + 0x40<64>:word64]
	edx = CONVERT(bl, byte, int32)
	SCZO = cond(r11 - rcx)
	branch Test(NE,Z) l0000000000441C70
	// succ:  l0000000000441BF7 l0000000000441C70
l0000000000441BF7:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000441AA0
	// succ:  l0000000000441BFF l0000000000441AA0
l0000000000441BFF:
	Mem0[r12 + 0x139<64> + rbx:byte] = al
	goto l0000000000441AA0
	// succ:  l0000000000441AA0
l0000000000441C10:
	rbx = r9
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	goto l0000000000441AA3
	// succ:  l0000000000441AA3
l0000000000441C20:
	edx = CONVERT(bpl, byte, int32)
	rbx = r9
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	goto l0000000000441AA3
	// succ:  l0000000000441AA3
l0000000000441C30:
	edx = CONVERT(bpl, byte, int32)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = r12
	call r9 (retsize: 8;)
	goto l0000000000441B98
	// succ:  l0000000000441B98
l0000000000441C42:
	Mem0[rsp + 0x68<64>:word64] = r11
	Mem0[rsp + 0x60<64>:word64] = r9
	edx = CONVERT(r11b, byte, int32)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = r12
	call rbp (retsize: 8;)
	r11 = Mem0[rsp + 0x68<64>:word64]
	r9 = Mem0[rsp + 0x60<64>:word64]
	goto l0000000000441BC4
	// succ:  l0000000000441BC4
l0000000000441C70:
	Mem0[rsp + 0x60<64>:word64] = r9
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = r12
	call r11 (retsize: 8;)
	r9 = Mem0[rsp + 0x60<64>:word64]
	edx = CONVERT(al, byte, int32)
	goto l0000000000441BF7
	// succ:  l0000000000441BF7
l0000000000441C90:
	r8 = Mem0[rdi:word64]
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call Mem0[r8 + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	sil = CONVERT(Test(EQ,Z), bool, int8)
	goto l0000000000441AFE
	// succ:  l0000000000441AFE
fn00000000004419C0_exit:


// fn0000000000441CB0
// Return size: 8
define fn0000000000441CB0
fn0000000000441CB0_entry:
	rsp = fp
	// succ:  l0000000000441CB0
l0000000000441CB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x50<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	ecx = CONVERT(Mem0[rsp + 0x98<64>:byte], byte, int32)
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x40<64>
	Mem0[rsp + 0x40<64>:word128] = xmm1
	Mem0[rsp + 0x38<64>:word32] = ecx
	ecx = CONVERT(Mem0[rsp + 0x90<64>:byte], byte, int32)
	Mem0[rsp + 0x30<64>:word32] = ecx
	rcx = Mem0[rsp + 0x88<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rcx
	ecx = CONVERT(Mem0[rsp + 0x80<64>:byte], byte, int32)
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x50<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000441CB0_exit
fn0000000000441CB0_exit:


// fn0000000000441D10
// Return size: 8
define fn0000000000441D10
fn0000000000441D10_entry:
	rsp = fp
	// succ:  l0000000000441D10
l0000000000441D10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xC8<64>
	SCZO = cond(rsp)
	rbp = Mem0[r8:word64]
	r12 = Mem0[r8 + 8<64>:word64]
	rsi = r9 + 0xD0<64>
	rdi = rcx
	r14d = Mem0[rsp + 0x140<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	r13d = Mem0[rsp + 0x148<64>:word32]
	r13 = CONVERT(r13d, word32, uint64)
	rcx = rsi
	call fn0000000000472FC0 (retsize: 8;)
	rcx = rsi
	rbx = rax
	call fn0000000000472F00 (retsize: 8;)
	SCZO = cond(Mem0[rbx + 0x38<64>:byte] - 0<8>)
	r15 = rax
	branch Test(EQ,Z) l0000000000441E43
	// succ:  l0000000000441D64 l0000000000441E43
l0000000000441D64:
	edx = CONVERT(Mem0[rbx + 0x5E<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000441D68
l0000000000441D68:
	SZO = cond(r13b & r13b)
	C = false
	Mem0[rsp + 0x30<64>:byte] = dl
	branch Test(EQ,Z) l0000000000441E34
	// succ:  l0000000000441D75 l0000000000441E34
l0000000000441D75:
	Mem0[rsp + 0x31<64>:byte] = r13b
	Mem0[rsp + 0x32<64>:byte] = r14b
	Mem0[rsp + 0x33<64>:byte] = 0<8>
	// succ:  l0000000000441D84
l0000000000441D84:
	rax = Mem0[rsp + 0x138<64>:word64]
	rsi = rsp + 0x40<64>
	r9 = rsp + 0x30<64>
	r8d = 0x80<32>
	r8 = CONVERT(r8d, word32, uint64)
	rcx = r15
	rdx = rsi
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000429DE0 (retsize: 8;)
	r8 = rsi
	// succ:  l0000000000441DAF
l0000000000441DAF:
	r10d = Mem0[r8:word32]
	r10 = CONVERT(r10d, word32, uint64)
	r8 = r8 + 4<64>
	SCZO = cond(r8)
	r9d = SLICE(r10 + 0xFFFFFFFFFEFEFEFF<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	r10d = ~r10d
	r10 = CONVERT(r10d, word32, uint64)
	r9d = r9d & r10d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r9d = r9d & 0x80808080<32>
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	branch Test(EQ,Z) l0000000000441DAF
	// succ:  l0000000000441DCC l0000000000441DAF
l0000000000441DCC:
	eax = r9d
	rax = CONVERT(eax, word32, uint64)
	r13d = r12d
	r13 = CONVERT(r13d, word32, uint64)
	eax = eax >>u 0x10<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(r9d & 0x8080<32>)
	C = false
	branch Test(NE,Z) l0000000000441DE0
	// succ:  l0000000000441DDC_1 l0000000000441DE0
l0000000000441DDC_1:
	r9d = eax
	// succ:  l0000000000441DE0
l0000000000441DE0:
	rax = r8 + 2<64>
	branch Test(NE,Z) l0000000000441DE8
	// succ:  l0000000000441DE4_1 l0000000000441DE8
l0000000000441DE4_1:
	r8 = rax
	// succ:  l0000000000441DE8
l0000000000441DE8:
	r9b = r9b + r9b
	SCZO = cond(r9b)
	r8 = r8 - 3<64> - C
	SCZO = cond(r8)
	r8 = r8 - rsi
	SCZO = cond(r8)
	SZO = cond(r12b & r12b)
	C = false
	rbx = CONVERT(r8d, word32, int64)
	branch Test(NE,Z) l0000000000441E16
	// succ:  l0000000000441DFA l0000000000441E16
l0000000000441DFA:
	rax = Mem0[rbp + 0<64>:word64]
	r8 = rbx
	rdx = rsi
	rcx = rbp
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rbx - rax)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l0000000000441E16
	// succ:  l0000000000441E12_1 l0000000000441E16
l0000000000441E12_1:
	r13d = eax
	// succ:  l0000000000441E16
l0000000000441E16:
	rax = rdi
	Mem0[rdi:word64] = rbp
	Mem0[rdi + 8<64>:byte] = r13b
	rsp = rsp + 0xC8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000441D10_exit
l0000000000441E34:
	Mem0[rsp + 0x31<64>:byte] = r14b
	Mem0[rsp + 0x32<64>:byte] = 0<8>
	goto l0000000000441D84
	// succ:  l0000000000441D84
l0000000000441E43:
	rcx = rbx
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = 0x000000000042B5F0<p64>
	edx = 0x25<32>
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(EQ,Z) l0000000000441D68
	// succ:  l0000000000441E67 l0000000000441D68
l0000000000441E67:
	edx = 0x25<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call rax (retsize: 8;)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000441D68
	// succ:  l0000000000441D68
fn0000000000441D10_exit:


// fn0000000000441E80
// Return size: 8
define fn0000000000441E80
fn0000000000441E80_entry:
	rsp = fp
	// succ:  l0000000000441E80
l0000000000441E80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp + 0x100<64>:word64]
	rbp = Mem0[rsp + 0x108<64>:word64]
	Mem0[rsp + 0xD0<64>:word64] = rcx
	r12 = Mem0[r8 + 8<64>:word64]
	rcx = r9 + 0xD0<64>
	r13 = rdx
	Mem0[rsp + 0xE8<64>:word64] = r9
	r14d = CONVERT(Mem0[rsp + 0xF0<64>:word16], word16, word32)
	r14 = CONVERT(r14d, word32, uint64)
	rdi = Mem0[r8:word64]
	call fn0000000000473020 (retsize: 8;)
	SCZO = cond(rbx - rbp)
	esi = r12d
	rsi = CONVERT(esi, word32, uint64)
	r15 = rax
	branch Test(EQ,Z) l0000000000441FED
	// succ:  l0000000000441EE1 l0000000000441FED
l0000000000441EE1:
	rax = rsp + 0x70<64>
	Mem0[rsp + 0x48<64>:word64] = rax
	rax = rsp + 0x60<64>
	Mem0[rsp + 0x50<64>:word64] = rax
	eax = CONVERT(r14w, word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r14 = r15
	Mem0[rsp + 0x5C<64>:word32] = eax
	goto l0000000000441F1B
	// succ:  l0000000000441F1B
l0000000000441F02:
	SZO = cond(sil & sil)
	C = false
	eax = CONVERT(Mem0[rbx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l0000000000442013
	// succ:  l0000000000441F0E l0000000000442013
l0000000000441F0E:
	rbx = rbx + 2<64>
	SCZO = cond(rbx)
	SCZO = cond(rbp - rbx)
	branch Test(EQ,Z) l0000000000441FED
	// succ:  l0000000000441F1B l0000000000441FED
l0000000000441F1B:
	rax = Mem0[r14:word64]
	edx = CONVERT(Mem0[rbx:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = r14
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(al - 0x25<8>)
	branch Test(NE,Z) l0000000000441F02
	// succ:  l0000000000441F2E l0000000000441F02
l0000000000441F2E:
	r15 = rbx + 2<64>
	SCZO = cond(rbp - r15)
	branch Test(EQ,Z) l0000000000441FED
	// succ:  l0000000000441F3B l0000000000441FED
l0000000000441F3B:
	rax = Mem0[r14:word64]
	edx = CONVERT(Mem0[rbx + 2<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = r14
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(al - 0x4F<8>)
	r9d = eax
	r9 = CONVERT(r9d, word32, uint64)
	branch Test(EQ,Z) l0000000000441F5A
	// succ:  l0000000000441F52 l0000000000441F5A
l0000000000441F52:
	SCZO = cond(al - 0x45<8>)
	branch Test(NE,Z) l0000000000442035
	// succ:  l0000000000441F5A l0000000000442035
l0000000000441F5A:
	r15 = rbx + 4<64>
	Mem0[rsp + 0x5B<64>:byte] = r9b
	SCZO = cond(rbp - r15)
	branch Test(EQ,Z) l0000000000441FED
	// succ:  l0000000000441F6C l0000000000441FED
l0000000000441F6C:
	rax = Mem0[r14:word64]
	edx = CONVERT(Mem0[rbx + 4<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = r14
	rbx = r15
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	r9d = CONVERT(Mem0[rsp + 0x5B<64>:byte], byte, int32)
	// succ:  l0000000000441F85
l0000000000441F85:
	rdx = Mem0[r13 + 0<64>:word64]
	eax = CONVERT(al, byte, int32)
	r12b = sil
	r8 = Mem0[rsp + 0x50<64>:word64]
	rcx = Mem0[rsp + 0x48<64>:word64]
	rbx = rbx + 2<64>
	SCZO = cond(rbx)
	r11 = Mem0[rdx + 0x10<64>:word64]
	Mem0[rsp + 0x30<64>:word32] = eax
	rdx = r13
	rax = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rsp + 0x60<64>:word64] = rdi
	Mem0[rsp + 0x68<64>:word64] = r12
	Mem0[rsp + 0x38<64>:word32] = r9d
	r9 = Mem0[rsp + 0xE8<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rax
	eax = Mem0[rsp + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = eax
	call r11 (retsize: 8;)
	rsi = Mem0[rsp + 0x78<64>:word64]
	SCZO = cond(rbp - rbx)
	rdi = Mem0[rsp + 0x70<64>:word64]
	r12b = sil
	branch Test(NE,Z) l0000000000441F1B
	// succ:  l0000000000441FED l0000000000441F1B
l0000000000441FED:
	rax = Mem0[rsp + 0xD0<64>:word64]
	r12b = sil
	Mem0[rax:word64] = rdi
	Mem0[rax + 8<64>:word64] = r12
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000441E80_exit
l0000000000442013:
	rdx = Mem0[rdi + 0x28<64>:word64]
	SCZO = cond(rdx - Mem0[rdi + 0x30<64>:word64])
	branch Test(UGE,C) l0000000000442040
	// succ:  l000000000044201D l0000000000442040
l000000000044201D:
	Mem0[rdx:word16] = ax
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rdi + 0x28<64>:word64] = rdx
	// succ:  l0000000000442028
l0000000000442028:
	SCZO = cond(ax - 0xFFFF<16>)
	sil = CONVERT(Test(EQ,Z), bool, int8)
	goto l0000000000441F0E
	// succ:  l0000000000441F0E
l0000000000442035:
	rbx = r15
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	goto l0000000000441F85
	// succ:  l0000000000441F85
l0000000000442040:
	edx = CONVERT(ax, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x68<64>:word64] (retsize: 8;)
	goto l0000000000442028
	// succ:  l0000000000442028
fn0000000000441E80_exit:


// fn0000000000442050
// Return size: 8
define fn0000000000442050
fn0000000000442050_entry:
	rsp = fp
	// succ:  l0000000000442050
l0000000000442050:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x50<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	ecx = CONVERT(Mem0[rsp + 0x98<64>:byte], byte, int32)
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x40<64>
	Mem0[rsp + 0x40<64>:word128] = xmm1
	Mem0[rsp + 0x38<64>:word32] = ecx
	ecx = CONVERT(Mem0[rsp + 0x90<64>:byte], byte, int32)
	Mem0[rsp + 0x30<64>:word32] = ecx
	rcx = Mem0[rsp + 0x88<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rcx
	ecx = CONVERT(Mem0[rsp + 0x80<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x50<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000442050_exit
fn0000000000442050_exit:


// fn00000000004420B0
// Return size: 8
define fn00000000004420B0
fn00000000004420B0_entry:
	rsp = fp
	// succ:  l00000000004420B0
l00000000004420B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x140<64>
	SCZO = cond(rsp)
	rbp = Mem0[r8:word64]
	r12 = Mem0[r8 + 8<64>:word64]
	r13 = r9 + 0xD0<64>
	rsi = rcx
	edi = Mem0[rsp + 0x1B8<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	ebx = Mem0[rsp + 0x1B0<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	rcx = r13
	call fn0000000000473020 (retsize: 8;)
	rcx = r13
	r14 = rax
	call fn0000000000472F60 (retsize: 8;)
	r13 = rax
	rax = Mem0[r14:word64]
	edx = 0x25<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r14
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	SZO = cond(dil & dil)
	C = false
	Mem0[rsp + 0x30<64>:word16] = ax
	branch Test(EQ,Z) l00000000004421A0
	// succ:  l0000000000442112 l00000000004421A0
l0000000000442112:
	di = CONVERT(dil, byte, int16)
	bx = CONVERT(bl, byte, int16)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x32<64>:word16] = di
	Mem0[rsp + 0x34<64>:word16] = bx
	Mem0[rsp + 0x36<64>:word16] = ax
	// succ:  l000000000044212C
l000000000044212C:
	rax = Mem0[rsp + 0x1A8<64>:word64]
	rdi = rsp + 0x40<64>
	r9 = rsp + 0x30<64>
	rcx = r13
	r8d = 0x80<32>
	r8 = CONVERT(r8d, word32, uint64)
	r13d = r12d
	r13 = CONVERT(r13d, word32, uint64)
	rdx = rdi
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn000000000042A170 (retsize: 8;)
	rcx = rdi
	eax = wcslen(rcx)
	SZO = cond(r12b & r12b)
	C = false
	rbx = CONVERT(eax, word32, int64)
	branch Test(NE,Z) l0000000000442183
	// succ:  l0000000000442167 l0000000000442183
l0000000000442167:
	rax = Mem0[rbp + 0<64>:word64]
	r8 = rbx
	rdx = rdi
	rcx = rbp
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rbx - rax)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l0000000000442183
	// succ:  l000000000044217F_1 l0000000000442183
l000000000044217F_1:
	r13d = eax
	// succ:  l0000000000442183
l0000000000442183:
	rax = rsi
	Mem0[rsi:word64] = rbp
	Mem0[rsi + 8<64>:byte] = r13b
	rsp = rsp + 0x140<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004420B0_exit
l00000000004421A0:
	bx = CONVERT(bl, byte, int16)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x32<64>:word16] = bx
	Mem0[rsp + 0x34<64>:word16] = dx
	goto l000000000044212C
	// succ:  l000000000044212C
fn00000000004420B0_exit:


// fn00000000004421C0
// Return size: 8
define fn00000000004421C0
fn00000000004421C0_entry:
	rsp = fp
	// succ:  l00000000004421C0
l00000000004421C0:
	rax = 0x000000000048E060<p64>
	return
	// succ:  fn00000000004421C0_exit
fn00000000004421C0_exit:


// fn00000000004421D0
// Return size: 8
define fn00000000004421D0
fn00000000004421D0_entry:
	rsp = fp
	// succ:  l00000000004421D0
l00000000004421D0:
	eax = Mem0[rcx + 0x1C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004421D0_exit
fn00000000004421D0_exit:


// fn00000000004421E0
// Return size: 8
define fn00000000004421E0
fn00000000004421E0_entry:
	rsp = fp
	// succ:  l00000000004421E0
l00000000004421E0:
	eax = Mem0[rcx + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn00000000004421E0_exit
fn00000000004421E0_exit:


// fn00000000004421F0
// Return size: 8
define fn00000000004421F0
fn00000000004421F0_entry:
	rsp = fp
	// succ:  l00000000004421F0
l00000000004421F0:
	SZO = cond(Mem0[rcx + 0x20<64>:byte] & 2<8>)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	return
	// succ:  fn00000000004421F0_exit
fn00000000004421F0_exit:


// fn0000000000442200
// Return size: 8
define fn0000000000442200
fn0000000000442200_entry:
	rsp = fp
	// succ:  l0000000000442200
l0000000000442200:
	rax = Mem0[rcx + 0xD8<64>:word64]
	return
	// succ:  fn0000000000442200_exit
fn0000000000442200_exit:


// fn0000000000442210
// Return size: 8
define fn0000000000442210
fn0000000000442210_entry:
	rsp = fp
	// succ:  l0000000000442210
l0000000000442210:
	SZO = cond(Mem0[rcx + 0x20<64>:byte] & 5<8>)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	return
	// succ:  fn0000000000442210_exit
fn0000000000442210_exit:


// fn0000000000442220
// Return size: 8
define fn0000000000442220
fn0000000000442220_entry:
	rsp = fp
	// succ:  l0000000000442220
l0000000000442220:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0xE1<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000442240
	// succ:  l000000000044222F l0000000000442240
l000000000044222F:
	eax = CONVERT(Mem0[rcx + 0xE0<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000442220_exit
l0000000000442240:
	rsi = Mem0[rcx + 0xF0<64>:word64]
	rbx = rcx
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000044229D
	// succ:  l000000000044224F l000000000044229D
l000000000044224F:
	SCZO = cond(Mem0[rsi + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000442270
	// succ:  l0000000000442255 l0000000000442270
l0000000000442255:
	eax = CONVERT(Mem0[rsi + 0x59<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000442259
l0000000000442259:
	Mem0[rbx + 0xE0<64>:byte] = al
	Mem0[rbx + 0xE1<64>:byte] = 1<8>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000442220_exit
l0000000000442270:
	rcx = rsi
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdx = 0x000000000042B5F0<p64>
	r8 = Mem0[rax + 0x30<64>:word64]
	eax = 0x20<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8 - rdx)
	branch Test(EQ,Z) l0000000000442259
	// succ:  l0000000000442290 l0000000000442259
l0000000000442290:
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	call r8 (retsize: 8;)
	goto l0000000000442259
	// succ:  l0000000000442259
l000000000044229D:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l00000000004422AF_thunk_fn00000000004422B0
l00000000004422AF_thunk_fn00000000004422B0:
	call fn00000000004422B0 (retsize: 0;)
	return
	// succ:  fn0000000000442220_exit
fn0000000000442220_exit:


// fn00000000004422B0
// Return size: 8
define fn00000000004422B0
fn00000000004422B0_entry:
	rsp = fp
	// succ:  l00000000004422B0
l00000000004422B0:
	eax = Mem0[rcx + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	return
	// succ:  fn00000000004422B0_exit
fn00000000004422B0_exit:


// fn00000000004422C0
// Return size: 8
define fn00000000004422C0
fn00000000004422C0_entry:
	rsp = fp
	// succ:  l00000000004422C0
l00000000004422C0:
	rax = Mem0[rcx + 0xE8<64>:word64]
	return
	// succ:  fn00000000004422C0_exit
fn00000000004422C0_exit:


// fn00000000004422D0
// Return size: 8
define fn00000000004422D0
fn00000000004422D0_entry:
	rsp = fp
	// succ:  l00000000004422D0
l00000000004422D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rcx + 0xF0<64>:word64]
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000044232D
	// succ:  l00000000004422E4 l000000000044232D
l00000000004422E4:
	SCZO = cond(Mem0[rbx + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000442300
	// succ:  l00000000004422EA l0000000000442300
l00000000004422EA:
	esi = CONVERT(dl, byte, word32)
	rsi = CONVERT(esi, word32, uint64)
	eax = CONVERT(Mem0[rbx + 0x39<64> + rsi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004422F2
l00000000004422F2:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004422D0_exit
l0000000000442300:
	rcx = rbx
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rdx = 0x000000000042B5F0<p64>
	r8 = Mem0[rax + 0x30<64>:word64]
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8 - rdx)
	branch Test(EQ,Z) l00000000004422F2
	// succ:  l000000000044231D l00000000004422F2
l000000000044231D:
	edx = CONVERT(sil, byte, int32)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call r8 (retsize: 0;)
	return
	// succ:  fn00000000004422D0_exit
l000000000044232D:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000044233F_thunk_fn0000000000442340
l000000000044233F_thunk_fn0000000000442340:
	call fn0000000000442340 (retsize: 0;)
	return
	// succ:  fn00000000004422D0_exit
fn00000000004422D0_exit:


// fn0000000000442340
// Return size: 8
define fn0000000000442340
fn0000000000442340_entry:
	rsp = fp
	// succ:  l0000000000442340
l0000000000442340:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rcx + 0xF0<64>:word64]
	edi = r8d
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l00000000004423B4
	// succ:  l0000000000442356 l00000000004423B4
l0000000000442356:
	esi = CONVERT(dl, byte, word32)
	rsi = CONVERT(esi, word32, uint64)
	eax = CONVERT(Mem0[rbx + 0x139<64> + rsi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000442370
	// succ:  l0000000000442365 l0000000000442370
l0000000000442365:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000442340_exit
l0000000000442370:
	rax = Mem0[rbx:word64]
	rcx = 0x000000000042B620<p64>
	r9 = Mem0[rax + 0x40<64>:word64]
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r9 - rcx)
	branch Test(NE,Z) l00000000004423A0
	// succ:  l0000000000442385 l00000000004423A0
l0000000000442385:
	SCZO = cond(dil - al)
	branch Test(EQ,Z) l00000000004423B0
	// succ:  l000000000044238A l00000000004423B0
l000000000044238A:
	Mem0[rbx + 0x139<64> + rsi:byte] = al
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000442340_exit
l00000000004423A0:
	edx = CONVERT(dl, byte, int32)
	r8d = CONVERT(r8b, byte, int32)
	rcx = rbx
	call r9 (retsize: 8;)
	goto l0000000000442385
	// succ:  l0000000000442385
l00000000004423B0:
	eax = edi
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000442365
	// succ:  l0000000000442365
l00000000004423B4:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l00000000004423BF_thunk_fn00000000004423C0
l00000000004423BF_thunk_fn00000000004423C0:
	call fn00000000004423C0 (retsize: 0;)
	return
	// succ:  fn0000000000442340_exit
fn0000000000442340_exit:


// fn00000000004423C0
// Return size: 8
define fn00000000004423C0
fn00000000004423C0_entry:
	rsp = fp
	// succ:  l00000000004423C0
l00000000004423C0:
	eax = Mem0[rcx + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004423C0_exit
fn00000000004423C0_exit:


// fn00000000004423D0
// Return size: 8
define fn00000000004423D0
fn00000000004423D0_entry:
	rsp = fp
	// succ:  l00000000004423D0
l00000000004423D0:
	SZO = cond(Mem0[rcx + 0x20<64>:byte] & 5<8>)
	C = false
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l00000000004423DD
	// succ:  l00000000004423D9_1 l00000000004423DD
l00000000004423D9_1:
	rax = rcx
	// succ:  l00000000004423DD
l00000000004423DD:
	return
	// succ:  fn00000000004423D0_exit
fn00000000004423D0_exit:


// fn00000000004423E0
// Return size: 8
define fn00000000004423E0
fn00000000004423E0_entry:
	rsp = fp
	// succ:  l00000000004423E0
l00000000004423E0:
	SZO = cond(Mem0[rcx + 0x20<64>:byte] & 5<8>)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	return
	// succ:  fn00000000004423E0_exit
fn00000000004423E0_exit:


// fn00000000004423F0
// Return size: 8
define fn00000000004423F0
fn00000000004423F0_entry:
	rsp = fp
	// succ:  l00000000004423F0
l00000000004423F0:
	eax = Mem0[rcx + 0x1C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004423F0_exit
fn00000000004423F0_exit:


// fn0000000000442400
// Return size: 8
define fn0000000000442400
fn0000000000442400_entry:
	rsp = fp
	// succ:  l0000000000442400
l0000000000442400:
	eax = Mem0[rcx + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000442400_exit
fn0000000000442400_exit:


// fn0000000000442410
// Return size: 8
define fn0000000000442410
fn0000000000442410_entry:
	rsp = fp
	// succ:  l0000000000442410
l0000000000442410:
	SZO = cond(Mem0[rcx + 0x20<64>:byte] & 2<8>)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	return
	// succ:  fn0000000000442410_exit
fn0000000000442410_exit:


// fn0000000000442420
// Return size: 8
define fn0000000000442420
fn0000000000442420_entry:
	rsp = fp
	// succ:  l0000000000442420
l0000000000442420:
	rax = Mem0[rcx + 0xD8<64>:word64]
	return
	// succ:  fn0000000000442420_exit
fn0000000000442420_exit:


// fn0000000000442430
// Return size: 8
define fn0000000000442430
fn0000000000442430_entry:
	rsp = fp
	// succ:  l0000000000442430
l0000000000442430:
	SZO = cond(Mem0[rcx + 0x20<64>:byte] & 5<8>)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	return
	// succ:  fn0000000000442430_exit
fn0000000000442430_exit:


// fn0000000000442440
// Return size: 8
define fn0000000000442440
fn0000000000442440_entry:
	rsp = fp
	// succ:  l0000000000442440
l0000000000442440:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0xE2<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000442460
	// succ:  l000000000044244E l0000000000442460
l000000000044244E:
	eax = CONVERT(Mem0[rcx + 0xE0<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000442440_exit
l0000000000442460:
	rbx = rcx
	rcx = Mem0[rcx + 0xF0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044248E
	// succ:  l000000000044246F l000000000044248E
l000000000044246F:
	rax = Mem0[rcx:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	Mem0[rbx + 0xE0<64>:word16] = ax
	Mem0[rbx + 0xE2<64>:byte] = 1<8>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000442440_exit
l000000000044248E:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000044249F_thunk_fn00000000004424A0
l000000000044249F_thunk_fn00000000004424A0:
	call fn00000000004424A0 (retsize: 0;)
	return
	// succ:  fn0000000000442440_exit
fn0000000000442440_exit:


// fn00000000004424A0
// Return size: 8
define fn00000000004424A0
fn00000000004424A0_entry:
	rsp = fp
	// succ:  l00000000004424A0
l00000000004424A0:
	eax = Mem0[rcx + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	return
	// succ:  fn00000000004424A0_exit
fn00000000004424A0_exit:


// fn00000000004424B0
// Return size: 8
define fn00000000004424B0
fn00000000004424B0_entry:
	rsp = fp
	// succ:  l00000000004424B0
l00000000004424B0:
	rax = Mem0[rcx + 0xE8<64>:word64]
	return
	// succ:  fn00000000004424B0_exit
fn00000000004424B0_exit:


// fn00000000004424C0
// Return size: 8
define fn00000000004424C0
fn00000000004424C0_entry:
	rsp = fp
	// succ:  l00000000004424C0
l00000000004424C0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = Mem0[rcx + 0xF0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004424E1
	// succ:  l00000000004424D0 l00000000004424E1
l00000000004424D0:
	rax = Mem0[rcx:word64]
	edx = CONVERT(dl, byte, int32)
	rax = Mem0[rax + 0x50<64>:word64]
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	call rax (retsize: 0;)
	return
	// succ:  fn00000000004424C0_exit
l00000000004424E1:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l00000000004424EF_thunk_fn00000000004424F0
l00000000004424EF_thunk_fn00000000004424F0:
	call fn00000000004424F0 (retsize: 0;)
	return
	// succ:  fn00000000004424C0_exit
fn00000000004424C0_exit:


// fn00000000004424F0
// Return size: 8
define fn00000000004424F0
fn00000000004424F0_entry:
	rsp = fp
	// succ:  l00000000004424F0
l00000000004424F0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = Mem0[rcx + 0xF0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000442515
	// succ:  l0000000000442500 l0000000000442515
l0000000000442500:
	rax = Mem0[rcx:word64]
	edx = CONVERT(dx, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8d = CONVERT(r8b, byte, int32)
	rax = Mem0[rax + 0x60<64>:word64]
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	call rax (retsize: 0;)
	return
	// succ:  fn00000000004424F0_exit
l0000000000442515:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000044251F_thunk_fn0000000000442520
l000000000044251F_thunk_fn0000000000442520:
	call fn0000000000442520 (retsize: 0;)
	return
	// succ:  fn00000000004424F0_exit
fn00000000004424F0_exit:


// fn0000000000442520
// Return size: 8
define fn0000000000442520
fn0000000000442520_entry:
	rsp = fp
	// succ:  l0000000000442520
l0000000000442520:
	eax = Mem0[rcx + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000442520_exit
fn0000000000442520_exit:


// fn0000000000442530
// Return size: 8
define fn0000000000442530
fn0000000000442530_entry:
	rsp = fp
	// succ:  l0000000000442530
l0000000000442530:
	SZO = cond(Mem0[rcx + 0x20<64>:byte] & 5<8>)
	C = false
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l000000000044253D
	// succ:  l0000000000442539_1 l000000000044253D
l0000000000442539_1:
	rax = rcx
	// succ:  l000000000044253D
l000000000044253D:
	return
	// succ:  fn0000000000442530_exit
fn0000000000442530_exit:


// fn0000000000442540
// Return size: 8
define fn0000000000442540
fn0000000000442540_entry:
	rsp = fp
	// succ:  l0000000000442540
l0000000000442540:
	SZO = cond(Mem0[rcx + 0x20<64>:byte] & 5<8>)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	return
	// succ:  fn0000000000442540_exit
fn0000000000442540_exit:


// fn0000000000442550
// Return size: 8
define fn0000000000442550
fn0000000000442550_entry:
	rsp = fp
	// succ:  l0000000000442550
l0000000000442550:
	rax = 0x000000000048D810<p64>
	return
	// succ:  fn0000000000442550_exit
fn0000000000442550_exit:


// fn0000000000442560
// Return size: 8
define fn0000000000442560
fn0000000000442560_entry:
	rsp = fp
	// succ:  l0000000000442560
l0000000000442560:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xE8<64>
	SCZO = cond(rsp)
	rax = Mem0[r8:word64]
	rdx = Mem0[r8 + 8<64>:word64]
	Mem0[rsp + 0x130<64>:word64] = rcx
	Mem0[rsp + 0x90<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0x98<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0x80<64>:word64] = rax
	rax = Mem0[rsp + 0x150<64>:word64]
	Mem0[rsp + 0x88<64>:word64] = rdx
	rbx = rax + 0xD0<64>
	rcx = rbx
	call fn0000000000472FC0 (retsize: 8;)
	rcx = rsp + 0xAE<64>
	rdx = rbx
	r14 = rax
	call fn000000000042A560 (retsize: 8;)
	rbp = rax
	rax = rax + 0x64<64>
	Mem0[rsp + 0x76<64>:byte] = 0<8>
	SCZO = cond(Mem0[rbp + 0x40<64>:word64] - 0<64>)
	Mem0[rsp + 0x40<64>:word64] = rax
	branch Test(EQ,Z) l00000000004425F5
	// succ:  l00000000004425EB l00000000004425F5
l00000000004425EB:
	SCZO = cond(Mem0[rbp + 0x50<64>:word64] - 0<64>)
	Mem0[rsp + 0x76<64>:byte] = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l00000000004425F5
l00000000004425F5:
	rax = rsp + 0xD0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x48<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x20<64>:byte] - 0<8>)
	Mem0[rsp + 0xC0<64>:word64] = rax
	branch Test(EQ,Z) l000000000044262E
	// succ:  l000000000044261C l000000000044262E
l000000000044261C:
	rcx = rsp + 0xC0<64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000451BE0 (retsize: 8;)
	// succ:  l000000000044262E
l000000000044262E:
	rax = rsp + 0xAF<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x78<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	rcx = Mem0[rsp + 0x48<64>:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsp + 0xD0<64>:word64] = rax
	call fn0000000000451BE0 (retsize: 8;)
	rax = rbp + 0x65<64>
	r15 = Mem0[0x0000000000491720<p64>:word64]
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	Mem0[rsp + 0x75<64>:byte] = 0<8>
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	Mem0[rsp + 0x70<64>:word32] = 0<32>
	Mem0[rsp + 0x38<64>:word64] = rax
	eax = Mem0[rbp + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	Mem0[rsp + 0x77<64>:byte] = 0<8>
	Mem0[rsp + 0xB0<64>:word32] = eax
	rax = rsp + 0xB0<64>
	Mem0[rsp + 0x58<64>:word64] = rax
	rax = rsp + 0x80<64>
	Mem0[rsp + 0x68<64>:word64] = rax
	rax = rsp + 0x90<64>
	Mem0[rsp + 0x60<64>:word64] = rax
	// succ:  l00000000004426C0
l00000000004426C0:
	rax = Mem0[rsp + 0x58<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 4<8>)
	branch Test(UGT,CZ) l00000000004429C8
	// succ:  l00000000004426D0 l00000000004429C8
l00000000004426D0:
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x000000000048E040<p64>
	rdx = CONVERT(Mem0[rax + rdx * 4<64>:word32], word32, int64)
	rax = rax + rdx
	SCZO = cond(rax)
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000442560_exit
l0000000000442749:
	eax = SLICE(r12 + 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 3<32>)
	branch Test(GT,SZO) l00000000004429F5
	// succ:  l0000000000442757 l00000000004429F5
l0000000000442757:
	r12 = r12 + 1<64>
	SCZO = cond(r12)
	goto l00000000004426C0
	// succ:  l00000000004426C0
l00000000004429C8:
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	goto l0000000000442749
	// succ:  l0000000000442749
l00000000004429F5:
	SCZO = cond(Mem0[rsp + 0x50<64>:word64] - 1<64>)
	al = CONVERT(Test(UGT,CZ), bool, int8)
	eax = eax & edi
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000443240
	// succ:  l0000000000442A08 l0000000000443240
l0000000000442A08:
	SCZO = cond(Mem0[rsp + 0x77<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000044325C
	// succ:  l0000000000442A13 l000000000044325C
l0000000000442A13:
	r13 = Mem0[rbp + 0x38<64>:word64]
	// succ:  l0000000000442A17
l0000000000442A17:
	r12 = rsp + 0x80<64>
	rdi = rsp + 0x90<64>
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000442A30
l0000000000442A30:
	rdx = r12
	rcx = rdi
	call fn000000000042AF60 (retsize: 8;)
	SCZO = cond(rbx - Mem0[rsp + 0x50<64>:word64])
	dl = CONVERT(Test(ULT,C), bool, int8)
	SCZO = cond(al - dl)
	branch Test(ULT,C) l0000000000443265
	// succ:  l0000000000442A4B l0000000000443265
l0000000000442A4B:
	SCZO = cond(rbx - Mem0[rsp + 0x50<64>:word64])
	branch Test(NE,Z) l0000000000442F05
	// succ:  l0000000000442A56 l0000000000442F05
l0000000000442A56:
	rax = Mem0[rsp + 0xD0<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 1<64>)
	branch Test(ULE,CZ) l0000000000442A95
	// succ:  l0000000000442A65 l0000000000442A95
l0000000000442A65:
	rcx = Mem0[rsp + 0x48<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000428600 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000442A95
	// succ:  l0000000000442A7C l0000000000442A95
l0000000000442A7C:
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	r8 = rax
	branch Test(EQ,Z) l0000000000443302
	// succ:  l0000000000442A89 l0000000000443302
l0000000000442A89:
	rcx = Mem0[rsp + 0x48<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn0000000000450D50 (retsize: 8;)
	// succ:  l0000000000442A95
l0000000000442A95:
	SCZO = cond(Mem0[rsp + 0x77<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000442B03
	// succ:  l0000000000442A9C l0000000000442B03
l0000000000442A9C:
	rax = Mem0[rsp + 0xD0<64>:word64]
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l0000000000443323
	// succ:  l0000000000442AAF l0000000000443323
l0000000000442AAF:
	rcx = Mem0[rsp + 0x48<64>:word64]
	call fn00000000004505A0 (retsize: 8;)
	rax = Mem0[rsp + 0xD0<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x30<8>)
	branch Test(EQ,Z) l0000000000442B03
	// succ:  l0000000000442AC6 l0000000000442B03
l0000000000442AC6:
	eax = Mem0[rax - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000442AD7
	// succ:  l0000000000442ACD l0000000000442AD7
l0000000000442ACD:
	rcx = Mem0[rsp + 0x48<64>:word64]
	call fn00000000004505A0 (retsize: 8;)
	// succ:  l0000000000442AD7
l0000000000442AD7:
	rcx = Mem0[rsp + 0x48<64>:word64]
	Mem0[rsp + 0x20<64>:word32] = 0x2D<32>
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn00000000004508E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[rsp + 0xD0<64>:word64]
	Mem0[rax - 8<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l0000000000442B03
l0000000000442B03:
	rax = Mem0[rsp + 0xC0<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000442B52
	// succ:  l0000000000442B12 l0000000000442B52
l0000000000442B12:
	eax = CONVERT(Mem0[rsp + 0x70<64>:byte], byte, int32)
	SCZO = cond(Mem0[rsp + 0x75<64>:byte] - 0<8>)
	rbx = rsp + 0xC0<64>
	edx = CONVERT(sil, byte, int32)
	rcx = rbx
	branch Test(EQ,Z) l0000000000442B2E
	// succ:  l0000000000442B2B_1 l0000000000442B2E
l0000000000442B2B_1:
	edx = eax
	// succ:  l0000000000442B2E
l0000000000442B2E:
	call fn0000000000451E10 (retsize: 8;)
	rdx = Mem0[rbp + 0x18<64>:word64]
	rcx = Mem0[rbp + 0x10<64>:word64]
	r8 = rbx
	call fn00000000004708F0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000442B52
	// succ:  l0000000000442B47 l0000000000442B52
l0000000000442B47:
	rax = Mem0[rsp + 0x158<64>:word64]
	v36 = Mem0[rax:word32] | 4<32>
	Mem0[rax:word32] = v36
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l0000000000442B52
l0000000000442B52:
	SCZO = cond(Mem0[rsp + 0x75<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000044324E
	// succ:  l0000000000442B5D l000000000044324E
l0000000000442B5D:
	rdx = Mem0[rsp + 0x48<64>:word64]
	rcx = Mem0[rsp + 0x160<64>:word64]
	call fn0000000000450C50 (retsize: 8;)
	r12 = rsp + 0x80<64>
	rdi = rsp + 0x90<64>
	goto l0000000000442F10
	// succ:  l0000000000442F10
l0000000000442EF5:
	r12 = rsp + 0x80<64>
	rdi = rsp + 0x90<64>
	// succ:  l0000000000442F05
l0000000000442F05:
	rax = Mem0[rsp + 0x158<64>:word64]
	v32 = Mem0[rax:word32] | 4<32>
	Mem0[rax:word32] = v32
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l0000000000442F10
l0000000000442F10:
	rdx = r12
	rcx = rdi
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000442F2A
	// succ:  l0000000000442F1F l0000000000442F2A
l0000000000442F1F:
	rax = Mem0[rsp + 0x158<64>:word64]
	v33 = Mem0[rax:word32] | 2<32>
	Mem0[rax:word32] = v33
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l0000000000442F2A
l0000000000442F2A:
	rax = Mem0[rsp + 0x90<64>:word64]
	rsi = Mem0[rsp + 0x130<64>:word64]
	rdx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsi:word64] = rax
	rax = Mem0[rsp + 0xD0<64>:word64]
	Mem0[rsi + 8<64>:word64] = rdx
	rdx = Mem0[rsp + 0x78<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	rax = Mem0[rsp + 0xC0<64>:word64]
	rdx = Mem0[rsp + 0x48<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	rax = Mem0[rsp + 0x130<64>:word64]
	rsp = rsp + 0xE8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000442560_exit
l0000000000443240:
	SZO = cond(dil & dil)
	C = false
	branch Test(NE,Z) l0000000000442A56
	// succ:  l0000000000443249 l0000000000442A56
l0000000000443249:
	goto l0000000000442EF5
	// succ:  l0000000000442EF5
l000000000044324E:
	SCZO = cond(Mem0[rbp + 0x58<64>:word32] - esi)
	branch Test(NE,Z) l0000000000442EF5
	// succ:  l0000000000443257 l0000000000442EF5
l0000000000443257:
	goto l0000000000442B5D
	// succ:  l0000000000442B5D
l000000000044325C:
	r13 = Mem0[rbp + 0x48<64>:word64]
	goto l0000000000442A17
	// succ:  l0000000000442A17
l0000000000443265:
	rcx = rdi
	call fn000000000042B050 (retsize: 8;)
	SCZO = cond(Mem0[r13 + 0<64> + rbx:byte] - al)
	branch Test(NE,Z) l0000000000442A4B
	// succ:  l0000000000443278 l0000000000442A4B
l0000000000443278:
	rcx = Mem0[rsp + 0x90<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004432A2
	// succ:  l0000000000443285 l00000000004432A2
l0000000000443285:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004432AB
	// succ:  l000000000044328F l00000000004432AB
l000000000044328F:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l0000000000443297
l0000000000443297:
	Mem0[rsp + 0x98<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l00000000004432A2
l00000000004432A2:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	goto l0000000000442A30
	// succ:  l0000000000442A30
l00000000004432AB:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l0000000000443297
	// succ:  l0000000000443297
l0000000000443302:
	rax = Mem0[rsp + 0xD0<64>:word64]
	rcx = Mem0[rsp + 0x48<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = Mem0[rax - 0x18<64>:word64]
	r8 = r8 - 1<64>
	SCZO = cond(r8)
	call fn0000000000450D50 (retsize: 8;)
	goto l0000000000442A95
	// succ:  l0000000000442A95
l0000000000443323:
	SCZO = cond(Mem0[rax:byte] - 0x30<8>)
	branch Test(NE,Z) l0000000000442AD7
	// succ:  l000000000044332C l0000000000442AD7
l000000000044332C:
	rax = Mem0[rsp + 0xC0<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000442B52
	// succ:  l000000000044333F l0000000000442B52
l000000000044333F:
	goto l0000000000442B12
	// succ:  l0000000000442B12
fn0000000000442560_exit:


// fn0000000000443380
// Return size: 8
define fn0000000000443380
fn0000000000443380_entry:
	rsp = fp
	// succ:  l0000000000443380
l0000000000443380:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xE8<64>
	SCZO = cond(rsp)
	rax = Mem0[r8:word64]
	rdx = Mem0[r8 + 8<64>:word64]
	Mem0[rsp + 0x130<64>:word64] = rcx
	Mem0[rsp + 0x90<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0x98<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0x80<64>:word64] = rax
	rax = Mem0[rsp + 0x150<64>:word64]
	Mem0[rsp + 0x88<64>:word64] = rdx
	rbx = rax + 0xD0<64>
	rcx = rbx
	call fn0000000000472FC0 (retsize: 8;)
	rcx = rsp + 0xAE<64>
	rdx = rbx
	r14 = rax
	call fn000000000042A690 (retsize: 8;)
	rbp = rax
	rax = rax + 0x64<64>
	Mem0[rsp + 0x76<64>:byte] = 0<8>
	SCZO = cond(Mem0[rbp + 0x40<64>:word64] - 0<64>)
	Mem0[rsp + 0x40<64>:word64] = rax
	branch Test(EQ,Z) l0000000000443415
	// succ:  l000000000044340B l0000000000443415
l000000000044340B:
	SCZO = cond(Mem0[rbp + 0x50<64>:word64] - 0<64>)
	Mem0[rsp + 0x76<64>:byte] = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l0000000000443415
l0000000000443415:
	rax = rsp + 0xD0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x48<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x20<64>:byte] - 0<8>)
	Mem0[rsp + 0xC0<64>:word64] = rax
	branch Test(EQ,Z) l000000000044344E
	// succ:  l000000000044343C l000000000044344E
l000000000044343C:
	rcx = rsp + 0xC0<64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000451BE0 (retsize: 8;)
	// succ:  l000000000044344E
l000000000044344E:
	rax = rsp + 0xAF<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x78<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	rcx = Mem0[rsp + 0x48<64>:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsp + 0xD0<64>:word64] = rax
	call fn0000000000451BE0 (retsize: 8;)
	rax = rbp + 0x65<64>
	r15 = Mem0[0x0000000000491720<p64>:word64]
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	Mem0[rsp + 0x75<64>:byte] = 0<8>
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	Mem0[rsp + 0x70<64>:word32] = 0<32>
	Mem0[rsp + 0x38<64>:word64] = rax
	eax = Mem0[rbp + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	Mem0[rsp + 0x77<64>:byte] = 0<8>
	Mem0[rsp + 0xB0<64>:word32] = eax
	rax = rsp + 0xB0<64>
	Mem0[rsp + 0x58<64>:word64] = rax
	rax = rsp + 0x80<64>
	Mem0[rsp + 0x68<64>:word64] = rax
	rax = rsp + 0x90<64>
	Mem0[rsp + 0x60<64>:word64] = rax
	// succ:  l00000000004434E0
l00000000004434E0:
	rax = Mem0[rsp + 0x58<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 4<8>)
	branch Test(UGT,CZ) l00000000004437E8
	// succ:  l00000000004434F0 l00000000004437E8
l00000000004434F0:
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x000000000048E02C<p64>
	rdx = CONVERT(Mem0[rax + rdx * 4<64>:word32], word32, int64)
	rax = rax + rdx
	SCZO = cond(rax)
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000443380_exit
l0000000000443569:
	eax = SLICE(r12 + 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 3<32>)
	branch Test(GT,SZO) l0000000000443815
	// succ:  l0000000000443577 l0000000000443815
l0000000000443577:
	r12 = r12 + 1<64>
	SCZO = cond(r12)
	goto l00000000004434E0
	// succ:  l00000000004434E0
l00000000004437E8:
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	goto l0000000000443569
	// succ:  l0000000000443569
l0000000000443815:
	SCZO = cond(Mem0[rsp + 0x50<64>:word64] - 1<64>)
	al = CONVERT(Test(UGT,CZ), bool, int8)
	eax = eax & edi
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000444060
	// succ:  l0000000000443828 l0000000000444060
l0000000000443828:
	SCZO = cond(Mem0[rsp + 0x77<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000044407C
	// succ:  l0000000000443833 l000000000044407C
l0000000000443833:
	r13 = Mem0[rbp + 0x38<64>:word64]
	// succ:  l0000000000443837
l0000000000443837:
	r12 = rsp + 0x80<64>
	rdi = rsp + 0x90<64>
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000443850
l0000000000443850:
	rdx = r12
	rcx = rdi
	call fn000000000042AF60 (retsize: 8;)
	SCZO = cond(rbx - Mem0[rsp + 0x50<64>:word64])
	dl = CONVERT(Test(ULT,C), bool, int8)
	SCZO = cond(al - dl)
	branch Test(ULT,C) l0000000000444085
	// succ:  l000000000044386B l0000000000444085
l000000000044386B:
	SCZO = cond(rbx - Mem0[rsp + 0x50<64>:word64])
	branch Test(NE,Z) l0000000000443D25
	// succ:  l0000000000443876 l0000000000443D25
l0000000000443876:
	rax = Mem0[rsp + 0xD0<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 1<64>)
	branch Test(ULE,CZ) l00000000004438B5
	// succ:  l0000000000443885 l00000000004438B5
l0000000000443885:
	rcx = Mem0[rsp + 0x48<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000428600 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004438B5
	// succ:  l000000000044389C l00000000004438B5
l000000000044389C:
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	r8 = rax
	branch Test(EQ,Z) l0000000000444122
	// succ:  l00000000004438A9 l0000000000444122
l00000000004438A9:
	rcx = Mem0[rsp + 0x48<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn0000000000450D50 (retsize: 8;)
	// succ:  l00000000004438B5
l00000000004438B5:
	SCZO = cond(Mem0[rsp + 0x77<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000443923
	// succ:  l00000000004438BC l0000000000443923
l00000000004438BC:
	rax = Mem0[rsp + 0xD0<64>:word64]
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l0000000000444143
	// succ:  l00000000004438CF l0000000000444143
l00000000004438CF:
	rcx = Mem0[rsp + 0x48<64>:word64]
	call fn00000000004505A0 (retsize: 8;)
	rax = Mem0[rsp + 0xD0<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x30<8>)
	branch Test(EQ,Z) l0000000000443923
	// succ:  l00000000004438E6 l0000000000443923
l00000000004438E6:
	eax = Mem0[rax - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l00000000004438F7
	// succ:  l00000000004438ED l00000000004438F7
l00000000004438ED:
	rcx = Mem0[rsp + 0x48<64>:word64]
	call fn00000000004505A0 (retsize: 8;)
	// succ:  l00000000004438F7
l00000000004438F7:
	rcx = Mem0[rsp + 0x48<64>:word64]
	Mem0[rsp + 0x20<64>:word32] = 0x2D<32>
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn00000000004508E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[rsp + 0xD0<64>:word64]
	Mem0[rax - 8<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l0000000000443923
l0000000000443923:
	rax = Mem0[rsp + 0xC0<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000443972
	// succ:  l0000000000443932 l0000000000443972
l0000000000443932:
	eax = CONVERT(Mem0[rsp + 0x70<64>:byte], byte, int32)
	SCZO = cond(Mem0[rsp + 0x75<64>:byte] - 0<8>)
	rbx = rsp + 0xC0<64>
	edx = CONVERT(sil, byte, int32)
	rcx = rbx
	branch Test(EQ,Z) l000000000044394E
	// succ:  l000000000044394B_1 l000000000044394E
l000000000044394B_1:
	edx = eax
	// succ:  l000000000044394E
l000000000044394E:
	call fn0000000000451E10 (retsize: 8;)
	rdx = Mem0[rbp + 0x18<64>:word64]
	rcx = Mem0[rbp + 0x10<64>:word64]
	r8 = rbx
	call fn00000000004708F0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000443972
	// succ:  l0000000000443967 l0000000000443972
l0000000000443967:
	rax = Mem0[rsp + 0x158<64>:word64]
	v36 = Mem0[rax:word32] | 4<32>
	Mem0[rax:word32] = v36
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l0000000000443972
l0000000000443972:
	SCZO = cond(Mem0[rsp + 0x75<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000044406E
	// succ:  l000000000044397D l000000000044406E
l000000000044397D:
	rdx = Mem0[rsp + 0x48<64>:word64]
	rcx = Mem0[rsp + 0x160<64>:word64]
	call fn0000000000450C50 (retsize: 8;)
	r12 = rsp + 0x80<64>
	rdi = rsp + 0x90<64>
	goto l0000000000443D30
	// succ:  l0000000000443D30
l0000000000443D15:
	r12 = rsp + 0x80<64>
	rdi = rsp + 0x90<64>
	// succ:  l0000000000443D25
l0000000000443D25:
	rax = Mem0[rsp + 0x158<64>:word64]
	v32 = Mem0[rax:word32] | 4<32>
	Mem0[rax:word32] = v32
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l0000000000443D30
l0000000000443D30:
	rdx = r12
	rcx = rdi
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000443D4A
	// succ:  l0000000000443D3F l0000000000443D4A
l0000000000443D3F:
	rax = Mem0[rsp + 0x158<64>:word64]
	v33 = Mem0[rax:word32] | 2<32>
	Mem0[rax:word32] = v33
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l0000000000443D4A
l0000000000443D4A:
	rax = Mem0[rsp + 0x90<64>:word64]
	rsi = Mem0[rsp + 0x130<64>:word64]
	rdx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsi:word64] = rax
	rax = Mem0[rsp + 0xD0<64>:word64]
	Mem0[rsi + 8<64>:word64] = rdx
	rdx = Mem0[rsp + 0x78<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	rax = Mem0[rsp + 0xC0<64>:word64]
	rdx = Mem0[rsp + 0x48<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	rax = Mem0[rsp + 0x130<64>:word64]
	rsp = rsp + 0xE8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000443380_exit
l0000000000444060:
	SZO = cond(dil & dil)
	C = false
	branch Test(NE,Z) l0000000000443876
	// succ:  l0000000000444069 l0000000000443876
l0000000000444069:
	goto l0000000000443D15
	// succ:  l0000000000443D15
l000000000044406E:
	SCZO = cond(Mem0[rbp + 0x58<64>:word32] - esi)
	branch Test(NE,Z) l0000000000443D15
	// succ:  l0000000000444077 l0000000000443D15
l0000000000444077:
	goto l000000000044397D
	// succ:  l000000000044397D
l000000000044407C:
	r13 = Mem0[rbp + 0x48<64>:word64]
	goto l0000000000443837
	// succ:  l0000000000443837
l0000000000444085:
	rcx = rdi
	call fn000000000042B050 (retsize: 8;)
	SCZO = cond(Mem0[r13 + 0<64> + rbx:byte] - al)
	branch Test(NE,Z) l000000000044386B
	// succ:  l0000000000444098 l000000000044386B
l0000000000444098:
	rcx = Mem0[rsp + 0x90<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004440C2
	// succ:  l00000000004440A5 l00000000004440C2
l00000000004440A5:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004440CB
	// succ:  l00000000004440AF l00000000004440CB
l00000000004440AF:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l00000000004440B7
l00000000004440B7:
	Mem0[rsp + 0x98<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l00000000004440C2
l00000000004440C2:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	goto l0000000000443850
	// succ:  l0000000000443850
l00000000004440CB:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l00000000004440B7
	// succ:  l00000000004440B7
l0000000000444122:
	rax = Mem0[rsp + 0xD0<64>:word64]
	rcx = Mem0[rsp + 0x48<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = Mem0[rax - 0x18<64>:word64]
	r8 = r8 - 1<64>
	SCZO = cond(r8)
	call fn0000000000450D50 (retsize: 8;)
	goto l00000000004438B5
	// succ:  l00000000004438B5
l0000000000444143:
	SCZO = cond(Mem0[rax:byte] - 0x30<8>)
	branch Test(NE,Z) l00000000004438F7
	// succ:  l000000000044414C l00000000004438F7
l000000000044414C:
	rax = Mem0[rsp + 0xC0<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000443972
	// succ:  l000000000044415F l0000000000443972
l000000000044415F:
	goto l0000000000443932
	// succ:  l0000000000443932
fn0000000000443380_exit:


// fn00000000004441A0
// Return size: 8
define fn00000000004441A0
fn00000000004441A0_entry:
	rsp = fp
	// succ:  l00000000004441A0
l00000000004441A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA8<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x38<64>:word64] = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rcx
	ecx = CONVERT(Mem0[rsp + 0x90<64>:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	call Mem0[rax + 0x18<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004441A0_exit
fn00000000004441A0_exit:


// fn0000000000444220
// Return size: 8
define fn0000000000444220
fn0000000000444220_entry:
	rsp = fp
	// succ:  l0000000000444220
l0000000000444220:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA8<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x38<64>:word64] = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rcx
	ecx = CONVERT(Mem0[rsp + 0x90<64>:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000444220_exit
fn0000000000444220_exit:


// fn00000000004442A0
// Return size: 8
define fn00000000004442A0
fn00000000004442A0_entry:
	rsp = fp
	// succ:  l00000000004442A0
l00000000004442A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xA8<64>
	SCZO = cond(rsp)
	Mem0[rsp + 0x90<64>:word128] = xmm7
	rbx = rcx
	r12 = rsp + 0x7F<64>
	rdi = rdx
	rsi = Mem0[rsp + 0x118<64>:word64]
	r15 = Mem0[r8:word64]
	xmm7 = Mem0[r9:word128]
	r14 = Mem0[r8 + 8<64>:word64]
	ebp = Mem0[rsp + 0x110<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	rcx = rsi + 0xD0<64>
	call fn0000000000472FC0 (retsize: 8;)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = r12
	r13 = rax
	call fn00000000004505D0 (retsize: 8;)
	Mem0[rsp + 0x80<64>:word64] = rax
	rax = rsp + 0x80<64>
	SZO = cond(bpl & bpl)
	C = false
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x50<64>:word64] = r15
	Mem0[rsp + 0x58<64>:word64] = r14
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0x120<64>:word64]
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x40<64>:word128] = xmm7
	Mem0[rsp + 0x20<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	rdx = rdi
	Mem0[rsp + 0x28<64>:word64] = rax
	branch Test(EQ,Z) l0000000000444440
	// succ:  l000000000044434D l0000000000444440
l000000000044434D:
	call fn0000000000443380 (retsize: 8;)
	// succ:  l0000000000444352
l0000000000444352:
	rdx = Mem0[rsp + 0x68<64>:word64]
	rax = Mem0[rsp + 0x60<64>:word64]
	r9 = Mem0[rsp + 0x80<64>:word64]
	Mem0[rsp + 0x68<64>:word64] = rdx
	esi = Mem0[rsp + 0x68<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	rdi = rax
	Mem0[rsp + 0x60<64>:word64] = rax
	rax = 0xFFFFFFFF00000000<64>
	r14 = r14 & rax
	SZO = cond(r14)
	C = false
	rsi = rsi | r14
	SZO = cond(rsi)
	C = false
	r14 = Mem0[r9 - 0x18<64>:word64]
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l0000000000444406
	// succ:  l000000000044438E l0000000000444406
l000000000044438E:
	rcx = Mem0[rsp + 0x128<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = r14
	call fn00000000004516E0 (retsize: 8;)
	rax = Mem0[rsp + 0x128<64>:word64]
	r15 = Mem0[rax:word64]
	edx = Mem0[r15 - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l00000000004443C7
	// succ:  l00000000004443B4 l00000000004443C7
l00000000004443B4:
	rcx = rax
	call fn00000000004505A0 (retsize: 8;)
	rax = Mem0[rsp + 0x128<64>:word64]
	r15 = Mem0[rax:word64]
	// succ:  l00000000004443C7
l00000000004443C7:
	eax = CONVERT(Mem0[r13 + 0x38<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rbp = Mem0[rsp + 0x80<64>:word64]
	SCZO = cond(al - 1<8>)
	branch Test(EQ,Z) l00000000004443F0
	// succ:  l00000000004443D8 l00000000004443F0
l00000000004443D8:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000444450
	// succ:  l00000000004443DC l0000000000444450
l00000000004443DC:
	rax = Mem0[r13 + 0<64>:word64]
	rdx = 0x000000000042B5D0<p64>
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000444460
	// succ:  l00000000004443F0 l0000000000444460
l00000000004443F0:
	r8 = r14
	rdx = rbp
	rcx = r15
	rax = memcpy(rcx, rdx, r8)
	r9 = Mem0[rsp + 0x80<64>:word64]
	// succ:  l0000000000444406
l0000000000444406:
	Mem0[rbx:word64] = rdi
	Mem0[rbx + 8<64>:word64] = rsi
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[r9 - 8<64>:word32] = __xadd(Mem0[r9 - 8<64>:word32], eax)
	SCZO = cond(Mem0[r9 - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000444480
	// succ:  l000000000044441C l0000000000444480
l000000000044441C:
	xmm7 = Mem0[rsp + 0x90<64>:word128]
	rax = rbx
	rsp = rsp + 0xA8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004442A0_exit
l0000000000444440:
	call fn0000000000442560 (retsize: 8;)
	goto l0000000000444352
	// succ:  l0000000000444352
l0000000000444450:
	rcx = r13
	call fn000000000042B320 (retsize: 8;)
	goto l00000000004443DC
	// succ:  l00000000004443DC
l0000000000444460:
	r9 = r15
	r8 = rbp + 0<64> + r14
	rdx = rbp
	rcx = r13
	call rax (retsize: 8;)
	r9 = Mem0[rsp + 0x80<64>:word64]
	goto l0000000000444406
	// succ:  l0000000000444406
l0000000000444480:
	rcx = r9 - 0x18<64>
	rdx = r12
	call fn0000000000450A50 (retsize: 8;)
	goto l000000000044441C
	// succ:  l000000000044441C
fn00000000004442A0_exit:


// fn00000000004444B0
// Return size: 8
define fn00000000004444B0
fn00000000004444B0_entry:
	rsp = fp
	// succ:  l00000000004444B0
l00000000004444B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r15 = Mem0[r8:word64]
	rsi = Mem0[r8 + 8<64>:word64]
	rbp = rsp + 0x78<64>
	rdi = rdx
	rbx = rcx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r13 = Mem0[r9:word64]
	r8 = rbp
	r14 = Mem0[r9 + 8<64>:word64]
	r12d = Mem0[rsp + 0xF0<64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	call fn00000000004505D0 (retsize: 8;)
	Mem0[rsp + 0x70<64>:word64] = rax
	rax = rsp + 0x70<64>
	rcx = rsp + 0x60<64>
	SZO = cond(r12b & r12b)
	C = false
	Mem0[rsp + 0x50<64>:word64] = r15
	Mem0[rsp + 0x58<64>:word64] = rsi
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0x100<64>:word64]
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x40<64>:word64] = r13
	Mem0[rsp + 0x48<64>:word64] = r14
	r8 = rsp + 0x50<64>
	rdx = rdi
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	branch Test(EQ,Z) l00000000004445D1
	// succ:  l0000000000444548 l00000000004445D1
l0000000000444548:
	call fn0000000000443380 (retsize: 8;)
	// succ:  l000000000044454D
l000000000044454D:
	rax = Mem0[rsp + 0x60<64>:word64]
	rdx = Mem0[rsp + 0x68<64>:word64]
	rdi = rax
	Mem0[rsp + 0x68<64>:word64] = rdx
	Mem0[rsp + 0x60<64>:word64] = rax
	eax = Mem0[rsp + 0x68<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = 0xFFFFFFFF00000000<64>
	rsi = rsi & rdx
	SZO = cond(rsi)
	C = false
	rsi = rsi | rax
	SZO = cond(rsi)
	C = false
	call fn000000000046AC50 (retsize: 8;)
	r8 = Mem0[rsp + 0x100<64>:word64]
	rdx = Mem0[rsp + 0x108<64>:word64]
	r9 = rbp
	rcx = Mem0[rsp + 0x70<64>:word64]
	Mem0[rsp + 0x78<64>:word64] = rax
	call fn000000000046FBE0 (retsize: 8;)
	r10 = Mem0[rsp + 0x70<64>:word64]
	Mem0[rbx:word64] = rdi
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 8<64>:word64] = rsi
	__lock()
	Mem0[r10 - 8<64>:word32] = __xadd(Mem0[r10 - 8<64>:word32], eax)
	SCZO = cond(Mem0[r10 - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004445E0
	// succ:  l00000000004445BA l00000000004445E0
l00000000004445BA:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004444B0_exit
l00000000004445D1:
	call fn0000000000442560 (retsize: 8;)
	goto l000000000044454D
	// succ:  l000000000044454D
l00000000004445E0:
	rcx = r10 - 0x18<64>
	rdx = rbp
	call fn0000000000450A50 (retsize: 8;)
	goto l00000000004445BA
	// succ:  l00000000004445BA
fn00000000004444B0_exit:


// fn0000000000444610
// Return size: 8
define fn0000000000444610
fn0000000000444610_entry:
	rsp = fp
	// succ:  l0000000000444610
l0000000000444610:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xF8<64>
	SCZO = cond(rsp)
	rax = Mem0[r8:word64]
	rdx = Mem0[r8 + 8<64>:word64]
	Mem0[rsp + 0x140<64>:word64] = rcx
	Mem0[rsp + 0xA0<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0xA8<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0x90<64>:word64] = rax
	rax = Mem0[rsp + 0x160<64>:word64]
	Mem0[rsp + 0x98<64>:word64] = rdx
	rbx = rax + 0xD0<64>
	rcx = rbx
	call fn0000000000473020 (retsize: 8;)
	rcx = rsp + 0xBE<64>
	rdx = rbx
	r13 = rax
	call fn000000000042A7C0 (retsize: 8;)
	r12 = rax
	rax = rax + 0x64<64>
	Mem0[rsp + 0x86<64>:byte] = 0<8>
	SCZO = cond(Mem0[r12 + 0x40<64>:word64] - 0<64>)
	Mem0[rsp + 0x58<64>:word64] = rax
	branch Test(EQ,Z) l00000000004446AD
	// succ:  l000000000044469F l00000000004446AD
l000000000044469F:
	SCZO = cond(Mem0[r12 + 0x50<64>:word64] - 0<64>)
	Mem0[rsp + 0x86<64>:byte] = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l00000000004446AD
l00000000004446AD:
	rax = rsp + 0xE0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x48<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(Mem0[r12 + 0x20<64>:byte] - 0<8>)
	Mem0[rsp + 0xD0<64>:word64] = rax
	branch Test(EQ,Z) l00000000004446E8
	// succ:  l00000000004446D6 l00000000004446E8
l00000000004446D6:
	rcx = rsp + 0xD0<64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000451BE0 (retsize: 8;)
	// succ:  l00000000004446E8
l00000000004446E8:
	rax = rsp + 0xBF<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x88<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	rcx = Mem0[rsp + 0x48<64>:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsp + 0xE0<64>:word64] = rax
	call fn0000000000451BE0 (retsize: 8;)
	rax = r12 + 0x66<64>
	rbx = r12 + 0x7A<64>
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	Mem0[rsp + 0x80<64>:word32] = 0<32>
	Mem0[rsp + 0x40<64>:word64] = rax
	eax = Mem0[r12 + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	Mem0[rsp + 0x85<64>:byte] = 0<8>
	Mem0[rsp + 0xC0<64>:word32] = eax
	rax = rsp + 0xC0<64>
	Mem0[rsp + 0x60<64>:word64] = rax
	rax = rsp + 0x90<64>
	Mem0[rsp + 0x78<64>:word64] = rax
	rax = rsp + 0xA0<64>
	Mem0[rsp + 0x70<64>:word64] = rax
	eax = CONVERT(Mem0[rsp + 0x86<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x87<64>:byte] = al
	rax = rsp + 0xD0<64>
	Mem0[rsp + 0x68<64>:word64] = rax
	// succ:  l00000000004447A0
l00000000004447A0:
	rax = Mem0[rsp + 0x60<64>:word64]
	SCZO = cond(Mem0[rax + r14:byte] - 4<8>)
	branch Test(UGT,CZ) l0000000000444C44
	// succ:  l00000000004447B0 l0000000000444C44
l00000000004447B0:
	edx = CONVERT(Mem0[rax + r14:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x000000000048DCDC<p64>
	rdx = CONVERT(Mem0[rax + rdx * 4<64>:word32], word32, int64)
	rax = rax + rdx
	SCZO = cond(rax)
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000444610_exit
l0000000000444832:
	eax = SLICE(r14 + 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 3<32>)
	branch Test(GT,SZO) l00000000004449C1
	// succ:  l000000000044483F l00000000004449C1
l000000000044483F:
	r14 = r14 + 1<64>
	SCZO = cond(r14)
	goto l00000000004447A0
	// succ:  l00000000004447A0
l00000000004449C1:
	SCZO = cond(Mem0[rsp + 0x50<64>:word64] - 1<64>)
	al = CONVERT(Test(UGT,CZ), bool, int8)
	eax = eax & ebp
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004453F3
	// succ:  l00000000004449D4 l00000000004453F3
l00000000004449D4:
	SCZO = cond(Mem0[rsp + 0x85<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000445411
	// succ:  l00000000004449E2 l0000000000445411
l00000000004449E2:
	r13 = Mem0[r12 + 0x38<64>:word64]
	// succ:  l00000000004449E7
l00000000004449E7:
	rbp = rsp + 0x90<64>
	rsi = rsp + 0xA0<64>
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000444A00
l0000000000444A00:
	rdx = rbp
	rcx = rsi
	call fn000000000042B0C0 (retsize: 8;)
	SCZO = cond(rbx - Mem0[rsp + 0x50<64>:word64])
	dl = CONVERT(Test(ULT,C), bool, int8)
	SCZO = cond(al - dl)
	branch Test(ULT,C) l0000000000445420
	// succ:  l0000000000444A1B l0000000000445420
l0000000000444A1B:
	SCZO = cond(rbx - Mem0[rsp + 0x50<64>:word64])
	branch Test(NE,Z) l0000000000444E52
	// succ:  l0000000000444A26 l0000000000444E52
l0000000000444A26:
	rax = Mem0[rsp + 0xE0<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 1<64>)
	branch Test(ULE,CZ) l0000000000444A65
	// succ:  l0000000000444A35 l0000000000444A65
l0000000000444A35:
	rcx = Mem0[rsp + 0x48<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000428600 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000444A65
	// succ:  l0000000000444A4C l0000000000444A65
l0000000000444A4C:
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	r8 = rax
	branch Test(EQ,Z) l00000000004454EB
	// succ:  l0000000000444A59 l00000000004454EB
l0000000000444A59:
	rcx = Mem0[rsp + 0x48<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn0000000000450D50 (retsize: 8;)
	// succ:  l0000000000444A65
l0000000000444A65:
	SCZO = cond(Mem0[rsp + 0x85<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000444AD6
	// succ:  l0000000000444A6F l0000000000444AD6
l0000000000444A6F:
	rax = Mem0[rsp + 0xE0<64>:word64]
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l00000000004454CA
	// succ:  l0000000000444A82 l00000000004454CA
l0000000000444A82:
	rcx = Mem0[rsp + 0x48<64>:word64]
	call fn00000000004505A0 (retsize: 8;)
	rax = Mem0[rsp + 0xE0<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x30<8>)
	branch Test(EQ,Z) l0000000000444AD6
	// succ:  l0000000000444A99 l0000000000444AD6
l0000000000444A99:
	eax = Mem0[rax - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000444AAA
	// succ:  l0000000000444AA0 l0000000000444AAA
l0000000000444AA0:
	rcx = Mem0[rsp + 0x48<64>:word64]
	call fn00000000004505A0 (retsize: 8;)
	// succ:  l0000000000444AAA
l0000000000444AAA:
	rcx = Mem0[rsp + 0x48<64>:word64]
	Mem0[rsp + 0x20<64>:word32] = 0x2D<32>
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn00000000004508E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[rsp + 0xE0<64>:word64]
	Mem0[rax - 8<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l0000000000444AD6
l0000000000444AD6:
	rax = Mem0[rsp + 0xD0<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000444B28
	// succ:  l0000000000444AE5 l0000000000444B28
l0000000000444AE5:
	eax = CONVERT(Mem0[rsp + 0x80<64>:byte], byte, int32)
	rbx = rsp + 0xD0<64>
	edx = CONVERT(dil, byte, int32)
	SZO = cond(r15b & r15b)
	C = false
	rcx = rbx
	branch Test(EQ,Z) l0000000000444B02
	// succ:  l0000000000444AFF_1 l0000000000444B02
l0000000000444AFF_1:
	edx = eax
	// succ:  l0000000000444B02
l0000000000444B02:
	call fn0000000000451E10 (retsize: 8;)
	rdx = Mem0[r12 + 0x18<64>:word64]
	rcx = Mem0[r12 + 0x10<64>:word64]
	r8 = rbx
	call fn00000000004708F0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000444B28
	// succ:  l0000000000444B1D l0000000000444B28
l0000000000444B1D:
	rax = Mem0[rsp + 0x168<64>:word64]
	v40 = Mem0[rax:word32] | 4<32>
	Mem0[rax:word32] = v40
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l0000000000444B28
l0000000000444B28:
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l0000000000445401
	// succ:  l0000000000444B31 l0000000000445401
l0000000000444B31:
	rdx = Mem0[rsp + 0x48<64>:word64]
	rcx = Mem0[rsp + 0x170<64>:word64]
	call fn0000000000450C50 (retsize: 8;)
	rbp = rsp + 0x90<64>
	rsi = rsp + 0xA0<64>
	goto l0000000000444E5D
	// succ:  l0000000000444E5D
l0000000000444C44:
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	goto l0000000000444832
	// succ:  l0000000000444832
l0000000000444E42:
	rbp = rsp + 0x90<64>
	rsi = rsp + 0xA0<64>
	// succ:  l0000000000444E52
l0000000000444E52:
	rax = Mem0[rsp + 0x168<64>:word64]
	v33 = Mem0[rax:word32] | 4<32>
	Mem0[rax:word32] = v33
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l0000000000444E5D
l0000000000444E5D:
	rdx = rbp
	rcx = rsi
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000444E77
	// succ:  l0000000000444E6C l0000000000444E77
l0000000000444E6C:
	rax = Mem0[rsp + 0x168<64>:word64]
	v34 = Mem0[rax:word32] | 2<32>
	Mem0[rax:word32] = v34
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l0000000000444E77
l0000000000444E77:
	rax = Mem0[rsp + 0xA0<64>:word64]
	rdi = Mem0[rsp + 0x140<64>:word64]
	rdx = Mem0[rsp + 0xA8<64>:word64]
	Mem0[rdi:word64] = rax
	rax = Mem0[rsp + 0xE0<64>:word64]
	Mem0[rdi + 8<64>:word64] = rdx
	rdx = Mem0[rsp + 0x88<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	rax = Mem0[rsp + 0xD0<64>:word64]
	rdx = Mem0[rsp + 0x48<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	rax = Mem0[rsp + 0x140<64>:word64]
	rsp = rsp + 0xF8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000444610_exit
l00000000004453F3:
	SZO = cond(bpl & bpl)
	C = false
	branch Test(NE,Z) l0000000000444A26
	// succ:  l00000000004453FC l0000000000444A26
l00000000004453FC:
	goto l0000000000444E42
	// succ:  l0000000000444E42
l0000000000445401:
	SCZO = cond(Mem0[r12 + 0x58<64>:word32] - edi)
	branch Test(NE,Z) l0000000000444E42
	// succ:  l000000000044540C l0000000000444E42
l000000000044540C:
	goto l0000000000444B31
	// succ:  l0000000000444B31
l0000000000445411:
	r13 = Mem0[r12 + 0x48<64>:word64]
	goto l00000000004449E7
	// succ:  l00000000004449E7
l0000000000445420:
	rcx = rsi
	call fn000000000042B1B0 (retsize: 8;)
	SCZO = cond(ax - Mem0[(r13 + 0<64>) + rbx * 2<64>:word16])
	branch Test(NE,Z) l0000000000444A1B
	// succ:  l0000000000445434 l0000000000444A1B
l0000000000445434:
	rcx = Mem0[rsp + 0xA0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000445460
	// succ:  l0000000000445441 l0000000000445460
l0000000000445441:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000445469
	// succ:  l000000000044544B l0000000000445469
l000000000044544B:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l0000000000445453
l0000000000445453:
	ecx = 0xFFFFFFFF<32>
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0xA8<64>:word16] = cx
	// succ:  l0000000000445460
l0000000000445460:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	goto l0000000000444A00
	// succ:  l0000000000444A00
l0000000000445469:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l0000000000445453
	// succ:  l0000000000445453
l00000000004454CA:
	SCZO = cond(Mem0[rax:byte] - 0x30<8>)
	branch Test(NE,Z) l0000000000444AAA
	// succ:  l00000000004454D3 l0000000000444AAA
l00000000004454D3:
	rax = Mem0[rsp + 0xD0<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000444B28
	// succ:  l00000000004454E6 l0000000000444B28
l00000000004454E6:
	goto l0000000000444AE5
	// succ:  l0000000000444AE5
l00000000004454EB:
	rax = Mem0[rsp + 0xE0<64>:word64]
	r8 = Mem0[rax - 0x18<64>:word64]
	r8 = r8 - 1<64>
	SCZO = cond(r8)
	goto l0000000000444A59
	// succ:  l0000000000444A59
fn0000000000444610_exit:


// fn0000000000445540
// Return size: 8
define fn0000000000445540
fn0000000000445540_entry:
	rsp = fp
	// succ:  l0000000000445540
l0000000000445540:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xF8<64>
	SCZO = cond(rsp)
	rax = Mem0[r8:word64]
	rdx = Mem0[r8 + 8<64>:word64]
	Mem0[rsp + 0x140<64>:word64] = rcx
	Mem0[rsp + 0xA0<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0xA8<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0x90<64>:word64] = rax
	rax = Mem0[rsp + 0x160<64>:word64]
	Mem0[rsp + 0x98<64>:word64] = rdx
	rbx = rax + 0xD0<64>
	rcx = rbx
	call fn0000000000473020 (retsize: 8;)
	rcx = rsp + 0xBE<64>
	rdx = rbx
	r13 = rax
	call fn000000000042A8F0 (retsize: 8;)
	r12 = rax
	rax = rax + 0x64<64>
	Mem0[rsp + 0x86<64>:byte] = 0<8>
	SCZO = cond(Mem0[r12 + 0x40<64>:word64] - 0<64>)
	Mem0[rsp + 0x58<64>:word64] = rax
	branch Test(EQ,Z) l00000000004455DD
	// succ:  l00000000004455CF l00000000004455DD
l00000000004455CF:
	SCZO = cond(Mem0[r12 + 0x50<64>:word64] - 0<64>)
	Mem0[rsp + 0x86<64>:byte] = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l00000000004455DD
l00000000004455DD:
	rax = rsp + 0xE0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x48<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(Mem0[r12 + 0x20<64>:byte] - 0<8>)
	Mem0[rsp + 0xD0<64>:word64] = rax
	branch Test(EQ,Z) l0000000000445618
	// succ:  l0000000000445606 l0000000000445618
l0000000000445606:
	rcx = rsp + 0xD0<64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000451BE0 (retsize: 8;)
	// succ:  l0000000000445618
l0000000000445618:
	rax = rsp + 0xBF<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x88<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	rcx = Mem0[rsp + 0x48<64>:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsp + 0xE0<64>:word64] = rax
	call fn0000000000451BE0 (retsize: 8;)
	rax = r12 + 0x66<64>
	rbx = r12 + 0x7A<64>
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	Mem0[rsp + 0x80<64>:word32] = 0<32>
	Mem0[rsp + 0x40<64>:word64] = rax
	eax = Mem0[r12 + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	Mem0[rsp + 0x85<64>:byte] = 0<8>
	Mem0[rsp + 0xC0<64>:word32] = eax
	rax = rsp + 0xC0<64>
	Mem0[rsp + 0x60<64>:word64] = rax
	rax = rsp + 0x90<64>
	Mem0[rsp + 0x78<64>:word64] = rax
	rax = rsp + 0xA0<64>
	Mem0[rsp + 0x70<64>:word64] = rax
	eax = CONVERT(Mem0[rsp + 0x86<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x87<64>:byte] = al
	rax = rsp + 0xD0<64>
	Mem0[rsp + 0x68<64>:word64] = rax
	// succ:  l00000000004456D0
l00000000004456D0:
	rax = Mem0[rsp + 0x60<64>:word64]
	SCZO = cond(Mem0[rax + r14:byte] - 4<8>)
	branch Test(UGT,CZ) l0000000000445B74
	// succ:  l00000000004456E0 l0000000000445B74
l00000000004456E0:
	edx = CONVERT(Mem0[rax + r14:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x000000000048DCF0<p64>
	rdx = CONVERT(Mem0[rax + rdx * 4<64>:word32], word32, int64)
	rax = rax + rdx
	SCZO = cond(rax)
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000445540_exit
l0000000000445762:
	eax = SLICE(r14 + 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 3<32>)
	branch Test(GT,SZO) l00000000004458F1
	// succ:  l000000000044576F l00000000004458F1
l000000000044576F:
	r14 = r14 + 1<64>
	SCZO = cond(r14)
	goto l00000000004456D0
	// succ:  l00000000004456D0
l00000000004458F1:
	SCZO = cond(Mem0[rsp + 0x50<64>:word64] - 1<64>)
	al = CONVERT(Test(UGT,CZ), bool, int8)
	eax = eax & ebp
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000446323
	// succ:  l0000000000445904 l0000000000446323
l0000000000445904:
	SCZO = cond(Mem0[rsp + 0x85<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000446341
	// succ:  l0000000000445912 l0000000000446341
l0000000000445912:
	r13 = Mem0[r12 + 0x38<64>:word64]
	// succ:  l0000000000445917
l0000000000445917:
	rbp = rsp + 0x90<64>
	rsi = rsp + 0xA0<64>
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000445930
l0000000000445930:
	rdx = rbp
	rcx = rsi
	call fn000000000042B0C0 (retsize: 8;)
	SCZO = cond(rbx - Mem0[rsp + 0x50<64>:word64])
	dl = CONVERT(Test(ULT,C), bool, int8)
	SCZO = cond(al - dl)
	branch Test(ULT,C) l0000000000446350
	// succ:  l000000000044594B l0000000000446350
l000000000044594B:
	SCZO = cond(rbx - Mem0[rsp + 0x50<64>:word64])
	branch Test(NE,Z) l0000000000445D82
	// succ:  l0000000000445956 l0000000000445D82
l0000000000445956:
	rax = Mem0[rsp + 0xE0<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 1<64>)
	branch Test(ULE,CZ) l0000000000445995
	// succ:  l0000000000445965 l0000000000445995
l0000000000445965:
	rcx = Mem0[rsp + 0x48<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000428600 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000445995
	// succ:  l000000000044597C l0000000000445995
l000000000044597C:
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	r8 = rax
	branch Test(EQ,Z) l000000000044641B
	// succ:  l0000000000445989 l000000000044641B
l0000000000445989:
	rcx = Mem0[rsp + 0x48<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn0000000000450D50 (retsize: 8;)
	// succ:  l0000000000445995
l0000000000445995:
	SCZO = cond(Mem0[rsp + 0x85<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000445A06
	// succ:  l000000000044599F l0000000000445A06
l000000000044599F:
	rax = Mem0[rsp + 0xE0<64>:word64]
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l00000000004463FA
	// succ:  l00000000004459B2 l00000000004463FA
l00000000004459B2:
	rcx = Mem0[rsp + 0x48<64>:word64]
	call fn00000000004505A0 (retsize: 8;)
	rax = Mem0[rsp + 0xE0<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x30<8>)
	branch Test(EQ,Z) l0000000000445A06
	// succ:  l00000000004459C9 l0000000000445A06
l00000000004459C9:
	eax = Mem0[rax - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l00000000004459DA
	// succ:  l00000000004459D0 l00000000004459DA
l00000000004459D0:
	rcx = Mem0[rsp + 0x48<64>:word64]
	call fn00000000004505A0 (retsize: 8;)
	// succ:  l00000000004459DA
l00000000004459DA:
	rcx = Mem0[rsp + 0x48<64>:word64]
	Mem0[rsp + 0x20<64>:word32] = 0x2D<32>
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn00000000004508E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[rsp + 0xE0<64>:word64]
	Mem0[rax - 8<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l0000000000445A06
l0000000000445A06:
	rax = Mem0[rsp + 0xD0<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000445A58
	// succ:  l0000000000445A15 l0000000000445A58
l0000000000445A15:
	eax = CONVERT(Mem0[rsp + 0x80<64>:byte], byte, int32)
	rbx = rsp + 0xD0<64>
	edx = CONVERT(dil, byte, int32)
	SZO = cond(r15b & r15b)
	C = false
	rcx = rbx
	branch Test(EQ,Z) l0000000000445A32
	// succ:  l0000000000445A2F_1 l0000000000445A32
l0000000000445A2F_1:
	edx = eax
	// succ:  l0000000000445A32
l0000000000445A32:
	call fn0000000000451E10 (retsize: 8;)
	rdx = Mem0[r12 + 0x18<64>:word64]
	rcx = Mem0[r12 + 0x10<64>:word64]
	r8 = rbx
	call fn00000000004708F0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000445A58
	// succ:  l0000000000445A4D l0000000000445A58
l0000000000445A4D:
	rax = Mem0[rsp + 0x168<64>:word64]
	v40 = Mem0[rax:word32] | 4<32>
	Mem0[rax:word32] = v40
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l0000000000445A58
l0000000000445A58:
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l0000000000446331
	// succ:  l0000000000445A61 l0000000000446331
l0000000000445A61:
	rdx = Mem0[rsp + 0x48<64>:word64]
	rcx = Mem0[rsp + 0x170<64>:word64]
	call fn0000000000450C50 (retsize: 8;)
	rbp = rsp + 0x90<64>
	rsi = rsp + 0xA0<64>
	goto l0000000000445D8D
	// succ:  l0000000000445D8D
l0000000000445B74:
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	goto l0000000000445762
	// succ:  l0000000000445762
l0000000000445D72:
	rbp = rsp + 0x90<64>
	rsi = rsp + 0xA0<64>
	// succ:  l0000000000445D82
l0000000000445D82:
	rax = Mem0[rsp + 0x168<64>:word64]
	v33 = Mem0[rax:word32] | 4<32>
	Mem0[rax:word32] = v33
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l0000000000445D8D
l0000000000445D8D:
	rdx = rbp
	rcx = rsi
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000445DA7
	// succ:  l0000000000445D9C l0000000000445DA7
l0000000000445D9C:
	rax = Mem0[rsp + 0x168<64>:word64]
	v34 = Mem0[rax:word32] | 2<32>
	Mem0[rax:word32] = v34
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l0000000000445DA7
l0000000000445DA7:
	rax = Mem0[rsp + 0xA0<64>:word64]
	rdi = Mem0[rsp + 0x140<64>:word64]
	rdx = Mem0[rsp + 0xA8<64>:word64]
	Mem0[rdi:word64] = rax
	rax = Mem0[rsp + 0xE0<64>:word64]
	Mem0[rdi + 8<64>:word64] = rdx
	rdx = Mem0[rsp + 0x88<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	rax = Mem0[rsp + 0xD0<64>:word64]
	rdx = Mem0[rsp + 0x48<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	rax = Mem0[rsp + 0x140<64>:word64]
	rsp = rsp + 0xF8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000445540_exit
l0000000000446323:
	SZO = cond(bpl & bpl)
	C = false
	branch Test(NE,Z) l0000000000445956
	// succ:  l000000000044632C l0000000000445956
l000000000044632C:
	goto l0000000000445D72
	// succ:  l0000000000445D72
l0000000000446331:
	SCZO = cond(Mem0[r12 + 0x58<64>:word32] - edi)
	branch Test(NE,Z) l0000000000445D72
	// succ:  l000000000044633C l0000000000445D72
l000000000044633C:
	goto l0000000000445A61
	// succ:  l0000000000445A61
l0000000000446341:
	r13 = Mem0[r12 + 0x48<64>:word64]
	goto l0000000000445917
	// succ:  l0000000000445917
l0000000000446350:
	rcx = rsi
	call fn000000000042B1B0 (retsize: 8;)
	SCZO = cond(ax - Mem0[(r13 + 0<64>) + rbx * 2<64>:word16])
	branch Test(NE,Z) l000000000044594B
	// succ:  l0000000000446364 l000000000044594B
l0000000000446364:
	rcx = Mem0[rsp + 0xA0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000446390
	// succ:  l0000000000446371 l0000000000446390
l0000000000446371:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000446399
	// succ:  l000000000044637B l0000000000446399
l000000000044637B:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l0000000000446383
l0000000000446383:
	ecx = 0xFFFFFFFF<32>
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0xA8<64>:word16] = cx
	// succ:  l0000000000446390
l0000000000446390:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	goto l0000000000445930
	// succ:  l0000000000445930
l0000000000446399:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l0000000000446383
	// succ:  l0000000000446383
l00000000004463FA:
	SCZO = cond(Mem0[rax:byte] - 0x30<8>)
	branch Test(NE,Z) l00000000004459DA
	// succ:  l0000000000446403 l00000000004459DA
l0000000000446403:
	rax = Mem0[rsp + 0xD0<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000445A58
	// succ:  l0000000000446416 l0000000000445A58
l0000000000446416:
	goto l0000000000445A15
	// succ:  l0000000000445A15
l000000000044641B:
	rax = Mem0[rsp + 0xE0<64>:word64]
	r8 = Mem0[rax - 0x18<64>:word64]
	r8 = r8 - 1<64>
	SCZO = cond(r8)
	goto l0000000000445989
	// succ:  l0000000000445989
fn0000000000445540_exit:


// fn0000000000446470
// Return size: 8
define fn0000000000446470
fn0000000000446470_entry:
	rsp = fp
	// succ:  l0000000000446470
l0000000000446470:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA8<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x38<64>:word64] = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rcx
	ecx = CONVERT(Mem0[rsp + 0x90<64>:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	call Mem0[rax + 0x18<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000446470_exit
fn0000000000446470_exit:


// fn00000000004464F0
// Return size: 8
define fn00000000004464F0
fn00000000004464F0_entry:
	rsp = fp
	// succ:  l00000000004464F0
l00000000004464F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA8<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x38<64>:word64] = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rcx
	ecx = CONVERT(Mem0[rsp + 0x90<64>:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004464F0_exit
fn00000000004464F0_exit:


// fn0000000000446570
// Return size: 8
define fn0000000000446570
fn0000000000446570_entry:
	rsp = fp
	// succ:  l0000000000446570
l0000000000446570:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xA8<64>
	SCZO = cond(rsp)
	Mem0[rsp + 0x90<64>:word128] = xmm7
	rsi = rcx
	r12 = rsp + 0x7F<64>
	r14 = rdx
	rdi = Mem0[rsp + 0x118<64>:word64]
	r15 = Mem0[r8:word64]
	xmm7 = Mem0[r9:word128]
	rbx = Mem0[r8 + 8<64>:word64]
	ebp = Mem0[rsp + 0x110<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	rcx = rdi + 0xD0<64>
	call fn0000000000473020 (retsize: 8;)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = r12
	r13 = rax
	call fn00000000004505D0 (retsize: 8;)
	Mem0[rsp + 0x80<64>:word64] = rax
	rax = rsp + 0x80<64>
	SZO = cond(bpl & bpl)
	C = false
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x50<64>:word64] = r15
	Mem0[rsp + 0x58<64>:word64] = rbx
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0x120<64>:word64]
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x40<64>:word128] = xmm7
	Mem0[rsp + 0x20<64>:word64] = rdi
	r8 = rsp + 0x50<64>
	rdx = r14
	Mem0[rsp + 0x28<64>:word64] = rax
	branch Test(EQ,Z) l00000000004466E1
	// succ:  l000000000044661D l00000000004466E1
l000000000044661D:
	call fn0000000000445540 (retsize: 8;)
	// succ:  l0000000000446622
l0000000000446622:
	rax = Mem0[rsp + 0x60<64>:word64]
	rdx = Mem0[rsp + 0x68<64>:word64]
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	r9 = Mem0[rsp + 0x80<64>:word64]
	Mem0[rsp + 0x60<64>:word64] = rax
	Mem0[rsp + 0x68<64>:word64] = rdx
	rdi = rax
	eax = CONVERT(Mem0[rsp + 0x68<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r14 = Mem0[r9 - 0x18<64>:word64]
	rbx = rbx | rax
	SZO = cond(rbx)
	C = false
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l00000000004466AC
	// succ:  l0000000000446655 l00000000004466AC
l0000000000446655:
	rcx = Mem0[rsp + 0x128<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = r14
	call fn000000000044A070 (retsize: 8;)
	rax = Mem0[rsp + 0x128<64>:word64]
	r9 = Mem0[rax:word64]
	edx = Mem0[r9 - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l000000000044668E
	// succ:  l000000000044667B l000000000044668E
l000000000044667B:
	rcx = rax
	call fn0000000000448E80 (retsize: 8;)
	rax = Mem0[rsp + 0x128<64>:word64]
	r9 = Mem0[rax:word64]
	// succ:  l000000000044668E
l000000000044668E:
	rdx = Mem0[rsp + 0x80<64>:word64]
	rax = Mem0[r13 + 0<64>:word64]
	rcx = r13
	r8 = rdx + r14
	call Mem0[rax + 0x58<64>:word64] (retsize: 8;)
	r9 = Mem0[rsp + 0x80<64>:word64]
	// succ:  l00000000004466AC
l00000000004466AC:
	Mem0[rsi:word64] = rdi
	Mem0[rsi + 8<64>:word64] = rbx
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[r9 - 8<64>:word32] = __xadd(Mem0[r9 - 8<64>:word32], eax)
	SCZO = cond(Mem0[r9 - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004466F0
	// succ:  l00000000004466C2 l00000000004466F0
l00000000004466C2:
	xmm7 = Mem0[rsp + 0x90<64>:word128]
	rax = rsi
	rsp = rsp + 0xA8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000446570_exit
l00000000004466E1:
	call fn0000000000444610 (retsize: 8;)
	goto l0000000000446622
	// succ:  l0000000000446622
l00000000004466F0:
	rcx = r9 - 0x18<64>
	rdx = r12
	call fn0000000000450A50 (retsize: 8;)
	goto l00000000004466C2
	// succ:  l00000000004466C2
fn0000000000446570_exit:


// fn0000000000446720
// Return size: 8
define fn0000000000446720
fn0000000000446720_entry:
	rsp = fp
	// succ:  l0000000000446720
l0000000000446720:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r15 = Mem0[r8:word64]
	rbx = Mem0[r8 + 8<64>:word64]
	rbp = rsp + 0x78<64>
	rdi = rdx
	rsi = rcx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r13 = Mem0[r9:word64]
	r8 = rbp
	r14 = Mem0[r9 + 8<64>:word64]
	r12d = Mem0[rsp + 0xF0<64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	call fn00000000004505D0 (retsize: 8;)
	Mem0[rsp + 0x70<64>:word64] = rax
	rax = rsp + 0x70<64>
	rcx = rsp + 0x60<64>
	SZO = cond(r12b & r12b)
	C = false
	Mem0[rsp + 0x50<64>:word64] = r15
	Mem0[rsp + 0x58<64>:word64] = rbx
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0x100<64>:word64]
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x40<64>:word64] = r13
	Mem0[rsp + 0x48<64>:word64] = r14
	r8 = rsp + 0x50<64>
	rdx = rdi
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	branch Test(EQ,Z) l0000000000446840
	// succ:  l00000000004467B8 l0000000000446840
l00000000004467B8:
	call fn0000000000445540 (retsize: 8;)
	// succ:  l00000000004467BD
l00000000004467BD:
	rax = Mem0[rsp + 0x60<64>:word64]
	rdx = Mem0[rsp + 0x68<64>:word64]
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	rdi = rax
	Mem0[rsp + 0x60<64>:word64] = rax
	Mem0[rsp + 0x68<64>:word64] = rdx
	eax = CONVERT(Mem0[rsp + 0x68<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rbx = rbx | rax
	SZO = cond(rbx)
	C = false
	call fn000000000046AC50 (retsize: 8;)
	r8 = Mem0[rsp + 0x100<64>:word64]
	rdx = Mem0[rsp + 0x108<64>:word64]
	r9 = rbp
	rcx = Mem0[rsp + 0x70<64>:word64]
	Mem0[rsp + 0x78<64>:word64] = rax
	call fn000000000046FBE0 (retsize: 8;)
	r10 = Mem0[rsp + 0x70<64>:word64]
	Mem0[rsi:word64] = rdi
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi + 8<64>:word64] = rbx
	__lock()
	Mem0[r10 - 8<64>:word32] = __xadd(Mem0[r10 - 8<64>:word32], eax)
	SCZO = cond(Mem0[r10 - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000446850
	// succ:  l0000000000446821 l0000000000446850
l0000000000446821:
	rax = rsi
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000446720_exit
l0000000000446840:
	call fn0000000000444610 (retsize: 8;)
	goto l00000000004467BD
	// succ:  l00000000004467BD
l0000000000446850:
	rcx = r10 - 0x18<64>
	rdx = rbp
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000446821
	// succ:  l0000000000446821
fn0000000000446720_exit:


// fn0000000000446880
// Return size: 8
define fn0000000000446880
fn0000000000446880_entry:
	rsp = fp
	// succ:  l0000000000446880
l0000000000446880:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x50<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	r9d = CONVERT(r9b, byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x40<64>
	Mem0[rsp + 0x30<64>:word64] = rcx
	ecx = CONVERT(Mem0[rsp + 0x88<64>:byte], byte, int32)
	Mem0[rsp + 0x40<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word32] = ecx
	rcx = Mem0[rsp + 0x80<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x18<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x50<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000446880_exit
fn0000000000446880_exit:


// fn00000000004468E0
// Return size: 8
define fn00000000004468E0
fn00000000004468E0_entry:
	rsp = fp
	// succ:  l00000000004468E0
l00000000004468E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0xA0<64>:word64]
	rbx = rcx
	rcx = rsp + 0x40<64>
	r9d = CONVERT(r9b, byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rax:real80], real80, real64)
	Mem0[rsp + 0x30<64>:word64] = rcx
	ecx = CONVERT(Mem0[rsp + 0x98<64>:byte], byte, int32)
	rax = Mem0[rdx:word64]
	Mem0[rsp + 0x28<64>:word32] = ecx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x40<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004468E0_exit
fn00000000004468E0_exit:


// fn0000000000446940
// Return size: 8
define fn0000000000446940
fn0000000000446940_entry:
	rsp = fp
	// succ:  l0000000000446940
l0000000000446940:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0x80<64>:word64]
	xmm1 = Mem0[r8:word128]
	SZO = cond(r9b & r9b)
	C = false
	rbx = rcx
	r8d = Mem0[rsp + 0x78<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	r9 = Mem0[rsp + 0x70<64>:word64]
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rax
	r8d = CONVERT(r8b, byte, int32)
	Mem0[rsp + 0x20<64>:word32] = r8d
	r8 = rsp + 0x30<64>
	branch Test(NE,Z) l0000000000446990
	// succ:  l000000000044697C l0000000000446990
l000000000044697C:
	call fn0000000000446BF0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000446940_exit
l0000000000446990:
	call fn00000000004472D0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000446940_exit
fn0000000000446940_exit:


// fn00000000004469A0
// Return size: 8
define fn00000000004469A0
fn00000000004469A0_entry:
	rsp = fp
	// succ:  l00000000004469A0
l00000000004469A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xB8<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp + 0x20<64>:word128] = xmm7
	r14 = rcx
	rcx = rbp
	rdi = rbp
	eax = Mem0[rbp + 0xA8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x88<64>:word64] = rdx
	xmm7 = Mem0[r8:word128]
	Mem0[rbp - 0x4C<64>:word32] = r9d
	Mem0[rbp - 0x50<64>:word32] = eax
	rax = Mem0[rbp + 0xB0<64>:word64]
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rax:real80], real80, real64)
	rax = Mem0[rbp + 0xA0<64>:word64]
	rdx = rax + 0xD0<64>
	Mem0[rbp - 0x40<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call fn000000000046AE80 (retsize: 8;)
	rcx = rbp
	call fn0000000000472FC0 (retsize: 8;)
	rsp = rsp - 0x50<64>
	SCZO = cond(rsp)
	r12 = rax
	rbx = rsp + 0x30<64>
	Mem0[rbp - 0x48<64>:word64] = rbx
	call fn000000000046AC50 (retsize: 8;)
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rbp - 0x40<64>:real80], real80, real64)
	rsi = rbp + 0x10<64>
	r13 = rbp - 0x20<64>
	r9 = 0x000000000048DF28<p64>
	Mem0[rsp + 0x20<64>:word32] = 0<32>
	r8d = 0x40<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbx
	Mem0[rsp + 0x28<64>:word64] = r13
	rcx = rsi
	Mem0[rbp + 0x10<64>:word64] = rax
	Mem0[rbp - 0x20<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call fn000000000046FF90 (retsize: 8;)
	SCZO = cond(eax - 0x3F<32>)
	branch Test(LE,SZO) l0000000000446AA9
	// succ:  l0000000000446A59 l0000000000446AA9
l0000000000446A59:
	ebx = SLICE(rax + 1<64>, word32, 0)
	rbx = CONVERT(ebx, word32, uint64)
	rax = CONVERT(ebx, word32, int64)
	rax = rax + 0x1E<64>
	SCZO = cond(rax)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	r15 = rsp + 0x30<64>
	Mem0[rbp - 0x48<64>:word64] = r15
	call fn000000000046AC50 (retsize: 8;)
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rbp - 0x40<64>:real80], real80, real64)
	r9 = 0x000000000048DF28<p64>
	Mem0[rsp + 0x28<64>:word64] = r13
	Mem0[rsp + 0x20<64>:word32] = 0<32>
	r8d = ebx
	r8 = CONVERT(r8d, word32, uint64)
	rdx = r15
	rcx = rsi
	Mem0[rbp + 0x10<64>:word64] = rax
	Mem0[rbp - 0x20<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call fn000000000046FF90 (retsize: 8;)
	// succ:  l0000000000446AA9
l0000000000446AA9:
	r15 = rbp - 1<64>
	rbx = CONVERT(eax, word32, int64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbx
	rcx = rsi
	r9 = r15
	call fn0000000000452090 (retsize: 8;)
	r13 = Mem0[rbp + 0x10<64>:word64]
	eax = Mem0[r13 - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000446AD9
	// succ:  l0000000000446ACD l0000000000446AD9
l0000000000446ACD:
	rcx = rsi
	call fn00000000004505A0 (retsize: 8;)
	r13 = Mem0[rbp + 0x10<64>:word64]
	// succ:  l0000000000446AD9
l0000000000446AD9:
	eax = CONVERT(Mem0[r12 + 0x38<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 1<8>)
	branch Test(EQ,Z) l0000000000446B03
	// succ:  l0000000000446AE3 l0000000000446B03
l0000000000446AE3:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000446B90
	// succ:  l0000000000446AEB l0000000000446B90
l0000000000446AEB:
	rax = Mem0[r12:word64]
	rdx = 0x000000000042B5D0<p64>
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000446BB0
	// succ:  l0000000000446B03 l0000000000446BB0
l0000000000446B03:
	rdx = Mem0[rbp - 0x48<64>:word64]
	r8 = rbx
	rcx = r13
	rax = memcpy(rcx, rdx, r8)
	// succ:  l0000000000446B12
l0000000000446B12:
	eax = CONVERT(Mem0[rbp - 0x50<64>:byte], byte, int32)
	SCZO = cond(Mem0[rbp - 0x4C<64>:byte] - 0<8>)
	r8 = rbp - 0x30<64>
	Mem0[rbp - 0x30<64>:word128] = xmm7
	Mem0[rsp + 0x28<64>:word64] = rsi
	r9 = Mem0[rbp + 0xA0<64>:word64]
	rcx = r14
	Mem0[rsp + 0x20<64>:word32] = eax
	rdx = Mem0[rbp + 0x88<64>:word64]
	branch Test(EQ,Z) l0000000000446B80
	// succ:  l0000000000446B3E l0000000000446B80
l0000000000446B3E:
	call fn00000000004472D0 (retsize: 8;)
	// succ:  l0000000000446B43
l0000000000446B43:
	rcx = Mem0[rbp + 0x10<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000446BA0
	// succ:  l0000000000446B55 l0000000000446BA0
l0000000000446B55:
	rcx = rdi
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	xmm7 = Mem0[rbp + 0x20<64>:word128]
	rax = r14
	rsp = rbp + 0x38<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004469A0_exit
l0000000000446B80:
	call fn0000000000446BF0 (retsize: 8;)
	goto l0000000000446B43
	// succ:  l0000000000446B43
l0000000000446B90:
	rcx = r12
	call fn000000000042B320 (retsize: 8;)
	goto l0000000000446AEB
	// succ:  l0000000000446AEB
l0000000000446BA0:
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	rdx = r15
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000446B55
	// succ:  l0000000000446B55
l0000000000446BB0:
	rdx = Mem0[rbp - 0x48<64>:word64]
	r9 = r13
	rcx = r12
	r8 = rdx + rbx
	call rax (retsize: 8;)
	goto l0000000000446B12
	// succ:  l0000000000446B12
fn00000000004469A0_exit:


// fn0000000000446BF0
// Return size: 8
define fn0000000000446BF0
fn0000000000446BF0_entry:
	rsp = fp
	// succ:  l0000000000446BF0
l0000000000446BF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xD8<64>
	SCZO = cond(rsp)
	rax = Mem0[r8:word64]
	r12 = Mem0[r8 + 8<64>:word64]
	r14 = r9 + 0xD0<64>
	r15 = rcx
	rbp = r9
	Mem0[rsp + 0x40<64>:word64] = rax
	eax = Mem0[rsp + 0x140<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = r14
	Mem0[rsp + 0x3F<64>:byte] = r12b
	Mem0[rsp + 0x64<64>:word32] = eax
	Mem0[rsp + 0x60<64>:byte] = al
	call fn0000000000472FC0 (retsize: 8;)
	rcx = 0x000000000048B2B0<p64>
	r13 = rax
	call fn000000000042BB80 (retsize: 8;)
	rsi = rax
	rax = Mem0[rbp + 0xD0<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	rbx = rax + rsi * 8<64>
	rdi = Mem0[rbx:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000044713B
	// succ:  l0000000000446C65 l000000000044713B
l0000000000446C65:
	rax = Mem0[rsp + 0x148<64>:word64]
	rsi = Mem0[rax:word64]
	eax = CONVERT(Mem0[rdi + 0x64<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[rsi:byte] - al)
	branch Test(EQ,Z) l0000000000446F43
	// succ:  l0000000000446C7C l0000000000446F43
l0000000000446C7C:
	eax = Mem0[rdi + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rbx = Mem0[rsi - 0x18<64>:word64]
	Mem0[rsp + 0xA0<64>:word32] = eax
	rax = Mem0[rdi + 0x38<64>:word64]
	Mem0[rsp + 0x68<64>:word64] = rax
	rax = Mem0[rdi + 0x40<64>:word64]
	Mem0[rsp + 0x48<64>:word64] = rax
	// succ:  l0000000000446C9C
l0000000000446C9C:
	rax = rsi + rbx
	SCZO = cond(rsi - rax)
	branch Test(UGE,C) l0000000000446CC6
	// succ:  l0000000000446CA5 l0000000000446CC6
l0000000000446CA5:
	edx = CONVERT(Mem0[rsi:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[r13 + 0x30<64>:word64]
	SZO = cond(Mem0[rcx + rdx * 2<64>:byte] & 8<8>)
	C = false
	branch Test(EQ,Z) l0000000000446CC6
	// succ:  l0000000000446CB2 l0000000000446CC6
l0000000000446CB2:
	r14 = rsi
	// succ:  l0000000000446CB5
l0000000000446CB5:
	r14 = r14 + 1<64>
	SCZO = cond(r14)
	SCZO = cond(r14 - rax)
	branch Test(NE,Z) l0000000000446D00
	// succ:  l0000000000446CBE l0000000000446D00
l0000000000446CBE:
	SZO = cond(rbx & rbx)
	C = false
	r14 = rbx
	branch Test(NE,Z) l0000000000446D15
	// succ:  l0000000000446CC6 l0000000000446D15
l0000000000446CC6:
	rax = Mem0[rsp + 0x40<64>:word64]
	r12b = Mem0[rsp + 0x3F<64>:byte]
	Mem0[rbp + 0x10<64>:word64] = 0<64>
	Mem0[r15:word64] = rax
	rax = r15
	Mem0[r15 + 8<64>:word64] = r12
	rsp = rsp + 0xD8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000446BF0_exit
l0000000000446D00:
	edx = CONVERT(Mem0[r14:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(Mem0[rcx + rdx * 2<64>:byte] & 8<8>)
	C = false
	branch Test(NE,Z) l0000000000446CB5
	// succ:  l0000000000446D0A l0000000000446CB5
l0000000000446D0A:
	r14 = r14 - rsi
	SCZO = cond(r14)
	rbx = r14
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000446CC6
	// succ:  l0000000000446D15 l0000000000446CC6
l0000000000446D15:
	rax = rsp + 0xC0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x50<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	Mem0[rsp + 0xB0<64>:word64] = rax
	rax = rsp + 0xB0<64>
	rdx = rbx + rbx
	rcx = rax
	Mem0[rsp + 0x58<64>:word64] = rax
	call fn0000000000451BE0 (retsize: 8;)
	eax = Mem0[rdi + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r13d = r14d
	r13 = CONVERT(r13d, word32, uint64)
	r13d = r13d - eax
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	SZO = cond(r13d & r13d)
	C = false
	branch Test(LE,SZO) l0000000000446E53
	// succ:  l0000000000446D61 l0000000000446E53
l0000000000446D61:
	SZO = cond(eax & eax)
	C = false
	branch Test(NS,S) l0000000000446D67
	// succ:  l0000000000446D63_1 l0000000000446D67
l0000000000446D63_1:
	r13d = r14d
	// succ:  l0000000000446D67
l0000000000446D67:
	SCZO = cond(Mem0[rdi + 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l00000000004470F0
	// succ:  l0000000000446D72 l00000000004470F0
l0000000000446D72:
	rax = Mem0[rsp + 0xB0<64>:word64]
	r9d = SLICE(r13 + 0<64> + r13, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	rcx = Mem0[rsp + 0x58<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r9 = CONVERT(r9d, word32, int64)
	r8 = Mem0[rax - 0x18<64>:word64]
	Mem0[rsp + 0x20<64>:word32] = 0<32>
	call fn00000000004508E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = CONVERT(r13d, word32, int64)
	rcx = Mem0[rsp + 0xB0<64>:word64]
	r14d = CONVERT(Mem0[rdi + 0x22<64>:byte], byte, int32)
	rax = rax + rsi
	SCZO = cond(rax)
	Mem0[rsp + 0x70<64>:word64] = rax
	rax = Mem0[rdi + 0x18<64>:word64]
	r8d = Mem0[rcx - 8<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x78<64>:word64] = rax
	rax = Mem0[rdi + 0x10<64>:word64]
	SZO = cond(r8d & r8d)
	C = false
	Mem0[rsp + 0x80<64>:word64] = rax
	branch Test(SG,S) l0000000000446DE2
	// succ:  l0000000000446DD0 l0000000000446DE2
l0000000000446DD0:
	rcx = Mem0[rsp + 0x58<64>:word64]
	call fn00000000004505A0 (retsize: 8;)
	rcx = Mem0[rsp + 0xB0<64>:word64]
	// succ:  l0000000000446DE2
l0000000000446DE2:
	rax = Mem0[rsp + 0x70<64>:word64]
	r9 = Mem0[rsp + 0x78<64>:word64]
	edx = r14d
	rdx = CONVERT(edx, word32, uint64)
	r8 = Mem0[rsp + 0x80<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rsi
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn000000000046F7F0 (retsize: 8;)
	r14 = rax
	rax = Mem0[rsp + 0xB0<64>:word64]
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l0000000000446E2A
	// succ:  l0000000000446E18 l0000000000446E2A
l0000000000446E18:
	rcx = Mem0[rsp + 0x58<64>:word64]
	call fn00000000004505A0 (retsize: 8;)
	rax = Mem0[rsp + 0xB0<64>:word64]
	// succ:  l0000000000446E2A
l0000000000446E2A:
	r9 = Mem0[rax - 0x18<64>:word64]
	rdx = r14
	rdx = rdx - rax
	SCZO = cond(rdx)
	r8 = r9
	r8 = r8 - rdx
	SCZO = cond(r8)
	SCZO = cond(rdx - r9)
	branch Test(UGT,CZ) l00000000004472A6
	// succ:  l0000000000446E43 l00000000004472A6
l0000000000446E43:
	rcx = Mem0[rsp + 0x58<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000451CC0 (retsize: 8;)
	eax = Mem0[rdi + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000446E53
l0000000000446E53:
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000446E83
	// succ:  l0000000000446E57 l0000000000446E83
l0000000000446E57:
	r14 = Mem0[rsp + 0x58<64>:word64]
	edx = CONVERT(Mem0[rdi + 0x21<64>:byte], byte, int32)
	rcx = r14
	call fn0000000000451E10 (retsize: 8;)
	SZO = cond(r13d & r13d)
	C = false
	branch Test(SG,S) l0000000000447108
	// succ:  l0000000000446E71 l0000000000447108
l0000000000446E71:
	r8 = CONVERT(Mem0[rdi + 0x58<64>:word32], word32, int64)
	rdx = CONVERT(r13d, word32, int64)
	rcx = r14
	rdx = rdx + rsi
	SCZO = cond(rdx)
	call fn0000000000450E00 (retsize: 8;)
	// succ:  l0000000000446E83
l0000000000446E83:
	eax = Mem0[rbp + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = Mem0[rsp + 0x48<64>:word64]
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xB0<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x70<64>:word32] = edx
	rdx = Mem0[rsp + 0xB0<64>:word64]
	rcx = rcx + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rcx)
	SZO = cond(ah & 2<8>)
	C = false
	rdx = rcx
	branch Test(NE,Z) l00000000004470E0
	// succ:  l0000000000446EAF l00000000004470E0
l0000000000446EAF:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000446EB1
l0000000000446EB1:
	rax = rax + rdx
	SCZO = cond(rax)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rbx = rax
	rax = rsp + 0x9F<64>
	r8 = rax
	Mem0[rsp + 0x88<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	rdx = rbx + rbx
	Mem0[rsp + 0xC0<64>:word64] = rax
	call fn0000000000451BE0 (retsize: 8;)
	rsi = Mem0[rbp + 0x10<64>:word64]
	rcx = rbx
	r13 = rsp + 0xA0<64>
	r14 = 0x000000000048DF14<p64>
	SCZO = cond(rbx - rsi)
	dl = CONVERT(Test(ULT,C), bool, int8)
	SCZO = cond(Mem0[rsp + 0x70<64>:word32] - 0x10<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	edx = edx & eax
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = CONVERT(Mem0[rsp + 0x60<64>:byte], byte, int32)
	Mem0[rsp + 0x78<64>:byte] = dl
	rdx = rsi
	rdx = rdx - rcx
	SCZO = cond(rdx)
	Mem0[rsp + 0x80<64>:word64] = rdx
	Mem0[rsp + 0x60<64>:word32] = eax
	// succ:  l0000000000446F2C
l0000000000446F2C:
	SCZO = cond(Mem0[r13 + 0<64> + rbx:byte] - 4<8>)
	branch Test(UGT,CZ) l0000000000446F81
	// succ:  l0000000000446F34 l0000000000446F81
l0000000000446F34:
	eax = CONVERT(Mem0[r13 + 0<64> + rbx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(Mem0[r14 + rax * 4<64>:word32], word32, int64)
	rax = rax + r14
	SCZO = cond(rax)
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000446BF0_exit
l0000000000446F43:
	eax = Mem0[rdi + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rbx = Mem0[rsi - 0x18<64>:word64]
	Mem0[rsp + 0xA0<64>:word32] = eax
	rax = Mem0[rdi + 0x48<64>:word64]
	SZO = cond(rbx & rbx)
	C = false
	Mem0[rsp + 0x68<64>:word64] = rax
	rax = Mem0[rdi + 0x50<64>:word64]
	Mem0[rsp + 0x48<64>:word64] = rax
	branch Test(EQ,Z) l0000000000446CC6
	// succ:  l0000000000446F6C l0000000000446CC6
l0000000000446F6C:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	goto l0000000000446C9C
	// succ:  l0000000000446C9C
l0000000000446F81:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	SCZO = cond(rbx - 4<64>)
	branch Test(NE,Z) l0000000000446F2C
	// succ:  l0000000000446F8B l0000000000446F2C
l0000000000446F8B:
	SCZO = cond(Mem0[rsp + 0x48<64>:word64] - 1<64>)
	branch Test(ULE,CZ) l0000000000446FAF
	// succ:  l0000000000446F93 l0000000000446FAF
l0000000000446F93:
	rax = Mem0[rsp + 0x48<64>:word64]
	rdx = Mem0[rsp + 0x68<64>:word64]
	rcx = Mem0[rsp + 0x50<64>:word64]
	r8 = rax - 1<64>
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	call fn0000000000450E00 (retsize: 8;)
	// succ:  l0000000000446FAF
l0000000000446FAF:
	rdx = Mem0[rsp + 0xC0<64>:word64]
	rax = Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rsi - rax)
	branch Test(ULE,CZ) l0000000000447133
	// succ:  l0000000000446FC4 l0000000000447133
l0000000000446FC4:
	SCZO = cond(Mem0[rsp + 0x70<64>:word32] - 0x20<32>)
	branch Test(EQ,Z) l00000000004471F5
	// succ:  l0000000000446FCF l00000000004471F5
l0000000000446FCF:
	edx = CONVERT(Mem0[rsp + 0x64<64>:byte], byte, int32)
	rcx = Mem0[rsp + 0x50<64>:word64]
	r9 = rsi
	r9 = r9 - rax
	SCZO = cond(r9)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	Mem0[rsp + 0x20<64>:word32] = edx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn00000000004508E0 (retsize: 8;)
	rsp = rsp + 8<64>
	// succ:  l0000000000446FED
l0000000000446FED:
	rdx = Mem0[rsp + 0xC0<64>:word64]
	// succ:  l0000000000446FF5
l0000000000446FF5:
	SCZO = cond(Mem0[rsp + 0x3F<64>:byte] - 0<8>)
	rsi = CONVERT(esi, word32, int64)
	branch Test(NE,Z) l000000000044701E
	// succ:  l0000000000446FFF l000000000044701E
l0000000000446FFF:
	rcx = Mem0[rsp + 0x40<64>:word64]
	r8 = rsi
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rsi - rax)
	rdx = Mem0[rsp + 0xC0<64>:word64]
	branch Test(NE,Z) l000000000044723D
	// succ:  l000000000044701E l000000000044723D
l000000000044701E:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rdx - 8<64>:word32] = __xadd(Mem0[rdx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rdx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000447227
	// succ:  l0000000000447030 l0000000000447227
l0000000000447030:
	rax = Mem0[rsp + 0xB0<64>:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[rax - 8<64>:word32] = __xadd(Mem0[rax - 8<64>:word32], edx)
	SCZO = cond(Mem0[rax - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(GT,SZO) l0000000000446CC6
	// succ:  l000000000044704A l0000000000446CC6
l000000000044704A:
	rdx = Mem0[rsp + 0x50<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000446CC6
	// succ:  l0000000000446CC6
l00000000004470E0:
	rax = Mem0[rdi + 0x30<64>:word64]
	goto l0000000000446EB1
	// succ:  l0000000000446EB1
l00000000004470F0:
	rcx = Mem0[rsp + 0x58<64>:word64]
	r8 = CONVERT(r13d, word32, int64)
	rdx = rsi
	call fn00000000004511C0 (retsize: 8;)
	eax = Mem0[rdi + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000446E53
	// succ:  l0000000000446E53
l0000000000447108:
	r14 = Mem0[rsp + 0x58<64>:word64]
	r8d = CONVERT(Mem0[rdi + 0x65<64>:byte], byte, int32)
	r13d = -r13d
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	C = r13d == 0<32>
	rdx = CONVERT(r13d, word32, int64)
	rcx = r14
	call fn0000000000451080 (retsize: 8;)
	r8 = rbx
	rdx = rsi
	rcx = r14
	call fn0000000000450E00 (retsize: 8;)
	goto l0000000000446E83
	// succ:  l0000000000446E83
l0000000000447133:
	rsi = rax
	goto l0000000000446FF5
	// succ:  l0000000000446FF5
l000000000044713B:
	ecx = 0x70<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rdi = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = 0x0000000000497690<p64>
	Mem0[rdi + 0x10<64>:word64] = 0<64>
	Mem0[rdi + 0x18<64>:word64] = 0<64>
	rdx = r14
	Mem0[rdi:word64] = rax
	Mem0[rdi + 0x20<64>:byte] = 0<8>
	rcx = rdi
	Mem0[rdi + 0x21<64>:byte] = 0<8>
	Mem0[rdi + 0x22<64>:byte] = 0<8>
	Mem0[rdi + 0x28<64>:word64] = 0<64>
	Mem0[rdi + 0x30<64>:word64] = 0<64>
	Mem0[rdi + 0x38<64>:word64] = 0<64>
	Mem0[rdi + 0x40<64>:word64] = 0<64>
	Mem0[rdi + 0x48<64>:word64] = 0<64>
	Mem0[rdi + 0x50<64>:word64] = 0<64>
	Mem0[rdi + 0x58<64>:word32] = 0<32>
	Mem0[rdi + 0x5C<64>:byte] = 0<8>
	Mem0[rdi + 0x5D<64>:byte] = 0<8>
	Mem0[rdi + 0x5E<64>:byte] = 0<8>
	Mem0[rdi + 0x5F<64>:byte] = 0<8>
	Mem0[rdi + 0x60<64>:byte] = 0<8>
	Mem0[rdi + 0x61<64>:byte] = 0<8>
	Mem0[rdi + 0x62<64>:byte] = 0<8>
	Mem0[rdi + 0x63<64>:byte] = 0<8>
	Mem0[rdi + 0x6F<64>:byte] = 0<8>
	call fn00000000004661A0 (retsize: 8;)
	rcx = Mem0[rbp + 0xD0<64>:word64]
	rdx = rdi
	r8 = rsi
	call fn0000000000469430 (retsize: 8;)
	rdi = Mem0[rbx:word64]
	goto l0000000000446C65
	// succ:  l0000000000446C65
l00000000004471F5:
	r8d = CONVERT(Mem0[rsp + 0x64<64>:byte], byte, int32)
	rcx = Mem0[rsp + 0x50<64>:word64]
	rdx = rsi
	rdx = rdx - rax
	SCZO = cond(rdx)
	call fn0000000000451080 (retsize: 8;)
	goto l0000000000446FED
	// succ:  l0000000000446FED
l0000000000447227:
	rcx = rdx - 0x18<64>
	rdx = Mem0[rsp + 0x88<64>:word64]
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000447030
	// succ:  l0000000000447030
l000000000044723D:
	Mem0[rsp + 0x3F<64>:byte] = 1<8>
	goto l000000000044701E
	// succ:  l000000000044701E
l00000000004472A6:
	r8 = rdx
	rcx = 0x000000000048DEC8<p64>
	rdx = 0x000000000048DEB2<p64>
	call fn0000000000471560 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l00000000004472CF_thunk_fn00000000004472D0
l00000000004472CF_thunk_fn00000000004472D0:
	call fn00000000004472D0 (retsize: 0;)
	return
	// succ:  fn0000000000446BF0_exit
fn0000000000446BF0_exit:


// fn00000000004472D0
// Return size: 8
define fn00000000004472D0
fn00000000004472D0_entry:
	rsp = fp
	// succ:  l00000000004472D0
l00000000004472D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xD8<64>
	SCZO = cond(rsp)
	rax = Mem0[r8:word64]
	r12 = Mem0[r8 + 8<64>:word64]
	r14 = r9 + 0xD0<64>
	r15 = rcx
	rbp = r9
	Mem0[rsp + 0x40<64>:word64] = rax
	eax = Mem0[rsp + 0x140<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = r14
	Mem0[rsp + 0x3F<64>:byte] = r12b
	Mem0[rsp + 0x64<64>:word32] = eax
	Mem0[rsp + 0x60<64>:byte] = al
	call fn0000000000472FC0 (retsize: 8;)
	rcx = 0x000000000048B2C0<p64>
	r13 = rax
	call fn000000000042BB80 (retsize: 8;)
	rsi = rax
	rax = Mem0[rbp + 0xD0<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	rbx = rax + rsi * 8<64>
	rdi = Mem0[rbx:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000044781B
	// succ:  l0000000000447345 l000000000044781B
l0000000000447345:
	rax = Mem0[rsp + 0x148<64>:word64]
	rsi = Mem0[rax:word64]
	eax = CONVERT(Mem0[rdi + 0x64<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[rsi:byte] - al)
	branch Test(EQ,Z) l0000000000447623
	// succ:  l000000000044735C l0000000000447623
l000000000044735C:
	eax = Mem0[rdi + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rbx = Mem0[rsi - 0x18<64>:word64]
	Mem0[rsp + 0xA0<64>:word32] = eax
	rax = Mem0[rdi + 0x38<64>:word64]
	Mem0[rsp + 0x68<64>:word64] = rax
	rax = Mem0[rdi + 0x40<64>:word64]
	Mem0[rsp + 0x48<64>:word64] = rax
	// succ:  l000000000044737C
l000000000044737C:
	rax = rsi + rbx
	SCZO = cond(rsi - rax)
	branch Test(UGE,C) l00000000004473A6
	// succ:  l0000000000447385 l00000000004473A6
l0000000000447385:
	edx = CONVERT(Mem0[rsi:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[r13 + 0x30<64>:word64]
	SZO = cond(Mem0[rcx + rdx * 2<64>:byte] & 8<8>)
	C = false
	branch Test(EQ,Z) l00000000004473A6
	// succ:  l0000000000447392 l00000000004473A6
l0000000000447392:
	r14 = rsi
	// succ:  l0000000000447395
l0000000000447395:
	r14 = r14 + 1<64>
	SCZO = cond(r14)
	SCZO = cond(r14 - rax)
	branch Test(NE,Z) l00000000004473E0
	// succ:  l000000000044739E l00000000004473E0
l000000000044739E:
	SZO = cond(rbx & rbx)
	C = false
	r14 = rbx
	branch Test(NE,Z) l00000000004473F5
	// succ:  l00000000004473A6 l00000000004473F5
l00000000004473A6:
	rax = Mem0[rsp + 0x40<64>:word64]
	r12b = Mem0[rsp + 0x3F<64>:byte]
	Mem0[rbp + 0x10<64>:word64] = 0<64>
	Mem0[r15:word64] = rax
	rax = r15
	Mem0[r15 + 8<64>:word64] = r12
	rsp = rsp + 0xD8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004472D0_exit
l00000000004473E0:
	edx = CONVERT(Mem0[r14:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(Mem0[rcx + rdx * 2<64>:byte] & 8<8>)
	C = false
	branch Test(NE,Z) l0000000000447395
	// succ:  l00000000004473EA l0000000000447395
l00000000004473EA:
	r14 = r14 - rsi
	SCZO = cond(r14)
	rbx = r14
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l00000000004473A6
	// succ:  l00000000004473F5 l00000000004473A6
l00000000004473F5:
	rax = rsp + 0xC0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x50<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	Mem0[rsp + 0xB0<64>:word64] = rax
	rax = rsp + 0xB0<64>
	rdx = rbx + rbx
	rcx = rax
	Mem0[rsp + 0x58<64>:word64] = rax
	call fn0000000000451BE0 (retsize: 8;)
	eax = Mem0[rdi + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r13d = r14d
	r13 = CONVERT(r13d, word32, uint64)
	r13d = r13d - eax
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	SZO = cond(r13d & r13d)
	C = false
	branch Test(LE,SZO) l0000000000447533
	// succ:  l0000000000447441 l0000000000447533
l0000000000447441:
	SZO = cond(eax & eax)
	C = false
	branch Test(NS,S) l0000000000447447
	// succ:  l0000000000447443_1 l0000000000447447
l0000000000447443_1:
	r13d = r14d
	// succ:  l0000000000447447
l0000000000447447:
	SCZO = cond(Mem0[rdi + 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l00000000004477D0
	// succ:  l0000000000447452 l00000000004477D0
l0000000000447452:
	rax = Mem0[rsp + 0xB0<64>:word64]
	r9d = SLICE(r13 + 0<64> + r13, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	rcx = Mem0[rsp + 0x58<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r9 = CONVERT(r9d, word32, int64)
	r8 = Mem0[rax - 0x18<64>:word64]
	Mem0[rsp + 0x20<64>:word32] = 0<32>
	call fn00000000004508E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = CONVERT(r13d, word32, int64)
	rcx = Mem0[rsp + 0xB0<64>:word64]
	r14d = CONVERT(Mem0[rdi + 0x22<64>:byte], byte, int32)
	rax = rax + rsi
	SCZO = cond(rax)
	Mem0[rsp + 0x70<64>:word64] = rax
	rax = Mem0[rdi + 0x18<64>:word64]
	r8d = Mem0[rcx - 8<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x78<64>:word64] = rax
	rax = Mem0[rdi + 0x10<64>:word64]
	SZO = cond(r8d & r8d)
	C = false
	Mem0[rsp + 0x80<64>:word64] = rax
	branch Test(SG,S) l00000000004474C2
	// succ:  l00000000004474B0 l00000000004474C2
l00000000004474B0:
	rcx = Mem0[rsp + 0x58<64>:word64]
	call fn00000000004505A0 (retsize: 8;)
	rcx = Mem0[rsp + 0xB0<64>:word64]
	// succ:  l00000000004474C2
l00000000004474C2:
	rax = Mem0[rsp + 0x70<64>:word64]
	r9 = Mem0[rsp + 0x78<64>:word64]
	edx = r14d
	rdx = CONVERT(edx, word32, uint64)
	r8 = Mem0[rsp + 0x80<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rsi
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn000000000046F7F0 (retsize: 8;)
	r14 = rax
	rax = Mem0[rsp + 0xB0<64>:word64]
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l000000000044750A
	// succ:  l00000000004474F8 l000000000044750A
l00000000004474F8:
	rcx = Mem0[rsp + 0x58<64>:word64]
	call fn00000000004505A0 (retsize: 8;)
	rax = Mem0[rsp + 0xB0<64>:word64]
	// succ:  l000000000044750A
l000000000044750A:
	r9 = Mem0[rax - 0x18<64>:word64]
	rdx = r14
	rdx = rdx - rax
	SCZO = cond(rdx)
	r8 = r9
	r8 = r8 - rdx
	SCZO = cond(r8)
	SCZO = cond(rdx - r9)
	branch Test(UGT,CZ) l0000000000447986
	// succ:  l0000000000447523 l0000000000447986
l0000000000447523:
	rcx = Mem0[rsp + 0x58<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000451CC0 (retsize: 8;)
	eax = Mem0[rdi + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000447533
l0000000000447533:
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000447563
	// succ:  l0000000000447537 l0000000000447563
l0000000000447537:
	r14 = Mem0[rsp + 0x58<64>:word64]
	edx = CONVERT(Mem0[rdi + 0x21<64>:byte], byte, int32)
	rcx = r14
	call fn0000000000451E10 (retsize: 8;)
	SZO = cond(r13d & r13d)
	C = false
	branch Test(SG,S) l00000000004477E8
	// succ:  l0000000000447551 l00000000004477E8
l0000000000447551:
	r8 = CONVERT(Mem0[rdi + 0x58<64>:word32], word32, int64)
	rdx = CONVERT(r13d, word32, int64)
	rcx = r14
	rdx = rdx + rsi
	SCZO = cond(rdx)
	call fn0000000000450E00 (retsize: 8;)
	// succ:  l0000000000447563
l0000000000447563:
	eax = Mem0[rbp + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = Mem0[rsp + 0x48<64>:word64]
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xB0<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x70<64>:word32] = edx
	rdx = Mem0[rsp + 0xB0<64>:word64]
	rcx = rcx + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rcx)
	SZO = cond(ah & 2<8>)
	C = false
	rdx = rcx
	branch Test(NE,Z) l00000000004477C0
	// succ:  l000000000044758F l00000000004477C0
l000000000044758F:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000447591
l0000000000447591:
	rax = rax + rdx
	SCZO = cond(rax)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rbx = rax
	rax = rsp + 0x9F<64>
	r8 = rax
	Mem0[rsp + 0x88<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	rdx = rbx + rbx
	Mem0[rsp + 0xC0<64>:word64] = rax
	call fn0000000000451BE0 (retsize: 8;)
	rsi = Mem0[rbp + 0x10<64>:word64]
	rcx = rbx
	r13 = rsp + 0xA0<64>
	r14 = 0x000000000048DF00<p64>
	SCZO = cond(rbx - rsi)
	dl = CONVERT(Test(ULT,C), bool, int8)
	SCZO = cond(Mem0[rsp + 0x70<64>:word32] - 0x10<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	edx = edx & eax
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = CONVERT(Mem0[rsp + 0x60<64>:byte], byte, int32)
	Mem0[rsp + 0x78<64>:byte] = dl
	rdx = rsi
	rdx = rdx - rcx
	SCZO = cond(rdx)
	Mem0[rsp + 0x80<64>:word64] = rdx
	Mem0[rsp + 0x60<64>:word32] = eax
	// succ:  l000000000044760C
l000000000044760C:
	SCZO = cond(Mem0[r13 + 0<64> + rbx:byte] - 4<8>)
	branch Test(UGT,CZ) l0000000000447661
	// succ:  l0000000000447614 l0000000000447661
l0000000000447614:
	eax = CONVERT(Mem0[r13 + 0<64> + rbx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(Mem0[r14 + rax * 4<64>:word32], word32, int64)
	rax = rax + r14
	SCZO = cond(rax)
	call rax (retsize: 0;)
	return
	// succ:  fn00000000004472D0_exit
l0000000000447623:
	eax = Mem0[rdi + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rbx = Mem0[rsi - 0x18<64>:word64]
	Mem0[rsp + 0xA0<64>:word32] = eax
	rax = Mem0[rdi + 0x48<64>:word64]
	SZO = cond(rbx & rbx)
	C = false
	Mem0[rsp + 0x68<64>:word64] = rax
	rax = Mem0[rdi + 0x50<64>:word64]
	Mem0[rsp + 0x48<64>:word64] = rax
	branch Test(EQ,Z) l00000000004473A6
	// succ:  l000000000044764C l00000000004473A6
l000000000044764C:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	goto l000000000044737C
	// succ:  l000000000044737C
l0000000000447661:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	SCZO = cond(rbx - 4<64>)
	branch Test(NE,Z) l000000000044760C
	// succ:  l000000000044766B l000000000044760C
l000000000044766B:
	SCZO = cond(Mem0[rsp + 0x48<64>:word64] - 1<64>)
	branch Test(ULE,CZ) l000000000044768F
	// succ:  l0000000000447673 l000000000044768F
l0000000000447673:
	rax = Mem0[rsp + 0x48<64>:word64]
	rdx = Mem0[rsp + 0x68<64>:word64]
	rcx = Mem0[rsp + 0x50<64>:word64]
	r8 = rax - 1<64>
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	call fn0000000000450E00 (retsize: 8;)
	// succ:  l000000000044768F
l000000000044768F:
	rdx = Mem0[rsp + 0xC0<64>:word64]
	rax = Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rsi - rax)
	branch Test(ULE,CZ) l0000000000447813
	// succ:  l00000000004476A4 l0000000000447813
l00000000004476A4:
	SCZO = cond(Mem0[rsp + 0x70<64>:word32] - 0x20<32>)
	branch Test(EQ,Z) l00000000004478D5
	// succ:  l00000000004476AF l00000000004478D5
l00000000004476AF:
	edx = CONVERT(Mem0[rsp + 0x64<64>:byte], byte, int32)
	rcx = Mem0[rsp + 0x50<64>:word64]
	r9 = rsi
	r9 = r9 - rax
	SCZO = cond(r9)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	Mem0[rsp + 0x20<64>:word32] = edx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn00000000004508E0 (retsize: 8;)
	rsp = rsp + 8<64>
	// succ:  l00000000004476CD
l00000000004476CD:
	rdx = Mem0[rsp + 0xC0<64>:word64]
	// succ:  l00000000004476D5
l00000000004476D5:
	SCZO = cond(Mem0[rsp + 0x3F<64>:byte] - 0<8>)
	rsi = CONVERT(esi, word32, int64)
	branch Test(NE,Z) l00000000004476FE
	// succ:  l00000000004476DF l00000000004476FE
l00000000004476DF:
	rcx = Mem0[rsp + 0x40<64>:word64]
	r8 = rsi
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rsi - rax)
	rdx = Mem0[rsp + 0xC0<64>:word64]
	branch Test(NE,Z) l000000000044791D
	// succ:  l00000000004476FE l000000000044791D
l00000000004476FE:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rdx - 8<64>:word32] = __xadd(Mem0[rdx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rdx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000447907
	// succ:  l0000000000447710 l0000000000447907
l0000000000447710:
	rax = Mem0[rsp + 0xB0<64>:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[rax - 8<64>:word32] = __xadd(Mem0[rax - 8<64>:word32], edx)
	SCZO = cond(Mem0[rax - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(GT,SZO) l00000000004473A6
	// succ:  l000000000044772A l00000000004473A6
l000000000044772A:
	rdx = Mem0[rsp + 0x50<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A50 (retsize: 8;)
	goto l00000000004473A6
	// succ:  l00000000004473A6
l00000000004477C0:
	rax = Mem0[rdi + 0x30<64>:word64]
	goto l0000000000447591
	// succ:  l0000000000447591
l00000000004477D0:
	rcx = Mem0[rsp + 0x58<64>:word64]
	r8 = CONVERT(r13d, word32, int64)
	rdx = rsi
	call fn00000000004511C0 (retsize: 8;)
	eax = Mem0[rdi + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000447533
	// succ:  l0000000000447533
l00000000004477E8:
	r14 = Mem0[rsp + 0x58<64>:word64]
	r8d = CONVERT(Mem0[rdi + 0x65<64>:byte], byte, int32)
	r13d = -r13d
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	C = r13d == 0<32>
	rdx = CONVERT(r13d, word32, int64)
	rcx = r14
	call fn0000000000451080 (retsize: 8;)
	r8 = rbx
	rdx = rsi
	rcx = r14
	call fn0000000000450E00 (retsize: 8;)
	goto l0000000000447563
	// succ:  l0000000000447563
l0000000000447813:
	rsi = rax
	goto l00000000004476D5
	// succ:  l00000000004476D5
l000000000044781B:
	ecx = 0x70<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rdi = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = 0x00000000004976B0<p64>
	Mem0[rdi + 0x10<64>:word64] = 0<64>
	Mem0[rdi + 0x18<64>:word64] = 0<64>
	rdx = r14
	Mem0[rdi:word64] = rax
	Mem0[rdi + 0x20<64>:byte] = 0<8>
	rcx = rdi
	Mem0[rdi + 0x21<64>:byte] = 0<8>
	Mem0[rdi + 0x22<64>:byte] = 0<8>
	Mem0[rdi + 0x28<64>:word64] = 0<64>
	Mem0[rdi + 0x30<64>:word64] = 0<64>
	Mem0[rdi + 0x38<64>:word64] = 0<64>
	Mem0[rdi + 0x40<64>:word64] = 0<64>
	Mem0[rdi + 0x48<64>:word64] = 0<64>
	Mem0[rdi + 0x50<64>:word64] = 0<64>
	Mem0[rdi + 0x58<64>:word32] = 0<32>
	Mem0[rdi + 0x5C<64>:byte] = 0<8>
	Mem0[rdi + 0x5D<64>:byte] = 0<8>
	Mem0[rdi + 0x5E<64>:byte] = 0<8>
	Mem0[rdi + 0x5F<64>:byte] = 0<8>
	Mem0[rdi + 0x60<64>:byte] = 0<8>
	Mem0[rdi + 0x61<64>:byte] = 0<8>
	Mem0[rdi + 0x62<64>:byte] = 0<8>
	Mem0[rdi + 0x63<64>:byte] = 0<8>
	Mem0[rdi + 0x6F<64>:byte] = 0<8>
	call fn0000000000466B10 (retsize: 8;)
	rcx = Mem0[rbp + 0xD0<64>:word64]
	rdx = rdi
	r8 = rsi
	call fn0000000000469430 (retsize: 8;)
	rdi = Mem0[rbx:word64]
	goto l0000000000447345
	// succ:  l0000000000447345
l00000000004478D5:
	r8d = CONVERT(Mem0[rsp + 0x64<64>:byte], byte, int32)
	rcx = Mem0[rsp + 0x50<64>:word64]
	rdx = rsi
	rdx = rdx - rax
	SCZO = cond(rdx)
	call fn0000000000451080 (retsize: 8;)
	goto l00000000004476CD
	// succ:  l00000000004476CD
l0000000000447907:
	rcx = rdx - 0x18<64>
	rdx = Mem0[rsp + 0x88<64>:word64]
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000447710
	// succ:  l0000000000447710
l000000000044791D:
	Mem0[rsp + 0x3F<64>:byte] = 1<8>
	goto l00000000004476FE
	// succ:  l00000000004476FE
l0000000000447986:
	r8 = rdx
	rcx = 0x000000000048DEC8<p64>
	rdx = 0x000000000048DEB2<p64>
	call fn0000000000471560 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l00000000004479AF_thunk_fn00000000004479B0
l00000000004479AF_thunk_fn00000000004479B0:
	call fn00000000004479B0 (retsize: 0;)
	return
	// succ:  fn00000000004472D0_exit
fn00000000004472D0_exit:


// fn00000000004479B0
// Return size: 8
define fn00000000004479B0
fn00000000004479B0_entry:
	rsp = fp
	// succ:  l00000000004479B0
l00000000004479B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x50<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	r9d = CONVERT(r9b, byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x40<64>
	Mem0[rsp + 0x30<64>:word64] = rcx
	ecx = CONVERT(Mem0[rsp + 0x88<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x40<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word32] = ecx
	rcx = Mem0[rsp + 0x80<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x18<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x50<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004479B0_exit
fn00000000004479B0_exit:


// fn0000000000447A10
// Return size: 8
define fn0000000000447A10
fn0000000000447A10_entry:
	rsp = fp
	// succ:  l0000000000447A10
l0000000000447A10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0xA0<64>:word64]
	rbx = rcx
	rcx = rsp + 0x40<64>
	r9d = CONVERT(r9b, byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rax:real80], real80, real64)
	Mem0[rsp + 0x30<64>:word64] = rcx
	ecx = CONVERT(Mem0[rsp + 0x98<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rax = Mem0[rdx:word64]
	Mem0[rsp + 0x28<64>:word32] = ecx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x40<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000447A10_exit
fn0000000000447A10_exit:


// fn0000000000447A70
// Return size: 8
define fn0000000000447A70
fn0000000000447A70_entry:
	rsp = fp
	// succ:  l0000000000447A70
l0000000000447A70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0x80<64>:word64]
	xmm1 = Mem0[r8:word128]
	SZO = cond(r9b & r9b)
	C = false
	rbx = rcx
	r8d = Mem0[rsp + 0x78<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	r9 = Mem0[rsp + 0x70<64>:word64]
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rax
	r8d = CONVERT(r8w, word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = r8d
	r8 = rsp + 0x30<64>
	branch Test(NE,Z) l0000000000447AC0
	// succ:  l0000000000447AAC l0000000000447AC0
l0000000000447AAC:
	call fn0000000000447CD0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000447A70_exit
l0000000000447AC0:
	call fn00000000004484C0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000447A70_exit
fn0000000000447A70_exit:


// fn0000000000447AD0
// Return size: 8
define fn0000000000447AD0
fn0000000000447AD0_entry:
	rsp = fp
	// succ:  l0000000000447AD0
l0000000000447AD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xB8<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp + 0x20<64>:word128] = xmm7
	r15 = rcx
	rcx = rbp
	rdi = rbp
	eax = Mem0[rbp + 0xA8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x88<64>:word64] = rdx
	xmm7 = Mem0[r8:word128]
	Mem0[rbp - 0x44<64>:word32] = r9d
	Mem0[rbp - 0x48<64>:word32] = eax
	rax = Mem0[rbp + 0xB0<64>:word64]
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rax:real80], real80, real64)
	rax = Mem0[rbp + 0xA0<64>:word64]
	rdx = rax + 0xD0<64>
	Mem0[rbp - 0x40<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call fn000000000046AE80 (retsize: 8;)
	rcx = rbp
	call fn0000000000473020 (retsize: 8;)
	rsp = rsp - 0x50<64>
	SCZO = cond(rsp)
	r14 = rax
	rbx = rsp + 0x30<64>
	r12 = rbx
	call fn000000000046AC50 (retsize: 8;)
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rbp - 0x40<64>:real80], real80, real64)
	rsi = rbp + 0x10<64>
	r13 = rbp - 0x20<64>
	r9 = 0x000000000048DBD8<p64>
	Mem0[rsp + 0x20<64>:word32] = 0<32>
	r8d = 0x40<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbx
	Mem0[rsp + 0x28<64>:word64] = r13
	rcx = rsi
	Mem0[rbp + 0x10<64>:word64] = rax
	Mem0[rbp - 0x20<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call fn000000000046FF90 (retsize: 8;)
	SCZO = cond(eax - 0x3F<32>)
	branch Test(LE,SZO) l0000000000447BDA
	// succ:  l0000000000447B88 l0000000000447BDA
l0000000000447B88:
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbp - 0x4C<64>:word32] = eax
	rax = CONVERT(eax, int32, int64)
	rax = rax + 0x1E<64>
	SCZO = cond(rax)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	rbx = rsp + 0x30<64>
	r12 = rbx
	call fn000000000046AC50 (retsize: 8;)
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rbp - 0x40<64>:real80], real80, real64)
	r8d = Mem0[rbp - 0x4C<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	r9 = 0x000000000048DBD8<p64>
	Mem0[rsp + 0x28<64>:word64] = r13
	Mem0[rsp + 0x20<64>:word32] = 0<32>
	rdx = rbx
	rcx = rsi
	Mem0[rbp + 0x10<64>:word64] = rax
	Mem0[rbp - 0x20<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call fn000000000046FF90 (retsize: 8;)
	// succ:  l0000000000447BDA
l0000000000447BDA:
	r13 = rbp - 1<64>
	rbx = CONVERT(eax, word32, int64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbx
	rcx = rsi
	r9 = r13
	call fn000000000044AAA0 (retsize: 8;)
	r9 = Mem0[rbp + 0x10<64>:word64]
	eax = Mem0[r9 - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000447C0A
	// succ:  l0000000000447BFE l0000000000447C0A
l0000000000447BFE:
	rcx = rsi
	call fn0000000000448E80 (retsize: 8;)
	r9 = Mem0[rbp + 0x10<64>:word64]
	// succ:  l0000000000447C0A
l0000000000447C0A:
	rax = Mem0[r14:word64]
	r8 = r12 + rbx
	rdx = r12
	rcx = r14
	call Mem0[rax + 0x58<64>:word64] (retsize: 8;)
	eax = CONVERT(Mem0[rbp - 0x48<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[rbp - 0x44<64>:byte] - 0<8>)
	r8 = rbp - 0x30<64>
	Mem0[rbp - 0x30<64>:word128] = xmm7
	Mem0[rsp + 0x28<64>:word64] = rsi
	r9 = Mem0[rbp + 0xA0<64>:word64]
	rcx = r15
	Mem0[rsp + 0x20<64>:word32] = eax
	rdx = Mem0[rbp + 0x88<64>:word64]
	branch Test(EQ,Z) l0000000000447C80
	// succ:  l0000000000447C46 l0000000000447C80
l0000000000447C46:
	call fn00000000004484C0 (retsize: 8;)
	// succ:  l0000000000447C4B
l0000000000447C4B:
	rcx = Mem0[rbp + 0x10<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000447C90
	// succ:  l0000000000447C5D l0000000000447C90
l0000000000447C5D:
	rcx = rdi
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	xmm7 = Mem0[rbp + 0x20<64>:word128]
	rax = r15
	rsp = rbp + 0x38<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000447AD0_exit
l0000000000447C80:
	call fn0000000000447CD0 (retsize: 8;)
	goto l0000000000447C4B
	// succ:  l0000000000447C4B
l0000000000447C90:
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	rdx = r13
	call fn0000000000449360 (retsize: 8;)
	goto l0000000000447C5D
	// succ:  l0000000000447C5D
fn0000000000447AD0_exit:


// fn0000000000447CD0
// Return size: 8
define fn0000000000447CD0
fn0000000000447CD0_entry:
	rsp = fp
	// succ:  l0000000000447CD0
l0000000000447CD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xD8<64>
	SCZO = cond(rsp)
	rax = Mem0[r8:word64]
	rbp = Mem0[r8 + 8<64>:word64]
	r14 = r9 + 0xD0<64>
	r15 = rcx
	rdi = r9
	Mem0[rsp + 0x30<64>:word64] = rax
	eax = Mem0[rsp + 0x140<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = r14
	Mem0[rsp + 0x61<64>:byte] = bpl
	Mem0[rsp + 0x64<64>:word32] = eax
	Mem0[rsp + 0x62<64>:word16] = ax
	call fn0000000000473020 (retsize: 8;)
	rcx = 0x000000000048B2D0<p64>
	r12 = rax
	call fn000000000042BB80 (retsize: 8;)
	r13 = rax
	rax = Mem0[rdi + 0xD0<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	rsi = rax + r13 * 8<64>
	rbx = Mem0[rsi:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000448300
	// succ:  l0000000000447D46 l0000000000448300
l0000000000447D46:
	rax = Mem0[rsp + 0x148<64>:word64]
	rsi = Mem0[rax:word64]
	eax = CONVERT(Mem0[rbx + 0x64<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[rsi:word16] - ax)
	branch Test(EQ,Z) l0000000000448260
	// succ:  l0000000000447D5E l0000000000448260
l0000000000447D5E:
	eax = Mem0[rbx + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0xA0<64>:word32] = eax
	rax = Mem0[rbx + 0x38<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = rax
	rax = Mem0[rbx + 0x40<64>:word64]
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = Mem0[rsi - 0x18<64>:word64]
	// succ:  l0000000000447D7E
l0000000000447D7E:
	r10 = Mem0[r12:word64]
	rcx = r12
	r9 = rsi + rax * 2<64>
	r8 = rsi
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[r10 + 0x28<64>:word64] (retsize: 8;)
	rax = rax - rsi
	SCZO = cond(rax)
	r14 = rax
	r12 = rax
	r14 = r14 >> 1<64>
	SCZO = cond(r14)
	branch Test(NE,Z) l0000000000447DD3
	// succ:  l0000000000447DA3 l0000000000447DD3
l0000000000447DA3:
	rax = Mem0[rsp + 0x30<64>:word64]
	bpl = Mem0[rsp + 0x61<64>:byte]
	Mem0[rdi + 0x10<64>:word64] = 0<64>
	Mem0[r15:word64] = rax
	rax = r15
	Mem0[r15 + 8<64>:word64] = rbp
	rsp = rsp + 0xD8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000447CD0_exit
l0000000000447DD3:
	rax = rsp + 0xC0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x40<64>:word64] = rax
	call fn0000000000448EB0 (retsize: 8;)
	Mem0[rsp + 0xB0<64>:word64] = rax
	rax = rsp + 0xB0<64>
	rdx = r12
	rcx = rax
	Mem0[rsp + 0x48<64>:word64] = rax
	call fn000000000044A5D0 (retsize: 8;)
	eax = Mem0[rbx + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r12d = r14d
	r12 = CONVERT(r12d, word32, uint64)
	r12d = r12d - eax
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	SZO = cond(r12d & r12d)
	C = false
	branch Test(LE,SZO) l0000000000447F0D
	// succ:  l0000000000447E1E l0000000000447F0D
l0000000000447E1E:
	SZO = cond(eax & eax)
	C = false
	branch Test(NS,S) l0000000000447E24
	// succ:  l0000000000447E20_1 l0000000000447E24
l0000000000447E20_1:
	r12d = r14d
	// succ:  l0000000000447E24
l0000000000447E24:
	SCZO = cond(Mem0[rbx + 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l00000000004482A0
	// succ:  l0000000000447E2F l00000000004482A0
l0000000000447E2F:
	rax = Mem0[rsp + 0xB0<64>:word64]
	r13d = SLICE(r12, word32, 0)
	r13 = CONVERT(r13d, word32, uint64)
	rcx = Mem0[rsp + 0x48<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r13 = CONVERT(r13d, word32, int64)
	r8 = Mem0[rax - 0x18<64>:word64]
	r9 = r13
	Mem0[rsp + 0x20<64>:word32] = 0<32>
	call fn00000000004491E0 (retsize: 8;)
	rax = rsi + r13
	rcx = Mem0[rsp + 0xB0<64>:word64]
	r13d = CONVERT(Mem0[rbx + 0x24<64>:word16], word16, word32)
	r13 = CONVERT(r13d, word32, uint64)
	Mem0[rsp + 0x50<64>:word64] = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	r8d = Mem0[rcx - 8<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x68<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	SZO = cond(r8d & r8d)
	C = false
	Mem0[rsp + 0x70<64>:word64] = rax
	branch Test(SG,S) l0000000000447E9C
	// succ:  l0000000000447E8A l0000000000447E9C
l0000000000447E8A:
	rcx = Mem0[rsp + 0x48<64>:word64]
	call fn0000000000448E80 (retsize: 8;)
	rcx = Mem0[rsp + 0xB0<64>:word64]
	// succ:  l0000000000447E9C
l0000000000447E9C:
	rax = Mem0[rsp + 0x50<64>:word64]
	r9 = Mem0[rsp + 0x68<64>:word64]
	edx = r13d
	rdx = CONVERT(edx, word32, uint64)
	r8 = Mem0[rsp + 0x70<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rsi
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn000000000046F950 (retsize: 8;)
	r13 = rax
	rax = Mem0[rsp + 0xB0<64>:word64]
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l0000000000447EE1
	// succ:  l0000000000447ECF l0000000000447EE1
l0000000000447ECF:
	rcx = Mem0[rsp + 0x48<64>:word64]
	call fn0000000000448E80 (retsize: 8;)
	rax = Mem0[rsp + 0xB0<64>:word64]
	// succ:  l0000000000447EE1
l0000000000447EE1:
	r9 = Mem0[rax - 0x18<64>:word64]
	rdx = r13
	rdx = rdx - rax
	SCZO = cond(rdx)
	rdx = rdx >> 1<64>
	SCZO = cond(rdx)
	r8 = r9
	r8 = r8 - rdx
	SCZO = cond(r8)
	SCZO = cond(rdx - r9)
	branch Test(UGT,CZ) l000000000044842C
	// succ:  l0000000000447EFD l000000000044842C
l0000000000447EFD:
	rcx = Mem0[rsp + 0x48<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn000000000044A6C0 (retsize: 8;)
	eax = Mem0[rbx + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000447F0D
l0000000000447F0D:
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000447F87
	// succ:  l0000000000447F11 l0000000000447F87
l0000000000447F11:
	eax = CONVERT(Mem0[rbx + 0x22<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x50<64>:word16] = ax
	rax = Mem0[rsp + 0xB0<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	r13 = rdx + 1<64>
	SCZO = cond(r13 - Mem0[rax - 0x10<64>:word64])
	branch Test(ULE,CZ) l00000000004482C0
	// succ:  l0000000000447F34 l00000000004482C0
l0000000000447F34:
	rcx = Mem0[rsp + 0x48<64>:word64]
	rdx = r13
	call fn000000000044A5D0 (retsize: 8;)
	rax = Mem0[rsp + 0xB0<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	// succ:  l0000000000447F4D
l0000000000447F4D:
	ecx = CONVERT(Mem0[rsp + 0x50<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	SZO = cond(r12d & r12d)
	C = false
	Mem0[rax + rdx * 2<64>:word16] = cx
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = r13
	Mem0[rax + r13 * 2<64>:word16] = r10w
	branch Test(SG,S) l00000000004483E0
	// succ:  l0000000000447F72 l00000000004483E0
l0000000000447F72:
	r8 = CONVERT(Mem0[rbx + 0x58<64>:word32], word32, int64)
	r12 = CONVERT(r12d, word32, int64)
	rcx = Mem0[rsp + 0x48<64>:word64]
	rdx = rsi
	call fn0000000000449740 (retsize: 8;)
	// succ:  l0000000000447F87
l0000000000447F87:
	eax = Mem0[rdi + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = Mem0[rsp + 0xB0<64>:word64]
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx & 0xB0<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	Mem0[rsp + 0x68<64>:word32] = ecx
	rcx = Mem0[rsp + 0x38<64>:word64]
	rcx = rcx + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rcx)
	SZO = cond(ah & 2<8>)
	C = false
	rdx = rcx
	branch Test(NE,Z) l0000000000448290
	// succ:  l0000000000447FB6 l0000000000448290
l0000000000447FB6:
	rax = rsp + 0x9F<64>
	r14 = r14 + rdx
	SCZO = cond(r14)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = rax
	Mem0[rsp + 0x80<64>:word64] = rax
	call fn0000000000448EB0 (retsize: 8;)
	rcx = Mem0[rsp + 0x40<64>:word64]
	rdx = r14 + r14
	Mem0[rsp + 0xC0<64>:word64] = rax
	call fn000000000044A5D0 (retsize: 8;)
	rax = Mem0[rdi + 0x10<64>:word64]
	r12 = rsp + 0xA0<64>
	r13 = 0x000000000048DBC4<p64>
	SCZO = cond(r14 - rax)
	rcx = rax
	Mem0[rsp + 0x50<64>:word64] = rax
	dl = CONVERT(Test(ULT,C), bool, int8)
	SCZO = cond(Mem0[rsp + 0x68<64>:word32] - 0x10<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edx = edx & eax
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = CONVERT(Mem0[rsp + 0x62<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x70<64>:byte] = dl
	Mem0[rsp + 0x88<64>:word32] = eax
	rax = rcx
	rax = rax - r14
	SCZO = cond(rax)
	Mem0[rsp + 0x78<64>:word64] = rax
	// succ:  l0000000000448033
l0000000000448033:
	SCZO = cond(Mem0[r12 + rsi:byte] - 4<8>)
	branch Test(UGT,CZ) l0000000000448170
	// succ:  l000000000044803E l0000000000448170
l000000000044803E:
	eax = CONVERT(Mem0[r12 + rsi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(Mem0[r13 + 0<64> + rax * 4<64>:word32], word32, int64)
	rax = rax + r13
	SCZO = cond(rax)
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000447CD0_exit
l0000000000448170:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	SCZO = cond(rsi - 4<64>)
	branch Test(NE,Z) l0000000000448033
	// succ:  l000000000044817E l0000000000448033
l000000000044817E:
	SCZO = cond(Mem0[rsp + 0x38<64>:word64] - 1<64>)
	branch Test(ULE,CZ) l00000000004481A2
	// succ:  l0000000000448186 l00000000004481A2
l0000000000448186:
	rax = Mem0[rsp + 0x38<64>:word64]
	rdx = Mem0[rsp + 0x58<64>:word64]
	rcx = Mem0[rsp + 0x40<64>:word64]
	r8 = rax - 1<64>
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	call fn0000000000449740 (retsize: 8;)
	// succ:  l00000000004481A2
l00000000004481A2:
	rdx = Mem0[rsp + 0xC0<64>:word64]
	rax = Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(Mem0[rsp + 0x50<64>:word64] - rax)
	branch Test(ULE,CZ) l00000000004482F0
	// succ:  l00000000004481B9 l00000000004482F0
l00000000004481B9:
	SCZO = cond(Mem0[rsp + 0x68<64>:word32] - 0x20<32>)
	branch Test(EQ,Z) l00000000004482D2
	// succ:  l00000000004481C4 l00000000004482D2
l00000000004481C4:
	edx = CONVERT(Mem0[rsp + 0x64<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r9 = Mem0[rsp + 0x50<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = Mem0[rsp + 0x40<64>:word64]
	r9 = r9 - rax
	SCZO = cond(r9)
	Mem0[rsp + 0x20<64>:word32] = edx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn00000000004491E0 (retsize: 8;)
	// succ:  l00000000004481E4
l00000000004481E4:
	rdx = Mem0[rsp + 0xC0<64>:word64]
	// succ:  l00000000004481EC
l00000000004481EC:
	SCZO = cond(Mem0[rsp + 0x61<64>:byte] - 0<8>)
	rbx = CONVERT(Mem0[rsp + 0x50<64>:word32], word32, int64)
	branch Test(NE,Z) l0000000000448217
	// succ:  l00000000004481F8 l0000000000448217
l00000000004481F8:
	rcx = Mem0[rsp + 0x30<64>:word64]
	r8 = rbx
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rbx - rax)
	rdx = Mem0[rsp + 0xC0<64>:word64]
	branch Test(NE,Z) l0000000000448422
	// succ:  l0000000000448217 l0000000000448422
l0000000000448217:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rdx - 8<64>:word32] = __xadd(Mem0[rdx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rdx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004483C2
	// succ:  l0000000000448229 l00000000004483C2
l0000000000448229:
	rcx = Mem0[rsp + 0xB0<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l0000000000447DA3
	// succ:  l0000000000448243 l0000000000447DA3
l0000000000448243:
	rdx = Mem0[rsp + 0x40<64>:word64]
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000449360 (retsize: 8;)
	goto l0000000000447DA3
	// succ:  l0000000000447DA3
l0000000000448260:
	eax = Mem0[rbx + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = rsi + 2<64>
	Mem0[rsp + 0xA0<64>:word32] = eax
	rax = Mem0[rbx + 0x48<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = rax
	rax = Mem0[rbx + 0x50<64>:word64]
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = Mem0[rsi - 0x18<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044828B
	// succ:  l0000000000448287_1 l000000000044828B
l0000000000448287_1:
	rsi = rdx
	// succ:  l000000000044828B
l000000000044828B:
	goto l0000000000447D7E
	// succ:  l0000000000447D7E
l0000000000448290:
	r14 = Mem0[rbx + 0x30<64>:word64]
	goto l0000000000447FB6
	// succ:  l0000000000447FB6
l00000000004482A0:
	rcx = Mem0[rsp + 0x48<64>:word64]
	r8 = CONVERT(r12d, word32, int64)
	rdx = rsi
	call fn0000000000449B10 (retsize: 8;)
	eax = Mem0[rbx + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000447F0D
	// succ:  l0000000000447F0D
l00000000004482C0:
	r11d = Mem0[rax - 8<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d & r11d)
	C = false
	branch Test(GT,SZO) l0000000000447F34
	// succ:  l00000000004482CD l0000000000447F34
l00000000004482CD:
	goto l0000000000447F4D
	// succ:  l0000000000447F4D
l00000000004482D2:
	rdx = Mem0[rsp + 0x50<64>:word64]
	r8d = CONVERT(Mem0[rsp + 0x64<64>:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	rcx = Mem0[rsp + 0x40<64>:word64]
	rdx = rdx - rax
	SCZO = cond(rdx)
	call fn00000000004499D0 (retsize: 8;)
	goto l00000000004481E4
	// succ:  l00000000004481E4
l00000000004482F0:
	Mem0[rsp + 0x50<64>:word64] = rax
	goto l00000000004481EC
	// succ:  l00000000004481EC
l0000000000448300:
	ecx = 0x80<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rbx = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = 0x00000000004976D0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	Mem0[rbx:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = 0<64>
	rdx = r14
	Mem0[rbx + 0x20<64>:byte] = 0<8>
	Mem0[rbx + 0x22<64>:word16] = r9w
	rcx = rbx
	Mem0[rbx + 0x24<64>:word16] = r10w
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0x38<64>:word64] = 0<64>
	Mem0[rbx + 0x40<64>:word64] = 0<64>
	Mem0[rbx + 0x48<64>:word64] = 0<64>
	Mem0[rbx + 0x50<64>:word64] = 0<64>
	Mem0[rbx + 0x58<64>:word32] = 0<32>
	Mem0[rbx + 0x5C<64>:byte] = 0<8>
	Mem0[rbx + 0x5D<64>:byte] = 0<8>
	Mem0[rbx + 0x5E<64>:byte] = 0<8>
	Mem0[rbx + 0x5F<64>:byte] = 0<8>
	Mem0[rbx + 0x60<64>:byte] = 0<8>
	Mem0[rbx + 0x61<64>:byte] = 0<8>
	Mem0[rbx + 0x62<64>:byte] = 0<8>
	Mem0[rbx + 0x63<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	call fn0000000000467480 (retsize: 8;)
	rcx = Mem0[rdi + 0xD0<64>:word64]
	rdx = rbx
	r8 = r13
	call fn0000000000469430 (retsize: 8;)
	rbx = Mem0[rsi:word64]
	goto l0000000000447D46
	// succ:  l0000000000447D46
l00000000004483C2:
	rcx = rdx - 0x18<64>
	rdx = Mem0[rsp + 0x80<64>:word64]
	call fn0000000000449360 (retsize: 8;)
	goto l0000000000448229
	// succ:  l0000000000448229
l00000000004483E0:
	r13 = Mem0[rsp + 0x48<64>:word64]
	r8d = CONVERT(Mem0[rbx + 0x66<64>:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	r12d = -r12d
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	C = r12d == 0<32>
	rdx = CONVERT(r12d, word32, int64)
	rcx = r13
	call fn00000000004499D0 (retsize: 8;)
	r8 = r14
	rdx = rsi
	rcx = r13
	call fn0000000000449740 (retsize: 8;)
	goto l0000000000447F87
	// succ:  l0000000000447F87
l0000000000448422:
	Mem0[rsp + 0x61<64>:byte] = 1<8>
	goto l0000000000448217
	// succ:  l0000000000448217
l000000000044842C:
	r8 = rdx
	rcx = 0x000000000048DB78<p64>
	rdx = 0x000000000048DB62<p64>
	call fn0000000000471560 (retsize: 8;)
	rbx = rax
	// succ:  l0000000000448445
l0000000000448445:
	rax = Mem0[rsp + 0xB0<64>:word64]
	rdx = Mem0[rsp + 0x40<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000449370 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	rbx = rax
	rax = Mem0[rsp + 0xC0<64>:word64]
	rdx = Mem0[rsp + 0x80<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000449370 (retsize: 8;)
	goto l0000000000448445
	// succ:  l0000000000448445
fn0000000000447CD0_exit:


// fn00000000004484C0
// Return size: 8
define fn00000000004484C0
fn00000000004484C0_entry:
	rsp = fp
	// succ:  l00000000004484C0
l00000000004484C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xD8<64>
	SCZO = cond(rsp)
	rax = Mem0[r8:word64]
	rbp = Mem0[r8 + 8<64>:word64]
	r14 = r9 + 0xD0<64>
	r15 = rcx
	rdi = r9
	Mem0[rsp + 0x30<64>:word64] = rax
	eax = Mem0[rsp + 0x140<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = r14
	Mem0[rsp + 0x61<64>:byte] = bpl
	Mem0[rsp + 0x64<64>:word32] = eax
	Mem0[rsp + 0x62<64>:word16] = ax
	call fn0000000000473020 (retsize: 8;)
	rcx = 0x000000000048B2E0<p64>
	r12 = rax
	call fn000000000042BB80 (retsize: 8;)
	r13 = rax
	rax = Mem0[rdi + 0xD0<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	rsi = rax + r13 * 8<64>
	rbx = Mem0[rsi:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000448AF0
	// succ:  l0000000000448536 l0000000000448AF0
l0000000000448536:
	rax = Mem0[rsp + 0x148<64>:word64]
	rsi = Mem0[rax:word64]
	eax = CONVERT(Mem0[rbx + 0x64<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[rsi:word16] - ax)
	branch Test(EQ,Z) l0000000000448A50
	// succ:  l000000000044854E l0000000000448A50
l000000000044854E:
	eax = Mem0[rbx + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0xA0<64>:word32] = eax
	rax = Mem0[rbx + 0x38<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = rax
	rax = Mem0[rbx + 0x40<64>:word64]
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = Mem0[rsi - 0x18<64>:word64]
	// succ:  l000000000044856E
l000000000044856E:
	r10 = Mem0[r12:word64]
	rcx = r12
	r9 = rsi + rax * 2<64>
	r8 = rsi
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[r10 + 0x28<64>:word64] (retsize: 8;)
	rax = rax - rsi
	SCZO = cond(rax)
	r14 = rax
	r12 = rax
	r14 = r14 >> 1<64>
	SCZO = cond(r14)
	branch Test(NE,Z) l00000000004485C3
	// succ:  l0000000000448593 l00000000004485C3
l0000000000448593:
	rax = Mem0[rsp + 0x30<64>:word64]
	bpl = Mem0[rsp + 0x61<64>:byte]
	Mem0[rdi + 0x10<64>:word64] = 0<64>
	Mem0[r15:word64] = rax
	rax = r15
	Mem0[r15 + 8<64>:word64] = rbp
	rsp = rsp + 0xD8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004484C0_exit
l00000000004485C3:
	rax = rsp + 0xC0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x40<64>:word64] = rax
	call fn0000000000448EB0 (retsize: 8;)
	Mem0[rsp + 0xB0<64>:word64] = rax
	rax = rsp + 0xB0<64>
	rdx = r12
	rcx = rax
	Mem0[rsp + 0x48<64>:word64] = rax
	call fn000000000044A5D0 (retsize: 8;)
	eax = Mem0[rbx + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r12d = r14d
	r12 = CONVERT(r12d, word32, uint64)
	r12d = r12d - eax
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	SZO = cond(r12d & r12d)
	C = false
	branch Test(LE,SZO) l00000000004486FD
	// succ:  l000000000044860E l00000000004486FD
l000000000044860E:
	SZO = cond(eax & eax)
	C = false
	branch Test(NS,S) l0000000000448614
	// succ:  l0000000000448610_1 l0000000000448614
l0000000000448610_1:
	r12d = r14d
	// succ:  l0000000000448614
l0000000000448614:
	SCZO = cond(Mem0[rbx + 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000448A90
	// succ:  l000000000044861F l0000000000448A90
l000000000044861F:
	rax = Mem0[rsp + 0xB0<64>:word64]
	r13d = SLICE(r12, word32, 0)
	r13 = CONVERT(r13d, word32, uint64)
	rcx = Mem0[rsp + 0x48<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r13 = CONVERT(r13d, word32, int64)
	r8 = Mem0[rax - 0x18<64>:word64]
	r9 = r13
	Mem0[rsp + 0x20<64>:word32] = 0<32>
	call fn00000000004491E0 (retsize: 8;)
	rax = rsi + r13
	rcx = Mem0[rsp + 0xB0<64>:word64]
	r13d = CONVERT(Mem0[rbx + 0x24<64>:word16], word16, word32)
	r13 = CONVERT(r13d, word32, uint64)
	Mem0[rsp + 0x50<64>:word64] = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	r8d = Mem0[rcx - 8<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x68<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	SZO = cond(r8d & r8d)
	C = false
	Mem0[rsp + 0x70<64>:word64] = rax
	branch Test(SG,S) l000000000044868C
	// succ:  l000000000044867A l000000000044868C
l000000000044867A:
	rcx = Mem0[rsp + 0x48<64>:word64]
	call fn0000000000448E80 (retsize: 8;)
	rcx = Mem0[rsp + 0xB0<64>:word64]
	// succ:  l000000000044868C
l000000000044868C:
	rax = Mem0[rsp + 0x50<64>:word64]
	r9 = Mem0[rsp + 0x68<64>:word64]
	edx = r13d
	rdx = CONVERT(edx, word32, uint64)
	r8 = Mem0[rsp + 0x70<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rsi
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn000000000046F950 (retsize: 8;)
	r13 = rax
	rax = Mem0[rsp + 0xB0<64>:word64]
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l00000000004486D1
	// succ:  l00000000004486BF l00000000004486D1
l00000000004486BF:
	rcx = Mem0[rsp + 0x48<64>:word64]
	call fn0000000000448E80 (retsize: 8;)
	rax = Mem0[rsp + 0xB0<64>:word64]
	// succ:  l00000000004486D1
l00000000004486D1:
	r9 = Mem0[rax - 0x18<64>:word64]
	rdx = r13
	rdx = rdx - rax
	SCZO = cond(rdx)
	rdx = rdx >> 1<64>
	SCZO = cond(rdx)
	r8 = r9
	r8 = r8 - rdx
	SCZO = cond(r8)
	SCZO = cond(rdx - r9)
	branch Test(UGT,CZ) l0000000000448C1C
	// succ:  l00000000004486ED l0000000000448C1C
l00000000004486ED:
	rcx = Mem0[rsp + 0x48<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn000000000044A6C0 (retsize: 8;)
	eax = Mem0[rbx + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004486FD
l00000000004486FD:
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000448777
	// succ:  l0000000000448701 l0000000000448777
l0000000000448701:
	eax = CONVERT(Mem0[rbx + 0x22<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x50<64>:word16] = ax
	rax = Mem0[rsp + 0xB0<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	r13 = rdx + 1<64>
	SCZO = cond(r13 - Mem0[rax - 0x10<64>:word64])
	branch Test(ULE,CZ) l0000000000448AB0
	// succ:  l0000000000448724 l0000000000448AB0
l0000000000448724:
	rcx = Mem0[rsp + 0x48<64>:word64]
	rdx = r13
	call fn000000000044A5D0 (retsize: 8;)
	rax = Mem0[rsp + 0xB0<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	// succ:  l000000000044873D
l000000000044873D:
	ecx = CONVERT(Mem0[rsp + 0x50<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	SZO = cond(r12d & r12d)
	C = false
	Mem0[rax + rdx * 2<64>:word16] = cx
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = r13
	Mem0[rax + r13 * 2<64>:word16] = r10w
	branch Test(SG,S) l0000000000448BD0
	// succ:  l0000000000448762 l0000000000448BD0
l0000000000448762:
	r8 = CONVERT(Mem0[rbx + 0x58<64>:word32], word32, int64)
	r12 = CONVERT(r12d, word32, int64)
	rcx = Mem0[rsp + 0x48<64>:word64]
	rdx = rsi
	call fn0000000000449740 (retsize: 8;)
	// succ:  l0000000000448777
l0000000000448777:
	eax = Mem0[rdi + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = Mem0[rsp + 0xB0<64>:word64]
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx & 0xB0<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	Mem0[rsp + 0x68<64>:word32] = ecx
	rcx = Mem0[rsp + 0x38<64>:word64]
	rcx = rcx + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rcx)
	SZO = cond(ah & 2<8>)
	C = false
	rdx = rcx
	branch Test(NE,Z) l0000000000448A80
	// succ:  l00000000004487A6 l0000000000448A80
l00000000004487A6:
	rax = rsp + 0x9F<64>
	r14 = r14 + rdx
	SCZO = cond(r14)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = rax
	Mem0[rsp + 0x80<64>:word64] = rax
	call fn0000000000448EB0 (retsize: 8;)
	rcx = Mem0[rsp + 0x40<64>:word64]
	rdx = r14 + r14
	Mem0[rsp + 0xC0<64>:word64] = rax
	call fn000000000044A5D0 (retsize: 8;)
	rax = Mem0[rdi + 0x10<64>:word64]
	r12 = rsp + 0xA0<64>
	r13 = 0x000000000048DBB0<p64>
	SCZO = cond(r14 - rax)
	rcx = rax
	Mem0[rsp + 0x50<64>:word64] = rax
	dl = CONVERT(Test(ULT,C), bool, int8)
	SCZO = cond(Mem0[rsp + 0x68<64>:word32] - 0x10<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edx = edx & eax
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = CONVERT(Mem0[rsp + 0x62<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x70<64>:byte] = dl
	Mem0[rsp + 0x88<64>:word32] = eax
	rax = rcx
	rax = rax - r14
	SCZO = cond(rax)
	Mem0[rsp + 0x78<64>:word64] = rax
	// succ:  l0000000000448823
l0000000000448823:
	SCZO = cond(Mem0[r12 + rsi:byte] - 4<8>)
	branch Test(UGT,CZ) l0000000000448960
	// succ:  l000000000044882E l0000000000448960
l000000000044882E:
	eax = CONVERT(Mem0[r12 + rsi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(Mem0[r13 + 0<64> + rax * 4<64>:word32], word32, int64)
	rax = rax + r13
	SCZO = cond(rax)
	call rax (retsize: 0;)
	return
	// succ:  fn00000000004484C0_exit
l0000000000448960:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	SCZO = cond(rsi - 4<64>)
	branch Test(NE,Z) l0000000000448823
	// succ:  l000000000044896E l0000000000448823
l000000000044896E:
	SCZO = cond(Mem0[rsp + 0x38<64>:word64] - 1<64>)
	branch Test(ULE,CZ) l0000000000448992
	// succ:  l0000000000448976 l0000000000448992
l0000000000448976:
	rax = Mem0[rsp + 0x38<64>:word64]
	rdx = Mem0[rsp + 0x58<64>:word64]
	rcx = Mem0[rsp + 0x40<64>:word64]
	r8 = rax - 1<64>
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	call fn0000000000449740 (retsize: 8;)
	// succ:  l0000000000448992
l0000000000448992:
	rdx = Mem0[rsp + 0xC0<64>:word64]
	rax = Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(Mem0[rsp + 0x50<64>:word64] - rax)
	branch Test(ULE,CZ) l0000000000448AE0
	// succ:  l00000000004489A9 l0000000000448AE0
l00000000004489A9:
	SCZO = cond(Mem0[rsp + 0x68<64>:word32] - 0x20<32>)
	branch Test(EQ,Z) l0000000000448AC2
	// succ:  l00000000004489B4 l0000000000448AC2
l00000000004489B4:
	edx = CONVERT(Mem0[rsp + 0x64<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r9 = Mem0[rsp + 0x50<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = Mem0[rsp + 0x40<64>:word64]
	r9 = r9 - rax
	SCZO = cond(r9)
	Mem0[rsp + 0x20<64>:word32] = edx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn00000000004491E0 (retsize: 8;)
	// succ:  l00000000004489D4
l00000000004489D4:
	rdx = Mem0[rsp + 0xC0<64>:word64]
	// succ:  l00000000004489DC
l00000000004489DC:
	SCZO = cond(Mem0[rsp + 0x61<64>:byte] - 0<8>)
	rbx = CONVERT(Mem0[rsp + 0x50<64>:word32], word32, int64)
	branch Test(NE,Z) l0000000000448A07
	// succ:  l00000000004489E8 l0000000000448A07
l00000000004489E8:
	rcx = Mem0[rsp + 0x30<64>:word64]
	r8 = rbx
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rbx - rax)
	rdx = Mem0[rsp + 0xC0<64>:word64]
	branch Test(NE,Z) l0000000000448C12
	// succ:  l0000000000448A07 l0000000000448C12
l0000000000448A07:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rdx - 8<64>:word32] = __xadd(Mem0[rdx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rdx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000448BB2
	// succ:  l0000000000448A19 l0000000000448BB2
l0000000000448A19:
	rcx = Mem0[rsp + 0xB0<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l0000000000448593
	// succ:  l0000000000448A33 l0000000000448593
l0000000000448A33:
	rdx = Mem0[rsp + 0x40<64>:word64]
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000449360 (retsize: 8;)
	goto l0000000000448593
	// succ:  l0000000000448593
l0000000000448A50:
	eax = Mem0[rbx + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = rsi + 2<64>
	Mem0[rsp + 0xA0<64>:word32] = eax
	rax = Mem0[rbx + 0x48<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = rax
	rax = Mem0[rbx + 0x50<64>:word64]
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = Mem0[rsi - 0x18<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000448A7B
	// succ:  l0000000000448A77_1 l0000000000448A7B
l0000000000448A77_1:
	rsi = rdx
	// succ:  l0000000000448A7B
l0000000000448A7B:
	goto l000000000044856E
	// succ:  l000000000044856E
l0000000000448A80:
	r14 = Mem0[rbx + 0x30<64>:word64]
	goto l00000000004487A6
	// succ:  l00000000004487A6
l0000000000448A90:
	rcx = Mem0[rsp + 0x48<64>:word64]
	r8 = CONVERT(r12d, word32, int64)
	rdx = rsi
	call fn0000000000449B10 (retsize: 8;)
	eax = Mem0[rbx + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l00000000004486FD
	// succ:  l00000000004486FD
l0000000000448AB0:
	r11d = Mem0[rax - 8<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d & r11d)
	C = false
	branch Test(GT,SZO) l0000000000448724
	// succ:  l0000000000448ABD l0000000000448724
l0000000000448ABD:
	goto l000000000044873D
	// succ:  l000000000044873D
l0000000000448AC2:
	rdx = Mem0[rsp + 0x50<64>:word64]
	r8d = CONVERT(Mem0[rsp + 0x64<64>:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	rcx = Mem0[rsp + 0x40<64>:word64]
	rdx = rdx - rax
	SCZO = cond(rdx)
	call fn00000000004499D0 (retsize: 8;)
	goto l00000000004489D4
	// succ:  l00000000004489D4
l0000000000448AE0:
	Mem0[rsp + 0x50<64>:word64] = rax
	goto l00000000004489DC
	// succ:  l00000000004489DC
l0000000000448AF0:
	ecx = 0x80<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rbx = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = 0x00000000004976F0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	Mem0[rbx:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = 0<64>
	rdx = r14
	Mem0[rbx + 0x20<64>:byte] = 0<8>
	Mem0[rbx + 0x22<64>:word16] = r9w
	rcx = rbx
	Mem0[rbx + 0x24<64>:word16] = r10w
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0x38<64>:word64] = 0<64>
	Mem0[rbx + 0x40<64>:word64] = 0<64>
	Mem0[rbx + 0x48<64>:word64] = 0<64>
	Mem0[rbx + 0x50<64>:word64] = 0<64>
	Mem0[rbx + 0x58<64>:word32] = 0<32>
	Mem0[rbx + 0x5C<64>:byte] = 0<8>
	Mem0[rbx + 0x5D<64>:byte] = 0<8>
	Mem0[rbx + 0x5E<64>:byte] = 0<8>
	Mem0[rbx + 0x5F<64>:byte] = 0<8>
	Mem0[rbx + 0x60<64>:byte] = 0<8>
	Mem0[rbx + 0x61<64>:byte] = 0<8>
	Mem0[rbx + 0x62<64>:byte] = 0<8>
	Mem0[rbx + 0x63<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	call fn0000000000467E10 (retsize: 8;)
	rcx = Mem0[rdi + 0xD0<64>:word64]
	rdx = rbx
	r8 = r13
	call fn0000000000469430 (retsize: 8;)
	rbx = Mem0[rsi:word64]
	goto l0000000000448536
	// succ:  l0000000000448536
l0000000000448BB2:
	rcx = rdx - 0x18<64>
	rdx = Mem0[rsp + 0x80<64>:word64]
	call fn0000000000449360 (retsize: 8;)
	goto l0000000000448A19
	// succ:  l0000000000448A19
l0000000000448BD0:
	r13 = Mem0[rsp + 0x48<64>:word64]
	r8d = CONVERT(Mem0[rbx + 0x66<64>:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	r12d = -r12d
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	C = r12d == 0<32>
	rdx = CONVERT(r12d, word32, int64)
	rcx = r13
	call fn00000000004499D0 (retsize: 8;)
	r8 = r14
	rdx = rsi
	rcx = r13
	call fn0000000000449740 (retsize: 8;)
	goto l0000000000448777
	// succ:  l0000000000448777
l0000000000448C12:
	Mem0[rsp + 0x61<64>:byte] = 1<8>
	goto l0000000000448A07
	// succ:  l0000000000448A07
l0000000000448C1C:
	r8 = rdx
	rcx = 0x000000000048DB78<p64>
	rdx = 0x000000000048DB62<p64>
	call fn0000000000471560 (retsize: 8;)
	rbx = rax
	// succ:  l0000000000448C35
l0000000000448C35:
	rax = Mem0[rsp + 0xB0<64>:word64]
	rdx = Mem0[rsp + 0x40<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000449370 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	rbx = rax
	rax = Mem0[rsp + 0xC0<64>:word64]
	rdx = Mem0[rsp + 0x80<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000449370 (retsize: 8;)
	goto l0000000000448C35
	// succ:  l0000000000448C35
fn00000000004484C0_exit:


// fn0000000000448CB0
// Return size: 8
define fn0000000000448CB0
fn0000000000448CB0_entry:
	rsp = fp
	// succ:  l0000000000448CB0
l0000000000448CB0:
	// succ:  l0000000000448CB0_thunk_fn0000000000448CF0
l0000000000448CB0_thunk_fn0000000000448CF0:
	call fn0000000000448CF0 (retsize: 0;)
	return
	// succ:  fn0000000000448CB0_exit
fn0000000000448CB0_exit:


// fn0000000000448CC0
// Return size: 8
define fn0000000000448CC0
fn0000000000448CC0_entry:
	rsp = fp
	// succ:  l0000000000448CC0
l0000000000448CC0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000448CC0_exit
fn0000000000448CC0_exit:


// fn0000000000448CD0
// Return size: 8
define fn0000000000448CD0
fn0000000000448CD0_entry:
	rsp = fp
	// succ:  l0000000000448CD0
l0000000000448CD0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000448CD0_exit
fn0000000000448CD0_exit:


// fn0000000000448CE0
// Return size: 8
define fn0000000000448CE0
fn0000000000448CE0_entry:
	rsp = fp
	// succ:  l0000000000448CE0
l0000000000448CE0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000448CE0_exit
fn0000000000448CE0_exit:


// fn0000000000448CF0
// Return size: 8
define fn0000000000448CF0
fn0000000000448CF0_entry:
	rsp = fp
	// succ:  l0000000000448CF0
l0000000000448CF0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(rdx - rcx)
	branch Test(EQ,Z) l0000000000448D22
	// succ:  l0000000000448CF9 l0000000000448D22
l0000000000448CF9:
	rcx = Mem0[rcx + 8<64>:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rcx:byte] - 0x2A<8>)
	branch Test(EQ,Z) l0000000000448D1D
	// succ:  l0000000000448D04 l0000000000448D1D
l0000000000448D04:
	rdx = Mem0[rdx + 8<64>:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rdx:byte] - 0x2A<8>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	rdx = rdx + rax
	SCZO = cond(rdx)
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	// succ:  l0000000000448D1D
l0000000000448D1D:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000448CF0_exit
l0000000000448D22:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000448CF0_exit
fn0000000000448CF0_exit:


// fn0000000000448D30
// Return size: 8
define fn0000000000448D30
fn0000000000448D30_entry:
	rsp = fp
	// succ:  l0000000000448D30
l0000000000448D30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000424AF0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000448D30_exit
fn0000000000448D30_exit:


// fn0000000000448D50
// Return size: 8
define fn0000000000448D50
fn0000000000448D50_entry:
	rsp = fp
	// succ:  l0000000000448D50
l0000000000448D50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000424B00 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000448D50_exit
fn0000000000448D50_exit:


// fn0000000000448D70
// Return size: 8
define fn0000000000448D70
fn0000000000448D70_entry:
	rsp = fp
	// succ:  l0000000000448D70
l0000000000448D70:
	return
	// succ:  fn0000000000448D70_exit
fn0000000000448D70_exit:


// fn0000000000448D80
// Return size: 8
define fn0000000000448D80
fn0000000000448D80_entry:
	rsp = fp
	// succ:  l0000000000448D80
l0000000000448D80:
	return
	// succ:  fn0000000000448D80_exit
fn0000000000448D80_exit:


// fn0000000000448D90
// Return size: 8
define fn0000000000448D90
fn0000000000448D90_entry:
	rsp = fp
	// succ:  l0000000000448D90
l0000000000448D90:
	return
	// succ:  fn0000000000448D90_exit
fn0000000000448D90_exit:


// fn0000000000448DA0
// Return size: 8
define fn0000000000448DA0
fn0000000000448DA0_entry:
	rsp = fp
	// succ:  l0000000000448DA0
l0000000000448DA0:
	return
	// succ:  fn0000000000448DA0_exit
fn0000000000448DA0_exit:


// fn0000000000448DB0
// Return size: 8
define fn0000000000448DB0
fn0000000000448DB0_entry:
	rsp = fp
	// succ:  l0000000000448DB0
l0000000000448DB0:
	return
	// succ:  fn0000000000448DB0_exit
fn0000000000448DB0_exit:


// fn0000000000448DC0
// Return size: 8
define fn0000000000448DC0
fn0000000000448DC0_entry:
	rsp = fp
	// succ:  l0000000000448DC0
l0000000000448DC0:
	return
	// succ:  fn0000000000448DC0_exit
fn0000000000448DC0_exit:


// fn0000000000448DD0
// Return size: 8
define fn0000000000448DD0
fn0000000000448DD0_entry:
	rsp = fp
	// succ:  l0000000000448DD0
l0000000000448DD0:
	return
	// succ:  fn0000000000448DD0_exit
fn0000000000448DD0_exit:


// fn0000000000448DE0
// Return size: 8
define fn0000000000448DE0
fn0000000000448DE0_entry:
	rsp = fp
	// succ:  l0000000000448DE0
l0000000000448DE0:
	return
	// succ:  fn0000000000448DE0_exit
fn0000000000448DE0_exit:


// fn0000000000448DF0
// Return size: 8
define fn0000000000448DF0
fn0000000000448DF0_entry:
	rsp = fp
	// succ:  l0000000000448DF0
l0000000000448DF0:
	return
	// succ:  fn0000000000448DF0_exit
fn0000000000448DF0_exit:


// fn0000000000448E00
// Return size: 8
define fn0000000000448E00
fn0000000000448E00_entry:
	rsp = fp
	// succ:  l0000000000448E00
l0000000000448E00:
	return
	// succ:  fn0000000000448E00_exit
fn0000000000448E00_exit:


// fn0000000000448E10
// Return size: 8
define fn0000000000448E10
fn0000000000448E10_entry:
	rsp = fp
	// succ:  l0000000000448E10
l0000000000448E10:
	return
	// succ:  fn0000000000448E10_exit
fn0000000000448E10_exit:


// fn0000000000448E20
// Return size: 8
define fn0000000000448E20
fn0000000000448E20_entry:
	rsp = fp
	// succ:  l0000000000448E20
l0000000000448E20:
	return
	// succ:  fn0000000000448E20_exit
fn0000000000448E20_exit:


// fn0000000000448E30
// Return size: 8
define fn0000000000448E30
fn0000000000448E30_entry:
	rsp = fp
	// succ:  l0000000000448E30
l0000000000448E30:
	eax = 0x7FFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	rcx = rcx - rdx
	SCZO = cond(rcx)
	SCZO = cond(rcx - 0x7FFFFFFF<64>)
	branch Test(LE,SZO) l0000000000448E43
	// succ:  l0000000000448E41 l0000000000448E43
l0000000000448E41:
	return
	// succ:  fn0000000000448E30_exit
l0000000000448E43:
	SCZO = cond(rcx - 0xFFFFFFFF80000000<64>)
	eax = 0x80000000<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(LT,SO) l0000000000448E52
	// succ:  l0000000000448E4F_1 l0000000000448E52
l0000000000448E4F_1:
	eax = ecx
	// succ:  l0000000000448E52
l0000000000448E52:
	return
	// succ:  fn0000000000448E30_exit
fn0000000000448E30_exit:


// fn0000000000448E60
// Return size: 8
define fn0000000000448E60
fn0000000000448E60_entry:
	rsp = fp
	// succ:  l0000000000448E60
l0000000000448E60:
	Mem0[rcx:word64] = rdx
	return
	// succ:  fn0000000000448E60_exit
fn0000000000448E60_exit:


// fn0000000000448E70
// Return size: 8
define fn0000000000448E70
fn0000000000448E70_entry:
	rsp = fp
	// succ:  l0000000000448E70
l0000000000448E70:
	Mem0[rcx:word64] = rdx
	return
	// succ:  fn0000000000448E70_exit
fn0000000000448E70_exit:


// fn0000000000448E80
// Return size: 8
define fn0000000000448E80
fn0000000000448E80_entry:
	rsp = fp
	// succ:  l0000000000448E80
l0000000000448E80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l0000000000448EA2
	// succ:  l0000000000448E8F l0000000000448EA2
l0000000000448E8F:
	rbx = rcx
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000044A6C0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	// succ:  l0000000000448EA2
l0000000000448EA2:
	Mem0[rax - 8<64>:word32] = 0xFFFFFFFF<32>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000448E80_exit
fn0000000000448E80_exit:


// fn0000000000448EB0
// Return size: 8
define fn0000000000448EB0
fn0000000000448EB0_entry:
	rsp = fp
	// succ:  l0000000000448EB0
l0000000000448EB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn0000000000449490 (retsize: 8;)
	SZO = cond(rbx & rbx)
	C = false
	rcx = rax
	rax = rax + 0x18<64>
	branch Test(EQ,Z) l0000000000448EEF
	// succ:  l0000000000448ED1 l0000000000448EEF
l0000000000448ED1:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(rbx - 1<64>)
	branch Test(EQ,Z) l0000000000448F10
	// succ:  l0000000000448EDA l0000000000448F10
l0000000000448EDA:
	// succ:  l0000000000448EE0
l0000000000448EE0:
	Mem0[rcx + 0x18<64> + r8 * 2<64>:word16] = si
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	SCZO = cond(r8 - rbx)
	branch Test(NE,Z) l0000000000448EE0
	// succ:  l0000000000448EEF l0000000000448EE0
l0000000000448EEF:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 0x10<64>:word32] = 0<32>
	Mem0[rcx:word64] = rbx
	Mem0[rcx + 0x18<64> + rbx * 2<64>:word16] = dx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000448EB0_exit
l0000000000448F10:
	Mem0[rcx + 0x18<64>:word16] = di
	goto l0000000000448EEF
	// succ:  l0000000000448EEF
fn0000000000448EB0_exit:


// fn0000000000448F20
// Return size: 8
define fn0000000000448F20
fn0000000000448F20_entry:
	rsp = fp
	// succ:  l0000000000448F20
l0000000000448F20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rdx
	rbp = rcx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rbx = rbx - rcx
	SCZO = cond(rbx)
	rdi = rbx
	rdi = rdi >> 1<64>
	SCZO = cond(rdi)
	rcx = rdi
	call fn0000000000449490 (retsize: 8;)
	SCZO = cond(rdi - 1<64>)
	rsi = rax
	r9 = rax + 0x18<64>
	branch Test(EQ,Z) l0000000000448F80
	// succ:  l0000000000448F4E l0000000000448F80
l0000000000448F4E:
	rcx = r9
	r8 = rbx
	rdx = rbp
	rax = memcpy(rcx, rdx, r8)
	r9 = rax
	// succ:  l0000000000448F5F
l0000000000448F5F:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsi + 0x10<64>:word32] = 0<32>
	Mem0[rsi:word64] = rdi
	Mem0[rsi + 0x18<64> + rbx:word16] = ax
	rax = r9
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000448F20_exit
l0000000000448F80:
	eax = CONVERT(Mem0[rbp + 0<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi + 0x18<64>:word16] = ax
	goto l0000000000448F5F
	// succ:  l0000000000448F5F
fn0000000000448F20_exit:


// fn0000000000448F90
// Return size: 8
define fn0000000000448F90
fn0000000000448F90_entry:
	rsp = fp
	// succ:  l0000000000448F90
l0000000000448F90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SZO = cond(rcx & rcx)
	C = false
	rdi = rcx
	branch Test(NE,Z) l0000000000448FB1
	// succ:  l0000000000448FA0 l0000000000448FB1
l0000000000448FA0:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l0000000000448FB1
	// succ:  l0000000000448FA5 l0000000000448FB1
l0000000000448FA5:
	rcx = 0x000000000048DAC8<p64>
	call fn0000000000470BA0 (retsize: 8;)
	// succ:  l0000000000448FB1
l0000000000448FB1:
	rbx = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rbx = rbx - rdi
	SCZO = cond(rbx)
	rbp = rbx
	rbp = rbp >> 1<64>
	SCZO = cond(rbp)
	rcx = rbp
	call fn0000000000449490 (retsize: 8;)
	SCZO = cond(rbp - 1<64>)
	rsi = rax
	r9 = rax + 0x18<64>
	branch Test(EQ,Z) l0000000000449002
	// succ:  l0000000000448FD4 l0000000000449002
l0000000000448FD4:
	rcx = r9
	r8 = rbx
	rdx = rdi
	rax = memcpy(rcx, rdx, r8)
	r9 = rax
	// succ:  l0000000000448FE5
l0000000000448FE5:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsi + 0x10<64>:word32] = 0<32>
	Mem0[rsi:word64] = rbp
	Mem0[rsi + 0x18<64> + rbx:word16] = ax
	rax = r9
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000448F90_exit
l0000000000449002:
	eax = CONVERT(Mem0[rdi:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi + 0x18<64>:word16] = ax
	goto l0000000000448FE5
	// succ:  l0000000000448FE5
fn0000000000448F90_exit:


// fn0000000000449010
// Return size: 8
define fn0000000000449010
fn0000000000449010_entry:
	rsp = fp
	// succ:  l0000000000449010
l0000000000449010:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SZO = cond(rcx & rcx)
	C = false
	rdi = rcx
	branch Test(NE,Z) l0000000000449031
	// succ:  l0000000000449020 l0000000000449031
l0000000000449020:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l0000000000449031
	// succ:  l0000000000449025 l0000000000449031
l0000000000449025:
	rcx = 0x000000000048DB30<p64>
	call fn0000000000470BA0 (retsize: 8;)
	// succ:  l0000000000449031
l0000000000449031:
	rbx = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rbx = rbx - rdi
	SCZO = cond(rbx)
	rbp = rbx
	rbp = rbp >> 1<64>
	SCZO = cond(rbp)
	rcx = rbp
	call fn0000000000449490 (retsize: 8;)
	SCZO = cond(rbp - 1<64>)
	rsi = rax
	r9 = rax + 0x18<64>
	branch Test(EQ,Z) l0000000000449082
	// succ:  l0000000000449054 l0000000000449082
l0000000000449054:
	rcx = r9
	r8 = rbx
	rdx = rdi
	rax = memcpy(rcx, rdx, r8)
	r9 = rax
	// succ:  l0000000000449065
l0000000000449065:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsi + 0x10<64>:word32] = 0<32>
	Mem0[rsi:word64] = rbp
	Mem0[rsi + 0x18<64> + rbx:word16] = ax
	rax = r9
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449010_exit
l0000000000449082:
	eax = CONVERT(Mem0[rdi:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi + 0x18<64>:word16] = ax
	goto l0000000000449065
	// succ:  l0000000000449065
fn0000000000449010_exit:


// fn0000000000449090
// Return size: 8
define fn0000000000449090
fn0000000000449090_entry:
	rsp = fp
	// succ:  l0000000000449090
l0000000000449090:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SZO = cond(rcx & rcx)
	C = false
	rdi = rcx
	branch Test(NE,Z) l00000000004490B1
	// succ:  l00000000004490A0 l00000000004490B1
l00000000004490A0:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l00000000004490B1
	// succ:  l00000000004490A5 l00000000004490B1
l00000000004490A5:
	rcx = 0x000000000048DAC8<p64>
	call fn0000000000470BA0 (retsize: 8;)
	// succ:  l00000000004490B1
l00000000004490B1:
	rbx = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rbx = rbx - rdi
	SCZO = cond(rbx)
	rbp = rbx
	rbp = rbp >> 1<64>
	SCZO = cond(rbp)
	rcx = rbp
	call fn0000000000449490 (retsize: 8;)
	SCZO = cond(rbp - 1<64>)
	rsi = rax
	r9 = rax + 0x18<64>
	branch Test(EQ,Z) l0000000000449102
	// succ:  l00000000004490D4 l0000000000449102
l00000000004490D4:
	rcx = r9
	r8 = rbx
	rdx = rdi
	rax = memcpy(rcx, rdx, r8)
	r9 = rax
	// succ:  l00000000004490E5
l00000000004490E5:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsi + 0x10<64>:word32] = 0<32>
	Mem0[rsi:word64] = rbp
	Mem0[rsi + 0x18<64> + rbx:word16] = ax
	rax = r9
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449090_exit
l0000000000449102:
	eax = CONVERT(Mem0[rdi:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi + 0x18<64>:word16] = ax
	goto l00000000004490E5
	// succ:  l00000000004490E5
fn0000000000449090_exit:


// fn0000000000449110
// Return size: 8
define fn0000000000449110
fn0000000000449110_entry:
	rsp = fp
	// succ:  l0000000000449110
l0000000000449110:
	rax = 0x000000000048B240<p64>
	return
	// succ:  fn0000000000449110_exit
fn0000000000449110_exit:


// fn0000000000449120
// Return size: 8
define fn0000000000449120
fn0000000000449120_entry:
	rsp = fp
	// succ:  l0000000000449120
l0000000000449120:
	r8 = r8 - rdx
	SCZO = cond(r8)
	rax = r8
	rax = rax >> 1<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 1<64>)
	branch Test(EQ,Z) l0000000000449134
	// succ:  l000000000044912F l0000000000449134
l000000000044912F:
	rax = memcpy(rcx, rdx, r8)
	return
	// succ:  fn0000000000449120_exit
l0000000000449134:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:word16] = ax
	return
	// succ:  fn0000000000449120_exit
fn0000000000449120_exit:


// fn0000000000449140
// Return size: 8
define fn0000000000449140
fn0000000000449140_entry:
	rsp = fp
	// succ:  l0000000000449140
l0000000000449140:
	r8 = r8 - rdx
	SCZO = cond(r8)
	rax = r8
	rax = rax >> 1<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 1<64>)
	branch Test(EQ,Z) l0000000000449154
	// succ:  l000000000044914F l0000000000449154
l000000000044914F:
	rax = memcpy(rcx, rdx, r8)
	return
	// succ:  fn0000000000449140_exit
l0000000000449154:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:word16] = ax
	return
	// succ:  fn0000000000449140_exit
fn0000000000449140_exit:


// fn0000000000449160
// Return size: 8
define fn0000000000449160
fn0000000000449160_entry:
	rsp = fp
	// succ:  l0000000000449160
l0000000000449160:
	r8 = r8 - rdx
	SCZO = cond(r8)
	rax = r8
	rax = rax >> 1<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 1<64>)
	branch Test(EQ,Z) l0000000000449174
	// succ:  l000000000044916F l0000000000449174
l000000000044916F:
	rax = memcpy(rcx, rdx, r8)
	return
	// succ:  fn0000000000449160_exit
l0000000000449174:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:word16] = ax
	return
	// succ:  fn0000000000449160_exit
fn0000000000449160_exit:


// fn0000000000449180
// Return size: 8
define fn0000000000449180
fn0000000000449180_entry:
	rsp = fp
	// succ:  l0000000000449180
l0000000000449180:
	r8 = r8 - rdx
	SCZO = cond(r8)
	rax = r8
	rax = rax >> 1<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 1<64>)
	branch Test(EQ,Z) l0000000000449194
	// succ:  l000000000044918F l0000000000449194
l000000000044918F:
	rax = memcpy(rcx, rdx, r8)
	return
	// succ:  fn0000000000449180_exit
l0000000000449194:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:word16] = ax
	return
	// succ:  fn0000000000449180_exit
fn0000000000449180_exit:


// fn00000000004491A0
// Return size: 8
define fn00000000004491A0
fn00000000004491A0_entry:
	rsp = fp
	// succ:  l00000000004491A0
l00000000004491A0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	SCZO = cond(Mem0[rax - 0x10<64>:word64] - rdx)
	branch Test(UGT,CZ) l00000000004491C0
	// succ:  l00000000004491B1 l00000000004491C0
l00000000004491B1:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004491A0_exit
l00000000004491C0:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000044A5D0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004491A0_exit
fn00000000004491A0_exit:


// fn00000000004491E0
// Return size: 8
define fn00000000004491E0
fn00000000004491E0_entry:
	rsp = fp
	// succ:  l00000000004491E0
l00000000004491E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	ebp = Mem0[rsp + 0x70<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	rbx = r9
	r9 = 0x1FFFFFFFFFFFFFFC<64>
	rdi = rcx
	r12 = rdx
	r9 = r9 - Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r9)
	esi = ebp
	rsi = CONVERT(esi, word32, uint64)
	r9 = r9 + r8
	SCZO = cond(r9)
	SCZO = cond(rbx - r9)
	branch Test(UGT,CZ) l0000000000449261
	// succ:  l0000000000449212 l0000000000449261
l0000000000449212:
	r9 = rbx
	call fn000000000044A6C0 (retsize: 8;)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000044923D
	// succ:  l000000000044921F l000000000044923D
l000000000044921F:
	rax = Mem0[rdi:word64]
	SCZO = cond(rbx - 1<64>)
	rdx = rax
	branch Test(EQ,Z) l0000000000449250
	// succ:  l000000000044922C l0000000000449250
l000000000044922C:
	// succ:  l0000000000449230
l0000000000449230:
	Mem0[rdx:word16] = si
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rbx = rbx - 1<64>
	SCZO = cond(rbx)
	branch Test(NE,Z) l0000000000449230
	// succ:  l000000000044923D l0000000000449230
l000000000044923D:
	rax = rdi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004491E0_exit
l0000000000449250:
	rax = rdi
	Mem0[rdx:word16] = bp
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004491E0_exit
l0000000000449261:
	rcx = 0x000000000048DA41<p64>
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l000000000044926F_thunk_fn0000000000449270
l000000000044926F_thunk_fn0000000000449270:
	call fn0000000000449270 (retsize: 0;)
	return
	// succ:  fn00000000004491E0_exit
fn00000000004491E0_exit:


// fn0000000000449270
// Return size: 8
define fn0000000000449270
fn0000000000449270_entry:
	rsp = fp
	// succ:  l0000000000449270
l0000000000449270:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp + 0x70<64>:word64]
	rbp = r9
	rsi = rcx
	rdi = rdx
	r9 = rbx
	call fn000000000044A6C0 (retsize: 8;)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l00000000004492AC
	// succ:  l0000000000449293 l00000000004492AC
l0000000000449293:
	rax = Mem0[rsi:word64]
	SCZO = cond(rbx - 1<64>)
	rcx = rax + rdi * 2<64>
	branch Test(EQ,Z) l00000000004492C0
	// succ:  l00000000004492A0 l00000000004492C0
l00000000004492A0:
	r8 = rbx + rbx
	rdx = rbp
	rax = memcpy(rcx, rdx, r8)
	// succ:  l00000000004492AC
l00000000004492AC:
	rax = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449270_exit
l00000000004492C0:
	eax = CONVERT(Mem0[rbp + 0<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:word16] = ax
	rax = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449270_exit
fn0000000000449270_exit:


// fn00000000004492E0
// Return size: 8
define fn00000000004492E0
fn00000000004492E0_entry:
	rsp = fp
	// succ:  l00000000004492E0
l00000000004492E0:
	edx = CONVERT(dx, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l00000000004492E3_thunk_fn0000000000448EB0
l00000000004492E3_thunk_fn0000000000448EB0:
	call fn0000000000448EB0 (retsize: 0;)
	return
	// succ:  fn00000000004492E0_exit
fn00000000004492E0_exit:


// fn00000000004492F0
// Return size: 8
define fn00000000004492F0
fn00000000004492F0_entry:
	rsp = fp
	// succ:  l00000000004492F0
l00000000004492F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rsi = rdx
	r8 = Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx - r8)
	branch Test(UGE,C) l0000000000449322
	// succ:  l0000000000449308 l0000000000449322
l0000000000449308:
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l0000000000449317
	// succ:  l000000000044930F l0000000000449317
l000000000044930F:
	call fn0000000000448E80 (retsize: 8;)
	rax = Mem0[rbx:word64]
	// succ:  l0000000000449317
l0000000000449317:
	rax = rax + rsi * 2<64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004492F0_exit
l0000000000449322:
	rcx = 0x000000000048D9A8<p64>
	call fn0000000000471560 (retsize: 8;)
	// succ:  l000000000044932F_thunk_fn0000000000449330
l000000000044932F_thunk_fn0000000000449330:
	call fn0000000000449330 (retsize: 0;)
	return
	// succ:  fn00000000004492F0_exit
fn00000000004492F0_exit:


// fn0000000000449330
// Return size: 8
define fn0000000000449330
fn0000000000449330_entry:
	rsp = fp
	// succ:  l0000000000449330
l0000000000449330:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l000000000044934A
	// succ:  l000000000044933F l000000000044934A
l000000000044933F:
	rbx = rcx
	call fn0000000000448E80 (retsize: 8;)
	rax = Mem0[rbx:word64]
	// succ:  l000000000044934A
l000000000044934A:
	rdx = Mem0[rax - 0x18<64>:word64]
	rax = rax + rdx * 2<64>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449330_exit
fn0000000000449330_exit:


// fn0000000000449360
// Return size: 0
define fn0000000000449360
fn0000000000449360_entry:
	rsp = fp
	// succ:  l0000000000449360
l0000000000449360:
	// succ:  l0000000000449360_thunk_fn0000000000475550
l0000000000449360_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000449360_exit
fn0000000000449360_exit:


// fn0000000000449370
// Return size: 8
define fn0000000000449370
fn0000000000449370_entry:
	rsp = fp
	// succ:  l0000000000449370
l0000000000449370:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx + 0x10<64>:word32] = __xadd(Mem0[rcx + 0x10<64>:word32], eax)
	SCZO = cond(Mem0[rcx + 0x10<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000449380
	// succ:  l000000000044937E l0000000000449380
l000000000044937E:
	return
	// succ:  fn0000000000449370_exit
l0000000000449380:
	// succ:  l0000000000449380_thunk_fn0000000000475550
l0000000000449380_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000449370_exit
fn0000000000449370_exit:


// fn0000000000449390
// Return size: 8
define fn0000000000449390
fn0000000000449390_entry:
	rsp = fp
	// succ:  l0000000000449390
l0000000000449390:
	__lock()
	v4 = Mem0[rcx + 0x10<64>:word32] + 1<32>
	Mem0[rcx + 0x10<64>:word32] = v4
	SCZO = cond(v4)
	rax = rcx + 0x18<64>
	return
	// succ:  fn0000000000449390_exit
fn0000000000449390_exit:


// fn00000000004493A0
// Return size: 8
define fn00000000004493A0
fn00000000004493A0_entry:
	rsp = fp
	// succ:  l00000000004493A0
l00000000004493A0:
	rax = rcx + 0x18<64>
	return
	// succ:  fn00000000004493A0_exit
fn00000000004493A0_exit:


// fn00000000004493B0
// Return size: 8
define fn00000000004493B0
fn00000000004493B0_entry:
	rsp = fp
	// succ:  l00000000004493B0
l00000000004493B0:
	rax = 0x000000000048B240<p64>
	return
	// succ:  fn00000000004493B0_exit
fn00000000004493B0_exit:


// fn00000000004493C0
// Return size: 8
define fn00000000004493C0
fn00000000004493C0_entry:
	rsp = fp
	// succ:  l00000000004493C0
l00000000004493C0:
	Mem0[rcx + 0x10<64>:word32] = 0xFFFFFFFF<32>
	return
	// succ:  fn00000000004493C0_exit
fn00000000004493C0_exit:


// fn00000000004493D0
// Return size: 8
define fn00000000004493D0
fn00000000004493D0_entry:
	rsp = fp
	// succ:  l00000000004493D0
l00000000004493D0:
	Mem0[rcx + 0x10<64>:word32] = 0<32>
	return
	// succ:  fn00000000004493D0_exit
fn00000000004493D0_exit:


// fn00000000004493E0
// Return size: 8
define fn00000000004493E0
fn00000000004493E0_entry:
	rsp = fp
	// succ:  l00000000004493E0
l00000000004493E0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx + 0x10<64>:word32] = 0<32>
	Mem0[rcx:word64] = rdx
	Mem0[rcx + 0x18<64> + rdx * 2<64>:word16] = ax
	return
	// succ:  fn00000000004493E0_exit
fn00000000004493E0_exit:


// fn0000000000449400
// Return size: 8
define fn0000000000449400
fn0000000000449400_entry:
	rsp = fp
	// succ:  l0000000000449400
l0000000000449400:
	eax = Mem0[rcx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000449411
	// succ:  l0000000000449407 l0000000000449411
l0000000000449407:
	__lock()
	v9 = Mem0[rcx + 0x10<64>:word32] + 1<32>
	Mem0[rcx + 0x10<64>:word32] = v9
	SCZO = cond(v9)
	rax = rcx + 0x18<64>
	return
	// succ:  fn0000000000449400_exit
l0000000000449411:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	// succ:  l0000000000449414_thunk_fn0000000000449420
l0000000000449414_thunk_fn0000000000449420:
	call fn0000000000449420 (retsize: 0;)
	return
	// succ:  fn0000000000449400_exit
fn0000000000449400_exit:


// fn0000000000449420
// Return size: 8
define fn0000000000449420
fn0000000000449420_entry:
	rsp = fp
	// succ:  l0000000000449420
l0000000000449420:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = r8
	r8 = rdx
	rcx = rcx + Mem0[rsi:word64]
	SCZO = cond(rcx)
	rdx = Mem0[rsi + 8<64>:word64]
	call fn0000000000449490 (retsize: 8;)
	r8 = Mem0[rsi:word64]
	rbx = rax
	rax = rax + 0x18<64>
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l0000000000449466
	// succ:  l000000000044944A l0000000000449466
l000000000044944A:
	SCZO = cond(r8 - 1<64>)
	r9 = rbx + 0x18<64>
	branch Test(EQ,Z) l0000000000449480
	// succ:  l0000000000449454 l0000000000449480
l0000000000449454:
	rdx = rsi + 0x18<64>
	r8 = r8 + r8
	SCZO = cond(r8)
	rcx = r9
	rax = memcpy(rcx, rdx, r8)
	r8 = Mem0[rsi:word64]
	// succ:  l0000000000449466
l0000000000449466:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x10<64>:word32] = 0<32>
	Mem0[rbx:word64] = r8
	Mem0[rbx + 0x18<64> + r8 * 2<64>:word16] = dx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449420_exit
l0000000000449480:
	eax = CONVERT(Mem0[rsi + 0x18<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 0x18<64>:word16] = ax
	rax = r9
	goto l0000000000449466
	// succ:  l0000000000449466
fn0000000000449420_exit:


// fn0000000000449490
// Return size: 8
define fn0000000000449490
fn0000000000449490_entry:
	rsp = fp
	// succ:  l0000000000449490
l0000000000449490:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r8 = 0x1FFFFFFFFFFFFFFC<64>
	SCZO = cond(rcx - r8)
	rbx = rcx
	branch Test(UGT,CZ) l000000000044950A
	// succ:  l00000000004494A7 l000000000044950A
l00000000004494A7:
	SCZO = cond(rbx - rdx)
	rcx = rcx + 0x1A<64> + rcx
	branch Test(ULE,CZ) l00000000004494F4
	// succ:  l00000000004494B1 l00000000004494F4
l00000000004494B1:
	rax = rdx + rdx
	SCZO = cond(rbx - rax)
	branch Test(UGE,C) l00000000004494BC
	// succ:  l00000000004494B8_1 l00000000004494BC
l00000000004494B8_1:
	rbx = rax
	// succ:  l00000000004494BC
l00000000004494BC:
	rcx = rbx + 2<64> + rbx
	rax = rcx + 0x38<64>
	SCZO = cond(rax - 0x1000<64>)
	branch Test(ULE,CZ) l0000000000449516
	// succ:  l00000000004494CD l0000000000449516
l00000000004494CD:
	SCZO = cond(rdx - rbx)
	branch Test(UGE,C) l0000000000449516
	// succ:  l00000000004494D2 l0000000000449516
l00000000004494D2:
	eax = eax & 0xFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rdx = rax
	eax = 0x1000<32>
	rax = CONVERT(eax, word32, uint64)
	rax = rax - rdx
	SCZO = cond(rax)
	rax = rax >>u 1<64>
	SCZO = cond(rax)
	rbx = rbx + rax
	SCZO = cond(rbx)
	SCZO = cond(rbx - r8)
	branch Test(ULE,CZ) l00000000004494EF
	// succ:  l00000000004494EB_1 l00000000004494EF
l00000000004494EB_1:
	rbx = r8
	// succ:  l00000000004494EF
l00000000004494EF:
	rcx = rbx + 0x1A<64> + rbx
	// succ:  l00000000004494F4
l00000000004494F4:
	call fn0000000000475590 (retsize: 8;)
	Mem0[rax + 8<64>:word64] = rbx
	Mem0[rax + 0x10<64>:word32] = 0<32>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449490_exit
l000000000044950A:
	rcx = 0x000000000048DA15<p64>
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l0000000000449516
l0000000000449516:
	rcx = rcx + 0x18<64>
	SCZO = cond(rcx)
	goto l00000000004494F4
	// succ:  l00000000004494F4
fn0000000000449490_exit:


// fn0000000000449520
// Return size: 8
define fn0000000000449520
fn0000000000449520_entry:
	rsp = fp
	// succ:  l0000000000449520
l0000000000449520:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	rsi = rdx - 1<64>
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l0000000000449543
	// succ:  l0000000000449538 l0000000000449543
l0000000000449538:
	rbx = rcx
	call fn0000000000448E80 (retsize: 8;)
	rax = Mem0[rbx:word64]
	// succ:  l0000000000449543
l0000000000449543:
	rax = rax + rsi * 2<64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449520_exit
fn0000000000449520_exit:


// fn0000000000449550
// Return size: 8
define fn0000000000449550
fn0000000000449550_entry:
	rsp = fp
	// succ:  l0000000000449550
l0000000000449550:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r8 = Mem0[rdx:word64]
	rsi = rcx
	rbx = rdx
	eax = Mem0[r8 - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000449572
	// succ:  l0000000000449567 l0000000000449572
l0000000000449567:
	rcx = rdx
	call fn0000000000448E80 (retsize: 8;)
	r8 = Mem0[rbx:word64]
	// succ:  l0000000000449572
l0000000000449572:
	rax = rsi
	Mem0[rsi:word64] = r8
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449550_exit
fn0000000000449550_exit:


// fn0000000000449580
// Return size: 8
define fn0000000000449580
fn0000000000449580_entry:
	rsp = fp
	// succ:  l0000000000449580
l0000000000449580:
	r8 = Mem0[rcx:word64]
	r10d = Mem0[r8 - 8<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d & r10d)
	C = false
	branch Test(SG,S) l00000000004495B0
	// succ:  l000000000044958C l00000000004495B0
l000000000044958C:
	rax = Mem0[rdx:word64]
	r9d = Mem0[rax - 8<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NS,S) l000000000044959F
	// succ:  l0000000000449598 l000000000044959F
l0000000000449598:
	Mem0[rax - 8<64>:word32] = 0<32>
	// succ:  l000000000044959F
l000000000044959F:
	Mem0[rcx:word64] = rax
	Mem0[rdx:word64] = r8
	return
	// succ:  fn0000000000449580_exit
l00000000004495B0:
	Mem0[r8 - 8<64>:word32] = 0<32>
	goto l000000000044958C
	// succ:  l000000000044958C
fn0000000000449580_exit:


// fn00000000004495C0
// Return size: 8
define fn00000000004495C0
fn00000000004495C0_entry:
	rsp = fp
	// succ:  l00000000004495C0
l00000000004495C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l00000000004495DA
	// succ:  l00000000004495CF l00000000004495DA
l00000000004495CF:
	rbx = rcx
	call fn0000000000448E80 (retsize: 8;)
	rax = Mem0[rbx:word64]
	// succ:  l00000000004495DA
l00000000004495DA:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004495C0_exit
fn00000000004495C0_exit:


// fn00000000004495E0
// Return size: 8
define fn00000000004495E0
fn00000000004495E0_entry:
	rsp = fp
	// succ:  l00000000004495E0
l00000000004495E0:
	rax = Mem0[rcx:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = Mem0[rax - 0x18<64>:word64]
	// succ:  l00000000004495EC_thunk_fn000000000044A6C0
l00000000004495EC_thunk_fn000000000044A6C0:
	call fn000000000044A6C0 (retsize: 0;)
	return
	// succ:  fn00000000004495E0_exit
fn00000000004495E0_exit:


// fn0000000000449600
// Return size: 8
define fn0000000000449600
fn0000000000449600_entry:
	rsp = fp
	// succ:  l0000000000449600
l0000000000449600:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rbx = rdx
	rbx = rbx - Mem0[rcx:word64]
	SCZO = cond(rbx)
	rsi = rcx
	rdx = rbx
	rdx = rdx >> 1<64>
	SCZO = cond(rdx)
	call fn000000000044A6C0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	Mem0[rax - 8<64>:word32] = 0xFFFFFFFF<32>
	rax = rax + rbx
	SCZO = cond(rax)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449600_exit
fn0000000000449600_exit:


// fn0000000000449640
// Return size: 8
define fn0000000000449640
fn0000000000449640_entry:
	rsp = fp
	// succ:  l0000000000449640
l0000000000449640:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r8 = r8 - rdx
	SCZO = cond(r8)
	rax = rdx
	r8 = r8 >> 1<64>
	SCZO = cond(r8)
	branch Test(NE,Z) l0000000000449660
	// succ:  l0000000000449651 l0000000000449660
l0000000000449651:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449640_exit
l0000000000449660:
	rax = rax - Mem0[rcx:word64]
	SCZO = cond(rax)
	rsi = rcx
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rdx = rax
	rbx = rax
	rdx = rdx >> 1<64>
	SCZO = cond(rdx)
	call fn000000000044A6C0 (retsize: 8;)
	rdx = Mem0[rsi:word64]
	rax = rdx + rbx
	Mem0[rdx - 8<64>:word32] = 0xFFFFFFFF<32>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449640_exit
fn0000000000449640_exit:


// fn0000000000449690
// Return size: 8
define fn0000000000449690
fn0000000000449690_entry:
	rsp = fp
	// succ:  l0000000000449690
l0000000000449690:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	r9 = Mem0[rax - 0x18<64>:word64]
	r10 = r9
	r10 = r10 - rdx
	SCZO = cond(r10)
	SCZO = cond(r10 - r8)
	branch Test(UGT,CZ) l00000000004496AC
	// succ:  l00000000004496A8_1 l00000000004496AC
l00000000004496A8_1:
	r8 = r10
	// succ:  l00000000004496AC
l00000000004496AC:
	SCZO = cond(rdx - r9)
	branch Test(UGT,CZ) l00000000004496C2
	// succ:  l00000000004496B1 l00000000004496C2
l00000000004496B1:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn000000000044A6C0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449690_exit
l00000000004496C2:
	r8 = rdx
	rcx = 0x000000000048D970<p64>
	rdx = 0x000000000048DA2D<p64>
	call fn0000000000471560 (retsize: 8;)
	// succ:  l00000000004496DF_thunk_fn00000000004496E0
l00000000004496DF_thunk_fn00000000004496E0:
	call fn00000000004496E0 (retsize: 0;)
	return
	// succ:  fn0000000000449690_exit
fn0000000000449690_exit:


// fn00000000004496E0
// Return size: 8
define fn00000000004496E0
fn00000000004496E0_entry:
	rsp = fp
	// succ:  l00000000004496E0
l00000000004496E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l00000000004496FA
	// succ:  l00000000004496EF l00000000004496FA
l00000000004496EF:
	rbx = rcx
	call fn0000000000448E80 (retsize: 8;)
	rax = Mem0[rbx:word64]
	// succ:  l00000000004496FA
l00000000004496FA:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004496E0_exit
fn00000000004496E0_exit:


// fn0000000000449700
// Return size: 8
define fn0000000000449700
fn0000000000449700_entry:
	rsp = fp
	// succ:  l0000000000449700
l0000000000449700:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	rsi = rdx
	eax = wcslen(rcx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000449727
	// succ:  l0000000000449719 l0000000000449727
l0000000000449719:
	r8 = rax
	rdx = rsi
	rcx = rbx
	call fn0000000000449760 (retsize: 8;)
	// succ:  l0000000000449727
l0000000000449727:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449700_exit
fn0000000000449700_exit:


// fn0000000000449740
// Return size: 8
define fn0000000000449740
fn0000000000449740_entry:
	rsp = fp
	// succ:  l0000000000449740
l0000000000449740:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	branch Test(EQ,Z) l0000000000449752
	// succ:  l000000000044974D l0000000000449752
l000000000044974D:
	call fn0000000000449760 (retsize: 8;)
	// succ:  l0000000000449752
l0000000000449752:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449740_exit
fn0000000000449740_exit:


// fn0000000000449760
// Return size: 8
define fn0000000000449760
fn0000000000449760_entry:
	rsp = fp
	// succ:  l0000000000449760
l0000000000449760:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r10 = 0x1FFFFFFFFFFFFFFC<64>
	rdi = rcx
	rsi = rdx
	r9 = Mem0[rax - 0x18<64>:word64]
	r10 = r10 - r9
	SCZO = cond(r10)
	SCZO = cond(r10 - r8)
	branch Test(ULT,C) l0000000000449831
	// succ:  l000000000044978A l0000000000449831
l000000000044978A:
	rbx = r8 + r9
	SCZO = cond(rbx - Mem0[rax - 0x10<64>:word64])
	branch Test(ULE,CZ) l00000000004497E0
	// succ:  l0000000000449794 l00000000004497E0
l0000000000449794:
	SCZO = cond(rax - rsi)
	branch Test(ULE,CZ) l00000000004497EC
	// succ:  l0000000000449799 l00000000004497EC
l0000000000449799:
	rdx = rbx
	rcx = rdi
	Mem0[rsp + 0x28<64>:word64] = r8
	call fn000000000044A5D0 (retsize: 8;)
	rax = Mem0[rdi:word64]
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = Mem0[rax - 0x18<64>:word64]
	// succ:  l00000000004497B5
l00000000004497B5:
	SCZO = cond(r8 - 1<64>)
	rcx = rax + r9 * 2<64>
	branch Test(NE,Z) l0000000000449821
	// succ:  l00000000004497BF l0000000000449821
l00000000004497BF:
	edx = CONVERT(Mem0[rsi:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rcx:word16] = dx
	// succ:  l00000000004497C5
l00000000004497C5:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = rbx
	Mem0[rax + rbx * 2<64>:word16] = dx
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449760_exit
l00000000004497E0:
	ecx = Mem0[rax - 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(LE,SZO) l00000000004497B5
	// succ:  l00000000004497E7 l00000000004497B5
l00000000004497E7:
	SCZO = cond(rax - rsi)
	branch Test(UGT,CZ) l0000000000449799
	// succ:  l00000000004497EC l0000000000449799
l00000000004497EC:
	rdx = rax + r9 * 2<64>
	SCZO = cond(rsi - rdx)
	branch Test(UGT,CZ) l0000000000449799
	// succ:  l00000000004497F5 l0000000000449799
l00000000004497F5:
	rcx = rdi
	rdx = rbx
	rsi = rsi - rax
	SCZO = cond(rsi)
	Mem0[rsp + 0x28<64>:word64] = r8
	call fn000000000044A5D0 (retsize: 8;)
	rax = Mem0[rdi:word64]
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = Mem0[rax - 0x18<64>:word64]
	rsi = rsi + rax
	SCZO = cond(rsi)
	SCZO = cond(r8 - 1<64>)
	rcx = rax + r9 * 2<64>
	branch Test(EQ,Z) l00000000004497BF
	// succ:  l0000000000449821 l00000000004497BF
l0000000000449821:
	r8 = r8 + r8
	SCZO = cond(r8)
	rdx = rsi
	rax = memcpy(rcx, rdx, r8)
	rax = Mem0[rdi:word64]
	goto l00000000004497C5
	// succ:  l00000000004497C5
l0000000000449831:
	rcx = 0x000000000048DA9E<p64>
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l000000000044983F_thunk_fn0000000000449840
l000000000044983F_thunk_fn0000000000449840:
	call fn0000000000449840 (retsize: 0;)
	return
	// succ:  fn0000000000449760_exit
fn0000000000449760_exit:


// fn0000000000449840
// Return size: 8
define fn0000000000449840
fn0000000000449840_entry:
	rsp = fp
	// succ:  l0000000000449840
l0000000000449840:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rbp = rdx
	rsi = Mem0[rax - 0x18<64>:word64]
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l00000000004498AD
	// succ:  l000000000044985A l00000000004498AD
l000000000044985A:
	r9 = Mem0[rcx:word64]
	rdx = Mem0[r9 - 0x18<64>:word64]
	rdi = rdx + rsi
	SCZO = cond(rdi - Mem0[r9 - 0x10<64>:word64])
	branch Test(ULE,CZ) l00000000004498C0
	// succ:  l000000000044986B l00000000004498C0
l000000000044986B:
	rdx = rdi
	rcx = rbx
	call fn000000000044A5D0 (retsize: 8;)
	r9 = Mem0[rbx:word64]
	rax = Mem0[rbp + 0<64>:word64]
	rdx = Mem0[r9 - 0x18<64>:word64]
	// succ:  l0000000000449881
l0000000000449881:
	SCZO = cond(rsi - 1<64>)
	rcx = r9 + rdx * 2<64>
	branch Test(EQ,Z) l00000000004498D0
	// succ:  l000000000044988B l00000000004498D0
l000000000044988B:
	r8 = rsi + rsi
	rdx = rax
	rax = memcpy(rcx, rdx, r8)
	r9 = Mem0[rbx:word64]
	// succ:  l000000000044989A
l000000000044989A:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[r9 - 8<64>:word32] = 0<32>
	Mem0[r9 - 0x18<64>:word64] = rdi
	Mem0[r9 + rdi * 2<64>:word16] = ax
	// succ:  l00000000004498AD
l00000000004498AD:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449840_exit
l00000000004498C0:
	ecx = Mem0[r9 - 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(GT,SZO) l000000000044986B
	// succ:  l00000000004498C8 l000000000044986B
l00000000004498C8:
	goto l0000000000449881
	// succ:  l0000000000449881
l00000000004498D0:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:word16] = ax
	goto l000000000044989A
	// succ:  l000000000044989A
fn0000000000449840_exit:


// fn00000000004498E0
// Return size: 8
define fn00000000004498E0
fn00000000004498E0_entry:
	rsp = fp
	// succ:  l00000000004498E0
l00000000004498E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rsi = rcx
	r12 = rdx
	rdi = r8
	rbx = Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8 - rbx)
	branch Test(UGT,CZ) l0000000000449988
	// succ:  l0000000000449903 l0000000000449988
l0000000000449903:
	rbx = rbx - r8
	SCZO = cond(rbx)
	SCZO = cond(rbx - r9)
	branch Test(ULE,CZ) l000000000044990D
	// succ:  l0000000000449909_1 l000000000044990D
l0000000000449909_1:
	rbx = r9
	// succ:  l000000000044990D
l000000000044990D:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000449966
	// succ:  l0000000000449912 l0000000000449966
l0000000000449912:
	r9 = Mem0[rcx:word64]
	rcx = Mem0[r9 - 0x18<64>:word64]
	rbp = rbx + rcx
	SCZO = cond(rbp - Mem0[r9 - 0x10<64>:word64])
	branch Test(ULE,CZ) l0000000000449974
	// succ:  l0000000000449923 l0000000000449974
l0000000000449923:
	rcx = rsi
	rdx = rbp
	call fn000000000044A5D0 (retsize: 8;)
	r9 = Mem0[rsi:word64]
	rax = Mem0[r12:word64]
	rcx = Mem0[r9 - 0x18<64>:word64]
	// succ:  l0000000000449939
l0000000000449939:
	SCZO = cond(rbx - 1<64>)
	rdx = rax + rdi * 2<64>
	rcx = r9 + rcx * 2<64>
	branch Test(EQ,Z) l0000000000449980
	// succ:  l0000000000449947 l0000000000449980
l0000000000449947:
	r8 = rbx + rbx
	rax = memcpy(rcx, rdx, r8)
	r9 = Mem0[rsi:word64]
	// succ:  l0000000000449953
l0000000000449953:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[r9 - 8<64>:word32] = 0<32>
	Mem0[r9 - 0x18<64>:word64] = rbp
	Mem0[r9 + rbp * 2<64>:word16] = ax
	// succ:  l0000000000449966
l0000000000449966:
	rax = rsi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004498E0_exit
l0000000000449974:
	edx = Mem0[r9 - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(GT,SZO) l0000000000449923
	// succ:  l000000000044997C l0000000000449923
l000000000044997C:
	goto l0000000000449939
	// succ:  l0000000000449939
l0000000000449980:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:word16] = ax
	goto l0000000000449953
	// succ:  l0000000000449953
l0000000000449988:
	rdx = 0x000000000048DA9E<p64>
	rcx = 0x000000000048D970<p64>
	r9 = rbx
	call fn0000000000471560 (retsize: 8;)
	// succ:  l000000000044999F_thunk_fn00000000004499A0
l000000000044999F_thunk_fn00000000004499A0:
	call fn00000000004499A0 (retsize: 0;)
	return
	// succ:  fn00000000004498E0_exit
fn00000000004498E0_exit:


// fn00000000004499A0
// Return size: 8
define fn00000000004499A0
fn00000000004499A0_entry:
	rsp = fp
	// succ:  l00000000004499A0
l00000000004499A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r8 = Mem0[rdx + 8<64>:word64]
	rax = Mem0[rdx:word64]
	rbx = rcx
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l00000000004499BC
	// succ:  l00000000004499B4 l00000000004499BC
l00000000004499B4:
	rdx = rax
	call fn0000000000449760 (retsize: 8;)
	// succ:  l00000000004499BC
l00000000004499BC:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004499A0_exit
fn00000000004499A0_exit:


// fn00000000004499D0
// Return size: 8
define fn00000000004499D0
fn00000000004499D0_entry:
	rsp = fp
	// succ:  l00000000004499D0
l00000000004499D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SZO = cond(rdx & rdx)
	C = false
	rbx = rcx
	branch Test(EQ,Z) l00000000004499E6
	// succ:  l00000000004499DD l00000000004499E6
l00000000004499DD:
	r8d = CONVERT(r8w, word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	call fn00000000004499F0 (retsize: 8;)
	rsp = rsp + 8<64>
	// succ:  l00000000004499E6
l00000000004499E6:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004499D0_exit
fn00000000004499D0_exit:


// fn00000000004499F0
// Return size: 0
define fn00000000004499F0
fn00000000004499F0_entry:
	rsp = fp
	// succ:  l00000000004499F0
l00000000004499F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r9 = Mem0[rcx:word64]
	rbx = rdx
	rdx = 0x1FFFFFFFFFFFFFFC<64>
	rbp = rcx
	r12d = r8d
	r12 = CONVERT(r12d, word32, uint64)
	esi = r8d
	rsi = CONVERT(esi, word32, uint64)
	rax = Mem0[r9 - 0x18<64>:word64]
	rdx = rdx - rax
	SCZO = cond(rdx)
	SCZO = cond(rdx - rbx)
	branch Test(ULT,C) l0000000000449A86
	// succ:  l0000000000449A1F l0000000000449A86
l0000000000449A1F:
	rdi = rbx + rax
	SCZO = cond(rdi - Mem0[r9 - 0x10<64>:word64])
	branch Test(UGT,CZ) l0000000000449A31
	// succ:  l0000000000449A29 l0000000000449A31
l0000000000449A29:
	edx = Mem0[r9 - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l0000000000449A44
	// succ:  l0000000000449A31 l0000000000449A44
l0000000000449A31:
	rdx = rdi
	rcx = rbp
	call fn000000000044A5D0 (retsize: 8;)
	r9 = Mem0[rbp + 0<64>:word64]
	rax = Mem0[r9 - 0x18<64>:word64]
	// succ:  l0000000000449A44
l0000000000449A44:
	SCZO = cond(rbx - 1<64>)
	rax = r9 + rax * 2<64>
	branch Test(EQ,Z) l0000000000449A80
	// succ:  l0000000000449A4E l0000000000449A80
l0000000000449A4E:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000449A60
	// succ:  l0000000000449A53 l0000000000449A60
l0000000000449A53:
	Mem0[rax:word16] = si
	rax = rax + 2<64>
	SCZO = cond(rax)
	rbx = rbx - 1<64>
	SCZO = cond(rbx)
	branch Test(NE,Z) l0000000000449A53
	// succ:  l0000000000449A60 l0000000000449A53
l0000000000449A60:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[r9 - 8<64>:word32] = 0<32>
	Mem0[r9 - 0x18<64>:word64] = rdi
	Mem0[r9 + rdi * 2<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004499F0_exit
l0000000000449A80:
	Mem0[rax:word16] = r12w
	goto l0000000000449A60
	// succ:  l0000000000449A60
l0000000000449A86:
	rcx = 0x000000000048DA9E<p64>
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l0000000000449A9F_thunk_fn0000000000449AA0
l0000000000449A9F_thunk_fn0000000000449AA0:
	call fn0000000000449AA0 (retsize: 0;)
	return
	// succ:  fn00000000004499F0_exit
fn00000000004499F0_exit:


// fn0000000000449AA0
// Return size: 8
define fn0000000000449AA0
fn0000000000449AA0_entry:
	rsp = fp
	// succ:  l0000000000449AA0
l0000000000449AA0:
	r8 = Mem0[rcx:word64]
	rax = rcx
	r10d = Mem0[r8 - 8<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d & r10d)
	C = false
	branch Test(SG,S) l0000000000449AD0
	// succ:  l0000000000449AAF l0000000000449AD0
l0000000000449AAF:
	rcx = Mem0[rdx:word64]
	r9d = Mem0[rcx - 8<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NS,S) l0000000000449AC2
	// succ:  l0000000000449ABB l0000000000449AC2
l0000000000449ABB:
	Mem0[rcx - 8<64>:word32] = 0<32>
	// succ:  l0000000000449AC2
l0000000000449AC2:
	Mem0[rax:word64] = rcx
	Mem0[rdx:word64] = r8
	return
	// succ:  fn0000000000449AA0_exit
l0000000000449AD0:
	Mem0[r8 - 8<64>:word32] = 0<32>
	goto l0000000000449AAF
	// succ:  l0000000000449AAF
fn0000000000449AA0_exit:


// fn0000000000449AE0
// Return size: 8
define fn0000000000449AE0
fn0000000000449AE0_entry:
	rsp = fp
	// succ:  l0000000000449AE0
l0000000000449AE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx
	rbx = rdx
	rcx = rdx
	eax = wcslen(rcx)
	rdx = rbx
	r8 = rax
	rcx = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000449B03_thunk_fn0000000000449B10
l0000000000449B03_thunk_fn0000000000449B10:
	call fn0000000000449B10 (retsize: 0;)
	return
	// succ:  fn0000000000449AE0_exit
fn0000000000449AE0_exit:


// fn0000000000449B10
// Return size: 8
define fn0000000000449B10
fn0000000000449B10_entry:
	rsp = fp
	// succ:  l0000000000449B10
l0000000000449B10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = 0x1FFFFFFFFFFFFFFC<64>
	rbx = rcx
	rcx = Mem0[rcx:word64]
	rsi = r8
	SCZO = cond(rsi - rax)
	r8 = Mem0[rcx - 0x18<64>:word64]
	branch Test(UGT,CZ) l0000000000449BE6
	// succ:  l0000000000449B37 l0000000000449BE6
l0000000000449B37:
	SCZO = cond(rdx - rcx)
	branch Test(ULT,C) l0000000000449B45
	// succ:  l0000000000449B3C l0000000000449B45
l0000000000449B3C:
	rax = rcx + r8 * 2<64>
	SCZO = cond(rdx - rax)
	branch Test(ULE,CZ) l0000000000449B60
	// succ:  l0000000000449B45 l0000000000449B60
l0000000000449B45:
	r9 = rdx
	Mem0[rsp + 0x20<64>:word64] = rsi
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx
	call fn0000000000449270 (retsize: 8;)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449B10_exit
l0000000000449B60:
	eax = Mem0[rcx - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l0000000000449B45
	// succ:  l0000000000449B67 l0000000000449B45
l0000000000449B67:
	rax = rdx
	rax = rax - rcx
	SCZO = cond(rax)
	rax = rax >> 1<64>
	SCZO = cond(rax)
	SCZO = cond(rsi - rax)
	branch Test(UGT,CZ) l0000000000449BB0
	// succ:  l0000000000449B75 l0000000000449BB0
l0000000000449B75:
	SCZO = cond(rsi - 1<64>)
	branch Test(EQ,Z) l0000000000449BD0
	// succ:  l0000000000449B7B l0000000000449BD0
l0000000000449B7B:
	rdi = rsi + rsi
	r8 = rdi
	rax = memcpy(rcx, rdx, r8)
	rcx = Mem0[rbx:word64]
	// succ:  l0000000000449B8A
l0000000000449B8A:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rax = rbx
	Mem0[rcx - 8<64>:word32] = 0<32>
	Mem0[rcx - 0x18<64>:word64] = rsi
	Mem0[rcx + rdi:word16] = dx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449B10_exit
l0000000000449BB0:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000449BE0
	// succ:  l0000000000449BB5 l0000000000449BE0
l0000000000449BB5:
	SCZO = cond(rsi - 1<64>)
	branch Test(EQ,Z) l0000000000449BD0
	// succ:  l0000000000449BBB l0000000000449BD0
l0000000000449BBB:
	rdi = rsi + rsi
	r8 = rdi
	rax = memmove(rcx, rdx, r8)
	rcx = Mem0[rbx:word64]
	goto l0000000000449B8A
	// succ:  l0000000000449B8A
l0000000000449BD0:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	edi = 2<32>
	rdi = CONVERT(edi, word32, uint64)
	Mem0[rcx:word16] = ax
	goto l0000000000449B8A
	// succ:  l0000000000449B8A
l0000000000449BE0:
	rdi = rsi + rsi
	goto l0000000000449B8A
	// succ:  l0000000000449B8A
l0000000000449BE6:
	rcx = 0x000000000048DA89<p64>
	call fn0000000000470E60 (retsize: 8;)
fn0000000000449B10_exit:


// fn0000000000449C00
// Return size: 8
define fn0000000000449C00
fn0000000000449C00_entry:
	rsp = fp
	goto l0000000000449C00
	// succ:  l0000000000449C00
l0000000000449BFF_thunk_fn0000000000449C00:
	call fn0000000000449C00 (retsize: 0;)
	return
	// succ:  fn0000000000449C00_exit
l0000000000449C00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rdx:word64]
	SCZO = cond(Mem0[rcx:word64] - rbx)
	rsi = rcx
	branch Test(EQ,Z) l0000000000449C31
	goto l0000000000449C11
	// succ:  l0000000000449C11 l0000000000449C31
l0000000000449C00:
	goto l0000000000449BFF_thunk_fn0000000000449C00
	// succ:  l0000000000449BFF_thunk_fn0000000000449C00
l0000000000449C11:
	eax = Mem0[rbx - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000449C40
	// succ:  l0000000000449C18 l0000000000449C40
l0000000000449C18:
	__lock()
	v14 = Mem0[rbx - 8<64>:word32] + 1<32>
	Mem0[rbx - 8<64>:word32] = v14
	SCZO = cond(v14)
	// succ:  l0000000000449C1D
l0000000000449C1D:
	rcx = Mem0[rsi:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000449C60
	// succ:  l0000000000449C2E l0000000000449C60
l0000000000449C2E:
	Mem0[rsi:word64] = rbx
	// succ:  l0000000000449C31
l0000000000449C31:
	rax = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449C00_exit
l0000000000449C40:
	rcx = rbx - 0x18<64>
	rdx = rsp + 0x2F<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000449420 (retsize: 8;)
	rbx = rax
	goto l0000000000449C1D
	// succ:  l0000000000449C1D
l0000000000449C60:
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000475550 (retsize: 8;)
	goto l0000000000449C2E
	// succ:  l0000000000449C2E
fn0000000000449C00_exit:


// fn0000000000449C70
// Return size: 8
define fn0000000000449C70
fn0000000000449C70_entry:
	rsp = fp
	// succ:  l0000000000449C70
l0000000000449C70:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r10 = Mem0[rdx:word64]
	rdx = Mem0[r10 - 0x18<64>:word64]
	rax = rdx
	rax = rax - r8
	SCZO = cond(rax)
	SCZO = cond(rax - r9)
	branch Test(ULE,CZ) l0000000000449C88
	// succ:  l0000000000449C84_1 l0000000000449C88
l0000000000449C84_1:
	rax = r9
	// succ:  l0000000000449C88
l0000000000449C88:
	SCZO = cond(r8 - rdx)
	branch Test(UGT,CZ) l0000000000449C9D
	// succ:  l0000000000449C8D l0000000000449C9D
l0000000000449C8D:
	rdx = r10 + r8 * 2<64>
	r8 = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	// succ:  l0000000000449C98_thunk_fn0000000000449B10
l0000000000449C98_thunk_fn0000000000449B10:
	call fn0000000000449B10 (retsize: 0;)
	return
	// succ:  fn0000000000449C70_exit
l0000000000449C9D:
	r9 = rdx
	rcx = 0x000000000048D970<p64>
	rdx = 0x000000000048DA89<p64>
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000449CBF_thunk_fn0000000000449CC0
l0000000000449CBF_thunk_fn0000000000449CC0:
	call fn0000000000449CC0 (retsize: 0;)
	return
	// succ:  fn0000000000449C70_exit
fn0000000000449C70_exit:


// fn0000000000449CC0
// Return size: 8
define fn0000000000449CC0
fn0000000000449CC0_entry:
	rsp = fp
	// succ:  l0000000000449CC0
l0000000000449CC0:
	rax = rdx
	rdx = Mem0[rdx:word64]
	r8 = Mem0[rax + 8<64>:word64]
	// succ:  l0000000000449CCA_thunk_fn0000000000449B10
l0000000000449CCA_thunk_fn0000000000449B10:
	call fn0000000000449B10 (retsize: 0;)
	return
	// succ:  fn0000000000449CC0_exit
fn0000000000449CC0_exit:


// fn0000000000449CD0
// Return size: 8
define fn0000000000449CD0
fn0000000000449CD0_entry:
	rsp = fp
	// succ:  l0000000000449CD0
l0000000000449CD0:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r8d = CONVERT(r8w, word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	r9 = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rax = Mem0[rax - 0x18<64>:word64]
	Mem0[rsp + 0x20<64>:word32] = r8d
	r8 = rax
	call fn00000000004491E0 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000449CD0_exit
fn0000000000449CD0_exit:


// fn0000000000449D00
// Return size: 0
define fn0000000000449D00
fn0000000000449D00_entry:
	rsp = fp
	// succ:  l0000000000449D00
l0000000000449D00:
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	r9 = Mem0[r8 + 8<64>:word64]
	r8 = Mem0[r8:word64]
	rdx = rdx >> 1<64>
	SCZO = cond(rdx)
	// succ:  l0000000000449D0D_thunk_fn0000000000449DD0
l0000000000449D0D_thunk_fn0000000000449DD0:
	call fn0000000000449DD0 (retsize: 0;)
	return
	// succ:  fn0000000000449D00_exit
fn0000000000449D00_exit:


// fn0000000000449D20
// Return size: 8
define fn0000000000449D20
fn0000000000449D20_entry:
	rsp = fp
	// succ:  l0000000000449D20
l0000000000449D20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	rbx = rdx
	rbx = rbx - Mem0[rcx:word64]
	SCZO = cond(rbx)
	r8d = CONVERT(r8w, word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	rsi = rcx
	Mem0[rsp + 0x20<64>:word32] = r8d
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbx
	rdx = rdx >> 1<64>
	SCZO = cond(rdx)
	call fn00000000004491E0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	Mem0[rax - 8<64>:word32] = 0xFFFFFFFF<32>
	rax = rax + rbx
	SCZO = cond(rax)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449D20_exit
fn0000000000449D20_exit:


// fn0000000000449D60
// Return size: 8
define fn0000000000449D60
fn0000000000449D60_entry:
	rsp = fp
	// succ:  l0000000000449D60
l0000000000449D60:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	r9d = CONVERT(r9w, word16, word32)
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = r9d
	r9 = r8
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rdx >> 1<64>
	SCZO = cond(rdx)
	call fn00000000004491E0 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000449D60_exit
fn0000000000449D60_exit:


// fn0000000000449D90
// Return size: 0
define fn0000000000449D90
fn0000000000449D90_entry:
	rsp = fp
	// succ:  l0000000000449D90
l0000000000449D90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = r8
	rsi = rdx
	Mem0[rsp + 0x28<64>:word64] = r8
	eax = wcslen(rcx)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	rdx = rsi
	rcx = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000449DBD_thunk_fn0000000000449DD0
l0000000000449DBD_thunk_fn0000000000449DD0:
	call fn0000000000449DD0 (retsize: 0;)
	return
	// succ:  fn0000000000449D90_exit
fn0000000000449D90_exit:


// fn0000000000449DD0
// Return size: 0
define fn0000000000449DD0
fn0000000000449DD0_entry:
	rsp = fp
	// succ:  l0000000000449DD0
l0000000000449DD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdi = r9
	rsi = rcx
	rbp = rdx
	r9 = Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx - r9)
	branch Test(UGT,CZ) l0000000000449F49
	// succ:  l0000000000449DF3 l0000000000449F49
l0000000000449DF3:
	rcx = 0x1FFFFFFFFFFFFFFC<64>
	rcx = rcx - r9
	SCZO = cond(rcx)
	SCZO = cond(rdi - rcx)
	branch Test(UGT,CZ) l0000000000449F5F
	// succ:  l0000000000449E09 l0000000000449F5F
l0000000000449E09:
	SCZO = cond(r8 - rax)
	branch Test(UGE,C) l0000000000449E30
	// succ:  l0000000000449E0E l0000000000449E30
l0000000000449E0E:
	r9 = r8
	Mem0[rsp + 0x20<64>:word64] = rdi
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn0000000000449270 (retsize: 8;)
	// succ:  l0000000000449E24
l0000000000449E24:
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449DD0_exit
l0000000000449E30:
	rdx = rax + r9 * 2<64>
	SCZO = cond(r8 - rdx)
	branch Test(UGT,CZ) l0000000000449E0E
	// succ:  l0000000000449E39 l0000000000449E0E
l0000000000449E39:
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(GT,SZO) l0000000000449E0E
	// succ:  l0000000000449E40 l0000000000449E0E
l0000000000449E40:
	rbx = r8
	r9 = rdi
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	rbx = rbx - rax
	SCZO = cond(rbx)
	call fn000000000044A6C0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	r10 = rax + rbx
	rbx = rdi + rdi
	r9 = rax + rbp * 2<64>
	rdx = r10 + rbx
	SCZO = cond(r9 - rdx)
	branch Test(ULT,C) l0000000000449E95
	// succ:  l0000000000449E6F l0000000000449E95
l0000000000449E6F:
	SCZO = cond(rdi - 1<64>)
	branch Test(EQ,Z) l0000000000449EF5
	// succ:  l0000000000449E79 l0000000000449EF5
l0000000000449E79:
	r8 = rbx
	rdx = r10
	rcx = r9
	rax = memcpy(rcx, rdx, r8)
	rax = rsi
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449DD0_exit
l0000000000449E95:
	SCZO = cond(r10 - r9)
	branch Test(UGE,C) l0000000000449EE0
	// succ:  l0000000000449E9A l0000000000449EE0
l0000000000449E9A:
	rbp = r9
	rbp = rbp - r10
	SCZO = cond(rbp)
	r12 = rbp
	r12 = r12 >> 1<64>
	SCZO = cond(r12)
	SCZO = cond(r12 - 1<64>)
	branch Test(NE,Z) l0000000000449F33
	// succ:  l0000000000449EB0 l0000000000449F33
l0000000000449EB0:
	eax = CONVERT(Mem0[r10:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9:word16] = ax
	// succ:  l0000000000449EB8
l0000000000449EB8:
	rdi = rdi - r12
	SCZO = cond(rdi)
	rdx = r9 + rbx
	rcx = r9 + rbp
	SCZO = cond(rdi - 1<64>)
	r8 = rdi
	branch Test(NE,Z) l0000000000449F23
	// succ:  l0000000000449ECC l0000000000449F23
l0000000000449ECC:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:word16] = ax
	rax = rsi
	goto l0000000000449E24
	// succ:  l0000000000449E24
l0000000000449EE0:
	SCZO = cond(rdi - 1<64>)
	branch Test(NE,Z) l0000000000449F10
	// succ:  l0000000000449EE6 l0000000000449F10
l0000000000449EE6:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9:word16] = ax
	rax = rsi
	goto l0000000000449E24
	// succ:  l0000000000449E24
l0000000000449EF5:
	eax = CONVERT(Mem0[r10:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9:word16] = ax
	rax = rsi
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000449DD0_exit
l0000000000449F10:
	r8 = rbx
	rcx = r9
	rax = memcpy(rcx, rdx, r8)
	rax = rsi
	goto l0000000000449E24
	// succ:  l0000000000449E24
l0000000000449F23:
	r8 = r8 + r8
	SCZO = cond(r8)
	rax = memcpy(rcx, rdx, r8)
	rax = rsi
	goto l0000000000449E24
	// succ:  l0000000000449E24
l0000000000449F33:
	rcx = r9
	r8 = rbp
	rdx = r10
	rax = memcpy(rcx, rdx, r8)
	r9 = rax
	goto l0000000000449EB8
	// succ:  l0000000000449EB8
l0000000000449F49:
	r8 = rdx
	rcx = 0x000000000048D970<p64>
	rdx = 0x000000000048DA5E<p64>
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000449F5F
l0000000000449F5F:
	rcx = 0x000000000048DA5E<p64>
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l0000000000449F6F_thunk_fn0000000000449F70
l0000000000449F6F_thunk_fn0000000000449F70:
	call fn0000000000449F70 (retsize: 0;)
	return
	// succ:  fn0000000000449DD0_exit
fn0000000000449DD0_exit:


// fn0000000000449F70
// Return size: 0
define fn0000000000449F70
fn0000000000449F70_entry:
	rsp = fp
	// succ:  l0000000000449F70
l0000000000449F70:
	r8 = Mem0[r8:word64]
	r9 = Mem0[r8 - 0x18<64>:word64]
	// succ:  l0000000000449F77_thunk_fn0000000000449DD0
l0000000000449F77_thunk_fn0000000000449DD0:
	call fn0000000000449DD0 (retsize: 0;)
	return
	// succ:  fn0000000000449F70_exit
fn0000000000449F70_exit:


// fn0000000000449F80
// Return size: 8
define fn0000000000449F80
fn0000000000449F80_entry:
	rsp = fp
	// succ:  l0000000000449F80
l0000000000449F80:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r8 = Mem0[r8:word64]
	r10 = r9
	r9 = Mem0[rsp + 0x50<64>:word64]
	r11 = Mem0[r8 - 0x18<64>:word64]
	rax = r11
	rax = rax - r10
	SCZO = cond(rax)
	SCZO = cond(rax - r9)
	branch Test(UGT,CZ) l0000000000449FA0
	// succ:  l0000000000449F9C_1 l0000000000449FA0
l0000000000449F9C_1:
	r9 = rax
	// succ:  l0000000000449FA0
l0000000000449FA0:
	SCZO = cond(r10 - r11)
	branch Test(UGT,CZ) l0000000000449FB2
	// succ:  l0000000000449FA5 l0000000000449FB2
l0000000000449FA5:
	r8 = r8 + r10 * 2<64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	// succ:  l0000000000449FAD_thunk_fn0000000000449DD0
l0000000000449FAD_thunk_fn0000000000449DD0:
	call fn0000000000449DD0 (retsize: 0;)
	return
	// succ:  fn0000000000449F80_exit
l0000000000449FB2:
	rdx = 0x000000000048DA5E<p64>
	rcx = 0x000000000048D970<p64>
	r8 = r10
	r9 = r11
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000449FCF_thunk_fn0000000000449FD0
l0000000000449FCF_thunk_fn0000000000449FD0:
	call fn0000000000449FD0 (retsize: 0;)
	return
	// succ:  fn0000000000449F80_exit
fn0000000000449F80_exit:


// fn0000000000449FD0
// Return size: 8
define fn0000000000449FD0
fn0000000000449FD0_entry:
	rsp = fp
	// succ:  l0000000000449FD0
l0000000000449FD0:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r9d = CONVERT(r9w, word16, word32)
	r9 = CONVERT(r9d, word32, uint64)
	rax = Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx - rax)
	branch Test(UGT,CZ) l0000000000449FF9
	// succ:  l0000000000449FE4 l0000000000449FF9
l0000000000449FE4:
	Mem0[rsp + 0x20<64>:word32] = r9d
	r9 = r8
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn00000000004491E0 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000449FD0_exit
l0000000000449FF9:
	r8 = rdx
	rcx = 0x000000000048D970<p64>
	rdx = 0x000000000048DA5E<p64>
	r9 = rax
	call fn0000000000471560 (retsize: 8;)
	// succ:  l000000000044A01F_thunk_fn000000000044A020
l000000000044A01F_thunk_fn000000000044A020:
	call fn000000000044A020 (retsize: 0;)
	return
	// succ:  fn0000000000449FD0_exit
fn0000000000449FD0_exit:


// fn000000000044A020
// Return size: 8
define fn000000000044A020
fn000000000044A020_entry:
	rsp = fp
	// succ:  l000000000044A020
l000000000044A020:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r8 = Mem0[rdx:word64]
	rsi = rcx
	rbx = rdx
	eax = Mem0[r8 - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l000000000044A042
	// succ:  l000000000044A037 l000000000044A042
l000000000044A037:
	rcx = rdx
	call fn0000000000448E80 (retsize: 8;)
	r8 = Mem0[rbx:word64]
	// succ:  l000000000044A042
l000000000044A042:
	rax = Mem0[r8 - 0x18<64>:word64]
	rax = r8 + rax * 2<64>
	Mem0[rsi:word64] = rax
	rax = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044A020_exit
fn000000000044A020_exit:


// fn000000000044A060
// Return size: 8
define fn000000000044A060
fn000000000044A060_entry:
	rsp = fp
	// succ:  l000000000044A060
l000000000044A060:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	// succ:  l000000000044A063_thunk_fn000000000044A070
l000000000044A063_thunk_fn000000000044A070:
	call fn000000000044A070 (retsize: 0;)
	return
	// succ:  fn000000000044A060_exit
fn000000000044A060_exit:


// fn000000000044A070
// Return size: 8
define fn000000000044A070
fn000000000044A070_entry:
	rsp = fp
	// succ:  l000000000044A070
l000000000044A070:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r9 = 0x1FFFFFFFFFFFFFFC<64>
	SCZO = cond(rdx - r9)
	rax = Mem0[rax - 0x18<64>:word64]
	branch Test(UGT,CZ) l000000000044A0C4
	// succ:  l000000000044A08A l000000000044A0C4
l000000000044A08A:
	SCZO = cond(rdx - rax)
	branch Test(UGT,CZ) l000000000044A0A0
	// succ:  l000000000044A08F l000000000044A0A0
l000000000044A08F:
	branch Test(ULT,C) l000000000044A0B2
	// succ:  l000000000044A091 l000000000044A0B2
l000000000044A091:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000044A070_exit
l000000000044A0A0:
	rdx = rdx - rax
	SCZO = cond(rdx)
	branch Test(EQ,Z) l000000000044A091
	// succ:  l000000000044A0A5 l000000000044A091
l000000000044A0A5:
	r8d = CONVERT(r8w, word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	// succ:  l000000000044A0AD_thunk_fn00000000004499F0
l000000000044A0AD_thunk_fn00000000004499F0:
	call fn00000000004499F0 (retsize: 0;)
	return
	// succ:  fn000000000044A070_exit
l000000000044A0B2:
	rax = rax - rdx
	SCZO = cond(rax)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	// succ:  l000000000044A0BF_thunk_fn000000000044A6C0
l000000000044A0BF_thunk_fn000000000044A6C0:
	call fn000000000044A6C0 (retsize: 0;)
	return
	// succ:  fn000000000044A070_exit
l000000000044A0C4:
	rcx = 0x000000000048DAB3<p64>
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l000000000044A0DF_thunk_fn000000000044A0E0
l000000000044A0DF_thunk_fn000000000044A0E0:
	call fn000000000044A0E0 (retsize: 0;)
	return
	// succ:  fn000000000044A070_exit
fn000000000044A070_exit:


// fn000000000044A0E0
// Return size: 8
define fn000000000044A0E0
fn000000000044A0E0_entry:
	rsp = fp
	// succ:  l000000000044A0E0
l000000000044A0E0:
	SCZO = cond(r8 - 1<64>)
	branch Test(EQ,Z) l000000000044A0F0
	// succ:  l000000000044A0E6 l000000000044A0F0
l000000000044A0E6:
	r8 = r8 + r8
	SCZO = cond(r8)
	rax = memcpy(rcx, rdx, r8)
	return
	// succ:  fn000000000044A0E0_exit
l000000000044A0F0:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:word16] = ax
	return
	// succ:  fn000000000044A0E0_exit
fn000000000044A0E0_exit:


// fn000000000044A100
// Return size: 8
define fn000000000044A100
fn000000000044A100_entry:
	rsp = fp
	// succ:  l000000000044A100
l000000000044A100:
	rax = rdx
	Mem0[rcx:word64] = rdx
	return
	// succ:  fn000000000044A100_exit
fn000000000044A100_exit:


// fn000000000044A110
// Return size: 8
define fn000000000044A110
fn000000000044A110_entry:
	rsp = fp
	// succ:  l000000000044A110
l000000000044A110:
	rax = Mem0[rcx:word64]
	eax = Mem0[rax - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l000000000044A120
	// succ:  l000000000044A11A l000000000044A120
l000000000044A11A:
	// succ:  l000000000044A11A_thunk_fn0000000000448E80
l000000000044A11A_thunk_fn0000000000448E80:
	call fn0000000000448E80 (retsize: 0;)
	return
	// succ:  fn000000000044A110_exit
l000000000044A120:
	return
	// succ:  fn000000000044A110_exit
fn000000000044A110_exit:


// fn000000000044A130
// Return size: 8
define fn000000000044A130
fn000000000044A130_entry:
	rsp = fp
	// succ:  l000000000044A130
l000000000044A130:
	SCZO = cond(r8 - 1<64>)
	branch Test(EQ,Z) l000000000044A140
	// succ:  l000000000044A136 l000000000044A140
l000000000044A136:
	r8 = r8 + r8
	SCZO = cond(r8)
	rax = memmove(rcx, rdx, r8)
	return
	// succ:  fn000000000044A130_exit
l000000000044A140:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:word16] = ax
	return
	// succ:  fn000000000044A130_exit
fn000000000044A130_exit:


// fn000000000044A150
// Return size: 0
define fn000000000044A150
fn000000000044A150_entry:
	rsp = fp
	// succ:  l000000000044A150
l000000000044A150:
	rax = Mem0[rsp + 0x28<64>:word64]
	r8 = r8 - rdx
	SCZO = cond(r8)
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	r8 = r8 >> 1<64>
	SCZO = cond(r8)
	rax = rax - r9
	SCZO = cond(rax)
	rax = rax >> 1<64>
	SCZO = cond(rax)
	rdx = rdx >> 1<64>
	SCZO = cond(rdx)
	Mem0[rsp + 0x28<64>:word64] = rax
	// succ:  l000000000044A16C_thunk_fn000000000044A340
l000000000044A16C_thunk_fn000000000044A340:
	call fn000000000044A340 (retsize: 0;)
	return
	// succ:  fn000000000044A150_exit
fn000000000044A150_exit:


// fn000000000044A180
// Return size: 8
define fn000000000044A180
fn000000000044A180_entry:
	rsp = fp
	// succ:  l000000000044A180
l000000000044A180:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rdi = rcx
	rbx = rdx
	rsi = r8
	rcx = r9
	Mem0[rsp + 0x38<64>:word64] = r9
	rsi = rsi - rbx
	SCZO = cond(rsi)
	eax = wcslen(rcx)
	rbx = rbx - Mem0[rdi:word64]
	SCZO = cond(rbx)
	r9 = Mem0[rsp + 0x38<64>:word64]
	r8 = rsi
	Mem0[rsp + 0x20<64>:word64] = rax
	r8 = r8 >> 1<64>
	SCZO = cond(r8)
	rcx = rdi
	rdx = rbx
	rdx = rdx >> 1<64>
	SCZO = cond(rdx)
	call fn000000000044A340 (retsize: 8;)
	rsp = rsp + 8<64>
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044A180_exit
fn000000000044A180_exit:


// fn000000000044A1D0
// Return size: 0
define fn000000000044A1D0
fn000000000044A1D0_entry:
	rsp = fp
	// succ:  l000000000044A1D0
l000000000044A1D0:
	rax = Mem0[rsp + 0x28<64>:word64]
	r8 = r8 - rdx
	SCZO = cond(r8)
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	r8 = r8 >> 1<64>
	SCZO = cond(r8)
	rax = rax - r9
	SCZO = cond(rax)
	rax = rax >> 1<64>
	SCZO = cond(rax)
	rdx = rdx >> 1<64>
	SCZO = cond(rdx)
	Mem0[rsp + 0x28<64>:word64] = rax
	// succ:  l000000000044A1EC_thunk_fn000000000044A340
l000000000044A1EC_thunk_fn000000000044A340:
	call fn000000000044A340 (retsize: 0;)
	return
	// succ:  fn000000000044A1D0_exit
fn000000000044A1D0_exit:


// fn000000000044A200
// Return size: 0
define fn000000000044A200
fn000000000044A200_entry:
	rsp = fp
	// succ:  l000000000044A200
l000000000044A200:
	r8 = r8 - rdx
	SCZO = cond(r8)
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	r8 = r8 >> 1<64>
	SCZO = cond(r8)
	rdx = rdx >> 1<64>
	SCZO = cond(rdx)
	// succ:  l000000000044A20C_thunk_fn000000000044A340
l000000000044A20C_thunk_fn000000000044A340:
	call fn000000000044A340 (retsize: 0;)
	return
	// succ:  fn000000000044A200_exit
fn000000000044A200_exit:


// fn000000000044A220
// Return size: 8
define fn000000000044A220
fn000000000044A220_entry:
	rsp = fp
	// succ:  l000000000044A220
l000000000044A220:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	r9 = Mem0[r9:word64]
	r8 = r8 - rdx
	SCZO = cond(r8)
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	r8 = r8 >> 1<64>
	SCZO = cond(r8)
	rax = Mem0[r9 - 0x18<64>:word64]
	rdx = rdx >> 1<64>
	SCZO = cond(rdx)
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn000000000044A340 (retsize: 8;)
	rsp = rsp + 8<64>
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000044A220_exit
fn000000000044A220_exit:


// fn000000000044A250
// Return size: 0
define fn000000000044A250
fn000000000044A250_entry:
	rsp = fp
	// succ:  l000000000044A250
l000000000044A250:
	rax = Mem0[rsp + 0x28<64>:word64]
	r8 = r8 - rdx
	SCZO = cond(r8)
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	r8 = r8 >> 1<64>
	SCZO = cond(r8)
	rax = rax - r9
	SCZO = cond(rax)
	rax = rax >> 1<64>
	SCZO = cond(rax)
	rdx = rdx >> 1<64>
	SCZO = cond(rdx)
	Mem0[rsp + 0x28<64>:word64] = rax
	// succ:  l000000000044A26C_thunk_fn000000000044A340
l000000000044A26C_thunk_fn000000000044A340:
	call fn000000000044A340 (retsize: 0;)
	return
	// succ:  fn000000000044A250_exit
fn000000000044A250_exit:


// fn000000000044A280
// Return size: 0
define fn000000000044A280
fn000000000044A280_entry:
	rsp = fp
	// succ:  l000000000044A280
l000000000044A280:
	rax = Mem0[rsp + 0x28<64>:word64]
	r8 = r8 - rdx
	SCZO = cond(r8)
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	r8 = r8 >> 1<64>
	SCZO = cond(r8)
	rax = rax - r9
	SCZO = cond(rax)
	rax = rax >> 1<64>
	SCZO = cond(rax)
	rdx = rdx >> 1<64>
	SCZO = cond(rdx)
	Mem0[rsp + 0x28<64>:word64] = rax
	// succ:  l000000000044A29C_thunk_fn000000000044A340
l000000000044A29C_thunk_fn000000000044A340:
	call fn000000000044A340 (retsize: 0;)
	return
	// succ:  fn000000000044A280_exit
fn000000000044A280_exit:


// fn000000000044A2B0
// Return size: 8
define fn000000000044A2B0
fn000000000044A2B0_entry:
	rsp = fp
	// succ:  l000000000044A2B0
l000000000044A2B0:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = r9
	r8 = r8 - rdx
	SCZO = cond(r8)
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	rax = Mem0[rax + 8<64>:word64]
	r9 = Mem0[r9:word64]
	r8 = r8 >> 1<64>
	SCZO = cond(r8)
	rax = rax + rax
	SCZO = cond(rax)
	rdx = rdx >> 1<64>
	SCZO = cond(rdx)
	rax = rax >> 1<64>
	SCZO = cond(rax)
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn000000000044A340 (retsize: 8;)
	rsp = rsp + 8<64>
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000044A2B0_exit
fn000000000044A2B0_exit:


// fn000000000044A2E0
// Return size: 8
define fn000000000044A2E0
fn000000000044A2E0_entry:
	rsp = fp
	// succ:  l000000000044A2E0
l000000000044A2E0:
	eax = CONVERT(Mem0[rsp + 0x28<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r8 = r8 - rdx
	SCZO = cond(r8)
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	r8 = r8 >> 1<64>
	SCZO = cond(r8)
	Mem0[rsp + 0x28<64>:word32] = eax
	rdx = rdx >> 1<64>
	SCZO = cond(rdx)
	// succ:  l000000000044A2F5_thunk_fn00000000004491E0
l000000000044A2F5_thunk_fn00000000004491E0:
	call fn00000000004491E0 (retsize: 0;)
	return
	// succ:  fn000000000044A2E0_exit
fn000000000044A2E0_exit:


// fn000000000044A300
// Return size: 8
define fn000000000044A300
fn000000000044A300_entry:
	rsp = fp
	// succ:  l000000000044A300
l000000000044A300:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = r9
	rsi = rdx
	Mem0[rsp + 0x38<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = r9
	eax = wcslen(rcx)
	r9 = Mem0[rsp + 0x30<64>:word64]
	r8 = Mem0[rsp + 0x38<64>:word64]
	rdx = rsi
	Mem0[rsp + 0x20<64>:word64] = rax
	rcx = rbx
	call fn000000000044A340 (retsize: 8;)
	rsp = rsp + 8<64>
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044A300_exit
fn000000000044A300_exit:


// fn000000000044A340
// Return size: 0
define fn000000000044A340
fn000000000044A340_entry:
	rsp = fp
	// succ:  l000000000044A340
l000000000044A340:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x50<64>
	SCZO = cond(rsp)
	r12 = Mem0[rsp + 0xB0<64>:word64]
	rdi = rcx
	rcx = Mem0[rcx:word64]
	r10 = r9
	rbp = rdx
	r9 = Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(rdx - r9)
	branch Test(UGT,CZ) l000000000044A4CB
	// succ:  l000000000044A36F l000000000044A4CB
l000000000044A36F:
	rsi = r9
	rax = 0x1FFFFFFFFFFFFFFC<64>
	rsi = rsi - rdx
	SCZO = cond(rsi)
	SCZO = cond(rsi - r8)
	branch Test(ULE,CZ) l000000000044A386
	// succ:  l000000000044A382_1 l000000000044A386
l000000000044A382_1:
	rsi = r8
	// succ:  l000000000044A386
l000000000044A386:
	rax = rax - r9
	SCZO = cond(rax)
	rax = rax + rsi
	SCZO = cond(rax)
	SCZO = cond(r12 - rax)
	branch Test(UGT,CZ) l000000000044A4BF
	// succ:  l000000000044A395 l000000000044A4BF
l000000000044A395:
	SCZO = cond(r10 - rcx)
	branch Test(ULT,C) l000000000044A3A3
	// succ:  l000000000044A39A l000000000044A3A3
l000000000044A39A:
	rax = rcx + r9 * 2<64>
	SCZO = cond(r10 - rax)
	branch Test(ULE,CZ) l000000000044A3D0
	// succ:  l000000000044A3A3 l000000000044A3D0
l000000000044A3A3:
	Mem0[rsp + 0x20<64>:word64] = r12
	r9 = r10
	r8 = rsi
	rdx = rbp
	rcx = rdi
	call fn0000000000449270 (retsize: 8;)
	// succ:  l000000000044A3B9
l000000000044A3B9:
	rsp = rsp + 0x50<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044A340_exit
l000000000044A3D0:
	eax = Mem0[rcx - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000044A3A3
	// succ:  l000000000044A3D7 l000000000044A3A3
l000000000044A3D7:
	r14 = r12
	r13 = rbp + 0<64> + rbp
	rdx = r10 + r14
	rax = rcx + r13
	SCZO = cond(rdx - rax)
	branch Test(ULE,CZ) l000000000044A450
	// succ:  l000000000044A3ED l000000000044A450
l000000000044A3ED:
	rax = rsi + rbp
	rax = rcx + rax * 2<64>
	SCZO = cond(r10 - rax)
	branch Test(UGE,C) l000000000044A4B0
	// succ:  l000000000044A3FE l000000000044A4B0
l000000000044A3FE:
	r13 = rsp + 0x4F<64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rcx = r10
	r8 = r13
	call fn0000000000448F90 (retsize: 8;)
	Mem0[rsp + 0x20<64>:word64] = r12
	r9 = rax
	r8 = rsi
	rdx = rbp
	rcx = rdi
	rbx = rax
	call fn0000000000449270 (retsize: 8;)
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[rbx - 8<64>:word32] = __xadd(Mem0[rbx - 8<64>:word32], edx)
	SCZO = cond(Mem0[rbx - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(GT,SZO) l000000000044A3B9
	// succ:  l000000000044A438 l000000000044A3B9
l000000000044A438:
	rcx = rbx - 0x18<64>
	Mem0[rsp + 0x38<64>:word64] = rax
	call fn0000000000475550 (retsize: 8;)
	rax = Mem0[rsp + 0x38<64>:word64]
	goto l000000000044A3B9
	// succ:  l000000000044A3B9
l000000000044A450:
	r10 = r10 - rcx
	SCZO = cond(r10)
	rbx = r10
	rbx = rbx >> 1<64>
	SCZO = cond(rbx)
	// succ:  l000000000044A459
l000000000044A459:
	rdx = rbp
	rcx = rdi
	r9 = r12
	r8 = rsi
	call fn000000000044A6C0 (retsize: 8;)
	rcx = Mem0[rdi:word64]
	rdx = rcx + rbx * 2<64>
	rcx = rcx + r13
	SCZO = cond(rcx)
	SCZO = cond(r12 - 1<64>)
	branch Test(NE,Z) l000000000044A492
	// succ:  l000000000044A47A l000000000044A492
l000000000044A47A:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:word16] = ax
	rax = rdi
	rsp = rsp + 0x50<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044A340_exit
l000000000044A492:
	r8 = r14
	rax = memcpy(rcx, rdx, r8)
	rax = rdi
	rsp = rsp + 0x50<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044A340_exit
l000000000044A4B0:
	r10 = r10 - rcx
	SCZO = cond(r10)
	r10 = r10 >> 1<64>
	SCZO = cond(r10)
	rbx = r10
	rbx = rbx - rsi
	SCZO = cond(rbx)
	goto l000000000044A459
	// succ:  l000000000044A459
l000000000044A4BF:
	rcx = 0x000000000048DA73<p64>
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l000000000044A4CB
l000000000044A4CB:
	r8 = rdx
	rcx = 0x000000000048D970<p64>
	rdx = 0x000000000048DA73<p64>
	call fn0000000000471560 (retsize: 8;)
	rcx = rbx - 0x18<64>
	rsi = rax
	rdx = r13
	call fn0000000000449370 (retsize: 8;)
	rcx = rsi
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000044A4FF_thunk_fn000000000044A500
l000000000044A4FF_thunk_fn000000000044A500:
	call fn000000000044A500 (retsize: 0;)
	return
	// succ:  fn000000000044A340_exit
fn000000000044A340_exit:


// fn000000000044A500
// Return size: 8
define fn000000000044A500
fn000000000044A500_entry:
	rsp = fp
	// succ:  l000000000044A500
l000000000044A500:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	r9 = Mem0[r9:word64]
	rax = Mem0[r9 - 0x18<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn000000000044A340 (retsize: 8;)
	rsp = rsp + 8<64>
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000044A500_exit
fn000000000044A500_exit:


// fn000000000044A520
// Return size: 8
define fn000000000044A520
fn000000000044A520_entry:
	rsp = fp
	// succ:  l000000000044A520
l000000000044A520:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[r9:word64]
	r10 = Mem0[rsp + 0x50<64>:word64]
	r11 = Mem0[rsp + 0x58<64>:word64]
	r9 = Mem0[rbx - 0x18<64>:word64]
	rax = r9
	rax = rax - r10
	SCZO = cond(rax)
	SCZO = cond(rax - r11)
	branch Test(ULE,CZ) l000000000044A543
	// succ:  l000000000044A53F_1 l000000000044A543
l000000000044A53F_1:
	rax = r11
	// succ:  l000000000044A543
l000000000044A543:
	SCZO = cond(r10 - r9)
	branch Test(UGT,CZ) l000000000044A55B
	// succ:  l000000000044A548 l000000000044A55B
l000000000044A548:
	r9 = rbx + r10 * 2<64>
	Mem0[rsp + 0x50<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000044A556_thunk_fn000000000044A340
l000000000044A556_thunk_fn000000000044A340:
	call fn000000000044A340 (retsize: 0;)
	return
	// succ:  fn000000000044A520_exit
l000000000044A55B:
	rdx = 0x000000000048DA73<p64>
	rcx = 0x000000000048D970<p64>
	r8 = r10
	call fn0000000000471560 (retsize: 8;)
	// succ:  l000000000044A57F_thunk_fn000000000044A580
l000000000044A57F_thunk_fn000000000044A580:
	call fn000000000044A580 (retsize: 0;)
	return
	// succ:  fn000000000044A520_exit
fn000000000044A520_exit:


// fn000000000044A580
// Return size: 8
define fn000000000044A580
fn000000000044A580_entry:
	rsp = fp
	// succ:  l000000000044A580
l000000000044A580:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r11d = CONVERT(Mem0[rsp + 0x50<64>:word16], word16, word32)
	r11 = CONVERT(r11d, word32, uint64)
	r10 = Mem0[rax - 0x18<64>:word64]
	rax = r10
	rax = rax - rdx
	SCZO = cond(rax)
	SCZO = cond(rax - r8)
	branch Test(UGT,CZ) l000000000044A59E
	// succ:  l000000000044A59A_1 l000000000044A59E
l000000000044A59A_1:
	r8 = rax
	// succ:  l000000000044A59E
l000000000044A59E:
	SCZO = cond(rdx - r10)
	branch Test(UGT,CZ) l000000000044A5B1
	// succ:  l000000000044A5A3 l000000000044A5B1
l000000000044A5A3:
	Mem0[rsp + 0x50<64>:word32] = r11d
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	// succ:  l000000000044A5AC_thunk_fn00000000004491E0
l000000000044A5AC_thunk_fn00000000004491E0:
	call fn00000000004491E0 (retsize: 0;)
	return
	// succ:  fn000000000044A580_exit
l000000000044A5B1:
	r8 = rdx
	rcx = 0x000000000048D970<p64>
	rdx = 0x000000000048DA73<p64>
	r9 = r10
	call fn0000000000471560 (retsize: 8;)
	// succ:  l000000000044A5CF_thunk_fn000000000044A5D0
l000000000044A5CF_thunk_fn000000000044A5D0:
	call fn000000000044A5D0 (retsize: 0;)
	return
	// succ:  fn000000000044A580_exit
fn000000000044A580_exit:


// fn000000000044A5D0
// Return size: 8
define fn000000000044A5D0
fn000000000044A5D0_entry:
	rsp = fp
	// succ:  l000000000044A5D0
l000000000044A5D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	SCZO = cond(rdx - Mem0[rax - 0x10<64>:word64])
	branch Test(EQ,Z) l000000000044A620
	// succ:  l000000000044A5DE l000000000044A620
l000000000044A5DE:
	r9 = Mem0[rax - 0x18<64>:word64]
	rbx = rcx
	rcx = rax - 0x18<64>
	SCZO = cond(rdx - r9)
	branch Test(UGE,C) l000000000044A5F0
	// succ:  l000000000044A5EC_1 l000000000044A5F0
l000000000044A5EC_1:
	rdx = r9
	// succ:  l000000000044A5F0
l000000000044A5F0:
	r8 = rdx
	rdx = rsp + 0x3F<64>
	r8 = r8 - r9
	SCZO = cond(r8)
	call fn0000000000449420 (retsize: 8;)
	rcx = Mem0[rbx:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], edx)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l000000000044A630
	// succ:  l000000000044A611 l000000000044A630
l000000000044A611:
	Mem0[rbx:word64] = rax
	// succ:  l000000000044A614
l000000000044A614:
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044A5D0_exit
l000000000044A620:
	r8d = Mem0[rax - 8<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d & r8d)
	C = false
	branch Test(GT,SZO) l000000000044A5DE
	// succ:  l000000000044A629 l000000000044A5DE
l000000000044A629:
	goto l000000000044A614
	// succ:  l000000000044A614
l000000000044A630:
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn0000000000475550 (retsize: 8;)
	rax = Mem0[rsp + 0x28<64>:word64]
	goto l000000000044A611
	// succ:  l000000000044A611
fn000000000044A5D0_exit:


// fn000000000044A650
// Return size: 8
define fn000000000044A650
fn000000000044A650_entry:
	rsp = fp
	// succ:  l000000000044A650
l000000000044A650:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r9 = Mem0[rax - 0x18<64>:word64]
	rdx = r9 - 1<64>
	SCZO = cond(rdx - r9)
	branch Test(UGT,CZ) l000000000044A676
	// succ:  l000000000044A664 l000000000044A676
l000000000044A664:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	// succ:  l000000000044A671_thunk_fn000000000044A6C0
l000000000044A671_thunk_fn000000000044A6C0:
	call fn000000000044A6C0 (retsize: 0;)
	return
	// succ:  fn000000000044A650_exit
l000000000044A676:
	r8 = rdx
	rcx = 0x000000000048D970<p64>
	rdx = 0x000000000048DA2D<p64>
	call fn0000000000471560 (retsize: 8;)
	// succ:  l000000000044A68F_thunk_fn000000000044A690
l000000000044A68F_thunk_fn000000000044A690:
	call fn000000000044A690 (retsize: 0;)
	return
	// succ:  fn000000000044A650_exit
fn000000000044A650_exit:


// fn000000000044A690
// Return size: 8
define fn000000000044A690
fn000000000044A690_entry:
	rsp = fp
	// succ:  l000000000044A690
l000000000044A690:
	SCZO = cond(rdx - 1<64>)
	eax = r8d
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l000000000044A6B0
	// succ:  l000000000044A699 l000000000044A6B0
l000000000044A699:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l000000000044A6B5
	// succ:  l000000000044A69E l000000000044A6B5
l000000000044A69E:
	// succ:  l000000000044A6A0
l000000000044A6A0:
	Mem0[rcx:word16] = ax
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	branch Test(NE,Z) l000000000044A6A0
	// succ:  l000000000044A6AD l000000000044A6A0
l000000000044A6AD:
	return
	// succ:  fn000000000044A690_exit
l000000000044A6B0:
	Mem0[rcx:word16] = r8w
	return
	// succ:  fn000000000044A690_exit
l000000000044A6B5:
	return
	// succ:  fn000000000044A690_exit
fn000000000044A690_exit:


// fn000000000044A6C0
// Return size: 8
define fn000000000044A6C0
fn000000000044A6C0_entry:
	rsp = fp
	// succ:  l000000000044A6C0
l000000000044A6C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdi = r9
	r12 = rdx
	r14 = rcx
	rdi = rdi - r8
	SCZO = cond(rdi)
	rbp = r8
	r13 = r9
	r10 = Mem0[rax - 0x18<64>:word64]
	rdi = rdi + r10
	SCZO = cond(rdi)
	r10 = r10 - rdx
	SCZO = cond(r10)
	rdx = Mem0[rax - 0x10<64>:word64]
	rsi = r10
	rsi = rsi - r8
	SCZO = cond(rsi)
	SCZO = cond(rdi - rdx)
	branch Test(UGT,CZ) l000000000044A709
	// succ:  l000000000044A6FE l000000000044A709
l000000000044A6FE:
	ecx = Mem0[rax - 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(LE,SZO) l000000000044A7A0
	// succ:  l000000000044A709 l000000000044A7A0
l000000000044A709:
	r8 = rsp + 0x2F<64>
	rcx = rdi
	call fn0000000000449490 (retsize: 8;)
	SZO = cond(r12 & r12)
	C = false
	r15 = rax
	r10 = Mem0[r14:word64]
	rbx = rax + 0x18<64>
	branch Test(EQ,Z) l000000000044A740
	// succ:  l000000000044A725 l000000000044A740
l000000000044A725:
	SCZO = cond(r12 - 1<64>)
	branch Test(NE,Z) l000000000044A7F1
	// succ:  l000000000044A72F l000000000044A7F1
l000000000044A72F:
	eax = CONVERT(Mem0[r10:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r15 + 0x18<64>:word16] = ax
	// succ:  l000000000044A740
l000000000044A740:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000044A764
	// succ:  l000000000044A745 l000000000044A764
l000000000044A745:
	rbp = rbp + r12
	SCZO = cond(rbp)
	r12 = r12 + r13
	SCZO = cond(r12)
	SCZO = cond(rsi - 1<64>)
	rdx = r10 + rbp * 2<64>
	rcx = r15 + 0x18<64>
	branch Test(NE,Z) l000000000044A7E0
	// succ:  l000000000044A75E l000000000044A7E0
l000000000044A75E:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:word16] = ax
	// succ:  l000000000044A764
l000000000044A764:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[r10 - 8<64>:word32] = __xadd(Mem0[r10 - 8<64>:word32], eax)
	SCZO = cond(Mem0[r10 - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000044A810
	// succ:  l000000000044A777 l000000000044A810
l000000000044A777:
	Mem0[r14:word64] = rbx
	rax = rbx
	// succ:  l000000000044A77D
l000000000044A77D:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = rdi
	Mem0[rax + rdi * 2<64>:word16] = dx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044A6C0_exit
l000000000044A7A0:
	SCZO = cond(r8 - r9)
	branch Test(EQ,Z) l000000000044A77D
	// succ:  l000000000044A7A5 l000000000044A77D
l000000000044A7A5:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000044A77D
	// succ:  l000000000044A7AA l000000000044A77D
l000000000044A7AA:
	rbp = rbp + r12
	SCZO = cond(rbp)
	r12 = r12 + r13
	SCZO = cond(r12)
	SCZO = cond(rsi - 1<64>)
	rdx = rax + rbp * 2<64>
	rcx = rax
	branch Test(EQ,Z) l000000000044A7D0
	// succ:  l000000000044A7BE l000000000044A7D0
l000000000044A7BE:
	r8 = rsi + rsi
	rax = memmove(rcx, rdx, r8)
	rax = Mem0[r14:word64]
	goto l000000000044A77D
	// succ:  l000000000044A77D
l000000000044A7D0:
	edx = CONVERT(Mem0[rdx:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rcx:word16] = dx
	goto l000000000044A77D
	// succ:  l000000000044A77D
l000000000044A7E0:
	r8 = rsi + rsi
	rax = memcpy(rcx, rdx, r8)
	r10 = Mem0[r14:word64]
	goto l000000000044A764
	// succ:  l000000000044A764
l000000000044A7F1:
	r8 = r12
	rdx = r10
	rcx = rbx
	rax = memcpy(rcx, rdx, r8)
	r10 = Mem0[r14:word64]
	goto l000000000044A740
	// succ:  l000000000044A740
l000000000044A810:
	rcx = r10 - 0x18<64>
	call fn0000000000475550 (retsize: 8;)
	goto l000000000044A777
	// succ:  l000000000044A777
fn000000000044A6C0_exit:


// fn000000000044A820
// Return size: 8
define fn000000000044A820
fn000000000044A820_entry:
	rsp = fp
	// succ:  l000000000044A820
l000000000044A820:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rsi = rcx
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	r8 = Mem0[rax - 0x18<64>:word64]
	rbx = r8 + 1<64>
	SCZO = cond(rbx - Mem0[rax - 0x10<64>:word64])
	branch Test(UGT,CZ) l000000000044A844
	// succ:  l000000000044A83D l000000000044A844
l000000000044A83D:
	ecx = Mem0[rax - 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(LE,SZO) l000000000044A856
	// succ:  l000000000044A844 l000000000044A856
l000000000044A844:
	rdx = rbx
	rcx = rsi
	call fn000000000044A5D0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	r8 = Mem0[rax - 0x18<64>:word64]
	// succ:  l000000000044A856
l000000000044A856:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rax + r8 * 2<64>:word16] = di
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = rbx
	Mem0[rax + rbx * 2<64>:word16] = dx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044A820_exit
fn000000000044A820_exit:


// fn000000000044A880
// Return size: 8
define fn000000000044A880
fn000000000044A880_entry:
	rsp = fp
	// succ:  l000000000044A880
l000000000044A880:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r8 = rsp + 0x2F<64>
	rbx = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx:word64] = rax
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call fn0000000000448EB0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044A880_exit
fn000000000044A880_exit:


// fn000000000044A8B0
// Return size: 8
define fn000000000044A8B0
fn000000000044A8B0_entry:
	rsp = fp
	// succ:  l000000000044A8B0
l000000000044A8B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbx = rdx
	rsi = rcx
	rdx = 0xFFFFFFFFFFFFFFFE<64>
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000044A8DE
	// succ:  l000000000044A8C8 l000000000044A8DE
l000000000044A8C8:
	rcx = rbx
	Mem0[rsp + 0x28<64>:word64] = r8
	eax = wcslen(rcx)
	r8 = Mem0[rsp + 0x28<64>:word64]
	rdx = rbx + rax * 2<64>
	// succ:  l000000000044A8DE
l000000000044A8DE:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rcx = rbx
	call fn0000000000448F90 (retsize: 8;)
	Mem0[rsi:word64] = rax
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044A8B0_exit
fn000000000044A8B0_exit:


// fn000000000044A900
// Return size: 8
define fn000000000044A900
fn000000000044A900_entry:
	rsp = fp
	// succ:  l000000000044A900
l000000000044A900:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rax = rdx
	rcx = r9
	rdx = rdx + r8 * 2<64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rcx
	rcx = rax
	call fn0000000000448F90 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044A900_exit
fn000000000044A900_exit:


// fn000000000044A930
// Return size: 8
define fn000000000044A930
fn000000000044A930_entry:
	rsp = fp
	// succ:  l000000000044A930
l000000000044A930:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	r8 = rdx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn0000000000448EB0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044A930_exit
fn000000000044A930_exit:


// fn000000000044A950
// Return size: 8
define fn000000000044A950
fn000000000044A950_entry:
	rsp = fp
	// succ:  l000000000044A950
l000000000044A950:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l000000000044A970
	// succ:  l000000000044A962 l000000000044A970
l000000000044A962:
	__lock()
	v12 = Mem0[rax - 8<64>:word32] + 1<32>
	Mem0[rax - 8<64>:word32] = v12
	SCZO = cond(v12)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044A950_exit
l000000000044A970:
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000449420 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044A950_exit
fn000000000044A950_exit:


// fn000000000044A990
// Return size: 8
define fn000000000044A990
fn000000000044A990_entry:
	rsp = fp
	// succ:  l000000000044A990
l000000000044A990:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	r10 = Mem0[rdx:word64]
	rbx = rcx
	r11 = Mem0[r10 - 0x18<64>:word64]
	rax = r11
	rax = rax - r8
	SCZO = cond(rax)
	SCZO = cond(rax - r9)
	branch Test(ULE,CZ) l000000000044A9AC
	// succ:  l000000000044A9A8_1 l000000000044A9AC
l000000000044A9A8_1:
	rax = r9
	// succ:  l000000000044A9AC
l000000000044A9AC:
	rax = rax + r8
	SCZO = cond(rax)
	SCZO = cond(r8 - r11)
	rdx = r10 + rax * 2<64>
	branch Test(UGT,CZ) l000000000044A9D2
	// succ:  l000000000044A9B8 l000000000044A9D2
l000000000044A9B8:
	rcx = r10 + r8 * 2<64>
	r8 = rsp + 0x2F<64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000449090 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044A990_exit
l000000000044A9D2:
	rdx = 0x000000000048DAF2<p64>
	rcx = 0x000000000048D970<p64>
	r9 = r11
	call fn0000000000471560 (retsize: 8;)
	// succ:  l000000000044A9EF_thunk_fn000000000044A9F0
l000000000044A9EF_thunk_fn000000000044A9F0:
	call fn000000000044A9F0 (retsize: 0;)
	return
	// succ:  fn000000000044A990_exit
fn000000000044A990_exit:


// fn000000000044A9F0
// Return size: 8
define fn000000000044A9F0
fn000000000044A9F0_entry:
	rsp = fp
	// succ:  l000000000044A9F0
l000000000044A9F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r10 = Mem0[rdx:word64]
	rbx = rcx
	r11 = Mem0[r10 - 0x18<64>:word64]
	rax = r11
	rax = rax - r8
	SCZO = cond(rax)
	SCZO = cond(rax - r9)
	branch Test(ULE,CZ) l000000000044AA0C
	// succ:  l000000000044AA08_1 l000000000044AA0C
l000000000044AA08_1:
	rax = r9
	// succ:  l000000000044AA0C
l000000000044AA0C:
	rax = rax + r8
	SCZO = cond(rax)
	SCZO = cond(r8 - r11)
	rdx = r10 + rax * 2<64>
	branch Test(UGT,CZ) l000000000044AA32
	// succ:  l000000000044AA18 l000000000044AA32
l000000000044AA18:
	rcx = r10 + r8 * 2<64>
	r8 = Mem0[rsp + 0x50<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000449090 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044A9F0_exit
l000000000044AA32:
	rdx = 0x000000000048DAF2<p64>
	rcx = 0x000000000048D970<p64>
	r9 = r11
	call fn0000000000471560 (retsize: 8;)
	// succ:  l000000000044AA4F_thunk_fn000000000044AA50
l000000000044AA4F_thunk_fn000000000044AA50:
	call fn000000000044AA50 (retsize: 0;)
	return
	// succ:  fn000000000044A9F0_exit
fn000000000044A9F0_exit:


// fn000000000044AA50
// Return size: 8
define fn000000000044AA50
fn000000000044AA50_entry:
	rsp = fp
	// succ:  l000000000044AA50
l000000000044AA50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rbx = rcx
	rcx = Mem0[rdx:word64]
	rdx = Mem0[rdx + 8<64>:word64]
	rdx = rcx + rdx * 2<64>
	call fn0000000000448F90 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AA50_exit
fn000000000044AA50_exit:


// fn000000000044AA80
// Return size: 8
define fn000000000044AA80
fn000000000044AA80_entry:
	rsp = fp
	// succ:  l000000000044AA80
l000000000044AA80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = rsp + 0x2F<64>
	rbx = rcx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call fn0000000000448EB0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AA80_exit
fn000000000044AA80_exit:


// fn000000000044AAA0
// Return size: 8
define fn000000000044AAA0
fn000000000044AAA0_entry:
	rsp = fp
	// succ:  l000000000044AAA0
l000000000044AAA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	edx = CONVERT(r8w, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8 = r9
	call fn0000000000448EB0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AAA0_exit
fn000000000044AAA0_exit:


// fn000000000044AAC0
// Return size: 8
define fn000000000044AAC0
fn000000000044AAC0_entry:
	rsp = fp
	// succ:  l000000000044AAC0
l000000000044AAC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	rdx = r8
	r8 = r9
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000448F20 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AAC0_exit
fn000000000044AAC0_exit:


// fn000000000044AAF0
// Return size: 8
define fn000000000044AAF0
fn000000000044AAF0_entry:
	rsp = fp
	// succ:  l000000000044AAF0
l000000000044AAF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	rdx = r8
	r8 = r9
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000448F90 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AAF0_exit
fn000000000044AAF0_exit:


// fn000000000044AB20
// Return size: 8
define fn000000000044AB20
fn000000000044AB20_entry:
	rsp = fp
	// succ:  l000000000044AB20
l000000000044AB20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	rdx = r8
	r8 = r9
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000449090 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AB20_exit
fn000000000044AB20_exit:


// fn000000000044AB50
// Return size: 8
define fn000000000044AB50
fn000000000044AB50_entry:
	rsp = fp
	// succ:  l000000000044AB50
l000000000044AB50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r8 = rsp + 0x2F<64>
	rbx = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx:word64] = rax
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call fn0000000000448EB0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AB50_exit
fn000000000044AB50_exit:


// fn000000000044AB80
// Return size: 8
define fn000000000044AB80
fn000000000044AB80_entry:
	rsp = fp
	// succ:  l000000000044AB80
l000000000044AB80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbx = rdx
	rsi = rcx
	rdx = 0xFFFFFFFFFFFFFFFE<64>
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000044ABAE
	// succ:  l000000000044AB98 l000000000044ABAE
l000000000044AB98:
	rcx = rbx
	Mem0[rsp + 0x28<64>:word64] = r8
	eax = wcslen(rcx)
	r8 = Mem0[rsp + 0x28<64>:word64]
	rdx = rbx + rax * 2<64>
	// succ:  l000000000044ABAE
l000000000044ABAE:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rcx = rbx
	call fn0000000000448F90 (retsize: 8;)
	Mem0[rsi:word64] = rax
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AB80_exit
fn000000000044AB80_exit:


// fn000000000044ABD0
// Return size: 8
define fn000000000044ABD0
fn000000000044ABD0_entry:
	rsp = fp
	// succ:  l000000000044ABD0
l000000000044ABD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rax = rdx
	rcx = r9
	rdx = rdx + r8 * 2<64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rcx
	rcx = rax
	call fn0000000000448F90 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044ABD0_exit
fn000000000044ABD0_exit:


// fn000000000044AC00
// Return size: 8
define fn000000000044AC00
fn000000000044AC00_entry:
	rsp = fp
	// succ:  l000000000044AC00
l000000000044AC00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	r8 = rdx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn0000000000448EB0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AC00_exit
fn000000000044AC00_exit:


// fn000000000044AC20
// Return size: 8
define fn000000000044AC20
fn000000000044AC20_entry:
	rsp = fp
	// succ:  l000000000044AC20
l000000000044AC20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l000000000044AC40
	// succ:  l000000000044AC32 l000000000044AC40
l000000000044AC32:
	__lock()
	v12 = Mem0[rax - 8<64>:word32] + 1<32>
	Mem0[rax - 8<64>:word32] = v12
	SCZO = cond(v12)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AC20_exit
l000000000044AC40:
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000449420 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AC20_exit
fn000000000044AC20_exit:


// fn000000000044AC60
// Return size: 8
define fn000000000044AC60
fn000000000044AC60_entry:
	rsp = fp
	// succ:  l000000000044AC60
l000000000044AC60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	r10 = Mem0[rdx:word64]
	rbx = rcx
	r11 = Mem0[r10 - 0x18<64>:word64]
	rax = r11
	rax = rax - r8
	SCZO = cond(rax)
	SCZO = cond(rax - r9)
	branch Test(ULE,CZ) l000000000044AC7C
	// succ:  l000000000044AC78_1 l000000000044AC7C
l000000000044AC78_1:
	rax = r9
	// succ:  l000000000044AC7C
l000000000044AC7C:
	rax = rax + r8
	SCZO = cond(rax)
	SCZO = cond(r8 - r11)
	rdx = r10 + rax * 2<64>
	branch Test(UGT,CZ) l000000000044ACA2
	// succ:  l000000000044AC88 l000000000044ACA2
l000000000044AC88:
	rcx = r10 + r8 * 2<64>
	r8 = rsp + 0x2F<64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000449090 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AC60_exit
l000000000044ACA2:
	rdx = 0x000000000048DAF2<p64>
	rcx = 0x000000000048D970<p64>
	r9 = r11
	call fn0000000000471560 (retsize: 8;)
	// succ:  l000000000044ACBF_thunk_fn000000000044ACC0
l000000000044ACBF_thunk_fn000000000044ACC0:
	call fn000000000044ACC0 (retsize: 0;)
	return
	// succ:  fn000000000044AC60_exit
fn000000000044AC60_exit:


// fn000000000044ACC0
// Return size: 8
define fn000000000044ACC0
fn000000000044ACC0_entry:
	rsp = fp
	// succ:  l000000000044ACC0
l000000000044ACC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r10 = Mem0[rdx:word64]
	rbx = rcx
	r11 = Mem0[r10 - 0x18<64>:word64]
	rax = r11
	rax = rax - r8
	SCZO = cond(rax)
	SCZO = cond(rax - r9)
	branch Test(ULE,CZ) l000000000044ACDC
	// succ:  l000000000044ACD8_1 l000000000044ACDC
l000000000044ACD8_1:
	rax = r9
	// succ:  l000000000044ACDC
l000000000044ACDC:
	rax = rax + r8
	SCZO = cond(rax)
	SCZO = cond(r8 - r11)
	rdx = r10 + rax * 2<64>
	branch Test(UGT,CZ) l000000000044AD02
	// succ:  l000000000044ACE8 l000000000044AD02
l000000000044ACE8:
	rcx = r10 + r8 * 2<64>
	r8 = Mem0[rsp + 0x50<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000449090 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044ACC0_exit
l000000000044AD02:
	rdx = 0x000000000048DAF2<p64>
	rcx = 0x000000000048D970<p64>
	r9 = r11
	call fn0000000000471560 (retsize: 8;)
	// succ:  l000000000044AD1F_thunk_fn000000000044AD20
l000000000044AD1F_thunk_fn000000000044AD20:
	call fn000000000044AD20 (retsize: 0;)
	return
	// succ:  fn000000000044ACC0_exit
fn000000000044ACC0_exit:


// fn000000000044AD20
// Return size: 8
define fn000000000044AD20
fn000000000044AD20_entry:
	rsp = fp
	// succ:  l000000000044AD20
l000000000044AD20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rbx = rcx
	rcx = Mem0[rdx:word64]
	rdx = Mem0[rdx + 8<64>:word64]
	rdx = rcx + rdx * 2<64>
	call fn0000000000448F90 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AD20_exit
fn000000000044AD20_exit:


// fn000000000044AD50
// Return size: 8
define fn000000000044AD50
fn000000000044AD50_entry:
	rsp = fp
	// succ:  l000000000044AD50
l000000000044AD50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = rsp + 0x2F<64>
	rbx = rcx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call fn0000000000448EB0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AD50_exit
fn000000000044AD50_exit:


// fn000000000044AD70
// Return size: 8
define fn000000000044AD70
fn000000000044AD70_entry:
	rsp = fp
	// succ:  l000000000044AD70
l000000000044AD70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	edx = CONVERT(r8w, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8 = r9
	call fn0000000000448EB0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AD70_exit
fn000000000044AD70_exit:


// fn000000000044AD90
// Return size: 8
define fn000000000044AD90
fn000000000044AD90_entry:
	rsp = fp
	// succ:  l000000000044AD90
l000000000044AD90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	rdx = r8
	r8 = r9
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000448F20 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AD90_exit
fn000000000044AD90_exit:


// fn000000000044ADC0
// Return size: 8
define fn000000000044ADC0
fn000000000044ADC0_entry:
	rsp = fp
	// succ:  l000000000044ADC0
l000000000044ADC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	rdx = r8
	r8 = r9
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000448F90 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044ADC0_exit
fn000000000044ADC0_exit:


// fn000000000044ADF0
// Return size: 8
define fn000000000044ADF0
fn000000000044ADF0_entry:
	rsp = fp
	// succ:  l000000000044ADF0
l000000000044ADF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	rdx = r8
	r8 = r9
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000449090 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044ADF0_exit
fn000000000044ADF0_exit:


// fn000000000044AE20
// Return size: 8
define fn000000000044AE20
fn000000000044AE20_entry:
	rsp = fp
	// succ:  l000000000044AE20
l000000000044AE20:
	rcx = Mem0[rcx:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000044AE33
	// succ:  l000000000044AE31 l000000000044AE33
l000000000044AE31:
	return
	// succ:  fn000000000044AE20_exit
l000000000044AE33:
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	// succ:  l000000000044AE37_thunk_fn0000000000475550
l000000000044AE37_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000044AE20_exit
fn000000000044AE20_exit:


// fn000000000044AE40
// Return size: 8
define fn000000000044AE40
fn000000000044AE40_entry:
	rsp = fp
	// succ:  l000000000044AE40
l000000000044AE40:
	rcx = Mem0[rcx:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000044AE53
	// succ:  l000000000044AE51 l000000000044AE53
l000000000044AE51:
	return
	// succ:  fn000000000044AE40_exit
l000000000044AE53:
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	// succ:  l000000000044AE57_thunk_fn0000000000475550
l000000000044AE57_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000044AE40_exit
fn000000000044AE40_exit:


// fn000000000044AE60
// Return size: 8
define fn000000000044AE60
fn000000000044AE60_entry:
	rsp = fp
	// succ:  l000000000044AE60
l000000000044AE60:
	r8 = Mem0[rcx:word64]
	rax = rcx
	r10d = Mem0[r8 - 8<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d & r10d)
	C = false
	branch Test(SG,S) l000000000044AE90
	// succ:  l000000000044AE6F l000000000044AE90
l000000000044AE6F:
	rcx = Mem0[rdx:word64]
	r9d = Mem0[rcx - 8<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NS,S) l000000000044AE82
	// succ:  l000000000044AE7B l000000000044AE82
l000000000044AE7B:
	Mem0[rcx - 8<64>:word32] = 0<32>
	// succ:  l000000000044AE82
l000000000044AE82:
	Mem0[rax:word64] = rcx
	Mem0[rdx:word64] = r8
	return
	// succ:  fn000000000044AE60_exit
l000000000044AE90:
	Mem0[r8 - 8<64>:word32] = 0<32>
	goto l000000000044AE6F
	// succ:  l000000000044AE6F
fn000000000044AE60_exit:


// fn000000000044AEA0
// Return size: 8
define fn000000000044AEA0
fn000000000044AEA0_entry:
	rsp = fp
	// succ:  l000000000044AEA0
l000000000044AEA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx
	rbx = rdx
	rcx = rdx
	eax = wcslen(rcx)
	rdx = rbx
	r8 = rax
	rcx = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000044AEC3_thunk_fn0000000000449B10
l000000000044AEC3_thunk_fn0000000000449B10:
	call fn0000000000449B10 (retsize: 0;)
	return
	// succ:  fn000000000044AEA0_exit
fn000000000044AEA0_exit:


// fn000000000044AED0
// Return size: 0
define fn000000000044AED0
fn000000000044AED0_entry:
	rsp = fp
	// succ:  l000000000044AED0
l000000000044AED0:
	// succ:  l000000000044AED0_thunk_fn0000000000449C00
l000000000044AED0_thunk_fn0000000000449C00:
	call fn0000000000449C00 (retsize: 0;)
	return
	// succ:  fn000000000044AED0_exit
fn000000000044AED0_exit:


// fn000000000044AEE0
// Return size: 8
define fn000000000044AEE0
fn000000000044AEE0_entry:
	rsp = fp
	// succ:  l000000000044AEE0
l000000000044AEE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = rdx
	rdx = Mem0[rdx:word64]
	rbx = rcx
	r8 = Mem0[rax + 8<64>:word64]
	call fn0000000000449B10 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AEE0_exit
fn000000000044AEE0_exit:


// fn000000000044AF00
// Return size: 8
define fn000000000044AF00
fn000000000044AF00_entry:
	rsp = fp
	// succ:  l000000000044AF00
l000000000044AF00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	edx = CONVERT(dx, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	rbx = rcx
	r8 = Mem0[rax - 0x18<64>:word64]
	Mem0[rsp + 0x20<64>:word32] = edx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn00000000004491E0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AF00_exit
fn000000000044AF00_exit:


// fn000000000044AF30
// Return size: 8
define fn000000000044AF30
fn000000000044AF30_entry:
	rsp = fp
	// succ:  l000000000044AF30
l000000000044AF30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rsi = rdx
	rbx = rcx
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l000000000044AF4E
	// succ:  l000000000044AF46 l000000000044AF4E
l000000000044AF46:
	call fn0000000000448E80 (retsize: 8;)
	rax = Mem0[rbx:word64]
	// succ:  l000000000044AF4E
l000000000044AF4E:
	rax = rax + rsi * 2<64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AF30_exit
fn000000000044AF30_exit:


// fn000000000044AF60
// Return size: 8
define fn000000000044AF60
fn000000000044AF60_entry:
	rsp = fp
	// succ:  l000000000044AF60
l000000000044AF60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	rsi = rdx
	eax = wcslen(rcx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044AF87
	// succ:  l000000000044AF79 l000000000044AF87
l000000000044AF79:
	r8 = rax
	rdx = rsi
	rcx = rbx
	call fn0000000000449760 (retsize: 8;)
	// succ:  l000000000044AF87
l000000000044AF87:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AF60_exit
fn000000000044AF60_exit:


// fn000000000044AFA0
// Return size: 8
define fn000000000044AFA0
fn000000000044AFA0_entry:
	rsp = fp
	// succ:  l000000000044AFA0
l000000000044AFA0:
	// succ:  l000000000044AFA0_thunk_fn0000000000449840
l000000000044AFA0_thunk_fn0000000000449840:
	call fn0000000000449840 (retsize: 0;)
	return
	// succ:  fn000000000044AFA0_exit
fn000000000044AFA0_exit:


// fn000000000044AFB0
// Return size: 8
define fn000000000044AFB0
fn000000000044AFB0_entry:
	rsp = fp
	// succ:  l000000000044AFB0
l000000000044AFB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r8 = Mem0[rdx + 8<64>:word64]
	rax = Mem0[rdx:word64]
	rbx = rcx
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l000000000044AFCC
	// succ:  l000000000044AFC4 l000000000044AFCC
l000000000044AFC4:
	rdx = rax
	call fn0000000000449760 (retsize: 8;)
	// succ:  l000000000044AFCC
l000000000044AFCC:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AFB0_exit
fn000000000044AFB0_exit:


// fn000000000044AFE0
// Return size: 8
define fn000000000044AFE0
fn000000000044AFE0_entry:
	rsp = fp
	// succ:  l000000000044AFE0
l000000000044AFE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r8 = Mem0[rcx:word64]
	rsi = rcx
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	rax = Mem0[r8 - 0x18<64>:word64]
	rbx = rax + 1<64>
	SCZO = cond(rbx - Mem0[r8 - 0x10<64>:word64])
	branch Test(UGT,CZ) l000000000044B005
	// succ:  l000000000044AFFD l000000000044B005
l000000000044AFFD:
	edx = Mem0[r8 - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l000000000044B017
	// succ:  l000000000044B005 l000000000044B017
l000000000044B005:
	rdx = rbx
	rcx = rsi
	call fn000000000044A5D0 (retsize: 8;)
	r8 = Mem0[rsi:word64]
	rax = Mem0[r8 - 0x18<64>:word64]
	// succ:  l000000000044B017
l000000000044B017:
	Mem0[r8 + rax * 2<64>:word16] = di
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[r8 - 8<64>:word32] = 0<32>
	Mem0[r8 - 0x18<64>:word64] = rbx
	Mem0[r8 + rbx * 2<64>:word16] = ax
	rax = rsi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044AFE0_exit
fn000000000044AFE0_exit:


// fn000000000044B040
// Return size: 8
define fn000000000044B040
fn000000000044B040_entry:
	rsp = fp
	// succ:  l000000000044B040
l000000000044B040:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0x18<64>
	rbx = rcx
	rdi = rdx
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	rax = 0x00000000004928D8<p64>
	Mem0[rbx + 0xF0<64>:word64] = 0<64>
	Mem0[rbx + 0xF8<64>:byte] = 0<8>
	Mem0[rbx + 0xF9<64>:byte] = 0<8>
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	rdx = rdi
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492900<p64>
	Mem0[rbx + 0x108<64>:word64] = 0<64>
	Mem0[rbx + 0x110<64>:word64] = 0<64>
	Mem0[rbx + 0x118<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0x18<64>:word64] = rax
	Mem0[rbx + 8<64>:word64] = 0<64>
	call fn000000000046E310 (retsize: 8;)
	rax = 0x0000000000492958<p64>
	rdx = rdi
	rcx = rsi
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = 0x0000000000492980<p64>
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	rax = 0x0000000000495FD8<p64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496028<p64>
	Mem0[rbx + 0x18<64>:word64] = rax
	rax = 0x0000000000496000<p64>
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044B040_exit
fn000000000044B040_exit:


// fn000000000044B140
// Return size: 8
define fn000000000044B140
fn000000000044B140_entry:
	rsp = fp
	// succ:  l000000000044B140
l000000000044B140:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0x18<64>
	rbx = rcx
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	rax = 0x00000000004928D8<p64>
	Mem0[rbx + 0xF0<64>:word64] = 0<64>
	Mem0[rbx + 0xF8<64>:byte] = 0<8>
	Mem0[rbx + 0xF9<64>:byte] = 0<8>
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492900<p64>
	Mem0[rbx + 0x108<64>:word64] = 0<64>
	Mem0[rbx + 0x110<64>:word64] = 0<64>
	Mem0[rbx + 0x118<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0x18<64>:word64] = rax
	Mem0[rbx + 8<64>:word64] = 0<64>
	call fn000000000046E310 (retsize: 8;)
	rax = 0x0000000000492958<p64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rsi
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = 0x0000000000492980<p64>
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	rax = 0x0000000000495FD8<p64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496028<p64>
	Mem0[rbx + 0x18<64>:word64] = rax
	rax = 0x0000000000496000<p64>
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044B140_exit
fn000000000044B140_exit:


// fn000000000044B230
// Return size: 8
define fn000000000044B230
fn000000000044B230_entry:
	rsp = fp
	// succ:  l000000000044B230
l000000000044B230:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 8<64>:word64]
	rbx = rcx
	rsi = rdx
	rdi = r8
	Mem0[rcx:word64] = rax
	rcx = Mem0[rdx + 0x10<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rbx + rdx:word64] = rcx
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	rdx = r8
	call fn000000000046E310 (retsize: 8;)
	rax = Mem0[rsi + 0x18<64>:word64]
	rdx = rdi
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = rbx + 0x10<64> + rax
	rax = Mem0[rsi + 0x20<64>:word64]
	Mem0[rcx:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	rax = Mem0[rsi:word64]
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x28<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rax = Mem0[rsi + 0x30<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044B230_exit
fn000000000044B230_exit:


// fn000000000044B2D0
// Return size: 8
define fn000000000044B2D0
fn000000000044B2D0_entry:
	rsp = fp
	// succ:  l000000000044B2D0
l000000000044B2D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 8<64>:word64]
	rbx = rcx
	rsi = rdx
	Mem0[rcx:word64] = rax
	rcx = Mem0[rdx + 0x10<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rbx + rdx:word64] = rcx
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E310 (retsize: 8;)
	rax = Mem0[rsi + 0x18<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = rbx + 0x10<64> + rax
	rax = Mem0[rsi + 0x20<64>:word64]
	Mem0[rcx:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	rax = Mem0[rsi:word64]
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x28<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rax = Mem0[rsi + 0x30<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044B2D0_exit
fn000000000044B2D0_exit:


// fn000000000044B370
// Return size: 0
define fn000000000044B370
fn000000000044B370_entry:
	rsp = fp
	// succ:  l000000000044B370
l000000000044B370:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491E20<p64>:word64]
	rbx = rcx
	rcx = rcx + 0x18<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	call fn000000000046D3D0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000044B397_thunk_fn0000000000475550
l000000000044B397_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000044B370_exit
fn000000000044B370_exit:


// fn000000000044B3A0
// Return size: 0
define fn000000000044B3A0
fn000000000044B3A0_entry:
	rsp = fp
	// succ:  l000000000044B3A0
l000000000044B3A0:
	rax = Mem0[0x0000000000491E20<p64>:word64]
	rcx = rcx + 0x18<64>
	SCZO = cond(rcx)
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	// succ:  l000000000044B3B2_thunk_fn000000000046D3D0
l000000000044B3B2_thunk_fn000000000046D3D0:
	call fn000000000046D3D0 (retsize: 0;)
	return
	// succ:  fn000000000044B3A0_exit
fn000000000044B3A0_exit:


// fn000000000044B3C0
// Return size: 8
define fn000000000044B3C0
fn000000000044B3C0_entry:
	rsp = fp
	// succ:  l000000000044B3C0
l000000000044B3C0:
	rax = Mem0[rdx:word64]
	Mem0[rcx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	r8 = Mem0[rdx + 0x28<64>:word64]
	Mem0[rcx + rax:word64] = r8
	rax = Mem0[rdx + 0x30<64>:word64]
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = Mem0[rdx + 0x18<64>:word64]
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	r8 = Mem0[rdx + 0x20<64>:word64]
	Mem0[rcx + 0x10<64> + rax:word64] = r8
	rax = Mem0[rdx + 8<64>:word64]
	Mem0[rcx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rdx + 0x10<64>:word64]
	Mem0[rcx + rax:word64] = rdx
	return
	// succ:  fn000000000044B3C0_exit
fn000000000044B3C0_exit:


// fn000000000044B410
// Return size: 0
define fn000000000044B410
fn000000000044B410_entry:
	rsp = fp
	// succ:  l000000000044B410
l000000000044B410:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044B4B2
	// succ:  l000000000044B436 l000000000044B4B2
l000000000044B436:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044B4DF
	// succ:  l000000000044B458 l000000000044B4DF
l000000000044B458:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x58<64>:word64] = r9
	Mem0[rsp + 0x48<64>:word64] = r9
	rcx = rsp + 0x60<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x60<64>:word64] (retsize: 8;)
	// succ:  l000000000044B4AA
l000000000044B4AA:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000044B4C0
	// succ:  l000000000044B4B2 l000000000044B4C0
l000000000044B4B2:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044B410_exit
l000000000044B4C0:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044B410_exit
l000000000044B4DF:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044B508
	// succ:  l000000000044B4ED l000000000044B508
l000000000044B4ED:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v18 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044B538
	// succ:  l000000000044B503 l000000000044B538
l000000000044B503:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044B508
l000000000044B508:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v19 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v19
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044B53D
	// succ:  l000000000044B521 l000000000044B53D
l000000000044B521:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044B4AA
	// succ:  l000000000044B4AA
l000000000044B538:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044B53D
l000000000044B53D:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000044B55F_thunk_fn000000000044B560
l000000000044B55F_thunk_fn000000000044B560:
	call fn000000000044B560 (retsize: 0;)
	return
	// succ:  fn000000000044B410_exit
fn000000000044B410_exit:


// fn000000000044B560
// Return size: 0
define fn000000000044B560
fn000000000044B560_entry:
	rsp = fp
	// succ:  l000000000044B560
l000000000044B560:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044B602
	// succ:  l000000000044B586 l000000000044B602
l000000000044B586:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044B62F
	// succ:  l000000000044B5A8 l000000000044B62F
l000000000044B5A8:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x58<64>:word64] = r9
	Mem0[rsp + 0x48<64>:word64] = r9
	rcx = rsp + 0x60<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x10<64>:word64] (retsize: 8;)
	// succ:  l000000000044B5FA
l000000000044B5FA:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000044B610
	// succ:  l000000000044B602 l000000000044B610
l000000000044B602:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044B560_exit
l000000000044B610:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044B560_exit
l000000000044B62F:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044B658
	// succ:  l000000000044B63D l000000000044B658
l000000000044B63D:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v18 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044B688
	// succ:  l000000000044B653 l000000000044B688
l000000000044B653:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044B658
l000000000044B658:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v19 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v19
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044B68D
	// succ:  l000000000044B671 l000000000044B68D
l000000000044B671:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044B5FA
	// succ:  l000000000044B5FA
l000000000044B688:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044B68D
l000000000044B68D:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000044B6AF_thunk_fn000000000044B6B0
l000000000044B6AF_thunk_fn000000000044B6B0:
	call fn000000000044B6B0 (retsize: 0;)
	return
	// succ:  fn000000000044B560_exit
fn000000000044B560_exit:


// fn000000000044B6B0
// Return size: 0
define fn000000000044B6B0
fn000000000044B6B0_entry:
	rsp = fp
	// succ:  l000000000044B6B0
l000000000044B6B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044B752
	// succ:  l000000000044B6D6 l000000000044B752
l000000000044B6D6:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044B77F
	// succ:  l000000000044B6F8 l000000000044B77F
l000000000044B6F8:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x58<64>:word64] = r9
	Mem0[rsp + 0x48<64>:word64] = r9
	rcx = rsp + 0x60<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x50<64>:word64] (retsize: 8;)
	// succ:  l000000000044B74A
l000000000044B74A:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000044B760
	// succ:  l000000000044B752 l000000000044B760
l000000000044B752:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044B6B0_exit
l000000000044B760:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044B6B0_exit
l000000000044B77F:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044B7A8
	// succ:  l000000000044B78D l000000000044B7A8
l000000000044B78D:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v18 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044B7D8
	// succ:  l000000000044B7A3 l000000000044B7D8
l000000000044B7A3:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044B7A8
l000000000044B7A8:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v19 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v19
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044B7DD
	// succ:  l000000000044B7C1 l000000000044B7DD
l000000000044B7C1:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044B74A
	// succ:  l000000000044B74A
l000000000044B7D8:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044B7DD
l000000000044B7DD:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000044B7FF_thunk_fn000000000044B800
l000000000044B7FF_thunk_fn000000000044B800:
	call fn000000000044B800 (retsize: 0;)
	return
	// succ:  fn000000000044B6B0_exit
fn000000000044B6B0_exit:


// fn000000000044B800
// Return size: 0
define fn000000000044B800
fn000000000044B800_entry:
	rsp = fp
	// succ:  l000000000044B800
l000000000044B800:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044B8A2
	// succ:  l000000000044B826 l000000000044B8A2
l000000000044B826:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044B8CF
	// succ:  l000000000044B848 l000000000044B8CF
l000000000044B848:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x58<64>:word64] = r9
	Mem0[rsp + 0x48<64>:word64] = r9
	rcx = rsp + 0x60<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x58<64>:word64] (retsize: 8;)
	// succ:  l000000000044B89A
l000000000044B89A:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000044B8B0
	// succ:  l000000000044B8A2 l000000000044B8B0
l000000000044B8A2:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044B800_exit
l000000000044B8B0:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044B800_exit
l000000000044B8CF:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044B8F8
	// succ:  l000000000044B8DD l000000000044B8F8
l000000000044B8DD:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v18 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044B928
	// succ:  l000000000044B8F3 l000000000044B928
l000000000044B8F3:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044B8F8
l000000000044B8F8:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v19 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v19
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044B92D
	// succ:  l000000000044B911 l000000000044B92D
l000000000044B911:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044B89A
	// succ:  l000000000044B89A
l000000000044B928:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044B92D
l000000000044B92D:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000044B94F_thunk_fn000000000044B950
l000000000044B94F_thunk_fn000000000044B950:
	call fn000000000044B950 (retsize: 0;)
	return
	// succ:  fn000000000044B800_exit
fn000000000044B800_exit:


// fn000000000044B950
// Return size: 0
define fn000000000044B950
fn000000000044B950_entry:
	rsp = fp
	// succ:  l000000000044B950
l000000000044B950:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044B9F2
	// succ:  l000000000044B976 l000000000044B9F2
l000000000044B976:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044BA1F
	// succ:  l000000000044B998 l000000000044BA1F
l000000000044B998:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x58<64>:word64] = r9
	Mem0[rsp + 0x48<64>:word64] = r9
	rcx = rsp + 0x60<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x48<64>:word64] (retsize: 8;)
	// succ:  l000000000044B9EA
l000000000044B9EA:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000044BA00
	// succ:  l000000000044B9F2 l000000000044BA00
l000000000044B9F2:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044B950_exit
l000000000044BA00:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044B950_exit
l000000000044BA1F:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044BA48
	// succ:  l000000000044BA2D l000000000044BA48
l000000000044BA2D:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v18 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044BA78
	// succ:  l000000000044BA43 l000000000044BA78
l000000000044BA43:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044BA48
l000000000044BA48:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v19 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v19
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044BA7D
	// succ:  l000000000044BA61 l000000000044BA7D
l000000000044BA61:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044B9EA
	// succ:  l000000000044B9EA
l000000000044BA78:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044BA7D
l000000000044BA7D:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000044BA9F_thunk_fn000000000044BAA0
l000000000044BA9F_thunk_fn000000000044BAA0:
	call fn000000000044BAA0 (retsize: 0;)
	return
	// succ:  fn000000000044B950_exit
fn000000000044B950_exit:


// fn000000000044BAA0
// Return size: 0
define fn000000000044BAA0
fn000000000044BAA0_entry:
	rsp = fp
	// succ:  l000000000044BAA0
l000000000044BAA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044BB42
	// succ:  l000000000044BAC6 l000000000044BB42
l000000000044BAC6:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044BB6F
	// succ:  l000000000044BAE8 l000000000044BB6F
l000000000044BAE8:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x58<64>:word64] = r9
	Mem0[rsp + 0x48<64>:word64] = r9
	rcx = rsp + 0x60<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x28<64>:word64] (retsize: 8;)
	// succ:  l000000000044BB3A
l000000000044BB3A:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000044BB50
	// succ:  l000000000044BB42 l000000000044BB50
l000000000044BB42:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044BAA0_exit
l000000000044BB50:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044BAA0_exit
l000000000044BB6F:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044BB98
	// succ:  l000000000044BB7D l000000000044BB98
l000000000044BB7D:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v18 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044BBC8
	// succ:  l000000000044BB93 l000000000044BBC8
l000000000044BB93:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044BB98
l000000000044BB98:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v19 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v19
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044BBCD
	// succ:  l000000000044BBB1 l000000000044BBCD
l000000000044BBB1:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044BB3A
	// succ:  l000000000044BB3A
l000000000044BBC8:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044BBCD
l000000000044BBCD:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000044BBEF_thunk_fn000000000044BBF0
l000000000044BBEF_thunk_fn000000000044BBF0:
	call fn000000000044BBF0 (retsize: 0;)
	return
	// succ:  fn000000000044BAA0_exit
fn000000000044BAA0_exit:


// fn000000000044BBF0
// Return size: 0
define fn000000000044BBF0
fn000000000044BBF0_entry:
	rsp = fp
	// succ:  l000000000044BBF0
l000000000044BBF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044BC92
	// succ:  l000000000044BC16 l000000000044BC92
l000000000044BC16:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044BCBF
	// succ:  l000000000044BC38 l000000000044BCBF
l000000000044BC38:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x58<64>:word64] = r9
	Mem0[rsp + 0x48<64>:word64] = r9
	rcx = rsp + 0x60<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x18<64>:word64] (retsize: 8;)
	// succ:  l000000000044BC8A
l000000000044BC8A:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000044BCA0
	// succ:  l000000000044BC92 l000000000044BCA0
l000000000044BC92:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044BBF0_exit
l000000000044BCA0:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044BBF0_exit
l000000000044BCBF:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044BCE8
	// succ:  l000000000044BCCD l000000000044BCE8
l000000000044BCCD:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v18 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044BD18
	// succ:  l000000000044BCE3 l000000000044BD18
l000000000044BCE3:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044BCE8
l000000000044BCE8:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v19 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v19
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044BD1D
	// succ:  l000000000044BD01 l000000000044BD1D
l000000000044BD01:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044BC8A
	// succ:  l000000000044BC8A
l000000000044BD18:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044BD1D
l000000000044BD1D:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000044BD3F_thunk_fn000000000044BD40
l000000000044BD3F_thunk_fn000000000044BD40:
	call fn000000000044BD40 (retsize: 0;)
	return
	// succ:  fn000000000044BBF0_exit
fn000000000044BBF0_exit:


// fn000000000044BD40
// Return size: 0
define fn000000000044BD40
fn000000000044BD40_entry:
	rsp = fp
	// succ:  l000000000044BD40
l000000000044BD40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044BDE2
	// succ:  l000000000044BD66 l000000000044BDE2
l000000000044BD66:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044BE0F
	// succ:  l000000000044BD88 l000000000044BE0F
l000000000044BD88:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x58<64>:word64] = r9
	Mem0[rsp + 0x48<64>:word64] = r9
	rcx = rsp + 0x60<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x30<64>:word64] (retsize: 8;)
	// succ:  l000000000044BDDA
l000000000044BDDA:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000044BDF0
	// succ:  l000000000044BDE2 l000000000044BDF0
l000000000044BDE2:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044BD40_exit
l000000000044BDF0:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044BD40_exit
l000000000044BE0F:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044BE38
	// succ:  l000000000044BE1D l000000000044BE38
l000000000044BE1D:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v18 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044BE68
	// succ:  l000000000044BE33 l000000000044BE68
l000000000044BE33:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044BE38
l000000000044BE38:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v19 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v19
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044BE6D
	// succ:  l000000000044BE51 l000000000044BE6D
l000000000044BE51:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044BDDA
	// succ:  l000000000044BDDA
l000000000044BE68:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044BE6D
l000000000044BE6D:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000044BE8F_thunk_fn000000000044BE90
l000000000044BE8F_thunk_fn000000000044BE90:
	call fn000000000044BE90 (retsize: 0;)
	return
	// succ:  fn000000000044BD40_exit
fn000000000044BD40_exit:


// fn000000000044BE90
// Return size: 0
define fn000000000044BE90
fn000000000044BE90_entry:
	rsp = fp
	// succ:  l000000000044BE90
l000000000044BE90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044BF32
	// succ:  l000000000044BEB6 l000000000044BF32
l000000000044BEB6:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044BF5F
	// succ:  l000000000044BED8 l000000000044BF5F
l000000000044BED8:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x58<64>:word64] = r9
	Mem0[rsp + 0x48<64>:word64] = r9
	rcx = rsp + 0x60<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x20<64>:word64] (retsize: 8;)
	// succ:  l000000000044BF2A
l000000000044BF2A:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000044BF40
	// succ:  l000000000044BF32 l000000000044BF40
l000000000044BF32:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044BE90_exit
l000000000044BF40:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044BE90_exit
l000000000044BF5F:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044BF88
	// succ:  l000000000044BF6D l000000000044BF88
l000000000044BF6D:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v18 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044BFB8
	// succ:  l000000000044BF83 l000000000044BFB8
l000000000044BF83:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044BF88
l000000000044BF88:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v19 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v19
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044BFBD
	// succ:  l000000000044BFA1 l000000000044BFBD
l000000000044BFA1:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044BF2A
	// succ:  l000000000044BF2A
l000000000044BFB8:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044BFBD
l000000000044BFBD:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000044BFDF_thunk_fn000000000044BFE0
l000000000044BFDF_thunk_fn000000000044BFE0:
	call fn000000000044BFE0 (retsize: 0;)
	return
	// succ:  fn000000000044BE90_exit
fn000000000044BE90_exit:


// fn000000000044BFE0
// Return size: 0
define fn000000000044BFE0
fn000000000044BFE0_entry:
	rsp = fp
	// succ:  l000000000044BFE0
l000000000044BFE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044C082
	// succ:  l000000000044C006 l000000000044C082
l000000000044C006:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044C0AF
	// succ:  l000000000044C028 l000000000044C0AF
l000000000044C028:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x58<64>:word64] = r9
	Mem0[rsp + 0x48<64>:word64] = r9
	rcx = rsp + 0x60<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x38<64>:word64] (retsize: 8;)
	// succ:  l000000000044C07A
l000000000044C07A:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000044C090
	// succ:  l000000000044C082 l000000000044C090
l000000000044C082:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044BFE0_exit
l000000000044C090:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044BFE0_exit
l000000000044C0AF:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044C0D8
	// succ:  l000000000044C0BD l000000000044C0D8
l000000000044C0BD:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v18 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044C108
	// succ:  l000000000044C0D3 l000000000044C108
l000000000044C0D3:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044C0D8
l000000000044C0D8:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v19 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v19
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044C10D
	// succ:  l000000000044C0F1 l000000000044C10D
l000000000044C0F1:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044C07A
	// succ:  l000000000044C07A
l000000000044C108:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044C10D
l000000000044C10D:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000044C12F_thunk_fn000000000044C130
l000000000044C12F_thunk_fn000000000044C130:
	call fn000000000044C130 (retsize: 0;)
	return
	// succ:  fn000000000044BFE0_exit
fn000000000044BFE0_exit:


// fn000000000044C130
// Return size: 0
define fn000000000044C130
fn000000000044C130_entry:
	rsp = fp
	// succ:  l000000000044C130
l000000000044C130:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044C1D2
	// succ:  l000000000044C156 l000000000044C1D2
l000000000044C156:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044C1FF
	// succ:  l000000000044C178 l000000000044C1FF
l000000000044C178:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x58<64>:word64] = r9
	Mem0[rsp + 0x48<64>:word64] = r9
	rcx = rsp + 0x60<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x40<64>:word64] (retsize: 8;)
	// succ:  l000000000044C1CA
l000000000044C1CA:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000044C1E0
	// succ:  l000000000044C1D2 l000000000044C1E0
l000000000044C1D2:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044C130_exit
l000000000044C1E0:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044C130_exit
l000000000044C1FF:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044C228
	// succ:  l000000000044C20D l000000000044C228
l000000000044C20D:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v18 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044C258
	// succ:  l000000000044C223 l000000000044C258
l000000000044C223:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044C228
l000000000044C228:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v19 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v19
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044C25D
	// succ:  l000000000044C241 l000000000044C25D
l000000000044C241:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044C1CA
	// succ:  l000000000044C1CA
l000000000044C258:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044C25D
l000000000044C25D:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000044C27F_thunk_fn000000000044C280
l000000000044C27F_thunk_fn000000000044C280:
	call fn000000000044C280 (retsize: 0;)
	return
	// succ:  fn000000000044C130_exit
fn000000000044C130_exit:


// fn000000000044C280
// Return size: 8
define fn000000000044C280
fn000000000044C280_entry:
	rsp = fp
	// succ:  l000000000044C280
l000000000044C280:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rsi = rcx
	rdi = rdx
	rax = Mem0[rax - 0x18<64>:word64]
	rbx = Mem0[rcx + 0xF0<64> + rax:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000044C300
	// succ:  l000000000044C2A1 l000000000044C300
l000000000044C2A1:
	SCZO = cond(Mem0[rbx + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044C2C0
	// succ:  l000000000044C2A7 l000000000044C2C0
l000000000044C2A7:
	r9d = CONVERT(Mem0[rbx + 0x43<64>:byte], byte, int32)
	// succ:  l000000000044C2AC
l000000000044C2AC:
	rdx = rdi
	rcx = rsi
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000044C2B9_thunk_fn000000000044C310
l000000000044C2B9_thunk_fn000000000044C310:
	call fn000000000044C310 (retsize: 0;)
	return
	// succ:  fn000000000044C280_exit
l000000000044C2C0:
	rcx = rbx
	Mem0[rsp + 0x28<64>:word64] = r8
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rdx = 0x000000000042B5F0<p64>
	r9d = 0xA<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8 = Mem0[rsp + 0x28<64>:word64]
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(EQ,Z) l000000000044C2AC
	// succ:  l000000000044C2EB l000000000044C2AC
l000000000044C2EB:
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call rax (retsize: 8;)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9d = CONVERT(al, byte, int32)
	goto l000000000044C2AC
	// succ:  l000000000044C2AC
l000000000044C300:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000044C30F_thunk_fn000000000044C310
l000000000044C30F_thunk_fn000000000044C310:
	call fn000000000044C310 (retsize: 0;)
	return
	// succ:  fn000000000044C280_exit
fn000000000044C280_exit:


// fn000000000044C310
// Return size: 8
define fn000000000044C310
fn000000000044C310_entry:
	rsp = fp
	// succ:  l000000000044C310
l000000000044C310:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x2F<64>
	rdi = rdx
	r12 = r8
	rdx = rbx
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	ebp = r9d
	rbp = CONVERT(ebp, word32, uint64)
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044C450
	// succ:  l000000000044C34C l000000000044C450
l000000000044C34C:
	rax = Mem0[rbx:word64]
	ebp = CONVERT(bpl, byte, word32)
	rbp = CONVERT(ebp, word32, uint64)
	rax = Mem0[rax - 0x18<64>:word64]
	rsi = Mem0[rbx + 0xE8<64> + rax:word64]
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000044C3C0
	// succ:  l000000000044C369 l000000000044C3C0
l000000000044C369:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	cl = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(eax - ebp)
	dl = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(cl & dl)
	C = false
	branch Test(NE,Z) l000000000044C3E0
	// succ:  l000000000044C37B l000000000044C3E0
l000000000044C37B:
	// succ:  l000000000044C380
l000000000044C380:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	dl = CONVERT(Test(EQ,Z), bool, int8)
	edx = edx + edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	// succ:  l000000000044C38A
l000000000044C38A:
	SZO = cond(r12 & r12)
	C = false
	branch Test(LE,SZO) l000000000044C392
	// succ:  l000000000044C38F l000000000044C392
l000000000044C38F:
	Mem0[rdi:byte] = 0<8>
	// succ:  l000000000044C392
l000000000044C392:
	SCZO = cond(Mem0[rbx + 8<64>:word64] - 0<64>)
	branch Test(NE,Z) l000000000044C460
	// succ:  l000000000044C39D l000000000044C460
l000000000044C39D:
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l000000000044C3A0
l000000000044C3A0:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044C310_exit
l000000000044C3C0:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	// succ:  l000000000044C3C9
l000000000044C3C9:
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	cl = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(eax - ebp)
	dl = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(cl & dl)
	C = false
	branch Test(EQ,Z) l000000000044C380
	// succ:  l000000000044C3D8 l000000000044C380
l000000000044C3D8:
	// succ:  l000000000044C3E0
l000000000044C3E0:
	rcx = Mem0[rbx + 8<64>:word64]
	rdx = rcx + 1<64>
	SCZO = cond(rdx - r12)
	branch Test(GE,SO) l000000000044C380
	// succ:  l000000000044C3ED l000000000044C380
l000000000044C3ED:
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	Mem0[rdi - 1<64>:byte] = al
	r10 = Mem0[rsi + 0x10<64>:word64]
	rax = Mem0[rsi + 0x18<64>:word64]
	v27 = Mem0[rbx + 8<64>:word64] + 1<64>
	Mem0[rbx + 8<64>:word64] = v27
	SCZO = cond(v27)
	SCZO = cond(r10 - rax)
	branch Test(UGE,C) l000000000044C430
	// succ:  l000000000044C406 l000000000044C430
l000000000044C406:
	r10 = r10 + 1<64>
	SCZO = cond(r10)
	Mem0[rsi + 0x10<64>:word64] = r10
	// succ:  l000000000044C40E
l000000000044C40E:
	SCZO = cond(r10 - rax)
	branch Test(UGE,C) l000000000044C3C0
	// succ:  l000000000044C413 l000000000044C3C0
l000000000044C413:
	eax = CONVERT(Mem0[r10:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	cl = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(eax - ebp)
	dl = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(cl & dl)
	C = false
	branch Test(NE,Z) l000000000044C3E0
	// succ:  l000000000044C426 l000000000044C3E0
l000000000044C426:
	goto l000000000044C380
	// succ:  l000000000044C380
l000000000044C430:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044C3C9
	// succ:  l000000000044C43E l000000000044C3C9
l000000000044C43E:
	r10 = Mem0[rsi + 0x10<64>:word64]
	rax = Mem0[rsi + 0x18<64>:word64]
	goto l000000000044C40E
	// succ:  l000000000044C40E
l000000000044C450:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l000000000044C38A
	// succ:  l000000000044C38A
l000000000044C460:
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000044C3A0
	// succ:  l000000000044C468 l000000000044C3A0
l000000000044C468:
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044C310_exit
fn000000000044C310_exit:


// fn000000000044C4F0
// Return size: 8
define fn000000000044C4F0
fn000000000044C4F0_entry:
	rsp = fp
	// succ:  l000000000044C4F0
l000000000044C4F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rsi = rcx
	rdi = rdx
	rax = Mem0[rax - 0x18<64>:word64]
	rbx = Mem0[rcx + 0xF0<64> + rax:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000044C561
	// succ:  l000000000044C511 l000000000044C561
l000000000044C511:
	SCZO = cond(Mem0[rbx + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044C530
	// succ:  l000000000044C517 l000000000044C530
l000000000044C517:
	r8d = CONVERT(Mem0[rbx + 0x43<64>:byte], byte, int32)
	// succ:  l000000000044C51C
l000000000044C51C:
	rdx = rdi
	rcx = rsi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000044C529_thunk_fn000000000044C570
l000000000044C529_thunk_fn000000000044C570:
	call fn000000000044C570 (retsize: 0;)
	return
	// succ:  fn000000000044C4F0_exit
l000000000044C530:
	rcx = rbx
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rdx = 0x000000000042B5F0<p64>
	r8d = 0xA<32>
	r8 = CONVERT(r8d, word32, uint64)
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(EQ,Z) l000000000044C51C
	// succ:  l000000000044C551 l000000000044C51C
l000000000044C551:
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call rax (retsize: 8;)
	r8d = CONVERT(al, byte, int32)
	goto l000000000044C51C
	// succ:  l000000000044C51C
l000000000044C561:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000044C56F_thunk_fn000000000044C570
l000000000044C56F_thunk_fn000000000044C570:
	call fn000000000044C570 (retsize: 0;)
	return
	// succ:  fn000000000044C4F0_exit
fn000000000044C4F0_exit:


// fn000000000044C570
// Return size: 8
define fn000000000044C570
fn000000000044C570_entry:
	rsp = fp
	// succ:  l000000000044C570
l000000000044C570:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rsi = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x2F<64>
	rdi = rdx
	ebp = r8d
	rbp = CONVERT(ebp, word32, uint64)
	rdx = rsi
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044C665
	// succ:  l000000000044C5A9 l000000000044C665
l000000000044C5A9:
	rax = Mem0[rsi:word64]
	ebp = CONVERT(bpl, byte, word32)
	rbp = CONVERT(ebp, word32, uint64)
	rax = Mem0[rax - 0x18<64>:word64]
	rbx = Mem0[rsi + 0xE8<64> + rax:word64]
	rax = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000044C6F0
	// succ:  l000000000044C5CA l000000000044C6F0
l000000000044C5CA:
	r12d = CONVERT(Mem0[rax:byte], byte, word32)
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(ebp - r12d)
	branch Test(EQ,Z) l000000000044C665
	// succ:  l000000000044C5D7 l000000000044C665
l000000000044C5D7:
	r9d = r12d
	r9 = CONVERT(r9d, word32, uint64)
	// succ:  l000000000044C5E0
l000000000044C5E0:
	rax = Mem0[rdi + 0x28<64>:word64]
	SCZO = cond(rax - Mem0[rdi + 0x30<64>:word64])
	branch Test(UGE,C) l000000000044C6D1
	// succ:  l000000000044C5EE l000000000044C6D1
l000000000044C5EE:
	Mem0[rax:byte] = r9b
	v22 = Mem0[rdi + 0x28<64>:word64] + 1<64>
	Mem0[rdi + 0x28<64>:word64] = v22
	SCZO = cond(v22)
	// succ:  l000000000044C5F6
l000000000044C5F6:
	r9 = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rbx + 0x18<64>:word64]
	v23 = Mem0[rsi + 8<64>:word64] + 1<64>
	Mem0[rsi + 8<64>:word64] = v23
	SCZO = cond(v23)
	SCZO = cond(r9 - rax)
	branch Test(UGE,C) l000000000044C691
	// succ:  l000000000044C60C l000000000044C691
l000000000044C60C:
	r9 = r9 + 1<64>
	SCZO = cond(r9)
	Mem0[rbx + 0x10<64>:word64] = r9
	// succ:  l000000000044C614
l000000000044C614:
	SCZO = cond(r9 - rax)
	branch Test(UGE,C) l000000000044C6B0
	// succ:  l000000000044C61D l000000000044C6B0
l000000000044C61D:
	r12d = CONVERT(Mem0[r9:byte], byte, word32)
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(ebp - r12d)
	r9d = r12d
	r9 = CONVERT(r9d, word32, uint64)
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l000000000044C62A
l000000000044C62A:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000044C5E0
	// succ:  l000000000044C62E l000000000044C5E0
l000000000044C62E:
	SCZO = cond(r12d - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000044C665
	// succ:  l000000000044C634 l000000000044C665
l000000000044C634:
	SCZO = cond(Mem0[rsi + 8<64>:word64] - 1<64>)
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx & 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	goto l000000000044C671
	// succ:  l000000000044C671
l000000000044C665:
	SCZO = cond(Mem0[rsi + 8<64>:word64] - 0<64>)
	branch Test(NE,Z) l000000000044C683
	// succ:  l000000000044C66C l000000000044C683
l000000000044C66C:
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000044C671
l000000000044C671:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	// succ:  l000000000044C683
l000000000044C683:
	rax = rsi
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044C570_exit
l000000000044C691:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044C634
	// succ:  l000000000044C69F l000000000044C634
l000000000044C69F:
	r9 = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rbx + 0x18<64>:word64]
	goto l000000000044C614
	// succ:  l000000000044C614
l000000000044C6B0:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(ebp - eax)
	r12d = eax
	r12 = CONVERT(r12d, word32, uint64)
	dl = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	r9d = r12d
	r9 = CONVERT(r9d, word32, uint64)
	al = CONVERT(Test(NE,Z), bool, int8)
	eax = eax & edx
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000044C62A
	// succ:  l000000000044C62A
l000000000044C6D1:
	rax = Mem0[rdi:word64]
	edx = CONVERT(r9b, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call Mem0[rax + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044C62E
	// succ:  l000000000044C6E7 l000000000044C62E
l000000000044C6E7:
	goto l000000000044C5F6
	// succ:  l000000000044C5F6
l000000000044C6F0:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	r12d = eax
	r12 = CONVERT(r12d, word32, uint64)
	branch Test(EQ,Z) l000000000044C62E
	// succ:  l000000000044C705 l000000000044C62E
l000000000044C705:
	SCZO = cond(ebp - eax)
	branch Test(NE,Z) l000000000044C5D7
	// succ:  l000000000044C70D l000000000044C5D7
l000000000044C70D:
	goto l000000000044C62E
	// succ:  l000000000044C62E
fn000000000044C570_exit:


// fn000000000044C770
// Return size: 8
define fn000000000044C770
fn000000000044C770_entry:
	rsp = fp
	// succ:  l000000000044C770
l000000000044C770:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x2F<64>
	rsi = rdx
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000044C7D0
	// succ:  l000000000044C79E l000000000044C7D0
l000000000044C79E:
	SCZO = cond(Mem0[rbx + 8<64>:word64] - 0<64>)
	branch Test(NE,Z) l000000000044C7BC
	// succ:  l000000000044C7A5 l000000000044C7BC
l000000000044C7A5:
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000044C7AA
l000000000044C7AA:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	// succ:  l000000000044C7BC
l000000000044C7BC:
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044C770_exit
l000000000044C7D0:
	rax = Mem0[rbx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	r8 = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(r8 - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000044C801
	// succ:  l000000000044C7E9 l000000000044C801
l000000000044C7E9:
	eax = CONVERT(Mem0[r8:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	Mem0[rcx + 0x10<64>:word64] = r8
	// succ:  l000000000044C7F5
l000000000044C7F5:
	Mem0[rbx + 8<64>:word64] = 1<64>
	Mem0[rsi:byte] = al
	goto l000000000044C79E
	// succ:  l000000000044C79E
l000000000044C801:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000044C7F5
	// succ:  l000000000044C80C l000000000044C7F5
l000000000044C80C:
	SCZO = cond(Mem0[rbx + 8<64>:word64] - 1<64>)
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx & 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	goto l000000000044C7AA
	// succ:  l000000000044C7AA
fn000000000044C770_exit:


// fn000000000044C890
// Return size: 8
define fn000000000044C890
fn000000000044C890_entry:
	rsp = fp
	// succ:  l000000000044C890
l000000000044C890:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x2F<64>
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044C910
	// succ:  l000000000044C8BA l000000000044C910
l000000000044C8BA:
	rax = Mem0[rbx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000044C940
	// succ:  l000000000044C8D3 l000000000044C940
l000000000044C8D3:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rcx + 0x10<64>:word64] = rdx
	// succ:  l000000000044C8DE
l000000000044C8DE:
	Mem0[rbx + 8<64>:word64] = 1<64>
	// succ:  l000000000044C8E6
l000000000044C8E6:
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044C890_exit
l000000000044C910:
	SCZO = cond(Mem0[rbx + 8<64>:word64] - 0<64>)
	branch Test(NE,Z) l000000000044C95A
	// succ:  l000000000044C917 l000000000044C95A
l000000000044C917:
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000044C91C
l000000000044C91C:
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = edx | Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx
	call fn000000000046E370 (retsize: 8;)
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044C890_exit
l000000000044C940:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000044C8DE
	// succ:  l000000000044C94B l000000000044C8DE
l000000000044C94B:
	SCZO = cond(Mem0[rbx + 8<64>:word64] - 1<64>)
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx & 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	goto l000000000044C91C
	// succ:  l000000000044C91C
l000000000044C95A:
	eax = eax | 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000044C8E6
	// succ:  l000000000044C8E6
fn000000000044C890_exit:


// fn000000000044C9B0
// Return size: 8
define fn000000000044C9B0
fn000000000044C9B0_entry:
	rsp = fp
	// succ:  l000000000044C9B0
l000000000044C9B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x3F<64>
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x3F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044CA50
	// succ:  l000000000044C9DA l000000000044CA50
l000000000044C9DA:
	rax = Mem0[rbx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000044CA00
	// succ:  l000000000044C9F3 l000000000044CA00
l000000000044C9F3:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000044C9F6
l000000000044C9F6:
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044C9B0_exit
l000000000044CA00:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000044C9F6
	// succ:  l000000000044CA0B l000000000044C9F6
l000000000044CA0B:
	rdx = Mem0[rbx:word64]
	Mem0[rsp + 0x2C<64>:word32] = eax
	rbx = rbx + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	eax = Mem0[rsp + 0x2C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044C9B0_exit
l000000000044CA50:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000044C9F6
	// succ:  l000000000044C9F6
fn000000000044C9B0_exit:


// fn000000000044CAB0
// Return size: 8
define fn000000000044CAB0
fn000000000044CAB0_entry:
	rsp = fp
	// succ:  l000000000044CAB0
l000000000044CAB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x2F<64>
	rdi = rdx
	rsi = r8
	rdx = rbx
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000044CAF0
	// succ:  l000000000044CAE2 l000000000044CAF0
l000000000044CAE2:
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044CAB0_exit
l000000000044CAF0:
	rax = Mem0[rbx:word64]
	r8 = rsi
	rdx = rdi
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x40<64>:word64] (retsize: 8;)
	SCZO = cond(rsi - rax)
	Mem0[rbx + 8<64>:word64] = rax
	branch Test(EQ,Z) l000000000044CAE2
	// succ:  l000000000044CB14 l000000000044CAE2
l000000000044CB14:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 6<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044CAB0_exit
fn000000000044CAB0_exit:


// fn000000000044CBB0
// Return size: 8
define fn000000000044CBB0
fn000000000044CBB0_entry:
	rsp = fp
	// succ:  l000000000044CBB0
l000000000044CBB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rbx = rcx
	rcx = rsp + 0x3F<64>
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x3F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044CC00
	// succ:  l000000000044CBD2 l000000000044CC00
l000000000044CBD2:
	rax = Mem0[rbx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044CC00
	// succ:  l000000000044CBE6 l000000000044CC00
l000000000044CBE6:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044CC10
	// succ:  l000000000044CBF1 l000000000044CC10
l000000000044CBF1:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044CBB0_exit
l000000000044CC00:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044CBB0_exit
l000000000044CC10:
	rdx = Mem0[rbx:word64]
	Mem0[rsp + 0x2C<64>:word32] = eax
	rbx = rbx + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	eax = Mem0[rsp + 0x2C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044CBB0_exit
fn000000000044CBB0_exit:


// fn000000000044CCB0
// Return size: 8
define fn000000000044CCB0
fn000000000044CCB0_entry:
	rsp = fp
	// succ:  l000000000044CCB0
l000000000044CCB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x50<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rsi = Mem0[rdx:word64]
	rbx = rcx
	rdi = Mem0[rdx + 8<64>:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xFFFFFFFD<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rcx = rsp + 0x4F<64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x4F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044CCFD
	// succ:  l000000000044CCED l000000000044CCFD
l000000000044CCED:
	rax = Mem0[rbx:word64]
	rdx = rbx
	rdx = rdx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx)
	SZO = cond(Mem0[rdx + 0x20<64>:byte] & 5<8>)
	C = false
	branch Test(EQ,Z) l000000000044CD10
	// succ:  l000000000044CCFD l000000000044CD10
l000000000044CCFD:
	rax = rbx
	rsp = rsp + 0x50<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044CCB0_exit
l000000000044CD10:
	rdx = Mem0[rdx + 0xE8<64>:word64]
	rcx = rsp + 0x30<64>
	Mem0[rsp + 0x20<64>:word64] = rsi
	Mem0[rsp + 0x28<64>:word64] = rdi
	r9d = 8<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8 = rsp + 0x20<64>
	rax = Mem0[rdx:word64]
	call Mem0[rax + 0x28<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x30<64>:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l000000000044CCFD
	// succ:  l000000000044CD3F l000000000044CCFD
l000000000044CD3F:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	goto l000000000044CCFD
	// succ:  l000000000044CCFD
fn000000000044CCB0_exit:


// fn000000000044CDD0
// Return size: 8
define fn000000000044CDD0
fn000000000044CDD0_entry:
	rsp = fp
	// succ:  l000000000044CDD0
l000000000044CDD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x50<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rsi = rdx
	edi = r8d
	rdi = CONVERT(edi, word32, uint64)
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xFFFFFFFD<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rcx = rsp + 0x4F<64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x4F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044CE1C
	// succ:  l000000000044CE0C l000000000044CE1C
l000000000044CE0C:
	rax = Mem0[rbx:word64]
	rdx = rbx
	rdx = rdx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx)
	SZO = cond(Mem0[rdx + 0x20<64>:byte] & 5<8>)
	C = false
	branch Test(EQ,Z) l000000000044CE30
	// succ:  l000000000044CE1C l000000000044CE30
l000000000044CE1C:
	rax = rbx
	rsp = rsp + 0x50<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044CDD0_exit
l000000000044CE30:
	rdx = Mem0[rdx + 0xE8<64>:word64]
	rcx = rsp + 0x30<64>
	r9d = edi
	r9 = CONVERT(r9d, word32, uint64)
	r8 = rsi
	rax = Mem0[rdx:word64]
	Mem0[rsp + 0x20<64>:word32] = 8<32>
	call Mem0[rax + 0x20<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x30<64>:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l000000000044CE1C
	// succ:  l000000000044CE58 l000000000044CE1C
l000000000044CE58:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	goto l000000000044CE1C
	// succ:  l000000000044CE1C
fn000000000044CDD0_exit:


// fn000000000044CEF0
// Return size: 8
define fn000000000044CEF0
fn000000000044CEF0_entry:
	rsp = fp
	// succ:  l000000000044CEF0
l000000000044CEF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rcx + 8<64>:word32] = 0<32>
	rbx = rcx
	rcx = rsp + 0x4F<64>
	rsi = rdx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x4F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044CF31
	// succ:  l000000000044CF21 l000000000044CF31
l000000000044CF21:
	rax = Mem0[rsi:word64]
	rdx = rsi
	rdx = rdx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx)
	SZO = cond(Mem0[rdx + 0x20<64>:byte] & 5<8>)
	C = false
	branch Test(EQ,Z) l000000000044CF40
	// succ:  l000000000044CF31 l000000000044CF40
l000000000044CF31:
	rax = rbx
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044CEF0_exit
l000000000044CF40:
	rdx = Mem0[rdx + 0xE8<64>:word64]
	rcx = rsp + 0x30<64>
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rax = Mem0[rdx:word64]
	Mem0[rsp + 0x20<64>:word32] = 8<32>
	call Mem0[rax + 0x20<64>:word64] (retsize: 8;)
	rax = Mem0[rsp + 0x30<64>:word64]
	Mem0[rbx:word64] = rax
	eax = Mem0[rsp + 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 8<64>:word32] = eax
	rax = rbx
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044CEF0_exit
fn000000000044CEF0_exit:


// fn000000000044CFF0
// Return size: 8
define fn000000000044CFF0
fn000000000044CFF0_entry:
	rsp = fp
	// succ:  l000000000044CFF0
l000000000044CFF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xFFFFFFFD<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rcx = rsp + 0x2F<64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044D054
	// succ:  l000000000044D02C l000000000044D054
l000000000044D02C:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	rax = Mem0[rcx + 0xE8<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044D080
	// succ:  l000000000044D042 l000000000044D080
l000000000044D042:
	rdx = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(Mem0[rax + 8<64>:word64] - rdx)
	branch Test(UGE,C) l000000000044D060
	// succ:  l000000000044D04C l000000000044D060
l000000000044D04C:
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	Mem0[rax + 0x10<64>:word64] = rdx
	// succ:  l000000000044D054
l000000000044D054:
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044CFF0_exit
l000000000044D060:
	r8 = Mem0[rax:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	call Mem0[r8 + 0x58<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000044D054
	// succ:  l000000000044D074 l000000000044D054
l000000000044D074:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	// succ:  l000000000044D080
l000000000044D080:
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044CFF0_exit
fn000000000044CFF0_exit:


// fn000000000044D110
// Return size: 8
define fn000000000044D110
fn000000000044D110_entry:
	rsp = fp
	// succ:  l000000000044D110
l000000000044D110:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x2F<64>
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000044D143
	// succ:  l000000000044D13A l000000000044D143
l000000000044D13A:
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044D110_exit
l000000000044D143:
	rax = Mem0[rbx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000044D175
	// succ:  l000000000044D15C l000000000044D175
l000000000044D15C:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l000000000044D164
l000000000044D164:
	rax = rbx
	Mem0[rbx + 8<64>:word64] = 1<64>
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044D110_exit
l000000000044D175:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000044D164
	// succ:  l000000000044D180 l000000000044D164
l000000000044D180:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	goto l000000000044D13A
	// succ:  l000000000044D13A
fn000000000044D110_exit:


// fn000000000044D210
// Return size: 8
define fn000000000044D210
fn000000000044D210_entry:
	rsp = fp
	// succ:  l000000000044D210
l000000000044D210:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	SCZO = cond(rdx - 1<64>)
	rdi = rcx
	rbx = rdx
	branch Test(EQ,Z) l000000000044D3C2
	// succ:  l000000000044D22A l000000000044D3C2
l000000000044D22A:
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x2F<64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rdi
	call fn000000000044D740 (retsize: 8;)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(LE,SZO) l000000000044D330
	// succ:  l000000000044D24E l000000000044D330
l000000000044D24E:
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044D330
	// succ:  l000000000044D259 l000000000044D330
l000000000044D259:
	rax = Mem0[rdi:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rsi = Mem0[rdi + 0xE8<64> + rax:word64]
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000044D3F0
	// succ:  l000000000044D276 l000000000044D3F0
l000000000044D276:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000044D279
l000000000044D279:
	rdx = Mem0[rdi + 8<64>:word64]
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	r12 = 0x7FFFFFFFFFFFFFFF<64>
	// succ:  l000000000044D290
l000000000044D290:
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	cl = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(rbx - rdx)
	branch Test(LE,SZO) l000000000044D2EE
	// succ:  l000000000044D29B l000000000044D2EE
l000000000044D29B:
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000044D340
	// succ:  l000000000044D2A3 l000000000044D340
l000000000044D2A3:
	rcx = Mem0[rsi + 0x18<64>:word64]
	r8 = Mem0[rsi + 0x10<64>:word64]
	rax = rbx
	rax = rax - rdx
	SCZO = cond(rax)
	r9 = rcx
	r9 = r9 - r8
	SCZO = cond(r9)
	SCZO = cond(rax - r9)
	branch Test(LE,SZO) l000000000044D2BE
	// succ:  l000000000044D2BA_1 l000000000044D2BE
l000000000044D2BA_1:
	rax = r9
	// succ:  l000000000044D2BE
l000000000044D2BE:
	SCZO = cond(rax - 1<64>)
	branch Test(LE,SZO) l000000000044D380
	// succ:  l000000000044D2C8 l000000000044D380
l000000000044D2C8:
	r8 = r8 + rax
	SCZO = cond(r8)
	rdx = rdx + rax
	SCZO = cond(rdx)
	SCZO = cond(rcx - r8)
	Mem0[rsi + 0x10<64>:word64] = r8
	Mem0[rdi + 8<64>:word64] = rdx
	branch Test(ULE,CZ) l000000000044D3B0
	// succ:  l000000000044D2DF l000000000044D3B0
l000000000044D2DF:
	eax = CONVERT(Mem0[r8:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	cl = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(rbx - rdx)
	branch Test(GT,SZO) l000000000044D29B
	// succ:  l000000000044D2EE l000000000044D29B
l000000000044D2EE:
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000044D340
	// succ:  l000000000044D2F2 l000000000044D340
l000000000044D2F2:
	SCZO = cond(rbx - r12)
	branch Test(NE,Z) l000000000044D340
	// succ:  l000000000044D2F7 l000000000044D340
l000000000044D2F7:
	rdx = 0x8000000000000000<64>
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	Mem0[rdi + 8<64>:word64] = rdx
	goto l000000000044D290
	// succ:  l000000000044D290
l000000000044D330:
	rax = rdi
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044D210_exit
l000000000044D340:
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l000000000044D353
	// succ:  l000000000044D345 l000000000044D353
l000000000044D345:
	rsi = 0x7FFFFFFFFFFFFFFF<64>
	Mem0[rdi + 8<64>:word64] = rsi
	// succ:  l000000000044D353
l000000000044D353:
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000044D330
	// succ:  l000000000044D358 l000000000044D330
l000000000044D358:
	rax = Mem0[rdi:word64]
	rcx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rdi
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044D210_exit
l000000000044D380:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	SCZO = cond(rcx - r8)
	Mem0[rdi + 8<64>:word64] = rdx
	branch Test(ULE,CZ) l000000000044D3D2
	// succ:  l000000000044D38D l000000000044D3D2
l000000000044D38D:
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	Mem0[rsi + 0x10<64>:word64] = r8
	// succ:  l000000000044D395
l000000000044D395:
	SCZO = cond(r8 - rcx)
	branch Test(UGE,C) l000000000044D3B0
	// succ:  l000000000044D39A l000000000044D3B0
l000000000044D39A:
	eax = CONVERT(Mem0[r8:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = Mem0[rdi + 8<64>:word64]
	goto l000000000044D290
	// succ:  l000000000044D290
l000000000044D3B0:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	// succ:  l000000000044D3B9
l000000000044D3B9:
	rdx = Mem0[rdi + 8<64>:word64]
	goto l000000000044D290
	// succ:  l000000000044D290
l000000000044D3C2:
	call fn000000000044D110 (retsize: 8;)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044D210_exit
l000000000044D3D2:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044D3B9
	// succ:  l000000000044D3E0 l000000000044D3B9
l000000000044D3E0:
	r8 = Mem0[rsi + 0x10<64>:word64]
	rcx = Mem0[rsi + 0x18<64>:word64]
	goto l000000000044D395
	// succ:  l000000000044D395
l000000000044D3F0:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000044D279
	// succ:  l000000000044D279
fn000000000044D210_exit:


// fn000000000044D460
// Return size: 8
define fn000000000044D460
fn000000000044D460_entry:
	rsp = fp
	// succ:  l000000000044D460
l000000000044D460:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	SCZO = cond(r8d - 0xFFFFFFFF<32>)
	rbp = rcx
	rsi = rdx
	r12d = r8d
	r12 = CONVERT(r12d, word32, uint64)
	branch Test(EQ,Z) l000000000044D632
	// succ:  l000000000044D483 l000000000044D632
l000000000044D483:
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x3F<64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	call fn000000000044D740 (retsize: 8;)
	SZO = cond(rsi & rsi)
	C = false
	branch Test(LE,SZO) l000000000044D5A2
	// succ:  l000000000044D4A7 l000000000044D5A2
l000000000044D4A7:
	SCZO = cond(Mem0[rsp + 0x3F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044D5A2
	// succ:  l000000000044D4B2 l000000000044D5A2
l000000000044D4B2:
	rax = Mem0[rbp + 0<64>:word64]
	r14d = r12d
	r14 = CONVERT(r14d, word32, uint64)
	rax = Mem0[rax - 0x18<64>:word64]
	rdi = Mem0[rbp + 0xE8<64> + rax:word64]
	rax = Mem0[rdi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rdi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000044D6AB
	// succ:  l000000000044D4D3 l000000000044D6AB
l000000000044D4D3:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000044D4D6
l000000000044D4D6:
	r15 = Mem0[rbp + 8<64>:word64]
	ecx = CONVERT(r14b, byte, int32)
	Mem0[rsp + 0x2B<64>:byte] = 0<8>
	Mem0[rsp + 0x2C<64>:word32] = ecx
	// succ:  l000000000044D4F0
l000000000044D4F0:
	SCZO = cond(r12d - eax)
	cl = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	dl = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(cl & dl)
	C = false
	branch Test(EQ,Z) l000000000044D577
	// succ:  l000000000044D500 l000000000044D577
l000000000044D500:
	SCZO = cond(rsi - r15)
	branch Test(LE,SZO) l000000000044D5C0
	// succ:  l000000000044D509 l000000000044D5C0
l000000000044D509:
	r14 = Mem0[rdi + 0x18<64>:word64]
	rbx = Mem0[rdi + 0x10<64>:word64]
	r9 = rsi
	r9 = r9 - r15
	SCZO = cond(r9)
	rax = r14
	rax = rax - rbx
	SCZO = cond(rax)
	SCZO = cond(r9 - rax)
	branch Test(GT,SZO) l000000000044D524
	// succ:  l000000000044D520_1 l000000000044D524
l000000000044D520_1:
	rax = r9
	// succ:  l000000000044D524
l000000000044D524:
	SCZO = cond(rax - 1<64>)
	r13 = rax
	branch Test(LE,SZO) l000000000044D5F0
	// succ:  l000000000044D531 l000000000044D5F0
l000000000044D531:
	edx = Mem0[rsp + 0x2C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r8 = r13
	rcx = rbx
	rax = memchr(rcx, rdx, r8)
	rdx = rax
	rdx = rdx - rbx
	SCZO = cond(rdx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044D54D
	// succ:  l000000000044D549_1 l000000000044D54D
l000000000044D549_1:
	r13 = rdx
	// succ:  l000000000044D54D
l000000000044D54D:
	rbx = rbx + r13
	SCZO = cond(rbx)
	r15 = r15 + r13
	SCZO = cond(r15)
	SCZO = cond(r14 - rbx)
	Mem0[rdi + 0x10<64>:word64] = rbx
	Mem0[rbp + 8<64>:word64] = r15
	branch Test(ULE,CZ) l000000000044D620
	// succ:  l000000000044D564 l000000000044D620
l000000000044D564:
	eax = CONVERT(Mem0[rbx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r12d - eax)
	cl = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	dl = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(cl & dl)
	C = false
	branch Test(NE,Z) l000000000044D500
	// succ:  l000000000044D577 l000000000044D500
l000000000044D577:
	SCZO = cond(Mem0[rsp + 0x2B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044D590
	// succ:  l000000000044D57E l000000000044D590
l000000000044D57E:
	rsi = 0x7FFFFFFFFFFFFFFF<64>
	Mem0[rbp + 8<64>:word64] = rsi
	// succ:  l000000000044D590
l000000000044D590:
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044D690
	// succ:  l000000000044D599 l000000000044D690
l000000000044D599:
	SCZO = cond(r12d - eax)
	branch Test(EQ,Z) l000000000044D63C
	// succ:  l000000000044D5A2 l000000000044D63C
l000000000044D5A2:
	rax = rbp
	// succ:  l000000000044D5A5
l000000000044D5A5:
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044D460_exit
l000000000044D5C0:
	rcx = 0x7FFFFFFFFFFFFFFF<64>
	SCZO = cond(rsi - rcx)
	branch Test(NE,Z) l000000000044D577
	// succ:  l000000000044D5CF l000000000044D577
l000000000044D5CF:
	rcx = 0x8000000000000000<64>
	Mem0[rsp + 0x2B<64>:byte] = 1<8>
	Mem0[rbp + 8<64>:word64] = rcx
	r15 = rcx
	goto l000000000044D4F0
	// succ:  l000000000044D4F0
l000000000044D5F0:
	r10 = r15 + 1<64>
	SCZO = cond(r14 - rbx)
	Mem0[rbp + 8<64>:word64] = r10
	branch Test(ULE,CZ) l000000000044D66E
	// succ:  l000000000044D5FD l000000000044D66E
l000000000044D5FD:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	Mem0[rdi + 0x10<64>:word64] = rbx
	// succ:  l000000000044D605
l000000000044D605:
	SCZO = cond(rbx - r14)
	branch Test(UGE,C) l000000000044D620
	// succ:  l000000000044D60A l000000000044D620
l000000000044D60A:
	eax = CONVERT(Mem0[rbx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	r15 = Mem0[rbp + 8<64>:word64]
	goto l000000000044D4F0
	// succ:  l000000000044D4F0
l000000000044D620:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	// succ:  l000000000044D629
l000000000044D629:
	r15 = Mem0[rbp + 8<64>:word64]
	goto l000000000044D4F0
	// succ:  l000000000044D4F0
l000000000044D632:
	call fn000000000044D210 (retsize: 8;)
	goto l000000000044D5A5
	// succ:  l000000000044D5A5
l000000000044D63C:
	rax = Mem0[rbp + 8<64>:word64]
	rdx = 0x7FFFFFFFFFFFFFFF<64>
	SCZO = cond(rax - rdx)
	branch Test(EQ,Z) l000000000044D657
	// succ:  l000000000044D64F l000000000044D657
l000000000044D64F:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbp + 8<64>:word64] = rax
	// succ:  l000000000044D657
l000000000044D657:
	rax = Mem0[rdi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rdi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000044D6B9
	// succ:  l000000000044D661 l000000000044D6B9
l000000000044D661:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rdi + 0x10<64>:word64] = rax
	goto l000000000044D5A2
	// succ:  l000000000044D5A2
l000000000044D66E:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044D629
	// succ:  l000000000044D67C l000000000044D629
l000000000044D67C:
	rbx = Mem0[rdi + 0x10<64>:word64]
	r14 = Mem0[rdi + 0x18<64>:word64]
	goto l000000000044D605
	// succ:  l000000000044D605
l000000000044D690:
	rax = Mem0[rbp + 0<64>:word64]
	rcx = rbp
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	goto l000000000044D5A2
	// succ:  l000000000044D5A2
l000000000044D6AB:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000044D4D6
	// succ:  l000000000044D4D6
l000000000044D6B9:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l000000000044D5A2
	// succ:  l000000000044D5A2
fn000000000044D460_exit:


// fn000000000044D740
// Return size: 8
define fn000000000044D740
fn000000000044D740_entry:
	rsp = fp
	// succ:  l000000000044D740
l000000000044D740:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r9 = rdx
	rdi = rcx
	rbx = rdx
	Mem0[rcx:byte] = 0<8>
	r9 = r9 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r9)
	eax = Mem0[r9 + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000044D7A4
	// succ:  l000000000044D763 l000000000044D7A4
l000000000044D763:
	rcx = Mem0[r9 + 0xD8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044D7C0
	// succ:  l000000000044D76F l000000000044D7C0
l000000000044D76F:
	Mem0[rsp + 0x2C<64>:word32] = r8d
	call fn000000000044E8B0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	r8d = Mem0[rsp + 0x2C<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	r9 = rbx
	r9 = r9 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r9)
	SZO = cond(r8b & r8b)
	C = false
	branch Test(EQ,Z) l000000000044D7C5
	// succ:  l000000000044D78D l000000000044D7C5
l000000000044D78D:
	// succ:  l000000000044D790
l000000000044D790:
	eax = Mem0[r9 + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000044D7A4
	// succ:  l000000000044D798 l000000000044D7A4
l000000000044D798:
	Mem0[rdi:byte] = 1<8>
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044D740_exit
l000000000044D7A4:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l000000000044D7A6
l000000000044D7A6:
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = r9
	edx = edx | eax
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000044D7B6_thunk_fn000000000046E370
l000000000044D7B6_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn000000000044D740_exit
l000000000044D7C0:
	SZO = cond(r8b & r8b)
	C = false
	branch Test(NE,Z) l000000000044D798
	// succ:  l000000000044D7C5 l000000000044D798
l000000000044D7C5:
	SZO = cond(Mem0[r9 + 0x19<64>:byte] & 0x10<8>)
	C = false
	branch Test(EQ,Z) l000000000044D790
	// succ:  l000000000044D7CC l000000000044D790
l000000000044D7CC:
	rsi = Mem0[r9 + 0xE8<64>:word64]
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000044D880
	// succ:  l000000000044D7E1 l000000000044D880
l000000000044D7E1:
	rbp = Mem0[r9 + 0xF0<64>:word64]
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000044D8B7
	// succ:  l000000000044D7F4 l000000000044D8B7
l000000000044D7F4:
	rdx = Mem0[rbp + 0x30<64>:word64]
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(Mem0[rdx + rax * 2<64>:byte] & 0x20<8>)
	C = false
	branch Test(EQ,Z) l000000000044D790
	// succ:  l000000000044D801 l000000000044D790
l000000000044D801:
	rax = Mem0[rsi + 0x10<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(UGE,C) l000000000044D840
	// succ:  l000000000044D80E l000000000044D840
l000000000044D80E:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsi + 0x10<64>:word64] = rax
	// succ:  l000000000044D816
l000000000044D816:
	SCZO = cond(rax - rdx)
	branch Test(UGE,C) l000000000044D870
	// succ:  l000000000044D81B l000000000044D870
l000000000044D81B:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000044D81E
l000000000044D81E:
	rdx = Mem0[rbp + 0x30<64>:word64]
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(Mem0[rdx + rax * 2<64>:byte] & 0x20<8>)
	C = false
	branch Test(NE,Z) l000000000044D801
	// succ:  l000000000044D82B l000000000044D801
l000000000044D82B:
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	r9 = rbx
	goto l000000000044D790
	// succ:  l000000000044D790
l000000000044D840:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000044D8AA
	// succ:  l000000000044D84E l000000000044D8AA
l000000000044D84E:
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	r9 = rbx
	// succ:  l000000000044D858
l000000000044D858:
	eax = Mem0[r9 + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000044D7A6
	// succ:  l000000000044D7A6
l000000000044D870:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044D84E
	// succ:  l000000000044D87E l000000000044D84E
l000000000044D87E:
	goto l000000000044D81E
	// succ:  l000000000044D81E
l000000000044D880:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r9 = rbx
	r9 = r9 + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(r9)
	rbp = Mem0[r9 + 0xF0<64>:word64]
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000044D8B7
	// succ:  l000000000044D89F l000000000044D8B7
l000000000044D89F:
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000044D7F4
	// succ:  l000000000044D8A8 l000000000044D7F4
l000000000044D8A8:
	goto l000000000044D858
	// succ:  l000000000044D858
l000000000044D8AA:
	rax = Mem0[rsi + 0x10<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	goto l000000000044D816
	// succ:  l000000000044D816
l000000000044D8B7:
	call fn0000000000470820 (retsize: 8;)
fn000000000044D740_exit:


// fn000000000044D8C0
// Return size: 8
define fn000000000044D8C0
fn000000000044D8C0_entry:
	rsp = fp
	// succ:  l000000000044D8C0
l000000000044D8C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r9 = rdx
	rdi = rcx
	rbx = rdx
	Mem0[rcx:byte] = 0<8>
	r9 = r9 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r9)
	eax = Mem0[r9 + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000044D924
	// succ:  l000000000044D8E3 l000000000044D924
l000000000044D8E3:
	rcx = Mem0[r9 + 0xD8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044D940
	// succ:  l000000000044D8EF l000000000044D940
l000000000044D8EF:
	Mem0[rsp + 0x2C<64>:word32] = r8d
	call fn000000000044E8B0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	r8d = Mem0[rsp + 0x2C<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	r9 = rbx
	r9 = r9 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r9)
	SZO = cond(r8b & r8b)
	C = false
	branch Test(EQ,Z) l000000000044D945
	// succ:  l000000000044D90D l000000000044D945
l000000000044D90D:
	// succ:  l000000000044D910
l000000000044D910:
	eax = Mem0[r9 + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000044D924
	// succ:  l000000000044D918 l000000000044D924
l000000000044D918:
	Mem0[rdi:byte] = 1<8>
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044D8C0_exit
l000000000044D924:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l000000000044D926
l000000000044D926:
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = r9
	edx = edx | eax
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000044D936_thunk_fn000000000046E370
l000000000044D936_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn000000000044D8C0_exit
l000000000044D940:
	SZO = cond(r8b & r8b)
	C = false
	branch Test(NE,Z) l000000000044D918
	// succ:  l000000000044D945 l000000000044D918
l000000000044D945:
	SZO = cond(Mem0[r9 + 0x19<64>:byte] & 0x10<8>)
	C = false
	branch Test(EQ,Z) l000000000044D910
	// succ:  l000000000044D94C l000000000044D910
l000000000044D94C:
	rsi = Mem0[r9 + 0xE8<64>:word64]
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000044DA00
	// succ:  l000000000044D961 l000000000044DA00
l000000000044D961:
	rbp = Mem0[r9 + 0xF0<64>:word64]
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000044DA37
	// succ:  l000000000044D974 l000000000044DA37
l000000000044D974:
	rdx = Mem0[rbp + 0x30<64>:word64]
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(Mem0[rdx + rax * 2<64>:byte] & 0x20<8>)
	C = false
	branch Test(EQ,Z) l000000000044D910
	// succ:  l000000000044D981 l000000000044D910
l000000000044D981:
	rax = Mem0[rsi + 0x10<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(UGE,C) l000000000044D9C0
	// succ:  l000000000044D98E l000000000044D9C0
l000000000044D98E:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsi + 0x10<64>:word64] = rax
	// succ:  l000000000044D996
l000000000044D996:
	SCZO = cond(rax - rdx)
	branch Test(UGE,C) l000000000044D9F0
	// succ:  l000000000044D99B l000000000044D9F0
l000000000044D99B:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000044D99E
l000000000044D99E:
	rdx = Mem0[rbp + 0x30<64>:word64]
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(Mem0[rdx + rax * 2<64>:byte] & 0x20<8>)
	C = false
	branch Test(NE,Z) l000000000044D981
	// succ:  l000000000044D9AB l000000000044D981
l000000000044D9AB:
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	r9 = rbx
	goto l000000000044D910
	// succ:  l000000000044D910
l000000000044D9C0:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000044DA2A
	// succ:  l000000000044D9CE l000000000044DA2A
l000000000044D9CE:
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	r9 = rbx
	// succ:  l000000000044D9D8
l000000000044D9D8:
	eax = Mem0[r9 + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000044D926
	// succ:  l000000000044D926
l000000000044D9F0:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044D9CE
	// succ:  l000000000044D9FE l000000000044D9CE
l000000000044D9FE:
	goto l000000000044D99E
	// succ:  l000000000044D99E
l000000000044DA00:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r9 = rbx
	r9 = r9 + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(r9)
	rbp = Mem0[r9 + 0xF0<64>:word64]
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000044DA37
	// succ:  l000000000044DA1F l000000000044DA37
l000000000044DA1F:
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000044D974
	// succ:  l000000000044DA28 l000000000044D974
l000000000044DA28:
	goto l000000000044D9D8
	// succ:  l000000000044D9D8
l000000000044DA2A:
	rax = Mem0[rsi + 0x10<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	goto l000000000044D996
	// succ:  l000000000044D996
l000000000044DA37:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000044DA3F_thunk_fn000000000044DA40
l000000000044DA3F_thunk_fn000000000044DA40:
	call fn000000000044DA40 (retsize: 0;)
	return
	// succ:  fn000000000044D8C0_exit
fn000000000044D8C0_exit:


// fn000000000044DA40
// Return size: 8
define fn000000000044DA40
fn000000000044DA40_entry:
	rsp = fp
	// succ:  l000000000044DA40
l000000000044DA40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rsi = rcx
	rdi = rdx
	rax = Mem0[rax - 0x18<64>:word64]
	rbx = Mem0[rcx + 0xF0<64> + rax:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000044DAC0
	// succ:  l000000000044DA61 l000000000044DAC0
l000000000044DA61:
	SCZO = cond(Mem0[rbx + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044DA80
	// succ:  l000000000044DA67 l000000000044DA80
l000000000044DA67:
	r9d = CONVERT(Mem0[rbx + 0x43<64>:byte], byte, int32)
	// succ:  l000000000044DA6C
l000000000044DA6C:
	rdx = rdi
	rcx = rsi
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000044DA79_thunk_fn000000000044DAD0
l000000000044DA79_thunk_fn000000000044DAD0:
	call fn000000000044DAD0 (retsize: 0;)
	return
	// succ:  fn000000000044DA40_exit
l000000000044DA80:
	rcx = rbx
	Mem0[rsp + 0x28<64>:word64] = r8
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rdx = 0x000000000042B5F0<p64>
	r9d = 0xA<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8 = Mem0[rsp + 0x28<64>:word64]
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(EQ,Z) l000000000044DA6C
	// succ:  l000000000044DAAB l000000000044DA6C
l000000000044DAAB:
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call rax (retsize: 8;)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9d = CONVERT(al, byte, int32)
	goto l000000000044DA6C
	// succ:  l000000000044DA6C
l000000000044DAC0:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000044DACF_thunk_fn000000000044DAD0
l000000000044DACF_thunk_fn000000000044DAD0:
	call fn000000000044DAD0 (retsize: 0;)
	return
	// succ:  fn000000000044DA40_exit
fn000000000044DA40_exit:


// fn000000000044DAD0
// Return size: 8
define fn000000000044DAD0
fn000000000044DAD0_entry:
	rsp = fp
	// succ:  l000000000044DAD0
l000000000044DAD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbp = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x2F<64>
	rdi = rdx
	r12 = r8
	rdx = rbp
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	r13d = r9d
	r13 = CONVERT(r13d, word32, uint64)
	r14d = CONVERT(r9b, byte, int32)
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044DC04
	// succ:  l000000000044DB16 l000000000044DC04
l000000000044DB16:
	rax = Mem0[rbp + 0<64>:word64]
	r13d = CONVERT(r13b, byte, word32)
	r13 = CONVERT(r13d, word32, uint64)
	rax = Mem0[rax - 0x18<64>:word64]
	rsi = Mem0[rbp + 0xE8<64> + rax:word64]
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000044DCFC
	// succ:  l000000000044DB38 l000000000044DCFC
l000000000044DB38:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000044DB3B
l000000000044DB3B:
	rbx = Mem0[rbp + 8<64>:word64]
	// succ:  l000000000044DB40
l000000000044DB40:
	SCZO = cond(eax - r13d)
	r8 = rbx + 1<64>
	cl = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	dl = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(cl & dl)
	C = false
	branch Test(EQ,Z) l000000000044DC60
	// succ:  l000000000044DB58 l000000000044DC60
l000000000044DB58:
	SCZO = cond(r8 - r12)
	branch Test(GE,SO) l000000000044DC60
	// succ:  l000000000044DB61 l000000000044DC60
l000000000044DB61:
	r15 = Mem0[rsi + 0x10<64>:word64]
	rcx = r12
	rdx = Mem0[rsi + 0x18<64>:word64]
	rcx = rcx - rbx
	SCZO = cond(rcx)
	rbx = rcx
	rbx = rbx - 1<64>
	SCZO = cond(rbx)
	rdx = rdx - r15
	SCZO = cond(rdx)
	SCZO = cond(rbx - rdx)
	branch Test(LE,SZO) l000000000044DB80
	// succ:  l000000000044DB7C_1 l000000000044DB80
l000000000044DB7C_1:
	rbx = rdx
	// succ:  l000000000044DB80
l000000000044DB80:
	SCZO = cond(rbx - 1<64>)
	branch Test(LE,SZO) l000000000044DCA0
	// succ:  l000000000044DB8A l000000000044DCA0
l000000000044DB8A:
	r8 = rbx
	edx = r14d
	rdx = CONVERT(edx, word32, uint64)
	rcx = r15
	rax = memchr(rcx, rdx, r8)
	rdx = rax
	rcx = rdi
	rdx = rdx - r15
	SCZO = cond(rdx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044DBA8
	// succ:  l000000000044DBA4_1 l000000000044DBA8
l000000000044DBA4_1:
	rbx = rdx
	// succ:  l000000000044DBA8
l000000000044DBA8:
	rdx = r15
	r8 = rbx
	rdi = rdi + rbx
	SCZO = cond(rdi)
	rax = memcpy(rcx, rdx, r8)
	rax = rbx
	rax = rax + Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax)
	rbx = rbx + Mem0[rbp + 8<64>:word64]
	SCZO = cond(rbx)
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	Mem0[rsi + 0x10<64>:word64] = rax
	Mem0[rbp + 8<64>:word64] = rbx
	branch Test(UGE,C) l000000000044DCD4
	// succ:  l000000000044DBD3 l000000000044DCD4
l000000000044DBD3:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000044DB40
	// succ:  l000000000044DB40
l000000000044DC04:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l000000000044DC10
l000000000044DC10:
	SZO = cond(r12 & r12)
	C = false
	branch Test(LE,SZO) l000000000044DC18
	// succ:  l000000000044DC15 l000000000044DC18
l000000000044DC15:
	Mem0[rdi:byte] = 0<8>
	// succ:  l000000000044DC18
l000000000044DC18:
	SCZO = cond(Mem0[rbp + 8<64>:word64] - 0<64>)
	branch Test(NE,Z) l000000000044DC50
	// succ:  l000000000044DC1F l000000000044DC50
l000000000044DC1F:
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l000000000044DC22
l000000000044DC22:
	rax = Mem0[rbp + 0<64>:word64]
	rcx = rbp
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	// succ:  l000000000044DC35
l000000000044DC35:
	rax = rbp
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044DAD0_exit
l000000000044DC50:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l000000000044DC35
	// succ:  l000000000044DC54 l000000000044DC35
l000000000044DC54:
	goto l000000000044DC22
	// succ:  l000000000044DC22
l000000000044DC60:
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044DC90
	// succ:  l000000000044DC65 l000000000044DC90
l000000000044DC65:
	SCZO = cond(r13d - eax)
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l000000000044DC10
	// succ:  l000000000044DC6F l000000000044DC10
l000000000044DC6F:
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	Mem0[rbp + 8<64>:word64] = r8
	branch Test(UGE,C) l000000000044DD1B
	// succ:  l000000000044DC81 l000000000044DD1B
l000000000044DC81:
	rax = rax + 1<64>
	SCZO = cond(rax)
	dl = dl ^ dl
	SZO = cond(dl)
	C = false
	Mem0[rsi + 0x10<64>:word64] = rax
	goto l000000000044DC10
	// succ:  l000000000044DC10
l000000000044DC90:
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000044DC10
	// succ:  l000000000044DC10
l000000000044DCA0:
	Mem0[rdi:byte] = al
	rax = Mem0[rsi + 0x10<64>:word64]
	r15 = rdi + 1<64>
	rdx = Mem0[rsi + 0x18<64>:word64]
	v31 = Mem0[rbp + 8<64>:word64] + 1<64>
	Mem0[rbp + 8<64>:word64] = v31
	SCZO = cond(v31)
	SCZO = cond(rax - rdx)
	branch Test(UGE,C) l000000000044DCE2
	// succ:  l000000000044DCB8 l000000000044DCE2
l000000000044DCB8:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsi + 0x10<64>:word64] = rax
	// succ:  l000000000044DCC0
l000000000044DCC0:
	SCZO = cond(rax - rdx)
	branch Test(UGE,C) l000000000044DD10
	// succ:  l000000000044DCC5 l000000000044DD10
l000000000044DCC5:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rbx = Mem0[rbp + 8<64>:word64]
	rdi = r15
	goto l000000000044DB40
	// succ:  l000000000044DB40
l000000000044DCD4:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000044DB3B
	// succ:  l000000000044DB3B
l000000000044DCE2:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000044DD29
	// succ:  l000000000044DCF0 l000000000044DD29
l000000000044DCF0:
	rbx = Mem0[rbp + 8<64>:word64]
	rdi = r15
	goto l000000000044DB40
	// succ:  l000000000044DB40
l000000000044DCFC:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000044DB3B
	// succ:  l000000000044DB3B
l000000000044DD10:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000044DCF0
	// succ:  l000000000044DCF0
l000000000044DD1B:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l000000000044DC04
	// succ:  l000000000044DC04
l000000000044DD29:
	rax = Mem0[rsi + 0x10<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	goto l000000000044DCC0
	// succ:  l000000000044DCC0
fn000000000044DAD0_exit:


// fn000000000044DD90
// Return size: 8
define fn000000000044DD90
fn000000000044DD90_entry:
	rsp = fp
	// succ:  l000000000044DD90
l000000000044DD90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xFFFFFFFD<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rcx = rsp + 0x2F<64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044DE20
	// succ:  l000000000044DDCF l000000000044DE20
l000000000044DDCF:
	rax = Mem0[rbx:word64]
	rdx = rbx
	rdx = rdx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx)
	rcx = Mem0[rdx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044DE30
	// succ:  l000000000044DDE5 l000000000044DE30
l000000000044DDE5:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(Mem0[rcx + 8<64>:word64] - rax)
	branch Test(UGE,C) l000000000044DDF5
	// succ:  l000000000044DDEF l000000000044DDF5
l000000000044DDEF:
	SCZO = cond(sil - Mem0[rax - 1<64>:byte])
	branch Test(EQ,Z) l000000000044DE40
	// succ:  l000000000044DDF5 l000000000044DE40
l000000000044DDF5:
	rax = Mem0[rcx:word64]
	edx = CONVERT(sil, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x58<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000044DE20
	// succ:  l000000000044DE04 l000000000044DE20
l000000000044DE04:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	// succ:  l000000000044DE20
l000000000044DE20:
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044DD90_exit
l000000000044DE30:
	rcx = rdx
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	goto l000000000044DE20
	// succ:  l000000000044DE20
l000000000044DE40:
	rax = rax - 1<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	goto l000000000044DE20
	// succ:  l000000000044DE20
fn000000000044DD90_exit:


// fn000000000044DEC0
// Return size: 8
define fn000000000044DEC0
fn000000000044DEC0_entry:
	rsp = fp
	// succ:  l000000000044DEC0
l000000000044DEC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x2F<64>
	rdi = rdx
	rsi = r8
	rdx = rbx
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044DF48
	// succ:  l000000000044DEF2 l000000000044DF48
l000000000044DEF2:
	rax = Mem0[rbx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	rax = Mem0[rcx + 0x18<64>:word64]
	rax = rax - Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044DF54
	// succ:  l000000000044DF0E l000000000044DF54
l000000000044DF0E:
	SZO = cond(rax & rax)
	C = false
	branch Test(LE,SZO) l000000000044DF42
	// succ:  l000000000044DF13 l000000000044DF42
l000000000044DF13:
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - rsi)
	branch Test(GT,SZO) l000000000044DF1D
	// succ:  l000000000044DF19_1 l000000000044DF1D
l000000000044DF19_1:
	rsi = rax
	// succ:  l000000000044DF1D
l000000000044DF1D:
	r8 = rsi
	rdx = Mem0[rdx - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rdx:word64]
	rdx = rdi
	r9 = Mem0[rcx:word64]
	call Mem0[r9 + 0x40<64>:word64] (retsize: 8;)
	Mem0[rbx + 8<64>:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044DEC0_exit
l000000000044DF42:
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l000000000044DF61
	// succ:  l000000000044DF48 l000000000044DF61
l000000000044DF48:
	rax = Mem0[rbx + 8<64>:word64]
	// succ:  l000000000044DF4C
l000000000044DF4C:
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044DEC0_exit
l000000000044DF54:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x38<64>:word64] (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(GT,SZO) l000000000044DF13
	// succ:  l000000000044DF5F l000000000044DF13
l000000000044DF5F:
	goto l000000000044DF42
	// succ:  l000000000044DF42
l000000000044DF61:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = Mem0[rbx + 8<64>:word64]
	goto l000000000044DF4C
	// succ:  l000000000044DF4C
fn000000000044DEC0_exit:


// fn000000000044DFF0
// Return size: 8
define fn000000000044DFF0
fn000000000044DFF0_entry:
	rsp = fp
	// succ:  l000000000044DFF0
l000000000044DFF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0x10<64>
	rbx = rcx
	rdi = rdx
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	rax = 0x0000000000496058<p64>
	Mem0[rbx + 0xE8<64>:word64] = 0<64>
	Mem0[rbx + 0xF0<64>:byte] = 0<8>
	Mem0[rbx + 0xF1<64>:byte] = 0<8>
	Mem0[rbx + 0xF8<64>:word64] = 0<64>
	rdx = rdi
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496080<p64>
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	Mem0[rbx + 0x108<64>:word64] = 0<64>
	Mem0[rbx + 0x110<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 8<64>:word64] = 0<64>
	call fn000000000046E310 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044DFF0_exit
fn000000000044DFF0_exit:


// fn000000000044E0B0
// Return size: 8
define fn000000000044E0B0
fn000000000044E0B0_entry:
	rsp = fp
	// succ:  l000000000044E0B0
l000000000044E0B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0x10<64>
	rbx = rcx
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	rax = 0x0000000000496058<p64>
	Mem0[rbx + 0xE8<64>:word64] = 0<64>
	Mem0[rbx + 0xF0<64>:byte] = 0<8>
	Mem0[rbx + 0xF1<64>:byte] = 0<8>
	Mem0[rbx + 0xF8<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496080<p64>
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	Mem0[rbx + 0x108<64>:word64] = 0<64>
	Mem0[rbx + 0x110<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 8<64>:word64] = 0<64>
	call fn000000000046E310 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044E0B0_exit
fn000000000044E0B0_exit:


// fn000000000044E160
// Return size: 8
define fn000000000044E160
fn000000000044E160_entry:
	rsp = fp
	// succ:  l000000000044E160
l000000000044E160:
	rax = Mem0[rdx:word64]
	Mem0[rcx:word64] = rax
	r9 = Mem0[rdx + 8<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rcx + rdx:word64] = r9
	Mem0[rcx + 8<64>:word64] = 0<64>
	rdx = r8
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	// succ:  l000000000044E181_thunk_fn000000000046E310
l000000000044E181_thunk_fn000000000046E310:
	call fn000000000046E310 (retsize: 0;)
	return
	// succ:  fn000000000044E160_exit
fn000000000044E160_exit:


// fn000000000044E190
// Return size: 8
define fn000000000044E190
fn000000000044E190_entry:
	rsp = fp
	// succ:  l000000000044E190
l000000000044E190:
	rax = Mem0[rdx:word64]
	Mem0[rcx:word64] = rax
	r8 = Mem0[rdx + 8<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rcx + rdx:word64] = r8
	Mem0[rcx + 8<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	// succ:  l000000000044E1B0_thunk_fn000000000046E310
l000000000044E1B0_thunk_fn000000000046E310:
	call fn000000000046E310 (retsize: 0;)
	return
	// succ:  fn000000000044E190_exit
fn000000000044E190_exit:


// fn000000000044E1C0
// Return size: 0
define fn000000000044E1C0
fn000000000044E1C0_entry:
	rsp = fp
	// succ:  l000000000044E1C0
l000000000044E1C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496058<p64>
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	rax = Mem0[0x0000000000491E20<p64>:word64]
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	call fn000000000046D3D0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000044E1FA_thunk_fn0000000000475550
l000000000044E1FA_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000044E1C0_exit
fn000000000044E1C0_exit:


// fn000000000044E200
// Return size: 0
define fn000000000044E200
fn000000000044E200_entry:
	rsp = fp
	// succ:  l000000000044E200
l000000000044E200:
	rax = 0x0000000000496058<p64>
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rcx + 0x10<64>
	SCZO = cond(rcx)
	Mem0[rcx - 0x10<64>:word64] = rax
	rax = Mem0[0x0000000000491E20<p64>:word64]
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	// succ:  l000000000044E225_thunk_fn000000000046D3D0
l000000000044E225_thunk_fn000000000046D3D0:
	call fn000000000046D3D0 (retsize: 0;)
	return
	// succ:  fn000000000044E200_exit
fn000000000044E200_exit:


// fn000000000044E230
// Return size: 8
define fn000000000044E230
fn000000000044E230_entry:
	rsp = fp
	// succ:  l000000000044E230
l000000000044E230:
	rax = Mem0[rdx:word64]
	Mem0[rcx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rdx + 8<64>:word64]
	Mem0[rcx + rax:word64] = rdx
	return
	// succ:  fn000000000044E230_exit
fn000000000044E230_exit:


// fn000000000044E250
// Return size: 0
define fn000000000044E250
fn000000000044E250_entry:
	rsp = fp
	// succ:  l000000000044E250
l000000000044E250:
	call rdx (retsize: 0;)
	return
	// succ:  fn000000000044E250_exit
fn000000000044E250_exit:


// fn000000000044E260
// Return size: 8
define fn000000000044E260
fn000000000044E260_entry:
	rsp = fp
	// succ:  l000000000044E260
l000000000044E260:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call rdx (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044E260_exit
fn000000000044E260_exit:


// fn000000000044E280
// Return size: 8
define fn000000000044E280
fn000000000044E280_entry:
	rsp = fp
	// succ:  l000000000044E280
l000000000044E280:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call rdx (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044E280_exit
fn000000000044E280_exit:


// fn000000000044E2A0
// Return size: 8
define fn000000000044E2A0
fn000000000044E2A0_entry:
	rsp = fp
	// succ:  l000000000044E2A0
l000000000044E2A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x2E<64>
	rsi = rdx
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000044E311
	// succ:  l000000000044E2C1 l000000000044E311
l000000000044E2C1:
	SCZO = cond(Mem0[rsp + 0x2E<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044E311
	// succ:  l000000000044E2C8 l000000000044E311
l000000000044E2C8:
	rax = Mem0[rbx:word64]
	r8 = rsp + 0x2F<64>
	rdx = rsi
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	call fn0000000000471040 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044E320
	// succ:  l000000000044E2E9 l000000000044E320
l000000000044E2E9:
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044E307
	// succ:  l000000000044E2F0 l000000000044E307
l000000000044E2F0:
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000044E2F5
l000000000044E2F5:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	// succ:  l000000000044E307
l000000000044E307:
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044E2A0_exit
l000000000044E311:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(NE,Z) l000000000044E307
	// succ:  l000000000044E316 l000000000044E307
l000000000044E316:
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000044E2F5
	// succ:  l000000000044E2F5
l000000000044E320:
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 1<8>)
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx & 0xFFFFFFFE<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 6<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	goto l000000000044E2F5
	// succ:  l000000000044E2F5
fn000000000044E2A0_exit:


// fn000000000044E3A0
// Return size: 8
define fn000000000044E3A0
fn000000000044E3A0_entry:
	rsp = fp
	// succ:  l000000000044E3A0
l000000000044E3A0:
	// succ:  l000000000044E3A0_thunk_fn000000000044B410
l000000000044E3A0_thunk_fn000000000044B410:
	call fn000000000044B410 (retsize: 0;)
	return
	// succ:  fn000000000044E3A0_exit
fn000000000044E3A0_exit:


// fn000000000044E3B0
// Return size: 8
define fn000000000044E3B0
fn000000000044E3B0_entry:
	rsp = fp
	// succ:  l000000000044E3B0
l000000000044E3B0:
	// succ:  l000000000044E3B0_thunk_fn000000000044B560
l000000000044E3B0_thunk_fn000000000044B560:
	call fn000000000044B560 (retsize: 0;)
	return
	// succ:  fn000000000044E3B0_exit
fn000000000044E3B0_exit:


// fn000000000044E3C0
// Return size: 8
define fn000000000044E3C0
fn000000000044E3C0_entry:
	rsp = fp
	// succ:  l000000000044E3C0
l000000000044E3C0:
	// succ:  l000000000044E3C0_thunk_fn000000000044B6B0
l000000000044E3C0_thunk_fn000000000044B6B0:
	call fn000000000044B6B0 (retsize: 0;)
	return
	// succ:  fn000000000044E3C0_exit
fn000000000044E3C0_exit:


// fn000000000044E3D0
// Return size: 8
define fn000000000044E3D0
fn000000000044E3D0_entry:
	rsp = fp
	// succ:  l000000000044E3D0
l000000000044E3D0:
	// succ:  l000000000044E3D0_thunk_fn000000000044B800
l000000000044E3D0_thunk_fn000000000044B800:
	call fn000000000044B800 (retsize: 0;)
	return
	// succ:  fn000000000044E3D0_exit
fn000000000044E3D0_exit:


// fn000000000044E3E0
// Return size: 8
define fn000000000044E3E0
fn000000000044E3E0_entry:
	rsp = fp
	// succ:  l000000000044E3E0
l000000000044E3E0:
	// succ:  l000000000044E3E0_thunk_fn000000000044B950
l000000000044E3E0_thunk_fn000000000044B950:
	call fn000000000044B950 (retsize: 0;)
	return
	// succ:  fn000000000044E3E0_exit
fn000000000044E3E0_exit:


// fn000000000044E3F0
// Return size: 8
define fn000000000044E3F0
fn000000000044E3F0_entry:
	rsp = fp
	// succ:  l000000000044E3F0
l000000000044E3F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x77<64>
	rsi = rdx
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x77<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044E4A1
	// succ:  l000000000044E41A l000000000044E4A1
l000000000044E41A:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x78<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044E4CF
	// succ:  l000000000044E43C l000000000044E4CF
l000000000044E43C:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x58<64>:word64] = r9
	Mem0[rsp + 0x48<64>:word64] = r9
	rcx = rsp + 0x60<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	rdx = rsp + 0x7C<64>
	r10 = Mem0[rax:word64]
	Mem0[rsp + 0x20<64>:word64] = r8
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x30<64>:word64] = rdx
	rdx = rsp + 0x78<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x18<64>:word64] (retsize: 8;)
	eax = Mem0[rsp + 0x7C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi:word32] = eax
	// succ:  l000000000044E499
l000000000044E499:
	edx = Mem0[rsp + 0x78<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000044E4B0
	// succ:  l000000000044E4A1 l000000000044E4B0
l000000000044E4A1:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044E3F0_exit
l000000000044E4B0:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044E3F0_exit
l000000000044E4CF:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044E4F8
	// succ:  l000000000044E4DD l000000000044E4F8
l000000000044E4DD:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v19 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v19
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044E528
	// succ:  l000000000044E4F3 l000000000044E528
l000000000044E4F3:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044E4F8
l000000000044E4F8:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v20 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v20
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044E52D
	// succ:  l000000000044E511 l000000000044E52D
l000000000044E511:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044E499
	// succ:  l000000000044E499
l000000000044E528:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044E52D
l000000000044E52D:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000044E54F_thunk_fn000000000044E550
l000000000044E54F_thunk_fn000000000044E550:
	call fn000000000044E550 (retsize: 0;)
	return
	// succ:  fn000000000044E3F0_exit
fn000000000044E3F0_exit:


// fn000000000044E550
// Return size: 8
define fn000000000044E550
fn000000000044E550_entry:
	rsp = fp
	// succ:  l000000000044E550
l000000000044E550:
	// succ:  l000000000044E550_thunk_fn000000000044BAA0
l000000000044E550_thunk_fn000000000044BAA0:
	call fn000000000044BAA0 (retsize: 0;)
	return
	// succ:  fn000000000044E550_exit
fn000000000044E550_exit:


// fn000000000044E560
// Return size: 8
define fn000000000044E560
fn000000000044E560_entry:
	rsp = fp
	// succ:  l000000000044E560
l000000000044E560:
	// succ:  l000000000044E560_thunk_fn000000000044BBF0
l000000000044E560_thunk_fn000000000044BBF0:
	call fn000000000044BBF0 (retsize: 0;)
	return
	// succ:  fn000000000044E560_exit
fn000000000044E560_exit:


// fn000000000044E570
// Return size: 8
define fn000000000044E570
fn000000000044E570_entry:
	rsp = fp
	// succ:  l000000000044E570
l000000000044E570:
	// succ:  l000000000044E570_thunk_fn000000000044BD40
l000000000044E570_thunk_fn000000000044BD40:
	call fn000000000044BD40 (retsize: 0;)
	return
	// succ:  fn000000000044E570_exit
fn000000000044E570_exit:


// fn000000000044E580
// Return size: 8
define fn000000000044E580
fn000000000044E580_entry:
	rsp = fp
	// succ:  l000000000044E580
l000000000044E580:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x77<64>
	rsi = rdx
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x77<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044E645
	// succ:  l000000000044E5AA l000000000044E645
l000000000044E5AA:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x78<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044E69A
	// succ:  l000000000044E5CC l000000000044E69A
l000000000044E5CC:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x58<64>:word64] = r9
	Mem0[rsp + 0x48<64>:word64] = r9
	rcx = rsp + 0x60<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	rdx = rsp + 0x7C<64>
	r10 = Mem0[rax:word64]
	Mem0[rsp + 0x20<64>:word64] = r8
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x30<64>:word64] = rdx
	rdx = rsp + 0x78<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x18<64>:word64] (retsize: 8;)
	eax = Mem0[rsp + 0x7C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFF8000<32>)
	branch Test(GE,SO) l000000000044E652
	// succ:  l000000000044E62E l000000000044E652
l000000000044E62E:
	eax = Mem0[rsp + 0x78<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = 0xFFFF8000<32>
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsi:word16] = cx
	eax = eax | 4<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x78<64>:word32] = eax
	// succ:  l000000000044E641
l000000000044E641:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000044E670
	// succ:  l000000000044E645 l000000000044E670
l000000000044E645:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044E580_exit
l000000000044E652:
	SCZO = cond(eax - 0x7FFF<32>)
	branch Test(LE,SZO) l000000000044E691
	// succ:  l000000000044E659 l000000000044E691
l000000000044E659:
	eax = Mem0[rsp + 0x78<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = 0x7FFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsi:word16] = dx
	eax = eax | 4<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(eax & eax)
	C = false
	Mem0[rsp + 0x78<64>:word32] = eax
	branch Test(EQ,Z) l000000000044E645
	// succ:  l000000000044E670 l000000000044E645
l000000000044E670:
	rdx = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rcx)
	eax = eax | Mem0[rcx + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000046E370 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044E580_exit
l000000000044E691:
	Mem0[rsi:word16] = ax
	eax = Mem0[rsp + 0x78<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l000000000044E641
	// succ:  l000000000044E641
l000000000044E69A:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044E6C3
	// succ:  l000000000044E6A8 l000000000044E6C3
l000000000044E6A8:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v23 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v23
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044E6FA
	// succ:  l000000000044E6BE l000000000044E6FA
l000000000044E6BE:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044E6C3
l000000000044E6C3:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v25 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v25
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044E6FF
	// succ:  l000000000044E6DC l000000000044E6FF
l000000000044E6DC:
	call fn0000000000475A70 (retsize: 8;)
	eax = Mem0[rsp + 0x78<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l000000000044E641
	// succ:  l000000000044E641
l000000000044E6FA:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044E6FF
l000000000044E6FF:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000044E71F_thunk_fn000000000044E720
l000000000044E71F_thunk_fn000000000044E720:
	call fn000000000044E720 (retsize: 0;)
	return
	// succ:  fn000000000044E580_exit
fn000000000044E580_exit:


// fn000000000044E720
// Return size: 8
define fn000000000044E720
fn000000000044E720_entry:
	rsp = fp
	// succ:  l000000000044E720
l000000000044E720:
	// succ:  l000000000044E720_thunk_fn000000000044BE90
l000000000044E720_thunk_fn000000000044BE90:
	call fn000000000044BE90 (retsize: 0;)
	return
	// succ:  fn000000000044E720_exit
fn000000000044E720_exit:


// fn000000000044E730
// Return size: 8
define fn000000000044E730
fn000000000044E730_entry:
	rsp = fp
	// succ:  l000000000044E730
l000000000044E730:
	// succ:  l000000000044E730_thunk_fn000000000044BFE0
l000000000044E730_thunk_fn000000000044BFE0:
	call fn000000000044BFE0 (retsize: 0;)
	return
	// succ:  fn000000000044E730_exit
fn000000000044E730_exit:


// fn000000000044E740
// Return size: 8
define fn000000000044E740
fn000000000044E740_entry:
	rsp = fp
	// succ:  l000000000044E740
l000000000044E740:
	// succ:  l000000000044E740_thunk_fn000000000044C130
l000000000044E740_thunk_fn000000000044C130:
	call fn000000000044C130 (retsize: 0;)
	return
	// succ:  fn000000000044E740_exit
fn000000000044E740_exit:


// fn000000000044E750
// Return size: 8
define fn000000000044E750
fn000000000044E750_entry:
	rsp = fp
	goto l000000000044E750
	// succ:  l000000000044E750
l000000000044D8BF_thunk_fn000000000044D8C0:
	call fn000000000044D8C0 (retsize: 0;)
	return
	// succ:  fn000000000044E750_exit
l000000000044E750:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rbx = rsp + 0x20<64>
	rsi = rcx
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	rdx = rcx
	rcx = rbx
	call fn000000000044ED50 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044E794
	goto l000000000044E773
	// succ:  l000000000044E773 l000000000044E794
l000000000044E750:
	goto l000000000044D8BF_thunk_fn000000000044D8C0
	// succ:  l000000000044D8BF_thunk_fn000000000044D8C0
l000000000044E773:
	rax = Mem0[rsi:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rax = Mem0[rsi + 0xE8<64> + rax:word64]
	rcx = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(rcx - Mem0[rax + 0x30<64>:word64])
	branch Test(UGE,C) l000000000044E800
	// succ:  l000000000044E78C l000000000044E800
l000000000044E78C:
	Mem0[rcx:byte] = dil
	v15 = Mem0[rax + 0x28<64>:word64] + 1<64>
	Mem0[rax + 0x28<64>:word64] = v15
	SCZO = cond(v15)
	// succ:  l000000000044E794
l000000000044E794:
	r8 = Mem0[rsp + 0x28<64>:word64]
	rax = Mem0[r8:word64]
	rbx = r8
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	SZO = cond(Mem0[rbx + 0x19<64>:byte] & 0x20<8>)
	C = false
	branch Test(EQ,Z) l000000000044E7C9
	// succ:  l000000000044E7A9 l000000000044E7C9
l000000000044E7A9:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000044E7C9
	// succ:  l000000000044E7B2 l000000000044E7C9
l000000000044E7B2:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044E7C9
	// succ:  l000000000044E7BE l000000000044E7C9
l000000000044E7BE:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044E7D4
	// succ:  l000000000044E7C9 l000000000044E7D4
l000000000044E7C9:
	rax = rsi
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044E750_exit
l000000000044E7D4:
	rcx = Mem0[rsp + 0x28<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044E750_exit
l000000000044E800:
	r8 = Mem0[rax:word64]
	edx = CONVERT(dil, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	call Mem0[r8 + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000044E794
	// succ:  l000000000044E813 l000000000044E794
l000000000044E813:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	goto l000000000044E794
	// succ:  l000000000044E794
fn000000000044E750_exit:


// fn000000000044E8B0
// Return size: 8
define fn000000000044E8B0
fn000000000044E8B0_entry:
	rsp = fp
	// succ:  l000000000044E8B0
l000000000044E8B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rcx + 0xE8<64> + rax:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044E8D7
	// succ:  l000000000044E8CC l000000000044E8D7
l000000000044E8CC:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044E8E0
	// succ:  l000000000044E8D7 l000000000044E8E0
l000000000044E8D7:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044E8B0_exit
l000000000044E8E0:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044E8B0_exit
fn000000000044E8B0_exit:


// fn000000000044E970
// Return size: 8
define fn000000000044E970
fn000000000044E970_entry:
	rsp = fp
	// succ:  l000000000044E970
l000000000044E970:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r9 = Mem0[rdx:word64]
	rbx = rcx
	r10 = Mem0[rdx + 8<64>:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	SZO = cond(Mem0[rcx + 0x20<64>:byte] & 5<8>)
	C = false
	branch Test(EQ,Z) l000000000044E995
	// succ:  l000000000044E98C l000000000044E995
l000000000044E98C:
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044E970_exit
l000000000044E995:
	rdx = Mem0[rcx + 0xE8<64>:word64]
	r8 = rsp + 0x20<64>
	Mem0[rsp + 0x20<64>:word64] = r9
	rcx = rsp + 0x30<64>
	Mem0[rsp + 0x28<64>:word64] = r10
	r9d = 0x10<32>
	r9 = CONVERT(r9d, word32, uint64)
	rax = Mem0[rdx:word64]
	call Mem0[rax + 0x28<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x30<64>:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l000000000044E98C
	// succ:  l000000000044E9C4 l000000000044E98C
l000000000044E9C4:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	goto l000000000044E98C
	// succ:  l000000000044E98C
fn000000000044E970_exit:


// fn000000000044EA50
// Return size: 8
define fn000000000044EA50
fn000000000044EA50_entry:
	rsp = fp
	// succ:  l000000000044EA50
l000000000044EA50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	SZO = cond(Mem0[rcx + 0x20<64>:byte] & 5<8>)
	C = false
	branch Test(EQ,Z) l000000000044EA70
	// succ:  l000000000044EA65 l000000000044EA70
l000000000044EA65:
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044EA50_exit
l000000000044EA70:
	rax = Mem0[rcx + 0xE8<64>:word64]
	r9d = r8d
	r9 = CONVERT(r9d, word32, uint64)
	rcx = rsp + 0x30<64>
	r8 = rdx
	r10 = Mem0[rax:word64]
	rdx = rax
	Mem0[rsp + 0x20<64>:word32] = 0x10<32>
	call Mem0[r10 + 0x20<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x30<64>:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l000000000044EA65
	// succ:  l000000000044EA9C l000000000044EA65
l000000000044EA9C:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	goto l000000000044EA65
	// succ:  l000000000044EA65
fn000000000044EA50_exit:


// fn000000000044EB30
// Return size: 8
define fn000000000044EB30
fn000000000044EB30_entry:
	rsp = fp
	// succ:  l000000000044EB30
l000000000044EB30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rcx + 8<64>:word32] = 0<32>
	rcx = rdx
	rsi = rdx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	SZO = cond(Mem0[rcx + 0x20<64>:byte] & 5<8>)
	C = false
	branch Test(EQ,Z) l000000000044EB64
	// succ:  l000000000044EB5A l000000000044EB64
l000000000044EB5A:
	rax = rbx
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044EB30_exit
l000000000044EB64:
	rdx = Mem0[rcx + 0xE8<64>:word64]
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	rcx = rsp + 0x30<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rax = Mem0[rdx:word64]
	Mem0[rsp + 0x20<64>:word32] = 0x10<32>
	call Mem0[rax + 0x20<64>:word64] (retsize: 8;)
	rax = Mem0[rsp + 0x30<64>:word64]
	Mem0[rbx:word64] = rax
	eax = Mem0[rsp + 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 8<64>:word32] = eax
	rax = rbx
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044EB30_exit
fn000000000044EB30_exit:


// fn000000000044EC10
// Return size: 8
define fn000000000044EC10
fn000000000044EC10_entry:
	rsp = fp
	// succ:  l000000000044EC10
l000000000044EC10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rdi = rsp + 0x20<64>
	rsi = rcx
	rbp = rdx
	rdx = rcx
	rbx = r8
	rcx = rdi
	call fn000000000044ED50 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044EC6D
	// succ:  l000000000044EC38 l000000000044EC6D
l000000000044EC38:
	rax = Mem0[rsi:word64]
	r8 = rbx
	rdx = rbp
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rsi + 0xE8<64> + rax:word64]
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rbx - rax)
	branch Test(EQ,Z) l000000000044EC6D
	// succ:  l000000000044EC58 l000000000044EC6D
l000000000044EC58:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	// succ:  l000000000044EC6D
l000000000044EC6D:
	r8 = Mem0[rsp + 0x28<64>:word64]
	rax = Mem0[r8:word64]
	rbx = r8
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	SZO = cond(Mem0[rbx + 0x19<64>:byte] & 0x20<8>)
	C = false
	branch Test(EQ,Z) l000000000044ECA2
	// succ:  l000000000044EC82 l000000000044ECA2
l000000000044EC82:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000044ECA2
	// succ:  l000000000044EC8B l000000000044ECA2
l000000000044EC8B:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044ECA2
	// succ:  l000000000044EC97 l000000000044ECA2
l000000000044EC97:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044ECB0
	// succ:  l000000000044ECA2 l000000000044ECB0
l000000000044ECA2:
	rax = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044EC10_exit
l000000000044ECB0:
	rcx = Mem0[rsp + 0x28<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044EC10_exit
fn000000000044EC10_exit:


// fn000000000044ED50
// Return size: 8
define fn000000000044ED50
fn000000000044ED50_entry:
	rsp = fp
	// succ:  l000000000044ED50
l000000000044ED50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx
	rbx = rdx
	Mem0[rcx:byte] = 0<8>
	Mem0[rsi + 8<64>:word64] = rdx
	rdx = Mem0[rdx:word64]
	rax = rbx
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	rcx = Mem0[rax + 0xD8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044ED88
	// succ:  l000000000044ED79 l000000000044ED88
l000000000044ED79:
	edx = Mem0[rax + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000044EDA0
	// succ:  l000000000044ED80 l000000000044EDA0
l000000000044ED80:
	call fn000000000044E8B0 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	// succ:  l000000000044ED88
l000000000044ED88:
	rax = rbx
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	edx = Mem0[rax + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000044EDA0
	// succ:  l000000000044ED96 l000000000044EDA0
l000000000044ED96:
	Mem0[rsi:byte] = 1<8>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044ED50_exit
l000000000044EDA0:
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000044EDAC_thunk_fn000000000046E370
l000000000044EDAC_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn000000000044ED50_exit
fn000000000044ED50_exit:


// fn000000000044EDC0
// Return size: 8
define fn000000000044EDC0
fn000000000044EDC0_entry:
	rsp = fp
	// succ:  l000000000044EDC0
l000000000044EDC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx
	rbx = rdx
	Mem0[rcx:byte] = 0<8>
	Mem0[rsi + 8<64>:word64] = rdx
	rdx = Mem0[rdx:word64]
	rax = rbx
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	rcx = Mem0[rax + 0xD8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044EDF8
	// succ:  l000000000044EDE9 l000000000044EDF8
l000000000044EDE9:
	edx = Mem0[rax + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000044EE10
	// succ:  l000000000044EDF0 l000000000044EE10
l000000000044EDF0:
	call fn000000000044E8B0 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	// succ:  l000000000044EDF8
l000000000044EDF8:
	rax = rbx
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	edx = Mem0[rax + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000044EE10
	// succ:  l000000000044EE06 l000000000044EE10
l000000000044EE06:
	Mem0[rsi:byte] = 1<8>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044EDC0_exit
l000000000044EE10:
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000044EE1C_thunk_fn000000000046E370
l000000000044EE1C_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn000000000044EDC0_exit
fn000000000044EDC0_exit:


// fn000000000044EE30
// Return size: 8
define fn000000000044EE30
fn000000000044EE30_entry:
	rsp = fp
	// succ:  l000000000044EE30
l000000000044EE30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 8<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000044EE6D
	// succ:  l000000000044EE4A l000000000044EE6D
l000000000044EE4A:
	rsi = rcx
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000044EE6D
	// succ:  l000000000044EE56 l000000000044EE6D
l000000000044EE56:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044EE6D
	// succ:  l000000000044EE62 l000000000044EE6D
l000000000044EE62:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044EE74
	// succ:  l000000000044EE6D l000000000044EE74
l000000000044EE6D:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044EE30_exit
l000000000044EE74:
	rcx = Mem0[rsi + 8<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000044EE8B_thunk_fn000000000046E370
l000000000044EE8B_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn000000000044EE30_exit
fn000000000044EE30_exit:


// fn000000000044EE90
// Return size: 8
define fn000000000044EE90
fn000000000044EE90_entry:
	rsp = fp
	// succ:  l000000000044EE90
l000000000044EE90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 8<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000044EECD
	// succ:  l000000000044EEAA l000000000044EECD
l000000000044EEAA:
	rsi = rcx
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000044EECD
	// succ:  l000000000044EEB6 l000000000044EECD
l000000000044EEB6:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044EECD
	// succ:  l000000000044EEC2 l000000000044EECD
l000000000044EEC2:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044EED4
	// succ:  l000000000044EECD l000000000044EED4
l000000000044EECD:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044EE90_exit
l000000000044EED4:
	rcx = Mem0[rsi + 8<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000044EEEB_thunk_fn000000000046E370
l000000000044EEEB_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn000000000044EE90_exit
fn000000000044EE90_exit:


// fn000000000044EEF0
// Return size: 8
define fn000000000044EEF0
fn000000000044EEF0_entry:
	rsp = fp
	// succ:  l000000000044EEF0
l000000000044EEF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rsi = r8
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rcx + 0xE8<64> + rax:word64]
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rsi - rax)
	branch Test(EQ,Z) l000000000044EF31
	// succ:  l000000000044EF16 l000000000044EF31
l000000000044EF16:
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000044EF2C_thunk_fn000000000046E370
l000000000044EF2C_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn000000000044EEF0_exit
l000000000044EF31:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044EEF0_exit
fn000000000044EEF0_exit:


// fn000000000044EF40
// Return size: 0
define fn000000000044EF40
fn000000000044EF40_entry:
	rsp = fp
	// succ:  l000000000044EF40
l000000000044EF40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x68<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x50<64>
	rsi = rcx
	r12 = rdx
	rdx = rcx
	rcx = rbp
	call fn000000000044ED50 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x50<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044F02E
	// succ:  l000000000044EF6D l000000000044F02E
l000000000044EF6D:
	rax = Mem0[rsi:word64]
	rbx = rsi
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	rdi = Mem0[rbx + 0xF8<64>:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000044F0D8
	// succ:  l000000000044EF87 l000000000044F0D8
l000000000044EF87:
	SCZO = cond(Mem0[rbx + 0xE1<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000044EFD0
	// succ:  l000000000044EF90 l000000000044EFD0
l000000000044EF90:
	r13 = Mem0[rbx + 0xF0<64>:word64]
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l000000000044F101
	// succ:  l000000000044EFA0 l000000000044F101
l000000000044EFA0:
	SCZO = cond(Mem0[r13 + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044F0A0
	// succ:  l000000000044EFAB l000000000044F0A0
l000000000044EFAB:
	edx = CONVERT(Mem0[r13 + 0x59<64>:byte], byte, int32)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000044EFB2
l000000000044EFB2:
	Mem0[rbx + 0xE0<64>:byte] = al
	rax = Mem0[rsi:word64]
	r9 = rsi
	Mem0[rbx + 0xE1<64>:byte] = 1<8>
	r9 = r9 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r9)
	goto l000000000044EFDA
	// succ:  l000000000044EFDA
l000000000044EFD0:
	edx = CONVERT(Mem0[rbx + 0xE0<64>:byte], byte, int32)
	r9 = rbx
	// succ:  l000000000044EFDA
l000000000044EFDA:
	r8 = Mem0[r9 + 0xE8<64>:word64]
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	rcx = rsp + 0x40<64>
	SZO = cond(r8 & r8)
	C = false
	Mem0[rsp + 0x30<64>:word64] = r8
	r8 = rsp + 0x30<64>
	al = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = Mem0[rdi:word64]
	Mem0[rsp + 0x20<64>:word32] = edx
	Mem0[rsp + 0x28<64>:word64] = r12
	rdx = rdi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x48<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044F02E
	// succ:  l000000000044F019 l000000000044F02E
l000000000044F019:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	// succ:  l000000000044F02E
l000000000044F02E:
	rax = Mem0[rsp + 0x58<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000044F063
	// succ:  l000000000044F043 l000000000044F063
l000000000044F043:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000044F063
	// succ:  l000000000044F04C l000000000044F063
l000000000044F04C:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044F063
	// succ:  l000000000044F058 l000000000044F063
l000000000044F058:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044F073
	// succ:  l000000000044F063 l000000000044F073
l000000000044F063:
	rax = rsi
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044EF40_exit
l000000000044F073:
	rcx = Mem0[rsp + 0x58<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044EF40_exit
l000000000044F0A0:
	rcx = r13
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[r13 + 0<64>:word64]
	rcx = 0x000000000042B5F0<p64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = Mem0[rax + 0x30<64>:word64]
	eax = 0x20<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8 - rcx)
	branch Test(EQ,Z) l000000000044EFB2
	// succ:  l000000000044F0CA l000000000044EFB2
l000000000044F0CA:
	rcx = r13
	call r8 (retsize: 8;)
	edx = CONVERT(al, byte, int32)
	goto l000000000044EFB2
	// succ:  l000000000044EFB2
l000000000044F0D8:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044F128
	// succ:  l000000000044F0E6 l000000000044F128
l000000000044F0E6:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v21 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v21
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044F123
	// succ:  l000000000044F0FC l000000000044F123
l000000000044F0FC:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044F101
l000000000044F101:
	call fn0000000000470820 (retsize: 8;)
	rbx = rax
	// succ:  l000000000044F109
l000000000044F109:
	rcx = rbp
	call fn000000000044EE30 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044F109
	// succ:  l000000000044F109
l000000000044F123:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044F128
l000000000044F128:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdi = rsi
	rdi = rdi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdi)
	v22 = Mem0[rdi + 0x20<64>:word32] | 1<32>
	Mem0[rdi + 0x20<64>:word32] = v22
	SZO = cond(Mem0[rdi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rdi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044F14B
	// succ:  l000000000044F141 l000000000044F14B
l000000000044F141:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044F02E
	// succ:  l000000000044F02E
l000000000044F14B:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044F109
	// succ:  l000000000044F109
fn000000000044EF40_exit:


// fn000000000044F160
// Return size: 0
define fn000000000044F160
fn000000000044F160_entry:
	rsp = fp
	// succ:  l000000000044F160
l000000000044F160:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x68<64>
	SCZO = cond(rsp)
	r12 = rsp + 0x50<64>
	rsi = rcx
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	rdx = rcx
	rcx = r12
	call fn000000000044ED50 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x50<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044F254
	// succ:  l000000000044F18C l000000000044F254
l000000000044F18C:
	rax = Mem0[rsi:word64]
	rbx = rsi
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	rbp = Mem0[rbx + 0xF8<64>:word64]
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000044F30F
	// succ:  l000000000044F1A6 l000000000044F30F
l000000000044F1A6:
	SCZO = cond(Mem0[rbx + 0xE1<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000044F1F0
	// succ:  l000000000044F1AF l000000000044F1F0
l000000000044F1AF:
	r13 = Mem0[rbx + 0xF0<64>:word64]
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l000000000044F338
	// succ:  l000000000044F1BF l000000000044F338
l000000000044F1BF:
	SCZO = cond(Mem0[r13 + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044F2D0
	// succ:  l000000000044F1CA l000000000044F2D0
l000000000044F1CA:
	r8d = CONVERT(Mem0[r13 + 0x59<64>:byte], byte, int32)
	eax = r8d
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000044F1D2
l000000000044F1D2:
	Mem0[rbx + 0xE0<64>:byte] = al
	rax = Mem0[rsi:word64]
	r9 = rsi
	Mem0[rbx + 0xE1<64>:byte] = 1<8>
	r9 = r9 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r9)
	goto l000000000044F1FB
	// succ:  l000000000044F1FB
l000000000044F1F0:
	r8d = CONVERT(Mem0[rbx + 0xE0<64>:byte], byte, int32)
	r9 = rbx
	// succ:  l000000000044F1FB
l000000000044F1FB:
	rdx = Mem0[r9 + 0xE8<64>:word64]
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	edi = CONVERT(dil, byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	rcx = rsp + 0x40<64>
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rsp + 0x30<64>:word64] = rdx
	rdx = rbp
	al = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = Mem0[rbp + 0<64>:word64]
	Mem0[rsp + 0x20<64>:word32] = r8d
	Mem0[rsp + 0x28<64>:word32] = edi
	r8 = rsp + 0x30<64>
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x48<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044F254
	// succ:  l000000000044F23F l000000000044F254
l000000000044F23F:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	// succ:  l000000000044F254
l000000000044F254:
	rax = Mem0[rsp + 0x58<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000044F289
	// succ:  l000000000044F269 l000000000044F289
l000000000044F269:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000044F289
	// succ:  l000000000044F272 l000000000044F289
l000000000044F272:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044F289
	// succ:  l000000000044F27E l000000000044F289
l000000000044F27E:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044F2A0
	// succ:  l000000000044F289 l000000000044F2A0
l000000000044F289:
	rax = rsi
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044F160_exit
l000000000044F2A0:
	rcx = Mem0[rsp + 0x58<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044F160_exit
l000000000044F2D0:
	rcx = r13
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[r13 + 0<64>:word64]
	rdx = 0x000000000042B5F0<p64>
	r8d = 0x20<32>
	r8 = CONVERT(r8d, word32, uint64)
	r9 = Mem0[rax + 0x30<64>:word64]
	eax = 0x20<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r9 - rdx)
	branch Test(EQ,Z) l000000000044F1D2
	// succ:  l000000000044F2FB l000000000044F1D2
l000000000044F2FB:
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r13
	call r9 (retsize: 8;)
	r8d = CONVERT(al, byte, int32)
	goto l000000000044F1D2
	// succ:  l000000000044F1D2
l000000000044F30F:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044F35F
	// succ:  l000000000044F31D l000000000044F35F
l000000000044F31D:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v24 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v24
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044F35A
	// succ:  l000000000044F333 l000000000044F35A
l000000000044F333:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044F338
l000000000044F338:
	call fn0000000000470820 (retsize: 8;)
	rbx = rax
	// succ:  l000000000044F340
l000000000044F340:
	rcx = r12
	call fn000000000044EE30 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044F340
	// succ:  l000000000044F340
l000000000044F35A:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044F35F
l000000000044F35F:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdi = rsi
	rdi = rdi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdi)
	v25 = Mem0[rdi + 0x20<64>:word32] | 1<32>
	Mem0[rdi + 0x20<64>:word32] = v25
	SZO = cond(Mem0[rdi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rdi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044F382
	// succ:  l000000000044F378 l000000000044F382
l000000000044F378:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044F254
	// succ:  l000000000044F254
l000000000044F382:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044F340
	// succ:  l000000000044F340
fn000000000044F160_exit:


// fn000000000044F3A0
// Return size: 0
define fn000000000044F3A0
fn000000000044F3A0_entry:
	rsp = fp
	// succ:  l000000000044F3A0
l000000000044F3A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x70<64>
	SCZO = cond(rsp)
	Mem0[rsp + 0x60<64>:word128] = xmm6
	rbp = rsp + 0x50<64>
	rdx = rcx
	rsi = rcx
	xmm6 = xmm1
	rcx = rbp
	call fn000000000044ED50 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x50<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044F493
	// succ:  l000000000044F3D1 l000000000044F493
l000000000044F3D1:
	rax = Mem0[rsi:word64]
	rbx = rsi
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	rdi = Mem0[rbx + 0xF8<64>:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000044F53F
	// succ:  l000000000044F3EB l000000000044F53F
l000000000044F3EB:
	SCZO = cond(Mem0[rbx + 0xE1<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000044F432
	// succ:  l000000000044F3F4 l000000000044F432
l000000000044F3F4:
	r12 = Mem0[rbx + 0xF0<64>:word64]
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l000000000044F568
	// succ:  l000000000044F404 l000000000044F568
l000000000044F404:
	SCZO = cond(Mem0[r12 + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044F500
	// succ:  l000000000044F410 l000000000044F500
l000000000044F410:
	r8d = CONVERT(Mem0[r12 + 0x59<64>:byte], byte, int32)
	eax = r8d
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000044F419
l000000000044F419:
	Mem0[rbx + 0xE0<64>:byte] = al
	rax = Mem0[rsi:word64]
	r9 = rsi
	Mem0[rbx + 0xE1<64>:byte] = 1<8>
	r9 = r9 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r9)
	goto l000000000044F43D
	// succ:  l000000000044F43D
l000000000044F432:
	r8d = CONVERT(Mem0[rbx + 0xE0<64>:byte], byte, int32)
	r9 = rbx
	// succ:  l000000000044F43D
l000000000044F43D:
	rdx = Mem0[r9 + 0xE8<64>:word64]
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	rcx = rsp + 0x40<64>
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rsp + 0x30<64>:word64] = rdx
	rdx = rdi
	al = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = Mem0[rdi:word64]
	Mem0[rsp + 0x28<64>:real64] = SLICE(xmm6, real64, 0)
	Mem0[rsp + 0x20<64>:word32] = r8d
	r8 = rsp + 0x30<64>
	call Mem0[rax + 0x38<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x48<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044F493
	// succ:  l000000000044F47E l000000000044F493
l000000000044F47E:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	// succ:  l000000000044F493
l000000000044F493:
	rax = Mem0[rsp + 0x58<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000044F4C8
	// succ:  l000000000044F4A8 l000000000044F4C8
l000000000044F4A8:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000044F4C8
	// succ:  l000000000044F4B1 l000000000044F4C8
l000000000044F4B1:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044F4C8
	// succ:  l000000000044F4BD l000000000044F4C8
l000000000044F4BD:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044F4E0
	// succ:  l000000000044F4C8 l000000000044F4E0
l000000000044F4C8:
	xmm6 = Mem0[rsp + 0x60<64>:word128]
	rax = rsi
	rsp = rsp + 0x70<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044F3A0_exit
l000000000044F4E0:
	rcx = Mem0[rsp + 0x58<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	goto l000000000044F4C8
	// succ:  l000000000044F4C8
l000000000044F500:
	rcx = r12
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[r12:word64]
	rdx = 0x000000000042B5F0<p64>
	r8d = 0x20<32>
	r8 = CONVERT(r8d, word32, uint64)
	r9 = Mem0[rax + 0x30<64>:word64]
	eax = 0x20<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r9 - rdx)
	branch Test(EQ,Z) l000000000044F419
	// succ:  l000000000044F52B l000000000044F419
l000000000044F52B:
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r12
	call r9 (retsize: 8;)
	r8d = CONVERT(al, byte, int32)
	goto l000000000044F419
	// succ:  l000000000044F419
l000000000044F53F:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044F58F
	// succ:  l000000000044F54D l000000000044F58F
l000000000044F54D:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v23 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v23
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044F58A
	// succ:  l000000000044F563 l000000000044F58A
l000000000044F563:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044F568
l000000000044F568:
	call fn0000000000470820 (retsize: 8;)
	rbx = rax
	// succ:  l000000000044F570
l000000000044F570:
	rcx = rbp
	call fn000000000044EE30 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044F570
	// succ:  l000000000044F570
l000000000044F58A:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044F58F
l000000000044F58F:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdi = rsi
	rdi = rdi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdi)
	v24 = Mem0[rdi + 0x20<64>:word32] | 1<32>
	Mem0[rdi + 0x20<64>:word32] = v24
	SZO = cond(Mem0[rdi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rdi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044F5B2
	// succ:  l000000000044F5A8 l000000000044F5B2
l000000000044F5A8:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044F493
	// succ:  l000000000044F493
l000000000044F5B2:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044F570
	// succ:  l000000000044F570
fn000000000044F3A0_exit:


// fn000000000044F5D0
// Return size: 8
define fn000000000044F5D0
fn000000000044F5D0_entry:
	rsp = fp
	// succ:  l000000000044F5D0
l000000000044F5D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp + 0xFFFFFFFFFFFFFF80<64>
	SCZO = cond(rsp)
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rdx:real80], real80, real64)
	rbp = rsp + 0x70<64>
	rdx = rcx
	rsi = rcx
	rcx = rbp
	Mem0[rsp + 0x30<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call fn000000000044ED50 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x70<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044F6CD
	// succ:  l000000000044F5FE l000000000044F6CD
l000000000044F5FE:
	rax = Mem0[rsi:word64]
	rbx = rsi
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	rdi = Mem0[rbx + 0xF8<64>:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000044F774
	// succ:  l000000000044F618 l000000000044F774
l000000000044F618:
	SCZO = cond(Mem0[rbx + 0xE1<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000044F660
	// succ:  l000000000044F621 l000000000044F660
l000000000044F621:
	r12 = Mem0[rbx + 0xF0<64>:word64]
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l000000000044F79D
	// succ:  l000000000044F631 l000000000044F79D
l000000000044F631:
	SCZO = cond(Mem0[r12 + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044F735
	// succ:  l000000000044F63D l000000000044F735
l000000000044F63D:
	r8d = CONVERT(Mem0[r12 + 0x59<64>:byte], byte, int32)
	eax = r8d
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000044F646
l000000000044F646:
	Mem0[rbx + 0xE0<64>:byte] = al
	rax = Mem0[rsi:word64]
	r9 = rsi
	Mem0[rbx + 0xE1<64>:byte] = 1<8>
	r9 = r9 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r9)
	goto l000000000044F66B
	// succ:  l000000000044F66B
l000000000044F660:
	r8d = CONVERT(Mem0[rbx + 0xE0<64>:byte], byte, int32)
	r9 = rbx
	// succ:  l000000000044F66B
l000000000044F66B:
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rsp + 0x30<64>:real80], real80, real64)
	rdx = Mem0[r9 + 0xE8<64>:word64]
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	rcx = rsp + 0x60<64>
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rsp + 0x50<64>:word64] = rdx
	rdx = rsp + 0x40<64>
	al = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rsp + 0x58<64>:word64] = rax
	rax = Mem0[rdi:word64]
	Mem0[rsp + 0x28<64>:word64] = rdx
	Mem0[rsp + 0x20<64>:word32] = r8d
	rdx = rdi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call Mem0[rax + 0x40<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x68<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044F6CD
	// succ:  l000000000044F6B8 l000000000044F6CD
l000000000044F6B8:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	// succ:  l000000000044F6CD
l000000000044F6CD:
	rax = Mem0[rsp + 0x78<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000044F702
	// succ:  l000000000044F6E2 l000000000044F702
l000000000044F6E2:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000044F702
	// succ:  l000000000044F6EB l000000000044F702
l000000000044F6EB:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044F702
	// succ:  l000000000044F6F7 l000000000044F702
l000000000044F6F7:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044F710
	// succ:  l000000000044F702 l000000000044F710
l000000000044F702:
	rax = rsi
	rsp = rsp - 0xFFFFFFFFFFFFFF80<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044F5D0_exit
l000000000044F710:
	rcx = Mem0[rsp + 0x78<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rsi
	rsp = rsp - 0xFFFFFFFFFFFFFF80<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044F5D0_exit
l000000000044F735:
	rcx = r12
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[r12:word64]
	rdx = 0x000000000042B5F0<p64>
	r8d = 0x20<32>
	r8 = CONVERT(r8d, word32, uint64)
	r9 = Mem0[rax + 0x30<64>:word64]
	eax = 0x20<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r9 - rdx)
	branch Test(EQ,Z) l000000000044F646
	// succ:  l000000000044F760 l000000000044F646
l000000000044F760:
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r12
	call r9 (retsize: 8;)
	r8d = CONVERT(al, byte, int32)
	goto l000000000044F646
	// succ:  l000000000044F646
l000000000044F774:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044F7C4
	// succ:  l000000000044F782 l000000000044F7C4
l000000000044F782:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v22 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v22
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044F7BF
	// succ:  l000000000044F798 l000000000044F7BF
l000000000044F798:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044F79D
l000000000044F79D:
	call fn0000000000470820 (retsize: 8;)
	rbx = rax
	// succ:  l000000000044F7A5
l000000000044F7A5:
	rcx = rbp
	call fn000000000044EE30 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044F7A5
	// succ:  l000000000044F7A5
l000000000044F7BF:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044F7C4
l000000000044F7C4:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdi = rsi
	rdi = rdi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdi)
	v23 = Mem0[rdi + 0x20<64>:word32] | 1<32>
	Mem0[rdi + 0x20<64>:word32] = v23
	SZO = cond(Mem0[rdi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rdi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044F7E7
	// succ:  l000000000044F7DD l000000000044F7E7
l000000000044F7DD:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044F6CD
	// succ:  l000000000044F6CD
l000000000044F7E7:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044F7A5
	// succ:  l000000000044F7A5
fn000000000044F5D0_exit:


// fn000000000044F800
// Return size: 0
define fn000000000044F800
fn000000000044F800_entry:
	rsp = fp
	// succ:  l000000000044F800
l000000000044F800:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x68<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x50<64>
	rsi = rcx
	r12d = edx
	r12 = CONVERT(r12d, word32, uint64)
	rdx = rcx
	rcx = rbp
	call fn000000000044ED50 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x50<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044F8EE
	// succ:  l000000000044F82D l000000000044F8EE
l000000000044F82D:
	rax = Mem0[rsi:word64]
	rbx = rsi
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	rdi = Mem0[rbx + 0xF8<64>:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000044F998
	// succ:  l000000000044F847 l000000000044F998
l000000000044F847:
	SCZO = cond(Mem0[rbx + 0xE1<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000044F890
	// succ:  l000000000044F850 l000000000044F890
l000000000044F850:
	r13 = Mem0[rbx + 0xF0<64>:word64]
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l000000000044F9C1
	// succ:  l000000000044F860 l000000000044F9C1
l000000000044F860:
	SCZO = cond(Mem0[r13 + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044F960
	// succ:  l000000000044F86B l000000000044F960
l000000000044F86B:
	edx = CONVERT(Mem0[r13 + 0x59<64>:byte], byte, int32)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000044F872
l000000000044F872:
	Mem0[rbx + 0xE0<64>:byte] = al
	rax = Mem0[rsi:word64]
	r9 = rsi
	Mem0[rbx + 0xE1<64>:byte] = 1<8>
	r9 = r9 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r9)
	goto l000000000044F89A
	// succ:  l000000000044F89A
l000000000044F890:
	edx = CONVERT(Mem0[rbx + 0xE0<64>:byte], byte, int32)
	r9 = rbx
	// succ:  l000000000044F89A
l000000000044F89A:
	r8 = Mem0[r9 + 0xE8<64>:word64]
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	rcx = rsp + 0x40<64>
	SZO = cond(r8 & r8)
	C = false
	Mem0[rsp + 0x30<64>:word64] = r8
	r8 = rsp + 0x30<64>
	al = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = Mem0[rdi:word64]
	Mem0[rsp + 0x20<64>:word32] = edx
	Mem0[rsp + 0x28<64>:word32] = r12d
	rdx = rdi
	call Mem0[rax + 0x18<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x48<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044F8EE
	// succ:  l000000000044F8D9 l000000000044F8EE
l000000000044F8D9:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	// succ:  l000000000044F8EE
l000000000044F8EE:
	rax = Mem0[rsp + 0x58<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000044F923
	// succ:  l000000000044F903 l000000000044F923
l000000000044F903:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000044F923
	// succ:  l000000000044F90C l000000000044F923
l000000000044F90C:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044F923
	// succ:  l000000000044F918 l000000000044F923
l000000000044F918:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044F933
	// succ:  l000000000044F923 l000000000044F933
l000000000044F923:
	rax = rsi
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044F800_exit
l000000000044F933:
	rcx = Mem0[rsp + 0x58<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044F800_exit
l000000000044F960:
	rcx = r13
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[r13 + 0<64>:word64]
	rcx = 0x000000000042B5F0<p64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = Mem0[rax + 0x30<64>:word64]
	eax = 0x20<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8 - rcx)
	branch Test(EQ,Z) l000000000044F872
	// succ:  l000000000044F98A l000000000044F872
l000000000044F98A:
	rcx = r13
	call r8 (retsize: 8;)
	edx = CONVERT(al, byte, int32)
	goto l000000000044F872
	// succ:  l000000000044F872
l000000000044F998:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044F9E8
	// succ:  l000000000044F9A6 l000000000044F9E8
l000000000044F9A6:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v22 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v22
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044F9E3
	// succ:  l000000000044F9BC l000000000044F9E3
l000000000044F9BC:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044F9C1
l000000000044F9C1:
	call fn0000000000470820 (retsize: 8;)
	rbx = rax
	// succ:  l000000000044F9C9
l000000000044F9C9:
	rcx = rbp
	call fn000000000044EE30 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044F9C9
	// succ:  l000000000044F9C9
l000000000044F9E3:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044F9E8
l000000000044F9E8:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdi = rsi
	rdi = rdi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdi)
	v23 = Mem0[rdi + 0x20<64>:word32] | 1<32>
	Mem0[rdi + 0x20<64>:word32] = v23
	SZO = cond(Mem0[rdi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rdi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044FA0B
	// succ:  l000000000044FA01 l000000000044FA0B
l000000000044FA01:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044F8EE
	// succ:  l000000000044F8EE
l000000000044FA0B:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044F9C9
	// succ:  l000000000044F9C9
fn000000000044F800_exit:


// fn000000000044FA20
// Return size: 0
define fn000000000044FA20
fn000000000044FA20_entry:
	rsp = fp
	// succ:  l000000000044FA20
l000000000044FA20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x68<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x50<64>
	rsi = rcx
	r12d = edx
	r12 = CONVERT(r12d, word32, uint64)
	rdx = rcx
	rcx = rbp
	call fn000000000044ED50 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x50<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044FB0E
	// succ:  l000000000044FA4D l000000000044FB0E
l000000000044FA4D:
	rax = Mem0[rsi:word64]
	rbx = rsi
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	rdi = Mem0[rbx + 0xF8<64>:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000044FBB8
	// succ:  l000000000044FA67 l000000000044FBB8
l000000000044FA67:
	SCZO = cond(Mem0[rbx + 0xE1<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000044FAB0
	// succ:  l000000000044FA70 l000000000044FAB0
l000000000044FA70:
	r13 = Mem0[rbx + 0xF0<64>:word64]
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l000000000044FBE1
	// succ:  l000000000044FA80 l000000000044FBE1
l000000000044FA80:
	SCZO = cond(Mem0[r13 + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044FB80
	// succ:  l000000000044FA8B l000000000044FB80
l000000000044FA8B:
	edx = CONVERT(Mem0[r13 + 0x59<64>:byte], byte, int32)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000044FA92
l000000000044FA92:
	Mem0[rbx + 0xE0<64>:byte] = al
	rax = Mem0[rsi:word64]
	r9 = rsi
	Mem0[rbx + 0xE1<64>:byte] = 1<8>
	r9 = r9 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r9)
	goto l000000000044FABA
	// succ:  l000000000044FABA
l000000000044FAB0:
	edx = CONVERT(Mem0[rbx + 0xE0<64>:byte], byte, int32)
	r9 = rbx
	// succ:  l000000000044FABA
l000000000044FABA:
	r8 = Mem0[r9 + 0xE8<64>:word64]
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	rcx = rsp + 0x40<64>
	SZO = cond(r8 & r8)
	C = false
	Mem0[rsp + 0x30<64>:word64] = r8
	r8 = rsp + 0x30<64>
	al = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = Mem0[rdi:word64]
	Mem0[rsp + 0x20<64>:word32] = edx
	Mem0[rsp + 0x28<64>:word32] = r12d
	rdx = rdi
	call Mem0[rax + 0x20<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x48<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044FB0E
	// succ:  l000000000044FAF9 l000000000044FB0E
l000000000044FAF9:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	// succ:  l000000000044FB0E
l000000000044FB0E:
	rax = Mem0[rsp + 0x58<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000044FB43
	// succ:  l000000000044FB23 l000000000044FB43
l000000000044FB23:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000044FB43
	// succ:  l000000000044FB2C l000000000044FB43
l000000000044FB2C:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044FB43
	// succ:  l000000000044FB38 l000000000044FB43
l000000000044FB38:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044FB53
	// succ:  l000000000044FB43 l000000000044FB53
l000000000044FB43:
	rax = rsi
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044FA20_exit
l000000000044FB53:
	rcx = Mem0[rsp + 0x58<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044FA20_exit
l000000000044FB80:
	rcx = r13
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[r13 + 0<64>:word64]
	rcx = 0x000000000042B5F0<p64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = Mem0[rax + 0x30<64>:word64]
	eax = 0x20<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8 - rcx)
	branch Test(EQ,Z) l000000000044FA92
	// succ:  l000000000044FBAA l000000000044FA92
l000000000044FBAA:
	rcx = r13
	call r8 (retsize: 8;)
	edx = CONVERT(al, byte, int32)
	goto l000000000044FA92
	// succ:  l000000000044FA92
l000000000044FBB8:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044FC08
	// succ:  l000000000044FBC6 l000000000044FC08
l000000000044FBC6:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v22 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v22
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044FC03
	// succ:  l000000000044FBDC l000000000044FC03
l000000000044FBDC:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044FBE1
l000000000044FBE1:
	call fn0000000000470820 (retsize: 8;)
	rbx = rax
	// succ:  l000000000044FBE9
l000000000044FBE9:
	rcx = rbp
	call fn000000000044EE30 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044FBE9
	// succ:  l000000000044FBE9
l000000000044FC03:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044FC08
l000000000044FC08:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdi = rsi
	rdi = rdi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdi)
	v23 = Mem0[rdi + 0x20<64>:word32] | 1<32>
	Mem0[rdi + 0x20<64>:word32] = v23
	SZO = cond(Mem0[rdi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rdi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044FC2B
	// succ:  l000000000044FC21 l000000000044FC2B
l000000000044FC21:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044FB0E
	// succ:  l000000000044FB0E
l000000000044FC2B:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044FBE9
	// succ:  l000000000044FBE9
fn000000000044FA20_exit:


// fn000000000044FC40
// Return size: 0
define fn000000000044FC40
fn000000000044FC40_entry:
	rsp = fp
	// succ:  l000000000044FC40
l000000000044FC40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x68<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x50<64>
	rsi = rcx
	r12 = rdx
	rdx = rcx
	rcx = rbp
	call fn000000000044ED50 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x50<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044FD2E
	// succ:  l000000000044FC6D l000000000044FD2E
l000000000044FC6D:
	rax = Mem0[rsi:word64]
	rbx = rsi
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	rdi = Mem0[rbx + 0xF8<64>:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000044FDD8
	// succ:  l000000000044FC87 l000000000044FDD8
l000000000044FC87:
	SCZO = cond(Mem0[rbx + 0xE1<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000044FCD0
	// succ:  l000000000044FC90 l000000000044FCD0
l000000000044FC90:
	r13 = Mem0[rbx + 0xF0<64>:word64]
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l000000000044FE01
	// succ:  l000000000044FCA0 l000000000044FE01
l000000000044FCA0:
	SCZO = cond(Mem0[r13 + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044FDA0
	// succ:  l000000000044FCAB l000000000044FDA0
l000000000044FCAB:
	edx = CONVERT(Mem0[r13 + 0x59<64>:byte], byte, int32)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000044FCB2
l000000000044FCB2:
	Mem0[rbx + 0xE0<64>:byte] = al
	rax = Mem0[rsi:word64]
	r9 = rsi
	Mem0[rbx + 0xE1<64>:byte] = 1<8>
	r9 = r9 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r9)
	goto l000000000044FCDA
	// succ:  l000000000044FCDA
l000000000044FCD0:
	edx = CONVERT(Mem0[rbx + 0xE0<64>:byte], byte, int32)
	r9 = rbx
	// succ:  l000000000044FCDA
l000000000044FCDA:
	r8 = Mem0[r9 + 0xE8<64>:word64]
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	rcx = rsp + 0x40<64>
	SZO = cond(r8 & r8)
	C = false
	Mem0[rsp + 0x30<64>:word64] = r8
	r8 = rsp + 0x30<64>
	al = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = Mem0[rdi:word64]
	Mem0[rsp + 0x20<64>:word32] = edx
	Mem0[rsp + 0x28<64>:word64] = r12
	rdx = rdi
	call Mem0[rax + 0x28<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x48<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044FD2E
	// succ:  l000000000044FD19 l000000000044FD2E
l000000000044FD19:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	// succ:  l000000000044FD2E
l000000000044FD2E:
	rax = Mem0[rsp + 0x58<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000044FD63
	// succ:  l000000000044FD43 l000000000044FD63
l000000000044FD43:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000044FD63
	// succ:  l000000000044FD4C l000000000044FD63
l000000000044FD4C:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044FD63
	// succ:  l000000000044FD58 l000000000044FD63
l000000000044FD58:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044FD73
	// succ:  l000000000044FD63 l000000000044FD73
l000000000044FD63:
	rax = rsi
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044FC40_exit
l000000000044FD73:
	rcx = Mem0[rsp + 0x58<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044FC40_exit
l000000000044FDA0:
	rcx = r13
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[r13 + 0<64>:word64]
	rcx = 0x000000000042B5F0<p64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = Mem0[rax + 0x30<64>:word64]
	eax = 0x20<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8 - rcx)
	branch Test(EQ,Z) l000000000044FCB2
	// succ:  l000000000044FDCA l000000000044FCB2
l000000000044FDCA:
	rcx = r13
	call r8 (retsize: 8;)
	edx = CONVERT(al, byte, int32)
	goto l000000000044FCB2
	// succ:  l000000000044FCB2
l000000000044FDD8:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000044FE28
	// succ:  l000000000044FDE6 l000000000044FE28
l000000000044FDE6:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v21 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v21
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000044FE23
	// succ:  l000000000044FDFC l000000000044FE23
l000000000044FDFC:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044FE01
l000000000044FE01:
	call fn0000000000470820 (retsize: 8;)
	rbx = rax
	// succ:  l000000000044FE09
l000000000044FE09:
	rcx = rbp
	call fn000000000044EE30 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044FE09
	// succ:  l000000000044FE09
l000000000044FE23:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000044FE28
l000000000044FE28:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdi = rsi
	rdi = rdi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdi)
	v22 = Mem0[rdi + 0x20<64>:word32] | 1<32>
	Mem0[rdi + 0x20<64>:word32] = v22
	SZO = cond(Mem0[rdi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rdi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000044FE4B
	// succ:  l000000000044FE41 l000000000044FE4B
l000000000044FE41:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044FD2E
	// succ:  l000000000044FD2E
l000000000044FE4B:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044FE09
	// succ:  l000000000044FE09
fn000000000044FC40_exit:


// fn000000000044FE60
// Return size: 0
define fn000000000044FE60
fn000000000044FE60_entry:
	rsp = fp
	// succ:  l000000000044FE60
l000000000044FE60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x68<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x50<64>
	rsi = rcx
	r12 = rdx
	rdx = rcx
	rcx = rbp
	call fn000000000044ED50 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x50<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044FF4E
	// succ:  l000000000044FE8D l000000000044FF4E
l000000000044FE8D:
	rax = Mem0[rsi:word64]
	rbx = rsi
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	rdi = Mem0[rbx + 0xF8<64>:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000044FFF8
	// succ:  l000000000044FEA7 l000000000044FFF8
l000000000044FEA7:
	SCZO = cond(Mem0[rbx + 0xE1<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000044FEF0
	// succ:  l000000000044FEB0 l000000000044FEF0
l000000000044FEB0:
	r13 = Mem0[rbx + 0xF0<64>:word64]
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000450021
	// succ:  l000000000044FEC0 l0000000000450021
l000000000044FEC0:
	SCZO = cond(Mem0[r13 + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044FFC0
	// succ:  l000000000044FECB l000000000044FFC0
l000000000044FECB:
	edx = CONVERT(Mem0[r13 + 0x59<64>:byte], byte, int32)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000044FED2
l000000000044FED2:
	Mem0[rbx + 0xE0<64>:byte] = al
	rax = Mem0[rsi:word64]
	r9 = rsi
	Mem0[rbx + 0xE1<64>:byte] = 1<8>
	r9 = r9 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r9)
	goto l000000000044FEFA
	// succ:  l000000000044FEFA
l000000000044FEF0:
	edx = CONVERT(Mem0[rbx + 0xE0<64>:byte], byte, int32)
	r9 = rbx
	// succ:  l000000000044FEFA
l000000000044FEFA:
	r8 = Mem0[r9 + 0xE8<64>:word64]
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	rcx = rsp + 0x40<64>
	SZO = cond(r8 & r8)
	C = false
	Mem0[rsp + 0x30<64>:word64] = r8
	r8 = rsp + 0x30<64>
	al = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = Mem0[rdi:word64]
	Mem0[rsp + 0x20<64>:word32] = edx
	Mem0[rsp + 0x28<64>:word64] = r12
	rdx = rdi
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x48<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000044FF4E
	// succ:  l000000000044FF39 l000000000044FF4E
l000000000044FF39:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	// succ:  l000000000044FF4E
l000000000044FF4E:
	rax = Mem0[rsp + 0x58<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000044FF83
	// succ:  l000000000044FF63 l000000000044FF83
l000000000044FF63:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000044FF83
	// succ:  l000000000044FF6C l000000000044FF83
l000000000044FF6C:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000044FF83
	// succ:  l000000000044FF78 l000000000044FF83
l000000000044FF78:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000044FF93
	// succ:  l000000000044FF83 l000000000044FF93
l000000000044FF83:
	rax = rsi
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044FE60_exit
l000000000044FF93:
	rcx = Mem0[rsp + 0x58<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000044FE60_exit
l000000000044FFC0:
	rcx = r13
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[r13 + 0<64>:word64]
	rcx = 0x000000000042B5F0<p64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = Mem0[rax + 0x30<64>:word64]
	eax = 0x20<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8 - rcx)
	branch Test(EQ,Z) l000000000044FED2
	// succ:  l000000000044FFEA l000000000044FED2
l000000000044FFEA:
	rcx = r13
	call r8 (retsize: 8;)
	edx = CONVERT(al, byte, int32)
	goto l000000000044FED2
	// succ:  l000000000044FED2
l000000000044FFF8:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l0000000000450048
	// succ:  l0000000000450006 l0000000000450048
l0000000000450006:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v21 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v21
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l0000000000450043
	// succ:  l000000000045001C l0000000000450043
l000000000045001C:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l0000000000450021
l0000000000450021:
	call fn0000000000470820 (retsize: 8;)
	rbx = rax
	// succ:  l0000000000450029
l0000000000450029:
	rcx = rbp
	call fn000000000044EE30 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l0000000000450029
	// succ:  l0000000000450029
l0000000000450043:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l0000000000450048
l0000000000450048:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdi = rsi
	rdi = rdi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdi)
	v22 = Mem0[rdi + 0x20<64>:word32] | 1<32>
	Mem0[rdi + 0x20<64>:word32] = v22
	SZO = cond(Mem0[rdi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rdi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045006B
	// succ:  l0000000000450061 l000000000045006B
l0000000000450061:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000044FF4E
	// succ:  l000000000044FF4E
l000000000045006B:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l0000000000450029
	// succ:  l0000000000450029
fn000000000044FE60_exit:


// fn0000000000450080
// Return size: 8
define fn0000000000450080
fn0000000000450080_entry:
	rsp = fp
	// succ:  l0000000000450080
l0000000000450080:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 8<64>
	rbx = rcx
	rdi = rdx
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	rax = 0x00000000004960D8<p64>
	Mem0[rbx + 0xE0<64>:word64] = 0<64>
	Mem0[rbx + 0xE8<64>:byte] = 0<8>
	Mem0[rbx + 0xE9<64>:byte] = 0<8>
	Mem0[rbx + 0xF0<64>:word64] = 0<64>
	rdx = rdi
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496100<p64>
	Mem0[rbx + 0xF8<64>:word64] = 0<64>
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	Mem0[rbx + 0x108<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 8<64>:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450080_exit
fn0000000000450080_exit:


// fn0000000000450130
// Return size: 8
define fn0000000000450130
fn0000000000450130_entry:
	rsp = fp
	// succ:  l0000000000450130
l0000000000450130:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 8<64>
	rbx = rcx
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	rax = 0x00000000004960D8<p64>
	Mem0[rbx + 0xE0<64>:word64] = 0<64>
	Mem0[rbx + 0xE8<64>:byte] = 0<8>
	Mem0[rbx + 0xE9<64>:byte] = 0<8>
	Mem0[rbx + 0xF0<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496100<p64>
	Mem0[rbx + 0xF8<64>:word64] = 0<64>
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	Mem0[rbx + 0x108<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 8<64>:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450130_exit
fn0000000000450130_exit:


// fn00000000004501E0
// Return size: 8
define fn00000000004501E0
fn00000000004501E0_entry:
	rsp = fp
	// succ:  l00000000004501E0
l00000000004501E0:
	r9 = Mem0[rdx:word64]
	Mem0[rcx:word64] = r9
	rcx = rcx + Mem0[r9 - 0x18<64>:word64]
	SCZO = cond(rcx)
	rax = Mem0[rdx + 8<64>:word64]
	rdx = r8
	Mem0[rcx:word64] = rax
	// succ:  l00000000004501F4_thunk_fn000000000046E310
l00000000004501F4_thunk_fn000000000046E310:
	call fn000000000046E310 (retsize: 0;)
	return
	// succ:  fn00000000004501E0_exit
fn00000000004501E0_exit:


// fn0000000000450200
// Return size: 8
define fn0000000000450200
fn0000000000450200_entry:
	rsp = fp
	// succ:  l0000000000450200
l0000000000450200:
	rax = Mem0[rdx:word64]
	Mem0[rcx:word64] = rax
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	rax = Mem0[rdx + 8<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx:word64] = rax
	// succ:  l0000000000450213_thunk_fn000000000046E310
l0000000000450213_thunk_fn000000000046E310:
	call fn000000000046E310 (retsize: 0;)
	return
	// succ:  fn0000000000450200_exit
fn0000000000450200_exit:


// fn0000000000450220
// Return size: 0
define fn0000000000450220
fn0000000000450220_entry:
	rsp = fp
	// succ:  l0000000000450220
l0000000000450220:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x00000000004960D8<p64>
	rbx = rcx
	rcx = rcx + 8<64>
	Mem0[rcx - 8<64>:word64] = rax
	rax = Mem0[0x0000000000491E20<p64>:word64]
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	call fn000000000046D3D0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000450252_thunk_fn0000000000475550
l0000000000450252_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000450220_exit
fn0000000000450220_exit:


// fn0000000000450260
// Return size: 0
define fn0000000000450260
fn0000000000450260_entry:
	rsp = fp
	// succ:  l0000000000450260
l0000000000450260:
	rax = 0x00000000004960D8<p64>
	rcx = rcx + 8<64>
	SCZO = cond(rcx)
	Mem0[rcx - 8<64>:word64] = rax
	rax = Mem0[0x0000000000491E20<p64>:word64]
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	// succ:  l000000000045027D_thunk_fn000000000046D3D0
l000000000045027D_thunk_fn000000000046D3D0:
	call fn000000000046D3D0 (retsize: 0;)
	return
	// succ:  fn0000000000450260_exit
fn0000000000450260_exit:


// fn0000000000450290
// Return size: 8
define fn0000000000450290
fn0000000000450290_entry:
	rsp = fp
	// succ:  l0000000000450290
l0000000000450290:
	rax = Mem0[rdx:word64]
	Mem0[rcx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rdx + 8<64>:word64]
	Mem0[rcx + rax:word64] = rdx
	return
	// succ:  fn0000000000450290_exit
fn0000000000450290_exit:


// fn00000000004502B0
// Return size: 0
define fn00000000004502B0
fn00000000004502B0_entry:
	rsp = fp
	// succ:  l00000000004502B0
l00000000004502B0:
	call rdx (retsize: 0;)
	return
	// succ:  fn00000000004502B0_exit
fn00000000004502B0_exit:


// fn00000000004502C0
// Return size: 8
define fn00000000004502C0
fn00000000004502C0_entry:
	rsp = fp
	// succ:  l00000000004502C0
l00000000004502C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call rdx (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004502C0_exit
fn00000000004502C0_exit:


// fn00000000004502E0
// Return size: 8
define fn00000000004502E0
fn00000000004502E0_entry:
	rsp = fp
	// succ:  l00000000004502E0
l00000000004502E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call rdx (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004502E0_exit
fn00000000004502E0_exit:


// fn0000000000450300
// Return size: 8
define fn0000000000450300
fn0000000000450300_entry:
	rsp = fp
	// succ:  l0000000000450300
l0000000000450300:
	// succ:  l0000000000450300_thunk_fn000000000044EF40
l0000000000450300_thunk_fn000000000044EF40:
	call fn000000000044EF40 (retsize: 0;)
	return
	// succ:  fn0000000000450300_exit
fn0000000000450300_exit:


// fn0000000000450310
// Return size: 8
define fn0000000000450310
fn0000000000450310_entry:
	rsp = fp
	// succ:  l0000000000450310
l0000000000450310:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rdi = rsp + 0x30<64>
	rbx = rdx
	rsi = rcx
	rdx = rcx
	rcx = rdi
	call fn000000000044ED50 (retsize: 8;)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l00000000004503A0
	// succ:  l0000000000450332 l00000000004503A0
l0000000000450332:
	SCZO = cond(Mem0[rsp + 0x30<64>:byte] - 0<8>)
	branch Test(EQ,Z) l00000000004503A0
	// succ:  l0000000000450339 l00000000004503A0
l0000000000450339:
	rax = Mem0[rsi:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0xE8<64> + rax:word64]
	call fn0000000000471040 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(EQ,Z) l00000000004503AA
	// succ:  l000000000045035F l00000000004503AA
l000000000045035F:
	r8 = Mem0[rsp + 0x38<64>:word64]
	rax = Mem0[r8:word64]
	rbx = r8
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	SZO = cond(Mem0[rbx + 0x19<64>:byte] & 0x20<8>)
	C = false
	branch Test(EQ,Z) l0000000000450394
	// succ:  l0000000000450374 l0000000000450394
l0000000000450374:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000450394
	// succ:  l000000000045037D l0000000000450394
l000000000045037D:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000450394
	// succ:  l0000000000450389 l0000000000450394
l0000000000450389:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l00000000004503C0
	// succ:  l0000000000450394 l00000000004503C0
l0000000000450394:
	rax = rsi
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450310_exit
l00000000004503A0:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l000000000045035F
	// succ:  l00000000004503A5 l000000000045035F
l00000000004503A5:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l00000000004503AA
l00000000004503AA:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	goto l000000000045035F
	// succ:  l000000000045035F
l00000000004503C0:
	rcx = Mem0[rsp + 0x38<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450310_exit
fn0000000000450310_exit:


// fn0000000000450460
// Return size: 8
define fn0000000000450460
fn0000000000450460_entry:
	rsp = fp
	// succ:  l0000000000450460
l0000000000450460:
	edx = CONVERT(dl, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000450463_thunk_fn000000000044F160
l0000000000450463_thunk_fn000000000044F160:
	call fn000000000044F160 (retsize: 0;)
	return
	// succ:  fn0000000000450460_exit
fn0000000000450460_exit:


// fn0000000000450470
// Return size: 0
define fn0000000000450470
fn0000000000450470_entry:
	rsp = fp
	// succ:  l0000000000450470
l0000000000450470:
	// succ:  l0000000000450470_thunk_fn000000000044F3A0
l0000000000450470_thunk_fn000000000044F3A0:
	call fn000000000044F3A0 (retsize: 0;)
	return
	// succ:  fn0000000000450470_exit
fn0000000000450470_exit:


// fn0000000000450480
// Return size: 8
define fn0000000000450480
fn0000000000450480_entry:
	rsp = fp
	// succ:  l0000000000450480
l0000000000450480:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rdx:real80], real80, real64)
	rdx = rsp + 0x20<64>
	Mem0[rsp + 0x20<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call fn000000000044F5D0 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000450480_exit
fn0000000000450480_exit:


// fn00000000004504A0
// Return size: 8
define fn00000000004504A0
fn00000000004504A0_entry:
	rsp = fp
	// succ:  l00000000004504A0
l00000000004504A0:
	v4 = CONVERT(SLICE(xmm1, real32, 0), real32, real64)
	xmm1 = SEQ(SLICE(xmm1, word64, 64), v4)
	// succ:  l00000000004504A4_thunk_fn000000000044F3A0
l00000000004504A4_thunk_fn000000000044F3A0:
	call fn000000000044F3A0 (retsize: 0;)
	return
	// succ:  fn00000000004504A0_exit
fn00000000004504A0_exit:


// fn00000000004504B0
// Return size: 8
define fn00000000004504B0
fn00000000004504B0_entry:
	rsp = fp
	// succ:  l00000000004504B0
l00000000004504B0:
	// succ:  l00000000004504B0_thunk_fn000000000044F800
l00000000004504B0_thunk_fn000000000044F800:
	call fn000000000044F800 (retsize: 0;)
	return
	// succ:  fn00000000004504B0_exit
fn00000000004504B0_exit:


// fn00000000004504C0
// Return size: 0
define fn00000000004504C0
fn00000000004504C0_entry:
	rsp = fp
	// succ:  l00000000004504C0
l00000000004504C0:
	// succ:  l00000000004504C0_thunk_fn000000000044FA20
l00000000004504C0_thunk_fn000000000044FA20:
	call fn000000000044FA20 (retsize: 0;)
	return
	// succ:  fn00000000004504C0_exit
fn00000000004504C0_exit:


// fn00000000004504D0
// Return size: 0
define fn00000000004504D0
fn00000000004504D0_entry:
	rsp = fp
	// succ:  l00000000004504D0
l00000000004504D0:
	// succ:  l00000000004504D0_thunk_fn000000000044F800
l00000000004504D0_thunk_fn000000000044F800:
	call fn000000000044F800 (retsize: 0;)
	return
	// succ:  fn00000000004504D0_exit
fn00000000004504D0_exit:


// fn00000000004504E0
// Return size: 0
define fn00000000004504E0
fn00000000004504E0_entry:
	rsp = fp
	// succ:  l00000000004504E0
l00000000004504E0:
	// succ:  l00000000004504E0_thunk_fn000000000044FA20
l00000000004504E0_thunk_fn000000000044FA20:
	call fn000000000044FA20 (retsize: 0;)
	return
	// succ:  fn00000000004504E0_exit
fn00000000004504E0_exit:


// fn00000000004504F0
// Return size: 0
define fn00000000004504F0
fn00000000004504F0_entry:
	rsp = fp
	// succ:  l00000000004504F0
l00000000004504F0:
	rax = Mem0[rcx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	eax = Mem0[rcx + 0x18<64> + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0x4A<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 8<32>)
	branch Test(EQ,Z) l0000000000450510
	// succ:  l0000000000450503 l0000000000450510
l0000000000450503:
	SCZO = cond(eax - 0x40<32>)
	branch Test(EQ,Z) l0000000000450510
	// succ:  l0000000000450508 l0000000000450510
l0000000000450508:
	edx = CONVERT(dx, word16, int32)
	// succ:  l000000000045050B_thunk_fn000000000044F800
l000000000045050B_thunk_fn000000000044F800:
	call fn000000000044F800 (retsize: 0;)
	return
	// succ:  fn00000000004504F0_exit
l0000000000450510:
	edx = CONVERT(dx, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000450513_thunk_fn000000000044F800
l0000000000450513_thunk_fn000000000044F800:
	call fn000000000044F800 (retsize: 0;)
	return
	// succ:  fn00000000004504F0_exit
fn00000000004504F0_exit:


// fn0000000000450520
// Return size: 8
define fn0000000000450520
fn0000000000450520_entry:
	rsp = fp
	// succ:  l0000000000450520
l0000000000450520:
	edx = CONVERT(dx, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000450523_thunk_fn000000000044FA20
l0000000000450523_thunk_fn000000000044FA20:
	call fn000000000044FA20 (retsize: 0;)
	return
	// succ:  fn0000000000450520_exit
fn0000000000450520_exit:


// fn0000000000450530
// Return size: 8
define fn0000000000450530
fn0000000000450530_entry:
	rsp = fp
	// succ:  l0000000000450530
l0000000000450530:
	// succ:  l0000000000450530_thunk_fn000000000044FC40
l0000000000450530_thunk_fn000000000044FC40:
	call fn000000000044FC40 (retsize: 0;)
	return
	// succ:  fn0000000000450530_exit
fn0000000000450530_exit:


// fn0000000000450540
// Return size: 8
define fn0000000000450540
fn0000000000450540_entry:
	rsp = fp
	// succ:  l0000000000450540
l0000000000450540:
	// succ:  l0000000000450540_thunk_fn000000000044FE60
l0000000000450540_thunk_fn000000000044FE60:
	call fn000000000044FE60 (retsize: 0;)
	return
	// succ:  fn0000000000450540_exit
fn0000000000450540_exit:


// fn0000000000450550
// Return size: 8
define fn0000000000450550
fn0000000000450550_entry:
	rsp = fp
	// succ:  l0000000000450550
l0000000000450550:
	eax = 0x7FFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	rcx = rcx - rdx
	SCZO = cond(rcx)
	SCZO = cond(rcx - 0x7FFFFFFF<64>)
	branch Test(LE,SZO) l0000000000450563
	// succ:  l0000000000450561 l0000000000450563
l0000000000450561:
	return
	// succ:  fn0000000000450550_exit
l0000000000450563:
	SCZO = cond(rcx - 0xFFFFFFFF80000000<64>)
	eax = 0x80000000<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(LT,SO) l0000000000450572
	// succ:  l000000000045056F_1 l0000000000450572
l000000000045056F_1:
	eax = ecx
	// succ:  l0000000000450572
l0000000000450572:
	return
	// succ:  fn0000000000450550_exit
fn0000000000450550_exit:


// fn0000000000450580
// Return size: 8
define fn0000000000450580
fn0000000000450580_entry:
	rsp = fp
	// succ:  l0000000000450580
l0000000000450580:
	Mem0[rcx:word64] = rdx
	return
	// succ:  fn0000000000450580_exit
fn0000000000450580_exit:


// fn0000000000450590
// Return size: 8
define fn0000000000450590
fn0000000000450590_entry:
	rsp = fp
	// succ:  l0000000000450590
l0000000000450590:
	Mem0[rcx:word64] = rdx
	return
	// succ:  fn0000000000450590_exit
fn0000000000450590_exit:


// fn00000000004505A0
// Return size: 8
define fn00000000004505A0
fn00000000004505A0_entry:
	rsp = fp
	// succ:  l00000000004505A0
l00000000004505A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l00000000004505C2
	// succ:  l00000000004505AF l00000000004505C2
l00000000004505AF:
	rbx = rcx
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn0000000000451CC0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	// succ:  l00000000004505C2
l00000000004505C2:
	Mem0[rax - 8<64>:word32] = 0xFFFFFFFF<32>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004505A0_exit
fn00000000004505A0_exit:


// fn00000000004505D0
// Return size: 8
define fn00000000004505D0
fn00000000004505D0_entry:
	rsp = fp
	// succ:  l00000000004505D0
l00000000004505D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn0000000000450B70 (retsize: 8;)
	rsp = rsp + 8<64>
	SZO = cond(rbx & rbx)
	C = false
	rsi = rax
	rax = rax + 0x18<64>
	branch Test(EQ,Z) l0000000000450608
	// succ:  l00000000004505EF l0000000000450608
l00000000004505EF:
	SCZO = cond(rbx - 1<64>)
	r9 = rsi + 0x18<64>
	branch Test(EQ,Z) l0000000000450620
	// succ:  l00000000004505F9 l0000000000450620
l00000000004505F9:
	edx = CONVERT(dil, byte, int32)
	r8 = rbx
	rcx = r9
	rax = memset(rcx, rdx, r8)
	// succ:  l0000000000450608
l0000000000450608:
	Mem0[rsi + 0x10<64>:word32] = 0<32>
	Mem0[rsi:word64] = rbx
	Mem0[rsi + 0x18<64> + rbx:byte] = 0<8>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004505D0_exit
l0000000000450620:
	Mem0[rsi + 0x18<64>:byte] = dil
	rax = r9
	goto l0000000000450608
	// succ:  l0000000000450608
fn00000000004505D0_exit:


// fn0000000000450630
// Return size: 8
define fn0000000000450630
fn0000000000450630_entry:
	rsp = fp
	// succ:  l0000000000450630
l0000000000450630:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdx = rdx - rcx
	SCZO = cond(rdx)
	rdi = rcx
	rbx = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx
	call fn0000000000450B70 (retsize: 8;)
	rsp = rsp + 8<64>
	SCZO = cond(rbx - 1<64>)
	rsi = rax
	r9 = rax + 0x18<64>
	branch Test(EQ,Z) l0000000000450682
	// succ:  l0000000000450657 l0000000000450682
l0000000000450657:
	rcx = r9
	r8 = rbx
	rdx = rdi
	rax = memcpy(rcx, rdx, r8)
	r9 = rax
	// succ:  l0000000000450668
l0000000000450668:
	rax = r9
	Mem0[rsi + 0x10<64>:word32] = 0<32>
	Mem0[rsi:word64] = rbx
	Mem0[rsi + 0x18<64> + rbx:byte] = 0<8>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450630_exit
l0000000000450682:
	eax = CONVERT(Mem0[rdi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi + 0x18<64>:byte] = al
	goto l0000000000450668
	// succ:  l0000000000450668
fn0000000000450630_exit:


// fn0000000000450690
// Return size: 8
define fn0000000000450690
fn0000000000450690_entry:
	rsp = fp
	// succ:  l0000000000450690
l0000000000450690:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SZO = cond(rcx & rcx)
	C = false
	rdi = rcx
	branch Test(NE,Z) l00000000004506B0
	// succ:  l000000000045069F l00000000004506B0
l000000000045069F:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l00000000004506B0
	// succ:  l00000000004506A4 l00000000004506B0
l00000000004506A4:
	rcx = 0x000000000048D728<p64>
	call fn0000000000470BA0 (retsize: 8;)
	// succ:  l00000000004506B0
l00000000004506B0:
	rbx = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rbx = rbx - rdi
	SCZO = cond(rbx)
	rcx = rbx
	call fn0000000000450B70 (retsize: 8;)
	rsp = rsp + 8<64>
	SCZO = cond(rbx - 1<64>)
	rsi = rax
	r9 = rax + 0x18<64>
	branch Test(EQ,Z) l0000000000450700
	// succ:  l00000000004506CD l0000000000450700
l00000000004506CD:
	rcx = r9
	r8 = rbx
	rdx = rdi
	rax = memcpy(rcx, rdx, r8)
	r9 = rax
	// succ:  l00000000004506DE
l00000000004506DE:
	rax = r9
	Mem0[rsi + 0x10<64>:word32] = 0<32>
	Mem0[rsi:word64] = rbx
	Mem0[rsi + 0x18<64> + rbx:byte] = 0<8>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450690_exit
l0000000000450700:
	eax = CONVERT(Mem0[rdi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi + 0x18<64>:byte] = al
	goto l00000000004506DE
	// succ:  l00000000004506DE
fn0000000000450690_exit:


// fn0000000000450710
// Return size: 8
define fn0000000000450710
fn0000000000450710_entry:
	rsp = fp
	// succ:  l0000000000450710
l0000000000450710:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SZO = cond(rcx & rcx)
	C = false
	rdi = rcx
	branch Test(NE,Z) l0000000000450730
	// succ:  l000000000045071F l0000000000450730
l000000000045071F:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l0000000000450730
	// succ:  l0000000000450724 l0000000000450730
l0000000000450724:
	rcx = 0x000000000048DE80<p64>
	call fn0000000000470BA0 (retsize: 8;)
	// succ:  l0000000000450730
l0000000000450730:
	rbx = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rbx = rbx - rdi
	SCZO = cond(rbx)
	rcx = rbx
	call fn0000000000450B70 (retsize: 8;)
	rsp = rsp + 8<64>
	SCZO = cond(rbx - 1<64>)
	rsi = rax
	r9 = rax + 0x18<64>
	branch Test(EQ,Z) l0000000000450780
	// succ:  l000000000045074D l0000000000450780
l000000000045074D:
	rcx = r9
	r8 = rbx
	rdx = rdi
	rax = memcpy(rcx, rdx, r8)
	r9 = rax
	// succ:  l000000000045075E
l000000000045075E:
	rax = r9
	Mem0[rsi + 0x10<64>:word32] = 0<32>
	Mem0[rsi:word64] = rbx
	Mem0[rsi + 0x18<64> + rbx:byte] = 0<8>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450710_exit
l0000000000450780:
	eax = CONVERT(Mem0[rdi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi + 0x18<64>:byte] = al
	goto l000000000045075E
	// succ:  l000000000045075E
fn0000000000450710_exit:


// fn0000000000450790
// Return size: 8
define fn0000000000450790
fn0000000000450790_entry:
	rsp = fp
	// succ:  l0000000000450790
l0000000000450790:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SZO = cond(rcx & rcx)
	C = false
	rdi = rcx
	branch Test(NE,Z) l00000000004507B0
	// succ:  l000000000045079F l00000000004507B0
l000000000045079F:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l00000000004507B0
	// succ:  l00000000004507A4 l00000000004507B0
l00000000004507A4:
	rcx = 0x000000000048D728<p64>
	call fn0000000000470BA0 (retsize: 8;)
	// succ:  l00000000004507B0
l00000000004507B0:
	rbx = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rbx = rbx - rdi
	SCZO = cond(rbx)
	rcx = rbx
	call fn0000000000450B70 (retsize: 8;)
	rsp = rsp + 8<64>
	SCZO = cond(rbx - 1<64>)
	rsi = rax
	r9 = rax + 0x18<64>
	branch Test(EQ,Z) l0000000000450800
	// succ:  l00000000004507CD l0000000000450800
l00000000004507CD:
	rcx = r9
	r8 = rbx
	rdx = rdi
	rax = memcpy(rcx, rdx, r8)
	r9 = rax
	// succ:  l00000000004507DE
l00000000004507DE:
	rax = r9
	Mem0[rsi + 0x10<64>:word32] = 0<32>
	Mem0[rsi:word64] = rbx
	Mem0[rsi + 0x18<64> + rbx:byte] = 0<8>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450790_exit
l0000000000450800:
	eax = CONVERT(Mem0[rdi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi + 0x18<64>:byte] = al
	goto l00000000004507DE
	// succ:  l00000000004507DE
fn0000000000450790_exit:


// fn0000000000450810
// Return size: 8
define fn0000000000450810
fn0000000000450810_entry:
	rsp = fp
	// succ:  l0000000000450810
l0000000000450810:
	rax = 0x000000000048B260<p64>
	return
	// succ:  fn0000000000450810_exit
fn0000000000450810_exit:


// fn0000000000450820
// Return size: 8
define fn0000000000450820
fn0000000000450820_entry:
	rsp = fp
	// succ:  l0000000000450820
l0000000000450820:
	r8 = r8 - rdx
	SCZO = cond(r8)
	SCZO = cond(r8 - 1<64>)
	branch Test(EQ,Z) l0000000000450830
	// succ:  l0000000000450829 l0000000000450830
l0000000000450829:
	rax = memcpy(rcx, rdx, r8)
	return
	// succ:  fn0000000000450820_exit
l0000000000450830:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:byte] = al
	return
	// succ:  fn0000000000450820_exit
fn0000000000450820_exit:


// fn0000000000450840
// Return size: 8
define fn0000000000450840
fn0000000000450840_entry:
	rsp = fp
	// succ:  l0000000000450840
l0000000000450840:
	r8 = r8 - rdx
	SCZO = cond(r8)
	SCZO = cond(r8 - 1<64>)
	branch Test(EQ,Z) l0000000000450850
	// succ:  l0000000000450849 l0000000000450850
l0000000000450849:
	rax = memcpy(rcx, rdx, r8)
	return
	// succ:  fn0000000000450840_exit
l0000000000450850:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:byte] = al
	return
	// succ:  fn0000000000450840_exit
fn0000000000450840_exit:


// fn0000000000450860
// Return size: 8
define fn0000000000450860
fn0000000000450860_entry:
	rsp = fp
	// succ:  l0000000000450860
l0000000000450860:
	r8 = r8 - rdx
	SCZO = cond(r8)
	SCZO = cond(r8 - 1<64>)
	branch Test(EQ,Z) l0000000000450870
	// succ:  l0000000000450869 l0000000000450870
l0000000000450869:
	rax = memcpy(rcx, rdx, r8)
	return
	// succ:  fn0000000000450860_exit
l0000000000450870:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:byte] = al
	return
	// succ:  fn0000000000450860_exit
fn0000000000450860_exit:


// fn0000000000450880
// Return size: 8
define fn0000000000450880
fn0000000000450880_entry:
	rsp = fp
	// succ:  l0000000000450880
l0000000000450880:
	r8 = r8 - rdx
	SCZO = cond(r8)
	SCZO = cond(r8 - 1<64>)
	branch Test(EQ,Z) l0000000000450890
	// succ:  l0000000000450889 l0000000000450890
l0000000000450889:
	rax = memcpy(rcx, rdx, r8)
	return
	// succ:  fn0000000000450880_exit
l0000000000450890:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:byte] = al
	return
	// succ:  fn0000000000450880_exit
fn0000000000450880_exit:


// fn00000000004508A0
// Return size: 8
define fn00000000004508A0
fn00000000004508A0_entry:
	rsp = fp
	// succ:  l00000000004508A0
l00000000004508A0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	SCZO = cond(Mem0[rax - 0x10<64>:word64] - rdx)
	branch Test(UGT,CZ) l00000000004508C0
	// succ:  l00000000004508B1 l00000000004508C0
l00000000004508B1:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004508A0_exit
l00000000004508C0:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn0000000000451BE0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004508A0_exit
fn00000000004508A0_exit:


// fn00000000004508E0
// Return size: 0
define fn00000000004508E0
fn00000000004508E0_entry:
	rsp = fp
	// succ:  l00000000004508E0
l00000000004508E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r10 = 0x3FFFFFFFFFFFFFF9<64>
	ebp = Mem0[rsp + 0x70<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	rsi = rcx
	rdi = rdx
	rbx = r9
	r10 = r10 - Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r10)
	r10 = r10 + r8
	SCZO = cond(r10)
	SCZO = cond(r9 - r10)
	branch Test(UGT,CZ) l000000000045094F
	// succ:  l000000000045090E l000000000045094F
l000000000045090E:
	call fn0000000000451CC0 (retsize: 8;)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000450930
	// succ:  l0000000000450918 l0000000000450930
l0000000000450918:
	rdi = rdi + Mem0[rsi:word64]
	SCZO = cond(rdi)
	SCZO = cond(rbx - 1<64>)
	rcx = rdi
	branch Test(EQ,Z) l0000000000450940
	// succ:  l0000000000450924 l0000000000450940
l0000000000450924:
	edx = CONVERT(bpl, byte, int32)
	r8 = rbx
	rax = memset(rcx, rdx, r8)
	// succ:  l0000000000450930
l0000000000450930:
	rax = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004508E0_exit
l0000000000450940:
	rax = rsi
	Mem0[rdi:byte] = bpl
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004508E0_exit
l000000000045094F:
	rcx = 0x000000000048D6A1<p64>
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l000000000045095F_thunk_fn0000000000450960
l000000000045095F_thunk_fn0000000000450960:
	call fn0000000000450960 (retsize: 0;)
	return
	// succ:  fn00000000004508E0_exit
fn00000000004508E0_exit:


// fn0000000000450960
// Return size: 8
define fn0000000000450960
fn0000000000450960_entry:
	rsp = fp
	// succ:  l0000000000450960
l0000000000450960:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp + 0x70<64>:word64]
	rbp = r9
	rdi = rcx
	rsi = rdx
	r9 = rbx
	call fn0000000000451CC0 (retsize: 8;)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000045099A
	// succ:  l0000000000450983 l000000000045099A
l0000000000450983:
	rsi = rsi + Mem0[rdi:word64]
	SCZO = cond(rsi)
	SCZO = cond(rbx - 1<64>)
	rcx = rsi
	branch Test(EQ,Z) l00000000004509B0
	// succ:  l000000000045098F l00000000004509B0
l000000000045098F:
	r8 = rbx
	rdx = rbp
	rax = memcpy(rcx, rdx, r8)
	// succ:  l000000000045099A
l000000000045099A:
	rax = rdi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450960_exit
l00000000004509B0:
	eax = CONVERT(Mem0[rbp + 0<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi:byte] = al
	rax = rdi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450960_exit
fn0000000000450960_exit:


// fn00000000004509D0
// Return size: 8
define fn00000000004509D0
fn00000000004509D0_entry:
	rsp = fp
	// succ:  l00000000004509D0
l00000000004509D0:
	edx = CONVERT(dl, byte, int32)
	// succ:  l00000000004509D3_thunk_fn00000000004505D0
l00000000004509D3_thunk_fn00000000004505D0:
	call fn00000000004505D0 (retsize: 0;)
	return
	// succ:  fn00000000004509D0_exit
fn00000000004509D0_exit:


// fn00000000004509E0
// Return size: 8
define fn00000000004509E0
fn00000000004509E0_entry:
	rsp = fp
	// succ:  l00000000004509E0
l00000000004509E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rsi = rcx
	rbx = rdx
	r8 = Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx - r8)
	branch Test(UGE,C) l0000000000450A11
	// succ:  l00000000004509F8 l0000000000450A11
l00000000004509F8:
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l0000000000450A07
	// succ:  l00000000004509FF l0000000000450A07
l00000000004509FF:
	call fn00000000004505A0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	// succ:  l0000000000450A07
l0000000000450A07:
	rax = rax + rbx
	SCZO = cond(rax)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004509E0_exit
l0000000000450A11:
	rcx = 0x000000000048D608<p64>
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000450A1F_thunk_fn0000000000450A20
l0000000000450A1F_thunk_fn0000000000450A20:
	call fn0000000000450A20 (retsize: 0;)
	return
	// succ:  fn00000000004509E0_exit
fn00000000004509E0_exit:


// fn0000000000450A20
// Return size: 8
define fn0000000000450A20
fn0000000000450A20_entry:
	rsp = fp
	// succ:  l0000000000450A20
l0000000000450A20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l0000000000450A3A
	// succ:  l0000000000450A2F l0000000000450A3A
l0000000000450A2F:
	rbx = rcx
	call fn00000000004505A0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	// succ:  l0000000000450A3A
l0000000000450A3A:
	rax = rax + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rax)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450A20_exit
fn0000000000450A20_exit:


// fn0000000000450A50
// Return size: 0
define fn0000000000450A50
fn0000000000450A50_entry:
	rsp = fp
	// succ:  l0000000000450A50
l0000000000450A50:
	// succ:  l0000000000450A50_thunk_fn0000000000475550
l0000000000450A50_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000450A50_exit
fn0000000000450A50_exit:


// fn0000000000450A60
// Return size: 8
define fn0000000000450A60
fn0000000000450A60_entry:
	rsp = fp
	// succ:  l0000000000450A60
l0000000000450A60:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx + 0x10<64>:word32] = __xadd(Mem0[rcx + 0x10<64>:word32], eax)
	SCZO = cond(Mem0[rcx + 0x10<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000450A70
	// succ:  l0000000000450A6E l0000000000450A70
l0000000000450A6E:
	return
	// succ:  fn0000000000450A60_exit
l0000000000450A70:
	// succ:  l0000000000450A70_thunk_fn0000000000475550
l0000000000450A70_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000450A60_exit
fn0000000000450A60_exit:


// fn0000000000450A80
// Return size: 8
define fn0000000000450A80
fn0000000000450A80_entry:
	rsp = fp
	// succ:  l0000000000450A80
l0000000000450A80:
	__lock()
	v4 = Mem0[rcx + 0x10<64>:word32] + 1<32>
	Mem0[rcx + 0x10<64>:word32] = v4
	SCZO = cond(v4)
	rax = rcx + 0x18<64>
	return
	// succ:  fn0000000000450A80_exit
fn0000000000450A80_exit:


// fn0000000000450A90
// Return size: 8
define fn0000000000450A90
fn0000000000450A90_entry:
	rsp = fp
	// succ:  l0000000000450A90
l0000000000450A90:
	rax = rcx + 0x18<64>
	return
	// succ:  fn0000000000450A90_exit
fn0000000000450A90_exit:


// fn0000000000450AA0
// Return size: 8
define fn0000000000450AA0
fn0000000000450AA0_entry:
	rsp = fp
	// succ:  l0000000000450AA0
l0000000000450AA0:
	rax = 0x000000000048B260<p64>
	return
	// succ:  fn0000000000450AA0_exit
fn0000000000450AA0_exit:


// fn0000000000450AB0
// Return size: 8
define fn0000000000450AB0
fn0000000000450AB0_entry:
	rsp = fp
	// succ:  l0000000000450AB0
l0000000000450AB0:
	Mem0[rcx + 0x10<64>:word32] = 0xFFFFFFFF<32>
	return
	// succ:  fn0000000000450AB0_exit
fn0000000000450AB0_exit:


// fn0000000000450AC0
// Return size: 8
define fn0000000000450AC0
fn0000000000450AC0_entry:
	rsp = fp
	// succ:  l0000000000450AC0
l0000000000450AC0:
	Mem0[rcx + 0x10<64>:word32] = 0<32>
	return
	// succ:  fn0000000000450AC0_exit
fn0000000000450AC0_exit:


// fn0000000000450AD0
// Return size: 8
define fn0000000000450AD0
fn0000000000450AD0_entry:
	rsp = fp
	// succ:  l0000000000450AD0
l0000000000450AD0:
	Mem0[rcx + 0x10<64>:word32] = 0<32>
	Mem0[rcx:word64] = rdx
	Mem0[rcx + 0x18<64> + rdx:byte] = 0<8>
	return
	// succ:  fn0000000000450AD0_exit
fn0000000000450AD0_exit:


// fn0000000000450AE0
// Return size: 8
define fn0000000000450AE0
fn0000000000450AE0_entry:
	rsp = fp
	// succ:  l0000000000450AE0
l0000000000450AE0:
	eax = Mem0[rcx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000450AF1
	// succ:  l0000000000450AE7 l0000000000450AF1
l0000000000450AE7:
	__lock()
	v9 = Mem0[rcx + 0x10<64>:word32] + 1<32>
	Mem0[rcx + 0x10<64>:word32] = v9
	SCZO = cond(v9)
	rax = rcx + 0x18<64>
	return
	// succ:  fn0000000000450AE0_exit
l0000000000450AF1:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	// succ:  l0000000000450AF4_thunk_fn0000000000450B00
l0000000000450AF4_thunk_fn0000000000450B00:
	call fn0000000000450B00 (retsize: 0;)
	return
	// succ:  fn0000000000450AE0_exit
fn0000000000450AE0_exit:


// fn0000000000450B00
// Return size: 8
define fn0000000000450B00
fn0000000000450B00_entry:
	rsp = fp
	// succ:  l0000000000450B00
l0000000000450B00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = r8
	r8 = rdx
	rcx = rcx + Mem0[rsi:word64]
	SCZO = cond(rcx)
	rdx = Mem0[rsi + 8<64>:word64]
	call fn0000000000450B70 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = Mem0[rsi:word64]
	rbx = rax
	rax = rax + 0x18<64>
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l0000000000450B43
	// succ:  l0000000000450B2A l0000000000450B43
l0000000000450B2A:
	SCZO = cond(r8 - 1<64>)
	r9 = rbx + 0x18<64>
	branch Test(EQ,Z) l0000000000450B60
	// succ:  l0000000000450B34 l0000000000450B60
l0000000000450B34:
	rdx = rsi + 0x18<64>
	rcx = r9
	rax = memcpy(rcx, rdx, r8)
	r8 = Mem0[rsi:word64]
	// succ:  l0000000000450B43
l0000000000450B43:
	Mem0[rbx + 0x10<64>:word32] = 0<32>
	Mem0[rbx:word64] = r8
	Mem0[rbx + 0x18<64> + r8:byte] = 0<8>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450B00_exit
l0000000000450B60:
	eax = CONVERT(Mem0[rsi + 0x18<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 0x18<64>:byte] = al
	rax = r9
	r8 = Mem0[rsi:word64]
	goto l0000000000450B43
	// succ:  l0000000000450B43
fn0000000000450B00_exit:


// fn0000000000450B70
// Return size: 0
define fn0000000000450B70
fn0000000000450B70_entry:
	rsp = fp
	// succ:  l0000000000450B70
l0000000000450B70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x3FFFFFFFFFFFFFF9<64>
	SCZO = cond(rcx - rax)
	rbx = rcx
	branch Test(UGT,CZ) l0000000000450BDE
	// succ:  l0000000000450B87 l0000000000450BDE
l0000000000450B87:
	SCZO = cond(rbx - rdx)
	rcx = rcx + 0x19<64>
	branch Test(ULE,CZ) l0000000000450BC8
	// succ:  l0000000000450B90 l0000000000450BC8
l0000000000450B90:
	rcx = rdx + rdx
	SCZO = cond(rbx - rcx)
	branch Test(UGE,C) l0000000000450B9B
	// succ:  l0000000000450B97_1 l0000000000450B9B
l0000000000450B97_1:
	rbx = rcx
	// succ:  l0000000000450B9B
l0000000000450B9B:
	rcx = rbx + 0x39<64>
	SCZO = cond(rcx - 0x1000<64>)
	branch Test(ULE,CZ) l0000000000450BC4
	// succ:  l0000000000450BA8 l0000000000450BC4
l0000000000450BA8:
	SCZO = cond(rdx - rbx)
	branch Test(UGE,C) l0000000000450BC4
	// succ:  l0000000000450BAD l0000000000450BC4
l0000000000450BAD:
	rbx = rbx + 0x1000<64>
	SCZO = cond(rbx)
	ecx = ecx & 0xFFF<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rbx = rbx - rcx
	SCZO = cond(rbx)
	SCZO = cond(rbx - rax)
	branch Test(ULE,CZ) l0000000000450BC4
	// succ:  l0000000000450BC0_1 l0000000000450BC4
l0000000000450BC0_1:
	rbx = rax
	// succ:  l0000000000450BC4
l0000000000450BC4:
	rcx = rbx + 0x19<64>
	// succ:  l0000000000450BC8
l0000000000450BC8:
	call fn0000000000475590 (retsize: 8;)
	Mem0[rax + 8<64>:word64] = rbx
	Mem0[rax + 0x10<64>:word32] = 0<32>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450B70_exit
l0000000000450BDE:
	rcx = 0x000000000048D675<p64>
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l0000000000450BEF_thunk_fn0000000000450BF0
l0000000000450BEF_thunk_fn0000000000450BF0:
	call fn0000000000450BF0 (retsize: 0;)
	return
	// succ:  fn0000000000450B70_exit
fn0000000000450B70_exit:


// fn0000000000450BF0
// Return size: 8
define fn0000000000450BF0
fn0000000000450BF0_entry:
	rsp = fp
	// succ:  l0000000000450BF0
l0000000000450BF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	rbx = rdx - 1<64>
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l0000000000450C13
	// succ:  l0000000000450C08 l0000000000450C13
l0000000000450C08:
	rsi = rcx
	call fn00000000004505A0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	// succ:  l0000000000450C13
l0000000000450C13:
	rax = rax + rbx
	SCZO = cond(rax)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450BF0_exit
fn0000000000450BF0_exit:


// fn0000000000450C20
// Return size: 8
define fn0000000000450C20
fn0000000000450C20_entry:
	rsp = fp
	// succ:  l0000000000450C20
l0000000000450C20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r8 = Mem0[rdx:word64]
	rsi = rcx
	rbx = rdx
	eax = Mem0[r8 - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000450C42
	// succ:  l0000000000450C37 l0000000000450C42
l0000000000450C37:
	rcx = rdx
	call fn00000000004505A0 (retsize: 8;)
	r8 = Mem0[rbx:word64]
	// succ:  l0000000000450C42
l0000000000450C42:
	rax = rsi
	Mem0[rsi:word64] = r8
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450C20_exit
fn0000000000450C20_exit:


// fn0000000000450C50
// Return size: 8
define fn0000000000450C50
fn0000000000450C50_entry:
	rsp = fp
	// succ:  l0000000000450C50
l0000000000450C50:
	r8 = Mem0[rcx:word64]
	r10d = Mem0[r8 - 8<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d & r10d)
	C = false
	branch Test(SG,S) l0000000000450C80
	// succ:  l0000000000450C5C l0000000000450C80
l0000000000450C5C:
	rax = Mem0[rdx:word64]
	r9d = Mem0[rax - 8<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NS,S) l0000000000450C6F
	// succ:  l0000000000450C68 l0000000000450C6F
l0000000000450C68:
	Mem0[rax - 8<64>:word32] = 0<32>
	// succ:  l0000000000450C6F
l0000000000450C6F:
	Mem0[rcx:word64] = rax
	Mem0[rdx:word64] = r8
	return
	// succ:  fn0000000000450C50_exit
l0000000000450C80:
	Mem0[r8 - 8<64>:word32] = 0<32>
	goto l0000000000450C5C
	// succ:  l0000000000450C5C
fn0000000000450C50_exit:


// fn0000000000450C90
// Return size: 8
define fn0000000000450C90
fn0000000000450C90_entry:
	rsp = fp
	// succ:  l0000000000450C90
l0000000000450C90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l0000000000450CAA
	// succ:  l0000000000450C9F l0000000000450CAA
l0000000000450C9F:
	rbx = rcx
	call fn00000000004505A0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	// succ:  l0000000000450CAA
l0000000000450CAA:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450C90_exit
fn0000000000450C90_exit:


// fn0000000000450CB0
// Return size: 8
define fn0000000000450CB0
fn0000000000450CB0_entry:
	rsp = fp
	// succ:  l0000000000450CB0
l0000000000450CB0:
	rax = Mem0[rcx:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = Mem0[rax - 0x18<64>:word64]
	// succ:  l0000000000450CBC_thunk_fn0000000000451CC0
l0000000000450CBC_thunk_fn0000000000451CC0:
	call fn0000000000451CC0 (retsize: 0;)
	return
	// succ:  fn0000000000450CB0_exit
fn0000000000450CB0_exit:


// fn0000000000450CD0
// Return size: 8
define fn0000000000450CD0
fn0000000000450CD0_entry:
	rsp = fp
	// succ:  l0000000000450CD0
l0000000000450CD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rbx = rdx
	rbx = rbx - Mem0[rcx:word64]
	SCZO = cond(rbx)
	rsi = rcx
	rdx = rbx
	call fn0000000000451CC0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	Mem0[rax - 8<64>:word32] = 0xFFFFFFFF<32>
	rax = rax + rbx
	SCZO = cond(rax)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450CD0_exit
fn0000000000450CD0_exit:


// fn0000000000450D10
// Return size: 8
define fn0000000000450D10
fn0000000000450D10_entry:
	rsp = fp
	// succ:  l0000000000450D10
l0000000000450D10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r8 = r8 - rdx
	SCZO = cond(r8)
	rax = rdx
	branch Test(NE,Z) l0000000000450D25
	// succ:  l0000000000450D1E l0000000000450D25
l0000000000450D1E:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450D10_exit
l0000000000450D25:
	rax = rax - Mem0[rcx:word64]
	SCZO = cond(rax)
	rsi = rcx
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rdx = rax
	rbx = rax
	call fn0000000000451CC0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	Mem0[rax - 8<64>:word32] = 0xFFFFFFFF<32>
	rax = rax + rbx
	SCZO = cond(rax)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450D10_exit
fn0000000000450D10_exit:


// fn0000000000450D50
// Return size: 8
define fn0000000000450D50
fn0000000000450D50_entry:
	rsp = fp
	// succ:  l0000000000450D50
l0000000000450D50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	r9 = Mem0[rax - 0x18<64>:word64]
	r10 = r9
	r10 = r10 - rdx
	SCZO = cond(r10)
	SCZO = cond(r10 - r8)
	branch Test(UGT,CZ) l0000000000450D6C
	// succ:  l0000000000450D68_1 l0000000000450D6C
l0000000000450D68_1:
	r8 = r10
	// succ:  l0000000000450D6C
l0000000000450D6C:
	SCZO = cond(rdx - r9)
	branch Test(UGT,CZ) l0000000000450D82
	// succ:  l0000000000450D71 l0000000000450D82
l0000000000450D71:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000451CC0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450D50_exit
l0000000000450D82:
	r8 = rdx
	rcx = 0x000000000048D5D0<p64>
	rdx = 0x000000000048D68D<p64>
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000450D9F_thunk_fn0000000000450DA0
l0000000000450D9F_thunk_fn0000000000450DA0:
	call fn0000000000450DA0 (retsize: 0;)
	return
	// succ:  fn0000000000450D50_exit
fn0000000000450D50_exit:


// fn0000000000450DA0
// Return size: 8
define fn0000000000450DA0
fn0000000000450DA0_entry:
	rsp = fp
	// succ:  l0000000000450DA0
l0000000000450DA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l0000000000450DBA
	// succ:  l0000000000450DAF l0000000000450DBA
l0000000000450DAF:
	rbx = rcx
	call fn00000000004505A0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	// succ:  l0000000000450DBA
l0000000000450DBA:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450DA0_exit
fn0000000000450DA0_exit:


// fn0000000000450DC0
// Return size: 8
define fn0000000000450DC0
fn0000000000450DC0_entry:
	rsp = fp
	// succ:  l0000000000450DC0
l0000000000450DC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	rsi = rdx
	eax = strlen(rcx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000450DE7
	// succ:  l0000000000450DD9 l0000000000450DE7
l0000000000450DD9:
	r8 = rax
	rdx = rsi
	rcx = rbx
	call fn0000000000450E20 (retsize: 8;)
	// succ:  l0000000000450DE7
l0000000000450DE7:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450DC0_exit
fn0000000000450DC0_exit:


// fn0000000000450E00
// Return size: 8
define fn0000000000450E00
fn0000000000450E00_entry:
	rsp = fp
	// succ:  l0000000000450E00
l0000000000450E00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	branch Test(EQ,Z) l0000000000450E12
	// succ:  l0000000000450E0D l0000000000450E12
l0000000000450E0D:
	call fn0000000000450E20 (retsize: 8;)
	// succ:  l0000000000450E12
l0000000000450E12:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450E00_exit
fn0000000000450E00_exit:


// fn0000000000450E20
// Return size: 8
define fn0000000000450E20
fn0000000000450E20_entry:
	rsp = fp
	// succ:  l0000000000450E20
l0000000000450E20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	r10 = Mem0[rcx:word64]
	r9 = 0x3FFFFFFFFFFFFFF9<64>
	rsi = rcx
	rdi = rdx
	rax = Mem0[r10 - 0x18<64>:word64]
	r9 = r9 - rax
	SCZO = cond(r9)
	SCZO = cond(r9 - r8)
	branch Test(ULT,C) l0000000000450EEC
	// succ:  l0000000000450E4A l0000000000450EEC
l0000000000450E4A:
	rbx = r8 + rax
	SCZO = cond(rbx - Mem0[r10 - 0x10<64>:word64])
	branch Test(ULE,CZ) l0000000000450EA0
	// succ:  l0000000000450E54 l0000000000450EA0
l0000000000450E54:
	SCZO = cond(r10 - rdi)
	branch Test(ULE,CZ) l0000000000450EAD
	// succ:  l0000000000450E59 l0000000000450EAD
l0000000000450E59:
	rdx = rbx
	rcx = rsi
	Mem0[rsp + 0x28<64>:word64] = r8
	call fn0000000000451BE0 (retsize: 8;)
	r10 = Mem0[rsi:word64]
	r8 = Mem0[rsp + 0x28<64>:word64]
	rax = Mem0[r10 - 0x18<64>:word64]
	// succ:  l0000000000450E75
l0000000000450E75:
	SCZO = cond(r8 - 1<64>)
	rcx = r10 + rax
	branch Test(NE,Z) l0000000000450EE2
	// succ:  l0000000000450E7F l0000000000450EE2
l0000000000450E7F:
	edx = CONVERT(Mem0[rdi:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rcx:byte] = dl
	// succ:  l0000000000450E84
l0000000000450E84:
	rax = Mem0[rsi:word64]
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = rbx
	Mem0[rax + rbx:byte] = 0<8>
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450E20_exit
l0000000000450EA0:
	edx = Mem0[r10 - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l0000000000450E75
	// succ:  l0000000000450EA8 l0000000000450E75
l0000000000450EA8:
	SCZO = cond(r10 - rdi)
	branch Test(UGT,CZ) l0000000000450E59
	// succ:  l0000000000450EAD l0000000000450E59
l0000000000450EAD:
	r9 = r10 + rax
	SCZO = cond(rdi - r9)
	branch Test(UGT,CZ) l0000000000450E59
	// succ:  l0000000000450EB6 l0000000000450E59
l0000000000450EB6:
	rcx = rsi
	rdx = rbx
	rdi = rdi - r10
	SCZO = cond(rdi)
	Mem0[rsp + 0x28<64>:word64] = r8
	call fn0000000000451BE0 (retsize: 8;)
	r10 = Mem0[rsi:word64]
	r8 = Mem0[rsp + 0x28<64>:word64]
	rax = Mem0[r10 - 0x18<64>:word64]
	rdi = rdi + r10
	SCZO = cond(rdi)
	SCZO = cond(r8 - 1<64>)
	rcx = r10 + rax
	branch Test(EQ,Z) l0000000000450E7F
	// succ:  l0000000000450EE2 l0000000000450E7F
l0000000000450EE2:
	rdx = rdi
	rax = memcpy(rcx, rdx, r8)
	goto l0000000000450E84
	// succ:  l0000000000450E84
l0000000000450EEC:
	rcx = 0x000000000048D6FE<p64>
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l0000000000450EFF_thunk_fn0000000000450F00
l0000000000450EFF_thunk_fn0000000000450F00:
	call fn0000000000450F00 (retsize: 0;)
	return
	// succ:  fn0000000000450E20_exit
fn0000000000450E20_exit:


// fn0000000000450F00
// Return size: 8
define fn0000000000450F00
fn0000000000450F00_entry:
	rsp = fp
	// succ:  l0000000000450F00
l0000000000450F00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbp = rdx
	rdx = Mem0[rdx:word64]
	rbx = rcx
	rsi = Mem0[rdx - 0x18<64>:word64]
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000450F64
	// succ:  l0000000000450F1A l0000000000450F64
l0000000000450F1A:
	rax = Mem0[rcx:word64]
	rcx = Mem0[rax - 0x18<64>:word64]
	rdi = rcx + rsi
	SCZO = cond(rdi - Mem0[rax - 0x10<64>:word64])
	branch Test(ULE,CZ) l0000000000450F70
	// succ:  l0000000000450F2B l0000000000450F70
l0000000000450F2B:
	rdx = rdi
	rcx = rbx
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rdx = Mem0[rbp + 0<64>:word64]
	rcx = Mem0[rax - 0x18<64>:word64]
	// succ:  l0000000000450F41
l0000000000450F41:
	rcx = rcx + rax
	SCZO = cond(rcx)
	SCZO = cond(rsi - 1<64>)
	branch Test(EQ,Z) l0000000000450F80
	// succ:  l0000000000450F4A l0000000000450F80
l0000000000450F4A:
	r8 = rsi
	rax = memcpy(rcx, rdx, r8)
	// succ:  l0000000000450F52
l0000000000450F52:
	rax = Mem0[rbx:word64]
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = rdi
	Mem0[rax + rdi:byte] = 0<8>
	// succ:  l0000000000450F64
l0000000000450F64:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450F00_exit
l0000000000450F70:
	r8d = Mem0[rax - 8<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d & r8d)
	C = false
	branch Test(GT,SZO) l0000000000450F2B
	// succ:  l0000000000450F79 l0000000000450F2B
l0000000000450F79:
	goto l0000000000450F41
	// succ:  l0000000000450F41
l0000000000450F80:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:byte] = al
	goto l0000000000450F52
	// succ:  l0000000000450F52
fn0000000000450F00_exit:


// fn0000000000450F90
// Return size: 8
define fn0000000000450F90
fn0000000000450F90_entry:
	rsp = fp
	// succ:  l0000000000450F90
l0000000000450F90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r10 = Mem0[rdx:word64]
	rdi = rcx
	r12 = rdx
	rsi = r8
	rbx = Mem0[r10 - 0x18<64>:word64]
	SCZO = cond(r8 - rbx)
	branch Test(UGT,CZ) l0000000000451037
	// succ:  l0000000000450FB3 l0000000000451037
l0000000000450FB3:
	rbx = rbx - r8
	SCZO = cond(rbx)
	SCZO = cond(rbx - r9)
	branch Test(ULE,CZ) l0000000000450FBD
	// succ:  l0000000000450FB9_1 l0000000000450FBD
l0000000000450FB9_1:
	rbx = r9
	// succ:  l0000000000450FBD
l0000000000450FBD:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000451010
	// succ:  l0000000000450FC2 l0000000000451010
l0000000000450FC2:
	rax = Mem0[rcx:word64]
	rcx = Mem0[rax - 0x18<64>:word64]
	rbp = rbx + rcx
	SCZO = cond(rbp - Mem0[rax - 0x10<64>:word64])
	branch Test(ULE,CZ) l0000000000451020
	// succ:  l0000000000450FD3 l0000000000451020
l0000000000450FD3:
	rcx = rdi
	rdx = rbp
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rdi:word64]
	r10 = Mem0[r12:word64]
	rcx = Mem0[rax - 0x18<64>:word64]
	// succ:  l0000000000450FE9
l0000000000450FE9:
	rcx = rcx + rax
	SCZO = cond(rcx)
	SCZO = cond(rbx - 1<64>)
	rdx = r10 + rsi
	branch Test(EQ,Z) l0000000000451030
	// succ:  l0000000000450FF6 l0000000000451030
l0000000000450FF6:
	r8 = rbx
	rax = memcpy(rcx, rdx, r8)
	// succ:  l0000000000450FFE
l0000000000450FFE:
	rax = Mem0[rdi:word64]
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = rbp
	Mem0[rax + rbp:byte] = 0<8>
	// succ:  l0000000000451010
l0000000000451010:
	rax = rdi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000450F90_exit
l0000000000451020:
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(GT,SZO) l0000000000450FD3
	// succ:  l0000000000451027 l0000000000450FD3
l0000000000451027:
	goto l0000000000450FE9
	// succ:  l0000000000450FE9
l0000000000451030:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:byte] = al
	goto l0000000000450FFE
	// succ:  l0000000000450FFE
l0000000000451037:
	rdx = 0x000000000048D6FE<p64>
	rcx = 0x000000000048D5D0<p64>
	r9 = rbx
	call fn0000000000471560 (retsize: 8;)
	// succ:  l000000000045104F_thunk_fn0000000000451050
l000000000045104F_thunk_fn0000000000451050:
	call fn0000000000451050 (retsize: 0;)
	return
	// succ:  fn0000000000450F90_exit
fn0000000000450F90_exit:


