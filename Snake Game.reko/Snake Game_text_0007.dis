// fn0000000000471040
// Return size: 8
define fn0000000000471040
fn0000000000471040_entry:
	rsp = fp
	// succ:  l0000000000471040
l0000000000471040:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdi = rdx
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	rsi = rcx
	r12 = r8
	Mem0[r8:byte] = 1<8>
	branch Test(UGE,C) l0000000000471125
	// succ:  l0000000000471065 l0000000000471125
l0000000000471065:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000471068
l0000000000471068:
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	rbx = Mem0[rsi + 0x18<64>:word64]
	goto l00000000004710A2
	// succ:  l00000000004710A2
l0000000000471070:
	rax = Mem0[rdi:word64]
	r8 = rbx
	rcx = rdi
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	v20 = Mem0[rsi + 0x10<64>:word64] + rax
	Mem0[rsi + 0x10<64>:word64] = v20
	SCZO = cond(v20)
	rbp = rbp + rax
	SCZO = cond(rbp)
	SCZO = cond(rbx - rax)
	branch Test(GT,SZO) l0000000000471112
	// succ:  l000000000047108C l0000000000471112
l000000000047108C:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l00000000004710EE
	// succ:  l000000000047109A l00000000004710EE
l000000000047109A:
	rbx = Mem0[rsi + 0x18<64>:word64]
	// succ:  l000000000047109E
l000000000047109E:
	rdx = Mem0[rsi + 0x10<64>:word64]
	// succ:  l00000000004710A2
l00000000004710A2:
	rbx = rbx - rdx
	SCZO = cond(rbx)
	SCZO = cond(rbx - 1<64>)
	branch Test(GT,SZO) l0000000000471070
	// succ:  l00000000004710AB l0000000000471070
l00000000004710AB:
	rdx = Mem0[rdi + 0x28<64>:word64]
	SCZO = cond(rdx - Mem0[rdi + 0x30<64>:word64])
	branch Test(UGE,C) l0000000000471100
	// succ:  l00000000004710B5 l0000000000471100
l00000000004710B5:
	Mem0[rdx:byte] = al
	v19 = Mem0[rdi + 0x28<64>:word64] + 1<64>
	Mem0[rdi + 0x28<64>:word64] = v19
	SCZO = cond(v19)
	// succ:  l00000000004710BC
l00000000004710BC:
	rax = Mem0[rsi + 0x10<64>:word64]
	rbx = Mem0[rsi + 0x18<64>:word64]
	rbp = rbp + 1<64>
	SCZO = cond(rbp)
	SCZO = cond(rax - rbx)
	branch Test(UGE,C) l00000000004710E0
	// succ:  l00000000004710CD l00000000004710E0
l00000000004710CD:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsi + 0x10<64>:word64] = rax
	// succ:  l00000000004710D5
l00000000004710D5:
	SCZO = cond(rax - rbx)
	branch Test(UGE,C) l000000000047108C
	// succ:  l00000000004710DA l000000000047108C
l00000000004710DA:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000047109E
	// succ:  l000000000047109E
l00000000004710E0:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000047113B
	// succ:  l00000000004710EE l000000000047113B
l00000000004710EE:
	rax = rbp
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000471040_exit
l0000000000471100:
	r8 = Mem0[rdi:word64]
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call Mem0[r8 + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l00000000004710BC
	// succ:  l0000000000471112 l00000000004710BC
l0000000000471112:
	rax = rbp
	Mem0[r12:byte] = 0<8>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000471040_exit
l0000000000471125:
	rax = Mem0[rcx:word64]
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l00000000004710EE
	// succ:  l0000000000471132 l00000000004710EE
l0000000000471132:
	rdx = Mem0[rsi + 0x10<64>:word64]
	goto l0000000000471068
	// succ:  l0000000000471068
l000000000047113B:
	rax = Mem0[rsi + 0x10<64>:word64]
	rbx = Mem0[rsi + 0x18<64>:word64]
	goto l00000000004710D5
	// succ:  l00000000004710D5
fn0000000000471040_exit:


// fn0000000000471150
// Return size: 8
define fn0000000000471150
fn0000000000471150_entry:
	rsp = fp
	// succ:  l0000000000471150
l0000000000471150:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	rsi = rcx
	rdi = rdx
	r12 = r8
	Mem0[r8:byte] = 1<8>
	branch Test(UGE,C) l000000000047124B
	// succ:  l0000000000471175 l000000000047124B
l0000000000471175:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000471178
l0000000000471178:
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(NE,Z) l00000000004711B3
	// succ:  l0000000000471180 l00000000004711B3
l0000000000471180:
	goto l0000000000471228
	// succ:  l0000000000471228
l0000000000471185:
	rax = Mem0[rdi:word64]
	r8 = rbx
	rcx = rdi
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	r9 = rax
	rax = rax + rax
	v20 = Mem0[rsi + 0x10<64>:word64] + rax
	Mem0[rsi + 0x10<64>:word64] = v20
	SCZO = cond(v20)
	rbp = rbp + r9
	SCZO = cond(rbp)
	SCZO = cond(rbx - r9)
	branch Test(GT,SZO) l0000000000471223
	// succ:  l00000000004711A4 l0000000000471223
l00000000004711A4:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	// succ:  l00000000004711AD
l00000000004711AD:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000471228
	// succ:  l00000000004711B3 l0000000000471228
l00000000004711B3:
	rdx = Mem0[rsi + 0x10<64>:word64]
	rbx = Mem0[rsi + 0x18<64>:word64]
	rbx = rbx - rdx
	SCZO = cond(rbx)
	rbx = rbx >> 1<64>
	SCZO = cond(rbx)
	SCZO = cond(rbx - 1<64>)
	branch Test(GT,SZO) l0000000000471185
	// succ:  l00000000004711C7 l0000000000471185
l00000000004711C7:
	rdx = Mem0[rdi + 0x28<64>:word64]
	SCZO = cond(rdx - Mem0[rdi + 0x30<64>:word64])
	branch Test(UGE,C) l0000000000471210
	// succ:  l00000000004711D1 l0000000000471210
l00000000004711D1:
	Mem0[rdx:word16] = ax
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rdi + 0x28<64>:word64] = rdx
	// succ:  l00000000004711DC
l00000000004711DC:
	rbp = rbp + 1<64>
	SCZO = cond(rbp)
	rdx = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000471240
	// succ:  l00000000004711EA l0000000000471240
l00000000004711EA:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rsi + 0x10<64>:word64] = rdx
	// succ:  l00000000004711F5
l00000000004711F5:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000471228
	// succ:  l00000000004711FB l0000000000471228
l00000000004711FB:
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004711A4
	// succ:  l0000000000471205 l00000000004711A4
l0000000000471205:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l00000000004711AD
	// succ:  l00000000004711AD
l0000000000471210:
	r8 = Mem0[rdi:word64]
	edx = CONVERT(ax, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call Mem0[r8 + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(NE,Z) l00000000004711DC
	// succ:  l0000000000471223 l00000000004711DC
l0000000000471223:
	Mem0[r12:byte] = 0<8>
	// succ:  l0000000000471228
l0000000000471228:
	rax = rbp
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000471150_exit
l0000000000471240:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l00000000004711F5
	// succ:  l00000000004711F5
l000000000047124B:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000471178
	// succ:  l0000000000471178
fn0000000000471150_exit:


// fn0000000000471260
// Return size: 0
define fn0000000000471260
fn0000000000471260_entry:
	rsp = fp
	// succ:  l0000000000471260
l0000000000471260:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[0x0000000000491BE0<p64>:word64]
	r8 = 0x0000000000455470<p64>
	rdx = rcx + 0x10<64>
	rcx = rax
	Mem0[rax:word64] = rdx
	rdx = 0x0000000000493570<p64>
	call fn00000000004760B0 (retsize: 8;)
	// succ:  l000000000047129F_thunk_fn00000000004712A0
l000000000047129F_thunk_fn00000000004712A0:
	call fn00000000004712A0 (retsize: 0;)
	return
	// succ:  fn0000000000471260_exit
fn0000000000471260_exit:


// fn00000000004712A0
// Return size: 0
define fn00000000004712A0
fn00000000004712A0_entry:
	rsp = fp
	// succ:  l00000000004712A0
l00000000004712A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rdi = rcx
	rsi = rsp + 0x30<64>
	ecx = 0x10<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rsp + 0x2E<64>
	rdx = rdi
	rcx = rsi
	rbx = rax
	call fn0000000000451EA0 (retsize: 8;)
	rdx = rsi
	rcx = rbx
	call fn000000000045F390 (retsize: 8;)
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	r8 = 0x000000000045F3F0<p64>
	rdx = 0x00000000004936B0<p64>
	rcx = rbx
	call fn00000000004760B0 (retsize: 8;)
	rsi = rax
	// succ:  l0000000000471303
l0000000000471303:
	rcx = rbx
	call fn0000000000475BA0 (retsize: 8;)
	rcx = rsi
	call fn00000000004115B0 (retsize: 8;)
	rsi = rax
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	goto l0000000000471303
	// succ:  l0000000000471303
fn00000000004712A0_exit:


// fn0000000000471330
// Return size: 0
define fn0000000000471330
fn0000000000471330_entry:
	rsp = fp
	// succ:  l0000000000471330
l0000000000471330:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rdi = rcx
	rsi = rsp + 0x30<64>
	ecx = 0x10<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rsp + 0x2E<64>
	rdx = rdi
	rcx = rsi
	rbx = rax
	call fn0000000000451EA0 (retsize: 8;)
	rdx = rsi
	rcx = rbx
	call fn00000000004620C0 (retsize: 8;)
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	r8 = 0x0000000000462110<p64>
	rdx = 0x0000000000493830<p64>
	rcx = rbx
	call fn00000000004760B0 (retsize: 8;)
	rsi = rax
	// succ:  l0000000000471393
l0000000000471393:
	rcx = rbx
	call fn0000000000475BA0 (retsize: 8;)
	rcx = rsi
	call fn00000000004115B0 (retsize: 8;)
	rsi = rax
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	goto l0000000000471393
	// succ:  l0000000000471393
fn0000000000471330_exit:


// fn00000000004713C0
// Return size: 8
define fn00000000004713C0
fn00000000004713C0_entry:
	rsp = fp
	// succ:  l00000000004713C0
l00000000004713C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	Mem0[rbp + 0x28<64>:word64] = r9
	rdx = Mem0[rbp + 0x20<64>:word64]
	rax = Mem0[rbp + 0x18<64>:word64]
	r8 = rdx
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000470AA0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004713C0_exit
fn00000000004713C0_exit:


// fn0000000000471400
// Return size: 8
define fn0000000000471400
fn0000000000471400_entry:
	rsp = fp
	// succ:  l0000000000471400
l0000000000471400:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	Mem0[rbp + 0x28<64>:word64] = r9
	rdx = Mem0[rbp + 0x20<64>:word64]
	rax = Mem0[rbp + 0x18<64>:word64]
	r8 = rdx
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000470AE0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000471400_exit
fn0000000000471400_exit:


// fn0000000000471440
// Return size: 0
define fn0000000000471440
fn0000000000471440_entry:
	rsp = fp
	// succ:  l0000000000471440
l0000000000471440:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rdi = rcx
	rsi = rsp + 0x30<64>
	ecx = 0x10<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rsp + 0x2E<64>
	rdx = rdi
	rcx = rsi
	rbx = rax
	call fn0000000000451EA0 (retsize: 8;)
	rdx = rsi
	rcx = rbx
	call fn0000000000463DF0 (retsize: 8;)
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	r8 = 0x0000000000463E40<p64>
	rdx = 0x0000000000493970<p64>
	rcx = rbx
	call fn00000000004760B0 (retsize: 8;)
	rsi = rax
	// succ:  l00000000004714A3
l00000000004714A3:
	rcx = rbx
	call fn0000000000475BA0 (retsize: 8;)
	rcx = rsi
	call fn00000000004115B0 (retsize: 8;)
	rsi = rax
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	goto l00000000004714A3
	// succ:  l00000000004714A3
fn0000000000471440_exit:


// fn00000000004714D0
// Return size: 0
define fn00000000004714D0
fn00000000004714D0_entry:
	rsp = fp
	// succ:  l00000000004714D0
l00000000004714D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rdi = rcx
	rsi = rsp + 0x30<64>
	ecx = 0x10<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rsp + 0x2E<64>
	rdx = rdi
	rcx = rsi
	rbx = rax
	call fn0000000000451EA0 (retsize: 8;)
	rdx = rsi
	rcx = rbx
	call fn00000000004650A0 (retsize: 8;)
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	r8 = 0x00000000004650F0<p64>
	rdx = 0x00000000004939F0<p64>
	rcx = rbx
	call fn00000000004760B0 (retsize: 8;)
	rsi = rax
	// succ:  l0000000000471533
l0000000000471533:
	rcx = rbx
	call fn0000000000475BA0 (retsize: 8;)
	rcx = rsi
	call fn00000000004115B0 (retsize: 8;)
	rsi = rax
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	goto l0000000000471533
	// succ:  l0000000000471533
fn00000000004714D0_exit:


// fn0000000000471560
// Return size: 0
define fn0000000000471560
fn0000000000471560_entry:
	rsp = fp
	// succ:  l0000000000471560
l0000000000471560:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 8<64>:word64] = rdx
	Mem0[rbp + 0<64>:word64] = r8
	rbx = rcx
	Mem0[rbp + 8<64>:word64] = r9
	eax = strlen(rcx)
	rdx = rax + 0x200<64>
	rax = rax + 0x21E<64>
	SCZO = cond(rax)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	r9 = rbp - 8<64>
	r8 = rbx
	rdi = rsp + 0x20<64>
	rsi = rbp - 0x50<64>
	Mem0[rbp - 0x48<64>:word64] = r9
	rcx = rdi
	call fn00000000004255A0 (retsize: 8;)
	ecx = 0x10<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rbp - 0x52<64>
	rdx = rdi
	rcx = rsi
	rbx = rax
	call fn0000000000451EA0 (retsize: 8;)
	rdx = rsi
	rcx = rbx
	call fn0000000000455350 (retsize: 8;)
	rax = Mem0[rbp - 0x50<64>:word64]
	rdx = rbp - 0x51<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	r8 = 0x00000000004553A0<p64>
	rdx = 0x0000000000493530<p64>
	rcx = rbx
	call fn00000000004760B0 (retsize: 8;)
	rsi = rax
	// succ:  l000000000047160A
l000000000047160A:
	rcx = rbx
	call fn0000000000475BA0 (retsize: 8;)
	rcx = rsi
	call fn00000000004115B0 (retsize: 8;)
	rsi = rax
	rax = Mem0[rbp - 0x50<64>:word64]
	rdx = rbp - 0x51<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	goto l000000000047160A
	// succ:  l000000000047160A
fn0000000000471560_exit:


// fn0000000000471630
// Return size: 8
define fn0000000000471630
fn0000000000471630_entry:
	rsp = fp
	// succ:  l0000000000471630
l0000000000471630:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[0x0000000000491CA0<p64>:word64]
	r8 = 0x00000000004659D0<p64>
	rdx = rcx + 0x10<64>
	rcx = rax
	Mem0[rax:word64] = rdx
	rdx = 0x0000000000493A50<p64>
	call fn00000000004760B0 (retsize: 8;)
	// succ:  l000000000047166F_thunk_fn0000000000471670
l000000000047166F_thunk_fn0000000000471670:
	call fn0000000000471670 (retsize: 0;)
	return
	// succ:  fn0000000000471630_exit
fn0000000000471630_exit:


// fn0000000000471670
// Return size: 8
define fn0000000000471670
fn0000000000471670_entry:
	rsp = fp
	// succ:  l0000000000471670
l0000000000471670:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdx = rcx
	rbx = rsp + 0x20<64>
	rsi = rcx
	rdx = rdx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx)
	rcx = rbx
	rdx = rdx + 0xD0<64>
	SCZO = cond(rdx)
	call fn000000000046AE80 (retsize: 8;)
	rcx = rbx
	call fn0000000000472FC0 (retsize: 8;)
	rcx = rbx
	rdi = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[rsi:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rbx = Mem0[rsi + 0xE8<64> + rax:word64]
	rax = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000471753
	// succ:  l00000000004716C8 l0000000000471753
l00000000004716C8:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004716CB
l00000000004716CB:
	rdx = Mem0[rdi + 0x30<64>:word64]
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(Mem0[rdx + rax * 2<64>:byte] & 0x20<8>)
	C = false
	branch Test(EQ,Z) l000000000047170A
	// succ:  l00000000004716D8 l000000000047170A
l00000000004716D8:
	// succ:  l00000000004716E0
l00000000004716E0:
	rdx = Mem0[rbx + 0x10<64>:word64]
	r8 = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(rdx - r8)
	branch Test(UGE,C) l0000000000471715
	// succ:  l00000000004716ED l0000000000471715
l00000000004716ED:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x10<64>:word64] = rdx
	// succ:  l00000000004716F5
l00000000004716F5:
	SCZO = cond(rdx - r8)
	branch Test(UGE,C) l0000000000471743
	// succ:  l00000000004716FA l0000000000471743
l00000000004716FA:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004716FD
l00000000004716FD:
	rcx = Mem0[rdi + 0x30<64>:word64]
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(Mem0[rcx + rdx * 2<64>:byte] & 0x20<8>)
	C = false
	branch Test(NE,Z) l00000000004716E0
	// succ:  l000000000047170A l00000000004716E0
l000000000047170A:
	rax = rsi
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000471670_exit
l0000000000471715:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000471766
	// succ:  l0000000000471723 l0000000000471766
l0000000000471723:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000471670_exit
l0000000000471743:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000471723
	// succ:  l0000000000471751 l0000000000471723
l0000000000471751:
	goto l00000000004716FD
	// succ:  l00000000004716FD
l0000000000471753:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000471723
	// succ:  l0000000000471761 l0000000000471723
l0000000000471761:
	goto l00000000004716CB
	// succ:  l00000000004716CB
l0000000000471766:
	rdx = Mem0[rbx + 0x10<64>:word64]
	r8 = Mem0[rbx + 0x18<64>:word64]
	goto l00000000004716F5
	// succ:  l00000000004716F5
fn0000000000471670_exit:


// fn0000000000471790
// Return size: 8
define fn0000000000471790
fn0000000000471790_entry:
	rsp = fp
	// succ:  l0000000000471790
l0000000000471790:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdx = rcx
	rbx = rsp + 0x20<64>
	rdi = rcx
	rdx = rdx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx)
	rcx = rbx
	rdx = rdx + 0xD0<64>
	SCZO = cond(rdx)
	call fn000000000046AE80 (retsize: 8;)
	rcx = rbx
	call fn0000000000473020 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[rdi:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rbx = Mem0[rdi + 0xE8<64> + rax:word64]
	rax = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000471870
	// succ:  l00000000004717E8 l0000000000471870
l00000000004717E8:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004717EB
l00000000004717EB:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000471841
	// succ:  l00000000004717F1 l0000000000471841
l00000000004717F1:
	r9 = Mem0[rsi:word64]
	r8d = CONVERT(ax, word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	call Mem0[r9 + 0x10<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000471813
	// succ:  l0000000000471808 l0000000000471813
l0000000000471808:
	rax = rdi
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000471790_exit
l0000000000471813:
	rdx = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000471861
	// succ:  l000000000047181D l0000000000471861
l000000000047181D:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x10<64>:word64] = rdx
	// succ:  l0000000000471828
l0000000000471828:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000471841
	// succ:  l000000000047182E l0000000000471841
l000000000047182E:
	rdx = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000471870
	// succ:  l0000000000471838 l0000000000471870
l0000000000471838:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(NE,Z) l00000000004717F1
	// succ:  l0000000000471841 l00000000004717F1
l0000000000471841:
	rax = Mem0[rdi:word64]
	rcx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rdi
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000471790_exit
l0000000000471861:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l0000000000471828
	// succ:  l0000000000471828
l0000000000471870:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l00000000004717EB
	// succ:  l00000000004717EB
fn0000000000471790_exit:


// fn00000000004718A0
// Return size: 8
define fn00000000004718A0
fn00000000004718A0_entry:
	rsp = fp
	// succ:  l00000000004718A0
l00000000004718A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = rbp - 0x10<64>
	rdx = Mem0[rbp + 0x10<64>:word64]
	rcx = rax
	call fn000000000045F330 (retsize: 8;)
	rax = Mem0[rbp - 0x10<64>:word64]
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004718A0_exit
fn00000000004718A0_exit:


// fn00000000004718D0
// Return size: 8
define fn00000000004718D0
fn00000000004718D0_entry:
	rsp = fp
	// succ:  l00000000004718D0
l00000000004718D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = rbp - 0x10<64>
	rdx = Mem0[rbp + 0x10<64>:word64]
	rcx = rax
	call fn000000000045F350 (retsize: 8;)
	rax = Mem0[rbp - 0x10<64>:word64]
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004718D0_exit
fn00000000004718D0_exit:


// fn0000000000471900
// Return size: 8
define fn0000000000471900
fn0000000000471900_entry:
	rsp = fp
	// succ:  l0000000000471900
l0000000000471900:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x40<64>:word64] = rcx
	Mem0[rbp - 0x38<64>:word64] = rdx
	Mem0[rbp - 0x30<64>:word64] = r8
	Mem0[rbp - 0x28<64>:word64] = r9
	rax = Mem0[rbp - 0x38<64>:word64]
	rcx = rax
	call fn00000000004718A0 (retsize: 8;)
	rbx = rax
	rcx = Mem0[rbp - 0x40<64>:word64]
	call fn00000000004718A0 (retsize: 8;)
	rcx = rax
	rdx = Mem0[rbp - 0x28<64>:word64]
	rax = Mem0[rbp - 0x30<64>:word64]
	r9 = rdx
	r8 = rax
	rdx = rbx
	call fn00000000004713C0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000471900_exit
fn0000000000471900_exit:


// fn0000000000471960
// Return size: 8
define fn0000000000471960
fn0000000000471960_entry:
	rsp = fp
	// succ:  l0000000000471960
l0000000000471960:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x40<64>:word64] = rcx
	Mem0[rbp - 0x38<64>:word64] = rdx
	Mem0[rbp - 0x30<64>:word64] = r8
	Mem0[rbp - 0x28<64>:word64] = r9
	rax = Mem0[rbp - 0x38<64>:word64]
	rcx = rax
	call fn00000000004718D0 (retsize: 8;)
	rbx = rax
	rcx = Mem0[rbp - 0x40<64>:word64]
	call fn00000000004718D0 (retsize: 8;)
	rcx = rax
	rdx = Mem0[rbp - 0x28<64>:word64]
	rax = Mem0[rbp - 0x30<64>:word64]
	r9 = rdx
	r8 = rax
	rdx = rbx
	call fn0000000000471400 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000471960_exit
fn0000000000471960_exit:


// fn00000000004719C0
// Return size: 8
define fn00000000004719C0
fn00000000004719C0_entry:
	rsp = fp
	// succ:  l00000000004719C0
l00000000004719C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x10<64>:word64]
	rdx = Mem0[rax:word64]
	rax = Mem0[rbp + 0x18<64>:word64]
	rax = Mem0[rax:word64]
	SCZO = cond(rdx - rax)
	branch Test(UGE,C) l00000000004719E5
	// succ:  l00000000004719DF l00000000004719E5
l00000000004719DF:
	rax = Mem0[rbp + 0x18<64>:word64]
	goto l00000000004719E9
	// succ:  l00000000004719E9
l00000000004719E5:
	rax = Mem0[rbp + 0x10<64>:word64]
	// succ:  l00000000004719E9
l00000000004719E9:
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004719C0_exit
fn00000000004719C0_exit:


// fn00000000004719F0
// Return size: 8
define fn00000000004719F0
fn00000000004719F0_entry:
	rsp = fp
	// succ:  l00000000004719F0
l00000000004719F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x40<64>:word64] = rcx
	Mem0[rbp - 0x38<64>:word64] = rdx
	Mem0[rbp - 0x30<64>:word64] = r8
	rax = Mem0[rbp - 0x38<64>:word64]
	rcx = rax
	call fn000000000046F3E0 (retsize: 8;)
	rbx = rax
	rcx = Mem0[rbp - 0x40<64>:word64]
	call fn000000000046F3E0 (retsize: 8;)
	rcx = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	r8 = rax
	rdx = rbx
	call fn000000000046FE10 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004719F0_exit
fn00000000004719F0_exit:


// fn0000000000471A40
// Return size: 8
define fn0000000000471A40
fn0000000000471A40_entry:
	rsp = fp
	// succ:  l0000000000471A40
l0000000000471A40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rsi = rcx
	rax = Mem0[rax - 0x18<64>:word64]
	rbx = Mem0[rcx + 0xF0<64> + rax:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000471AAA
	// succ:  l0000000000471A5D l0000000000471AAA
l0000000000471A5D:
	SCZO = cond(Mem0[rbx + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000471A80
	// succ:  l0000000000471A63 l0000000000471A80
l0000000000471A63:
	edx = CONVERT(Mem0[rbx + 0x43<64>:byte], byte, int32)
	// succ:  l0000000000471A67
l0000000000471A67:
	rcx = rsi
	call fn000000000044E750 (retsize: 8;)
	rcx = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000471A78_thunk_fn000000000044E8B0
l0000000000471A78_thunk_fn000000000044E8B0:
	call fn000000000044E8B0 (retsize: 0;)
	return
	// succ:  fn0000000000471A40_exit
l0000000000471A80:
	rcx = rbx
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = 0x000000000042B5F0<p64>
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(EQ,Z) l0000000000471A67
	// succ:  l0000000000471AA0 l0000000000471A67
l0000000000471AA0:
	rcx = rbx
	call rax (retsize: 8;)
	edx = CONVERT(al, byte, int32)
	goto l0000000000471A67
	// succ:  l0000000000471A67
l0000000000471AAA:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000471AAF_thunk_fn0000000000471AB0
l0000000000471AAF_thunk_fn0000000000471AB0:
	call fn0000000000471AB0 (retsize: 0;)
	return
	// succ:  fn0000000000471A40_exit
fn0000000000471A40_exit:


// fn0000000000471AB0
// Return size: 8
define fn0000000000471AB0
fn0000000000471AB0_entry:
	rsp = fp
	// succ:  l0000000000471AB0
l0000000000471AB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rcx + 0xF0<64> + rax:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000471AEF
	// succ:  l0000000000471ACC l0000000000471AEF
l0000000000471ACC:
	rax = Mem0[rcx:word64]
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = rbx
	edx = CONVERT(ax, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000045D760 (retsize: 8;)
	rcx = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000471AEA_thunk_fn000000000045D8D0
l0000000000471AEA_thunk_fn000000000045D8D0:
	call fn000000000045D8D0 (retsize: 0;)
	return
	// succ:  fn0000000000471AB0_exit
l0000000000471AEF:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000471AFF_thunk_fn0000000000471B00
l0000000000471AFF_thunk_fn0000000000471B00:
	call fn0000000000471B00 (retsize: 0;)
	return
	// succ:  fn0000000000471AB0_exit
fn0000000000471AB0_exit:


// fn0000000000471B00
// Return size: 0
define fn0000000000471B00
fn0000000000471B00_entry:
	rsp = fp
	// succ:  l0000000000471B00
l0000000000471B00:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l0000000000471B02_thunk_fn000000000044E750
l0000000000471B02_thunk_fn000000000044E750:
	call fn000000000044E750 (retsize: 0;)
	return
	// succ:  fn0000000000471B00_exit
fn0000000000471B00_exit:


// fn0000000000471B10
// Return size: 0
define fn0000000000471B10
fn0000000000471B10_entry:
	rsp = fp
	// succ:  l0000000000471B10
l0000000000471B10:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l0000000000471B12_thunk_fn000000000045D760
l0000000000471B12_thunk_fn000000000045D760:
	call fn000000000045D760 (retsize: 0;)
	return
	// succ:  fn0000000000471B10_exit
fn0000000000471B10_exit:


// fn0000000000471B20
// Return size: 8
define fn0000000000471B20
fn0000000000471B20_entry:
	rsp = fp
	// succ:  l0000000000471B20
l0000000000471B20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000471B20_exit
fn0000000000471B20_exit:


// fn0000000000471B30
// Return size: 8
define fn0000000000471B30
fn0000000000471B30_entry:
	rsp = fp
	// succ:  l0000000000471B30
l0000000000471B30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000471B30_exit
fn0000000000471B30_exit:


// fn0000000000471B40
// Return size: 8
define fn0000000000471B40
fn0000000000471B40_entry:
	rsp = fp
	// succ:  l0000000000471B40
l0000000000471B40:
	// succ:  l0000000000471B40_thunk_fn000000000044E8B0
l0000000000471B40_thunk_fn000000000044E8B0:
	call fn000000000044E8B0 (retsize: 0;)
	return
	// succ:  fn0000000000471B40_exit
fn0000000000471B40_exit:


// fn0000000000471B50
// Return size: 8
define fn0000000000471B50
fn0000000000471B50_entry:
	rsp = fp
	// succ:  l0000000000471B50
l0000000000471B50:
	// succ:  l0000000000471B50_thunk_fn000000000045D8D0
l0000000000471B50_thunk_fn000000000045D8D0:
	call fn000000000045D8D0 (retsize: 0;)
	return
	// succ:  fn0000000000471B50_exit
fn0000000000471B50_exit:


// fn0000000000471B60
// Return size: 8
define fn0000000000471B60
fn0000000000471B60_entry:
	rsp = fp
	// succ:  l0000000000471B60
l0000000000471B60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000471B60_exit
fn0000000000471B60_exit:


// fn0000000000471B70
// Return size: 8
define fn0000000000471B70
fn0000000000471B70_entry:
	rsp = fp
	// succ:  l0000000000471B70
l0000000000471B70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000471B70_exit
fn0000000000471B70_exit:


// fn0000000000471B80
// Return size: 8
define fn0000000000471B80
fn0000000000471B80_entry:
	rsp = fp
	// succ:  l0000000000471B80
l0000000000471B80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000471B80_exit
fn0000000000471B80_exit:


// fn0000000000471B90
// Return size: 8
define fn0000000000471B90
fn0000000000471B90_entry:
	rsp = fp
	// succ:  l0000000000471B90
l0000000000471B90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000471B90_exit
fn0000000000471B90_exit:


// fn0000000000471BA0
// Return size: 8
define fn0000000000471BA0
fn0000000000471BA0_entry:
	rsp = fp
	// succ:  l0000000000471BA0
l0000000000471BA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rsi = rcx
	rdi = rdx
	rax = Mem0[rax - 0x18<64>:word64]
	rbx = Mem0[rcx + 0xF0<64> + rax:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000471C11
	// succ:  l0000000000471BC1 l0000000000471C11
l0000000000471BC1:
	SCZO = cond(Mem0[rbx + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000471BE0
	// succ:  l0000000000471BC7 l0000000000471BE0
l0000000000471BC7:
	r8d = CONVERT(Mem0[rbx + 0x43<64>:byte], byte, int32)
	// succ:  l0000000000471BCC
l0000000000471BCC:
	rdx = rdi
	rcx = rsi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000471BD9_thunk_fn0000000000471C20
l0000000000471BD9_thunk_fn0000000000471C20:
	call fn0000000000471C20 (retsize: 0;)
	return
	// succ:  fn0000000000471BA0_exit
l0000000000471BE0:
	rcx = rbx
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rdx = 0x000000000042B5F0<p64>
	r8d = 0xA<32>
	r8 = CONVERT(r8d, word32, uint64)
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(EQ,Z) l0000000000471BCC
	// succ:  l0000000000471C01 l0000000000471BCC
l0000000000471C01:
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call rax (retsize: 8;)
	r8d = CONVERT(al, byte, int32)
	goto l0000000000471BCC
	// succ:  l0000000000471BCC
l0000000000471C11:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000471C1F_thunk_fn0000000000471C20
l0000000000471C1F_thunk_fn0000000000471C20:
	call fn0000000000471C20 (retsize: 0;)
	return
	// succ:  fn0000000000471BA0_exit
fn0000000000471BA0_exit:


// fn0000000000471C20
// Return size: 8
define fn0000000000471C20
fn0000000000471C20_entry:
	rsp = fp
	// succ:  l0000000000471C20
l0000000000471C20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	Mem0[rsp + 0x80<64>:word64] = rcx
	rbp = rdx
	rdx = Mem0[rsp + 0x80<64>:word64]
	rcx = rsp + 0x2F<64>
	r13d = r8d
	r13 = CONVERT(r13d, word32, uint64)
	r14d = CONVERT(r8b, byte, int32)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000471CA0
	// succ:  l0000000000471C61 l0000000000471CA0
l0000000000471C61:
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000471C66
l0000000000471C66:
	rax = Mem0[rsp + 0x80<64>:word64]
	rcx = Mem0[rsp + 0x80<64>:word64]
	rax = Mem0[rax:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	// succ:  l0000000000471C85
l0000000000471C85:
	rax = Mem0[rsp + 0x80<64>:word64]
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000471C20_exit
l0000000000471CA0:
	rax = Mem0[rbp + 0<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbp
	r8 = Mem0[rax - 0x18<64>:word64]
	call fn0000000000451CC0 (retsize: 8;)
	rax = Mem0[rsp + 0x80<64>:word64]
	rcx = Mem0[rsp + 0x80<64>:word64]
	r13d = CONVERT(r13b, byte, word32)
	r13 = CONVERT(r13d, word32, uint64)
	rax = Mem0[rax:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rsi = Mem0[rcx + 0xE8<64> + rax:word64]
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000471E85
	// succ:  l0000000000471CE6 l0000000000471E85
l0000000000471CE6:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000471CE9
l0000000000471CE9:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	r12 = 0x3FFFFFFFFFFFFFF8<64>
	goto l0000000000471D7B
	// succ:  l0000000000471D7B
l0000000000471D00:
	SCZO = cond(r13d - eax)
	branch Test(EQ,Z) l0000000000471D80
	// succ:  l0000000000471D05 l0000000000471D80
l0000000000471D05:
	r15 = Mem0[rsi + 0x10<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	rbx = 0x3FFFFFFFFFFFFFF9<64>
	rbx = rbx - rdi
	SCZO = cond(rbx)
	rdx = rdx - r15
	SCZO = cond(rdx)
	SCZO = cond(rbx - rdx)
	branch Test(LE,SZO) l0000000000471D24
	// succ:  l0000000000471D20_1 l0000000000471D24
l0000000000471D20_1:
	rbx = rdx
	// succ:  l0000000000471D24
l0000000000471D24:
	SCZO = cond(rbx - 1<64>)
	branch Test(LE,SZO) l0000000000471DB4
	// succ:  l0000000000471D2E l0000000000471DB4
l0000000000471D2E:
	r8 = rbx
	edx = r14d
	rdx = CONVERT(edx, word32, uint64)
	rcx = r15
	rax = memchr(rcx, rdx, r8)
	rdx = rax
	rcx = rbp
	rdx = rdx - r15
	SCZO = cond(rdx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000471D4C
	// succ:  l0000000000471D48_1 l0000000000471D4C
l0000000000471D48_1:
	rbx = rdx
	// succ:  l0000000000471D4C
l0000000000471D4C:
	rdx = r15
	r8 = rbx
	call fn0000000000450E00 (retsize: 8;)
	rax = rbx
	rax = rax + Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax)
	rdi = rdi + rbx
	SCZO = cond(rdi)
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	Mem0[rsi + 0x10<64>:word64] = rax
	branch Test(UGE,C) l0000000000471E20
	// succ:  l0000000000471D6F l0000000000471E20
l0000000000471D6F:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000471D72
l0000000000471D72:
	SCZO = cond(rdi - r12)
	branch Test(UGT,CZ) l0000000000471E32
	// succ:  l0000000000471D7B l0000000000471E32
l0000000000471D7B:
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000471D00
	// succ:  l0000000000471D80 l0000000000471D00
l0000000000471D80:
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000471DA4
	// succ:  l0000000000471D85 l0000000000471DA4
l0000000000471D85:
	SCZO = cond(r13d - eax)
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(EQ,Z) l0000000000471E61
	// succ:  l0000000000471D93 l0000000000471E61
l0000000000471D93:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(NE,Z) l0000000000471C66
	// succ:  l0000000000471D9C l0000000000471C66
l0000000000471D9C:
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000471C66
	// succ:  l0000000000471C66
l0000000000471DA4:
	SZO = cond(rdi & rdi)
	C = false
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l0000000000471C66
	// succ:  l0000000000471DB2 l0000000000471C66
l0000000000471DB2:
	goto l0000000000471D9C
	// succ:  l0000000000471D9C
l0000000000471DB4:
	r15d = eax
	r15 = CONVERT(r15d, word32, uint64)
	rax = Mem0[rbp + 0<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	rbx = rdx + 1<64>
	SCZO = cond(rbx - Mem0[rax - 0x10<64>:word64])
	branch Test(UGT,CZ) l0000000000471DD0
	// succ:  l0000000000471DC9 l0000000000471DD0
l0000000000471DC9:
	ecx = Mem0[rax - 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(LE,SZO) l0000000000471DE3
	// succ:  l0000000000471DD0 l0000000000471DE3
l0000000000471DD0:
	rdx = rbx
	rcx = rbp
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rbp + 0<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	// succ:  l0000000000471DE3
l0000000000471DE3:
	Mem0[rax + rdx:byte] = r15b
	rax = Mem0[rbp + 0<64>:word64]
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = rbx
	Mem0[rax + rbx:byte] = 0<8>
	rax = Mem0[rsi + 0x10<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(UGE,C) l0000000000471E45
	// succ:  l0000000000471E0B l0000000000471E45
l0000000000471E0B:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsi + 0x10<64>:word64] = rax
	// succ:  l0000000000471E13
l0000000000471E13:
	SCZO = cond(rax - rdx)
	branch Test(ULT,C) l0000000000471D6F
	// succ:  l0000000000471E1C l0000000000471D6F
l0000000000471E1C:
	// succ:  l0000000000471E20
l0000000000471E20:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(rdi - r12)
	branch Test(ULE,CZ) l0000000000471D7B
	// succ:  l0000000000471E32 l0000000000471D7B
l0000000000471E32:
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000471D85
	// succ:  l0000000000471E3B l0000000000471D85
l0000000000471E3B:
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000471C66
	// succ:  l0000000000471C66
l0000000000471E45:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000471D72
	// succ:  l0000000000471E57 l0000000000471D72
l0000000000471E57:
	rax = Mem0[rsi + 0x10<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	goto l0000000000471E13
	// succ:  l0000000000471E13
l0000000000471E61:
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000471E93
	// succ:  l0000000000471E6F l0000000000471E93
l0000000000471E6F:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsi + 0x10<64>:word64] = rax
	// succ:  l0000000000471E77
l0000000000471E77:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(NE,Z) l0000000000471C85
	// succ:  l0000000000471E80 l0000000000471C85
l0000000000471E80:
	goto l0000000000471C61
	// succ:  l0000000000471C61
l0000000000471E85:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000471CE9
	// succ:  l0000000000471CE9
l0000000000471E93:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l0000000000471E77
	// succ:  l0000000000471E77
fn0000000000471C20_exit:


// fn0000000000471F40
// Return size: 8
define fn0000000000471F40
fn0000000000471F40_entry:
	rsp = fp
	// succ:  l0000000000471F40
l0000000000471F40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rsi = rdx
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rcx + 0xF0<64> + rax:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000471F80
	// succ:  l0000000000471F60 l0000000000471F80
l0000000000471F60:
	rax = Mem0[rcx:word64]
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rdx = rsi
	r8d = CONVERT(ax, word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000471F7B_thunk_fn0000000000471F90
l0000000000471F7B_thunk_fn0000000000471F90:
	call fn0000000000471F90 (retsize: 0;)
	return
	// succ:  fn0000000000471F40_exit
l0000000000471F80:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000471F8F_thunk_fn0000000000471F90
l0000000000471F8F_thunk_fn0000000000471F90:
	call fn0000000000471F90 (retsize: 0;)
	return
	// succ:  fn0000000000471F40_exit
fn0000000000471F40_exit:


// fn0000000000471F90
// Return size: 8
define fn0000000000471F90
fn0000000000471F90_entry:
	rsp = fp
	// succ:  l0000000000471F90
l0000000000471F90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	Mem0[rsp + 0x90<64>:word64] = rcx
	r12 = rdx
	rdx = Mem0[rsp + 0x90<64>:word64]
	rcx = rsp + 0x3F<64>
	Mem0[rsp + 0x2C<64>:word32] = r8d
	ebx = r8d
	rbx = CONVERT(ebx, word32, uint64)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x3F<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000047200F
	// succ:  l0000000000471FD2 l000000000047200F
l0000000000471FD2:
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000471FD7
l0000000000471FD7:
	rax = Mem0[rsp + 0x90<64>:word64]
	rcx = Mem0[rsp + 0x90<64>:word64]
	rax = Mem0[rax:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	// succ:  l0000000000471FF6
l0000000000471FF6:
	rax = Mem0[rsp + 0x90<64>:word64]
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000471F90_exit
l000000000047200F:
	rax = Mem0[r12:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = r12
	r8 = Mem0[rax - 0x18<64>:word64]
	call fn000000000044A6C0 (retsize: 8;)
	rax = Mem0[rsp + 0x90<64>:word64]
	rsi = Mem0[rsp + 0x90<64>:word64]
	rax = Mem0[rax:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rsi = Mem0[rsi + 0xE8<64> + rax:word64]
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004721DC
	// succ:  l0000000000472051 l00000000004721DC
l0000000000472051:
	edi = CONVERT(Mem0[rax:word16], word16, word32)
	rdi = CONVERT(edi, word32, uint64)
	// succ:  l0000000000472054
l0000000000472054:
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	r15 = 0x1FFFFFFFFFFFFFFC<64>
	r13 = 0x1FFFFFFFFFFFFFFB<64>
	// succ:  l0000000000472070
l0000000000472070:
	SCZO = cond(di - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000472131
	// succ:  l000000000047207A l0000000000472131
l000000000047207A:
	SCZO = cond(bx - di)
	branch Test(EQ,Z) l0000000000472131
	// succ:  l0000000000472083 l0000000000472131
l0000000000472083:
	rcx = Mem0[rsi + 0x18<64>:word64]
	rdx = Mem0[rsi + 0x10<64>:word64]
	rax = r15
	rax = rax - rbp
	SCZO = cond(rax)
	r8 = rcx
	r8 = r8 - rdx
	SCZO = cond(r8)
	r8 = r8 >> 1<64>
	SCZO = cond(r8)
	SCZO = cond(rax - r8)
	branch Test(GT,SZO) l00000000004720A1
	// succ:  l000000000047209D_1 l00000000004720A1
l000000000047209D_1:
	r8 = rax
	// succ:  l00000000004720A1
l00000000004720A1:
	SCZO = cond(r8 - 1<64>)
	branch Test(LE,SZO) l000000000047214B
	// succ:  l00000000004720AB l000000000047214B
l00000000004720AB:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l00000000004720CF
	// succ:  l00000000004720B0 l00000000004720CF
l00000000004720B0:
	rcx = r8
	rax = rdx
	// succ:  l00000000004720C0
l00000000004720C0:
	SCZO = cond(bx - Mem0[rax:word16])
	branch Test(EQ,Z) l0000000000472140
	// succ:  l00000000004720C5 l0000000000472140
l00000000004720C5:
	rax = rax + 2<64>
	SCZO = cond(rax)
	rcx = rcx - 1<64>
	SCZO = cond(rcx)
	branch Test(NE,Z) l00000000004720C0
	// succ:  l00000000004720CF l00000000004720C0
l00000000004720CF:
	rdi = r8
	// succ:  l00000000004720D2
l00000000004720D2:
	r8 = rdi
	rcx = r12
	call fn0000000000449740 (retsize: 8;)
	rax = Mem0[rsi + 0x10<64>:word64]
	rbp = rbp + rdi
	SCZO = cond(rbp)
	rax = rax + rdi * 2<64>
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	Mem0[rsi + 0x10<64>:word64] = rax
	branch Test(UGE,C) l00000000004721C1
	// succ:  l00000000004720F6 l00000000004721C1
l00000000004720F6:
	edi = CONVERT(Mem0[rax:word16], word16, word32)
	rdi = CONVERT(edi, word32, uint64)
	// succ:  l00000000004720F9
l00000000004720F9:
	SCZO = cond(rbp - r13)
	branch Test(ULE,CZ) l0000000000472070
	// succ:  l0000000000472102 l0000000000472070
l0000000000472102:
	SCZO = cond(di - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000047221B
	// succ:  l000000000047210C l000000000047221B
l000000000047210C:
	// succ:  l0000000000472110
l0000000000472110:
	SCZO = cond(Mem0[rsp + 0x2C<64>:word16] - di)
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(EQ,Z) l00000000004721EC
	// succ:  l0000000000472120 l00000000004721EC
l0000000000472120:
	SZO = cond(rbp & rbp)
	C = false
	branch Test(NE,Z) l0000000000471FD7
	// succ:  l0000000000472129 l0000000000471FD7
l0000000000472129:
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000471FD7
	// succ:  l0000000000471FD7
l0000000000472131:
	SCZO = cond(di - 0xFFFF<16>)
	branch Test(NE,Z) l0000000000472110
	// succ:  l0000000000472137 l0000000000472110
l0000000000472137:
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000472120
	// succ:  l0000000000472120
l0000000000472140:
	rax = rax - rdx
	SCZO = cond(rax)
	rdi = rax
	rdi = rdi >> 1<64>
	SCZO = cond(rdi)
	goto l00000000004720D2
	// succ:  l00000000004720D2
l000000000047214B:
	rax = Mem0[r12:word64]
	r8 = Mem0[rax - 0x18<64>:word64]
	r14 = r8 + 1<64>
	SCZO = cond(r14 - Mem0[rax - 0x10<64>:word64])
	branch Test(UGT,CZ) l0000000000472166
	// succ:  l000000000047215D l0000000000472166
l000000000047215D:
	r9d = Mem0[rax - 8<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(LE,SZO) l0000000000472181
	// succ:  l0000000000472166 l0000000000472181
l0000000000472166:
	rdx = r14
	rcx = r12
	call fn000000000044A5D0 (retsize: 8;)
	rax = Mem0[r12:word64]
	rdx = Mem0[rsi + 0x10<64>:word64]
	rcx = Mem0[rsi + 0x18<64>:word64]
	r8 = Mem0[rax - 0x18<64>:word64]
	// succ:  l0000000000472181
l0000000000472181:
	Mem0[rax + r8 * 2<64>:word16] = di
	rbp = rbp + 1<64>
	SCZO = cond(rbp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(rdx - rcx)
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = r14
	Mem0[rax + r14 * 2<64>:word16] = r8w
	branch Test(UGE,C) l00000000004721D1
	// succ:  l00000000004721A2 l00000000004721D1
l00000000004721A2:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rsi + 0x10<64>:word64] = rdx
	// succ:  l00000000004721AD
l00000000004721AD:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l00000000004721CA
	// succ:  l00000000004721B3 l00000000004721CA
l00000000004721B3:
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(ULT,C) l00000000004720F6
	// succ:  l00000000004721C1 l00000000004720F6
l00000000004721C1:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	// succ:  l00000000004721CA
l00000000004721CA:
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	goto l00000000004720F9
	// succ:  l00000000004720F9
l00000000004721D1:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l00000000004721AD
	// succ:  l00000000004721AD
l00000000004721DC:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	goto l0000000000472054
	// succ:  l0000000000472054
l00000000004721EC:
	rbp = rbp + 1<64>
	SCZO = cond(rbp)
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000472210
	// succ:  l00000000004721FA l0000000000472210
l00000000004721FA:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rsi + 0x10<64>:word64] = rax
	// succ:  l0000000000472202
l0000000000472202:
	SZO = cond(rbp & rbp)
	C = false
	branch Test(NE,Z) l0000000000471FF6
	// succ:  l000000000047220B l0000000000471FF6
l000000000047220B:
	goto l0000000000471FD2
	// succ:  l0000000000471FD2
l0000000000472210:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l0000000000472202
	// succ:  l0000000000472202
l000000000047221B:
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000471FD7
	// succ:  l0000000000471FD7
fn0000000000471F90_exit:


// fn00000000004722C0
// Return size: 8
define fn00000000004722C0
fn00000000004722C0_entry:
	rsp = fp
	// succ:  l00000000004722C0
l00000000004722C0:
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004722C0_exit
fn00000000004722C0_exit:


// fn00000000004722D0
// Return size: 8
define fn00000000004722D0
fn00000000004722D0_entry:
	rsp = fp
	// succ:  l00000000004722D0
l00000000004722D0:
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004722D0_exit
fn00000000004722D0_exit:


// fn00000000004722E0
// Return size: 8
define fn00000000004722E0
fn00000000004722E0_entry:
	rsp = fp
	// succ:  l00000000004722E0
l00000000004722E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x18<64>:word64]
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn00000000004549D0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004722E0_exit
fn00000000004722E0_exit:


// fn0000000000472310
// Return size: 8
define fn0000000000472310
fn0000000000472310_entry:
	rsp = fp
	// succ:  l0000000000472310
l0000000000472310:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	rax = Mem0[rbp + 0x18<64>:word64]
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn00000000004722E0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472310_exit
fn0000000000472310_exit:


// fn0000000000472340
// Return size: 8
define fn0000000000472340
fn0000000000472340_entry:
	rsp = fp
	// succ:  l0000000000472340
l0000000000472340:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x18<64>:word64]
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn00000000004549E0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472340_exit
fn0000000000472340_exit:


// fn0000000000472370
// Return size: 8
define fn0000000000472370
fn0000000000472370_entry:
	rsp = fp
	// succ:  l0000000000472370
l0000000000472370:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	rax = Mem0[rbp + 0x18<64>:word64]
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000472340 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472370_exit
fn0000000000472370_exit:


// fn00000000004723A0
// Return size: 8
define fn00000000004723A0
fn00000000004723A0_entry:
	rsp = fp
	// succ:  l00000000004723A0
l00000000004723A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B2B0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l00000000004723EB
	// succ:  l00000000004723C6 l00000000004723EB
l00000000004723C6:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004723EB
	// succ:  l00000000004723CF l00000000004723EB
l00000000004723CF:
	r8 = 0x00000000004932E0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l00000000004723EB
l00000000004723EB:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004723A0_exit
fn00000000004723A0_exit:


// fn0000000000472400
// Return size: 8
define fn0000000000472400
fn0000000000472400_entry:
	rsp = fp
	// succ:  l0000000000472400
l0000000000472400:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B2D0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047244B
	// succ:  l0000000000472426 l000000000047244B
l0000000000472426:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047244B
	// succ:  l000000000047242F l000000000047244B
l000000000047242F:
	r8 = 0x0000000000493360<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l000000000047244B
l000000000047244B:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472400_exit
fn0000000000472400_exit:


// fn0000000000472460
// Return size: 8
define fn0000000000472460
fn0000000000472460_entry:
	rsp = fp
	// succ:  l0000000000472460
l0000000000472460:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B2F0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l00000000004724AB
	// succ:  l0000000000472486 l00000000004724AB
l0000000000472486:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004724AB
	// succ:  l000000000047248F l00000000004724AB
l000000000047248F:
	r8 = 0x00000000004933E0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l00000000004724AB
l00000000004724AB:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472460_exit
fn0000000000472460_exit:


// fn00000000004724C0
// Return size: 8
define fn00000000004724C0
fn00000000004724C0_entry:
	rsp = fp
	// succ:  l00000000004724C0
l00000000004724C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B300<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047250B
	// succ:  l00000000004724E6 l000000000047250B
l00000000004724E6:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047250B
	// succ:  l00000000004724EF l000000000047250B
l00000000004724EF:
	r8 = 0x0000000000493400<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l000000000047250B
l000000000047250B:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004724C0_exit
fn00000000004724C0_exit:


// fn0000000000472520
// Return size: 8
define fn0000000000472520
fn0000000000472520_entry:
	rsp = fp
	// succ:  l0000000000472520
l0000000000472520:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[0x00000000004918B0<p64>:word64]
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047256B
	// succ:  l0000000000472546 l000000000047256B
l0000000000472546:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047256B
	// succ:  l000000000047254F l000000000047256B
l000000000047254F:
	r8 = 0x0000000000493CA0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l000000000047256B
l000000000047256B:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472520_exit
fn0000000000472520_exit:


// fn0000000000472580
// Return size: 8
define fn0000000000472580
fn0000000000472580_entry:
	rsp = fp
	// succ:  l0000000000472580
l0000000000472580:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[0x00000000004918C0<p64>:word64]
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l00000000004725CB
	// succ:  l00000000004725A6 l00000000004725CB
l00000000004725A6:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004725CB
	// succ:  l00000000004725AF l00000000004725CB
l00000000004725AF:
	r8 = 0x0000000000493CE0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l00000000004725CB
l00000000004725CB:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472580_exit
fn0000000000472580_exit:


// fn00000000004725E0
// Return size: 8
define fn00000000004725E0
fn00000000004725E0_entry:
	rsp = fp
	// succ:  l00000000004725E0
l00000000004725E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[0x0000000000491910<p64>:word64]
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047262B
	// succ:  l0000000000472606 l000000000047262B
l0000000000472606:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047262B
	// succ:  l000000000047260F l000000000047262B
l000000000047260F:
	r8 = 0x0000000000493D00<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l000000000047262B
l000000000047262B:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004725E0_exit
fn00000000004725E0_exit:


// fn0000000000472640
// Return size: 8
define fn0000000000472640
fn0000000000472640_entry:
	rsp = fp
	// succ:  l0000000000472640
l0000000000472640:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[0x0000000000491920<p64>:word64]
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047268B
	// succ:  l0000000000472666 l000000000047268B
l0000000000472666:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047268B
	// succ:  l000000000047266F l000000000047268B
l000000000047266F:
	r8 = 0x0000000000493D20<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l000000000047268B
l000000000047268B:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472640_exit
fn0000000000472640_exit:


// fn00000000004726A0
// Return size: 8
define fn00000000004726A0
fn00000000004726A0_entry:
	rsp = fp
	// succ:  l00000000004726A0
l00000000004726A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B4E0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l00000000004726EB
	// succ:  l00000000004726C6 l00000000004726EB
l00000000004726C6:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004726EB
	// succ:  l00000000004726CF l00000000004726EB
l00000000004726CF:
	r8 = 0x0000000000493D40<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l00000000004726EB
l00000000004726EB:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004726A0_exit
fn00000000004726A0_exit:


// fn0000000000472700
// Return size: 8
define fn0000000000472700
fn0000000000472700_entry:
	rsp = fp
	// succ:  l0000000000472700
l0000000000472700:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B4F0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047274B
	// succ:  l0000000000472726 l000000000047274B
l0000000000472726:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047274B
	// succ:  l000000000047272F l000000000047274B
l000000000047272F:
	r8 = 0x0000000000493D60<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l000000000047274B
l000000000047274B:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472700_exit
fn0000000000472700_exit:


// fn0000000000472760
// Return size: 8
define fn0000000000472760
fn0000000000472760_entry:
	rsp = fp
	// succ:  l0000000000472760
l0000000000472760:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B500<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l00000000004727AB
	// succ:  l0000000000472786 l00000000004727AB
l0000000000472786:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004727AB
	// succ:  l000000000047278F l00000000004727AB
l000000000047278F:
	r8 = 0x0000000000493D80<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l00000000004727AB
l00000000004727AB:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472760_exit
fn0000000000472760_exit:


// fn00000000004727C0
// Return size: 8
define fn00000000004727C0
fn00000000004727C0_entry:
	rsp = fp
	// succ:  l00000000004727C0
l00000000004727C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B510<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047280B
	// succ:  l00000000004727E6 l000000000047280B
l00000000004727E6:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047280B
	// succ:  l00000000004727EF l000000000047280B
l00000000004727EF:
	r8 = 0x0000000000493DA0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l000000000047280B
l000000000047280B:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004727C0_exit
fn00000000004727C0_exit:


// fn0000000000472820
// Return size: 8
define fn0000000000472820
fn0000000000472820_entry:
	rsp = fp
	// succ:  l0000000000472820
l0000000000472820:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B520<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047286B
	// succ:  l0000000000472846 l000000000047286B
l0000000000472846:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047286B
	// succ:  l000000000047284F l000000000047286B
l000000000047284F:
	r8 = 0x0000000000493DC0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l000000000047286B
l000000000047286B:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472820_exit
fn0000000000472820_exit:


// fn0000000000472880
// Return size: 8
define fn0000000000472880
fn0000000000472880_entry:
	rsp = fp
	// succ:  l0000000000472880
l0000000000472880:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B530<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l00000000004728CB
	// succ:  l00000000004728A6 l00000000004728CB
l00000000004728A6:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004728CB
	// succ:  l00000000004728AF l00000000004728CB
l00000000004728AF:
	r8 = 0x0000000000493DE0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l00000000004728CB
l00000000004728CB:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472880_exit
fn0000000000472880_exit:


// fn00000000004728E0
// Return size: 8
define fn00000000004728E0
fn00000000004728E0_entry:
	rsp = fp
	// succ:  l00000000004728E0
l00000000004728E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B560<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047292B
	// succ:  l0000000000472906 l000000000047292B
l0000000000472906:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047292B
	// succ:  l000000000047290F l000000000047292B
l000000000047290F:
	r8 = 0x0000000000493E40<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l000000000047292B
l000000000047292B:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004728E0_exit
fn00000000004728E0_exit:


// fn0000000000472940
// Return size: 8
define fn0000000000472940
fn0000000000472940_entry:
	rsp = fp
	// succ:  l0000000000472940
l0000000000472940:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B570<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047298B
	// succ:  l0000000000472966 l000000000047298B
l0000000000472966:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047298B
	// succ:  l000000000047296F l000000000047298B
l000000000047296F:
	r8 = 0x0000000000493E80<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l000000000047298B
l000000000047298B:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472940_exit
fn0000000000472940_exit:


// fn00000000004729A0
// Return size: 8
define fn00000000004729A0
fn00000000004729A0_entry:
	rsp = fp
	// succ:  l00000000004729A0
l00000000004729A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B580<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l00000000004729EB
	// succ:  l00000000004729C6 l00000000004729EB
l00000000004729C6:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004729EB
	// succ:  l00000000004729CF l00000000004729EB
l00000000004729CF:
	r8 = 0x0000000000493EC0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l00000000004729EB
l00000000004729EB:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004729A0_exit
fn00000000004729A0_exit:


// fn0000000000472A00
// Return size: 8
define fn0000000000472A00
fn0000000000472A00_entry:
	rsp = fp
	// succ:  l0000000000472A00
l0000000000472A00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B590<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l0000000000472A4B
	// succ:  l0000000000472A26 l0000000000472A4B
l0000000000472A26:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000472A4B
	// succ:  l0000000000472A2F l0000000000472A4B
l0000000000472A2F:
	r8 = 0x0000000000493EE0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l0000000000472A4B
l0000000000472A4B:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472A00_exit
fn0000000000472A00_exit:


// fn0000000000472A60
// Return size: 8
define fn0000000000472A60
fn0000000000472A60_entry:
	rsp = fp
	// succ:  l0000000000472A60
l0000000000472A60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B5A0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l0000000000472AAB
	// succ:  l0000000000472A86 l0000000000472AAB
l0000000000472A86:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000472AAB
	// succ:  l0000000000472A8F l0000000000472AAB
l0000000000472A8F:
	r8 = 0x0000000000493F00<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l0000000000472AAB
l0000000000472AAB:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472A60_exit
fn0000000000472A60_exit:


// fn0000000000472AC0
// Return size: 8
define fn0000000000472AC0
fn0000000000472AC0_entry:
	rsp = fp
	// succ:  l0000000000472AC0
l0000000000472AC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B5B0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l0000000000472B0B
	// succ:  l0000000000472AE6 l0000000000472B0B
l0000000000472AE6:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000472B0B
	// succ:  l0000000000472AEF l0000000000472B0B
l0000000000472AEF:
	r8 = 0x0000000000493F40<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l0000000000472B0B
l0000000000472B0B:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472AC0_exit
fn0000000000472AC0_exit:


// fn0000000000472B20
// Return size: 8
define fn0000000000472B20
fn0000000000472B20_entry:
	rsp = fp
	// succ:  l0000000000472B20
l0000000000472B20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B5C0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l0000000000472B6B
	// succ:  l0000000000472B46 l0000000000472B6B
l0000000000472B46:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000472B6B
	// succ:  l0000000000472B4F l0000000000472B6B
l0000000000472B4F:
	r8 = 0x0000000000493F80<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l0000000000472B6B
l0000000000472B6B:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472B20_exit
fn0000000000472B20_exit:


// fn0000000000472B80
// Return size: 8
define fn0000000000472B80
fn0000000000472B80_entry:
	rsp = fp
	// succ:  l0000000000472B80
l0000000000472B80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B5D0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l0000000000472BCB
	// succ:  l0000000000472BA6 l0000000000472BCB
l0000000000472BA6:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000472BCB
	// succ:  l0000000000472BAF l0000000000472BCB
l0000000000472BAF:
	r8 = 0x0000000000493FA0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l0000000000472BCB
l0000000000472BCB:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472B80_exit
fn0000000000472B80_exit:


// fn0000000000472BE0
// Return size: 8
define fn0000000000472BE0
fn0000000000472BE0_entry:
	rsp = fp
	// succ:  l0000000000472BE0
l0000000000472BE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B5E0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l0000000000472C2B
	// succ:  l0000000000472C06 l0000000000472C2B
l0000000000472C06:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000472C2B
	// succ:  l0000000000472C0F l0000000000472C2B
l0000000000472C0F:
	r8 = 0x0000000000494030<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l0000000000472C2B
l0000000000472C2B:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472BE0_exit
fn0000000000472BE0_exit:


// fn0000000000472C40
// Return size: 8
define fn0000000000472C40
fn0000000000472C40_entry:
	rsp = fp
	// succ:  l0000000000472C40
l0000000000472C40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B5F0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l0000000000472C8B
	// succ:  l0000000000472C66 l0000000000472C8B
l0000000000472C66:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000472C8B
	// succ:  l0000000000472C6F l0000000000472C8B
l0000000000472C6F:
	r8 = 0x0000000000494050<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l0000000000472C8B
l0000000000472C8B:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472C40_exit
fn0000000000472C40_exit:


// fn0000000000472CA0
// Return size: 8
define fn0000000000472CA0
fn0000000000472CA0_entry:
	rsp = fp
	// succ:  l0000000000472CA0
l0000000000472CA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B600<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l0000000000472CEB
	// succ:  l0000000000472CC6 l0000000000472CEB
l0000000000472CC6:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000472CEB
	// succ:  l0000000000472CCF l0000000000472CEB
l0000000000472CCF:
	r8 = 0x0000000000494070<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l0000000000472CEB
l0000000000472CEB:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472CA0_exit
fn0000000000472CA0_exit:


// fn0000000000472D00
// Return size: 8
define fn0000000000472D00
fn0000000000472D00_entry:
	rsp = fp
	// succ:  l0000000000472D00
l0000000000472D00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B610<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	r8 = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8 - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l0000000000472D4B
	// succ:  l0000000000472D26 l0000000000472D4B
l0000000000472D26:
	rcx = Mem0[rcx + r8 * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000472D4B
	// succ:  l0000000000472D2F l0000000000472D4B
l0000000000472D2F:
	r8 = 0x0000000000494090<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l0000000000472D4B
l0000000000472D4B:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472D00_exit
fn0000000000472D00_exit:


// fn0000000000472D60
// Return size: 0
define fn0000000000472D60
fn0000000000472D60_entry:
	rsp = fp
	// succ:  l0000000000472D60
l0000000000472D60:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	call fn000000000046F760 (retsize: 8;)
	rcx = rax
	call fn0000000000423AD0 (retsize: 8;)
	// succ:  l0000000000472D7F_thunk_fn0000000000472D80
l0000000000472D7F_thunk_fn0000000000472D80:
	call fn0000000000472D80 (retsize: 0;)
	return
	// succ:  fn0000000000472D60_exit
fn0000000000472D60_exit:


// fn0000000000472D80
// Return size: 8
define fn0000000000472D80
fn0000000000472D80_entry:
	rsp = fp
	// succ:  l0000000000472D80
l0000000000472D80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B2B0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l0000000000472DCB
	// succ:  l0000000000472DA1 l0000000000472DCB
l0000000000472DA1:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000472DCB
	// succ:  l0000000000472DAA l0000000000472DCB
l0000000000472DAA:
	r8 = 0x00000000004932E0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000472DD0
	// succ:  l0000000000472DC5 l0000000000472DD0
l0000000000472DC5:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472D80_exit
l0000000000472DCB:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000472DD0
l0000000000472DD0:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l0000000000472DDF_thunk_fn0000000000472DE0
l0000000000472DDF_thunk_fn0000000000472DE0:
	call fn0000000000472DE0 (retsize: 0;)
	return
	// succ:  fn0000000000472D80_exit
fn0000000000472D80_exit:


// fn0000000000472DE0
// Return size: 8
define fn0000000000472DE0
fn0000000000472DE0_entry:
	rsp = fp
	// succ:  l0000000000472DE0
l0000000000472DE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B2C0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l0000000000472E2B
	// succ:  l0000000000472E01 l0000000000472E2B
l0000000000472E01:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000472E2B
	// succ:  l0000000000472E0A l0000000000472E2B
l0000000000472E0A:
	r8 = 0x0000000000493320<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000472E30
	// succ:  l0000000000472E25 l0000000000472E30
l0000000000472E25:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472DE0_exit
l0000000000472E2B:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000472E30
l0000000000472E30:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l0000000000472E3F_thunk_fn0000000000472E40
l0000000000472E3F_thunk_fn0000000000472E40:
	call fn0000000000472E40 (retsize: 0;)
	return
	// succ:  fn0000000000472DE0_exit
fn0000000000472DE0_exit:


// fn0000000000472E40
// Return size: 8
define fn0000000000472E40
fn0000000000472E40_entry:
	rsp = fp
	// succ:  l0000000000472E40
l0000000000472E40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B2D0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l0000000000472E8B
	// succ:  l0000000000472E61 l0000000000472E8B
l0000000000472E61:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000472E8B
	// succ:  l0000000000472E6A l0000000000472E8B
l0000000000472E6A:
	r8 = 0x0000000000493360<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000472E90
	// succ:  l0000000000472E85 l0000000000472E90
l0000000000472E85:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472E40_exit
l0000000000472E8B:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000472E90
l0000000000472E90:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l0000000000472E9F_thunk_fn0000000000472EA0
l0000000000472E9F_thunk_fn0000000000472EA0:
	call fn0000000000472EA0 (retsize: 0;)
	return
	// succ:  fn0000000000472E40_exit
fn0000000000472E40_exit:


// fn0000000000472EA0
// Return size: 8
define fn0000000000472EA0
fn0000000000472EA0_entry:
	rsp = fp
	// succ:  l0000000000472EA0
l0000000000472EA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B2E0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l0000000000472EEB
	// succ:  l0000000000472EC1 l0000000000472EEB
l0000000000472EC1:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000472EEB
	// succ:  l0000000000472ECA l0000000000472EEB
l0000000000472ECA:
	r8 = 0x00000000004933A0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000472EF0
	// succ:  l0000000000472EE5 l0000000000472EF0
l0000000000472EE5:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472EA0_exit
l0000000000472EEB:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000472EF0
l0000000000472EF0:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l0000000000472EFF_thunk_fn0000000000472F00
l0000000000472EFF_thunk_fn0000000000472F00:
	call fn0000000000472F00 (retsize: 0;)
	return
	// succ:  fn0000000000472EA0_exit
fn0000000000472EA0_exit:


// fn0000000000472F00
// Return size: 8
define fn0000000000472F00
fn0000000000472F00_entry:
	rsp = fp
	// succ:  l0000000000472F00
l0000000000472F00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B2F0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l0000000000472F4B
	// succ:  l0000000000472F21 l0000000000472F4B
l0000000000472F21:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000472F4B
	// succ:  l0000000000472F2A l0000000000472F4B
l0000000000472F2A:
	r8 = 0x00000000004933E0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000472F50
	// succ:  l0000000000472F45 l0000000000472F50
l0000000000472F45:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472F00_exit
l0000000000472F4B:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000472F50
l0000000000472F50:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l0000000000472F5F_thunk_fn0000000000472F60
l0000000000472F5F_thunk_fn0000000000472F60:
	call fn0000000000472F60 (retsize: 0;)
	return
	// succ:  fn0000000000472F00_exit
fn0000000000472F00_exit:


// fn0000000000472F60
// Return size: 8
define fn0000000000472F60
fn0000000000472F60_entry:
	rsp = fp
	// succ:  l0000000000472F60
l0000000000472F60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B300<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l0000000000472FAB
	// succ:  l0000000000472F81 l0000000000472FAB
l0000000000472F81:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000472FAB
	// succ:  l0000000000472F8A l0000000000472FAB
l0000000000472F8A:
	r8 = 0x0000000000493400<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000472FB0
	// succ:  l0000000000472FA5 l0000000000472FB0
l0000000000472FA5:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472F60_exit
l0000000000472FAB:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000472FB0
l0000000000472FB0:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l0000000000472FBF_thunk_fn0000000000472FC0
l0000000000472FBF_thunk_fn0000000000472FC0:
	call fn0000000000472FC0 (retsize: 0;)
	return
	// succ:  fn0000000000472F60_exit
fn0000000000472F60_exit:


// fn0000000000472FC0
// Return size: 8
define fn0000000000472FC0
fn0000000000472FC0_entry:
	rsp = fp
	// succ:  l0000000000472FC0
l0000000000472FC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[0x00000000004918B0<p64>:word64]
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047300B
	// succ:  l0000000000472FE1 l000000000047300B
l0000000000472FE1:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047300B
	// succ:  l0000000000472FEA l000000000047300B
l0000000000472FEA:
	r8 = 0x0000000000493CA0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000473010
	// succ:  l0000000000473005 l0000000000473010
l0000000000473005:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000472FC0_exit
l000000000047300B:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000473010
l0000000000473010:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l000000000047301F_thunk_fn0000000000473020
l000000000047301F_thunk_fn0000000000473020:
	call fn0000000000473020 (retsize: 0;)
	return
	// succ:  fn0000000000472FC0_exit
fn0000000000472FC0_exit:


// fn0000000000473020
// Return size: 8
define fn0000000000473020
fn0000000000473020_entry:
	rsp = fp
	// succ:  l0000000000473020
l0000000000473020:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[0x00000000004918C0<p64>:word64]
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047306B
	// succ:  l0000000000473041 l000000000047306B
l0000000000473041:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047306B
	// succ:  l000000000047304A l000000000047306B
l000000000047304A:
	r8 = 0x0000000000493CE0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000473070
	// succ:  l0000000000473065 l0000000000473070
l0000000000473065:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473020_exit
l000000000047306B:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000473070
l0000000000473070:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l000000000047307F_thunk_fn0000000000473080
l000000000047307F_thunk_fn0000000000473080:
	call fn0000000000473080 (retsize: 0;)
	return
	// succ:  fn0000000000473020_exit
fn0000000000473020_exit:


// fn0000000000473080
// Return size: 8
define fn0000000000473080
fn0000000000473080_entry:
	rsp = fp
	// succ:  l0000000000473080
l0000000000473080:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[0x0000000000491910<p64>:word64]
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l00000000004730CB
	// succ:  l00000000004730A1 l00000000004730CB
l00000000004730A1:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004730CB
	// succ:  l00000000004730AA l00000000004730CB
l00000000004730AA:
	r8 = 0x0000000000493D00<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004730D0
	// succ:  l00000000004730C5 l00000000004730D0
l00000000004730C5:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473080_exit
l00000000004730CB:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l00000000004730D0
l00000000004730D0:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l00000000004730DF_thunk_fn00000000004730E0
l00000000004730DF_thunk_fn00000000004730E0:
	call fn00000000004730E0 (retsize: 0;)
	return
	// succ:  fn0000000000473080_exit
fn0000000000473080_exit:


// fn00000000004730E0
// Return size: 8
define fn00000000004730E0
fn00000000004730E0_entry:
	rsp = fp
	// succ:  l00000000004730E0
l00000000004730E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[0x0000000000491920<p64>:word64]
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047312B
	// succ:  l0000000000473101 l000000000047312B
l0000000000473101:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047312B
	// succ:  l000000000047310A l000000000047312B
l000000000047310A:
	r8 = 0x0000000000493D20<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000473130
	// succ:  l0000000000473125 l0000000000473130
l0000000000473125:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004730E0_exit
l000000000047312B:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000473130
l0000000000473130:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l000000000047313F_thunk_fn0000000000473140
l000000000047313F_thunk_fn0000000000473140:
	call fn0000000000473140 (retsize: 0;)
	return
	// succ:  fn00000000004730E0_exit
fn00000000004730E0_exit:


// fn0000000000473140
// Return size: 8
define fn0000000000473140
fn0000000000473140_entry:
	rsp = fp
	// succ:  l0000000000473140
l0000000000473140:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B4E0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047318B
	// succ:  l0000000000473161 l000000000047318B
l0000000000473161:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047318B
	// succ:  l000000000047316A l000000000047318B
l000000000047316A:
	r8 = 0x0000000000493D40<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000473190
	// succ:  l0000000000473185 l0000000000473190
l0000000000473185:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473140_exit
l000000000047318B:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000473190
l0000000000473190:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l000000000047319F_thunk_fn00000000004731A0
l000000000047319F_thunk_fn00000000004731A0:
	call fn00000000004731A0 (retsize: 0;)
	return
	// succ:  fn0000000000473140_exit
fn0000000000473140_exit:


// fn00000000004731A0
// Return size: 8
define fn00000000004731A0
fn00000000004731A0_entry:
	rsp = fp
	// succ:  l00000000004731A0
l00000000004731A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B4F0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l00000000004731EB
	// succ:  l00000000004731C1 l00000000004731EB
l00000000004731C1:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004731EB
	// succ:  l00000000004731CA l00000000004731EB
l00000000004731CA:
	r8 = 0x0000000000493D60<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004731F0
	// succ:  l00000000004731E5 l00000000004731F0
l00000000004731E5:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004731A0_exit
l00000000004731EB:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l00000000004731F0
l00000000004731F0:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l00000000004731FF_thunk_fn0000000000473200
l00000000004731FF_thunk_fn0000000000473200:
	call fn0000000000473200 (retsize: 0;)
	return
	// succ:  fn00000000004731A0_exit
fn00000000004731A0_exit:


// fn0000000000473200
// Return size: 8
define fn0000000000473200
fn0000000000473200_entry:
	rsp = fp
	// succ:  l0000000000473200
l0000000000473200:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B500<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047324B
	// succ:  l0000000000473221 l000000000047324B
l0000000000473221:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047324B
	// succ:  l000000000047322A l000000000047324B
l000000000047322A:
	r8 = 0x0000000000493D80<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000473250
	// succ:  l0000000000473245 l0000000000473250
l0000000000473245:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473200_exit
l000000000047324B:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000473250
l0000000000473250:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l000000000047325F_thunk_fn0000000000473260
l000000000047325F_thunk_fn0000000000473260:
	call fn0000000000473260 (retsize: 0;)
	return
	// succ:  fn0000000000473200_exit
fn0000000000473200_exit:


// fn0000000000473260
// Return size: 8
define fn0000000000473260
fn0000000000473260_entry:
	rsp = fp
	// succ:  l0000000000473260
l0000000000473260:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B510<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l00000000004732AB
	// succ:  l0000000000473281 l00000000004732AB
l0000000000473281:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004732AB
	// succ:  l000000000047328A l00000000004732AB
l000000000047328A:
	r8 = 0x0000000000493DA0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004732B0
	// succ:  l00000000004732A5 l00000000004732B0
l00000000004732A5:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473260_exit
l00000000004732AB:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l00000000004732B0
l00000000004732B0:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l00000000004732BF_thunk_fn00000000004732C0
l00000000004732BF_thunk_fn00000000004732C0:
	call fn00000000004732C0 (retsize: 0;)
	return
	// succ:  fn0000000000473260_exit
fn0000000000473260_exit:


// fn00000000004732C0
// Return size: 8
define fn00000000004732C0
fn00000000004732C0_entry:
	rsp = fp
	// succ:  l00000000004732C0
l00000000004732C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B520<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047330B
	// succ:  l00000000004732E1 l000000000047330B
l00000000004732E1:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047330B
	// succ:  l00000000004732EA l000000000047330B
l00000000004732EA:
	r8 = 0x0000000000493DC0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000473310
	// succ:  l0000000000473305 l0000000000473310
l0000000000473305:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004732C0_exit
l000000000047330B:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000473310
l0000000000473310:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l000000000047331F_thunk_fn0000000000473320
l000000000047331F_thunk_fn0000000000473320:
	call fn0000000000473320 (retsize: 0;)
	return
	// succ:  fn00000000004732C0_exit
fn00000000004732C0_exit:


// fn0000000000473320
// Return size: 8
define fn0000000000473320
fn0000000000473320_entry:
	rsp = fp
	// succ:  l0000000000473320
l0000000000473320:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B530<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047336B
	// succ:  l0000000000473341 l000000000047336B
l0000000000473341:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047336B
	// succ:  l000000000047334A l000000000047336B
l000000000047334A:
	r8 = 0x0000000000493DE0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000473370
	// succ:  l0000000000473365 l0000000000473370
l0000000000473365:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473320_exit
l000000000047336B:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000473370
l0000000000473370:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l000000000047337F_thunk_fn0000000000473380
l000000000047337F_thunk_fn0000000000473380:
	call fn0000000000473380 (retsize: 0;)
	return
	// succ:  fn0000000000473320_exit
fn0000000000473320_exit:


// fn0000000000473380
// Return size: 8
define fn0000000000473380
fn0000000000473380_entry:
	rsp = fp
	// succ:  l0000000000473380
l0000000000473380:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B560<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l00000000004733CB
	// succ:  l00000000004733A1 l00000000004733CB
l00000000004733A1:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004733CB
	// succ:  l00000000004733AA l00000000004733CB
l00000000004733AA:
	r8 = 0x0000000000493E40<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004733D0
	// succ:  l00000000004733C5 l00000000004733D0
l00000000004733C5:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473380_exit
l00000000004733CB:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l00000000004733D0
l00000000004733D0:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l00000000004733DF_thunk_fn00000000004733E0
l00000000004733DF_thunk_fn00000000004733E0:
	call fn00000000004733E0 (retsize: 0;)
	return
	// succ:  fn0000000000473380_exit
fn0000000000473380_exit:


// fn00000000004733E0
// Return size: 8
define fn00000000004733E0
fn00000000004733E0_entry:
	rsp = fp
	// succ:  l00000000004733E0
l00000000004733E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B570<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047342B
	// succ:  l0000000000473401 l000000000047342B
l0000000000473401:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047342B
	// succ:  l000000000047340A l000000000047342B
l000000000047340A:
	r8 = 0x0000000000493E80<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000473430
	// succ:  l0000000000473425 l0000000000473430
l0000000000473425:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004733E0_exit
l000000000047342B:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000473430
l0000000000473430:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l000000000047343F_thunk_fn0000000000473440
l000000000047343F_thunk_fn0000000000473440:
	call fn0000000000473440 (retsize: 0;)
	return
	// succ:  fn00000000004733E0_exit
fn00000000004733E0_exit:


// fn0000000000473440
// Return size: 8
define fn0000000000473440
fn0000000000473440_entry:
	rsp = fp
	// succ:  l0000000000473440
l0000000000473440:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B580<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047348B
	// succ:  l0000000000473461 l000000000047348B
l0000000000473461:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047348B
	// succ:  l000000000047346A l000000000047348B
l000000000047346A:
	r8 = 0x0000000000493EC0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000473490
	// succ:  l0000000000473485 l0000000000473490
l0000000000473485:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473440_exit
l000000000047348B:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000473490
l0000000000473490:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l000000000047349F_thunk_fn00000000004734A0
l000000000047349F_thunk_fn00000000004734A0:
	call fn00000000004734A0 (retsize: 0;)
	return
	// succ:  fn0000000000473440_exit
fn0000000000473440_exit:


// fn00000000004734A0
// Return size: 8
define fn00000000004734A0
fn00000000004734A0_entry:
	rsp = fp
	// succ:  l00000000004734A0
l00000000004734A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B590<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l00000000004734EB
	// succ:  l00000000004734C1 l00000000004734EB
l00000000004734C1:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004734EB
	// succ:  l00000000004734CA l00000000004734EB
l00000000004734CA:
	r8 = 0x0000000000493EE0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004734F0
	// succ:  l00000000004734E5 l00000000004734F0
l00000000004734E5:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004734A0_exit
l00000000004734EB:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l00000000004734F0
l00000000004734F0:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l00000000004734FF_thunk_fn0000000000473500
l00000000004734FF_thunk_fn0000000000473500:
	call fn0000000000473500 (retsize: 0;)
	return
	// succ:  fn00000000004734A0_exit
fn00000000004734A0_exit:


// fn0000000000473500
// Return size: 8
define fn0000000000473500
fn0000000000473500_entry:
	rsp = fp
	// succ:  l0000000000473500
l0000000000473500:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B5A0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047354B
	// succ:  l0000000000473521 l000000000047354B
l0000000000473521:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047354B
	// succ:  l000000000047352A l000000000047354B
l000000000047352A:
	r8 = 0x0000000000493F00<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000473550
	// succ:  l0000000000473545 l0000000000473550
l0000000000473545:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473500_exit
l000000000047354B:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000473550
l0000000000473550:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l000000000047355F_thunk_fn0000000000473560
l000000000047355F_thunk_fn0000000000473560:
	call fn0000000000473560 (retsize: 0;)
	return
	// succ:  fn0000000000473500_exit
fn0000000000473500_exit:


// fn0000000000473560
// Return size: 8
define fn0000000000473560
fn0000000000473560_entry:
	rsp = fp
	// succ:  l0000000000473560
l0000000000473560:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B5B0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l00000000004735AB
	// succ:  l0000000000473581 l00000000004735AB
l0000000000473581:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004735AB
	// succ:  l000000000047358A l00000000004735AB
l000000000047358A:
	r8 = 0x0000000000493F40<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004735B0
	// succ:  l00000000004735A5 l00000000004735B0
l00000000004735A5:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473560_exit
l00000000004735AB:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l00000000004735B0
l00000000004735B0:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l00000000004735BF_thunk_fn00000000004735C0
l00000000004735BF_thunk_fn00000000004735C0:
	call fn00000000004735C0 (retsize: 0;)
	return
	// succ:  fn0000000000473560_exit
fn0000000000473560_exit:


// fn00000000004735C0
// Return size: 8
define fn00000000004735C0
fn00000000004735C0_entry:
	rsp = fp
	// succ:  l00000000004735C0
l00000000004735C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B5C0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047360B
	// succ:  l00000000004735E1 l000000000047360B
l00000000004735E1:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047360B
	// succ:  l00000000004735EA l000000000047360B
l00000000004735EA:
	r8 = 0x0000000000493F80<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000473610
	// succ:  l0000000000473605 l0000000000473610
l0000000000473605:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004735C0_exit
l000000000047360B:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000473610
l0000000000473610:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l000000000047361F_thunk_fn0000000000473620
l000000000047361F_thunk_fn0000000000473620:
	call fn0000000000473620 (retsize: 0;)
	return
	// succ:  fn00000000004735C0_exit
fn00000000004735C0_exit:


// fn0000000000473620
// Return size: 8
define fn0000000000473620
fn0000000000473620_entry:
	rsp = fp
	// succ:  l0000000000473620
l0000000000473620:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B5D0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047366B
	// succ:  l0000000000473641 l000000000047366B
l0000000000473641:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047366B
	// succ:  l000000000047364A l000000000047366B
l000000000047364A:
	r8 = 0x0000000000493FA0<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000473670
	// succ:  l0000000000473665 l0000000000473670
l0000000000473665:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473620_exit
l000000000047366B:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000473670
l0000000000473670:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l000000000047367F_thunk_fn0000000000473680
l000000000047367F_thunk_fn0000000000473680:
	call fn0000000000473680 (retsize: 0;)
	return
	// succ:  fn0000000000473620_exit
fn0000000000473620_exit:


// fn0000000000473680
// Return size: 8
define fn0000000000473680
fn0000000000473680_entry:
	rsp = fp
	// succ:  l0000000000473680
l0000000000473680:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B5E0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l00000000004736CB
	// succ:  l00000000004736A1 l00000000004736CB
l00000000004736A1:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004736CB
	// succ:  l00000000004736AA l00000000004736CB
l00000000004736AA:
	r8 = 0x0000000000494030<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004736D0
	// succ:  l00000000004736C5 l00000000004736D0
l00000000004736C5:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473680_exit
l00000000004736CB:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l00000000004736D0
l00000000004736D0:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l00000000004736DF_thunk_fn00000000004736E0
l00000000004736DF_thunk_fn00000000004736E0:
	call fn00000000004736E0 (retsize: 0;)
	return
	// succ:  fn0000000000473680_exit
fn0000000000473680_exit:


// fn00000000004736E0
// Return size: 8
define fn00000000004736E0
fn00000000004736E0_entry:
	rsp = fp
	// succ:  l00000000004736E0
l00000000004736E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B5F0<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047372B
	// succ:  l0000000000473701 l000000000047372B
l0000000000473701:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047372B
	// succ:  l000000000047370A l000000000047372B
l000000000047370A:
	r8 = 0x0000000000494050<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000473730
	// succ:  l0000000000473725 l0000000000473730
l0000000000473725:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004736E0_exit
l000000000047372B:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000473730
l0000000000473730:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l000000000047373F_thunk_fn0000000000473740
l000000000047373F_thunk_fn0000000000473740:
	call fn0000000000473740 (retsize: 0;)
	return
	// succ:  fn00000000004736E0_exit
fn00000000004736E0_exit:


// fn0000000000473740
// Return size: 8
define fn0000000000473740
fn0000000000473740_entry:
	rsp = fp
	// succ:  l0000000000473740
l0000000000473740:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B600<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l000000000047378B
	// succ:  l0000000000473761 l000000000047378B
l0000000000473761:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047378B
	// succ:  l000000000047376A l000000000047378B
l000000000047376A:
	r8 = 0x0000000000494070<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000473790
	// succ:  l0000000000473785 l0000000000473790
l0000000000473785:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473740_exit
l000000000047378B:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000473790
l0000000000473790:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l000000000047379F_thunk_fn00000000004737A0
l000000000047379F_thunk_fn00000000004737A0:
	call fn00000000004737A0 (retsize: 0;)
	return
	// succ:  fn0000000000473740_exit
fn0000000000473740_exit:


// fn00000000004737A0
// Return size: 8
define fn00000000004737A0
fn00000000004737A0_entry:
	rsp = fp
	// succ:  l00000000004737A0
l00000000004737A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = 0x000000000048B610<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - Mem0[rdx + 0x10<64>:word64])
	rcx = Mem0[rdx + 8<64>:word64]
	branch Test(UGE,C) l00000000004737EB
	// succ:  l00000000004737C1 l00000000004737EB
l00000000004737C1:
	rcx = Mem0[rcx + rax * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004737EB
	// succ:  l00000000004737CA l00000000004737EB
l00000000004737CA:
	r8 = 0x0000000000494090<p64>
	rdx = 0x00000000004931B0<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn00000000004761A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004737F0
	// succ:  l00000000004737E5 l00000000004737F0
l00000000004737E5:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004737A0_exit
l00000000004737EB:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l00000000004737F0
l00000000004737F0:
	call fn00000000004757C0 (retsize: 8;)
	// succ:  l00000000004737FF_thunk_fn0000000000473800
l00000000004737FF_thunk_fn0000000000473800:
	call fn0000000000473800 (retsize: 0;)
	return
	// succ:  fn00000000004737A0_exit
fn00000000004737A0_exit:


// fn0000000000473800
// Return size: 8
define fn0000000000473800
fn0000000000473800_entry:
	rsp = fp
	// succ:  l0000000000473800
l0000000000473800:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x40<64>:word64] = rcx
	Mem0[rbp - 0x38<64>:word64] = rdx
	rcx = Mem0[rbp - 0x40<64>:word64]
	call fn000000000042AC70 (retsize: 8;)
	rbx = rax
	rax = Mem0[rbp - 0x38<64>:word64]
	rcx = rax
	call fn000000000042AC70 (retsize: 8;)
	SCZO = cond(rbx - rax)
	al = CONVERT(Test(EQ,Z), bool, int8)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473800_exit
fn0000000000473800_exit:


// fn0000000000473840
// Return size: 8
define fn0000000000473840
fn0000000000473840_entry:
	rsp = fp
	// succ:  l0000000000473840
l0000000000473840:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x18<64>:word64]
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000428AD0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473840_exit
fn0000000000473840_exit:


// fn0000000000473870
// Return size: 8
define fn0000000000473870
fn0000000000473870_entry:
	rsp = fp
	// succ:  l0000000000473870
l0000000000473870:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SZO = cond(rdx & rdx)
	C = false
	rsi = rcx
	rbx = rdx
	branch Test(EQ,Z) l00000000004738A1
	// succ:  l0000000000473881 l00000000004738A1
l0000000000473881:
	rcx = rdx
	eax = strlen(rcx)
	rdx = rbx
	r8 = rax
	rcx = rsi
	call fn0000000000470070 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473870_exit
l00000000004738A1:
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473870_exit
fn0000000000473870_exit:


// fn00000000004738C0
// Return size: 8
define fn00000000004738C0
fn00000000004738C0_entry:
	rsp = fp
	// succ:  l00000000004738C0
l00000000004738C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SZO = cond(rdx & rdx)
	C = false
	rsi = rcx
	rbx = rdx
	branch Test(EQ,Z) l00000000004738F1
	// succ:  l00000000004738D1 l00000000004738F1
l00000000004738D1:
	rcx = rdx
	eax = strlen(rcx)
	rdx = rbx
	r8 = rax
	rcx = rsi
	call fn0000000000470070 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004738C0_exit
l00000000004738F1:
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004738C0_exit
fn00000000004738C0_exit:


// fn0000000000473910
// Return size: 8
define fn0000000000473910
fn0000000000473910_entry:
	rsp = fp
	// succ:  l0000000000473910
l0000000000473910:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SZO = cond(rdx & rdx)
	C = false
	rsi = rcx
	rbx = rdx
	branch Test(EQ,Z) l0000000000473941
	// succ:  l0000000000473921 l0000000000473941
l0000000000473921:
	rcx = rdx
	eax = strlen(rcx)
	rdx = rbx
	r8 = rax
	rcx = rsi
	call fn0000000000470070 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473910_exit
l0000000000473941:
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473910_exit
fn0000000000473910_exit:


// fn0000000000473960
// Return size: 8
define fn0000000000473960
fn0000000000473960_entry:
	rsp = fp
	// succ:  l0000000000473960
l0000000000473960:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x2F<64>:byte] = dl
	rdx = rsp + 0x2F<64>
	call fn0000000000470070 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000473960_exit
fn0000000000473960_exit:


// fn0000000000473980
// Return size: 8
define fn0000000000473980
fn0000000000473980_entry:
	rsp = fp
	// succ:  l0000000000473980
l0000000000473980:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x38<64>:byte] = dl
	rdx = rsp + 0x38<64>
	call fn0000000000470070 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000473980_exit
fn0000000000473980_exit:


// fn00000000004739A0
// Return size: 8
define fn00000000004739A0
fn00000000004739A0_entry:
	rsp = fp
	// succ:  l00000000004739A0
l00000000004739A0:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x2F<64>:byte] = dl
	rdx = rsp + 0x2F<64>
	call fn0000000000470070 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004739A0_exit
fn00000000004739A0_exit:


// fn00000000004739C0
// Return size: 8
define fn00000000004739C0
fn00000000004739C0_entry:
	rsp = fp
	// succ:  l00000000004739C0
l00000000004739C0:
	rax = rcx
	rcx = Mem0[rcx:word64]
	r8 = rax
	r8 = r8 + Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(r8)
	v8 = Mem0[r8 + 0x18<64>:word32] | edx
	Mem0[r8 + 0x18<64>:word32] = v8
	SZO = cond(Mem0[r8 + 0x18<64>:word32])
	C = false
	return
	// succ:  fn00000000004739C0_exit
fn00000000004739C0_exit:


// fn00000000004739E0
// Return size: 8
define fn00000000004739E0
fn00000000004739E0_entry:
	rsp = fp
	// succ:  l00000000004739E0
l00000000004739E0:
	rax = rcx
	rcx = Mem0[rcx:word64]
	rdx = CONVERT(edx, word32, int64)
	rcx = Mem0[rcx - 0x18<64>:word64]
	Mem0[rax + 8<64> + rcx:word64] = rdx
	return
	// succ:  fn00000000004739E0_exit
fn00000000004739E0_exit:


// fn0000000000473A00
// Return size: 8
define fn0000000000473A00
fn0000000000473A00_entry:
	rsp = fp
	// succ:  l0000000000473A00
l0000000000473A00:
	rax = rcx
	rcx = Mem0[rcx:word64]
	edx = ~edx
	rdx = CONVERT(edx, word32, uint64)
	r8 = rax
	r8 = r8 + Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(r8)
	v9 = Mem0[r8 + 0x18<64>:word32] & edx
	Mem0[r8 + 0x18<64>:word32] = v9
	SZO = cond(Mem0[r8 + 0x18<64>:word32])
	C = false
	return
	// succ:  fn0000000000473A00_exit
fn0000000000473A00_exit:


// fn0000000000473A20
// Return size: 8
define fn0000000000473A20
fn0000000000473A20_entry:
	rsp = fp
	// succ:  l0000000000473A20
l0000000000473A20:
	rax = rcx
	rcx = Mem0[rcx:word64]
	rdx = CONVERT(edx, word32, int64)
	rcx = Mem0[rcx - 0x18<64>:word64]
	Mem0[rax + 0x10<64> + rcx:word64] = rdx
	return
	// succ:  fn0000000000473A20_exit
fn0000000000473A20_exit:


// fn0000000000473A40
// Return size: 8
define fn0000000000473A40
fn0000000000473A40_entry:
	rsp = fp
	// succ:  l0000000000473A40
l0000000000473A40:
	SCZO = cond(edx - 8<32>)
	rax = rcx
	branch Test(EQ,Z) l0000000000473A75
	// succ:  l0000000000473A48 l0000000000473A75
l0000000000473A48:
	SCZO = cond(edx - 0xA<32>)
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(EQ,Z) l0000000000473A5D
	// succ:  l0000000000473A52 l0000000000473A5D
l0000000000473A52:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	SCZO = cond(edx - 0x10<32>)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	ecx = ecx << 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	// succ:  l0000000000473A5D
l0000000000473A5D:
	rdx = Mem0[rax:word64]
	r8 = rax
	r8 = r8 + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(r8)
	edx = Mem0[r8 + 0x18<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xFFFFFFB5<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx | ecx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[r8 + 0x18<64>:word32] = edx
	return
	// succ:  fn0000000000473A40_exit
l0000000000473A75:
	ecx = 0x40<32>
	rcx = CONVERT(ecx, word32, uint64)
	goto l0000000000473A5D
	// succ:  l0000000000473A5D
fn0000000000473A40_exit:


// fn0000000000473A80
// Return size: 8
define fn0000000000473A80
fn0000000000473A80_entry:
	rsp = fp
	// succ:  l0000000000473A80
l0000000000473A80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rsi = rcx
	rbx = rcx
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	SCZO = cond(Mem0[rsi + 0xE1<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000473AB3
	// succ:  l0000000000473AA0 l0000000000473AB3
l0000000000473AA0:
	rax = rbx
	Mem0[rsi + 0xE0<64>:byte] = dil
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473A80_exit
l0000000000473AB3:
	rbp = Mem0[rsi + 0xF0<64>:word64]
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l0000000000473AF8
	// succ:  l0000000000473ABF l0000000000473AF8
l0000000000473ABF:
	SCZO = cond(Mem0[rbp + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000473AD0
	// succ:  l0000000000473AC5 l0000000000473AD0
l0000000000473AC5:
	Mem0[rsi + 0xE1<64>:byte] = 1<8>
	goto l0000000000473AA0
	// succ:  l0000000000473AA0
l0000000000473AD0:
	rcx = rbp
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[rbp + 0<64>:word64]
	rdx = 0x000000000042B5F0<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(EQ,Z) l0000000000473AC5
	// succ:  l0000000000473AEC l0000000000473AC5
l0000000000473AEC:
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbp
	call rax (retsize: 8;)
	goto l0000000000473AC5
	// succ:  l0000000000473AC5
l0000000000473AF8:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000473AFF_thunk_fn0000000000473B00
l0000000000473AFF_thunk_fn0000000000473B00:
	call fn0000000000473B00 (retsize: 0;)
	return
	// succ:  fn0000000000473A80_exit
fn0000000000473A80_exit:


// fn0000000000473B00
// Return size: 8
define fn0000000000473B00
fn0000000000473B00_entry:
	rsp = fp
	// succ:  l0000000000473B00
l0000000000473B00:
	rdx = Mem0[rdx:word64]
	r8 = Mem0[rdx - 0x18<64>:word64]
	// succ:  l0000000000473B07_thunk_fn0000000000470070
l0000000000473B07_thunk_fn0000000000470070:
	call fn0000000000470070 (retsize: 0;)
	return
	// succ:  fn0000000000473B00_exit
fn0000000000473B00_exit:


// fn0000000000473B10
// Return size: 8
define fn0000000000473B10
fn0000000000473B10_entry:
	rsp = fp
	// succ:  l0000000000473B10
l0000000000473B10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SZO = cond(rdx & rdx)
	C = false
	rsi = rcx
	rbx = rdx
	branch Test(EQ,Z) l0000000000473B41
	// succ:  l0000000000473B21 l0000000000473B41
l0000000000473B21:
	rcx = rdx
	eax = wcslen(rcx)
	rdx = rbx
	r8 = rax
	rcx = rsi
	call fn0000000000470480 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473B10_exit
l0000000000473B41:
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473B10_exit
fn0000000000473B10_exit:


// fn0000000000473B60
// Return size: 8
define fn0000000000473B60
fn0000000000473B60_entry:
	rsp = fp
	// succ:  l0000000000473B60
l0000000000473B60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SZO = cond(rdx & rdx)
	C = false
	rsi = rcx
	rbp = rdx
	branch Test(EQ,Z) l0000000000473C26
	// succ:  l0000000000473B79 l0000000000473C26
l0000000000473B79:
	rcx = rdx
	eax = strlen(rcx)
	rdx = 0x3F80000000000000<64>
	rdi = rax
	rax = rax + rax
	SCZO = cond(rdi - rdx)
	rcx = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(UGT,CZ) l0000000000473BA0
	// succ:  l0000000000473B9C_1 l0000000000473BA0
l0000000000473B9C_1:
	rcx = rax
	// succ:  l0000000000473BA0
l0000000000473BA0:
	call fn0000000000475560 (retsize: 8;)
	SZO = cond(rdi & rdi)
	C = false
	r12 = rax
	branch Test(EQ,Z) l0000000000473C02
	// succ:  l0000000000473BAD l0000000000473C02
l0000000000473BAD:
	rax = Mem0[rsi:word64]
	r9d = CONVERT(Mem0[rbp + 0<64>:byte], byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rsi + 0xF0<64> + rax:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000473C3A
	// succ:  l0000000000473BC6 l0000000000473C3A
l0000000000473BC6:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l0000000000473BEA
	// succ:  l0000000000473BEA
l0000000000473BD0:
	rax = Mem0[rsi:word64]
	r9d = CONVERT(Mem0[rbp + 0<64> + rbx:byte], byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rsi + 0xF0<64> + rax:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000473C3A
	// succ:  l0000000000473BEA l0000000000473C3A
l0000000000473BEA:
	rax = Mem0[rcx:word64]
	edx = CONVERT(r9b, byte, int32)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	Mem0[r12 + rbx * 2<64>:word16] = ax
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	SCZO = cond(rbx - rdi)
	branch Test(NE,Z) l0000000000473BD0
	// succ:  l0000000000473C02 l0000000000473BD0
l0000000000473C02:
	r8 = rdi
	rdx = r12
	rcx = rsi
	call fn0000000000470480 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = r12
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000473C18
l0000000000473C18:
	rax = rsi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473B60_exit
l0000000000473C26:
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	goto l0000000000473C18
	// succ:  l0000000000473C18
l0000000000473C3A:
	call fn0000000000470820 (retsize: 8;)
	rbx = rax
	rdi = rdx
	rcx = r12
	call fn0000000000475540 (retsize: 8;)
	rcx = rbx
	rdx = rdi
	// succ:  l0000000000473C53
l0000000000473C53:
	SCZO = cond(rdx - 1<64>)
	branch Test(NE,Z) l0000000000473C8E
	// succ:  l0000000000473C59 l0000000000473C8E
l0000000000473C59:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v22 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v22
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l0000000000473C89
	// succ:  l0000000000473C6F l0000000000473C89
l0000000000473C6F:
	call fn0000000000476060 (retsize: 8;)
	rcx = rax
	goto l0000000000473C53
	// succ:  l0000000000473C53
l0000000000473C89:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l0000000000473C8E
l0000000000473C8E:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdi = rsi
	rdi = rdi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdi)
	v25 = Mem0[rdi + 0x20<64>:word32] | 1<32>
	Mem0[rdi + 0x20<64>:word32] = v25
	SZO = cond(Mem0[rdi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rdi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l0000000000473CB1
	// succ:  l0000000000473CA7 l0000000000473CB1
l0000000000473CA7:
	call fn0000000000475A70 (retsize: 8;)
	goto l0000000000473C18
	// succ:  l0000000000473C18
l0000000000473CB1:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l0000000000473CCF_thunk_fn0000000000473CD0
l0000000000473CCF_thunk_fn0000000000473CD0:
	call fn0000000000473CD0 (retsize: 0;)
	return
	// succ:  fn0000000000473B60_exit
fn0000000000473B60_exit:


// fn0000000000473CD0
// Return size: 8
define fn0000000000473CD0
fn0000000000473CD0_entry:
	rsp = fp
	// succ:  l0000000000473CD0
l0000000000473CD0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x38<64>:word16] = dx
	rdx = rsp + 0x38<64>
	call fn0000000000470480 (retsize: 8;)
	rsp = rsp + 8<64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000473CD0_exit
fn0000000000473CD0_exit:


// fn0000000000473CF0
// Return size: 8
define fn0000000000473CF0
fn0000000000473CF0_entry:
	rsp = fp
	// succ:  l0000000000473CF0
l0000000000473CF0:
	rax = rcx
	rcx = Mem0[rcx:word64]
	r8 = rax
	r8 = r8 + Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(r8)
	v8 = Mem0[r8 + 0x18<64>:word32] | edx
	Mem0[r8 + 0x18<64>:word32] = v8
	SZO = cond(Mem0[r8 + 0x18<64>:word32])
	C = false
	return
	// succ:  fn0000000000473CF0_exit
fn0000000000473CF0_exit:


// fn0000000000473D10
// Return size: 8
define fn0000000000473D10
fn0000000000473D10_entry:
	rsp = fp
	// succ:  l0000000000473D10
l0000000000473D10:
	rax = rcx
	rcx = Mem0[rcx:word64]
	rdx = CONVERT(edx, word32, int64)
	rcx = Mem0[rcx - 0x18<64>:word64]
	Mem0[rax + 8<64> + rcx:word64] = rdx
	return
	// succ:  fn0000000000473D10_exit
fn0000000000473D10_exit:


// fn0000000000473D30
// Return size: 8
define fn0000000000473D30
fn0000000000473D30_entry:
	rsp = fp
	// succ:  l0000000000473D30
l0000000000473D30:
	rax = rcx
	rcx = Mem0[rcx:word64]
	edx = ~edx
	rdx = CONVERT(edx, word32, uint64)
	r8 = rax
	r8 = r8 + Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(r8)
	v9 = Mem0[r8 + 0x18<64>:word32] & edx
	Mem0[r8 + 0x18<64>:word32] = v9
	SZO = cond(Mem0[r8 + 0x18<64>:word32])
	C = false
	return
	// succ:  fn0000000000473D30_exit
fn0000000000473D30_exit:


// fn0000000000473D50
// Return size: 8
define fn0000000000473D50
fn0000000000473D50_entry:
	rsp = fp
	// succ:  l0000000000473D50
l0000000000473D50:
	rax = rcx
	rcx = Mem0[rcx:word64]
	rdx = CONVERT(edx, word32, int64)
	rcx = Mem0[rcx - 0x18<64>:word64]
	Mem0[rax + 0x10<64> + rcx:word64] = rdx
	return
	// succ:  fn0000000000473D50_exit
fn0000000000473D50_exit:


// fn0000000000473D70
// Return size: 8
define fn0000000000473D70
fn0000000000473D70_entry:
	rsp = fp
	// succ:  l0000000000473D70
l0000000000473D70:
	SCZO = cond(edx - 8<32>)
	rax = rcx
	branch Test(EQ,Z) l0000000000473DA5
	// succ:  l0000000000473D78 l0000000000473DA5
l0000000000473D78:
	SCZO = cond(edx - 0xA<32>)
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(EQ,Z) l0000000000473D8D
	// succ:  l0000000000473D82 l0000000000473D8D
l0000000000473D82:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	SCZO = cond(edx - 0x10<32>)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	ecx = ecx << 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	// succ:  l0000000000473D8D
l0000000000473D8D:
	rdx = Mem0[rax:word64]
	r8 = rax
	r8 = r8 + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(r8)
	edx = Mem0[r8 + 0x18<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xFFFFFFB5<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx | ecx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[r8 + 0x18<64>:word32] = edx
	return
	// succ:  fn0000000000473D70_exit
l0000000000473DA5:
	ecx = 0x40<32>
	rcx = CONVERT(ecx, word32, uint64)
	goto l0000000000473D8D
	// succ:  l0000000000473D8D
fn0000000000473D70_exit:


// fn0000000000473DB0
// Return size: 8
define fn0000000000473DB0
fn0000000000473DB0_entry:
	rsp = fp
	// succ:  l0000000000473DB0
l0000000000473DB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rsi = rcx
	rbx = rcx
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	SCZO = cond(Mem0[rsi + 0xE2<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000473DE1
	// succ:  l0000000000473DCF l0000000000473DE1
l0000000000473DCF:
	rax = rbx
	Mem0[rsi + 0xE0<64>:word16] = di
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473DB0_exit
l0000000000473DE1:
	rcx = Mem0[rsi + 0xF0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000473E01
	// succ:  l0000000000473DED l0000000000473E01
l0000000000473DED:
	rax = Mem0[rcx:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	Mem0[rsi + 0xE2<64>:byte] = 1<8>
	goto l0000000000473DCF
	// succ:  l0000000000473DCF
l0000000000473E01:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000473E0F_thunk_fn0000000000473E10
l0000000000473E0F_thunk_fn0000000000473E10:
	call fn0000000000473E10 (retsize: 0;)
	return
	// succ:  fn0000000000473DB0_exit
fn0000000000473DB0_exit:


// fn0000000000473E10
// Return size: 8
define fn0000000000473E10
fn0000000000473E10_entry:
	rsp = fp
	// succ:  l0000000000473E10
l0000000000473E10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rcx + 0xF0<64> + rax:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000473E53
	// succ:  l0000000000473E2C l0000000000473E53
l0000000000473E2C:
	rax = Mem0[rcx:word64]
	edx = CONVERT(dl, byte, int32)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rdx = rsp + 0x2E<64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rbx
	Mem0[rsp + 0x2E<64>:word16] = ax
	call fn0000000000470480 (retsize: 8;)
	rsp = rsp + 8<64>
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473E10_exit
l0000000000473E53:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000473E5F_thunk_fn0000000000473E60
l0000000000473E5F_thunk_fn0000000000473E60:
	call fn0000000000473E60 (retsize: 0;)
	return
	// succ:  fn0000000000473E10_exit
fn0000000000473E10_exit:


// fn0000000000473E60
// Return size: 8
define fn0000000000473E60
fn0000000000473E60_entry:
	rsp = fp
	// succ:  l0000000000473E60
l0000000000473E60:
	rdx = Mem0[rdx:word64]
	r8 = Mem0[rdx - 0x18<64>:word64]
	// succ:  l0000000000473E67_thunk_fn0000000000470480
l0000000000473E67_thunk_fn0000000000470480:
	call fn0000000000470480 (retsize: 0;)
	return
	// succ:  fn0000000000473E60_exit
fn0000000000473E60_exit:


// fn0000000000473E70
// Return size: 8
define fn0000000000473E70
fn0000000000473E70_entry:
	rsp = fp
	// succ:  l0000000000473E70
l0000000000473E70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x18<64>:word64]
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000473800 (retsize: 8;)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473E70_exit
fn0000000000473E70_exit:


// fn0000000000473EA0
// Return size: 8
define fn0000000000473EA0
fn0000000000473EA0_entry:
	rsp = fp
	// succ:  l0000000000473EA0
l0000000000473EA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	r12 = rsp + 0x2F<64>
	rbx = rcx
	rcx = rdx
	rdi = r8
	rbp = rdx
	eax = strlen(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = r12
	rsi = rax
	call fn00000000004505D0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rax = Mem0[rdi:word64]
	rdx = rsi
	rcx = rbx
	rdx = rdx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx)
	call fn0000000000451BE0 (retsize: 8;)
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000473EF7
	// succ:  l0000000000473EE9 l0000000000473EF7
l0000000000473EE9:
	r8 = rsi
	rdx = rbp
	rcx = rbx
	call fn0000000000450E20 (retsize: 8;)
	// succ:  l0000000000473EF7
l0000000000473EF7:
	rdx = rdi
	rcx = rbx
	call fn0000000000450F00 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473EA0_exit
fn0000000000473EA0_exit:


// fn0000000000473F30
// Return size: 8
define fn0000000000473F30
fn0000000000473F30_entry:
	rsp = fp
	// succ:  l0000000000473F30
l0000000000473F30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rsi = r8
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l0000000000473F63
	// succ:  l0000000000473F46 l0000000000473F63
l0000000000473F46:
	__lock()
	v14 = Mem0[rax - 8<64>:word32] + 1<32>
	Mem0[rax - 8<64>:word32] = v14
	SCZO = cond(v14)
	// succ:  l0000000000473F4B
l0000000000473F4B:
	Mem0[rbx:word64] = rax
	rdx = rsi
	rcx = rbx
	call fn0000000000450F00 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473F30_exit
l0000000000473F63:
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000450B00 (retsize: 8;)
	goto l0000000000473F4B
	// succ:  l0000000000473F4B
fn0000000000473F30_exit:


// fn0000000000473FA0
// Return size: 8
define fn0000000000473FA0
fn0000000000473FA0_entry:
	rsp = fp
	// succ:  l0000000000473FA0
l0000000000473FA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rdi = rsp + 0x2F<64>
	rbx = rcx
	rsi = r8
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	ebp = edx
	rbp = CONVERT(ebp, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = rdi
	call fn00000000004505D0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rax = Mem0[rsi:word64]
	rcx = rbx
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = rax + 1<64>
	call fn0000000000451BE0 (retsize: 8;)
	r8d = CONVERT(bpl, byte, int32)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004510A0 (retsize: 8;)
	rdx = rsi
	rcx = rbx
	call fn0000000000450F00 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000473FA0_exit
fn0000000000473FA0_exit:


// fn0000000000474020
// Return size: 8
define fn0000000000474020
fn0000000000474020_entry:
	rsp = fp
	// succ:  l0000000000474020
l0000000000474020:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	r12 = rsp + 0x2F<64>
	rbx = rcx
	rcx = rdx
	rdi = r8
	rbp = rdx
	eax = wcslen(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = r12
	rsi = rax
	call fn0000000000448EB0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rax = Mem0[rdi:word64]
	rdx = rsi
	rcx = rbx
	rdx = rdx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx)
	call fn000000000044A5D0 (retsize: 8;)
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000474077
	// succ:  l0000000000474069 l0000000000474077
l0000000000474069:
	r8 = rsi
	rdx = rbp
	rcx = rbx
	call fn0000000000449760 (retsize: 8;)
	// succ:  l0000000000474077
l0000000000474077:
	rdx = rdi
	rcx = rbx
	call fn0000000000449840 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000474020_exit
fn0000000000474020_exit:


// fn00000000004740B0
// Return size: 8
define fn00000000004740B0
fn00000000004740B0_entry:
	rsp = fp
	// succ:  l00000000004740B0
l00000000004740B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rsi = r8
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l00000000004740E3
	// succ:  l00000000004740C6 l00000000004740E3
l00000000004740C6:
	__lock()
	v14 = Mem0[rax - 8<64>:word32] + 1<32>
	Mem0[rax - 8<64>:word32] = v14
	SCZO = cond(v14)
	// succ:  l00000000004740CB
l00000000004740CB:
	Mem0[rbx:word64] = rax
	rdx = rsi
	rcx = rbx
	call fn0000000000449840 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004740B0_exit
l00000000004740E3:
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000449420 (retsize: 8;)
	goto l00000000004740CB
	// succ:  l00000000004740CB
fn00000000004740B0_exit:


// fn0000000000474120
// Return size: 8
define fn0000000000474120
fn0000000000474120_entry:
	rsp = fp
	// succ:  l0000000000474120
l0000000000474120:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rdi = rsp + 0x2F<64>
	rbx = rcx
	rsi = r8
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	ebp = edx
	rbp = CONVERT(ebp, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = rdi
	call fn0000000000448EB0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rax = Mem0[rsi:word64]
	rcx = rbx
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = rax + 1<64>
	call fn000000000044A5D0 (retsize: 8;)
	r8d = CONVERT(bp, word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004499F0 (retsize: 8;)
	rsp = rsp + 8<64>
	rdx = rsi
	rcx = rbx
	call fn0000000000449840 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000474120_exit
fn0000000000474120_exit:


// fn00000000004741A0
// Return size: 8
define fn00000000004741A0
fn00000000004741A0_entry:
	rsp = fp
	// succ:  l00000000004741A0
l00000000004741A0:
	// succ:  l00000000004741A0_thunk_fn00000000004741E0
l00000000004741A0_thunk_fn00000000004741E0:
	call fn00000000004741E0 (retsize: 0;)
	return
	// succ:  fn00000000004741A0_exit
fn00000000004741A0_exit:


// fn00000000004741B0
// Return size: 8
define fn00000000004741B0
fn00000000004741B0_entry:
	rsp = fp
	// succ:  l00000000004741B0
l00000000004741B0:
	// succ:  l00000000004741B0_thunk_fn00000000004741E0
l00000000004741B0_thunk_fn00000000004741E0:
	call fn00000000004741E0 (retsize: 0;)
	return
	// succ:  fn00000000004741B0_exit
fn00000000004741B0_exit:


// fn00000000004741C0
// Return size: 8
define fn00000000004741C0
fn00000000004741C0_entry:
	rsp = fp
	// succ:  l00000000004741C0
l00000000004741C0:
	// succ:  l00000000004741C0_thunk_fn00000000004744D0
l00000000004741C0_thunk_fn00000000004744D0:
	call fn00000000004744D0 (retsize: 0;)
	return
	// succ:  fn00000000004741C0_exit
fn00000000004741C0_exit:


// fn00000000004741D0
// Return size: 8
define fn00000000004741D0
fn00000000004741D0_entry:
	rsp = fp
	// succ:  l00000000004741D0
l00000000004741D0:
	// succ:  l00000000004741D0_thunk_fn00000000004744D0
l00000000004741D0_thunk_fn00000000004744D0:
	call fn00000000004744D0 (retsize: 0;)
	return
	// succ:  fn00000000004741D0_exit
fn00000000004741D0_exit:


// fn00000000004741E0
// Return size: 8
define fn00000000004741E0
fn00000000004741E0_entry:
	rsp = fp
	// succ:  l00000000004741E0
l00000000004741E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	r12 = rcx
	rcx = rsp + 0x2F<64>
	rdi = rdx
	rdx = r12
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	rax = Mem0[r12:word64]
	branch Test(EQ,Z) l000000000047435D
	// succ:  l0000000000474215 l000000000047435D
l0000000000474215:
	rcx = r12
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	rdx = 0x7FFFFFFFFFFFFFFF<64>
	rbx = rsp + 0x30<64>
	r15 = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(r15 & r15)
	C = false
	branch Test(GT,SZO) l0000000000474236
	// succ:  l0000000000474232_1 l0000000000474236
l0000000000474232_1:
	r15 = rdx
	// succ:  l0000000000474236
l0000000000474236:
	rdx = rcx + 0xD0<64>
	rcx = rbx
	call fn000000000046AE80 (retsize: 8;)
	rcx = rbx
	call fn0000000000472FC0 (retsize: 8;)
	rcx = rbx
	r14 = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[r12:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rsi = Mem0[r12 + 0xE8<64> + rax:word64]
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000474414
	// succ:  l0000000000474276 l0000000000474414
l0000000000474276:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000474279
l0000000000474279:
	r13 = r15 - 1<64>
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	// succ:  l0000000000474280
l0000000000474280:
	SCZO = cond(rbp - r13)
	branch Test(GE,SO) l000000000047431D
	// succ:  l0000000000474289 l000000000047431D
l0000000000474289:
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000047431D
	// succ:  l0000000000474292 l000000000047431D
l0000000000474292:
	r8 = Mem0[r14 + 0x30<64>:word64]
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(Mem0[r8 + rdx * 2<64>:byte] & 0x20<8>)
	C = false
	branch Test(NE,Z) l0000000000474344
	// succ:  l00000000004742A4 l0000000000474344
l00000000004742A4:
	rbx = r15
	rdx = Mem0[rsi + 0x10<64>:word64]
	rbx = rbx - rbp
	SCZO = cond(rbx)
	rcx = rbx - 1<64>
	rbx = Mem0[rsi + 0x18<64>:word64]
	rbx = rbx - rdx
	SCZO = cond(rbx)
	SCZO = cond(rcx - rbx)
	branch Test(GT,SZO) l00000000004742C0
	// succ:  l00000000004742BC_1 l00000000004742C0
l00000000004742BC_1:
	rbx = rcx
	// succ:  l00000000004742C0
l00000000004742C0:
	SCZO = cond(rbx - 1<64>)
	branch Test(LE,SZO) l00000000004743A1
	// succ:  l00000000004742CA l00000000004743A1
l00000000004742CA:
	rax = rdx + 1<64>
	rbx = rbx + rdx
	SCZO = cond(rbx)
	SCZO = cond(rbx - rax)
	branch Test(ULE,CZ) l00000000004742E5
	// succ:  l00000000004742D6 l00000000004742E5
l00000000004742D6:
	ecx = CONVERT(Mem0[rdx + 1<64>:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(Mem0[r8 + rcx * 2<64>:byte] & 0x20<8>)
	C = false
	branch Test(EQ,Z) l0000000000474385
	// succ:  l00000000004742E5 l0000000000474385
l00000000004742E5:
	rbx = rax
	// succ:  l00000000004742E8
l00000000004742E8:
	rbx = rbx - rdx
	SCZO = cond(rbx)
	rcx = rdi
	r8 = rbx
	rdi = rdi + rbx
	SCZO = cond(rdi)
	rbp = rbp + rbx
	SCZO = cond(rbp)
	rax = memcpy(rcx, rdx, r8)
	rax = rbx
	rax = rax + Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax)
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	Mem0[rsi + 0x10<64>:word64] = rax
	branch Test(UGE,C) l00000000004743D0
	// succ:  l0000000000474311 l00000000004743D0
l0000000000474311:
	SCZO = cond(rbp - r13)
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	branch Test(LT,SO) l0000000000474289
	// succ:  l000000000047431D l0000000000474289
l000000000047431D:
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000474344
	// succ:  l0000000000474322 l0000000000474344
l0000000000474322:
	Mem0[rdi:byte] = 0<8>
	rax = Mem0[r12:word64]
	SCZO = cond(rbp - 1<64>)
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[r12 + 0x10<64> + rdx:word64] = 0<64>
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx & 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	goto l0000000000474362
	// succ:  l0000000000474362
l0000000000474344:
	Mem0[rdi:byte] = 0<8>
	rax = Mem0[r12:word64]
	SZO = cond(rbp & rbp)
	C = false
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[r12 + 0x10<64> + rdx:word64] = 0<64>
	branch Test(NE,Z) l0000000000474371
	// succ:  l000000000047435D l0000000000474371
l000000000047435D:
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000474362
l0000000000474362:
	rcx = r12
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	// succ:  l0000000000474371
l0000000000474371:
	rax = r12
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004741E0_exit
l0000000000474385:
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(rax - rbx)
	branch Test(EQ,Z) l00000000004742E8
	// succ:  l0000000000474392 l00000000004742E8
l0000000000474392:
	ecx = CONVERT(Mem0[rax:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(Mem0[r8 + rcx * 2<64>:byte] & 0x20<8>)
	C = false
	branch Test(EQ,Z) l0000000000474385
	// succ:  l000000000047439C l0000000000474385
l000000000047439C:
	goto l00000000004742E5
	// succ:  l00000000004742E5
l00000000004743A1:
	Mem0[rdi:byte] = al
	rax = Mem0[rsi + 0x10<64>:word64]
	rbp = rbp + 1<64>
	SCZO = cond(rbp)
	rdx = Mem0[rsi + 0x18<64>:word64]
	rbx = rdi + 1<64>
	SCZO = cond(rax - rdx)
	branch Test(UGE,C) l00000000004743DE
	// succ:  l00000000004743B8 l00000000004743DE
l00000000004743B8:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsi + 0x10<64>:word64] = rax
	// succ:  l00000000004743C0
l00000000004743C0:
	SCZO = cond(rax - rdx)
	branch Test(UGE,C) l0000000000474403
	// succ:  l00000000004743C5 l0000000000474403
l00000000004743C5:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rdi = rbx
	goto l0000000000474280
	// succ:  l0000000000474280
l00000000004743D0:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000474280
	// succ:  l0000000000474280
l00000000004743DE:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	rdi = rbx
	SCZO = cond(edx - eax)
	branch Test(EQ,Z) l0000000000474280
	// succ:  l00000000004743F9 l0000000000474280
l00000000004743F9:
	rax = Mem0[rsi + 0x10<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	goto l00000000004743C0
	// succ:  l00000000004743C0
l0000000000474403:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	rdi = rbx
	goto l0000000000474280
	// succ:  l0000000000474280
l0000000000474414:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000474279
	// succ:  l0000000000474279
fn00000000004741E0_exit:


// fn00000000004744D0
// Return size: 8
define fn00000000004744D0
fn00000000004744D0_entry:
	rsp = fp
	// succ:  l00000000004744D0
l00000000004744D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x2F<64>
	rsi = rdx
	rdx = rbx
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000474500
	// succ:  l00000000004744F3 l0000000000474500
l00000000004744F3:
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004744D0_exit
l0000000000474500:
	rax = Mem0[rbx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	r8 = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(r8 - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000474531
	// succ:  l0000000000474519 l0000000000474531
l0000000000474519:
	eax = CONVERT(Mem0[r8:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	Mem0[rcx + 0x10<64>:word64] = r8
	// succ:  l0000000000474525
l0000000000474525:
	Mem0[rsi:byte] = al
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004744D0_exit
l0000000000474531:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000474525
	// succ:  l000000000047453C l0000000000474525
l000000000047453C:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 6<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	goto l00000000004744F3
	// succ:  l00000000004744F3
fn00000000004744D0_exit:


// fn00000000004745D0
// Return size: 8
define fn00000000004745D0
fn00000000004745D0_entry:
	rsp = fp
	// succ:  l00000000004745D0
l00000000004745D0:
	rax = rcx
	rcx = Mem0[rcx:word64]
	r8 = rax
	r8 = r8 + Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(r8)
	v8 = Mem0[r8 + 0x18<64>:word32] | edx
	Mem0[r8 + 0x18<64>:word32] = v8
	SZO = cond(Mem0[r8 + 0x18<64>:word32])
	C = false
	return
	// succ:  fn00000000004745D0_exit
fn00000000004745D0_exit:


// fn00000000004745F0
// Return size: 8
define fn00000000004745F0
fn00000000004745F0_entry:
	rsp = fp
	// succ:  l00000000004745F0
l00000000004745F0:
	rax = rcx
	rcx = Mem0[rcx:word64]
	rdx = CONVERT(edx, word32, int64)
	rcx = Mem0[rcx - 0x18<64>:word64]
	Mem0[rax + 8<64> + rcx:word64] = rdx
	return
	// succ:  fn00000000004745F0_exit
fn00000000004745F0_exit:


// fn0000000000474610
// Return size: 8
define fn0000000000474610
fn0000000000474610_entry:
	rsp = fp
	// succ:  l0000000000474610
l0000000000474610:
	rax = rcx
	rcx = Mem0[rcx:word64]
	edx = ~edx
	rdx = CONVERT(edx, word32, uint64)
	r8 = rax
	r8 = r8 + Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(r8)
	v9 = Mem0[r8 + 0x18<64>:word32] & edx
	Mem0[r8 + 0x18<64>:word32] = v9
	SZO = cond(Mem0[r8 + 0x18<64>:word32])
	C = false
	return
	// succ:  fn0000000000474610_exit
fn0000000000474610_exit:


// fn0000000000474630
// Return size: 8
define fn0000000000474630
fn0000000000474630_entry:
	rsp = fp
	// succ:  l0000000000474630
l0000000000474630:
	rax = rcx
	rcx = Mem0[rcx:word64]
	rdx = CONVERT(edx, word32, int64)
	rcx = Mem0[rcx - 0x18<64>:word64]
	Mem0[rax + 0x10<64> + rcx:word64] = rdx
	return
	// succ:  fn0000000000474630_exit
fn0000000000474630_exit:


// fn0000000000474650
// Return size: 8
define fn0000000000474650
fn0000000000474650_entry:
	rsp = fp
	// succ:  l0000000000474650
l0000000000474650:
	SCZO = cond(edx - 8<32>)
	rax = rcx
	branch Test(EQ,Z) l0000000000474685
	// succ:  l0000000000474658 l0000000000474685
l0000000000474658:
	SCZO = cond(edx - 0xA<32>)
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(EQ,Z) l000000000047466D
	// succ:  l0000000000474662 l000000000047466D
l0000000000474662:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	SCZO = cond(edx - 0x10<32>)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	ecx = ecx << 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	// succ:  l000000000047466D
l000000000047466D:
	rdx = Mem0[rax:word64]
	r8 = rax
	r8 = r8 + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(r8)
	edx = Mem0[r8 + 0x18<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xFFFFFFB5<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx | ecx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[r8 + 0x18<64>:word32] = edx
	return
	// succ:  fn0000000000474650_exit
l0000000000474685:
	ecx = 0x40<32>
	rcx = CONVERT(ecx, word32, uint64)
	goto l000000000047466D
	// succ:  l000000000047466D
fn0000000000474650_exit:


// fn0000000000474690
// Return size: 8
define fn0000000000474690
fn0000000000474690_entry:
	rsp = fp
	// succ:  l0000000000474690
l0000000000474690:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rsi = rcx
	rbx = rcx
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	SCZO = cond(Mem0[rsi + 0xE1<64>:byte] - 0<8>)
	branch Test(EQ,Z) l00000000004746C3
	// succ:  l00000000004746B0 l00000000004746C3
l00000000004746B0:
	rax = rbx
	Mem0[rsi + 0xE0<64>:byte] = dil
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000474690_exit
l00000000004746C3:
	rbp = Mem0[rsi + 0xF0<64>:word64]
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l0000000000474708
	// succ:  l00000000004746CF l0000000000474708
l00000000004746CF:
	SCZO = cond(Mem0[rbp + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l00000000004746E0
	// succ:  l00000000004746D5 l00000000004746E0
l00000000004746D5:
	Mem0[rsi + 0xE1<64>:byte] = 1<8>
	goto l00000000004746B0
	// succ:  l00000000004746B0
l00000000004746E0:
	rcx = rbp
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[rbp + 0<64>:word64]
	rdx = 0x000000000042B5F0<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(EQ,Z) l00000000004746D5
	// succ:  l00000000004746FC l00000000004746D5
l00000000004746FC:
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbp
	call rax (retsize: 8;)
	goto l00000000004746D5
	// succ:  l00000000004746D5
l0000000000474708:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000047470F_thunk_fn0000000000474710
l000000000047470F_thunk_fn0000000000474710:
	call fn0000000000474710 (retsize: 0;)
	return
	// succ:  fn0000000000474690_exit
fn0000000000474690_exit:


// fn0000000000474710
// Return size: 8
define fn0000000000474710
fn0000000000474710_entry:
	rsp = fp
	// succ:  l0000000000474710
l0000000000474710:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	r12 = rcx
	rcx = rsp + 0x2F<64>
	rbx = rdx
	rdx = r12
	call fn000000000044D740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000474769
	// succ:  l000000000047473D l0000000000474769
l000000000047473D:
	rax = Mem0[r12:word64]
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000474746
l0000000000474746:
	rcx = r12
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	// succ:  l0000000000474755
l0000000000474755:
	rax = r12
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000474710_exit
l0000000000474769:
	rax = Mem0[rbx:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx
	r8 = Mem0[rax - 0x18<64>:word64]
	call fn0000000000451CC0 (retsize: 8;)
	rax = Mem0[r12:word64]
	rsi = r12
	rbp = 0x3FFFFFFFFFFFFFF9<64>
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	rdx = Mem0[rsi + 0x10<64>:word64]
	SZO = cond(rdx & rdx)
	C = false
	branch Test(LE,SZO) l000000000047479D
	// succ:  l0000000000474799_1 l000000000047479D
l0000000000474799_1:
	rbp = rdx
	// succ:  l000000000047479D
l000000000047479D:
	rdx = rsi + 0xD0<64>
	rsi = rsp + 0x30<64>
	rcx = rsi
	call fn000000000046AE80 (retsize: 8;)
	rcx = rsi
	call fn0000000000472FC0 (retsize: 8;)
	rcx = rsi
	r13 = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[r12:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rdi = Mem0[r12 + 0xE8<64> + rax:word64]
	rax = Mem0[rdi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rdi + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004749C1
	// succ:  l00000000004747E2 l00000000004749C1
l00000000004747E2:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004747E5
l00000000004747E5:
	r10 = Mem0[r13 + 0x30<64>:word64]
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(Mem0[r10 + rdx * 2<64>:byte] & 0x20<8>)
	C = false
	branch Test(NE,Z) l000000000047488A
	// succ:  l00000000004747F9 l000000000047488A
l00000000004747F9:
	// succ:  l0000000000474800
l0000000000474800:
	rdx = Mem0[rdi + 0x10<64>:word64]
	r8 = Mem0[rdi + 0x18<64>:word64]
	rcx = rbp
	rcx = rcx - rsi
	SCZO = cond(rcx)
	r8 = r8 - rdx
	SCZO = cond(r8)
	SCZO = cond(rcx - r8)
	branch Test(GT,SZO) l0000000000474818
	// succ:  l0000000000474814_1 l0000000000474818
l0000000000474814_1:
	r8 = rcx
	// succ:  l0000000000474818
l0000000000474818:
	SCZO = cond(r8 - 1<64>)
	branch Test(LE,SZO) l00000000004748C9
	// succ:  l0000000000474822 l00000000004748C9
l0000000000474822:
	r9 = rdx + 1<64>
	r8 = r8 + rdx
	SCZO = cond(r8)
	SCZO = cond(r8 - r9)
	branch Test(ULE,CZ) l0000000000474840
	// succ:  l000000000047482E l0000000000474840
l000000000047482E:
	eax = CONVERT(Mem0[rdx + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(Mem0[r10 + rax * 2<64>:byte] & 0x20<8>)
	C = false
	branch Test(EQ,Z) l00000000004748B0
	// succ:  l0000000000474839 l00000000004748B0
l0000000000474839:
	// succ:  l0000000000474840
l0000000000474840:
	r8 = r9
	// succ:  l0000000000474843
l0000000000474843:
	r14 = r8
	rcx = rbx
	r14 = r14 - rdx
	SCZO = cond(r14)
	r8 = r14
	call fn0000000000450E00 (retsize: 8;)
	rax = r14
	rax = rax + Mem0[rdi + 0x10<64>:word64]
	SCZO = cond(rax)
	rsi = rsi + r14
	SCZO = cond(rsi)
	SCZO = cond(rax - Mem0[rdi + 0x18<64>:word64])
	Mem0[rdi + 0x10<64>:word64] = rax
	branch Test(UGE,C) l0000000000474933
	// succ:  l000000000047486C l0000000000474933
l000000000047486C:
	SCZO = cond(rbp - rsi)
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	branch Test(ULE,CZ) l0000000000474970
	// succ:  l0000000000474878 l0000000000474970
l0000000000474878:
	r10 = Mem0[r13 + 0x30<64>:word64]
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(Mem0[r10 + rdx * 2<64>:byte] & 0x20<8>)
	C = false
	branch Test(EQ,Z) l0000000000474800
	// succ:  l000000000047488A l0000000000474800
l000000000047488A:
	rax = Mem0[r12:word64]
	SZO = cond(rsi & rsi)
	C = false
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[r12 + 0x10<64> + rdx:word64] = 0<64>
	branch Test(NE,Z) l0000000000474755
	// succ:  l00000000004748A4 l0000000000474755
l00000000004748A4:
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000474746
	// succ:  l0000000000474746
l00000000004748B0:
	r9 = r9 + 1<64>
	SCZO = cond(r9)
	SCZO = cond(r9 - r8)
	branch Test(EQ,Z) l0000000000474843
	// succ:  l00000000004748B9 l0000000000474843
l00000000004748B9:
	eax = CONVERT(Mem0[r9:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(Mem0[r10 + rax * 2<64>:byte] & 0x20<8>)
	C = false
	branch Test(EQ,Z) l00000000004748B0
	// succ:  l00000000004748C4 l00000000004748B0
l00000000004748C4:
	goto l0000000000474840
	// succ:  l0000000000474840
l00000000004748C9:
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	rax = Mem0[rbx:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	r15 = rdx + 1<64>
	SCZO = cond(r15 - Mem0[rax - 0x10<64>:word64])
	branch Test(UGT,CZ) l00000000004748E4
	// succ:  l00000000004748DD l00000000004748E4
l00000000004748DD:
	ecx = Mem0[rax - 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(LE,SZO) l00000000004748F6
	// succ:  l00000000004748E4 l00000000004748F6
l00000000004748E4:
	rdx = r15
	rcx = rbx
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	// succ:  l00000000004748F6
l00000000004748F6:
	Mem0[rax + rdx:byte] = r14b
	rax = Mem0[rbx:word64]
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = r15
	Mem0[rax + r15:byte] = 0<8>
	rax = Mem0[rdi + 0x10<64>:word64]
	rdx = Mem0[rdi + 0x18<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(UGE,C) l00000000004749A6
	// succ:  l0000000000474922 l00000000004749A6
l0000000000474922:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rdi + 0x10<64>:word64] = rax
	// succ:  l000000000047492A
l000000000047492A:
	SCZO = cond(rax - rdx)
	branch Test(ULT,C) l000000000047486C
	// succ:  l0000000000474933 l000000000047486C
l0000000000474933:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(rbp - rsi)
	branch Test(ULE,CZ) l0000000000474970
	// succ:  l0000000000474941 l0000000000474970
l0000000000474941:
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000474878
	// succ:  l000000000047494A l0000000000474878
l000000000047494A:
	rax = Mem0[r12:word64]
	SCZO = cond(rsi - 1<64>)
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[r12 + 0x10<64> + rdx:word64] = 0<64>
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx & 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	goto l0000000000474746
	// succ:  l0000000000474746
l0000000000474970:
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000474990
	// succ:  l0000000000474975 l0000000000474990
l0000000000474975:
	rax = Mem0[r12:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[r12 + 0x10<64> + rdx:word64] = 0<64>
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000474746
	// succ:  l0000000000474746
l0000000000474990:
	rax = Mem0[r12:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	Mem0[r12 + 0x10<64> + rax:word64] = 0<64>
	goto l0000000000474755
	// succ:  l0000000000474755
l00000000004749A6:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000047494A
	// succ:  l00000000004749B4 l000000000047494A
l00000000004749B4:
	rax = Mem0[rdi + 0x10<64>:word64]
	rdx = Mem0[rdi + 0x18<64>:word64]
	goto l000000000047492A
	// succ:  l000000000047492A
l00000000004749C1:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l00000000004747E5
	// succ:  l00000000004749D3 l00000000004747E5
l00000000004749D3:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l000000000047494A
	// succ:  l000000000047494A
fn0000000000474710_exit:


// fn0000000000474A80
// Return size: 8
define fn0000000000474A80
fn0000000000474A80_entry:
	rsp = fp
	// succ:  l0000000000474A80
l0000000000474A80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbp = rcx
	rcx = rsp + 0x2F<64>
	r12 = rdx
	rdx = rbp
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	rax = Mem0[rbp + 0<64>:word64]
	branch Test(EQ,Z) l0000000000474BA4
	// succ:  l0000000000474AB3 l0000000000474BA4
l0000000000474AB3:
	rdx = rbp
	rdx = rdx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx)
	rbx = rsp + 0x30<64>
	rax = 0x7FFFFFFFFFFFFFFF<64>
	rcx = rbx
	r13 = Mem0[rdx + 0x10<64>:word64]
	SZO = cond(r13 & r13)
	C = false
	branch Test(GT,SZO) l0000000000474AD7
	// succ:  l0000000000474AD3_1 l0000000000474AD7
l0000000000474AD3_1:
	r13 = rax
	// succ:  l0000000000474AD7
l0000000000474AD7:
	rdx = rdx + 0xD0<64>
	SCZO = cond(rdx)
	call fn000000000046AE80 (retsize: 8;)
	rcx = rbx
	call fn0000000000473020 (retsize: 8;)
	rcx = rbx
	r14 = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[rbp + 0<64>:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rsi = Mem0[rbp + 0xE8<64> + rax:word64]
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000474BF0
	// succ:  l0000000000474B14 l0000000000474BF0
l0000000000474B14:
	ebx = CONVERT(Mem0[rax:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000474B17
l0000000000474B17:
	r13 = r13 - 1<64>
	SCZO = cond(r13)
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	// succ:  l0000000000474B20
l0000000000474B20:
	SCZO = cond(rdi - r13)
	branch Test(GE,SO) l0000000000474B81
	// succ:  l0000000000474B25 l0000000000474B81
l0000000000474B25:
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000474B81
	// succ:  l0000000000474B2B l0000000000474B81
l0000000000474B2B:
	rax = Mem0[r14:word64]
	r8d = CONVERT(bx, word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r14
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000474B87
	// succ:  l0000000000474B41 l0000000000474B87
l0000000000474B41:
	r12 = r12 + 2<64>
	SCZO = cond(r12)
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	r8 = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(r8 - Mem0[rsi + 0x18<64>:word64])
	Mem0[r12 - 2<64>:word16] = bx
	branch Test(UGE,C) l0000000000474BE2
	// succ:  l0000000000474B5D l0000000000474BE2
l0000000000474B5D:
	eax = CONVERT(Mem0[r8:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r8 = r8 + 2<64>
	SCZO = cond(r8)
	Mem0[rsi + 0x10<64>:word64] = r8
	// succ:  l0000000000474B69
l0000000000474B69:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000474BDB
	// succ:  l0000000000474B6F l0000000000474BDB
l0000000000474B6F:
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000474BD2
	// succ:  l0000000000474B79 l0000000000474BD2
l0000000000474B79:
	SCZO = cond(rdi - r13)
	ebx = CONVERT(Mem0[rax:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(LT,SO) l0000000000474B25
	// succ:  l0000000000474B81 l0000000000474B25
l0000000000474B81:
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000474C00
	// succ:  l0000000000474B87 l0000000000474C00
l0000000000474B87:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdi & rdi)
	C = false
	Mem0[r12:word16] = ax
	rax = Mem0[rbp + 0<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rbp + 0x10<64> + rdx:word64] = 0<64>
	branch Test(NE,Z) l0000000000474BC0
	// succ:  l0000000000474BA4 l0000000000474BC0
l0000000000474BA4:
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000474BA9
l0000000000474BA9:
	rcx = rbp
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	// succ:  l0000000000474BC0
l0000000000474BC0:
	rax = rbp
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000474A80_exit
l0000000000474BD2:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	// succ:  l0000000000474BDB
l0000000000474BDB:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000474B20
	// succ:  l0000000000474B20
l0000000000474BE2:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l0000000000474B69
	// succ:  l0000000000474B69
l0000000000474BF0:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000474B17
	// succ:  l0000000000474B17
l0000000000474C00:
	rax = Mem0[rbp + 0<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(rdi - 1<64>)
	Mem0[r12:word16] = dx
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rbp + 0x10<64> + rdx:word64] = 0<64>
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx & 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	goto l0000000000474BA9
	// succ:  l0000000000474BA9
fn0000000000474A80_exit:


// fn0000000000474CD0
// Return size: 8
define fn0000000000474CD0
fn0000000000474CD0_entry:
	rsp = fp
	// succ:  l0000000000474CD0
l0000000000474CD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x2F<64>
	rsi = rdx
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000474D00
	// succ:  l0000000000474CF3 l0000000000474D00
l0000000000474CF3:
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000474CD0_exit
l0000000000474D00:
	rax = Mem0[rbx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	r8 = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(r8 - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000474D60
	// succ:  l0000000000474D19 l0000000000474D60
l0000000000474D19:
	eax = CONVERT(Mem0[r8:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r8 = r8 + 2<64>
	SCZO = cond(r8)
	Mem0[rcx + 0x10<64>:word64] = r8
	// succ:  l0000000000474D25
l0000000000474D25:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000474D40
	// succ:  l0000000000474D2B l0000000000474D40
l0000000000474D2B:
	Mem0[rsi:word16] = ax
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000474CD0_exit
l0000000000474D40:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 6<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000474CD0_exit
l0000000000474D60:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l0000000000474D25
	// succ:  l0000000000474D25
fn0000000000474CD0_exit:


// fn0000000000474DE0
// Return size: 8
define fn0000000000474DE0
fn0000000000474DE0_entry:
	rsp = fp
	// succ:  l0000000000474DE0
l0000000000474DE0:
	rax = rcx
	rcx = Mem0[rcx:word64]
	r8 = rax
	r8 = r8 + Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(r8)
	v8 = Mem0[r8 + 0x18<64>:word32] | edx
	Mem0[r8 + 0x18<64>:word32] = v8
	SZO = cond(Mem0[r8 + 0x18<64>:word32])
	C = false
	return
	// succ:  fn0000000000474DE0_exit
fn0000000000474DE0_exit:


// fn0000000000474E00
// Return size: 8
define fn0000000000474E00
fn0000000000474E00_entry:
	rsp = fp
	// succ:  l0000000000474E00
l0000000000474E00:
	rax = rcx
	rcx = Mem0[rcx:word64]
	rdx = CONVERT(edx, word32, int64)
	rcx = Mem0[rcx - 0x18<64>:word64]
	Mem0[rax + 8<64> + rcx:word64] = rdx
	return
	// succ:  fn0000000000474E00_exit
fn0000000000474E00_exit:


// fn0000000000474E20
// Return size: 8
define fn0000000000474E20
fn0000000000474E20_entry:
	rsp = fp
	// succ:  l0000000000474E20
l0000000000474E20:
	rax = rcx
	rcx = Mem0[rcx:word64]
	edx = ~edx
	rdx = CONVERT(edx, word32, uint64)
	r8 = rax
	r8 = r8 + Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(r8)
	v9 = Mem0[r8 + 0x18<64>:word32] & edx
	Mem0[r8 + 0x18<64>:word32] = v9
	SZO = cond(Mem0[r8 + 0x18<64>:word32])
	C = false
	return
	// succ:  fn0000000000474E20_exit
fn0000000000474E20_exit:


// fn0000000000474E40
// Return size: 8
define fn0000000000474E40
fn0000000000474E40_entry:
	rsp = fp
	// succ:  l0000000000474E40
l0000000000474E40:
	rax = rcx
	rcx = Mem0[rcx:word64]
	rdx = CONVERT(edx, word32, int64)
	rcx = Mem0[rcx - 0x18<64>:word64]
	Mem0[rax + 0x10<64> + rcx:word64] = rdx
	return
	// succ:  fn0000000000474E40_exit
fn0000000000474E40_exit:


// fn0000000000474E60
// Return size: 8
define fn0000000000474E60
fn0000000000474E60_entry:
	rsp = fp
	// succ:  l0000000000474E60
l0000000000474E60:
	SCZO = cond(edx - 8<32>)
	rax = rcx
	branch Test(EQ,Z) l0000000000474E95
	// succ:  l0000000000474E68 l0000000000474E95
l0000000000474E68:
	SCZO = cond(edx - 0xA<32>)
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(EQ,Z) l0000000000474E7D
	// succ:  l0000000000474E72 l0000000000474E7D
l0000000000474E72:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	SCZO = cond(edx - 0x10<32>)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	ecx = ecx << 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	// succ:  l0000000000474E7D
l0000000000474E7D:
	rdx = Mem0[rax:word64]
	r8 = rax
	r8 = r8 + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(r8)
	edx = Mem0[r8 + 0x18<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xFFFFFFB5<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx | ecx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[r8 + 0x18<64>:word32] = edx
	return
	// succ:  fn0000000000474E60_exit
l0000000000474E95:
	ecx = 0x40<32>
	rcx = CONVERT(ecx, word32, uint64)
	goto l0000000000474E7D
	// succ:  l0000000000474E7D
fn0000000000474E60_exit:


// fn0000000000474EA0
// Return size: 8
define fn0000000000474EA0
fn0000000000474EA0_entry:
	rsp = fp
	// succ:  l0000000000474EA0
l0000000000474EA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rsi = rcx
	rbx = rcx
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	SCZO = cond(Mem0[rsi + 0xE2<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000474ED1
	// succ:  l0000000000474EBF l0000000000474ED1
l0000000000474EBF:
	rax = rbx
	Mem0[rsi + 0xE0<64>:word16] = di
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000474EA0_exit
l0000000000474ED1:
	rcx = Mem0[rsi + 0xF0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000474EF1
	// succ:  l0000000000474EDD l0000000000474EF1
l0000000000474EDD:
	rax = Mem0[rcx:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	Mem0[rsi + 0xE2<64>:byte] = 1<8>
	goto l0000000000474EBF
	// succ:  l0000000000474EBF
l0000000000474EF1:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000474EFF_thunk_fn0000000000474F00
l0000000000474EFF_thunk_fn0000000000474F00:
	call fn0000000000474F00 (retsize: 0;)
	return
	// succ:  fn0000000000474EA0_exit
fn0000000000474EA0_exit:


// fn0000000000474F00
// Return size: 8
define fn0000000000474F00
fn0000000000474F00_entry:
	rsp = fp
	// succ:  l0000000000474F00
l0000000000474F00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x138<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdi = rcx
	rcx = rsp + 0x2F<64>
	r13 = rdx
	rdx = rdi
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000474F60
	// succ:  l0000000000474F30 l0000000000474F60
l0000000000474F30:
	rax = Mem0[rdi:word64]
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000474F38
l0000000000474F38:
	rcx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	// succ:  l0000000000474F47
l0000000000474F47:
	rax = rdi
	rsp = rsp + 0x138<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000474F00_exit
l0000000000474F60:
	rax = Mem0[r13 + 0<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = r13
	r8 = Mem0[rax - 0x18<64>:word64]
	call fn000000000044A6C0 (retsize: 8;)
	rax = Mem0[rdi:word64]
	rdx = rdi
	r14 = rsp + 0x30<64>
	r12 = 0x1FFFFFFFFFFFFFFC<64>
	rcx = r14
	rdx = rdx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx)
	rax = Mem0[rdx + 0x10<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(LE,SZO) l0000000000474F9C
	// succ:  l0000000000474F98_1 l0000000000474F9C
l0000000000474F98_1:
	r12 = rax
	// succ:  l0000000000474F9C
l0000000000474F9C:
	rdx = rdx + 0xD0<64>
	SCZO = cond(rdx)
	call fn000000000046AE80 (retsize: 8;)
	rcx = r14
	call fn0000000000473020 (retsize: 8;)
	rcx = r14
	r15 = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[rdi:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rbx = Mem0[rdi + 0xE8<64> + rax:word64]
	rax = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000047519D
	// succ:  l0000000000474FD8 l000000000047519D
l0000000000474FD8:
	ebx = CONVERT(Mem0[rax:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000474FDB
l0000000000474FDB:
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(EQ,Z) l00000000004750C0
	// succ:  l0000000000474FE5 l00000000004750C0
l0000000000474FE5:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	// succ:  l0000000000474FF0
l0000000000474FF0:
	rax = Mem0[r15:word64]
	r8d = CONVERT(bx, word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r15
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000047507E
	// succ:  l0000000000475006 l000000000047507E
l0000000000475006:
	SCZO = cond(rbp - 0x80<64>)
	branch Test(EQ,Z) l00000000004750D0
	// succ:  l0000000000475013 l00000000004750D0
l0000000000475013:
	rax = rbp
	rbp = rbp + 1<64>
	SCZO = cond(rbp)
	// succ:  l000000000047501A
l000000000047501A:
	Mem0[rsp + 0x30<64> + rax * 2<64>:word16] = bx
	rax = Mem0[rdi:word64]
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	rax = Mem0[rax - 0x18<64>:word64]
	rbx = Mem0[rdi + 0xE8<64> + rax:word64]
	rdx = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000475110
	// succ:  l0000000000475040 l0000000000475110
l0000000000475040:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x10<64>:word64] = rdx
	// succ:  l000000000047504B
l000000000047504B:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l00000000004750F0
	// succ:  l0000000000475055 l00000000004750F0
l0000000000475055:
	rax = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000475135
	// succ:  l0000000000475063 l0000000000475135
l0000000000475063:
	ebx = CONVERT(Mem0[rax:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000475066
l0000000000475066:
	SCZO = cond(rsi - r12)
	branch Test(EQ,Z) l0000000000475100
	// succ:  l000000000047506F l0000000000475100
l000000000047506F:
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(NE,Z) l0000000000474FF0
	// succ:  l0000000000475079 l0000000000474FF0
l0000000000475079:
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l000000000047507E
l000000000047507E:
	r8 = rbp
	rdx = r14
	rcx = r13
	call fn0000000000449740 (retsize: 8;)
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000047517C
	// succ:  l0000000000475096 l000000000047517C
l0000000000475096:
	rax = Mem0[rdi:word64]
	SZO = cond(rsi & rsi)
	C = false
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rdi + 0x10<64> + rdx:word64] = 0<64>
	branch Test(NE,Z) l0000000000474F47
	// succ:  l00000000004750AF l0000000000474F47
l00000000004750AF:
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000474F38
	// succ:  l0000000000474F38
l00000000004750C0:
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l000000000047507E
	// succ:  l000000000047507E
l00000000004750D0:
	r8d = 0x80<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = r14
	rcx = r13
	call fn0000000000449740 (retsize: 8;)
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000047501A
	// succ:  l000000000047501A
l00000000004750F0:
	SCZO = cond(rsi - r12)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l0000000000475079
	// succ:  l00000000004750F7 l0000000000475079
l00000000004750F7:
	// succ:  l0000000000475100
l0000000000475100:
	rsi = r12
	goto l000000000047507E
	// succ:  l000000000047507E
l0000000000475110:
	rax = Mem0[rbx:word64]
	rcx = 0x0000000000425A30<p64>
	rax = Mem0[rax + 0x50<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000475164
	// succ:  l0000000000475123 l0000000000475164
l0000000000475123:
	rcx = Mem0[rbx + 0x40<64>:word64]
	call msvcrt.dll!getwc (retsize: 8;)
	Mem0[rbx + 0x48<64>:word16] = ax
	goto l000000000047504B
	// succ:  l000000000047504B
l0000000000475135:
	rax = Mem0[rbx:word64]
	rcx = 0x0000000000425CA0<p64>
	rax = Mem0[rax + 0x48<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000475170
	// succ:  l0000000000475148 l0000000000475170
l0000000000475148:
	rcx = Mem0[rbx + 0x40<64>:word64]
	call msvcrt.dll!getwc (retsize: 8;)
	rdx = Mem0[rbx + 0x40<64>:word64]
	ecx = CONVERT(ax, word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	call msvcrt.dll!ungetwc (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000475066
	// succ:  l0000000000475066
l0000000000475164:
	rcx = rbx
	call rax (retsize: 8;)
	goto l000000000047504B
	// succ:  l000000000047504B
l0000000000475170:
	rcx = rbx
	call rax (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000475066
	// succ:  l0000000000475066
l000000000047517C:
	rax = Mem0[rdi:word64]
	SCZO = cond(rsi - 1<64>)
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rdi + 0x10<64> + rdx:word64] = 0<64>
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx & 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	goto l0000000000474F38
	// succ:  l0000000000474F38
l000000000047519D:
	rax = Mem0[rbx:word64]
	rdx = 0x0000000000425CA0<p64>
	rax = Mem0[rax + 0x48<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000004751CC
	// succ:  l00000000004751B0 l00000000004751CC
l00000000004751B0:
	rcx = Mem0[rbx + 0x40<64>:word64]
	call msvcrt.dll!getwc (retsize: 8;)
	rdx = Mem0[rbx + 0x40<64>:word64]
	ecx = CONVERT(ax, word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	call msvcrt.dll!ungetwc (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000474FDB
	// succ:  l0000000000474FDB
l00000000004751CC:
	rcx = rbx
	call rax (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000474FDB
	// succ:  l0000000000474FDB
fn0000000000474F00_exit:


// fn0000000000475480
// Return size: 8
define fn0000000000475480
fn0000000000475480_entry:
	rsp = fp
	// succ:  l0000000000475480
l0000000000475480:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[rcx:word64]
	Mem0[rcx + 0x58<64>:word32] = 0<32>
	Mem0[rcx + 0x90<64>:byte] = 0<8>
	call fn00000000004558C0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rdx = Mem0[rax + 0x68<64>:word64]
	Mem0[rax + 0x79<64>:byte] = 0<8>
	Mem0[rax + 0x7A<64>:byte] = 0<8>
	Mem0[rax + 0x28<64>:word64] = 0<64>
	Mem0[rax + 0x20<64>:word64] = 0<64>
	Mem0[rax + 0x30<64>:word64] = 0<64>
	Mem0[rax + 8<64>:word64] = rdx
	Mem0[rax + 0x10<64>:word64] = rdx
	Mem0[rax + 0x18<64>:word64] = rdx
	edx = Mem0[rax + 0x5C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rax + 0x60<64>:word32] = edx
	Mem0[rax + 0x64<64>:word32] = edx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000475480_exit
fn0000000000475480_exit:


// fn00000000004754E0
// Return size: 8
define fn00000000004754E0
fn00000000004754E0_entry:
	rsp = fp
	// succ:  l00000000004754E0
l00000000004754E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[rcx:word64]
	Mem0[rcx + 0x58<64>:word32] = 0<32>
	Mem0[rcx + 0x90<64>:byte] = 0<8>
	call fn0000000000457600 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rdx = Mem0[rax + 0x68<64>:word64]
	Mem0[rax + 0x79<64>:byte] = 0<8>
	Mem0[rax + 0x7A<64>:byte] = 0<8>
	Mem0[rax + 0x28<64>:word64] = 0<64>
	Mem0[rax + 0x20<64>:word64] = 0<64>
	Mem0[rax + 0x30<64>:word64] = 0<64>
	Mem0[rax + 8<64>:word64] = rdx
	Mem0[rax + 0x10<64>:word64] = rdx
	Mem0[rax + 0x18<64>:word64] = rdx
	edx = Mem0[rax + 0x5C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rax + 0x60<64>:word32] = edx
	Mem0[rax + 0x64<64>:word32] = edx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004754E0_exit
fn00000000004754E0_exit:


// fn0000000000475540
// Return size: 0
define fn0000000000475540
fn0000000000475540_entry:
	rsp = fp
	// succ:  l0000000000475540
l0000000000475540:
	// succ:  l0000000000475540_thunk_fn0000000000475550
l0000000000475540_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000475540_exit
fn0000000000475540_exit:


// fn0000000000475550
// Return size: 0
define fn0000000000475550
fn0000000000475550_entry:
	rsp = fp
	// succ:  l0000000000475550
l0000000000475550:
	free(rcx)
	return
	// succ:  fn0000000000475550_exit
l0000000000475550:
fn0000000000475550_exit:


// fn0000000000475560
// Return size: 8
define fn0000000000475560
fn0000000000475560_entry:
	rsp = fp
	// succ:  l0000000000475560
l0000000000475560:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	call fn0000000000475590 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000475560_exit
fn0000000000475560_exit:


// fn0000000000475590
// Return size: 8
define fn0000000000475590
fn0000000000475590_entry:
	rsp = fp
	// succ:  l0000000000475590
l0000000000475590:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	rbx = rcx
	branch Test(NE,Z) l00000000004755A4
	// succ:  l00000000004755A0_1 l00000000004755A4
l00000000004755A0_1:
	rbx = rax
	// succ:  l00000000004755A4
l00000000004755A4:
	rcx = rbx
	rax = malloc(rcx)
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l00000000004755CA
	// succ:  l00000000004755B1 l00000000004755CA
l00000000004755B1:
	call fn000000000046FF60 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004755D0
	// succ:  l00000000004755BB l00000000004755D0
l00000000004755BB:
	call rax (retsize: 8;)
	rcx = rbx
	rax = malloc(rcx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004755B1
	// succ:  l00000000004755CA l00000000004755B1
l00000000004755CA:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000475590_exit
l00000000004755D0:
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rdx = Mem0[0x0000000000491E10<p64>:word64]
	r8 = 0x000000000046E160<p64>
	rcx = rax
	rdx = rdx + 0x10<64>
	SCZO = cond(rdx)
	Mem0[rax:word64] = rdx
	rdx = 0x0000000000493FC0<p64>
	call fn00000000004760B0 (retsize: 8;)
	// succ:  l00000000004755FF_thunk_fn0000000000475600
l00000000004755FF_thunk_fn0000000000475600:
	call fn0000000000475600 (retsize: 0;)
	return
	// succ:  fn0000000000475590_exit
fn0000000000475590_exit:


// fn0000000000475600
// Return size: 8
define fn0000000000475600
fn0000000000475600_entry:
	rsp = fp
	// succ:  l0000000000475600
l0000000000475600:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x18<64>:word64]
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000475600_exit
fn0000000000475600_exit:


// fn0000000000475620
// Return size: 0
define fn0000000000475620
fn0000000000475620_entry:
	rsp = fp
	// succ:  l0000000000475620
l0000000000475620:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ecx = 0x90<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = malloc(rcx)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l0000000000475650
	// succ:  l0000000000475638 l0000000000475650
l0000000000475638:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rdi = rbx
	ecx = 0x12<32>
	rcx = CONVERT(ecx, word32, uint64)
	// succ:  l0000000000475642
l0000000000475642:
	branch rcx == 0<64> l0000000000475645
	// succ:  l0000000000475642_1 l0000000000475645
l0000000000475642_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 8<i64>
	rcx = rcx - 1<64>
	goto l0000000000475642
	// succ:  l0000000000475642
l0000000000475645:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000475620_exit
l0000000000475650:
	rcx = 0x0000000000489A20<p64>
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004756DA
	// succ:  l0000000000475660 l00000000004756DA
l0000000000475660:
	rdx = Mem0[0x0000000000477360<p64>:word64]
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rax = rdx
	goto l000000000047567B
	// succ:  l000000000047567B
l0000000000475670:
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	rax = rax >>u 1<64>
	SCZO = cond(rax)
	SCZO = cond(ecx - 0x40<32>)
	branch Test(EQ,Z) l00000000004756C0
	// succ:  l000000000047567B l00000000004756C0
l000000000047567B:
	SZO = cond(al & 1<8>)
	C = false
	branch Test(NE,Z) l0000000000475670
	// succ:  l000000000047567F l0000000000475670
l000000000047567F:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rbx = rcx + rcx * 8<64>
	rax = rax << cl
	SCZO = cond(rax)
	rcx = 0x0000000000489A20<p64>
	rdx = rdx | rax
	SZO = cond(rdx)
	C = false
	rax = 0x0000000000487380<p64>
	rbx = rbx << 4<64>
	SCZO = cond(rbx)
	Mem0[0x0000000000477360<p64>:word64] = rdx
	rbx = rbx + rax
	SCZO = cond(rbx)
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000475638
	// succ:  l00000000004756B3 l0000000000475638
l00000000004756B3:
	call fn0000000000426270 (retsize: 8;)
	// succ:  l00000000004756C0
l00000000004756C0:
	call fn0000000000472D60 (retsize: 8;)
	// succ:  l00000000004756C5
l00000000004756C5:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(EQ,Z) l00000000004756D5
	// succ:  l00000000004756CE l00000000004756D5
l00000000004756CE:
	call fn00000000004115B0 (retsize: 8;)
	goto l00000000004756C5
	// succ:  l00000000004756C5
l00000000004756D5:
	call fn0000000000475910 (retsize: 8;)
	// succ:  l00000000004756DA
l00000000004756DA:
	call fn0000000000426240 (retsize: 8;)
	// succ:  l00000000004756DF_thunk_fn00000000004756E0
l00000000004756DF_thunk_fn00000000004756E0:
	call fn00000000004756E0 (retsize: 0;)
	return
	// succ:  fn0000000000475620_exit
fn0000000000475620_exit:


// fn00000000004756E0
// Return size: 0
define fn00000000004756E0
fn00000000004756E0_entry:
	rsp = fp
	// succ:  l00000000004756E0
l00000000004756E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0xA0<64>
	rcx = rsi
	rax = malloc(rcx)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l0000000000475720
	// succ:  l00000000004756FE l0000000000475720
l00000000004756FE:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rdi = rbx
	ecx = 0x14<32>
	rcx = CONVERT(ecx, word32, uint64)
	// succ:  l0000000000475708
l0000000000475708:
	branch rcx == 0<64> l000000000047570B
	// succ:  l0000000000475708_1 l000000000047570B
l0000000000475708_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 8<i64>
	rcx = rcx - 1<64>
	goto l0000000000475708
	// succ:  l0000000000475708
l000000000047570B:
	rax = rbx + 0xA0<64>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004756E0_exit
l0000000000475720:
	rcx = 0x0000000000489A20<p64>
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004757BA
	// succ:  l0000000000475734 l00000000004757BA
l0000000000475734:
	SCZO = cond(rsi - 0x400<64>)
	rdx = Mem0[0x0000000000477350<p64>:word64]
	branch Test(UGT,CZ) l00000000004757A0
	// succ:  l0000000000475744 l00000000004757A0
l0000000000475744:
	rax = rdx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	goto l000000000047575B
	// succ:  l000000000047575B
l0000000000475750:
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	rax = rax >>u 1<64>
	SCZO = cond(rax)
	SCZO = cond(ecx - 0x40<32>)
	branch Test(EQ,Z) l00000000004757A0
	// succ:  l000000000047575B l00000000004757A0
l000000000047575B:
	SZO = cond(al & 1<8>)
	C = false
	branch Test(NE,Z) l0000000000475750
	// succ:  l000000000047575F l0000000000475750
l000000000047575F:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rax = rax << cl
	SCZO = cond(rax)
	rcx = rcx << 0xA<64>
	SCZO = cond(rcx)
	rdx = rdx | rax
	SZO = cond(rdx)
	C = false
	rax = 0x0000000000477380<p64>
	Mem0[0x0000000000477350<p64>:word64] = rdx
	rbx = rcx + rax
	rcx = 0x0000000000489A20<p64>
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000000004756FE
	// succ:  l0000000000475794 l00000000004756FE
l0000000000475794:
	call fn0000000000426270 (retsize: 8;)
	// succ:  l00000000004757A0
l00000000004757A0:
	call fn0000000000472D60 (retsize: 8;)
	// succ:  l00000000004757A5
l00000000004757A5:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(EQ,Z) l00000000004757B5
	// succ:  l00000000004757AE l00000000004757B5
l00000000004757AE:
	call fn00000000004115B0 (retsize: 8;)
	goto l00000000004757A5
	// succ:  l00000000004757A5
l00000000004757B5:
	call fn0000000000475910 (retsize: 8;)
	// succ:  l00000000004757BA
l00000000004757BA:
	call fn0000000000426240 (retsize: 8;)
	// succ:  l00000000004757BF_thunk_fn00000000004757C0
l00000000004757BF_thunk_fn00000000004757C0:
	call fn00000000004757C0 (retsize: 0;)
	return
	// succ:  fn00000000004756E0_exit
fn00000000004756E0_exit:


// fn00000000004757C0
// Return size: 0
define fn00000000004757C0
fn00000000004757C0_entry:
	rsp = fp
	// succ:  l00000000004757C0
l00000000004757C0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[0x0000000000491DA0<p64>:word64]
	r8 = 0x000000000046C430<p64>
	rdx = rcx + 0x10<64>
	rcx = rax
	Mem0[rax:word64] = rdx
	rdx = 0x0000000000493E00<p64>
	call fn00000000004760B0 (retsize: 8;)
	// succ:  l00000000004757FF_thunk_fn0000000000475800
l00000000004757FF_thunk_fn0000000000475800:
	call fn0000000000475800 (retsize: 0;)
	return
	// succ:  fn00000000004757C0_exit
fn00000000004757C0_exit:


// fn0000000000475800
// Return size: 8
define fn0000000000475800
fn0000000000475800_entry:
	rsp = fp
	// succ:  l0000000000475800
l0000000000475800:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[0x0000000000491B70<p64>:word64]
	r8 = 0x0000000000452720<p64>
	rdx = rcx + 0x10<64>
	rcx = rax
	Mem0[rax:word64] = rdx
	rdx = 0x00000000004932A0<p64>
	call fn00000000004760B0 (retsize: 8;)
	// succ:  l000000000047583F_thunk_fn0000000000475840
l000000000047583F_thunk_fn0000000000475840:
	call fn0000000000475840 (retsize: 0;)
	return
	// succ:  fn0000000000475800_exit
fn0000000000475800_exit:


// fn0000000000475840
// Return size: 8
define fn0000000000475840
fn0000000000475840_entry:
	rsp = fp
	// succ:  l0000000000475840
l0000000000475840:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000475C50 (retsize: 8;)
	rdx = 0xB8B1AABCBCD4D500<64>
	rdx = rdx + Mem0[rbx:word64]
	SCZO = cond(rdx)
	rcx = Mem0[rax:word64]
	r8 = rbx - 0x50<64>
	SCZO = cond(rdx - 1<64>)
	branch Test(ULE,CZ) l0000000000475880
	// succ:  l0000000000475867 l0000000000475880
l0000000000475867:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l00000000004758BB
	// succ:  l000000000047586C l00000000004758BB
l000000000047586C:
	Mem0[rax:word64] = r8
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000475840_exit
l0000000000475880:
	edx = Mem0[rbx - 0x28<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	r9d = SLICE(rdx + 1<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	branch Test(SG,S) l00000000004758B0
	// succ:  l000000000047588B l00000000004758B0
l000000000047588B:
	Mem0[rbx - 0x28<64>:word32] = r9d
	v18 = Mem0[rax + 8<64>:word32] - 1<32>
	Mem0[rax + 8<64>:word32] = v18
	SCZO = cond(v18)
	SCZO = cond(rcx - r8)
	branch Test(EQ,Z) l000000000047589F
	// succ:  l0000000000475898 l000000000047589F
l0000000000475898:
	Mem0[rbx - 0x30<64>:word64] = rcx
	Mem0[rax:word64] = r8
	// succ:  l000000000047589F
l000000000047589F:
	rax = Mem0[rbx - 8<64>:word64]
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000475840_exit
l00000000004758B0:
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	r9d = r9d - edx
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	goto l000000000047588B
	// succ:  l000000000047588B
l00000000004758BB:
	call fn0000000000472D60 (retsize: 8;)
	// succ:  l00000000004758CF_thunk_fn00000000004758D0
l00000000004758CF_thunk_fn00000000004758D0:
	call fn00000000004758D0 (retsize: 0;)
	return
	// succ:  fn0000000000475840_exit
fn0000000000475840_exit:


// fn00000000004758D0
// Return size: 0
define fn00000000004758D0
fn00000000004758D0_entry:
	rsp = fp
	// succ:  l00000000004758D0
l00000000004758D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SZO = cond(rcx & rcx)
	C = false
	rbx = rcx
	branch Test(EQ,Z) l00000000004758F5
	// succ:  l00000000004758DD l00000000004758F5
l00000000004758DD:
	call fn0000000000475840 (retsize: 8;)
	rax = 0xB8B1AABCBCD4D500<64>
	rax = rax + Mem0[rbx:word64]
	SCZO = cond(rax)
	SCZO = cond(rax - 1<64>)
	branch Test(ULE,CZ) l00000000004758FA
	// succ:  l00000000004758F5 l00000000004758FA
l00000000004758F5:
	call fn0000000000472D60 (retsize: 8;)
	// succ:  l00000000004758FA
l00000000004758FA:
	rcx = Mem0[rbx - 0x38<64>:word64]
	call fn0000000000423AD0 (retsize: 8;)
	// succ:  l000000000047590F_thunk_fn0000000000475910
l000000000047590F_thunk_fn0000000000475910:
	call fn0000000000475910 (retsize: 0;)
	return
	// succ:  fn00000000004758D0_exit
fn00000000004758D0_exit:


// fn0000000000475910
// Return size: 0
define fn0000000000475910
fn0000000000475910_entry:
	rsp = fp
	// succ:  l0000000000475910
l0000000000475910:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x50<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx - 0x10<64>:word64]
	rcx = Mem0[rbx - 0x40<64>:word64]
	rbp = Mem0[rbx - 0x18<64>:word64]
	rsi = CONVERT(Mem0[rbx - 0x24<64>:word32], word32, int64)
	rdi = Mem0[rbx - 0x38<64>:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	call fn0000000000423B10 (retsize: 8;)
	rcx = rax
	call fn0000000000475840 (retsize: 8;)
	call fn0000000000475D50 (retsize: 8;)
	rax = Mem0[rax:word64]
	SZO = cond(Mem0[rax + 0x50<64>:byte] & 1<8>)
	C = false
	r12 = rax + 0x90<64>
	branch Test(EQ,Z) l0000000000475960
	// succ:  l000000000047595D l0000000000475960
l000000000047595D:
	r12 = Mem0[rax:word64]
	// succ:  l0000000000475960
l0000000000475960:
	rbx = rsp + 0x20<64>
	rdx = rbp
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rbx
	call fn0000000000423720 (retsize: 8;)
	rdx = Mem0[r12 - 0x90<64>:word64]
	r9 = rsi
	r8 = r12
	rcx = rbx
	call fn0000000000423810 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004759A6
	// succ:  l000000000047598C l00000000004759A6
l000000000047598C:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l00000000004759A6
l00000000004759A6:
	rdx = 0x0000000000493570<p64>
	r9 = rsi
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rbx
	call fn0000000000423810 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004759ED
	// succ:  l00000000004759BF l00000000004759ED
l00000000004759BF:
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rdx = Mem0[0x0000000000491BE0<p64>:word64]
	r8 = 0x0000000000455470<p64>
	rcx = rax
	rdx = rdx + 0x10<64>
	SCZO = cond(rdx)
	Mem0[rax:word64] = rdx
	rdx = 0x0000000000493570<p64>
	call fn00000000004760B0 (retsize: 8;)
	// succ:  l00000000004759ED
l00000000004759ED:
	rcx = rdi
	call fn0000000000423AD0 (retsize: 8;)
	// succ:  l00000000004759FF_thunk_fn0000000000475A00
l00000000004759FF_thunk_fn0000000000475A00:
	call fn0000000000475A00 (retsize: 0;)
	return
	// succ:  fn0000000000475910_exit
fn0000000000475910_exit:


// fn0000000000475A00
// Return size: 8
define fn0000000000475A00
fn0000000000475A00_entry:
	rsp = fp
	// succ:  l0000000000475A00
l0000000000475A00:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	call fn0000000000475C50 (retsize: 8;)
	rax = Mem0[rax:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000475A30
	// succ:  l0000000000475A11 l0000000000475A30
l0000000000475A11:
	SZO = cond(Mem0[rax + 0x50<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l0000000000475A20
	// succ:  l0000000000475A17 l0000000000475A20
l0000000000475A17:
	rax = Mem0[rax:word64]
	// succ:  l0000000000475A1A
l0000000000475A1A:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000475A00_exit
l0000000000475A20:
	rax = Mem0[rax:word64]
	rax = rax - 0x90<64>
	SCZO = cond(rax)
	goto l0000000000475A17
	// succ:  l0000000000475A17
l0000000000475A30:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000475A1A
	// succ:  l0000000000475A1A
fn0000000000475A00_exit:


// fn0000000000475A40
// Return size: 8
define fn0000000000475A40
fn0000000000475A40_entry:
	rsp = fp
	// succ:  l0000000000475A40
l0000000000475A40:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdx = 0x000000000048E1A0<p64>
	r8d = 0x1E<32>
	r8 = CONVERT(r8d, word32, uint64)
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	call write (retsize: 8;)
	call fn0000000000472D60 (retsize: 8;)
	// succ:  l0000000000475A6F_thunk_fn0000000000475A70
l0000000000475A6F_thunk_fn0000000000475A70:
	call fn0000000000475A70 (retsize: 0;)
	return
	// succ:  fn0000000000475A40_exit
fn0000000000475A40_exit:


// fn0000000000475A70
// Return size: 8
define fn0000000000475A70
fn0000000000475A70_entry:
	rsp = fp
	// succ:  l0000000000475A70
l0000000000475A70:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	call fn0000000000475D50 (retsize: 8;)
	rcx = Mem0[rax:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000475AA9
	// succ:  l0000000000475A81 l0000000000475AA9
l0000000000475A81:
	rdx = 0xB8B1AABCBCD4D500<64>
	rdx = rdx + Mem0[rcx + 0x50<64>:word64]
	SCZO = cond(rdx)
	SCZO = cond(rdx - 1<64>)
	branch Test(UGT,CZ) l0000000000475AB0
	// succ:  l0000000000475A95 l0000000000475AB0
l0000000000475A95:
	edx = Mem0[rcx + 0x28<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l0000000000475AC4
	// succ:  l0000000000475A9C l0000000000475AC4
l0000000000475A9C:
	edx = edx - 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	branch Test(EQ,Z) l0000000000475AD2
	// succ:  l0000000000475AA1 l0000000000475AD2
l0000000000475AA1:
	SCZO = cond(edx - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000475AE6
	// succ:  l0000000000475AA6 l0000000000475AE6
l0000000000475AA6:
	Mem0[rcx + 0x28<64>:word32] = edx
	// succ:  l0000000000475AA9
l0000000000475AA9:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000475A70_exit
l0000000000475AB0:
	rcx = rcx + 0x50<64>
	SCZO = cond(rcx)
	Mem0[rax:word64] = 0<64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	// succ:  l0000000000475ABF_thunk_fn00000000004116C0
l0000000000475ABF_thunk_fn00000000004116C0:
	call fn00000000004116C0 (retsize: 0;)
	return
	// succ:  fn0000000000475A70_exit
l0000000000475AC4:
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	branch Test(NE,Z) l0000000000475AA6
	// succ:  l0000000000475AC9 l0000000000475AA6
l0000000000475AC9:
	r8 = Mem0[rcx + 0x20<64>:word64]
	Mem0[rax:word64] = r8
	goto l0000000000475AA6
	// succ:  l0000000000475AA6
l0000000000475AD2:
	rdx = Mem0[rcx + 0x20<64>:word64]
	rcx = rcx + 0x50<64>
	SCZO = cond(rcx)
	Mem0[rax:word64] = rdx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	// succ:  l0000000000475AE1_thunk_fn00000000004116C0
l0000000000475AE1_thunk_fn00000000004116C0:
	call fn00000000004116C0 (retsize: 0;)
	return
	// succ:  fn0000000000475A70_exit
l0000000000475AE6:
	call fn0000000000472D60 (retsize: 8;)
	// succ:  l0000000000475AEF_thunk_fn0000000000475AF0
l0000000000475AEF_thunk_fn0000000000475AF0:
	call fn0000000000475AF0 (retsize: 0;)
	return
	// succ:  fn0000000000475A70_exit
fn0000000000475A70_exit:


// fn0000000000475AF0
// Return size: 8
define fn0000000000475AF0
fn0000000000475AF0_entry:
	rsp = fp
	// succ:  l0000000000475AF0
l0000000000475AF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000487380<p64>
	SCZO = cond(rcx - rax)
	branch Test(ULT,C) l0000000000475B0D
	// succ:  l0000000000475B01 l0000000000475B0D
l0000000000475B01:
	rdx = 0x0000000000489780<p64>
	SCZO = cond(rcx - rdx)
	branch Test(ULT,C) l0000000000475B20
	// succ:  l0000000000475B0D l0000000000475B20
l0000000000475B0D:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	free(rcx)
	return
	// succ:  fn0000000000475AF0_exit
l0000000000475B20:
	ecx = ecx - eax
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	rdx = 0xE38E38E38E38E38F<64>
	rax = rcx
	rcx = 0x0000000000489A20<p64>
	rdx_rax = rdx *u rax
	SCZO = cond(rdx_rax)
	rbx = rdx
	rbx = rbx >>u 7<64>
	SCZO = cond(rbx)
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000475B72
	// succ:  l0000000000475B49 l0000000000475B72
l0000000000475B49:
	ecx = ebx
	rcx = CONVERT(ecx, word32, uint64)
	rax = 0xFFFFFFFFFFFFFFFE<64>
	v16 = (rax & 1<64> << 0x40<8> - cl) != 0<64>
	rax = __rol(rax, cl)
	C = v16
	rcx = 0x0000000000489A20<p64>
	v17 = Mem0[0x0000000000477360<p64>:word64] & rax
	Mem0[0x0000000000477360<p64>:word64] = v17
	SZO = cond(Mem0[0x0000000000477360<p64>:word64])
	C = false
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000475B85
	// succ:  l0000000000475B6C l0000000000475B85
l0000000000475B6C:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000475AF0_exit
l0000000000475B72:
	call fn0000000000426240 (retsize: 8;)
	// succ:  l0000000000475B77
l0000000000475B77:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(EQ,Z) l0000000000475B8C
	// succ:  l0000000000475B80 l0000000000475B8C
l0000000000475B80:
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l0000000000475B85
l0000000000475B85:
	call fn0000000000426270 (retsize: 8;)
	goto l0000000000475B77
	// succ:  l0000000000475B77
l0000000000475B8C:
	call fn0000000000475910 (retsize: 8;)
	// succ:  l0000000000475B9F_thunk_fn0000000000475BA0
l0000000000475B9F_thunk_fn0000000000475BA0:
	call fn0000000000475BA0 (retsize: 0;)
	return
	// succ:  fn0000000000475AF0_exit
fn0000000000475AF0_exit:


// fn0000000000475BA0
// Return size: 8
define fn0000000000475BA0
fn0000000000475BA0_entry:
	rsp = fp
	// succ:  l0000000000475BA0
l0000000000475BA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000477380<p64>
	SCZO = cond(rcx - rax)
	branch Test(ULT,C) l0000000000475BBD
	// succ:  l0000000000475BB1 l0000000000475BBD
l0000000000475BB1:
	rdx = 0x0000000000487380<p64>
	SCZO = cond(rcx - rdx)
	branch Test(ULT,C) l0000000000475BD0
	// succ:  l0000000000475BBD l0000000000475BD0
l0000000000475BBD:
	rcx = rcx - 0xA0<64>
	SCZO = cond(rcx)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	free(rcx)
	return
	// succ:  fn0000000000475BA0_exit
l0000000000475BD0:
	rbx = rcx
	rcx = 0x0000000000489A20<p64>
	rbx = rbx - rax
	SCZO = cond(rbx)
	ebx = ebx >>u 0xA<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000475C12
	// succ:  l0000000000475BE9 l0000000000475C12
l0000000000475BE9:
	ecx = ebx
	rcx = CONVERT(ecx, word32, uint64)
	rax = 0xFFFFFFFFFFFFFFFE<64>
	v15 = (rax & 1<64> << 0x40<8> - cl) != 0<64>
	rax = __rol(rax, cl)
	C = v15
	rcx = 0x0000000000489A20<p64>
	v16 = Mem0[0x0000000000477350<p64>:word64] & rax
	Mem0[0x0000000000477350<p64>:word64] = v16
	SZO = cond(Mem0[0x0000000000477350<p64>:word64])
	C = false
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000475C25
	// succ:  l0000000000475C0C l0000000000475C25
l0000000000475C0C:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000475BA0_exit
l0000000000475C12:
	call fn0000000000426240 (retsize: 8;)
	// succ:  l0000000000475C17
l0000000000475C17:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(EQ,Z) l0000000000475C2C
	// succ:  l0000000000475C20 l0000000000475C2C
l0000000000475C20:
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l0000000000475C25
l0000000000475C25:
	call fn0000000000426270 (retsize: 8;)
	goto l0000000000475C17
	// succ:  l0000000000475C17
l0000000000475C2C:
	call fn0000000000475910 (retsize: 8;)
	// succ:  l0000000000475C3F_thunk_fn0000000000475C40
l0000000000475C3F_thunk_fn0000000000475C40:
	call fn0000000000475C40 (retsize: 0;)
	return
	// succ:  fn0000000000475BA0_exit
fn0000000000475BA0_exit:


// fn0000000000475C40
// Return size: 8
define fn0000000000475C40
fn0000000000475C40_entry:
	rsp = fp
	// succ:  l0000000000475C40
l0000000000475C40:
	rax = Mem0[rcx - 8<64>:word64]
	return
	// succ:  fn0000000000475C40_exit
fn0000000000475C40_exit:


// fn0000000000475C50
// Return size: 8
define fn0000000000475C50
fn0000000000475C50_entry:
	rsp = fp
	// succ:  l0000000000475C50
l0000000000475C50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[0x000000000048C0E0<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000475CF0
	// succ:  l0000000000475C65 l0000000000475CF0
l0000000000475C65:
	SCZO = cond(Mem0[rax + 4<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000475C83
	// succ:  l0000000000475C6B l0000000000475C83
l0000000000475C6B:
	ecx = Mem0[rax:word32]
	rcx = CONVERT(ecx, word32, uint64)
	call fn000000000041E810 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l0000000000475CB0
	// succ:  l0000000000475C7A l0000000000475CB0
l0000000000475C7A:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000475C50_exit
l0000000000475C83:
	rbx = Mem0[0x000000000048C0D0<p64>:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l0000000000475C7A
	// succ:  l0000000000475C8F l0000000000475C7A
l0000000000475C8F:
	rcx = 0x000000000048D7B0<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 0x10<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn00000000004117B0 (retsize: 8;)
	rbx = rax
	Mem0[0x000000000048C0D0<p64>:word64] = rax
	goto l0000000000475C7A
	// succ:  l0000000000475C7A
l0000000000475CB0:
	ecx = 0x10<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = malloc(rcx)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l0000000000475D14
	// succ:  l0000000000475CC2 l0000000000475D14
l0000000000475CC2:
	rax = Mem0[0x000000000048C0E0<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000475D19
	// succ:  l0000000000475CCE l0000000000475D19
l0000000000475CCE:
	ecx = Mem0[rax:word32]
	rcx = CONVERT(ecx, word32, uint64)
	rdx = rbx
	call fn000000000041E880 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000475D14
	// succ:  l0000000000475CDC l0000000000475D14
l0000000000475CDC:
	Mem0[rbx:word64] = 0<64>
	Mem0[rbx + 8<64>:word32] = 0<32>
	goto l0000000000475C7A
	// succ:  l0000000000475C7A
l0000000000475CF0:
	r8 = 0x0000000000476300<p64>
	rcx = 0x000000000048D7BB<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn00000000004117B0 (retsize: 8;)
	Mem0[0x000000000048C0E0<p64>:word64] = rax
	goto l0000000000475C65
	// succ:  l0000000000475C65
l0000000000475D14:
	call fn0000000000472D60 (retsize: 8;)
	// succ:  l0000000000475D19
l0000000000475D19:
	r8 = 0x0000000000476300<p64>
	rcx = 0x000000000048D7BB<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn00000000004117B0 (retsize: 8;)
	Mem0[0x000000000048C0E0<p64>:word64] = rax
	goto l0000000000475CCE
	// succ:  l0000000000475CCE
fn0000000000475C50_exit:


// fn0000000000475D50
// Return size: 8
define fn0000000000475D50
fn0000000000475D50_entry:
	rsp = fp
	// succ:  l0000000000475D50
l0000000000475D50:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x000000000048C0E0<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000475DA0
	// succ:  l0000000000475D60 l0000000000475DA0
l0000000000475D60:
	SCZO = cond(Mem0[rax + 4<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000475D73
	// succ:  l0000000000475D66 l0000000000475D73
l0000000000475D66:
	ecx = Mem0[rax:word32]
	rcx = CONVERT(ecx, word32, uint64)
	call fn000000000041E810 (retsize: 8;)
	// succ:  l0000000000475D6E
l0000000000475D6E:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000475D50_exit
l0000000000475D73:
	rax = Mem0[0x000000000048C0D0<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l0000000000475D6E
	// succ:  l0000000000475D7F l0000000000475D6E
l0000000000475D7F:
	rcx = 0x000000000048D7B0<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 0x10<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn00000000004117B0 (retsize: 8;)
	Mem0[0x000000000048C0D0<p64>:word64] = rax
	goto l0000000000475D6E
	// succ:  l0000000000475D6E
l0000000000475DA0:
	r8 = 0x0000000000476300<p64>
	rcx = 0x000000000048D7BB<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn00000000004117B0 (retsize: 8;)
	Mem0[0x000000000048C0E0<p64>:word64] = rax
	goto l0000000000475D60
	// succ:  l0000000000475D60
fn0000000000475D50_exit:


// fn0000000000475DE0
// Return size: 8
define fn0000000000475DE0
fn0000000000475DE0_entry:
	rsp = fp
	// succ:  l0000000000475DE0
l0000000000475DE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdx = 0x0000000000424380<p64>
	rbx = rcx
	rcx = 0x000000000048C060<p64>
	call fn000000000041DEE0 (retsize: 8;)
	rcx = Mem0[0x000000000048AA60<p64>:word64]
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000475E4A
	// succ:  l0000000000475E0C l0000000000475E4A
l0000000000475E0C:
	rdx = 0x0000000000424360<p64>
	rcx = 0x000000000048C040<p64>
	Mem0[rbx + 1<64>:byte] = 0<8>
	call fn000000000041DEE0 (retsize: 8;)
	rcx = Mem0[0x000000000048AA50<p64>:word64]
	call fn00000000004218B0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000475E5D
	// succ:  l0000000000475E33 l0000000000475E5D
l0000000000475E33:
	rcx = Mem0[0x000000000048AA60<p64>:word64]
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000475E75
	// succ:  l0000000000475E43 l0000000000475E75
l0000000000475E43:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000475DE0_exit
l0000000000475E4A:
	call fn0000000000426240 (retsize: 8;)
	rcx = rax
	// succ:  l0000000000475E52
l0000000000475E52:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	branch Test(EQ,Z) l0000000000475E7A
	// succ:  l0000000000475E58 l0000000000475E7A
l0000000000475E58:
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l0000000000475E5D
l0000000000475E5D:
	call fn00000000004262A0 (retsize: 8;)
	rbx = rax
	rsi = rdx
	call fn0000000000476590 (retsize: 8;)
	rcx = rbx
	rdx = rsi
	goto l0000000000475E52
	// succ:  l0000000000475E52
l0000000000475E75:
	call fn0000000000426270 (retsize: 8;)
	// succ:  l0000000000475E7A
l0000000000475E7A:
	call fn0000000000475910 (retsize: 8;)
	// succ:  l0000000000475E7F_thunk_fn0000000000475E80
l0000000000475E7F_thunk_fn0000000000475E80:
	call fn0000000000475E80 (retsize: 0;)
	return
	// succ:  fn0000000000475DE0_exit
fn0000000000475DE0_exit:


// fn0000000000475E80
// Return size: 8
define fn0000000000475E80
fn0000000000475E80_entry:
	rsp = fp
	// succ:  l0000000000475E80
l0000000000475E80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = CONVERT(Mem0[rcx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000475EA0
	// succ:  l0000000000475E90 l0000000000475EA0
l0000000000475E90:
	eax = edi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000475E80_exit
l0000000000475EA0:
	rdx = 0x0000000000424380<p64>
	rbx = rcx
	rcx = 0x000000000048C060<p64>
	call fn000000000041DEE0 (retsize: 8;)
	rcx = Mem0[0x000000000048AA60<p64>:word64]
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	branch Test(EQ,Z) l0000000000475F16
	// succ:  l0000000000475EC8 l0000000000475F16
l0000000000475EC8:
	goto l0000000000475F79
	// succ:  l0000000000475F79
l0000000000475ED0:
	SCZO = cond(Mem0[rbx + 1<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000475F34
	// succ:  l0000000000475ED6 l0000000000475F34
l0000000000475ED6:
	rdx = 0x0000000000424380<p64>
	rcx = 0x000000000048C060<p64>
	call fn000000000041DEE0 (retsize: 8;)
	rdx = 0x0000000000424360<p64>
	rcx = 0x000000000048C040<p64>
	rsi = Mem0[0x000000000048AA60<p64>:word64]
	call fn000000000041DEE0 (retsize: 8;)
	rcx = Mem0[0x000000000048AA50<p64>:word64]
	rdx = rsi
	call fn00000000004219D0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000475F3F
	// succ:  l0000000000475F16 l0000000000475F3F
l0000000000475F16:
	SCZO = cond(Mem0[rbx:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000475ED0
	// succ:  l0000000000475F1B l0000000000475ED0
l0000000000475F1B:
	rcx = Mem0[0x000000000048AA60<p64>:word64]
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000475E90
	// succ:  l0000000000475F2F l0000000000475E90
l0000000000475F2F:
	call fn0000000000426270 (retsize: 8;)
	// succ:  l0000000000475F34
l0000000000475F34:
	Mem0[rbx + 1<64>:byte] = 1<8>
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	goto l0000000000475F1B
	// succ:  l0000000000475F1B
l0000000000475F3F:
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	rdi = 0x0000000000495E50<p64>
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = 0x0000000000425E90<p64>
	rdx = 0x0000000000493140<p64>
	Mem0[rax:word64] = rdi
	rcx = rax
	call fn00000000004760B0 (retsize: 8;)
	rbx = rax
	call fn0000000000476590 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l0000000000475F79
l0000000000475F79:
	call fn0000000000426240 (retsize: 8;)
	// succ:  l0000000000475F7F_thunk_fn0000000000475F80
l0000000000475F7F_thunk_fn0000000000475F80:
	call fn0000000000475F80 (retsize: 0;)
	return
	// succ:  fn0000000000475E80_exit
fn0000000000475E80_exit:


// fn0000000000475F80
// Return size: 8
define fn0000000000475F80
fn0000000000475F80_entry:
	rsp = fp
	// succ:  l0000000000475F80
l0000000000475F80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdx = 0x0000000000424380<p64>
	rbx = rcx
	rcx = 0x000000000048C060<p64>
	call fn000000000041DEE0 (retsize: 8;)
	rcx = Mem0[0x000000000048AA60<p64>:word64]
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000475FED
	// succ:  l0000000000475FAC l0000000000475FED
l0000000000475FAC:
	Mem0[rbx + 1<64>:byte] = 0<8>
	rdx = 0x0000000000424360<p64>
	rcx = 0x000000000048C040<p64>
	Mem0[rbx:byte] = 1<8>
	call fn000000000041DEE0 (retsize: 8;)
	rcx = Mem0[0x000000000048AA50<p64>:word64]
	call fn00000000004218B0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000476000
	// succ:  l0000000000475FD6 l0000000000476000
l0000000000475FD6:
	rcx = Mem0[0x000000000048AA60<p64>:word64]
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000476018
	// succ:  l0000000000475FE6 l0000000000476018
l0000000000475FE6:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000475F80_exit
l0000000000475FED:
	call fn0000000000426240 (retsize: 8;)
	rcx = rax
	// succ:  l0000000000475FF5
l0000000000475FF5:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	branch Test(EQ,Z) l000000000047601D
	// succ:  l0000000000475FFB l000000000047601D
l0000000000475FFB:
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l0000000000476000
l0000000000476000:
	call fn00000000004262A0 (retsize: 8;)
	rbx = rax
	rsi = rdx
	call fn0000000000476590 (retsize: 8;)
	rcx = rbx
	rdx = rsi
	goto l0000000000475FF5
	// succ:  l0000000000475FF5
l0000000000476018:
	call fn0000000000426270 (retsize: 8;)
	// succ:  l000000000047601D
l000000000047601D:
	call fn0000000000475910 (retsize: 8;)
	// succ:  l000000000047602F_thunk_fn0000000000476030
l000000000047602F_thunk_fn0000000000476030:
	call fn0000000000476030 (retsize: 0;)
	return
	// succ:  fn0000000000475F80_exit
fn0000000000475F80_exit:


// fn0000000000476030
// Return size: 0
define fn0000000000476030
fn0000000000476030_entry:
	rsp = fp
	// succ:  l0000000000476030
l0000000000476030:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdx = 0x000000000048E180<p64>
	r8d = 0x1B<32>
	r8 = CONVERT(r8d, word32, uint64)
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	call write (retsize: 8;)
	call fn0000000000472D60 (retsize: 8;)
	// succ:  l000000000047605F_thunk_fn0000000000476060
l000000000047605F_thunk_fn0000000000476060:
	call fn0000000000476060 (retsize: 0;)
	return
	// succ:  fn0000000000476030_exit
fn0000000000476030_exit:


// fn0000000000476060
// Return size: 0
define fn0000000000476060
fn0000000000476060_entry:
	rsp = fp
	// succ:  l0000000000476060
l0000000000476060:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	call fn0000000000475C50 (retsize: 8;)
	rcx = Mem0[rax:word64]
	v7 = Mem0[rax + 8<64>:word32] + 1<32>
	Mem0[rax + 8<64>:word32] = v7
	SCZO = cond(v7)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004760A5
	// succ:  l0000000000476076 l00000000004760A5
l0000000000476076:
	rdx = 0xB8B1AABCBCD4D500<64>
	rdx = rdx + Mem0[rcx + 0x50<64>:word64]
	SCZO = cond(rdx)
	SCZO = cond(rdx - 1<64>)
	branch Test(ULE,CZ) l00000000004760AA
	// succ:  l000000000047608A l00000000004760AA
l000000000047608A:
	Mem0[rax:word64] = 0<64>
	// succ:  l0000000000476091
l0000000000476091:
	rbx = rcx + 0x50<64>
	rcx = rbx
	call fn0000000000411660 (retsize: 8;)
	rcx = rbx
	call fn0000000000475840 (retsize: 8;)
	// succ:  l00000000004760A5
l00000000004760A5:
	call fn0000000000472D60 (retsize: 8;)
	// succ:  l00000000004760AA
l00000000004760AA:
	v13 = -Mem0[rcx + 0x28<64>:word32]
	Mem0[rcx + 0x28<64>:word32] = v13
	SCZO = cond(v13)
	C = v13 == 0<32>
	goto l0000000000476091
	// succ:  l0000000000476091
fn0000000000476060_exit:


// fn00000000004760B0
// Return size: 0
define fn00000000004760B0
fn00000000004760B0_entry:
	rsp = fp
	// succ:  l00000000004760B0
l00000000004760B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rdi = rdx
	rsi = r8
	call fn0000000000475C50 (retsize: 8;)
	v11 = Mem0[rax + 8<64>:word32] + 1<32>
	Mem0[rax + 8<64>:word32] = v11
	SCZO = cond(v11)
	Mem0[rbx - 0xA0<64>:word32] = 1<32>
	rbx = rbx - 0x40<64>
	SCZO = cond(rbx)
	Mem0[rbx - 0x50<64>:word64] = rdi
	Mem0[rbx - 0x48<64>:word64] = rsi
	call fn000000000046FE70 (retsize: 8;)
	Mem0[rbx - 0x40<64>:word64] = rax
	call fn000000000046F760 (retsize: 8;)
	Mem0[rbx - 0x38<64>:word64] = rax
	rax = 0x474E5543432B2B00<64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000423900<p64>
	Mem0[rbx + 8<64>:word64] = rax
	rcx = rbx
	call fn0000000000411550 (retsize: 8;)
	rcx = rbx
	call fn0000000000475840 (retsize: 8;)
	call fn0000000000472D60 (retsize: 8;)
	// succ:  l000000000047611F_thunk_fn0000000000476120
l000000000047611F_thunk_fn0000000000476120:
	call fn0000000000476120 (retsize: 0;)
	return
	// succ:  fn00000000004760B0_exit
fn00000000004760B0_exit:


// fn0000000000476120
// Return size: 8
define fn0000000000476120
fn0000000000476120_entry:
	rsp = fp
	// succ:  l0000000000476120
l0000000000476120:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[0x0000000000491C70<p64>:word64]
	r8 = 0x0000000000465090<p64>
	rdx = rcx + 0x10<64>
	rcx = rax
	Mem0[rax:word64] = rdx
	rdx = 0x00000000004939D0<p64>
	call fn00000000004760B0 (retsize: 8;)
	// succ:  l000000000047615F_thunk_fn0000000000476160
l000000000047615F_thunk_fn0000000000476160:
	call fn0000000000476160 (retsize: 0;)
	return
	// succ:  fn0000000000476120_exit
fn0000000000476120_exit:


// fn0000000000476160
// Return size: 8
define fn0000000000476160
fn0000000000476160_entry:
	rsp = fp
	// succ:  l0000000000476160
l0000000000476160:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[0x0000000000491CF0<p64>:word64]
	r8 = 0x00000000004688C0<p64>
	rdx = rcx + 0x10<64>
	rcx = rax
	Mem0[rax:word64] = rdx
	rdx = 0x0000000000493B70<p64>
	call fn00000000004760B0 (retsize: 8;)
	// succ:  l000000000047619F_thunk_fn00000000004761A0
l000000000047619F_thunk_fn00000000004761A0:
	call fn00000000004761A0 (retsize: 0;)
	return
	// succ:  fn0000000000476160_exit
fn0000000000476160_exit:


// fn00000000004761A0
// Return size: 8
define fn00000000004761A0
fn00000000004761A0_entry:
	rsp = fp
	// succ:  l00000000004761A0
l00000000004761A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x68<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rbp = rdx
	rdx = rcx
	rsi = r8
	r8 = rsp + 0x40<64>
	rdi = r9
	rcx = Mem0[rax - 8<64>:word64]
	rdx = rdx + Mem0[rax - 0x10<64>:word64]
	SCZO = cond(rdx)
	r9 = rsi
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x48<64>:word32] = 0<32>
	Mem0[rsp + 0x4C<64>:word32] = 0<32>
	Mem0[rsp + 0x50<64>:word32] = 0<32>
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x54<64>:word32] = 0x10<32>
	Mem0[rsp + 0x38<64>:word64] = r8
	Mem0[rsp + 0x20<64>:word64] = rdx
	r8d = 6<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x30<64>:word64] = rbx
	Mem0[rsp + 0x28<64>:word64] = rbp
	rdx = rdi
	call Mem0[rax + 0x38<64>:word64] (retsize: 8;)
	r8 = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l0000000000476253
	// succ:  l0000000000476220 l0000000000476253
l0000000000476220:
	edx = Mem0[rsp + 0x50<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx & 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	SCZO = cond(ecx - 6<32>)
	branch Test(EQ,Z) l0000000000476290
	// succ:  l000000000047622E l0000000000476290
l000000000047622E:
	r10d = Mem0[rsp + 0x4C<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	r11d = Mem0[rsp + 0x48<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	r11d = r11d & r10d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	r11d = r11d & 6<32>
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	SCZO = cond(r11d - 6<32>)
	branch Test(EQ,Z) l0000000000476290
	// succ:  l0000000000476245 l0000000000476290
l0000000000476245:
	r10d = r10d & 5<32>
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	SCZO = cond(r10d - 4<32>)
	branch Test(EQ,Z) l0000000000476253
	// succ:  l000000000047624F l0000000000476253
l000000000047624F:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l00000000004762A0
	// succ:  l0000000000476253 l00000000004762A0
l0000000000476253:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000476255
l0000000000476255:
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004761A0_exit
l0000000000476260:
	SCZO = cond(rdi - 0xFFFFFFFFFFFFFFFE<64>)
	branch Test(EQ,Z) l0000000000476253
	// succ:  l0000000000476266 l0000000000476253
l0000000000476266:
	r10 = Mem0[rsi:word64]
	Mem0[rsp + 0x20<64>:word64] = rbx
	r9 = rbp
	rdx = rdi
	rcx = rsi
	call Mem0[r10 + 0x40<64>:word64] (retsize: 8;)
	eax = eax & 6<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 6<32>)
	branch Test(NE,Z) l0000000000476253
	// succ:  l0000000000476283 l0000000000476253
l0000000000476283:
	r8 = Mem0[rsp + 0x40<64>:word64]
	// succ:  l0000000000476290
l0000000000476290:
	rax = r8
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004761A0_exit
l00000000004762A0:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(SG,S) l0000000000476260
	// succ:  l00000000004762A5 l0000000000476260
l00000000004762A5:
	rdi = rdi + r8
	SCZO = cond(rdi)
	SCZO = cond(rbx - rdi)
	branch Test(EQ,Z) l0000000000476290
	// succ:  l00000000004762AD l0000000000476290
l00000000004762AD:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000476255
	// succ:  l0000000000476255
fn00000000004761A0_exit:


// fn00000000004762C0
// Return size: 8
define fn00000000004762C0
fn00000000004762C0_entry:
	rsp = fp
	// succ:  l00000000004762C0
l00000000004762C0:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = 0x0000000000423C60<p64>
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000411340 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004762C0_exit
fn00000000004762C0_exit:


// fn00000000004762E0
// Return size: 8
define fn00000000004762E0
fn00000000004762E0_entry:
	rsp = fp
	// succ:  l00000000004762E0
l00000000004762E0:
	rax = Mem0[0x00000000004916D0<p64>:word64]
	Mem0[rcx:word64] = rax
	return
	// succ:  fn00000000004762E0_exit
fn00000000004762E0_exit:


// fn00000000004762F0
// Return size: 8
define fn00000000004762F0
fn00000000004762F0_entry:
	rsp = fp
	// succ:  l00000000004762F0
l00000000004762F0:
	rax = Mem0[0x0000000000491B20<p64>:word64]
	Mem0[rcx:word64] = rax
	return
	// succ:  fn00000000004762F0_exit
fn00000000004762F0_exit:


// fn0000000000476300
// Return size: 8
define fn0000000000476300
fn0000000000476300_entry:
	rsp = fp
	// succ:  l0000000000476300
l0000000000476300:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rdx = 0x00000000004235E0<p64>
	rbx = rcx
	rcx = rsp + 0x20<64>
	Mem0[rsp + 0x24<64>:byte] = 0<8>
	call fn000000000041E000 (retsize: 8;)
	edx = Mem0[rsp + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	Mem0[rbx + 4<64>:byte] = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rbx:word32] = edx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000476300_exit
fn0000000000476300_exit:


// fn0000000000476330
// Return size: 8
define fn0000000000476330
fn0000000000476330_entry:
	rsp = fp
	// succ:  l0000000000476330
l0000000000476330:
	rcx = 0x0000000000489A20<p64>
	// succ:  l0000000000476337_thunk_fn0000000000420B50
l0000000000476337_thunk_fn0000000000420B50:
	call fn0000000000420B50 (retsize: 0;)
	return
	// succ:  fn0000000000476330_exit
fn0000000000476330_exit:


// fn0000000000476340
// Return size: 8
define fn0000000000476340
fn0000000000476340_entry:
	rsp = fp
	// succ:  l0000000000476340
l0000000000476340:
	rcx = 0x000000000048C070<p64>
	// succ:  l0000000000476347_thunk_fn0000000000420B50
l0000000000476347_thunk_fn0000000000420B50:
	call fn0000000000420B50 (retsize: 0;)
	return
	// succ:  fn0000000000476340_exit
fn0000000000476340_exit:


// fn0000000000476350
// Return size: 8
define fn0000000000476350
fn0000000000476350_entry:
	rsp = fp
	// succ:  l0000000000476350
l0000000000476350:
	rcx = 0x000000000048C050<p64>
	// succ:  l0000000000476357_thunk_fn0000000000420B50
l0000000000476357_thunk_fn0000000000420B50:
	call fn0000000000420B50 (retsize: 0;)
	return
	// succ:  fn0000000000476350_exit
fn0000000000476350_exit:


// fn0000000000476360
// Return size: 8
define fn0000000000476360
fn0000000000476360_entry:
	rsp = fp
	// succ:  l0000000000476360
l0000000000476360:
	return
	// succ:  fn0000000000476360_exit
fn0000000000476360_exit:


// fn0000000000476370
// Return size: 8
define fn0000000000476370
fn0000000000476370_entry:
	rsp = fp
	// succ:  l0000000000476370
l0000000000476370:
	rax = 0x0000000000495A90<p64>
	rcx = 0x000000000048C080<p64>
	Mem0[0x000000000048C080<p64>:word64] = rax
	// succ:  l0000000000476385_thunk_fn00000000004620B0
l0000000000476385_thunk_fn00000000004620B0:
	call fn00000000004620B0 (retsize: 0;)
	return
	// succ:  fn0000000000476370_exit
fn0000000000476370_exit:


// fn0000000000476390
// Return size: 8
define fn0000000000476390
fn0000000000476390_entry:
	rsp = fp
	// succ:  l0000000000476390
l0000000000476390:
	return
	// succ:  fn0000000000476390_exit
fn0000000000476390_exit:


// fn00000000004763A0
// Return size: 0
define fn00000000004763A0
fn00000000004763A0_entry:
	rsp = fp
	// succ:  l00000000004763A0
l00000000004763A0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = 0x0000000000489A20<p64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn0000000000420360 (retsize: 8;)
	rcx = 0x0000000000476330<p64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	// succ:  l00000000004763BD_thunk_fn0000000000410BF0
l00000000004763BD_thunk_fn0000000000410BF0:
	call fn0000000000410BF0 (retsize: 0;)
	return
	// succ:  fn00000000004763A0_exit
fn00000000004763A0_exit:


// fn00000000004763D0
// Return size: 8
define fn00000000004763D0
fn00000000004763D0_entry:
	rsp = fp
	// succ:  l00000000004763D0
l00000000004763D0:
	SCZO = cond(Mem0[0x00000000004771C0<p64>:byte] - 0<8>)
	branch Test(NE,Z) l00000000004763E0
	// succ:  l00000000004763D9 l00000000004763E0
l00000000004763D9:
	Mem0[0x00000000004771C0<p64>:byte] = 1<8>
	// succ:  l00000000004763E0
l00000000004763E0:
	SCZO = cond(Mem0[0x00000000004771D0<p64>:byte] - 0<8>)
	branch Test(NE,Z) l00000000004763F0
	// succ:  l00000000004763E9 l00000000004763F0
l00000000004763E9:
	Mem0[0x00000000004771D0<p64>:byte] = 1<8>
	// succ:  l00000000004763F0
l00000000004763F0:
	SCZO = cond(Mem0[0x00000000004772F0<p64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000476400
	// succ:  l00000000004763F9 l0000000000476400
l00000000004763F9:
	Mem0[0x00000000004772F0<p64>:byte] = 1<8>
	// succ:  l0000000000476400
l0000000000476400:
	SCZO = cond(Mem0[0x0000000000477310<p64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000476410
	// succ:  l0000000000476409 l0000000000476410
l0000000000476409:
	Mem0[0x0000000000477310<p64>:byte] = 1<8>
	// succ:  l0000000000476410
l0000000000476410:
	SCZO = cond(Mem0[0x0000000000477290<p64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000476420
	// succ:  l0000000000476419 l0000000000476420
l0000000000476419:
	Mem0[0x0000000000477290<p64>:byte] = 1<8>
	// succ:  l0000000000476420
l0000000000476420:
	SCZO = cond(Mem0[0x0000000000477230<p64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000476430
	// succ:  l0000000000476429 l0000000000476430
l0000000000476429:
	Mem0[0x0000000000477230<p64>:byte] = 1<8>
	// succ:  l0000000000476430
l0000000000476430:
	SCZO = cond(Mem0[0x0000000000477250<p64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000476440
	// succ:  l0000000000476439 l0000000000476440
l0000000000476439:
	Mem0[0x0000000000477250<p64>:byte] = 1<8>
	// succ:  l0000000000476440
l0000000000476440:
	SCZO = cond(Mem0[0x00000000004771F0<p64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000476450
	// succ:  l0000000000476449 l0000000000476450
l0000000000476449:
	Mem0[0x00000000004771F0<p64>:byte] = 1<8>
	// succ:  l0000000000476450
l0000000000476450:
	SCZO = cond(Mem0[0x00000000004772D0<p64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000476460
	// succ:  l0000000000476459 l0000000000476460
l0000000000476459:
	Mem0[0x00000000004772D0<p64>:byte] = 1<8>
	// succ:  l0000000000476460
l0000000000476460:
	SCZO = cond(Mem0[0x00000000004772B0<p64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000476470
	// succ:  l0000000000476469 l0000000000476470
l0000000000476469:
	Mem0[0x00000000004772B0<p64>:byte] = 1<8>
	// succ:  l0000000000476470
l0000000000476470:
	SCZO = cond(Mem0[0x0000000000477270<p64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000476480
	// succ:  l0000000000476479 l0000000000476480
l0000000000476479:
	Mem0[0x0000000000477270<p64>:byte] = 1<8>
	// succ:  l0000000000476480
l0000000000476480:
	SCZO = cond(Mem0[0x0000000000477210<p64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000476490
	// succ:  l0000000000476489 l0000000000476490
l0000000000476489:
	Mem0[0x0000000000477210<p64>:byte] = 1<8>
	// succ:  l0000000000476490
l0000000000476490:
	return
	// succ:  fn00000000004763D0_exit
fn00000000004763D0_exit:


// fn00000000004764A0
// Return size: 8
define fn00000000004764A0
fn00000000004764A0_entry:
	rsp = fp
	// succ:  l00000000004764A0
l00000000004764A0:
	SCZO = cond(Mem0[0x00000000004771A0<p64>:byte] - 0<8>)
	branch Test(NE,Z) l00000000004764B0
	// succ:  l00000000004764A9 l00000000004764B0
l00000000004764A9:
	Mem0[0x00000000004771A0<p64>:byte] = 1<8>
	// succ:  l00000000004764B0
l00000000004764B0:
	SCZO = cond(Mem0[0x00000000004771B0<p64>:byte] - 0<8>)
	branch Test(NE,Z) l00000000004764C0
	// succ:  l00000000004764B9 l00000000004764C0
l00000000004764B9:
	Mem0[0x00000000004771B0<p64>:byte] = 1<8>
	// succ:  l00000000004764C0
l00000000004764C0:
	SCZO = cond(Mem0[0x00000000004772E0<p64>:byte] - 0<8>)
	branch Test(NE,Z) l00000000004764D0
	// succ:  l00000000004764C9 l00000000004764D0
l00000000004764C9:
	Mem0[0x00000000004772E0<p64>:byte] = 1<8>
	// succ:  l00000000004764D0
l00000000004764D0:
	SCZO = cond(Mem0[0x0000000000477300<p64>:byte] - 0<8>)
	branch Test(NE,Z) l00000000004764E0
	// succ:  l00000000004764D9 l00000000004764E0
l00000000004764D9:
	Mem0[0x0000000000477300<p64>:byte] = 1<8>
	// succ:  l00000000004764E0
l00000000004764E0:
	SCZO = cond(Mem0[0x0000000000477280<p64>:byte] - 0<8>)
	branch Test(NE,Z) l00000000004764F0
	// succ:  l00000000004764E9 l00000000004764F0
l00000000004764E9:
	Mem0[0x0000000000477280<p64>:byte] = 1<8>
	// succ:  l00000000004764F0
l00000000004764F0:
	SCZO = cond(Mem0[0x0000000000477220<p64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000476500
	// succ:  l00000000004764F9 l0000000000476500
l00000000004764F9:
	Mem0[0x0000000000477220<p64>:byte] = 1<8>
	// succ:  l0000000000476500
l0000000000476500:
	SCZO = cond(Mem0[0x0000000000477240<p64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000476510
	// succ:  l0000000000476509 l0000000000476510
l0000000000476509:
	Mem0[0x0000000000477240<p64>:byte] = 1<8>
	// succ:  l0000000000476510
l0000000000476510:
	SCZO = cond(Mem0[0x00000000004771E0<p64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000476520
	// succ:  l0000000000476519 l0000000000476520
l0000000000476519:
	Mem0[0x00000000004771E0<p64>:byte] = 1<8>
	// succ:  l0000000000476520
l0000000000476520:
	SCZO = cond(Mem0[0x00000000004772C0<p64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000476530
	// succ:  l0000000000476529 l0000000000476530
l0000000000476529:
	Mem0[0x00000000004772C0<p64>:byte] = 1<8>
	// succ:  l0000000000476530
l0000000000476530:
	SCZO = cond(Mem0[0x00000000004772A0<p64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000476540
	// succ:  l0000000000476539 l0000000000476540
l0000000000476539:
	Mem0[0x00000000004772A0<p64>:byte] = 1<8>
	// succ:  l0000000000476540
l0000000000476540:
	SCZO = cond(Mem0[0x0000000000477260<p64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000476550
	// succ:  l0000000000476549 l0000000000476550
l0000000000476549:
	Mem0[0x0000000000477260<p64>:byte] = 1<8>
	// succ:  l0000000000476550
l0000000000476550:
	SCZO = cond(Mem0[0x0000000000477200<p64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000476560
	// succ:  l0000000000476559 l0000000000476560
l0000000000476559:
	Mem0[0x0000000000477200<p64>:byte] = 1<8>
	// succ:  l0000000000476560
l0000000000476560:
	return
	// succ:  fn00000000004764A0_exit
fn00000000004764A0_exit:


// fn0000000000476570
// Return size: 0
define fn0000000000476570
fn0000000000476570_entry:
	rsp = fp
	// succ:  l0000000000476570
l0000000000476570:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = 0x0000000000476360<p64>
	call fn0000000000410BF0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = 0x0000000000476390<p64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	// succ:  l000000000047658B_thunk_fn0000000000410BF0
l000000000047658B_thunk_fn0000000000410BF0:
	call fn0000000000410BF0 (retsize: 0;)
	return
	// succ:  fn0000000000476570_exit
fn0000000000476570_exit:


// fn0000000000476590
// Return size: 8
define fn0000000000476590
fn0000000000476590_entry:
	rsp = fp
	// succ:  l0000000000476590
l0000000000476590:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = Mem0[0x000000000048AA60<p64>:word64]
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000000004765AA
	// succ:  l00000000004765A4 l00000000004765AA
l00000000004765A4:
	call fn0000000000426270 (retsize: 8;)
	// succ:  l00000000004765AA
l00000000004765AA:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000476590_exit
fn0000000000476590_exit:


