// fn0000000000451050
// Return size: 8
define fn0000000000451050
fn0000000000451050_entry:
	rsp = fp
	// succ:  l0000000000451050
l0000000000451050:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r8 = Mem0[rdx + 8<64>:word64]
	rax = Mem0[rdx:word64]
	rbx = rcx
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l000000000045106C
	// succ:  l0000000000451064 l000000000045106C
l0000000000451064:
	rdx = rax
	call fn0000000000450E20 (retsize: 8;)
	// succ:  l000000000045106C
l000000000045106C:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451050_exit
fn0000000000451050_exit:


// fn0000000000451080
// Return size: 8
define fn0000000000451080
fn0000000000451080_entry:
	rsp = fp
	// succ:  l0000000000451080
l0000000000451080:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SZO = cond(rdx & rdx)
	C = false
	rbx = rcx
	branch Test(EQ,Z) l0000000000451096
	// succ:  l000000000045108D l0000000000451096
l000000000045108D:
	r8d = CONVERT(r8b, byte, int32)
	call fn00000000004510A0 (retsize: 8;)
	// succ:  l0000000000451096
l0000000000451096:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451080_exit
fn0000000000451080_exit:


// fn00000000004510A0
// Return size: 8
define fn00000000004510A0
fn00000000004510A0_entry:
	rsp = fp
	// succ:  l00000000004510A0
l00000000004510A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r9 = Mem0[rcx:word64]
	rsi = rcx
	rcx = 0x3FFFFFFFFFFFFFF9<64>
	rdi = rdx
	ebp = r8d
	rbp = CONVERT(ebp, word32, uint64)
	rax = Mem0[r9 - 0x18<64>:word64]
	rcx = rcx - rax
	SCZO = cond(rcx)
	SCZO = cond(rcx - rdx)
	branch Test(ULT,C) l0000000000451137
	// succ:  l00000000004510CA l0000000000451137
l00000000004510CA:
	rbx = rdx + rax
	SCZO = cond(rbx - Mem0[r9 - 0x10<64>:word64])
	branch Test(ULE,CZ) l0000000000451120
	// succ:  l00000000004510D4 l0000000000451120
l00000000004510D4:
	rcx = rsi
	rdx = rbx
	call fn0000000000451BE0 (retsize: 8;)
	r9 = Mem0[rsi:word64]
	SCZO = cond(rdi - 1<64>)
	rax = Mem0[r9 - 0x18<64>:word64]
	rcx = r9 + rax
	branch Test(EQ,Z) l0000000000451132
	// succ:  l00000000004510F0 l0000000000451132
l00000000004510F0:
	edx = CONVERT(bpl, byte, int32)
	r8 = rdi
	rax = memset(rcx, rdx, r8)
	// succ:  l00000000004510FC
l00000000004510FC:
	rax = Mem0[rsi:word64]
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = rbx
	Mem0[rax + rbx:byte] = 0<8>
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004510A0_exit
l0000000000451120:
	edx = Mem0[r9 - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(GT,SZO) l00000000004510D4
	// succ:  l0000000000451128 l00000000004510D4
l0000000000451128:
	SCZO = cond(rdi - 1<64>)
	rcx = r9 + rax
	branch Test(NE,Z) l00000000004510F0
	// succ:  l0000000000451132 l00000000004510F0
l0000000000451132:
	Mem0[rcx:byte] = bpl
	goto l00000000004510FC
	// succ:  l00000000004510FC
l0000000000451137:
	rcx = 0x000000000048D6FE<p64>
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l000000000045114F_thunk_fn0000000000451150
l000000000045114F_thunk_fn0000000000451150:
	call fn0000000000451150 (retsize: 0;)
	return
	// succ:  fn00000000004510A0_exit
fn00000000004510A0_exit:


// fn0000000000451150
// Return size: 8
define fn0000000000451150
fn0000000000451150_entry:
	rsp = fp
	// succ:  l0000000000451150
l0000000000451150:
	r8 = Mem0[rcx:word64]
	rax = rcx
	r10d = Mem0[r8 - 8<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d & r10d)
	C = false
	branch Test(SG,S) l0000000000451180
	// succ:  l000000000045115F l0000000000451180
l000000000045115F:
	rcx = Mem0[rdx:word64]
	r9d = Mem0[rcx - 8<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NS,S) l0000000000451172
	// succ:  l000000000045116B l0000000000451172
l000000000045116B:
	Mem0[rcx - 8<64>:word32] = 0<32>
	// succ:  l0000000000451172
l0000000000451172:
	Mem0[rax:word64] = rcx
	Mem0[rdx:word64] = r8
	return
	// succ:  fn0000000000451150_exit
l0000000000451180:
	Mem0[r8 - 8<64>:word32] = 0<32>
	goto l000000000045115F
	// succ:  l000000000045115F
fn0000000000451150_exit:


// fn0000000000451190
// Return size: 8
define fn0000000000451190
fn0000000000451190_entry:
	rsp = fp
	// succ:  l0000000000451190
l0000000000451190:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx
	rbx = rdx
	rcx = rdx
	eax = strlen(rcx)
	rdx = rbx
	r8 = rax
	rcx = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004511B3_thunk_fn00000000004511C0
l00000000004511B3_thunk_fn00000000004511C0:
	call fn00000000004511C0 (retsize: 0;)
	return
	// succ:  fn0000000000451190_exit
fn0000000000451190_exit:


// fn00000000004511C0
// Return size: 8
define fn00000000004511C0
fn00000000004511C0_entry:
	rsp = fp
	// succ:  l00000000004511C0
l00000000004511C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = 0x3FFFFFFFFFFFFFF9<64>
	rbx = rcx
	rcx = Mem0[rcx:word64]
	rsi = r8
	SCZO = cond(rsi - rax)
	r8 = Mem0[rcx - 0x18<64>:word64]
	branch Test(UGT,CZ) l000000000045127A
	// succ:  l00000000004511E6 l000000000045127A
l00000000004511E6:
	SCZO = cond(rdx - rcx)
	branch Test(ULT,C) l00000000004511F4
	// succ:  l00000000004511EB l00000000004511F4
l00000000004511EB:
	rax = rcx + r8
	SCZO = cond(rdx - rax)
	branch Test(ULE,CZ) l0000000000451210
	// succ:  l00000000004511F4 l0000000000451210
l00000000004511F4:
	r9 = rdx
	Mem0[rsp + 0x20<64>:word64] = rsi
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx
	call fn0000000000450960 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004511C0_exit
l0000000000451210:
	eax = Mem0[rcx - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l00000000004511F4
	// succ:  l0000000000451217 l00000000004511F4
l0000000000451217:
	rax = rdx
	rax = rax - rcx
	SCZO = cond(rax)
	SCZO = cond(rsi - rax)
	branch Test(UGT,CZ) l0000000000451250
	// succ:  l0000000000451222 l0000000000451250
l0000000000451222:
	SCZO = cond(rsi - 1<64>)
	branch Test(EQ,Z) l0000000000451270
	// succ:  l0000000000451228 l0000000000451270
l0000000000451228:
	r8 = rsi
	rax = memcpy(rcx, rdx, r8)
	rcx = Mem0[rbx:word64]
	// succ:  l0000000000451233
l0000000000451233:
	rax = rbx
	Mem0[rcx - 8<64>:word32] = 0<32>
	Mem0[rcx - 0x18<64>:word64] = rsi
	Mem0[rcx + rsi:byte] = 0<8>
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004511C0_exit
l0000000000451250:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000451233
	// succ:  l0000000000451255 l0000000000451233
l0000000000451255:
	SCZO = cond(rsi - 1<64>)
	branch Test(EQ,Z) l0000000000451270
	// succ:  l000000000045125B l0000000000451270
l000000000045125B:
	r8 = rsi
	rax = memmove(rcx, rdx, r8)
	rcx = Mem0[rbx:word64]
	goto l0000000000451233
	// succ:  l0000000000451233
l0000000000451270:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:byte] = al
	rcx = Mem0[rbx:word64]
	goto l0000000000451233
	// succ:  l0000000000451233
l000000000045127A:
	rcx = 0x000000000048D6E9<p64>
	call fn0000000000470E60 (retsize: 8;)
fn00000000004511C0_exit:


// fn0000000000451290
// Return size: 8
define fn0000000000451290
fn0000000000451290_entry:
	rsp = fp
	goto l0000000000451290
	// succ:  l0000000000451290
l000000000045128F_thunk_fn0000000000451290:
	call fn0000000000451290 (retsize: 0;)
	return
	// succ:  fn0000000000451290_exit
l0000000000451290:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rdx:word64]
	SCZO = cond(Mem0[rcx:word64] - rbx)
	rsi = rcx
	branch Test(EQ,Z) l00000000004512C1
	goto l00000000004512A1
	// succ:  l00000000004512A1 l00000000004512C1
l0000000000451290:
	goto l000000000045128F_thunk_fn0000000000451290
	// succ:  l000000000045128F_thunk_fn0000000000451290
l00000000004512A1:
	eax = Mem0[rbx - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l00000000004512D0
	// succ:  l00000000004512A8 l00000000004512D0
l00000000004512A8:
	__lock()
	v14 = Mem0[rbx - 8<64>:word32] + 1<32>
	Mem0[rbx - 8<64>:word32] = v14
	SCZO = cond(v14)
	// succ:  l00000000004512AD
l00000000004512AD:
	rcx = Mem0[rsi:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004512F0
	// succ:  l00000000004512BE l00000000004512F0
l00000000004512BE:
	Mem0[rsi:word64] = rbx
	// succ:  l00000000004512C1
l00000000004512C1:
	rax = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451290_exit
l00000000004512D0:
	rcx = rbx - 0x18<64>
	rdx = rsp + 0x2F<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000450B00 (retsize: 8;)
	rbx = rax
	goto l00000000004512AD
	// succ:  l00000000004512AD
l00000000004512F0:
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000475550 (retsize: 8;)
	goto l00000000004512BE
	// succ:  l00000000004512BE
fn0000000000451290_exit:


// fn0000000000451300
// Return size: 8
define fn0000000000451300
fn0000000000451300_entry:
	rsp = fp
	// succ:  l0000000000451300
l0000000000451300:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdx = Mem0[rdx:word64]
	rax = r8
	r11 = Mem0[rdx - 0x18<64>:word64]
	r10 = r11
	r10 = r10 - r8
	SCZO = cond(r10)
	r8 = r9
	SCZO = cond(r10 - r9)
	branch Test(UGT,CZ) l000000000045131E
	// succ:  l000000000045131A_1 l000000000045131E
l000000000045131A_1:
	r8 = r10
	// succ:  l000000000045131E
l000000000045131E:
	SCZO = cond(rax - r11)
	branch Test(UGT,CZ) l000000000045132F
	// succ:  l0000000000451323 l000000000045132F
l0000000000451323:
	rdx = rdx + rax
	SCZO = cond(rdx)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	// succ:  l000000000045132A_thunk_fn00000000004511C0
l000000000045132A_thunk_fn00000000004511C0:
	call fn00000000004511C0 (retsize: 0;)
	return
	// succ:  fn0000000000451300_exit
l000000000045132F:
	rdx = 0x000000000048D6E9<p64>
	rcx = 0x000000000048D5D0<p64>
	r8 = rax
	r9 = r11
	call fn0000000000471560 (retsize: 8;)
	// succ:  l000000000045134F_thunk_fn0000000000451350
l000000000045134F_thunk_fn0000000000451350:
	call fn0000000000451350 (retsize: 0;)
	return
	// succ:  fn0000000000451300_exit
fn0000000000451300_exit:


// fn0000000000451350
// Return size: 8
define fn0000000000451350
fn0000000000451350_entry:
	rsp = fp
	// succ:  l0000000000451350
l0000000000451350:
	rax = rdx
	rdx = Mem0[rdx:word64]
	r8 = Mem0[rax + 8<64>:word64]
	// succ:  l000000000045135A_thunk_fn00000000004511C0
l000000000045135A_thunk_fn00000000004511C0:
	call fn00000000004511C0 (retsize: 0;)
	return
	// succ:  fn0000000000451350_exit
fn0000000000451350_exit:


// fn0000000000451360
// Return size: 8
define fn0000000000451360
fn0000000000451360_entry:
	rsp = fp
	// succ:  l0000000000451360
l0000000000451360:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r8d = CONVERT(r8b, byte, int32)
	r9 = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rax = Mem0[rax - 0x18<64>:word64]
	Mem0[rsp + 0x20<64>:word32] = r8d
	r8 = rax
	call fn00000000004508E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000451360_exit
fn0000000000451360_exit:


// fn0000000000451390
// Return size: 0
define fn0000000000451390
fn0000000000451390_entry:
	rsp = fp
	// succ:  l0000000000451390
l0000000000451390:
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	r9 = Mem0[r8 + 8<64>:word64]
	r8 = Mem0[r8:word64]
	// succ:  l000000000045139A_thunk_fn0000000000451450
l000000000045139A_thunk_fn0000000000451450:
	call fn0000000000451450 (retsize: 0;)
	return
	// succ:  fn0000000000451390_exit
fn0000000000451390_exit:


// fn00000000004513A0
// Return size: 8
define fn00000000004513A0
fn00000000004513A0_entry:
	rsp = fp
	// succ:  l00000000004513A0
l00000000004513A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	rbx = rdx
	rbx = rbx - Mem0[rcx:word64]
	SCZO = cond(rbx)
	r8d = CONVERT(r8b, byte, int32)
	rsi = rcx
	Mem0[rsp + 0x20<64>:word32] = r8d
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbx
	call fn00000000004508E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[rsi:word64]
	Mem0[rax - 8<64>:word32] = 0xFFFFFFFF<32>
	rax = rax + rbx
	SCZO = cond(rax)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004513A0_exit
fn00000000004513A0_exit:


// fn00000000004513E0
// Return size: 8
define fn00000000004513E0
fn00000000004513E0_entry:
	rsp = fp
	// succ:  l00000000004513E0
l00000000004513E0:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	r9d = CONVERT(r9b, byte, int32)
	Mem0[rsp + 0x20<64>:word32] = r9d
	r9 = r8
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn00000000004508E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004513E0_exit
fn00000000004513E0_exit:


// fn0000000000451410
// Return size: 0
define fn0000000000451410
fn0000000000451410_entry:
	rsp = fp
	// succ:  l0000000000451410
l0000000000451410:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = r8
	rsi = rdx
	Mem0[rsp + 0x28<64>:word64] = r8
	eax = strlen(rcx)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	rdx = rsi
	rcx = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045143D_thunk_fn0000000000451450
l000000000045143D_thunk_fn0000000000451450:
	call fn0000000000451450 (retsize: 0;)
	return
	// succ:  fn0000000000451410_exit
fn0000000000451410_exit:


// fn0000000000451450
// Return size: 0
define fn0000000000451450
fn0000000000451450_entry:
	rsp = fp
	// succ:  l0000000000451450
l0000000000451450:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdi = r9
	rsi = rcx
	rbp = rdx
	r9 = Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx - r9)
	branch Test(UGT,CZ) l00000000004515B6
	// succ:  l0000000000451471 l00000000004515B6
l0000000000451471:
	r10 = 0x3FFFFFFFFFFFFFF9<64>
	r10 = r10 - r9
	SCZO = cond(r10)
	SCZO = cond(rdi - r10)
	branch Test(UGT,CZ) l00000000004515CC
	// succ:  l0000000000451487 l00000000004515CC
l0000000000451487:
	SCZO = cond(r8 - rax)
	branch Test(UGE,C) l00000000004514B0
	// succ:  l000000000045148C l00000000004514B0
l000000000045148C:
	r9 = r8
	Mem0[rsp + 0x20<64>:word64] = rdi
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn0000000000450960 (retsize: 8;)
	// succ:  l00000000004514A2
l00000000004514A2:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451450_exit
l00000000004514B0:
	r9 = r9 + rax
	SCZO = cond(r9)
	SCZO = cond(r8 - r9)
	branch Test(UGT,CZ) l000000000045148C
	// succ:  l00000000004514B8 l000000000045148C
l00000000004514B8:
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(GT,SZO) l000000000045148C
	// succ:  l00000000004514BF l000000000045148C
l00000000004514BF:
	rbx = r8
	r9 = rdi
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	rbx = rbx - rax
	SCZO = cond(rbx)
	call fn0000000000451CC0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	r10 = rax + rbx
	r9 = rax + rbp
	rdx = r10 + rdi
	SCZO = cond(r9 - rdx)
	branch Test(ULT,C) l0000000000451510
	// succ:  l00000000004514EA l0000000000451510
l00000000004514EA:
	SCZO = cond(rdi - 1<64>)
	branch Test(EQ,Z) l0000000000451564
	// succ:  l00000000004514F0 l0000000000451564
l00000000004514F0:
	r8 = rdi
	rdx = r10
	rcx = r9
	rax = memcpy(rcx, rdx, r8)
	rax = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451450_exit
l0000000000451510:
	SCZO = cond(r10 - r9)
	branch Test(UGE,C) l0000000000451550
	// succ:  l0000000000451515 l0000000000451550
l0000000000451515:
	rbx = r9
	rbx = rbx - r10
	SCZO = cond(rbx)
	SCZO = cond(rbx - 1<64>)
	branch Test(NE,Z) l00000000004515A0
	// succ:  l0000000000451521 l00000000004515A0
l0000000000451521:
	eax = CONVERT(Mem0[r10:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9:byte] = al
	// succ:  l0000000000451528
l0000000000451528:
	r8 = rdi
	rdx = r9 + rdi
	rcx = r9 + rbx
	r8 = r8 - rbx
	SCZO = cond(r8)
	SCZO = cond(r8 - 1<64>)
	branch Test(NE,Z) l0000000000451593
	// succ:  l000000000045153C l0000000000451593
l000000000045153C:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:byte] = al
	rax = rsi
	goto l00000000004514A2
	// succ:  l00000000004514A2
l0000000000451550:
	SCZO = cond(rdi - 1<64>)
	branch Test(NE,Z) l0000000000451580
	// succ:  l0000000000451556 l0000000000451580
l0000000000451556:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9:byte] = al
	rax = rsi
	goto l00000000004514A2
	// succ:  l00000000004514A2
l0000000000451564:
	eax = CONVERT(Mem0[r10:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9:byte] = al
	rax = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451450_exit
l0000000000451580:
	r8 = rdi
	rcx = r9
	rax = memcpy(rcx, rdx, r8)
	rax = rsi
	goto l00000000004514A2
	// succ:  l00000000004514A2
l0000000000451593:
	rax = memcpy(rcx, rdx, r8)
	rax = rsi
	goto l00000000004514A2
	// succ:  l00000000004514A2
l00000000004515A0:
	rcx = r9
	r8 = rbx
	rdx = r10
	rax = memcpy(rcx, rdx, r8)
	r9 = rax
	goto l0000000000451528
	// succ:  l0000000000451528
l00000000004515B6:
	r8 = rdx
	rcx = 0x000000000048D5D0<p64>
	rdx = 0x000000000048D6BE<p64>
	call fn0000000000471560 (retsize: 8;)
	// succ:  l00000000004515CC
l00000000004515CC:
	rcx = 0x000000000048D6BE<p64>
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l00000000004515DF_thunk_fn00000000004515E0
l00000000004515DF_thunk_fn00000000004515E0:
	call fn00000000004515E0 (retsize: 0;)
	return
	// succ:  fn0000000000451450_exit
fn0000000000451450_exit:


// fn00000000004515E0
// Return size: 0
define fn00000000004515E0
fn00000000004515E0_entry:
	rsp = fp
	// succ:  l00000000004515E0
l00000000004515E0:
	r8 = Mem0[r8:word64]
	r9 = Mem0[r8 - 0x18<64>:word64]
	// succ:  l00000000004515E7_thunk_fn0000000000451450
l00000000004515E7_thunk_fn0000000000451450:
	call fn0000000000451450 (retsize: 0;)
	return
	// succ:  fn00000000004515E0_exit
fn00000000004515E0_exit:


// fn00000000004515F0
// Return size: 8
define fn00000000004515F0
fn00000000004515F0_entry:
	rsp = fp
	// succ:  l00000000004515F0
l00000000004515F0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r8 = Mem0[r8:word64]
	r10 = r9
	r9 = Mem0[rsp + 0x50<64>:word64]
	r11 = Mem0[r8 - 0x18<64>:word64]
	rax = r11
	rax = rax - r10
	SCZO = cond(rax)
	SCZO = cond(rax - r9)
	branch Test(UGT,CZ) l0000000000451610
	// succ:  l000000000045160C_1 l0000000000451610
l000000000045160C_1:
	r9 = rax
	// succ:  l0000000000451610
l0000000000451610:
	SCZO = cond(r10 - r11)
	branch Test(UGT,CZ) l0000000000451621
	// succ:  l0000000000451615 l0000000000451621
l0000000000451615:
	r8 = r8 + r10
	SCZO = cond(r8)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	// succ:  l000000000045161C_thunk_fn0000000000451450
l000000000045161C_thunk_fn0000000000451450:
	call fn0000000000451450 (retsize: 0;)
	return
	// succ:  fn00000000004515F0_exit
l0000000000451621:
	rdx = 0x000000000048D6BE<p64>
	rcx = 0x000000000048D5D0<p64>
	r8 = r10
	r9 = r11
	call fn0000000000471560 (retsize: 8;)
	// succ:  l000000000045163F_thunk_fn0000000000451640
l000000000045163F_thunk_fn0000000000451640:
	call fn0000000000451640 (retsize: 0;)
	return
	// succ:  fn00000000004515F0_exit
fn00000000004515F0_exit:


// fn0000000000451640
// Return size: 8
define fn0000000000451640
fn0000000000451640_entry:
	rsp = fp
	// succ:  l0000000000451640
l0000000000451640:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r9d = CONVERT(r9b, byte, int32)
	rax = Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx - rax)
	branch Test(UGT,CZ) l0000000000451669
	// succ:  l0000000000451654 l0000000000451669
l0000000000451654:
	Mem0[rsp + 0x20<64>:word32] = r9d
	r9 = r8
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn00000000004508E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000451640_exit
l0000000000451669:
	r8 = rdx
	rcx = 0x000000000048D5D0<p64>
	rdx = 0x000000000048D6BE<p64>
	r9 = rax
	call fn0000000000471560 (retsize: 8;)
	// succ:  l000000000045168F_thunk_fn0000000000451690
l000000000045168F_thunk_fn0000000000451690:
	call fn0000000000451690 (retsize: 0;)
	return
	// succ:  fn0000000000451640_exit
fn0000000000451640_exit:


// fn0000000000451690
// Return size: 8
define fn0000000000451690
fn0000000000451690_entry:
	rsp = fp
	// succ:  l0000000000451690
l0000000000451690:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r8 = Mem0[rdx:word64]
	rsi = rcx
	rbx = rdx
	eax = Mem0[r8 - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l00000000004516B2
	// succ:  l00000000004516A7 l00000000004516B2
l00000000004516A7:
	rcx = rdx
	call fn00000000004505A0 (retsize: 8;)
	r8 = Mem0[rbx:word64]
	// succ:  l00000000004516B2
l00000000004516B2:
	r8 = r8 + Mem0[r8 - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = rsi
	Mem0[rsi:word64] = r8
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451690_exit
fn0000000000451690_exit:


// fn00000000004516D0
// Return size: 8
define fn00000000004516D0
fn00000000004516D0_entry:
	rsp = fp
	// succ:  l00000000004516D0
l00000000004516D0:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	// succ:  l00000000004516D3_thunk_fn00000000004516E0
l00000000004516D3_thunk_fn00000000004516E0:
	call fn00000000004516E0 (retsize: 0;)
	return
	// succ:  fn00000000004516D0_exit
fn00000000004516D0_exit:


// fn00000000004516E0
// Return size: 8
define fn00000000004516E0
fn00000000004516E0_entry:
	rsp = fp
	// succ:  l00000000004516E0
l00000000004516E0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r9 = 0x3FFFFFFFFFFFFFF9<64>
	SCZO = cond(rdx - r9)
	rax = Mem0[rax - 0x18<64>:word64]
	branch Test(UGT,CZ) l0000000000451734
	// succ:  l00000000004516FA l0000000000451734
l00000000004516FA:
	SCZO = cond(rdx - rax)
	branch Test(UGT,CZ) l0000000000451710
	// succ:  l00000000004516FF l0000000000451710
l00000000004516FF:
	branch Test(ULT,C) l0000000000451722
	// succ:  l0000000000451701 l0000000000451722
l0000000000451701:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004516E0_exit
l0000000000451710:
	rdx = rdx - rax
	SCZO = cond(rdx)
	branch Test(EQ,Z) l0000000000451701
	// succ:  l0000000000451715 l0000000000451701
l0000000000451715:
	r8d = CONVERT(r8b, byte, int32)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	// succ:  l000000000045171D_thunk_fn00000000004510A0
l000000000045171D_thunk_fn00000000004510A0:
	call fn00000000004510A0 (retsize: 0;)
	return
	// succ:  fn00000000004516E0_exit
l0000000000451722:
	rax = rax - rdx
	SCZO = cond(rax)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	// succ:  l000000000045172F_thunk_fn0000000000451CC0
l000000000045172F_thunk_fn0000000000451CC0:
	call fn0000000000451CC0 (retsize: 0;)
	return
	// succ:  fn00000000004516E0_exit
l0000000000451734:
	rcx = 0x000000000048D713<p64>
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l000000000045174F_thunk_fn0000000000451750
l000000000045174F_thunk_fn0000000000451750:
	call fn0000000000451750 (retsize: 0;)
	return
	// succ:  fn00000000004516E0_exit
fn00000000004516E0_exit:


// fn0000000000451750
// Return size: 8
define fn0000000000451750
fn0000000000451750_entry:
	rsp = fp
	// succ:  l0000000000451750
l0000000000451750:
	SCZO = cond(r8 - 1<64>)
	branch Test(EQ,Z) l0000000000451760
	// succ:  l0000000000451756 l0000000000451760
l0000000000451756:
	rax = memcpy(rcx, rdx, r8)
	return
	// succ:  fn0000000000451750_exit
l0000000000451760:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:byte] = al
	return
	// succ:  fn0000000000451750_exit
fn0000000000451750_exit:


// fn0000000000451770
// Return size: 8
define fn0000000000451770
fn0000000000451770_entry:
	rsp = fp
	// succ:  l0000000000451770
l0000000000451770:
	rax = rdx
	Mem0[rcx:word64] = rdx
	return
	// succ:  fn0000000000451770_exit
fn0000000000451770_exit:


// fn0000000000451780
// Return size: 8
define fn0000000000451780
fn0000000000451780_entry:
	rsp = fp
	// succ:  l0000000000451780
l0000000000451780:
	rax = Mem0[rcx:word64]
	eax = Mem0[rax - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000451790
	// succ:  l000000000045178A l0000000000451790
l000000000045178A:
	// succ:  l000000000045178A_thunk_fn00000000004505A0
l000000000045178A_thunk_fn00000000004505A0:
	call fn00000000004505A0 (retsize: 0;)
	return
	// succ:  fn0000000000451780_exit
l0000000000451790:
	return
	// succ:  fn0000000000451780_exit
fn0000000000451780_exit:


// fn00000000004517A0
// Return size: 8
define fn00000000004517A0
fn00000000004517A0_entry:
	rsp = fp
	// succ:  l00000000004517A0
l00000000004517A0:
	SCZO = cond(r8 - 1<64>)
	branch Test(EQ,Z) l00000000004517B0
	// succ:  l00000000004517A6 l00000000004517B0
l00000000004517A6:
	rax = memmove(rcx, rdx, r8)
	return
	// succ:  fn00000000004517A0_exit
l00000000004517B0:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:byte] = al
	return
	// succ:  fn00000000004517A0_exit
fn00000000004517A0_exit:


// fn00000000004517C0
// Return size: 0
define fn00000000004517C0
fn00000000004517C0_entry:
	rsp = fp
	// succ:  l00000000004517C0
l00000000004517C0:
	v4 = Mem0[rsp + 0x28<64>:word64] - r9
	Mem0[rsp + 0x28<64>:word64] = v4
	SCZO = cond(v4)
	rax = rdx
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	r8 = r8 - rax
	SCZO = cond(r8)
	// succ:  l00000000004517CE_thunk_fn0000000000451960
l00000000004517CE_thunk_fn0000000000451960:
	call fn0000000000451960 (retsize: 0;)
	return
	// succ:  fn00000000004517C0_exit
fn00000000004517C0_exit:


// fn00000000004517E0
// Return size: 8
define fn00000000004517E0
fn00000000004517E0_entry:
	rsp = fp
	// succ:  l00000000004517E0
l00000000004517E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rbx = rcx
	rsi = rdx
	rcx = r9
	rdi = r8
	Mem0[rsp + 0x38<64>:word64] = r9
	eax = strlen(rcx)
	rdx = rsi
	rdx = rdx - Mem0[rbx:word64]
	SCZO = cond(rdx)
	r9 = Mem0[rsp + 0x38<64>:word64]
	rdi = rdi - rsi
	SCZO = cond(rdi)
	Mem0[rsp + 0x20<64>:word64] = rax
	rcx = rbx
	r8 = rdi
	call fn0000000000451960 (retsize: 8;)
	rsp = rsp + 8<64>
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004517E0_exit
fn00000000004517E0_exit:


// fn0000000000451830
// Return size: 0
define fn0000000000451830
fn0000000000451830_entry:
	rsp = fp
	// succ:  l0000000000451830
l0000000000451830:
	v4 = Mem0[rsp + 0x28<64>:word64] - r9
	Mem0[rsp + 0x28<64>:word64] = v4
	SCZO = cond(v4)
	rax = rdx
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	r8 = r8 - rax
	SCZO = cond(r8)
	// succ:  l000000000045183E_thunk_fn0000000000451960
l000000000045183E_thunk_fn0000000000451960:
	call fn0000000000451960 (retsize: 0;)
	return
	// succ:  fn0000000000451830_exit
fn0000000000451830_exit:


// fn0000000000451850
// Return size: 0
define fn0000000000451850
fn0000000000451850_entry:
	rsp = fp
	// succ:  l0000000000451850
l0000000000451850:
	rax = rdx
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	r8 = r8 - rax
	SCZO = cond(r8)
	// succ:  l0000000000451859_thunk_fn0000000000451960
l0000000000451859_thunk_fn0000000000451960:
	call fn0000000000451960 (retsize: 0;)
	return
	// succ:  fn0000000000451850_exit
fn0000000000451850_exit:


// fn0000000000451860
// Return size: 8
define fn0000000000451860
fn0000000000451860_entry:
	rsp = fp
	// succ:  l0000000000451860
l0000000000451860:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	r9 = Mem0[r9:word64]
	rax = rdx
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	r8 = r8 - rax
	SCZO = cond(r8)
	r10 = Mem0[r9 - 0x18<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = r10
	call fn0000000000451960 (retsize: 8;)
	rsp = rsp + 8<64>
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000451860_exit
fn0000000000451860_exit:


// fn0000000000451890
// Return size: 0
define fn0000000000451890
fn0000000000451890_entry:
	rsp = fp
	// succ:  l0000000000451890
l0000000000451890:
	v4 = Mem0[rsp + 0x28<64>:word64] - r9
	Mem0[rsp + 0x28<64>:word64] = v4
	SCZO = cond(v4)
	rax = rdx
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	r8 = r8 - rax
	SCZO = cond(r8)
	// succ:  l000000000045189E_thunk_fn0000000000451960
l000000000045189E_thunk_fn0000000000451960:
	call fn0000000000451960 (retsize: 0;)
	return
	// succ:  fn0000000000451890_exit
fn0000000000451890_exit:


// fn00000000004518B0
// Return size: 0
define fn00000000004518B0
fn00000000004518B0_entry:
	rsp = fp
	// succ:  l00000000004518B0
l00000000004518B0:
	v4 = Mem0[rsp + 0x28<64>:word64] - r9
	Mem0[rsp + 0x28<64>:word64] = v4
	SCZO = cond(v4)
	rax = rdx
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	r8 = r8 - rax
	SCZO = cond(r8)
	// succ:  l00000000004518BE_thunk_fn0000000000451960
l00000000004518BE_thunk_fn0000000000451960:
	call fn0000000000451960 (retsize: 0;)
	return
	// succ:  fn00000000004518B0_exit
fn00000000004518B0_exit:


// fn00000000004518D0
// Return size: 8
define fn00000000004518D0
fn00000000004518D0_entry:
	rsp = fp
	// succ:  l00000000004518D0
l00000000004518D0:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = rdx
	rdx = r9
	r9 = Mem0[r9:word64]
	r10 = Mem0[rdx + 8<64>:word64]
	rdx = rax
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	r8 = r8 - rax
	SCZO = cond(r8)
	Mem0[rsp + 0x20<64>:word64] = r10
	call fn0000000000451960 (retsize: 8;)
	rsp = rsp + 8<64>
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004518D0_exit
fn00000000004518D0_exit:


// fn0000000000451900
// Return size: 0
define fn0000000000451900
fn0000000000451900_entry:
	rsp = fp
	// succ:  l0000000000451900
l0000000000451900:
	r10d = CONVERT(Mem0[rsp + 0x28<64>:byte], byte, int32)
	rax = rdx
	rdx = rdx - Mem0[rcx:word64]
	SCZO = cond(rdx)
	r8 = r8 - rax
	SCZO = cond(r8)
	Mem0[rsp + 0x28<64>:word32] = r10d
	// succ:  l0000000000451914_thunk_fn00000000004508E0
l0000000000451914_thunk_fn00000000004508E0:
	call fn00000000004508E0 (retsize: 0;)
	return
	// succ:  fn0000000000451900_exit
fn0000000000451900_exit:


// fn0000000000451920
// Return size: 8
define fn0000000000451920
fn0000000000451920_entry:
	rsp = fp
	// succ:  l0000000000451920
l0000000000451920:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = r9
	rsi = rdx
	Mem0[rsp + 0x38<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = r9
	eax = strlen(rcx)
	r9 = Mem0[rsp + 0x30<64>:word64]
	r8 = Mem0[rsp + 0x38<64>:word64]
	rdx = rsi
	Mem0[rsp + 0x20<64>:word64] = rax
	rcx = rbx
	call fn0000000000451960 (retsize: 8;)
	rsp = rsp + 8<64>
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451920_exit
fn0000000000451920_exit:


// fn0000000000451960
// Return size: 0
define fn0000000000451960
fn0000000000451960_entry:
	rsp = fp
	// succ:  l0000000000451960
l0000000000451960:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	r12 = Mem0[rsp + 0xB0<64>:word64]
	rdi = rcx
	rcx = Mem0[rcx:word64]
	r10 = r9
	rbp = rdx
	r9 = Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(rdx - r9)
	branch Test(UGT,CZ) l0000000000451ADA
	// succ:  l000000000045198D l0000000000451ADA
l000000000045198D:
	rsi = r9
	rax = 0x3FFFFFFFFFFFFFF9<64>
	rsi = rsi - rdx
	SCZO = cond(rsi)
	SCZO = cond(rsi - r8)
	branch Test(ULE,CZ) l00000000004519A4
	// succ:  l00000000004519A0_1 l00000000004519A4
l00000000004519A0_1:
	rsi = r8
	// succ:  l00000000004519A4
l00000000004519A4:
	rax = rax - r9
	SCZO = cond(rax)
	rax = rax + rsi
	SCZO = cond(rax)
	SCZO = cond(r12 - rax)
	branch Test(UGT,CZ) l0000000000451ACE
	// succ:  l00000000004519B3 l0000000000451ACE
l00000000004519B3:
	SCZO = cond(r10 - rcx)
	branch Test(ULT,C) l00000000004519C0
	// succ:  l00000000004519B8 l00000000004519C0
l00000000004519B8:
	r9 = r9 + rcx
	SCZO = cond(r9)
	SCZO = cond(r10 - r9)
	branch Test(ULE,CZ) l00000000004519E3
	// succ:  l00000000004519C0 l00000000004519E3
l00000000004519C0:
	Mem0[rsp + 0x20<64>:word64] = r12
	r9 = r10
	r8 = rsi
	rdx = rbp
	rcx = rdi
	call fn0000000000450960 (retsize: 8;)
	// succ:  l00000000004519D6
l00000000004519D6:
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451960_exit
l00000000004519E3:
	eax = Mem0[rcx - 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l00000000004519C0
	// succ:  l00000000004519EA l00000000004519C0
l00000000004519EA:
	rdx = r10
	rax = rcx + rbp
	SCZO = cond(rdx - rax)
	branch Test(ULE,CZ) l0000000000451A60
	// succ:  l00000000004519F7 l0000000000451A60
l00000000004519F7:
	rax = rsi + rbp
	rax = rax + rcx
	SCZO = cond(rax)
	SCZO = cond(r10 - rax)
	branch Test(UGE,C) l0000000000451AC0
	// succ:  l0000000000451A07 l0000000000451AC0
l0000000000451A07:
	r13 = rsp + 0x4F<64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rcx = r10
	r8 = r13
	call fn0000000000450690 (retsize: 8;)
	Mem0[rsp + 0x20<64>:word64] = r12
	r9 = rax
	r8 = rsi
	rdx = rbp
	rcx = rdi
	rbx = rax
	call fn0000000000450960 (retsize: 8;)
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[rbx - 8<64>:word32] = __xadd(Mem0[rbx - 8<64>:word32], edx)
	SCZO = cond(Mem0[rbx - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(GT,SZO) l00000000004519D6
	// succ:  l0000000000451A41 l00000000004519D6
l0000000000451A41:
	rcx = rbx - 0x18<64>
	Mem0[rsp + 0x38<64>:word64] = rax
	call fn0000000000475550 (retsize: 8;)
	rax = Mem0[rsp + 0x38<64>:word64]
	goto l00000000004519D6
	// succ:  l00000000004519D6
l0000000000451A60:
	rbx = r10
	rbx = rbx - rcx
	SCZO = cond(rbx)
	// succ:  l0000000000451A66
l0000000000451A66:
	rdx = rbp
	rcx = rdi
	r9 = r12
	r8 = rsi
	call fn0000000000451CC0 (retsize: 8;)
	rcx = Mem0[rdi:word64]
	rdx = rcx + rbx
	rcx = rcx + rbp
	SCZO = cond(rcx)
	SCZO = cond(r12 - 1<64>)
	branch Test(NE,Z) l0000000000451AA0
	// succ:  l0000000000451A87 l0000000000451AA0
l0000000000451A87:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:byte] = al
	rax = rdi
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451960_exit
l0000000000451AA0:
	r8 = r12
	rax = memcpy(rcx, rdx, r8)
	rax = rdi
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451960_exit
l0000000000451AC0:
	r10 = r10 - rcx
	SCZO = cond(r10)
	r10 = r10 + r12
	SCZO = cond(r10)
	rbx = r10
	rbx = rbx - rsi
	SCZO = cond(rbx)
	goto l0000000000451A66
	// succ:  l0000000000451A66
l0000000000451ACE:
	rcx = 0x000000000048D6D3<p64>
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l0000000000451ADA
l0000000000451ADA:
	r8 = rdx
	rcx = 0x000000000048D5D0<p64>
	rdx = 0x000000000048D6D3<p64>
	call fn0000000000471560 (retsize: 8;)
	rcx = rbx - 0x18<64>
	rsi = rax
	rdx = r13
	call fn0000000000450A60 (retsize: 8;)
	rcx = rsi
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l0000000000451B0F_thunk_fn0000000000451B10
l0000000000451B0F_thunk_fn0000000000451B10:
	call fn0000000000451B10 (retsize: 0;)
	return
	// succ:  fn0000000000451960_exit
fn0000000000451960_exit:


// fn0000000000451B10
// Return size: 8
define fn0000000000451B10
fn0000000000451B10_entry:
	rsp = fp
	// succ:  l0000000000451B10
l0000000000451B10:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	r9 = Mem0[r9:word64]
	rax = Mem0[r9 - 0x18<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000451960 (retsize: 8;)
	rsp = rsp + 8<64>
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000451B10_exit
fn0000000000451B10_exit:


// fn0000000000451B30
// Return size: 0
define fn0000000000451B30
fn0000000000451B30_entry:
	rsp = fp
	// succ:  l0000000000451B30
l0000000000451B30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[r9:word64]
	r10 = Mem0[rsp + 0x50<64>:word64]
	r11 = Mem0[rsp + 0x58<64>:word64]
	r9 = Mem0[rbx - 0x18<64>:word64]
	rax = r9
	rax = rax - r10
	SCZO = cond(rax)
	SCZO = cond(rax - r11)
	branch Test(ULE,CZ) l0000000000451B53
	// succ:  l0000000000451B4F_1 l0000000000451B53
l0000000000451B4F_1:
	rax = r11
	// succ:  l0000000000451B53
l0000000000451B53:
	SCZO = cond(r10 - r9)
	branch Test(UGT,CZ) l0000000000451B6B
	// succ:  l0000000000451B58 l0000000000451B6B
l0000000000451B58:
	r9 = rbx + r10
	Mem0[rsp + 0x50<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000451B66_thunk_fn0000000000451960
l0000000000451B66_thunk_fn0000000000451960:
	call fn0000000000451960 (retsize: 0;)
	return
	// succ:  fn0000000000451B30_exit
l0000000000451B6B:
	rdx = 0x000000000048D6D3<p64>
	rcx = 0x000000000048D5D0<p64>
	r8 = r10
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000451B8F_thunk_fn0000000000451B90
l0000000000451B8F_thunk_fn0000000000451B90:
	call fn0000000000451B90 (retsize: 0;)
	return
	// succ:  fn0000000000451B30_exit
fn0000000000451B30_exit:


// fn0000000000451B90
// Return size: 0
define fn0000000000451B90
fn0000000000451B90_entry:
	rsp = fp
	// succ:  l0000000000451B90
l0000000000451B90:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r11d = CONVERT(Mem0[rsp + 0x50<64>:byte], byte, int32)
	r10 = Mem0[rax - 0x18<64>:word64]
	rax = r10
	rax = rax - rdx
	SCZO = cond(rax)
	SCZO = cond(rax - r8)
	branch Test(UGT,CZ) l0000000000451BAE
	// succ:  l0000000000451BAA_1 l0000000000451BAE
l0000000000451BAA_1:
	r8 = rax
	// succ:  l0000000000451BAE
l0000000000451BAE:
	SCZO = cond(rdx - r10)
	branch Test(UGT,CZ) l0000000000451BC1
	// succ:  l0000000000451BB3 l0000000000451BC1
l0000000000451BB3:
	Mem0[rsp + 0x50<64>:word32] = r11d
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	// succ:  l0000000000451BBC_thunk_fn00000000004508E0
l0000000000451BBC_thunk_fn00000000004508E0:
	call fn00000000004508E0 (retsize: 0;)
	return
	// succ:  fn0000000000451B90_exit
l0000000000451BC1:
	r8 = rdx
	rcx = 0x000000000048D5D0<p64>
	rdx = 0x000000000048D6D3<p64>
	r9 = r10
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000451BDF_thunk_fn0000000000451BE0
l0000000000451BDF_thunk_fn0000000000451BE0:
	call fn0000000000451BE0 (retsize: 0;)
	return
	// succ:  fn0000000000451B90_exit
fn0000000000451B90_exit:


// fn0000000000451BE0
// Return size: 8
define fn0000000000451BE0
fn0000000000451BE0_entry:
	rsp = fp
	// succ:  l0000000000451BE0
l0000000000451BE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	SCZO = cond(rdx - Mem0[rax - 0x10<64>:word64])
	branch Test(EQ,Z) l0000000000451C30
	// succ:  l0000000000451BEE l0000000000451C30
l0000000000451BEE:
	r9 = Mem0[rax - 0x18<64>:word64]
	rbx = rcx
	rcx = rax - 0x18<64>
	SCZO = cond(rdx - r9)
	branch Test(UGE,C) l0000000000451C00
	// succ:  l0000000000451BFC_1 l0000000000451C00
l0000000000451BFC_1:
	rdx = r9
	// succ:  l0000000000451C00
l0000000000451C00:
	r8 = rdx
	rdx = rsp + 0x3F<64>
	r8 = r8 - r9
	SCZO = cond(r8)
	call fn0000000000450B00 (retsize: 8;)
	rcx = Mem0[rbx:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], edx)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l0000000000451C40
	// succ:  l0000000000451C21 l0000000000451C40
l0000000000451C21:
	Mem0[rbx:word64] = rax
	// succ:  l0000000000451C24
l0000000000451C24:
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451BE0_exit
l0000000000451C30:
	r8d = Mem0[rax - 8<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d & r8d)
	C = false
	branch Test(GT,SZO) l0000000000451BEE
	// succ:  l0000000000451C39 l0000000000451BEE
l0000000000451C39:
	goto l0000000000451C24
	// succ:  l0000000000451C24
l0000000000451C40:
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn0000000000475550 (retsize: 8;)
	rax = Mem0[rsp + 0x28<64>:word64]
	goto l0000000000451C21
	// succ:  l0000000000451C21
fn0000000000451BE0_exit:


// fn0000000000451C60
// Return size: 8
define fn0000000000451C60
fn0000000000451C60_entry:
	rsp = fp
	// succ:  l0000000000451C60
l0000000000451C60:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r9 = Mem0[rax - 0x18<64>:word64]
	rdx = r9 - 1<64>
	SCZO = cond(rdx - r9)
	branch Test(UGT,CZ) l0000000000451C86
	// succ:  l0000000000451C74 l0000000000451C86
l0000000000451C74:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	// succ:  l0000000000451C81_thunk_fn0000000000451CC0
l0000000000451C81_thunk_fn0000000000451CC0:
	call fn0000000000451CC0 (retsize: 0;)
	return
	// succ:  fn0000000000451C60_exit
l0000000000451C86:
	r8 = rdx
	rcx = 0x000000000048D5D0<p64>
	rdx = 0x000000000048D68D<p64>
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000451C9F_thunk_fn0000000000451CA0
l0000000000451C9F_thunk_fn0000000000451CA0:
	call fn0000000000451CA0 (retsize: 0;)
	return
	// succ:  fn0000000000451C60_exit
fn0000000000451C60_exit:


// fn0000000000451CA0
// Return size: 8
define fn0000000000451CA0
fn0000000000451CA0_entry:
	rsp = fp
	// succ:  l0000000000451CA0
l0000000000451CA0:
	SCZO = cond(rdx - 1<64>)
	branch Test(EQ,Z) l0000000000451CB4
	// succ:  l0000000000451CA6 l0000000000451CB4
l0000000000451CA6:
	eax = CONVERT(r8b, byte, int32)
	r8 = rdx
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = memset(rcx, rdx, r8)
	return
	// succ:  fn0000000000451CA0_exit
l0000000000451CB4:
	Mem0[rcx:byte] = r8b
	return
	// succ:  fn0000000000451CA0_exit
fn0000000000451CA0_exit:


// fn0000000000451CC0
// Return size: 8
define fn0000000000451CC0
fn0000000000451CC0_entry:
	rsp = fp
	// succ:  l0000000000451CC0
l0000000000451CC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rsi = r9
	r13 = rdx
	r14 = rcx
	rsi = rsi - r8
	SCZO = cond(rsi)
	rbp = r8
	r12 = r9
	r10 = Mem0[rax - 0x18<64>:word64]
	rsi = rsi + r10
	SCZO = cond(rsi)
	r10 = r10 - rdx
	SCZO = cond(r10)
	rdx = Mem0[rax - 0x10<64>:word64]
	rdi = r10
	rdi = rdi - r8
	SCZO = cond(rdi)
	SCZO = cond(rsi - rdx)
	branch Test(UGT,CZ) l0000000000451D09
	// succ:  l0000000000451CFE l0000000000451D09
l0000000000451CFE:
	ecx = Mem0[rax - 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(LE,SZO) l0000000000451DA0
	// succ:  l0000000000451D09 l0000000000451DA0
l0000000000451D09:
	r8 = rsp + 0x2F<64>
	rcx = rsi
	call fn0000000000450B70 (retsize: 8;)
	rsp = rsp + 8<64>
	SZO = cond(r13 & r13)
	C = false
	r15 = rax
	rbx = rax + 0x18<64>
	branch Test(EQ,Z) l0000000000451D40
	// succ:  l0000000000451D22 l0000000000451D40
l0000000000451D22:
	SCZO = cond(r13 - 1<64>)
	rdx = Mem0[r14:word64]
	rbx = r15 + 0x18<64>
	branch Test(NE,Z) l0000000000451DF0
	// succ:  l0000000000451D33 l0000000000451DF0
l0000000000451D33:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r15 + 0x18<64>:byte] = al
	// succ:  l0000000000451D40
l0000000000451D40:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000451D64
	// succ:  l0000000000451D45 l0000000000451D64
l0000000000451D45:
	rcx = r13 + 0x18<64>
	rdx = rbp + 0<64> + r13
	rdx = rdx + Mem0[r14:word64]
	SCZO = cond(rdx)
	rcx = rcx + r15
	SCZO = cond(rcx)
	SCZO = cond(rdi - 1<64>)
	branch Test(NE,Z) l0000000000451DE0
	// succ:  l0000000000451D5F l0000000000451DE0
l0000000000451D5F:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:byte] = al
	// succ:  l0000000000451D64
l0000000000451D64:
	rcx = Mem0[r14:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000451E00
	// succ:  l0000000000451D79 l0000000000451E00
l0000000000451D79:
	Mem0[r14:word64] = rbx
	rax = rbx
	// succ:  l0000000000451D7F
l0000000000451D7F:
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = rsi
	Mem0[rax + rsi:byte] = 0<8>
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451CC0_exit
l0000000000451DA0:
	SCZO = cond(r8 - r9)
	branch Test(EQ,Z) l0000000000451D7F
	// succ:  l0000000000451DA5 l0000000000451D7F
l0000000000451DA5:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000451D7F
	// succ:  l0000000000451DAA l0000000000451D7F
l0000000000451DAA:
	rbp = rbp + r13
	SCZO = cond(rbp)
	r12 = r12 + r13
	SCZO = cond(r12)
	SCZO = cond(rdi - 1<64>)
	rdx = rax + rbp
	rcx = rax
	branch Test(EQ,Z) l0000000000451DD0
	// succ:  l0000000000451DBE l0000000000451DD0
l0000000000451DBE:
	r8 = rdi
	rax = memmove(rcx, rdx, r8)
	rax = Mem0[r14:word64]
	goto l0000000000451D7F
	// succ:  l0000000000451D7F
l0000000000451DD0:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:byte] = al
	rax = Mem0[r14:word64]
	goto l0000000000451D7F
	// succ:  l0000000000451D7F
l0000000000451DE0:
	r8 = rdi
	rax = memcpy(rcx, rdx, r8)
	goto l0000000000451D64
	// succ:  l0000000000451D64
l0000000000451DF0:
	r8 = r13
	rcx = rbx
	rax = memcpy(rcx, rdx, r8)
	goto l0000000000451D40
	// succ:  l0000000000451D40
l0000000000451E00:
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000475550 (retsize: 8;)
	goto l0000000000451D79
	// succ:  l0000000000451D79
fn0000000000451CC0_exit:


// fn0000000000451E10
// Return size: 8
define fn0000000000451E10
fn0000000000451E10_entry:
	rsp = fp
	// succ:  l0000000000451E10
l0000000000451E10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rsi = rcx
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	rcx = Mem0[rax - 0x18<64>:word64]
	rbx = rcx + 1<64>
	SCZO = cond(rbx - Mem0[rax - 0x10<64>:word64])
	branch Test(UGT,CZ) l0000000000451E34
	// succ:  l0000000000451E2D l0000000000451E34
l0000000000451E2D:
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l0000000000451E46
	// succ:  l0000000000451E34 l0000000000451E46
l0000000000451E34:
	rcx = rsi
	rdx = rbx
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rcx = Mem0[rax - 0x18<64>:word64]
	// succ:  l0000000000451E46
l0000000000451E46:
	Mem0[rax + rcx:byte] = dil
	rax = Mem0[rsi:word64]
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = rbx
	Mem0[rax + rbx:byte] = 0<8>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451E10_exit
fn0000000000451E10_exit:


// fn0000000000451E70
// Return size: 8
define fn0000000000451E70
fn0000000000451E70_entry:
	rsp = fp
	// succ:  l0000000000451E70
l0000000000451E70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r8 = rsp + 0x2F<64>
	rbx = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx:word64] = rax
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call fn00000000004505D0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451E70_exit
fn0000000000451E70_exit:


// fn0000000000451EA0
// Return size: 8
define fn0000000000451EA0
fn0000000000451EA0_entry:
	rsp = fp
	// succ:  l0000000000451EA0
l0000000000451EA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbx = rdx
	rsi = rcx
	rdx = 0xFFFFFFFFFFFFFFFF<64>
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000451ECE
	// succ:  l0000000000451EB8 l0000000000451ECE
l0000000000451EB8:
	rcx = rbx
	Mem0[rsp + 0x28<64>:word64] = r8
	eax = strlen(rcx)
	r8 = Mem0[rsp + 0x28<64>:word64]
	rdx = rbx + rax
	// succ:  l0000000000451ECE
l0000000000451ECE:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rcx = rbx
	call fn0000000000450690 (retsize: 8;)
	Mem0[rsi:word64] = rax
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451EA0_exit
fn0000000000451EA0_exit:


// fn0000000000451EF0
// Return size: 8
define fn0000000000451EF0
fn0000000000451EF0_entry:
	rsp = fp
	// succ:  l0000000000451EF0
l0000000000451EF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rax = rdx
	rcx = r9
	rdx = rdx + r8
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rcx
	rcx = rax
	call fn0000000000450690 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451EF0_exit
fn0000000000451EF0_exit:


// fn0000000000451F20
// Return size: 8
define fn0000000000451F20
fn0000000000451F20_entry:
	rsp = fp
	// succ:  l0000000000451F20
l0000000000451F20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	r8 = rdx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn00000000004505D0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451F20_exit
fn0000000000451F20_exit:


// fn0000000000451F40
// Return size: 8
define fn0000000000451F40
fn0000000000451F40_entry:
	rsp = fp
	// succ:  l0000000000451F40
l0000000000451F40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l0000000000451F60
	// succ:  l0000000000451F52 l0000000000451F60
l0000000000451F52:
	__lock()
	v12 = Mem0[rax - 8<64>:word32] + 1<32>
	Mem0[rax - 8<64>:word32] = v12
	SCZO = cond(v12)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451F40_exit
l0000000000451F60:
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000450B00 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451F40_exit
fn0000000000451F40_exit:


// fn0000000000451F80
// Return size: 8
define fn0000000000451F80
fn0000000000451F80_entry:
	rsp = fp
	// succ:  l0000000000451F80
l0000000000451F80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	r10 = Mem0[rdx:word64]
	rdx = r9
	rbx = rcx
	r11 = Mem0[r10 - 0x18<64>:word64]
	rax = r11
	rax = rax - r8
	SCZO = cond(rax)
	SCZO = cond(rax - r9)
	branch Test(UGT,CZ) l0000000000451F9F
	// succ:  l0000000000451F9B_1 l0000000000451F9F
l0000000000451F9B_1:
	rdx = rax
	// succ:  l0000000000451F9F
l0000000000451F9F:
	rdx = rdx + r8
	SCZO = cond(rdx)
	rdx = rdx + r10
	SCZO = cond(rdx)
	SCZO = cond(r8 - r11)
	branch Test(UGT,CZ) l0000000000451FC4
	// succ:  l0000000000451FAA l0000000000451FC4
l0000000000451FAA:
	rcx = r10 + r8
	r8 = rsp + 0x2F<64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000450790 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451F80_exit
l0000000000451FC4:
	rdx = 0x000000000048D752<p64>
	rcx = 0x000000000048D5D0<p64>
	r9 = r11
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000451FDF_thunk_fn0000000000451FE0
l0000000000451FDF_thunk_fn0000000000451FE0:
	call fn0000000000451FE0 (retsize: 0;)
	return
	// succ:  fn0000000000451F80_exit
fn0000000000451F80_exit:


// fn0000000000451FE0
// Return size: 8
define fn0000000000451FE0
fn0000000000451FE0_entry:
	rsp = fp
	// succ:  l0000000000451FE0
l0000000000451FE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r10 = Mem0[rdx:word64]
	rdx = r9
	rbx = rcx
	r11 = Mem0[r10 - 0x18<64>:word64]
	rax = r11
	rax = rax - r8
	SCZO = cond(rax)
	SCZO = cond(rax - r9)
	branch Test(UGT,CZ) l0000000000451FFF
	// succ:  l0000000000451FFB_1 l0000000000451FFF
l0000000000451FFB_1:
	rdx = rax
	// succ:  l0000000000451FFF
l0000000000451FFF:
	rdx = rdx + r8
	SCZO = cond(rdx)
	rdx = rdx + r10
	SCZO = cond(rdx)
	SCZO = cond(r8 - r11)
	branch Test(UGT,CZ) l0000000000452024
	// succ:  l000000000045200A l0000000000452024
l000000000045200A:
	rcx = r10 + r8
	r8 = Mem0[rsp + 0x50<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000450790 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000451FE0_exit
l0000000000452024:
	rdx = 0x000000000048D752<p64>
	rcx = 0x000000000048D5D0<p64>
	r9 = r11
	call fn0000000000471560 (retsize: 8;)
	// succ:  l000000000045203F_thunk_fn0000000000452040
l000000000045203F_thunk_fn0000000000452040:
	call fn0000000000452040 (retsize: 0;)
	return
	// succ:  fn0000000000451FE0_exit
fn0000000000451FE0_exit:


// fn0000000000452040
// Return size: 8
define fn0000000000452040
fn0000000000452040_entry:
	rsp = fp
	// succ:  l0000000000452040
l0000000000452040:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rbx = rcx
	rcx = Mem0[rdx:word64]
	rax = rcx
	rax = rax + Mem0[rdx + 8<64>:word64]
	SCZO = cond(rax)
	rdx = rax
	call fn0000000000450690 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452040_exit
fn0000000000452040_exit:


// fn0000000000452070
// Return size: 8
define fn0000000000452070
fn0000000000452070_entry:
	rsp = fp
	// succ:  l0000000000452070
l0000000000452070:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = rsp + 0x2F<64>
	rbx = rcx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call fn00000000004505D0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452070_exit
fn0000000000452070_exit:


// fn0000000000452090
// Return size: 8
define fn0000000000452090
fn0000000000452090_entry:
	rsp = fp
	// succ:  l0000000000452090
l0000000000452090:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	edx = CONVERT(r8b, byte, int32)
	r8 = r9
	call fn00000000004505D0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452090_exit
fn0000000000452090_exit:


// fn00000000004520B0
// Return size: 8
define fn00000000004520B0
fn00000000004520B0_entry:
	rsp = fp
	// succ:  l00000000004520B0
l00000000004520B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	rdx = r8
	r8 = r9
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000450630 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004520B0_exit
fn00000000004520B0_exit:


// fn00000000004520E0
// Return size: 8
define fn00000000004520E0
fn00000000004520E0_entry:
	rsp = fp
	// succ:  l00000000004520E0
l00000000004520E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	rdx = r8
	r8 = r9
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000450690 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004520E0_exit
fn00000000004520E0_exit:


// fn0000000000452110
// Return size: 8
define fn0000000000452110
fn0000000000452110_entry:
	rsp = fp
	// succ:  l0000000000452110
l0000000000452110:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	rdx = r8
	r8 = r9
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000450790 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452110_exit
fn0000000000452110_exit:


// fn0000000000452140
// Return size: 8
define fn0000000000452140
fn0000000000452140_entry:
	rsp = fp
	// succ:  l0000000000452140
l0000000000452140:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r8 = rsp + 0x2F<64>
	rbx = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx:word64] = rax
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call fn00000000004505D0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452140_exit
fn0000000000452140_exit:


// fn0000000000452170
// Return size: 8
define fn0000000000452170
fn0000000000452170_entry:
	rsp = fp
	// succ:  l0000000000452170
l0000000000452170:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbx = rdx
	rsi = rcx
	rdx = 0xFFFFFFFFFFFFFFFF<64>
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000045219E
	// succ:  l0000000000452188 l000000000045219E
l0000000000452188:
	rcx = rbx
	Mem0[rsp + 0x28<64>:word64] = r8
	eax = strlen(rcx)
	r8 = Mem0[rsp + 0x28<64>:word64]
	rdx = rbx + rax
	// succ:  l000000000045219E
l000000000045219E:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rcx = rbx
	call fn0000000000450690 (retsize: 8;)
	Mem0[rsi:word64] = rax
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452170_exit
fn0000000000452170_exit:


// fn00000000004521C0
// Return size: 8
define fn00000000004521C0
fn00000000004521C0_entry:
	rsp = fp
	// succ:  l00000000004521C0
l00000000004521C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rax = rdx
	rcx = r9
	rdx = rdx + r8
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rcx
	rcx = rax
	call fn0000000000450690 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004521C0_exit
fn00000000004521C0_exit:


// fn00000000004521F0
// Return size: 8
define fn00000000004521F0
fn00000000004521F0_entry:
	rsp = fp
	// succ:  l00000000004521F0
l00000000004521F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	r8 = rdx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn00000000004505D0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004521F0_exit
fn00000000004521F0_exit:


// fn0000000000452210
// Return size: 8
define fn0000000000452210
fn0000000000452210_entry:
	rsp = fp
	// succ:  l0000000000452210
l0000000000452210:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l0000000000452230
	// succ:  l0000000000452222 l0000000000452230
l0000000000452222:
	__lock()
	v12 = Mem0[rax - 8<64>:word32] + 1<32>
	Mem0[rax - 8<64>:word32] = v12
	SCZO = cond(v12)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452210_exit
l0000000000452230:
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000450B00 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452210_exit
fn0000000000452210_exit:


// fn0000000000452250
// Return size: 8
define fn0000000000452250
fn0000000000452250_entry:
	rsp = fp
	// succ:  l0000000000452250
l0000000000452250:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	r10 = Mem0[rdx:word64]
	rdx = r9
	rbx = rcx
	r11 = Mem0[r10 - 0x18<64>:word64]
	rax = r11
	rax = rax - r8
	SCZO = cond(rax)
	SCZO = cond(rax - r9)
	branch Test(UGT,CZ) l000000000045226F
	// succ:  l000000000045226B_1 l000000000045226F
l000000000045226B_1:
	rdx = rax
	// succ:  l000000000045226F
l000000000045226F:
	rdx = rdx + r8
	SCZO = cond(rdx)
	rdx = rdx + r10
	SCZO = cond(rdx)
	SCZO = cond(r8 - r11)
	branch Test(UGT,CZ) l0000000000452294
	// succ:  l000000000045227A l0000000000452294
l000000000045227A:
	rcx = r10 + r8
	r8 = rsp + 0x2F<64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000450790 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452250_exit
l0000000000452294:
	rdx = 0x000000000048D752<p64>
	rcx = 0x000000000048D5D0<p64>
	r9 = r11
	call fn0000000000471560 (retsize: 8;)
	// succ:  l00000000004522AF_thunk_fn00000000004522B0
l00000000004522AF_thunk_fn00000000004522B0:
	call fn00000000004522B0 (retsize: 0;)
	return
	// succ:  fn0000000000452250_exit
fn0000000000452250_exit:


// fn00000000004522B0
// Return size: 8
define fn00000000004522B0
fn00000000004522B0_entry:
	rsp = fp
	// succ:  l00000000004522B0
l00000000004522B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r10 = Mem0[rdx:word64]
	rdx = r9
	rbx = rcx
	r11 = Mem0[r10 - 0x18<64>:word64]
	rax = r11
	rax = rax - r8
	SCZO = cond(rax)
	SCZO = cond(rax - r9)
	branch Test(UGT,CZ) l00000000004522CF
	// succ:  l00000000004522CB_1 l00000000004522CF
l00000000004522CB_1:
	rdx = rax
	// succ:  l00000000004522CF
l00000000004522CF:
	rdx = rdx + r8
	SCZO = cond(rdx)
	rdx = rdx + r10
	SCZO = cond(rdx)
	SCZO = cond(r8 - r11)
	branch Test(UGT,CZ) l00000000004522F4
	// succ:  l00000000004522DA l00000000004522F4
l00000000004522DA:
	rcx = r10 + r8
	r8 = Mem0[rsp + 0x50<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000450790 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004522B0_exit
l00000000004522F4:
	rdx = 0x000000000048D752<p64>
	rcx = 0x000000000048D5D0<p64>
	r9 = r11
	call fn0000000000471560 (retsize: 8;)
	// succ:  l000000000045230F_thunk_fn0000000000452310
l000000000045230F_thunk_fn0000000000452310:
	call fn0000000000452310 (retsize: 0;)
	return
	// succ:  fn00000000004522B0_exit
fn00000000004522B0_exit:


// fn0000000000452310
// Return size: 8
define fn0000000000452310
fn0000000000452310_entry:
	rsp = fp
	// succ:  l0000000000452310
l0000000000452310:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rbx = rcx
	rcx = Mem0[rdx:word64]
	rax = rcx
	rax = rax + Mem0[rdx + 8<64>:word64]
	SCZO = cond(rax)
	rdx = rax
	call fn0000000000450690 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452310_exit
fn0000000000452310_exit:


// fn0000000000452340
// Return size: 8
define fn0000000000452340
fn0000000000452340_entry:
	rsp = fp
	// succ:  l0000000000452340
l0000000000452340:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = rsp + 0x2F<64>
	rbx = rcx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call fn00000000004505D0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452340_exit
fn0000000000452340_exit:


// fn0000000000452360
// Return size: 8
define fn0000000000452360
fn0000000000452360_entry:
	rsp = fp
	// succ:  l0000000000452360
l0000000000452360:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	edx = CONVERT(r8b, byte, int32)
	r8 = r9
	call fn00000000004505D0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452360_exit
fn0000000000452360_exit:


// fn0000000000452380
// Return size: 8
define fn0000000000452380
fn0000000000452380_entry:
	rsp = fp
	// succ:  l0000000000452380
l0000000000452380:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	rdx = r8
	r8 = r9
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000450630 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452380_exit
fn0000000000452380_exit:


// fn00000000004523B0
// Return size: 8
define fn00000000004523B0
fn00000000004523B0_entry:
	rsp = fp
	// succ:  l00000000004523B0
l00000000004523B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	rdx = r8
	r8 = r9
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000450690 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004523B0_exit
fn00000000004523B0_exit:


// fn00000000004523E0
// Return size: 8
define fn00000000004523E0
fn00000000004523E0_entry:
	rsp = fp
	// succ:  l00000000004523E0
l00000000004523E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	rdx = r8
	r8 = r9
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	call fn0000000000450790 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004523E0_exit
fn00000000004523E0_exit:


// fn0000000000452410
// Return size: 8
define fn0000000000452410
fn0000000000452410_entry:
	rsp = fp
	// succ:  l0000000000452410
l0000000000452410:
	rcx = Mem0[rcx:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000452423
	// succ:  l0000000000452421 l0000000000452423
l0000000000452421:
	return
	// succ:  fn0000000000452410_exit
l0000000000452423:
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	// succ:  l0000000000452427_thunk_fn0000000000475550
l0000000000452427_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000452410_exit
fn0000000000452410_exit:


// fn0000000000452430
// Return size: 8
define fn0000000000452430
fn0000000000452430_entry:
	rsp = fp
	// succ:  l0000000000452430
l0000000000452430:
	rcx = Mem0[rcx:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000452443
	// succ:  l0000000000452441 l0000000000452443
l0000000000452441:
	return
	// succ:  fn0000000000452430_exit
l0000000000452443:
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	// succ:  l0000000000452447_thunk_fn0000000000475550
l0000000000452447_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000452430_exit
fn0000000000452430_exit:


// fn0000000000452450
// Return size: 8
define fn0000000000452450
fn0000000000452450_entry:
	rsp = fp
	// succ:  l0000000000452450
l0000000000452450:
	r8 = Mem0[rcx:word64]
	rax = rcx
	r10d = Mem0[r8 - 8<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d & r10d)
	C = false
	branch Test(SG,S) l0000000000452480
	// succ:  l000000000045245F l0000000000452480
l000000000045245F:
	rcx = Mem0[rdx:word64]
	r9d = Mem0[rcx - 8<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NS,S) l0000000000452472
	// succ:  l000000000045246B l0000000000452472
l000000000045246B:
	Mem0[rcx - 8<64>:word32] = 0<32>
	// succ:  l0000000000452472
l0000000000452472:
	Mem0[rax:word64] = rcx
	Mem0[rdx:word64] = r8
	return
	// succ:  fn0000000000452450_exit
l0000000000452480:
	Mem0[r8 - 8<64>:word32] = 0<32>
	goto l000000000045245F
	// succ:  l000000000045245F
fn0000000000452450_exit:


// fn0000000000452490
// Return size: 8
define fn0000000000452490
fn0000000000452490_entry:
	rsp = fp
	// succ:  l0000000000452490
l0000000000452490:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx
	rbx = rdx
	rcx = rdx
	eax = strlen(rcx)
	rdx = rbx
	r8 = rax
	rcx = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004524B3_thunk_fn00000000004511C0
l00000000004524B3_thunk_fn00000000004511C0:
	call fn00000000004511C0 (retsize: 0;)
	return
	// succ:  fn0000000000452490_exit
fn0000000000452490_exit:


// fn00000000004524C0
// Return size: 0
define fn00000000004524C0
fn00000000004524C0_entry:
	rsp = fp
	// succ:  l00000000004524C0
l00000000004524C0:
	// succ:  l00000000004524C0_thunk_fn0000000000451290
l00000000004524C0_thunk_fn0000000000451290:
	call fn0000000000451290 (retsize: 0;)
	return
	// succ:  fn00000000004524C0_exit
fn00000000004524C0_exit:


// fn00000000004524D0
// Return size: 8
define fn00000000004524D0
fn00000000004524D0_entry:
	rsp = fp
	// succ:  l00000000004524D0
l00000000004524D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = rdx
	rdx = Mem0[rdx:word64]
	rbx = rcx
	r8 = Mem0[rax + 8<64>:word64]
	call fn00000000004511C0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004524D0_exit
fn00000000004524D0_exit:


// fn00000000004524F0
// Return size: 8
define fn00000000004524F0
fn00000000004524F0_entry:
	rsp = fp
	// succ:  l00000000004524F0
l00000000004524F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	edx = CONVERT(dl, byte, int32)
	rbx = rcx
	r8 = Mem0[rax - 0x18<64>:word64]
	Mem0[rsp + 0x20<64>:word32] = edx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn00000000004508E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004524F0_exit
fn00000000004524F0_exit:


// fn0000000000452520
// Return size: 8
define fn0000000000452520
fn0000000000452520_entry:
	rsp = fp
	// succ:  l0000000000452520
l0000000000452520:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rdx
	rsi = rcx
	edx = Mem0[rax - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l000000000045253E
	// succ:  l0000000000452536 l000000000045253E
l0000000000452536:
	call fn00000000004505A0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	// succ:  l000000000045253E
l000000000045253E:
	rax = rax + rbx
	SCZO = cond(rax)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452520_exit
fn0000000000452520_exit:


// fn0000000000452550
// Return size: 8
define fn0000000000452550
fn0000000000452550_entry:
	rsp = fp
	// succ:  l0000000000452550
l0000000000452550:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	rsi = rdx
	eax = strlen(rcx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000452577
	// succ:  l0000000000452569 l0000000000452577
l0000000000452569:
	r8 = rax
	rdx = rsi
	rcx = rbx
	call fn0000000000450E20 (retsize: 8;)
	// succ:  l0000000000452577
l0000000000452577:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452550_exit
fn0000000000452550_exit:


// fn0000000000452590
// Return size: 8
define fn0000000000452590
fn0000000000452590_entry:
	rsp = fp
	// succ:  l0000000000452590
l0000000000452590:
	// succ:  l0000000000452590_thunk_fn0000000000450F00
l0000000000452590_thunk_fn0000000000450F00:
	call fn0000000000450F00 (retsize: 0;)
	return
	// succ:  fn0000000000452590_exit
fn0000000000452590_exit:


// fn00000000004525A0
// Return size: 8
define fn00000000004525A0
fn00000000004525A0_entry:
	rsp = fp
	// succ:  l00000000004525A0
l00000000004525A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r8 = Mem0[rdx + 8<64>:word64]
	rax = Mem0[rdx:word64]
	rbx = rcx
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l00000000004525BC
	// succ:  l00000000004525B4 l00000000004525BC
l00000000004525B4:
	rdx = rax
	call fn0000000000450E20 (retsize: 8;)
	// succ:  l00000000004525BC
l00000000004525BC:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004525A0_exit
fn00000000004525A0_exit:


// fn00000000004525D0
// Return size: 8
define fn00000000004525D0
fn00000000004525D0_entry:
	rsp = fp
	// succ:  l00000000004525D0
l00000000004525D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r8 = Mem0[rcx:word64]
	rbx = rcx
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	rax = Mem0[r8 - 0x18<64>:word64]
	rsi = rax + 1<64>
	SCZO = cond(rsi - Mem0[r8 - 0x10<64>:word64])
	branch Test(UGT,CZ) l00000000004525F5
	// succ:  l00000000004525ED l00000000004525F5
l00000000004525ED:
	edx = Mem0[r8 - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l0000000000452607
	// succ:  l00000000004525F5 l0000000000452607
l00000000004525F5:
	rdx = rsi
	rcx = rbx
	call fn0000000000451BE0 (retsize: 8;)
	r8 = Mem0[rbx:word64]
	rax = Mem0[r8 - 0x18<64>:word64]
	// succ:  l0000000000452607
l0000000000452607:
	Mem0[r8 + rax:byte] = dil
	rax = Mem0[rbx:word64]
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = rsi
	Mem0[rax + rsi:byte] = 0<8>
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004525D0_exit
fn00000000004525D0_exit:


// fn0000000000452630
// Return size: 8
define fn0000000000452630
fn0000000000452630_entry:
	rsp = fp
	// succ:  l0000000000452630
l0000000000452630:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452630_exit
fn0000000000452630_exit:


// fn0000000000452640
// Return size: 8
define fn0000000000452640
fn0000000000452640_entry:
	rsp = fp
	// succ:  l0000000000452640
l0000000000452640:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rcx = rbp + 0x10<64>
	call fn000000000042AC50 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452640_exit
fn0000000000452640_exit:


// fn0000000000452660
// Return size: 8
define fn0000000000452660
fn0000000000452660_entry:
	rsp = fp
	// succ:  l0000000000452660
l0000000000452660:
	eax = Mem0[rcx + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdx:byte] = 0x25<8>
	rcx = rdx + 1<64>
	SZO = cond(ah & 8<8>)
	C = false
	branch Test(EQ,Z) l0000000000452677
	// succ:  l000000000045266F l0000000000452677
l000000000045266F:
	rcx = rdx + 2<64>
	Mem0[rdx + 1<64>:byte] = 0x2B<8>
	// succ:  l0000000000452677
l0000000000452677:
	SZO = cond(ah & 4<8>)
	C = false
	branch Test(EQ,Z) l0000000000452683
	// succ:  l000000000045267C l0000000000452683
l000000000045267C:
	Mem0[rcx:byte] = 0x23<8>
	rcx = rcx + 1<64>
	SCZO = cond(rcx)
	// succ:  l0000000000452683
l0000000000452683:
	SZO = cond(r8b & r8b)
	C = false
	Mem0[rcx:byte] = 0x2E<8>
	Mem0[rcx + 1<64>:byte] = 0x2A<8>
	rdx = rcx + 2<64>
	branch Test(EQ,Z) l000000000045269B
	// succ:  l0000000000452693 l000000000045269B
l0000000000452693:
	rdx = rcx + 3<64>
	Mem0[rcx + 2<64>:byte] = r8b
	// succ:  l000000000045269B
l000000000045269B:
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx & 0x104<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	SCZO = cond(ecx - 4<32>)
	branch Test(EQ,Z) l00000000004526E0
	// succ:  l00000000004526A8 l00000000004526E0
l00000000004526A8:
	eax = eax & 0x4000<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 1<32>)
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & 0x20<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(ecx - 0x100<32>)
	rcx = rdx + 1<64>
	branch Test(EQ,Z) l00000000004526D0
	// succ:  l00000000004526C1 l00000000004526D0
l00000000004526C1:
	eax = eax + 0x47<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rdx:byte] = al
	Mem0[rcx:byte] = 0<8>
	return
	// succ:  fn0000000000452660_exit
l00000000004526D0:
	eax = eax + 0x45<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rdx:byte] = al
	Mem0[rcx:byte] = 0<8>
	return
	// succ:  fn0000000000452660_exit
l00000000004526E0:
	rcx = rdx + 1<64>
	Mem0[rdx:byte] = 0x66<8>
	Mem0[rcx:byte] = 0<8>
	return
	// succ:  fn0000000000452660_exit
fn0000000000452660_exit:


// fn00000000004526F0
// Return size: 0
define fn00000000004526F0
fn00000000004526F0_entry:
	rsp = fp
	// succ:  l00000000004526F0
l00000000004526F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496150<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046F0F0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045270F_thunk_fn0000000000475550
l000000000045270F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn00000000004526F0_exit
fn00000000004526F0_exit:


// fn0000000000452720
// Return size: 8
define fn0000000000452720
fn0000000000452720_entry:
	rsp = fp
	// succ:  l0000000000452720
l0000000000452720:
	rax = 0x0000000000496150<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000045272A_thunk_fn000000000046F0F0
l000000000045272A_thunk_fn000000000046F0F0:
	call fn000000000046F0F0 (retsize: 0;)
	return
	// succ:  fn0000000000452720_exit
fn0000000000452720_exit:


// fn0000000000452730
// Return size: 8
define fn0000000000452730
fn0000000000452730_entry:
	rsp = fp
	// succ:  l0000000000452730
l0000000000452730:
	rax = Mem0[0x0000000000491710<p64>:word64]
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000452730_exit
fn0000000000452730_exit:


// fn0000000000452740
// Return size: 8
define fn0000000000452740
fn0000000000452740_entry:
	rsp = fp
	// succ:  l0000000000452740
l0000000000452740:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x10<64>:word64]
	rbx = rcx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004527E0
	// succ:  l0000000000452755 l00000000004527E0
l0000000000452755:
	Mem0[rax + 0x21<64>:byte] = 0x2E<8>
	rdx = Mem0[0x0000000000491710<p64>:word64]
	rcx = 0x000000000048E370<p64>
	rax = Mem0[rbx + 0x10<64>:word64]
	edx = Mem0[rdx:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rax + 0x22<64>:byte] = 0x2C<8>
	rax = Mem0[rbx + 0x10<64>:word64]
	Mem0[rax + 0x10<64>:word64] = rcx
	Mem0[rax + 0x28<64>:word64] = rcx
	Mem0[rax + 0x38<64>:word64] = rcx
	Mem0[rax + 0x48<64>:word64] = rcx
	Mem0[rax + 0x18<64>:word64] = 0<64>
	Mem0[rax + 0x30<64>:word64] = 0<64>
	Mem0[rax + 0x40<64>:word64] = 0<64>
	Mem0[rax + 0x50<64>:word64] = 0<64>
	Mem0[rax + 0x58<64>:word32] = 0<32>
	Mem0[rax + 0x5C<64>:word32] = edx
	rax = Mem0[rbx + 0x10<64>:word64]
	Mem0[rax + 0x60<64>:word32] = edx
	rax = Mem0[0x0000000000491720<p64>:word64]
	rcx = Mem0[rax:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l00000000004527C2
l00000000004527C2:
	r8d = CONVERT(Mem0[rcx + rax:byte], byte, word32)
	r8 = CONVERT(r8d, word32, uint64)
	rdx = Mem0[rbx + 0x10<64>:word64]
	Mem0[rdx + 0x64<64> + rax:byte] = r8b
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 0xB<64>)
	branch Test(NE,Z) l00000000004527C2
	// succ:  l00000000004527DA l00000000004527C2
l00000000004527DA:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452740_exit
l00000000004527E0:
	ecx = 0x70<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rcx = Mem0[0x0000000000491CB0<p64>:word64]
	Mem0[rax + 8<64>:word32] = 0<32>
	Mem0[rax + 0x10<64>:word64] = 0<64>
	Mem0[rax + 0x18<64>:word64] = 0<64>
	Mem0[rax + 0x20<64>:byte] = 0<8>
	Mem0[rax + 0x21<64>:byte] = 0<8>
	rdx = rcx + 0x10<64>
	Mem0[rax + 0x22<64>:byte] = 0<8>
	Mem0[rax + 0x28<64>:word64] = 0<64>
	Mem0[rax + 0x30<64>:word64] = 0<64>
	Mem0[rax + 0x38<64>:word64] = 0<64>
	Mem0[rax:word64] = rdx
	Mem0[rax + 0x40<64>:word64] = 0<64>
	Mem0[rax + 0x48<64>:word64] = 0<64>
	Mem0[rax + 0x50<64>:word64] = 0<64>
	Mem0[rax + 0x58<64>:word32] = 0<32>
	Mem0[rax + 0x5C<64>:byte] = 0<8>
	Mem0[rax + 0x5D<64>:byte] = 0<8>
	Mem0[rax + 0x5E<64>:byte] = 0<8>
	Mem0[rax + 0x5F<64>:byte] = 0<8>
	Mem0[rax + 0x60<64>:byte] = 0<8>
	Mem0[rax + 0x61<64>:byte] = 0<8>
	Mem0[rax + 0x62<64>:byte] = 0<8>
	Mem0[rax + 0x63<64>:byte] = 0<8>
	Mem0[rax + 0x6F<64>:byte] = 0<8>
	Mem0[rbx + 0x10<64>:word64] = rax
	goto l0000000000452755
	// succ:  l0000000000452755
fn0000000000452740_exit:


// fn0000000000452880
// Return size: 8
define fn0000000000452880
fn0000000000452880_entry:
	rsp = fp
	// succ:  l0000000000452880
l0000000000452880:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	Mem0[rcx + 0x10<64>:word64] = rdx
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496190<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000452740 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452880_exit
fn0000000000452880_exit:


// fn00000000004528D0
// Return size: 8
define fn00000000004528D0
fn00000000004528D0_entry:
	rsp = fp
	// succ:  l00000000004528D0
l00000000004528D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r9 & r9)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496190<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000452740 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004528D0_exit
fn00000000004528D0_exit:


// fn0000000000452920
// Return size: 8
define fn0000000000452920
fn0000000000452920_entry:
	rsp = fp
	// succ:  l0000000000452920
l0000000000452920:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496190<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000452740 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452920_exit
fn0000000000452920_exit:


// fn0000000000452970
// Return size: 8
define fn0000000000452970
fn0000000000452970_entry:
	rsp = fp
	// succ:  l0000000000452970
l0000000000452970:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	Mem0[rcx + 0x10<64>:word64] = rdx
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496190<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000452740 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452970_exit
fn0000000000452970_exit:


// fn00000000004529C0
// Return size: 8
define fn00000000004529C0
fn00000000004529C0_entry:
	rsp = fp
	// succ:  l00000000004529C0
l00000000004529C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r9 & r9)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496190<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000452740 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004529C0_exit
fn00000000004529C0_exit:


// fn0000000000452A10
// Return size: 8
define fn0000000000452A10
fn0000000000452A10_entry:
	rsp = fp
	// succ:  l0000000000452A10
l0000000000452A10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496190<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000452740 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452A10_exit
fn0000000000452A10_exit:


// fn0000000000452A60
// Return size: 0
define fn0000000000452A60
fn0000000000452A60_entry:
	rsp = fp
	// succ:  l0000000000452A60
l0000000000452A60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000452A80 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000452A75_thunk_fn0000000000475550
l0000000000452A75_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000452A60_exit
fn0000000000452A60_exit:


// fn0000000000452A80
// Return size: 0
define fn0000000000452A80
fn0000000000452A80_entry:
	rsp = fp
	// succ:  l0000000000452A80
l0000000000452A80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491B80<p64>:word64]
	rbx = rcx
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	rcx = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000452AA6
	// succ:  l0000000000452AA0 l0000000000452AA6
l0000000000452AA0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 8<64>:word64] (retsize: 8;)
	// succ:  l0000000000452AA6
l0000000000452AA6:
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000452AAF_thunk_fn000000000046AD20
l0000000000452AAF_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000452A80_exit
fn0000000000452A80_exit:


// fn0000000000452AD0
// Return size: 8
define fn0000000000452AD0
fn0000000000452AD0_entry:
	rsp = fp
	// succ:  l0000000000452AD0
l0000000000452AD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x10<64>:word64]
	rbx = rcx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000452B70
	// succ:  l0000000000452AE5 l0000000000452B70
l0000000000452AE5:
	Mem0[rax + 0x21<64>:byte] = 0x2E<8>
	rdx = Mem0[0x0000000000491710<p64>:word64]
	rcx = 0x000000000048E370<p64>
	rax = Mem0[rbx + 0x10<64>:word64]
	edx = Mem0[rdx:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rax + 0x22<64>:byte] = 0x2C<8>
	rax = Mem0[rbx + 0x10<64>:word64]
	Mem0[rax + 0x10<64>:word64] = rcx
	Mem0[rax + 0x28<64>:word64] = rcx
	Mem0[rax + 0x38<64>:word64] = rcx
	Mem0[rax + 0x48<64>:word64] = rcx
	Mem0[rax + 0x18<64>:word64] = 0<64>
	Mem0[rax + 0x30<64>:word64] = 0<64>
	Mem0[rax + 0x40<64>:word64] = 0<64>
	Mem0[rax + 0x50<64>:word64] = 0<64>
	Mem0[rax + 0x58<64>:word32] = 0<32>
	Mem0[rax + 0x5C<64>:word32] = edx
	rax = Mem0[rbx + 0x10<64>:word64]
	Mem0[rax + 0x60<64>:word32] = edx
	rax = Mem0[0x0000000000491720<p64>:word64]
	rcx = Mem0[rax:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000452B52
l0000000000452B52:
	r8d = CONVERT(Mem0[rcx + rax:byte], byte, word32)
	r8 = CONVERT(r8d, word32, uint64)
	rdx = Mem0[rbx + 0x10<64>:word64]
	Mem0[rdx + 0x64<64> + rax:byte] = r8b
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 0xB<64>)
	branch Test(NE,Z) l0000000000452B52
	// succ:  l0000000000452B6A l0000000000452B52
l0000000000452B6A:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452AD0_exit
l0000000000452B70:
	ecx = 0x70<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rcx = Mem0[0x0000000000491CC0<p64>:word64]
	Mem0[rax + 8<64>:word32] = 0<32>
	Mem0[rax + 0x10<64>:word64] = 0<64>
	Mem0[rax + 0x18<64>:word64] = 0<64>
	Mem0[rax + 0x20<64>:byte] = 0<8>
	Mem0[rax + 0x21<64>:byte] = 0<8>
	rdx = rcx + 0x10<64>
	Mem0[rax + 0x22<64>:byte] = 0<8>
	Mem0[rax + 0x28<64>:word64] = 0<64>
	Mem0[rax + 0x30<64>:word64] = 0<64>
	Mem0[rax + 0x38<64>:word64] = 0<64>
	Mem0[rax:word64] = rdx
	Mem0[rax + 0x40<64>:word64] = 0<64>
	Mem0[rax + 0x48<64>:word64] = 0<64>
	Mem0[rax + 0x50<64>:word64] = 0<64>
	Mem0[rax + 0x58<64>:word32] = 0<32>
	Mem0[rax + 0x5C<64>:byte] = 0<8>
	Mem0[rax + 0x5D<64>:byte] = 0<8>
	Mem0[rax + 0x5E<64>:byte] = 0<8>
	Mem0[rax + 0x5F<64>:byte] = 0<8>
	Mem0[rax + 0x60<64>:byte] = 0<8>
	Mem0[rax + 0x61<64>:byte] = 0<8>
	Mem0[rax + 0x62<64>:byte] = 0<8>
	Mem0[rax + 0x63<64>:byte] = 0<8>
	Mem0[rax + 0x6F<64>:byte] = 0<8>
	Mem0[rbx + 0x10<64>:word64] = rax
	goto l0000000000452AE5
	// succ:  l0000000000452AE5
fn0000000000452AD0_exit:


// fn0000000000452C10
// Return size: 8
define fn0000000000452C10
fn0000000000452C10_entry:
	rsp = fp
	// succ:  l0000000000452C10
l0000000000452C10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	Mem0[rcx + 0x10<64>:word64] = rdx
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496210<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000452AD0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452C10_exit
fn0000000000452C10_exit:


// fn0000000000452C60
// Return size: 8
define fn0000000000452C60
fn0000000000452C60_entry:
	rsp = fp
	// succ:  l0000000000452C60
l0000000000452C60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r9 & r9)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496210<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000452AD0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452C60_exit
fn0000000000452C60_exit:


// fn0000000000452CB0
// Return size: 8
define fn0000000000452CB0
fn0000000000452CB0_entry:
	rsp = fp
	// succ:  l0000000000452CB0
l0000000000452CB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496210<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000452AD0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452CB0_exit
fn0000000000452CB0_exit:


// fn0000000000452D00
// Return size: 8
define fn0000000000452D00
fn0000000000452D00_entry:
	rsp = fp
	// succ:  l0000000000452D00
l0000000000452D00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	Mem0[rcx + 0x10<64>:word64] = rdx
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496210<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000452AD0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452D00_exit
fn0000000000452D00_exit:


// fn0000000000452D50
// Return size: 8
define fn0000000000452D50
fn0000000000452D50_entry:
	rsp = fp
	// succ:  l0000000000452D50
l0000000000452D50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r9 & r9)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496210<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000452AD0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452D50_exit
fn0000000000452D50_exit:


// fn0000000000452DA0
// Return size: 8
define fn0000000000452DA0
fn0000000000452DA0_entry:
	rsp = fp
	// succ:  l0000000000452DA0
l0000000000452DA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496210<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000452AD0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452DA0_exit
fn0000000000452DA0_exit:


// fn0000000000452DF0
// Return size: 0
define fn0000000000452DF0
fn0000000000452DF0_entry:
	rsp = fp
	// succ:  l0000000000452DF0
l0000000000452DF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000452E10 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000452E05_thunk_fn0000000000475550
l0000000000452E05_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000452DF0_exit
fn0000000000452DF0_exit:


// fn0000000000452E10
// Return size: 0
define fn0000000000452E10
fn0000000000452E10_entry:
	rsp = fp
	// succ:  l0000000000452E10
l0000000000452E10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491B90<p64>:word64]
	rbx = rcx
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	rcx = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000452E36
	// succ:  l0000000000452E30 l0000000000452E36
l0000000000452E30:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 8<64>:word64] (retsize: 8;)
	// succ:  l0000000000452E36
l0000000000452E36:
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000452E3F_thunk_fn000000000046AD20
l0000000000452E3F_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000452E10_exit
fn0000000000452E10_exit:


// fn0000000000452E60
// Return size: 8
define fn0000000000452E60
fn0000000000452E60_entry:
	rsp = fp
	// succ:  l0000000000452E60
l0000000000452E60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x10<64>:word64]
	rbx = rcx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000452F0B
	// succ:  l0000000000452E75 l0000000000452F0B
l0000000000452E75:
	edx = 0x2E<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 0x2C<32>
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rax + 0x18<64>:word64] = 0<64>
	Mem0[rax + 0x22<64>:word16] = dx
	rdx = Mem0[0x0000000000491710<p64>:word64]
	Mem0[rax + 0x24<64>:word16] = cx
	rcx = 0x000000000048E370<p64>
	Mem0[rax + 0x30<64>:word64] = 0<64>
	Mem0[rax + 0x40<64>:word64] = 0<64>
	Mem0[rax + 0x50<64>:word64] = 0<64>
	edx = Mem0[rdx:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rax + 0x10<64>:word64] = rcx
	rcx = 0x000000000048E372<p64>
	Mem0[rax + 0x58<64>:word32] = 0<32>
	Mem0[rax + 0x28<64>:word64] = rcx
	Mem0[rax + 0x38<64>:word64] = rcx
	Mem0[rax + 0x48<64>:word64] = rcx
	Mem0[rax + 0x5C<64>:word32] = edx
	rax = Mem0[rbx + 0x10<64>:word64]
	Mem0[rax + 0x60<64>:word32] = edx
	rax = Mem0[0x0000000000491720<p64>:word64]
	r8 = Mem0[rbx + 0x10<64>:word64]
	rcx = Mem0[rax:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000452EF0
l0000000000452EF0:
	dx = CONVERT(Mem0[rcx + rax:byte], byte, int16)
	Mem0[r8 + 0x64<64> + rax * 2<64>:word16] = dx
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 0xB<64>)
	branch Test(NE,Z) l0000000000452EF0
	// succ:  l0000000000452F05 l0000000000452EF0
l0000000000452F05:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452E60_exit
l0000000000452F0B:
	ecx = 0x80<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rcx = Mem0[0x0000000000491CD0<p64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	Mem0[rax + 8<64>:word32] = 0<32>
	Mem0[rax + 0x10<64>:word64] = 0<64>
	Mem0[rax + 0x18<64>:word64] = 0<64>
	Mem0[rax + 0x20<64>:byte] = 0<8>
	rdx = rcx + 0x10<64>
	Mem0[rax + 0x22<64>:word16] = r8w
	Mem0[rax + 0x24<64>:word16] = r9w
	Mem0[rax + 0x28<64>:word64] = 0<64>
	Mem0[rax + 0x30<64>:word64] = 0<64>
	Mem0[rax:word64] = rdx
	Mem0[rax + 0x38<64>:word64] = 0<64>
	Mem0[rax + 0x40<64>:word64] = 0<64>
	Mem0[rax + 0x48<64>:word64] = 0<64>
	Mem0[rax + 0x50<64>:word64] = 0<64>
	Mem0[rax + 0x58<64>:word32] = 0<32>
	Mem0[rax + 0x5C<64>:byte] = 0<8>
	Mem0[rax + 0x5D<64>:byte] = 0<8>
	Mem0[rax + 0x5E<64>:byte] = 0<8>
	Mem0[rax + 0x5F<64>:byte] = 0<8>
	Mem0[rax + 0x60<64>:byte] = 0<8>
	Mem0[rax + 0x61<64>:byte] = 0<8>
	Mem0[rax + 0x62<64>:byte] = 0<8>
	Mem0[rax + 0x63<64>:byte] = 0<8>
	Mem0[rax + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 0x10<64>:word64] = rax
	goto l0000000000452E75
	// succ:  l0000000000452E75
fn0000000000452E60_exit:


// fn0000000000452FC0
// Return size: 8
define fn0000000000452FC0
fn0000000000452FC0_entry:
	rsp = fp
	// succ:  l0000000000452FC0
l0000000000452FC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	Mem0[rcx + 0x10<64>:word64] = rdx
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496290<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000452E60 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000452FC0_exit
fn0000000000452FC0_exit:


// fn0000000000453010
// Return size: 8
define fn0000000000453010
fn0000000000453010_entry:
	rsp = fp
	// succ:  l0000000000453010
l0000000000453010:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r9 & r9)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496290<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000452E60 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000453010_exit
fn0000000000453010_exit:


// fn0000000000453060
// Return size: 8
define fn0000000000453060
fn0000000000453060_entry:
	rsp = fp
	// succ:  l0000000000453060
l0000000000453060:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496290<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000452E60 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000453060_exit
fn0000000000453060_exit:


// fn00000000004530B0
// Return size: 8
define fn00000000004530B0
fn00000000004530B0_entry:
	rsp = fp
	// succ:  l00000000004530B0
l00000000004530B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	Mem0[rcx + 0x10<64>:word64] = rdx
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496290<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000452E60 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004530B0_exit
fn00000000004530B0_exit:


// fn0000000000453100
// Return size: 8
define fn0000000000453100
fn0000000000453100_entry:
	rsp = fp
	// succ:  l0000000000453100
l0000000000453100:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r9 & r9)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496290<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000452E60 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000453100_exit
fn0000000000453100_exit:


// fn0000000000453150
// Return size: 8
define fn0000000000453150
fn0000000000453150_entry:
	rsp = fp
	// succ:  l0000000000453150
l0000000000453150:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496290<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000452E60 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000453150_exit
fn0000000000453150_exit:


// fn00000000004531A0
// Return size: 0
define fn00000000004531A0
fn00000000004531A0_entry:
	rsp = fp
	// succ:  l00000000004531A0
l00000000004531A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn00000000004531C0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004531B5_thunk_fn0000000000475550
l00000000004531B5_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn00000000004531A0_exit
fn00000000004531A0_exit:


// fn00000000004531C0
// Return size: 0
define fn00000000004531C0
fn00000000004531C0_entry:
	rsp = fp
	// succ:  l00000000004531C0
l00000000004531C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491BA0<p64>:word64]
	rbx = rcx
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	rcx = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004531E6
	// succ:  l00000000004531E0 l00000000004531E6
l00000000004531E0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 8<64>:word64] (retsize: 8;)
	// succ:  l00000000004531E6
l00000000004531E6:
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004531EF_thunk_fn000000000046AD20
l00000000004531EF_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn00000000004531C0_exit
fn00000000004531C0_exit:


// fn0000000000453210
// Return size: 8
define fn0000000000453210
fn0000000000453210_entry:
	rsp = fp
	// succ:  l0000000000453210
l0000000000453210:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x10<64>:word64]
	rbx = rcx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004532BB
	// succ:  l0000000000453225 l00000000004532BB
l0000000000453225:
	edx = 0x2E<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 0x2C<32>
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rax + 0x18<64>:word64] = 0<64>
	Mem0[rax + 0x22<64>:word16] = dx
	rdx = Mem0[0x0000000000491710<p64>:word64]
	Mem0[rax + 0x24<64>:word16] = cx
	rcx = 0x000000000048E370<p64>
	Mem0[rax + 0x30<64>:word64] = 0<64>
	Mem0[rax + 0x40<64>:word64] = 0<64>
	Mem0[rax + 0x50<64>:word64] = 0<64>
	edx = Mem0[rdx:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rax + 0x10<64>:word64] = rcx
	rcx = 0x000000000048E372<p64>
	Mem0[rax + 0x58<64>:word32] = 0<32>
	Mem0[rax + 0x28<64>:word64] = rcx
	Mem0[rax + 0x38<64>:word64] = rcx
	Mem0[rax + 0x48<64>:word64] = rcx
	Mem0[rax + 0x5C<64>:word32] = edx
	rax = Mem0[rbx + 0x10<64>:word64]
	Mem0[rax + 0x60<64>:word32] = edx
	rax = Mem0[0x0000000000491720<p64>:word64]
	r8 = Mem0[rbx + 0x10<64>:word64]
	rcx = Mem0[rax:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l00000000004532A0
l00000000004532A0:
	dx = CONVERT(Mem0[rcx + rax:byte], byte, int16)
	Mem0[r8 + 0x64<64> + rax * 2<64>:word16] = dx
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 0xB<64>)
	branch Test(NE,Z) l00000000004532A0
	// succ:  l00000000004532B5 l00000000004532A0
l00000000004532B5:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000453210_exit
l00000000004532BB:
	ecx = 0x80<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rcx = Mem0[0x0000000000491CE0<p64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	Mem0[rax + 8<64>:word32] = 0<32>
	Mem0[rax + 0x10<64>:word64] = 0<64>
	Mem0[rax + 0x18<64>:word64] = 0<64>
	Mem0[rax + 0x20<64>:byte] = 0<8>
	rdx = rcx + 0x10<64>
	Mem0[rax + 0x22<64>:word16] = r8w
	Mem0[rax + 0x24<64>:word16] = r9w
	Mem0[rax + 0x28<64>:word64] = 0<64>
	Mem0[rax + 0x30<64>:word64] = 0<64>
	Mem0[rax:word64] = rdx
	Mem0[rax + 0x38<64>:word64] = 0<64>
	Mem0[rax + 0x40<64>:word64] = 0<64>
	Mem0[rax + 0x48<64>:word64] = 0<64>
	Mem0[rax + 0x50<64>:word64] = 0<64>
	Mem0[rax + 0x58<64>:word32] = 0<32>
	Mem0[rax + 0x5C<64>:byte] = 0<8>
	Mem0[rax + 0x5D<64>:byte] = 0<8>
	Mem0[rax + 0x5E<64>:byte] = 0<8>
	Mem0[rax + 0x5F<64>:byte] = 0<8>
	Mem0[rax + 0x60<64>:byte] = 0<8>
	Mem0[rax + 0x61<64>:byte] = 0<8>
	Mem0[rax + 0x62<64>:byte] = 0<8>
	Mem0[rax + 0x63<64>:byte] = 0<8>
	Mem0[rax + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 0x10<64>:word64] = rax
	goto l0000000000453225
	// succ:  l0000000000453225
fn0000000000453210_exit:


// fn0000000000453370
// Return size: 8
define fn0000000000453370
fn0000000000453370_entry:
	rsp = fp
	// succ:  l0000000000453370
l0000000000453370:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	Mem0[rcx + 0x10<64>:word64] = rdx
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496310<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000453210 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000453370_exit
fn0000000000453370_exit:


// fn00000000004533C0
// Return size: 8
define fn00000000004533C0
fn00000000004533C0_entry:
	rsp = fp
	// succ:  l00000000004533C0
l00000000004533C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r9 & r9)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496310<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000453210 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004533C0_exit
fn00000000004533C0_exit:


// fn0000000000453410
// Return size: 8
define fn0000000000453410
fn0000000000453410_entry:
	rsp = fp
	// succ:  l0000000000453410
l0000000000453410:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496310<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000453210 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000453410_exit
fn0000000000453410_exit:


// fn0000000000453460
// Return size: 8
define fn0000000000453460
fn0000000000453460_entry:
	rsp = fp
	// succ:  l0000000000453460
l0000000000453460:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	Mem0[rcx + 0x10<64>:word64] = rdx
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496310<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000453210 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000453460_exit
fn0000000000453460_exit:


// fn00000000004534B0
// Return size: 8
define fn00000000004534B0
fn00000000004534B0_entry:
	rsp = fp
	// succ:  l00000000004534B0
l00000000004534B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r9 & r9)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496310<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000453210 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004534B0_exit
fn00000000004534B0_exit:


// fn0000000000453500
// Return size: 8
define fn0000000000453500
fn0000000000453500_entry:
	rsp = fp
	// succ:  l0000000000453500
l0000000000453500:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496310<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000453210 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000453500_exit
fn0000000000453500_exit:


// fn0000000000453550
// Return size: 0
define fn0000000000453550
fn0000000000453550_entry:
	rsp = fp
	// succ:  l0000000000453550
l0000000000453550:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000453570 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000453565_thunk_fn0000000000475550
l0000000000453565_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000453550_exit
fn0000000000453550_exit:


// fn0000000000453570
// Return size: 0
define fn0000000000453570
fn0000000000453570_entry:
	rsp = fp
	// succ:  l0000000000453570
l0000000000453570:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491BB0<p64>:word64]
	rbx = rcx
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	rcx = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000453596
	// succ:  l0000000000453590 l0000000000453596
l0000000000453590:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 8<64>:word64] (retsize: 8;)
	// succ:  l0000000000453596
l0000000000453596:
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045359F_thunk_fn000000000046AD20
l000000000045359F_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000453570_exit
fn0000000000453570_exit:


// fn00000000004535C0
// Return size: 8
define fn00000000004535C0
fn00000000004535C0_entry:
	rsp = fp
	// succ:  l00000000004535C0
l00000000004535C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	rdx = Mem0[rbp + 0x18<64>:word64]
	rax = Mem0[rbp + 0x10<64>:word64]
	rdx = rdx - rax
	SCZO = cond(rdx)
	rax = rdx
	rax = rax >> 3<64>
	SCZO = cond(rax)
	Mem0[rbp - 8<64>:word64] = rax
	SCZO = cond(Mem0[rbp - 8<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000453610
	// succ:  l00000000004535F1 l0000000000453610
l00000000004535F1:
	rax = Mem0[rbp - 8<64>:word64]
	rdx = CONVERT(0<32> + rax * 8<64>, word32, word64)
	rax = Mem0[rbp + 0x20<64>:word64]
	r8 = rdx
	rdx = Mem0[rbp + 0x10<64>:word64]
	rcx = rax
	rax = memmove(rcx, rdx, r8)
	// succ:  l0000000000453610
l0000000000453610:
	rax = Mem0[rbp - 8<64>:word64]
	rdx = CONVERT(0<32> + rax * 8<64>, word32, word64)
	rax = Mem0[rbp + 0x20<64>:word64]
	rax = rax + rdx
	SCZO = cond(rax)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004535C0_exit
fn00000000004535C0_exit:


// fn0000000000453630
// Return size: 8
define fn0000000000453630
fn0000000000453630_entry:
	rsp = fp
	// succ:  l0000000000453630
l0000000000453630:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004538A0
	// succ:  l0000000000453642 l00000000004538A0
l0000000000453642:
	rdx = 0x000000000048E3B0<p64>
	rcx = 0x000000000048E3C2<p64>
	rbx = 0x000000000048E3C3<p64>
	Mem0[rax + 0x10<64>:word64] = rdx
	Mem0[rax + 0x18<64>:word64] = rdx
	rdx = 0x000000000048E3B9<p64>
	Mem0[rax + 0x30<64>:word64] = rcx
	Mem0[rax + 0x38<64>:word64] = rcx
	Mem0[rax + 0x20<64>:word64] = rdx
	Mem0[rax + 0x28<64>:word64] = rdx
	rdx = rcx
	rcx = 0x000000000048E3C6<p64>
	Mem0[rax + 0x40<64>:word64] = rbx
	rbx = 0x000000000048E3C9<p64>
	Mem0[rax + 0x50<64>:word64] = rdx
	rdx = 0x000000000048E3D7<p64>
	Mem0[rax + 0x48<64>:word64] = rcx
	rcx = 0x000000000048E3D0<p64>
	Mem0[rax + 0x58<64>:word64] = rbx
	rbx = 0x000000000048E3DF<p64>
	Mem0[rax + 0x68<64>:word64] = rdx
	rdx = 0x000000000048E3F2<p64>
	Mem0[rax + 0x60<64>:word64] = rcx
	rcx = 0x000000000048E3E9<p64>
	Mem0[rax + 0x70<64>:word64] = rbx
	rbx = 0x000000000048E3F9<p64>
	Mem0[rax + 0x80<64>:word64] = rdx
	Mem0[rax + 0x78<64>:word64] = rcx
	rcx = 0x000000000048E402<p64>
	rdx = 0x000000000048E406<p64>
	Mem0[rax + 0x88<64>:word64] = rbx
	rbx = 0x000000000048E40A<p64>
	Mem0[rax + 0x90<64>:word64] = rcx
	rcx = 0x000000000048E40E<p64>
	Mem0[rax + 0x98<64>:word64] = rdx
	Mem0[rax + 0xA0<64>:word64] = rbx
	rdx = 0x000000000048E412<p64>
	rbx = 0x000000000048E416<p64>
	Mem0[rax + 0xA8<64>:word64] = rcx
	rcx = 0x000000000048E41A<p64>
	Mem0[rax + 0xB0<64>:word64] = rdx
	Mem0[rax + 0xB8<64>:word64] = rbx
	rdx = 0x000000000048E41E<p64>
	Mem0[rax + 0xC0<64>:word64] = rcx
	rbx = 0x000000000048E426<p64>
	rcx = 0x000000000048E42F<p64>
	Mem0[rax + 0xC8<64>:word64] = rdx
	rdx = 0x000000000048E435<p64>
	Mem0[rax + 0xD0<64>:word64] = rbx
	Mem0[rax + 0xD8<64>:word64] = rcx
	rbx = 0x000000000048E43B<p64>
	rcx = 0x000000000048E43F<p64>
	Mem0[rax + 0xE0<64>:word64] = rdx
	rdx = 0x000000000048E444<p64>
	Mem0[rax + 0xE8<64>:word64] = rbx
	rbx = 0x000000000048E449<p64>
	Mem0[rax + 0xF0<64>:word64] = rcx
	rcx = 0x000000000048E450<p64>
	Mem0[rax + 0xF8<64>:word64] = rdx
	Mem0[rax + 0x100<64>:word64] = rbx
	rdx = 0x000000000048E45A<p64>
	rbx = 0x000000000048E462<p64>
	Mem0[rax + 0x108<64>:word64] = rcx
	rcx = 0x000000000048E46B<p64>
	Mem0[rax + 0x110<64>:word64] = rdx
	Mem0[rax + 0x118<64>:word64] = rbx
	rdx = 0x000000000048E474<p64>
	Mem0[rax + 0x120<64>:word64] = rcx
	rbx = 0x000000000048E478<p64>
	rcx = 0x000000000048E47C<p64>
	Mem0[rax + 0x128<64>:word64] = rdx
	rdx = 0x000000000048E480<p64>
	Mem0[rax + 0x130<64>:word64] = rbx
	Mem0[rax + 0x138<64>:word64] = rcx
	rbx = 0x000000000048E43B<p64>
	rcx = 0x000000000048E484<p64>
	Mem0[rax + 0x140<64>:word64] = rdx
	rdx = 0x000000000048E488<p64>
	Mem0[rax + 0x148<64>:word64] = rbx
	rbx = 0x000000000048E48C<p64>
	Mem0[rax + 0x150<64>:word64] = rcx
	rcx = 0x000000000048E490<p64>
	Mem0[rax + 0x158<64>:word64] = rdx
	Mem0[rax + 0x160<64>:word64] = rbx
	rdx = 0x000000000048E494<p64>
	rbx = 0x000000000048E498<p64>
	Mem0[rax + 0x168<64>:word64] = rcx
	rcx = 0x000000000048E49C<p64>
	Mem0[rax + 0x170<64>:word64] = rdx
	Mem0[rax + 0x178<64>:word64] = rbx
	Mem0[rax + 0x180<64>:word64] = rcx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000453630_exit
l00000000004538A0:
	rbx = rcx
	ecx = 0x190<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rdx = Mem0[0x0000000000491C80<p64>:word64]
	Mem0[rax + 8<64>:word32] = 0<32>
	Mem0[rax + 0x10<64>:word64] = 0<64>
	Mem0[rax + 0x18<64>:word64] = 0<64>
	Mem0[rax + 0x20<64>:word64] = 0<64>
	Mem0[rax + 0x28<64>:word64] = 0<64>
	rdx = rdx + 0x10<64>
	SCZO = cond(rdx)
	Mem0[rax + 0x30<64>:word64] = 0<64>
	Mem0[rax + 0x38<64>:word64] = 0<64>
	Mem0[rax:word64] = rdx
	Mem0[rax + 0x40<64>:word64] = 0<64>
	Mem0[rax + 0x48<64>:word64] = 0<64>
	Mem0[rax + 0x50<64>:word64] = 0<64>
	Mem0[rax + 0x58<64>:word64] = 0<64>
	Mem0[rax + 0x60<64>:word64] = 0<64>
	Mem0[rax + 0x68<64>:word64] = 0<64>
	Mem0[rax + 0x70<64>:word64] = 0<64>
	Mem0[rax + 0x78<64>:word64] = 0<64>
	Mem0[rax + 0x80<64>:word64] = 0<64>
	Mem0[rax + 0x88<64>:word64] = 0<64>
	Mem0[rax + 0x90<64>:word64] = 0<64>
	Mem0[rax + 0x98<64>:word64] = 0<64>
	Mem0[rax + 0xA0<64>:word64] = 0<64>
	Mem0[rax + 0xA8<64>:word64] = 0<64>
	Mem0[rax + 0xB0<64>:word64] = 0<64>
	Mem0[rax + 0xB8<64>:word64] = 0<64>
	Mem0[rax + 0xC0<64>:word64] = 0<64>
	Mem0[rax + 0xC8<64>:word64] = 0<64>
	Mem0[rax + 0xD0<64>:word64] = 0<64>
	Mem0[rax + 0xD8<64>:word64] = 0<64>
	Mem0[rax + 0xE0<64>:word64] = 0<64>
	Mem0[rax + 0xE8<64>:word64] = 0<64>
	Mem0[rax + 0xF0<64>:word64] = 0<64>
	Mem0[rax + 0xF8<64>:word64] = 0<64>
	Mem0[rax + 0x100<64>:word64] = 0<64>
	Mem0[rax + 0x108<64>:word64] = 0<64>
	Mem0[rax + 0x110<64>:word64] = 0<64>
	Mem0[rax + 0x118<64>:word64] = 0<64>
	Mem0[rax + 0x120<64>:word64] = 0<64>
	Mem0[rax + 0x128<64>:word64] = 0<64>
	Mem0[rax + 0x130<64>:word64] = 0<64>
	Mem0[rax + 0x138<64>:word64] = 0<64>
	Mem0[rax + 0x140<64>:word64] = 0<64>
	Mem0[rax + 0x148<64>:word64] = 0<64>
	Mem0[rax + 0x150<64>:word64] = 0<64>
	Mem0[rax + 0x158<64>:word64] = 0<64>
	Mem0[rax + 0x160<64>:word64] = 0<64>
	Mem0[rax + 0x168<64>:word64] = 0<64>
	Mem0[rax + 0x170<64>:word64] = 0<64>
	Mem0[rax + 0x178<64>:word64] = 0<64>
	Mem0[rax + 0x180<64>:word64] = 0<64>
	Mem0[rax + 0x188<64>:byte] = 0<8>
	Mem0[rbx + 0x10<64>:word64] = rax
	goto l0000000000453642
	// succ:  l0000000000453642
fn0000000000453630_exit:


// fn0000000000453AB0
// Return size: 8
define fn0000000000453AB0
fn0000000000453AB0_entry:
	rsp = fp
	// succ:  l0000000000453AB0
l0000000000453AB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	Mem0[rcx + 0x10<64>:word64] = rdx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496390<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC40 (retsize: 8;)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x20<64>:word64] = rax
	rcx = rbx
	call fn0000000000453630 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000453AB0_exit
fn0000000000453AB0_exit:


// fn0000000000453B10
// Return size: 8
define fn0000000000453B10
fn0000000000453B10_entry:
	rsp = fp
	// succ:  l0000000000453B10
l0000000000453B10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r9 & r9)
	C = false
	rdi = r8
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	rbx = rcx
	rbp = rdx
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496390<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC40 (retsize: 8;)
	rcx = rdi
	rdx = rax
	rsi = rax
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000453B72
	// succ:  l0000000000453B57 l0000000000453B72
l0000000000453B57:
	Mem0[rbx + 0x20<64>:word64] = rsi
	// succ:  l0000000000453B5B
l0000000000453B5B:
	rdx = rbp
	rcx = rbx
	call fn0000000000453630 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000453B10_exit
l0000000000453B72:
	rcx = rdi
	eax = strlen(rcx)
	r12 = rax + 1<64>
	rcx = r12
	call fn0000000000475560 (retsize: 8;)
	r8 = r12
	rdx = rdi
	rcx = rax
	rax = memcpy(rcx, rdx, r8)
	Mem0[rbx + 0x20<64>:word64] = rax
	goto l0000000000453B5B
	// succ:  l0000000000453B5B
fn0000000000453B10_exit:


// fn0000000000453BE0
// Return size: 8
define fn0000000000453BE0
fn0000000000453BE0_entry:
	rsp = fp
	// succ:  l0000000000453BE0
l0000000000453BE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	rbx = rcx
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496390<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC40 (retsize: 8;)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x20<64>:word64] = rax
	rcx = rbx
	call fn0000000000453630 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000453BE0_exit
fn0000000000453BE0_exit:


// fn0000000000453C40
// Return size: 8
define fn0000000000453C40
fn0000000000453C40_entry:
	rsp = fp
	// succ:  l0000000000453C40
l0000000000453C40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	Mem0[rcx + 0x10<64>:word64] = rdx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496390<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC40 (retsize: 8;)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x20<64>:word64] = rax
	rcx = rbx
	call fn0000000000453630 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000453C40_exit
fn0000000000453C40_exit:


// fn0000000000453CA0
// Return size: 8
define fn0000000000453CA0
fn0000000000453CA0_entry:
	rsp = fp
	// succ:  l0000000000453CA0
l0000000000453CA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r9 & r9)
	C = false
	rdi = r8
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	rbx = rcx
	rbp = rdx
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496390<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC40 (retsize: 8;)
	rcx = rdi
	rdx = rax
	rsi = rax
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000453D02
	// succ:  l0000000000453CE7 l0000000000453D02
l0000000000453CE7:
	Mem0[rbx + 0x20<64>:word64] = rsi
	// succ:  l0000000000453CEB
l0000000000453CEB:
	rdx = rbp
	rcx = rbx
	call fn0000000000453630 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000453CA0_exit
l0000000000453D02:
	rcx = rdi
	eax = strlen(rcx)
	r12 = rax + 1<64>
	rcx = r12
	call fn0000000000475560 (retsize: 8;)
	r8 = r12
	rdx = rdi
	rcx = rax
	rax = memcpy(rcx, rdx, r8)
	Mem0[rbx + 0x20<64>:word64] = rax
	goto l0000000000453CEB
	// succ:  l0000000000453CEB
fn0000000000453CA0_exit:


// fn0000000000453D70
// Return size: 8
define fn0000000000453D70
fn0000000000453D70_entry:
	rsp = fp
	// succ:  l0000000000453D70
l0000000000453D70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	rbx = rcx
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496390<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC40 (retsize: 8;)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x20<64>:word64] = rax
	rcx = rbx
	call fn0000000000453630 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000453D70_exit
fn0000000000453D70_exit:


// fn0000000000453DD0
// Return size: 0
define fn0000000000453DD0
fn0000000000453DD0_entry:
	rsp = fp
	// succ:  l0000000000453DD0
l0000000000453DD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000453DF0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000453DE5_thunk_fn0000000000475550
l0000000000453DE5_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000453DD0_exit
fn0000000000453DD0_exit:


// fn0000000000453DF0
// Return size: 0
define fn0000000000453DF0
fn0000000000453DF0_entry:
	rsp = fp
	// succ:  l0000000000453DF0
l0000000000453DF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496390<p64>
	rsi = Mem0[rcx + 0x20<64>:word64]
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AC40 (retsize: 8;)
	SCZO = cond(rsi - rax)
	branch Test(EQ,Z) l0000000000453E1E
	// succ:  l0000000000453E11 l0000000000453E1E
l0000000000453E11:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000453E1E
	// succ:  l0000000000453E16 l0000000000453E1E
l0000000000453E16:
	rcx = rsi
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000453E1E
l0000000000453E1E:
	rcx = Mem0[rbx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000453E2D
	// succ:  l0000000000453E27 l0000000000453E2D
l0000000000453E27:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 8<64>:word64] (retsize: 8;)
	// succ:  l0000000000453E2D
l0000000000453E2D:
	rcx = rbx + 0x18<64>
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000453E3F_thunk_fn000000000046AD20
l0000000000453E3F_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000453DF0_exit
fn0000000000453DF0_exit:


// fn0000000000453E60
// Return size: 0
define fn0000000000453E60
fn0000000000453E60_entry:
	rsp = fp
	// succ:  l0000000000453E60
l0000000000453E60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496390<p64>
	rsi = Mem0[rcx + 0x20<64>:word64]
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AC40 (retsize: 8;)
	SCZO = cond(rsi - rax)
	branch Test(EQ,Z) l0000000000453E8E
	// succ:  l0000000000453E81 l0000000000453E8E
l0000000000453E81:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000453E8E
	// succ:  l0000000000453E86 l0000000000453E8E
l0000000000453E86:
	rcx = rsi
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000453E8E
l0000000000453E8E:
	rcx = Mem0[rbx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000453E9D
	// succ:  l0000000000453E97 l0000000000453E9D
l0000000000453E97:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 8<64>:word64] (retsize: 8;)
	// succ:  l0000000000453E9D
l0000000000453E9D:
	rcx = rbx + 0x18<64>
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000453EAF_thunk_fn000000000046AD20
l0000000000453EAF_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000453E60_exit
fn0000000000453E60_exit:


// fn0000000000453ED0
// Return size: 8
define fn0000000000453ED0
fn0000000000453ED0_entry:
	rsp = fp
	// succ:  l0000000000453ED0
l0000000000453ED0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000454140
	// succ:  l0000000000453EE2 l0000000000454140
l0000000000453EE2:
	rdx = 0x000000000048E4A0<p64>
	rcx = 0x000000000048E4C4<p64>
	rbx = 0x000000000048E4C6<p64>
	Mem0[rax + 0x10<64>:word64] = rdx
	Mem0[rax + 0x18<64>:word64] = rdx
	rdx = 0x000000000048E4B2<p64>
	Mem0[rax + 0x30<64>:word64] = rcx
	Mem0[rax + 0x38<64>:word64] = rcx
	Mem0[rax + 0x20<64>:word64] = rdx
	Mem0[rax + 0x28<64>:word64] = rdx
	rdx = rcx
	rcx = 0x000000000048E4CC<p64>
	Mem0[rax + 0x40<64>:word64] = rbx
	rbx = 0x000000000048E4D2<p64>
	Mem0[rax + 0x50<64>:word64] = rdx
	rdx = 0x000000000048E4EE<p64>
	Mem0[rax + 0x48<64>:word64] = rcx
	rcx = 0x000000000048E4E0<p64>
	Mem0[rax + 0x58<64>:word64] = rbx
	rbx = 0x000000000048E4FE<p64>
	Mem0[rax + 0x68<64>:word64] = rdx
	rdx = 0x000000000048E524<p64>
	Mem0[rax + 0x60<64>:word64] = rcx
	rcx = 0x000000000048E512<p64>
	Mem0[rax + 0x70<64>:word64] = rbx
	rbx = 0x000000000048E532<p64>
	Mem0[rax + 0x80<64>:word64] = rdx
	Mem0[rax + 0x78<64>:word64] = rcx
	rcx = 0x000000000048E544<p64>
	rdx = 0x000000000048E54C<p64>
	Mem0[rax + 0x88<64>:word64] = rbx
	rbx = 0x000000000048E554<p64>
	Mem0[rax + 0x90<64>:word64] = rcx
	rcx = 0x000000000048E55C<p64>
	Mem0[rax + 0x98<64>:word64] = rdx
	Mem0[rax + 0xA0<64>:word64] = rbx
	rdx = 0x000000000048E564<p64>
	rbx = 0x000000000048E56C<p64>
	Mem0[rax + 0xA8<64>:word64] = rcx
	rcx = 0x000000000048E574<p64>
	Mem0[rax + 0xB0<64>:word64] = rdx
	Mem0[rax + 0xB8<64>:word64] = rbx
	rdx = 0x000000000048E57C<p64>
	Mem0[rax + 0xC0<64>:word64] = rcx
	rbx = 0x000000000048E58C<p64>
	rcx = 0x000000000048E59E<p64>
	Mem0[rax + 0xC8<64>:word64] = rdx
	rdx = 0x000000000048E5AA<p64>
	Mem0[rax + 0xD0<64>:word64] = rbx
	Mem0[rax + 0xD8<64>:word64] = rcx
	rbx = 0x000000000048E5B6<p64>
	rcx = 0x000000000048E5BE<p64>
	Mem0[rax + 0xE0<64>:word64] = rdx
	rdx = 0x000000000048E5C8<p64>
	Mem0[rax + 0xE8<64>:word64] = rbx
	rbx = 0x000000000048E5D2<p64>
	Mem0[rax + 0xF0<64>:word64] = rcx
	rcx = 0x000000000048E5E0<p64>
	Mem0[rax + 0xF8<64>:word64] = rdx
	Mem0[rax + 0x100<64>:word64] = rbx
	rdx = 0x000000000048E5F4<p64>
	rbx = 0x000000000048E604<p64>
	Mem0[rax + 0x108<64>:word64] = rcx
	rcx = 0x000000000048E616<p64>
	Mem0[rax + 0x110<64>:word64] = rdx
	Mem0[rax + 0x118<64>:word64] = rbx
	rdx = 0x000000000048E628<p64>
	Mem0[rax + 0x120<64>:word64] = rcx
	rbx = 0x000000000048E630<p64>
	rcx = 0x000000000048E638<p64>
	Mem0[rax + 0x128<64>:word64] = rdx
	rdx = 0x000000000048E640<p64>
	Mem0[rax + 0x130<64>:word64] = rbx
	Mem0[rax + 0x138<64>:word64] = rcx
	rbx = 0x000000000048E5B6<p64>
	rcx = 0x000000000048E648<p64>
	Mem0[rax + 0x140<64>:word64] = rdx
	rdx = 0x000000000048E650<p64>
	Mem0[rax + 0x148<64>:word64] = rbx
	rbx = 0x000000000048E658<p64>
	Mem0[rax + 0x150<64>:word64] = rcx
	rcx = 0x000000000048E660<p64>
	Mem0[rax + 0x158<64>:word64] = rdx
	Mem0[rax + 0x160<64>:word64] = rbx
	rdx = 0x000000000048E668<p64>
	rbx = 0x000000000048E670<p64>
	Mem0[rax + 0x168<64>:word64] = rcx
	rcx = 0x000000000048E678<p64>
	Mem0[rax + 0x170<64>:word64] = rdx
	Mem0[rax + 0x178<64>:word64] = rbx
	Mem0[rax + 0x180<64>:word64] = rcx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000453ED0_exit
l0000000000454140:
	rbx = rcx
	ecx = 0x190<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rdx = Mem0[0x0000000000491C90<p64>:word64]
	Mem0[rax + 8<64>:word32] = 0<32>
	Mem0[rax + 0x10<64>:word64] = 0<64>
	Mem0[rax + 0x18<64>:word64] = 0<64>
	Mem0[rax + 0x20<64>:word64] = 0<64>
	Mem0[rax + 0x28<64>:word64] = 0<64>
	rdx = rdx + 0x10<64>
	SCZO = cond(rdx)
	Mem0[rax + 0x30<64>:word64] = 0<64>
	Mem0[rax + 0x38<64>:word64] = 0<64>
	Mem0[rax:word64] = rdx
	Mem0[rax + 0x40<64>:word64] = 0<64>
	Mem0[rax + 0x48<64>:word64] = 0<64>
	Mem0[rax + 0x50<64>:word64] = 0<64>
	Mem0[rax + 0x58<64>:word64] = 0<64>
	Mem0[rax + 0x60<64>:word64] = 0<64>
	Mem0[rax + 0x68<64>:word64] = 0<64>
	Mem0[rax + 0x70<64>:word64] = 0<64>
	Mem0[rax + 0x78<64>:word64] = 0<64>
	Mem0[rax + 0x80<64>:word64] = 0<64>
	Mem0[rax + 0x88<64>:word64] = 0<64>
	Mem0[rax + 0x90<64>:word64] = 0<64>
	Mem0[rax + 0x98<64>:word64] = 0<64>
	Mem0[rax + 0xA0<64>:word64] = 0<64>
	Mem0[rax + 0xA8<64>:word64] = 0<64>
	Mem0[rax + 0xB0<64>:word64] = 0<64>
	Mem0[rax + 0xB8<64>:word64] = 0<64>
	Mem0[rax + 0xC0<64>:word64] = 0<64>
	Mem0[rax + 0xC8<64>:word64] = 0<64>
	Mem0[rax + 0xD0<64>:word64] = 0<64>
	Mem0[rax + 0xD8<64>:word64] = 0<64>
	Mem0[rax + 0xE0<64>:word64] = 0<64>
	Mem0[rax + 0xE8<64>:word64] = 0<64>
	Mem0[rax + 0xF0<64>:word64] = 0<64>
	Mem0[rax + 0xF8<64>:word64] = 0<64>
	Mem0[rax + 0x100<64>:word64] = 0<64>
	Mem0[rax + 0x108<64>:word64] = 0<64>
	Mem0[rax + 0x110<64>:word64] = 0<64>
	Mem0[rax + 0x118<64>:word64] = 0<64>
	Mem0[rax + 0x120<64>:word64] = 0<64>
	Mem0[rax + 0x128<64>:word64] = 0<64>
	Mem0[rax + 0x130<64>:word64] = 0<64>
	Mem0[rax + 0x138<64>:word64] = 0<64>
	Mem0[rax + 0x140<64>:word64] = 0<64>
	Mem0[rax + 0x148<64>:word64] = 0<64>
	Mem0[rax + 0x150<64>:word64] = 0<64>
	Mem0[rax + 0x158<64>:word64] = 0<64>
	Mem0[rax + 0x160<64>:word64] = 0<64>
	Mem0[rax + 0x168<64>:word64] = 0<64>
	Mem0[rax + 0x170<64>:word64] = 0<64>
	Mem0[rax + 0x178<64>:word64] = 0<64>
	Mem0[rax + 0x180<64>:word64] = 0<64>
	Mem0[rax + 0x188<64>:byte] = 0<8>
	Mem0[rbx + 0x10<64>:word64] = rax
	goto l0000000000453EE2
	// succ:  l0000000000453EE2
fn0000000000453ED0_exit:


// fn0000000000454350
// Return size: 8
define fn0000000000454350
fn0000000000454350_entry:
	rsp = fp
	// succ:  l0000000000454350
l0000000000454350:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	Mem0[rcx + 0x10<64>:word64] = rdx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004963B0<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC40 (retsize: 8;)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x20<64>:word64] = rax
	rcx = rbx
	call fn0000000000453ED0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454350_exit
fn0000000000454350_exit:


// fn00000000004543B0
// Return size: 8
define fn00000000004543B0
fn00000000004543B0_entry:
	rsp = fp
	// succ:  l00000000004543B0
l00000000004543B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r9 & r9)
	C = false
	rdi = r8
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	rbx = rcx
	rbp = rdx
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004963B0<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC40 (retsize: 8;)
	rcx = rdi
	rdx = rax
	rsi = rax
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000454412
	// succ:  l00000000004543F7 l0000000000454412
l00000000004543F7:
	Mem0[rbx + 0x20<64>:word64] = rsi
	// succ:  l00000000004543FB
l00000000004543FB:
	rdx = rbp
	rcx = rbx
	call fn0000000000453ED0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004543B0_exit
l0000000000454412:
	rcx = rdi
	eax = strlen(rcx)
	r12 = rax + 1<64>
	rcx = r12
	call fn0000000000475560 (retsize: 8;)
	r8 = r12
	rdx = rdi
	rcx = rax
	rax = memcpy(rcx, rdx, r8)
	Mem0[rbx + 0x20<64>:word64] = rax
	goto l00000000004543FB
	// succ:  l00000000004543FB
fn00000000004543B0_exit:


// fn0000000000454480
// Return size: 8
define fn0000000000454480
fn0000000000454480_entry:
	rsp = fp
	// succ:  l0000000000454480
l0000000000454480:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	rbx = rcx
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004963B0<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC40 (retsize: 8;)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x20<64>:word64] = rax
	rcx = rbx
	call fn0000000000453ED0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454480_exit
fn0000000000454480_exit:


// fn00000000004544E0
// Return size: 8
define fn00000000004544E0
fn00000000004544E0_entry:
	rsp = fp
	// succ:  l00000000004544E0
l00000000004544E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	Mem0[rcx + 0x10<64>:word64] = rdx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004963B0<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC40 (retsize: 8;)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x20<64>:word64] = rax
	rcx = rbx
	call fn0000000000453ED0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004544E0_exit
fn00000000004544E0_exit:


// fn0000000000454540
// Return size: 8
define fn0000000000454540
fn0000000000454540_entry:
	rsp = fp
	// succ:  l0000000000454540
l0000000000454540:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r9 & r9)
	C = false
	rdi = r8
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	rbx = rcx
	rbp = rdx
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004963B0<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC40 (retsize: 8;)
	rcx = rdi
	rdx = rax
	rsi = rax
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004545A2
	// succ:  l0000000000454587 l00000000004545A2
l0000000000454587:
	Mem0[rbx + 0x20<64>:word64] = rsi
	// succ:  l000000000045458B
l000000000045458B:
	rdx = rbp
	rcx = rbx
	call fn0000000000453ED0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454540_exit
l00000000004545A2:
	rcx = rdi
	eax = strlen(rcx)
	r12 = rax + 1<64>
	rcx = r12
	call fn0000000000475560 (retsize: 8;)
	r8 = r12
	rdx = rdi
	rcx = rax
	rax = memcpy(rcx, rdx, r8)
	Mem0[rbx + 0x20<64>:word64] = rax
	goto l000000000045458B
	// succ:  l000000000045458B
fn0000000000454540_exit:


// fn0000000000454610
// Return size: 8
define fn0000000000454610
fn0000000000454610_entry:
	rsp = fp
	// succ:  l0000000000454610
l0000000000454610:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	rbx = rcx
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004963B0<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC40 (retsize: 8;)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x20<64>:word64] = rax
	rcx = rbx
	call fn0000000000453ED0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454610_exit
fn0000000000454610_exit:


// fn0000000000454670
// Return size: 0
define fn0000000000454670
fn0000000000454670_entry:
	rsp = fp
	// succ:  l0000000000454670
l0000000000454670:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000454690 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000454685_thunk_fn0000000000475550
l0000000000454685_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000454670_exit
fn0000000000454670_exit:


// fn0000000000454690
// Return size: 0
define fn0000000000454690
fn0000000000454690_entry:
	rsp = fp
	// succ:  l0000000000454690
l0000000000454690:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x00000000004963B0<p64>
	rsi = Mem0[rcx + 0x20<64>:word64]
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AC40 (retsize: 8;)
	SCZO = cond(rsi - rax)
	branch Test(EQ,Z) l00000000004546BE
	// succ:  l00000000004546B1 l00000000004546BE
l00000000004546B1:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l00000000004546BE
	// succ:  l00000000004546B6 l00000000004546BE
l00000000004546B6:
	rcx = rsi
	call fn0000000000475540 (retsize: 8;)
	// succ:  l00000000004546BE
l00000000004546BE:
	rcx = Mem0[rbx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004546CD
	// succ:  l00000000004546C7 l00000000004546CD
l00000000004546C7:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 8<64>:word64] (retsize: 8;)
	// succ:  l00000000004546CD
l00000000004546CD:
	rcx = rbx + 0x18<64>
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004546DF_thunk_fn000000000046AD20
l00000000004546DF_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000454690_exit
fn0000000000454690_exit:


// fn0000000000454700
// Return size: 0
define fn0000000000454700
fn0000000000454700_entry:
	rsp = fp
	// succ:  l0000000000454700
l0000000000454700:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x00000000004963B0<p64>
	rsi = Mem0[rcx + 0x20<64>:word64]
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AC40 (retsize: 8;)
	SCZO = cond(rsi - rax)
	branch Test(EQ,Z) l000000000045472E
	// succ:  l0000000000454721 l000000000045472E
l0000000000454721:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000045472E
	// succ:  l0000000000454726 l000000000045472E
l0000000000454726:
	rcx = rsi
	call fn0000000000475540 (retsize: 8;)
	// succ:  l000000000045472E
l000000000045472E:
	rcx = Mem0[rbx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045473D
	// succ:  l0000000000454737 l000000000045473D
l0000000000454737:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 8<64>:word64] (retsize: 8;)
	// succ:  l000000000045473D
l000000000045473D:
	rcx = rbx + 0x18<64>
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045474F_thunk_fn000000000046AD20
l000000000045474F_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000454700_exit
fn0000000000454700_exit:


// fn0000000000454770
// Return size: 8
define fn0000000000454770
fn0000000000454770_entry:
	rsp = fp
	// succ:  l0000000000454770
l0000000000454770:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x00000000004963D0<p64>
	rbx = rcx
	rcx = rcx + 8<64>
	Mem0[rcx - 8<64>:word64] = rax
	call fn0000000000451F40 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454770_exit
fn0000000000454770_exit:


// fn00000000004547B0
// Return size: 0
define fn00000000004547B0
fn00000000004547B0_entry:
	rsp = fp
	// succ:  l00000000004547B0
l00000000004547B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn00000000004547D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004547C5_thunk_fn0000000000475550
l00000000004547C5_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn00000000004547B0_exit
fn00000000004547B0_exit:


// fn00000000004547D0
// Return size: 0
define fn00000000004547D0
fn00000000004547D0_entry:
	rsp = fp
	// succ:  l00000000004547D0
l00000000004547D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = 0x00000000004963D0<p64>
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rbx = rcx
	Mem0[rcx:word64] = rax
	rax = Mem0[rcx + 8<64>:word64]
	__lock()
	Mem0[rax - 8<64>:word32] = __xadd(Mem0[rax - 8<64>:word32], edx)
	SCZO = cond(Mem0[rax - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l0000000000454803
	// succ:  l00000000004547F4 l0000000000454803
l00000000004547F4:
	rcx = rbx
	call fn000000000046F0F0 (retsize: 8;)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004547D0_exit
l0000000000454803:
	rcx = rax - 0x18<64>
	rdx = rsp + 0x2F<64>
	call fn0000000000450A50 (retsize: 8;)
	rcx = rbx
	call fn000000000046F0F0 (retsize: 8;)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004547D0_exit
fn00000000004547D0_exit:


// fn0000000000454820
// Return size: 8
define fn0000000000454820
fn0000000000454820_entry:
	rsp = fp
	// succ:  l0000000000454820
l0000000000454820:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn000000000045F390 (retsize: 8;)
	rax = 0x0000000000496410<p64>
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454820_exit
fn0000000000454820_exit:


// fn0000000000454840
// Return size: 0
define fn0000000000454840
fn0000000000454840_entry:
	rsp = fp
	// succ:  l0000000000454840
l0000000000454840:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496410<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000045F3F0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045485F_thunk_fn0000000000475550
l000000000045485F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000454840_exit
fn0000000000454840_exit:


// fn0000000000454870
// Return size: 0
define fn0000000000454870
fn0000000000454870_entry:
	rsp = fp
	// succ:  l0000000000454870
l0000000000454870:
	rax = 0x0000000000496410<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000045487A_thunk_fn000000000045F3F0
l000000000045487A_thunk_fn000000000045F3F0:
	call fn000000000045F3F0 (retsize: 0;)
	return
	// succ:  fn0000000000454870_exit
fn0000000000454870_exit:


// fn0000000000454880
// Return size: 8
define fn0000000000454880
fn0000000000454880_entry:
	rsp = fp
	// succ:  l0000000000454880
l0000000000454880:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rsi = rsp + 0x30<64>
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	r8 = rsp + 0x2E<64>
	rdx = 0x000000000048E130<p64>
	rbx = rcx
	rcx = rsi
	call fn0000000000451EA0 (retsize: 8;)
	rdx = rsi
	rcx = rbx
	call fn000000000045F390 (retsize: 8;)
	rax = Mem0[rsp + 0x30<64>:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[rax - 8<64>:word32] = __xadd(Mem0[rax - 8<64>:word32], edx)
	SCZO = cond(Mem0[rax - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l00000000004548E0
	// succ:  l00000000004548C3 l00000000004548E0
l00000000004548C3:
	rax = 0x0000000000496450<p64>
	Mem0[rbx + 0x10<64>:word32] = edi
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454880_exit
l00000000004548E0:
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A50 (retsize: 8;)
	goto l00000000004548C3
	// succ:  l00000000004548C3
fn0000000000454880_exit:


// fn0000000000454910
// Return size: 0
define fn0000000000454910
fn0000000000454910_entry:
	rsp = fp
	// succ:  l0000000000454910
l0000000000454910:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496450<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000045F3F0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045492F_thunk_fn0000000000475550
l000000000045492F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000454910_exit
fn0000000000454910_exit:


// fn0000000000454940
// Return size: 0
define fn0000000000454940
fn0000000000454940_entry:
	rsp = fp
	// succ:  l0000000000454940
l0000000000454940:
	rax = 0x0000000000496450<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000045494A_thunk_fn000000000045F3F0
l000000000045494A_thunk_fn000000000045F3F0:
	call fn000000000045F3F0 (retsize: 0;)
	return
	// succ:  fn0000000000454940_exit
fn0000000000454940_exit:


// fn0000000000454950
// Return size: 8
define fn0000000000454950
fn0000000000454950_entry:
	rsp = fp
	// succ:  l0000000000454950
l0000000000454950:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn00000000004690A0 (retsize: 8;)
	Mem0[rbp - 0x20<64>:word64] = rax
	rax = rbp - 0x20<64>
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000469260 (retsize: 8;)
	Mem0[rbp - 0x10<64>:word64] = rax
	rax = rbp - 0x10<64>
	rcx = rax
	call fn0000000000469060 (retsize: 8;)
	Mem0[rbp - 0x30<64>:word64] = rax
	rax = rbp - 0x20<64>
	rcx = rax
	call fn000000000042BB60 (retsize: 8;)
	Mem0[rbp - 0x40<64>:word64] = rax
	rax = rbp - 0x30<64>
	rcx = rax
	call fn000000000042BB20 (retsize: 8;)
	Mem0[rbp - 0x38<64>:word32] = eax
	rax = rbp - 0x40<64>
	edx = 0<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	call fn000000000041C000 (retsize: 8;)
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454950_exit
fn0000000000454950_exit:


// fn00000000004549D0
// Return size: 8
define fn00000000004549D0
fn00000000004549D0_entry:
	rsp = fp
	// succ:  l00000000004549D0
l00000000004549D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004549D0_exit
fn00000000004549D0_exit:


// fn00000000004549E0
// Return size: 8
define fn00000000004549E0
fn00000000004549E0_entry:
	rsp = fp
	// succ:  l00000000004549E0
l00000000004549E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004549E0_exit
fn00000000004549E0_exit:


// fn00000000004549F0
// Return size: 8
define fn00000000004549F0
fn00000000004549F0_entry:
	rsp = fp
	// succ:  l00000000004549F0
l00000000004549F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	SCZO = cond(Mem0[rbp + 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000454A19
	// succ:  l0000000000454A07 l0000000000454A19
l0000000000454A07:
	rax = Mem0[rbp + 0x10<64>:word64]
	rdx = Mem0[rbp + 0x18<64>:word64]
	rcx = rax
	call fn0000000000464E00 (retsize: 8;)
	goto l0000000000454A1E
	// succ:  l0000000000454A1E
l0000000000454A19:
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000454A1E
l0000000000454A1E:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004549F0_exit
fn00000000004549F0_exit:


// fn0000000000454A30
// Return size: 8
define fn0000000000454A30
fn0000000000454A30_entry:
	rsp = fp
	// succ:  l0000000000454A30
l0000000000454A30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000448D30 (retsize: 8;)
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax:word64] = 0<64>
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 8<64>:word64] = 0<64>
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 0x10<64>:word64] = 0<64>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454A30_exit
fn0000000000454A30_exit:


// fn0000000000454A70
// Return size: 8
define fn0000000000454A70
fn0000000000454A70_entry:
	rsp = fp
	// succ:  l0000000000454A70
l0000000000454A70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000448D50 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454A70_exit
fn0000000000454A70_exit:


// fn0000000000454A90
// Return size: 8
define fn0000000000454A90
fn0000000000454A90_entry:
	rsp = fp
	// succ:  l0000000000454A90
l0000000000454A90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	SCZO = cond(Mem0[rbp + 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000454AC3
	// succ:  l0000000000454AAB l0000000000454AC3
l0000000000454AAB:
	rax = Mem0[rbp + 0x10<64>:word64]
	rcx = Mem0[rbp + 0x20<64>:word64]
	rdx = Mem0[rbp + 0x18<64>:word64]
	r8 = rcx
	rcx = rax
	call fn0000000000464CF0 (retsize: 8;)
	// succ:  l0000000000454AC3
l0000000000454AC3:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454A90_exit
fn0000000000454A90_exit:


// fn0000000000454AD0
// Return size: 8
define fn0000000000454AD0
fn0000000000454AD0_entry:
	rsp = fp
	// succ:  l0000000000454AD0
l0000000000454AD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454AD0_exit
fn0000000000454AD0_exit:


// fn0000000000454AE0
// Return size: 8
define fn0000000000454AE0
fn0000000000454AE0_entry:
	rsp = fp
	// succ:  l0000000000454AE0
l0000000000454AE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rcx = rax
	call fn0000000000454A30 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454AE0_exit
fn0000000000454AE0_exit:


// fn0000000000454B00
// Return size: 8
define fn0000000000454B00
fn0000000000454B00_entry:
	rsp = fp
	// succ:  l0000000000454B00
l0000000000454B00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax + 0x10<64>:word64]
	rdx = rax
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax:word64]
	rdx = rdx - rax
	SCZO = cond(rdx)
	rax = rdx
	rax = rax >> 3<64>
	SCZO = cond(rax)
	rdx = rax
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax:word64]
	r8 = rdx
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000454A90 (retsize: 8;)
	rax = Mem0[rbp + 0x10<64>:word64]
	rcx = rax
	call fn0000000000454A70 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454B00_exit
fn0000000000454B00_exit:


// fn0000000000454B60
// Return size: 8
define fn0000000000454B60
fn0000000000454B60_entry:
	rsp = fp
	// succ:  l0000000000454B60
l0000000000454B60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	SCZO = cond(Mem0[rbp + 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000454B89
	// succ:  l0000000000454B77 l0000000000454B89
l0000000000454B77:
	rax = Mem0[rbp + 0x10<64>:word64]
	rdx = Mem0[rbp + 0x18<64>:word64]
	rcx = rax
	call fn0000000000464FD0 (retsize: 8;)
	goto l0000000000454B8E
	// succ:  l0000000000454B8E
l0000000000454B89:
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000454B8E
l0000000000454B8E:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454B60_exit
fn0000000000454B60_exit:


// fn0000000000454BA0
// Return size: 8
define fn0000000000454BA0
fn0000000000454BA0_entry:
	rsp = fp
	// succ:  l0000000000454BA0
l0000000000454BA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000448DA0 (retsize: 8;)
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax:word64] = 0<64>
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 8<64>:word64] = 0<64>
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 0x10<64>:word64] = 0<64>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454BA0_exit
fn0000000000454BA0_exit:


// fn0000000000454BE0
// Return size: 8
define fn0000000000454BE0
fn0000000000454BE0_entry:
	rsp = fp
	// succ:  l0000000000454BE0
l0000000000454BE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000448DC0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454BE0_exit
fn0000000000454BE0_exit:


// fn0000000000454C00
// Return size: 8
define fn0000000000454C00
fn0000000000454C00_entry:
	rsp = fp
	// succ:  l0000000000454C00
l0000000000454C00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	SCZO = cond(Mem0[rbp + 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000454C33
	// succ:  l0000000000454C1B l0000000000454C33
l0000000000454C1B:
	rax = Mem0[rbp + 0x10<64>:word64]
	rcx = Mem0[rbp + 0x20<64>:word64]
	rdx = Mem0[rbp + 0x18<64>:word64]
	r8 = rcx
	rcx = rax
	call fn0000000000464F00 (retsize: 8;)
	// succ:  l0000000000454C33
l0000000000454C33:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454C00_exit
fn0000000000454C00_exit:


// fn0000000000454C40
// Return size: 8
define fn0000000000454C40
fn0000000000454C40_entry:
	rsp = fp
	// succ:  l0000000000454C40
l0000000000454C40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454C40_exit
fn0000000000454C40_exit:


// fn0000000000454C50
// Return size: 8
define fn0000000000454C50
fn0000000000454C50_entry:
	rsp = fp
	// succ:  l0000000000454C50
l0000000000454C50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rcx = rax
	call fn0000000000454BA0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454C50_exit
fn0000000000454C50_exit:


// fn0000000000454C70
// Return size: 8
define fn0000000000454C70
fn0000000000454C70_entry:
	rsp = fp
	// succ:  l0000000000454C70
l0000000000454C70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax + 0x10<64>:word64]
	rdx = rax
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax:word64]
	rdx = rdx - rax
	SCZO = cond(rdx)
	rax = rdx
	rdx = rax
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax:word64]
	r8 = rdx
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000454C00 (retsize: 8;)
	rax = Mem0[rbp + 0x10<64>:word64]
	rcx = rax
	call fn0000000000454BE0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454C70_exit
fn0000000000454C70_exit:


// fn0000000000454CC0
// Return size: 8
define fn0000000000454CC0
fn0000000000454CC0_entry:
	rsp = fp
	// succ:  l0000000000454CC0
l0000000000454CC0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = Mem0[rcx:word64]
	call fileno (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000454CC0_exit
fn0000000000454CC0_exit:


// fn0000000000454CF0
// Return size: 8
define fn0000000000454CF0
fn0000000000454CF0_entry:
	rsp = fp
	// succ:  l0000000000454CF0
l0000000000454CF0:
	rax = Mem0[rcx:word64]
	return
	// succ:  fn0000000000454CF0_exit
fn0000000000454CF0_exit:


// fn0000000000454D00
// Return size: 8
define fn0000000000454D00
fn0000000000454D00_entry:
	rsp = fp
	// succ:  l0000000000454D00
l0000000000454D00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	ecx = r8d
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rdx
	call fn0000000000424270 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000454D1F
	// succ:  l0000000000454D19 l0000000000454D1F
l0000000000454D19:
	SCZO = cond(Mem0[rbx:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000454D30
	// succ:  l0000000000454D1F l0000000000454D30
l0000000000454D1F:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454D00_exit
l0000000000454D30:
	rdx = rax
	rcx = rsi
	call fn0000000000411EF0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	Mem0[rbx:word64] = rax
	branch Test(EQ,Z) l0000000000454D1F
	// succ:  l0000000000454D43 l0000000000454D1F
l0000000000454D43:
	rax = rbx
	Mem0[rbx + 8<64>:byte] = 1<8>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454D00_exit
fn0000000000454D00_exit:


// fn0000000000454D60
// Return size: 0
define fn0000000000454D60
fn0000000000454D60_entry:
	rsp = fp
	// succ:  l0000000000454D60
l0000000000454D60:
	rcx = Mem0[rcx:word64]
	call msvcrt.dll!fflush (retsize: 0;)
	return
	// succ:  fn0000000000454D60_exit
fn0000000000454D60_exit:


// fn0000000000454D70
// Return size: 8
define fn0000000000454D70
fn0000000000454D70_entry:
	rsp = fp
	// succ:  l0000000000454D70
l0000000000454D70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000454DC9
	// succ:  l0000000000454D7C l0000000000454DC9
l0000000000454D7C:
	SCZO = cond(Mem0[rcx + 8<64>:byte] - 0<8>)
	rbx = rcx
	branch Test(NE,Z) l0000000000454DA0
	// succ:  l0000000000454D85 l0000000000454DA0
l0000000000454D85:
	rax = rbx
	Mem0[rbx:word64] = 0<64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454D70_exit
l0000000000454DA0:
	rsi = _errno
	eax = _errno()
	Mem0[rax:word32] = 0<32>
	// succ:  l0000000000454DAF
l0000000000454DAF:
	rcx = Mem0[rbx:word64]
	eax = fclose(rcx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000454D85
	// succ:  l0000000000454DBB l0000000000454D85
l0000000000454DBB:
	eax = _errno()
	SCZO = cond(Mem0[rax:word32] - 4<32>)
	branch Test(EQ,Z) l0000000000454DAF
	// succ:  l0000000000454DC2 l0000000000454DAF
l0000000000454DC2:
	Mem0[rbx:word64] = 0<64>
	// succ:  l0000000000454DC9
l0000000000454DC9:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454D70_exit
fn0000000000454D70_exit:


// fn0000000000454DE0
// Return size: 8
define fn0000000000454DE0
fn0000000000454DE0_entry:
	rsp = fp
	// succ:  l0000000000454DE0
l0000000000454DE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r12 = _errno
	rbp = rcx
	rdi = rdx
	esi = r8d
	rsi = CONVERT(esi, word32, uint64)
	// succ:  l0000000000454DFA
l0000000000454DFA:
	rcx = rbp
	call fn0000000000454CC0 (retsize: 8;)
	r8d = esi
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rdi
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	call read (retsize: 8;)
	rbx = CONVERT(eax, word32, int64)
	SCZO = cond(rbx - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l0000000000454E30
	// succ:  l0000000000454E18 l0000000000454E30
l0000000000454E18:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454DE0_exit
l0000000000454E30:
	eax = _errno()
	SCZO = cond(Mem0[rax:word32] - 4<32>)
	branch Test(EQ,Z) l0000000000454DFA
	// succ:  l0000000000454E38 l0000000000454DFA
l0000000000454E38:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454DE0_exit
fn0000000000454DE0_exit:


// fn0000000000454E50
// Return size: 8
define fn0000000000454E50
fn0000000000454E50_entry:
	rsp = fp
	// succ:  l0000000000454E50
l0000000000454E50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rbx = rdx
	Mem0[rsp + 0x28<64>:word64] = r8
	call fn0000000000454CC0 (retsize: 8;)
	r8 = Mem0[rsp + 0x28<64>:word64]
	rdx = rbx
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000454E71_thunk_fn00000000004243A0
l0000000000454E71_thunk_fn00000000004243A0:
	call fn00000000004243A0 (retsize: 0;)
	return
	// succ:  fn0000000000454E50_exit
fn0000000000454E50_exit:


// fn0000000000454E80
// Return size: 8
define fn0000000000454E80
fn0000000000454E80_entry:
	rsp = fp
	// succ:  l0000000000454E80
l0000000000454E80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rbx = rdx
	Mem0[rsp + 0x2C<64>:word32] = r8d
	call fn0000000000454CC0 (retsize: 8;)
	r8d = Mem0[rsp + 0x2C<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbx
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000411F00 (retsize: 8;)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454E80_exit
fn0000000000454E80_exit:


// fn0000000000454EC0
// Return size: 8
define fn0000000000454EC0
fn0000000000454EC0_entry:
	rsp = fp
	// succ:  l0000000000454EC0
l0000000000454EC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l0000000000454F0C
	// succ:  l0000000000454ECC l0000000000454F0C
l0000000000454ECC:
	SCZO = cond(Mem0[rcx:word64] - 0<64>)
	branch Test(NE,Z) l0000000000454F0C
	// succ:  l0000000000454ED2 l0000000000454F0C
l0000000000454ED2:
	rsi = rdx
	rbx = rcx
	rdi = _errno
	eax = _errno()
	Mem0[rax:word32] = 0<32>
	// succ:  l0000000000454EE7
l0000000000454EE7:
	rcx = Mem0[rbx:word64]
	call msvcrt.dll!fflush (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000454F05
	// succ:  l0000000000454EF3 l0000000000454F05
l0000000000454EF3:
	rax = rbx
	Mem0[rbx:word64] = rsi
	Mem0[rbx + 8<64>:byte] = 0<8>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454EC0_exit
l0000000000454F05:
	eax = _errno()
	SCZO = cond(Mem0[rax:word32] - 4<32>)
	branch Test(EQ,Z) l0000000000454EE7
	// succ:  l0000000000454F0C l0000000000454EE7
l0000000000454F0C:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454EC0_exit
fn0000000000454EC0_exit:


// fn0000000000454F20
// Return size: 8
define fn0000000000454F20
fn0000000000454F20_entry:
	rsp = fp
	// succ:  l0000000000454F20
l0000000000454F20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	ecx = r8d
	rcx = CONVERT(ecx, word32, uint64)
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	call fn0000000000424270 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000454F3E
	// succ:  l0000000000454F38 l0000000000454F3E
l0000000000454F38:
	SCZO = cond(Mem0[rbx:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000454F50
	// succ:  l0000000000454F3E l0000000000454F50
l0000000000454F3E:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000454F40
l0000000000454F40:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454F20_exit
l0000000000454F50:
	rdx = rax
	ecx = esi
	rcx = CONVERT(ecx, word32, uint64)
	call fdopen (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rax
	Mem0[rbx:word64] = rax
	branch Test(EQ,Z) l0000000000454F3E
	// succ:  l0000000000454F65 l0000000000454F3E
l0000000000454F65:
	SZO = cond(esi & esi)
	C = false
	Mem0[rbx + 8<64>:byte] = 1<8>
	rax = rbx
	branch Test(NE,Z) l0000000000454F40
	// succ:  l0000000000454F70 l0000000000454F40
l0000000000454F70:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8d = 4<32>
	r8 = CONVERT(r8d, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call msvcrt.dll!setvbuf (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454F20_exit
fn0000000000454F20_exit:


// fn0000000000454FA0
// Return size: 8
define fn0000000000454FA0
fn0000000000454FA0_entry:
	rsp = fp
	// succ:  l0000000000454FA0
l0000000000454FA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rdi = rcx
	rsi = r8
	branch Test(NE,Z) l0000000000454FE3
	// succ:  l0000000000454FB4 l0000000000454FE3
l0000000000454FB4:
	rcx = rdi
	Mem0[rsp + 0x20<64>:word64] = r9
	call fn0000000000454CC0 (retsize: 8;)
	r9 = Mem0[rsp + 0x20<64>:word64]
	r8 = Mem0[rsp + 0x70<64>:word64]
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	rdx = r9
	call fn00000000004243A0 (retsize: 8;)
	rsp = rsp + 8<64>
	rbx = rbx + rax
	SCZO = cond(rbx)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454FA0_exit
l0000000000454FE3:
	Mem0[rsp + 0x28<64>:word64] = r9
	Mem0[rsp + 0x20<64>:word64] = rdx
	call fn0000000000454CC0 (retsize: 8;)
	rdx = Mem0[rsp + 0x20<64>:word64]
	r8 = rsi
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004243A0 (retsize: 8;)
	rsp = rsp + 8<64>
	SCZO = cond(rsi - rax)
	rbx = rax
	r9 = Mem0[rsp + 0x28<64>:word64]
	branch Test(EQ,Z) l0000000000454FB4
	// succ:  l000000000045500E l0000000000454FB4
l000000000045500E:
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000454FA0_exit
fn0000000000454FA0_exit:


// fn0000000000455020
// Return size: 8
define fn0000000000455020
fn0000000000455020_entry:
	rsp = fp
	// succ:  l0000000000455020
l0000000000455020:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x68<64>
	SCZO = cond(rsp)
	rsi = rcx
	call fn0000000000454CC0 (retsize: 8;)
	rdx = rsp + 0x20<64>
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	call fstat64 (retsize: 8;)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000455053
	// succ:  l0000000000455042 l0000000000455053
l0000000000455042:
	edx = CONVERT(Mem0[rsp + 0x26<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	dx = dx & 0xF000<16>
	SZO = cond(dx)
	C = false
	SCZO = cond(dx - 0x8000<16>)
	branch Test(EQ,Z) l0000000000455060
	// succ:  l0000000000455053 l0000000000455060
l0000000000455053:
	rax = r8
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455020_exit
l0000000000455060:
	rbx = Mem0[rsp + 0x38<64>:word64]
	rcx = rsi
	call fn0000000000454CC0 (retsize: 8;)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000411F00 (retsize: 8;)
	rbx = rbx - rax
	SCZO = cond(rbx)
	r8 = rbx
	rax = r8
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455020_exit
fn0000000000455020_exit:


// fn0000000000455090
// Return size: 8
define fn0000000000455090
fn0000000000455090_entry:
	rsp = fp
	// succ:  l0000000000455090
l0000000000455090:
	Mem0[rcx:word64] = 0<64>
	Mem0[rcx + 8<64>:byte] = 0<8>
	return
	// succ:  fn0000000000455090_exit
fn0000000000455090_exit:


// fn00000000004550A0
// Return size: 8
define fn00000000004550A0
fn00000000004550A0_entry:
	rsp = fp
	// succ:  l00000000004550A0
l00000000004550A0:
	// succ:  l00000000004550A0_thunk_fn0000000000454D70
l00000000004550A0_thunk_fn0000000000454D70:
	call fn0000000000454D70 (retsize: 0;)
	return
	// succ:  fn00000000004550A0_exit
fn00000000004550A0_exit:


// fn00000000004550B0
// Return size: 8
define fn00000000004550B0
fn00000000004550B0_entry:
	rsp = fp
	// succ:  l00000000004550B0
l00000000004550B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdi = 0x000000000048E270<p64>
	rbp = rdx
	r9 = r8
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rsi = rbp
	call fn0000000000468C90 (retsize: 8;)
	rax = 0x0000000000496490<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rbx:word64] = rax
	// succ:  l00000000004550E4
l00000000004550E4:
	branch rcx == 0<64> l00000000004550E6
	// succ:  l00000000004550E4_1 l00000000004550E6
l00000000004550E4_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l00000000004550E4
	// succ:  l00000000004550E6 l00000000004550E4
l00000000004550E6:
	branch Test(EQ,Z) l00000000004550FB
	// succ:  l00000000004550E8 l00000000004550FB
l00000000004550E8:
	rdi = 0x000000000048E272<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l00000000004550F7
l00000000004550F7:
	branch rcx == 0<64> l00000000004550F9
	// succ:  l00000000004550F7_2 l00000000004550F9
l00000000004550F7_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l00000000004550F7
	// succ:  l00000000004550F9 l00000000004550F7
l00000000004550F9:
	branch Test(NE,Z) l0000000000455104
	// succ:  l00000000004550FB l0000000000455104
l00000000004550FB:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004550B0_exit
l0000000000455104:
	rsi = rbx + 0x10<64>
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004550B0_exit
fn00000000004550B0_exit:


// fn0000000000455140
// Return size: 0
define fn0000000000455140
fn0000000000455140_entry:
	rsp = fp
	// succ:  l0000000000455140
l0000000000455140:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496490<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000468E30 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045515F_thunk_fn0000000000475550
l000000000045515F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000455140_exit
fn0000000000455140_exit:


// fn0000000000455170
// Return size: 0
define fn0000000000455170
fn0000000000455170_entry:
	rsp = fp
	// succ:  l0000000000455170
l0000000000455170:
	rax = 0x0000000000496490<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000045517A_thunk_fn0000000000468E30
l000000000045517A_thunk_fn0000000000468E30:
	call fn0000000000468E30 (retsize: 0;)
	return
	// succ:  fn0000000000455170_exit
fn0000000000455170_exit:


// fn0000000000455180
// Return size: 8
define fn0000000000455180
fn0000000000455180_entry:
	rsp = fp
	// succ:  l0000000000455180
l0000000000455180:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdi = 0x000000000048D8A0<p64>
	rbp = rdx
	rdx = r8
	rbx = rcx
	call fn0000000000468F80 (retsize: 8;)
	rax = 0x0000000000496510<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l00000000004551AF
l00000000004551AF:
	branch rcx == 0<64> l00000000004551B1
	// succ:  l00000000004551AF_1 l00000000004551B1
l00000000004551AF_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l00000000004551AF
	// succ:  l00000000004551B1 l00000000004551AF
l00000000004551B1:
	branch Test(EQ,Z) l00000000004551C6
	// succ:  l00000000004551B3 l00000000004551C6
l00000000004551B3:
	rdi = 0x000000000048D8A2<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l00000000004551C2
l00000000004551C2:
	branch rcx == 0<64> l00000000004551C4
	// succ:  l00000000004551C2_2 l00000000004551C4
l00000000004551C2_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l00000000004551C2
	// succ:  l00000000004551C4 l00000000004551C2
l00000000004551C4:
	branch Test(NE,Z) l00000000004551D0
	// succ:  l00000000004551C6 l00000000004551D0
l00000000004551C6:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455180_exit
l00000000004551D0:
	rsi = rbx + 0x10<64>
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004551F5_thunk_fn0000000000468E90
l00000000004551F5_thunk_fn0000000000468E90:
	call fn0000000000468E90 (retsize: 0;)
	return
	// succ:  fn0000000000455180_exit
fn0000000000455180_exit:


// fn0000000000455210
// Return size: 0
define fn0000000000455210
fn0000000000455210_entry:
	rsp = fp
	// succ:  l0000000000455210
l0000000000455210:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496510<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000469000 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045522F_thunk_fn0000000000475550
l000000000045522F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000455210_exit
fn0000000000455210_exit:


// fn0000000000455240
// Return size: 0
define fn0000000000455240
fn0000000000455240_entry:
	rsp = fp
	// succ:  l0000000000455240
l0000000000455240:
	rax = 0x0000000000496510<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000045524A_thunk_fn0000000000469000
l000000000045524A_thunk_fn0000000000469000:
	call fn0000000000469000 (retsize: 0;)
	return
	// succ:  fn0000000000455240_exit
fn0000000000455240_exit:


// fn0000000000455250
// Return size: 8
define fn0000000000455250
fn0000000000455250_entry:
	rsp = fp
	// succ:  l0000000000455250
l0000000000455250:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000454770 (retsize: 8;)
	rax = 0x0000000000496590<p64>
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455250_exit
fn0000000000455250_exit:


// fn0000000000455270
// Return size: 0
define fn0000000000455270
fn0000000000455270_entry:
	rsp = fp
	// succ:  l0000000000455270
l0000000000455270:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496590<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn00000000004547D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045528F_thunk_fn0000000000475550
l000000000045528F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000455270_exit
fn0000000000455270_exit:


// fn00000000004552A0
// Return size: 0
define fn00000000004552A0
fn00000000004552A0_entry:
	rsp = fp
	// succ:  l00000000004552A0
l00000000004552A0:
	rax = 0x0000000000496590<p64>
	Mem0[rcx:word64] = rax
	// succ:  l00000000004552AA_thunk_fn00000000004547D0
l00000000004552AA_thunk_fn00000000004547D0:
	call fn00000000004547D0 (retsize: 0;)
	return
	// succ:  fn00000000004552A0_exit
fn00000000004552A0_exit:


// fn00000000004552B0
// Return size: 0
define fn00000000004552B0
fn00000000004552B0_entry:
	rsp = fp
	// succ:  l00000000004552B0
l00000000004552B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x00000000004965D0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn00000000004547D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004552CF_thunk_fn0000000000475550
l00000000004552CF_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn00000000004552B0_exit
fn00000000004552B0_exit:


// fn00000000004552E0
// Return size: 0
define fn00000000004552E0
fn00000000004552E0_entry:
	rsp = fp
	// succ:  l00000000004552E0
l00000000004552E0:
	rax = 0x00000000004965D0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l00000000004552EA_thunk_fn00000000004547D0
l00000000004552EA_thunk_fn00000000004547D0:
	call fn00000000004547D0 (retsize: 0;)
	return
	// succ:  fn00000000004552E0_exit
fn00000000004552E0_exit:


// fn00000000004552F0
// Return size: 8
define fn00000000004552F0
fn00000000004552F0_entry:
	rsp = fp
	// succ:  l00000000004552F0
l00000000004552F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000454770 (retsize: 8;)
	rax = 0x0000000000496610<p64>
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004552F0_exit
fn00000000004552F0_exit:


// fn0000000000455310
// Return size: 0
define fn0000000000455310
fn0000000000455310_entry:
	rsp = fp
	// succ:  l0000000000455310
l0000000000455310:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496610<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn00000000004547D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045532F_thunk_fn0000000000475550
l000000000045532F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000455310_exit
fn0000000000455310_exit:


// fn0000000000455340
// Return size: 0
define fn0000000000455340
fn0000000000455340_entry:
	rsp = fp
	// succ:  l0000000000455340
l0000000000455340:
	rax = 0x0000000000496610<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000045534A_thunk_fn00000000004547D0
l000000000045534A_thunk_fn00000000004547D0:
	call fn00000000004547D0 (retsize: 0;)
	return
	// succ:  fn0000000000455340_exit
fn0000000000455340_exit:


// fn0000000000455350
// Return size: 8
define fn0000000000455350
fn0000000000455350_entry:
	rsp = fp
	// succ:  l0000000000455350
l0000000000455350:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000454770 (retsize: 8;)
	rax = 0x0000000000496650<p64>
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455350_exit
fn0000000000455350_exit:


// fn0000000000455370
// Return size: 0
define fn0000000000455370
fn0000000000455370_entry:
	rsp = fp
	// succ:  l0000000000455370
l0000000000455370:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496650<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn00000000004547D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045538F_thunk_fn0000000000475550
l000000000045538F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000455370_exit
fn0000000000455370_exit:


// fn00000000004553A0
// Return size: 0
define fn00000000004553A0
fn00000000004553A0_entry:
	rsp = fp
	// succ:  l00000000004553A0
l00000000004553A0:
	rax = 0x0000000000496650<p64>
	Mem0[rcx:word64] = rax
	// succ:  l00000000004553AA_thunk_fn00000000004547D0
l00000000004553AA_thunk_fn00000000004547D0:
	call fn00000000004547D0 (retsize: 0;)
	return
	// succ:  fn00000000004553A0_exit
fn00000000004553A0_exit:


// fn00000000004553B0
// Return size: 0
define fn00000000004553B0
fn00000000004553B0_entry:
	rsp = fp
	// succ:  l00000000004553B0
l00000000004553B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496690<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000045F3F0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004553CF_thunk_fn0000000000475550
l00000000004553CF_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn00000000004553B0_exit
fn00000000004553B0_exit:


// fn00000000004553E0
// Return size: 0
define fn00000000004553E0
fn00000000004553E0_entry:
	rsp = fp
	// succ:  l00000000004553E0
l00000000004553E0:
	rax = 0x0000000000496690<p64>
	Mem0[rcx:word64] = rax
	// succ:  l00000000004553EA_thunk_fn000000000045F3F0
l00000000004553EA_thunk_fn000000000045F3F0:
	call fn000000000045F3F0 (retsize: 0;)
	return
	// succ:  fn00000000004553E0_exit
fn00000000004553E0_exit:


// fn00000000004553F0
// Return size: 8
define fn00000000004553F0
fn00000000004553F0_entry:
	rsp = fp
	// succ:  l00000000004553F0
l00000000004553F0:
	rax = 0x0000000000495F10<p64>
	rcx = rcx + 8<64>
	SCZO = cond(rcx)
	Mem0[rcx - 8<64>:word64] = rax
	// succ:  l00000000004553FF_thunk_fn00000000004621F0
l00000000004553FF_thunk_fn00000000004621F0:
	call fn00000000004621F0 (retsize: 0;)
	return
	// succ:  fn00000000004553F0_exit
fn00000000004553F0_exit:


// fn0000000000455410
// Return size: 0
define fn0000000000455410
fn0000000000455410_entry:
	rsp = fp
	// succ:  l0000000000455410
l0000000000455410:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000495F10<p64>
	rbx = rcx
	rcx = rcx + 8<64>
	Mem0[rcx - 8<64>:word64] = rax
	call fn0000000000462200 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000455434_thunk_fn0000000000475550
l0000000000455434_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000455410_exit
fn0000000000455410_exit:


// fn0000000000455440
// Return size: 8
define fn0000000000455440
fn0000000000455440_entry:
	rsp = fp
	// succ:  l0000000000455440
l0000000000455440:
	rax = 0x0000000000495F10<p64>
	rcx = rcx + 8<64>
	SCZO = cond(rcx)
	Mem0[rcx - 8<64>:word64] = rax
	// succ:  l000000000045544F_thunk_fn0000000000462200
l000000000045544F_thunk_fn0000000000462200:
	call fn0000000000462200 (retsize: 0;)
	return
	// succ:  fn0000000000455440_exit
fn0000000000455440_exit:


// fn0000000000455460
// Return size: 0
define fn0000000000455460
fn0000000000455460_entry:
	rsp = fp
	// succ:  l0000000000455460
l0000000000455460:
	// succ:  l0000000000455460_thunk_fn0000000000475550
l0000000000455460_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000455460_exit
fn0000000000455460_exit:


// fn0000000000455470
// Return size: 8
define fn0000000000455470
fn0000000000455470_entry:
	rsp = fp
	// succ:  l0000000000455470
l0000000000455470:
	return
	// succ:  fn0000000000455470_exit
fn0000000000455470_exit:


// fn0000000000455480
// Return size: 8
define fn0000000000455480
fn0000000000455480_entry:
	rsp = fp
	// succ:  l0000000000455480
l0000000000455480:
	eax = Mem0[rcx + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & 0x11<8>)
	C = false
	r8b = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(al & 8<8>)
	C = false
	rax = Mem0[rcx + 0x68<64>:word64]
	Mem0[rcx + 8<64>:word64] = rax
	Mem0[rcx + 0x10<64>:word64] = rax
	branch Test(EQ,Z) l00000000004554F0
	// succ:  l0000000000455499 l00000000004554F0
l0000000000455499:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(LE,SZO) l00000000004554F0
	// succ:  l000000000045549E l00000000004554F0
l000000000045549E:
	r9 = rax + rdx
	Mem0[rcx + 0x18<64>:word64] = r9
	// succ:  l00000000004554A6
l00000000004554A6:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(NE,Z) l00000000004554D0
	// succ:  l00000000004554AB l00000000004554D0
l00000000004554AB:
	SZO = cond(r8b & r8b)
	C = false
	branch Test(EQ,Z) l00000000004554D0
	// succ:  l00000000004554B0 l00000000004554D0
l00000000004554B0:
	rdx = Mem0[rcx + 0x70<64>:word64]
	SCZO = cond(rdx - 1<64>)
	branch Test(ULE,CZ) l00000000004554D0
	// succ:  l00000000004554BA l00000000004554D0
l00000000004554BA:
	Mem0[rcx + 0x28<64>:word64] = rax
	Mem0[rcx + 0x20<64>:word64] = rax
	rax = rax - 1<64> + rdx
	Mem0[rcx + 0x30<64>:word64] = rax
	return
	// succ:  fn0000000000455480_exit
l00000000004554D0:
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 0x20<64>:word64] = 0<64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	return
	// succ:  fn0000000000455480_exit
l00000000004554F0:
	Mem0[rcx + 0x18<64>:word64] = rax
	goto l00000000004554A6
	// succ:  l00000000004554A6
fn0000000000455480_exit:


// fn0000000000455500
// Return size: 8
define fn0000000000455500
fn0000000000455500_entry:
	rsp = fp
	// succ:  l0000000000455500
l0000000000455500:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[rcx + 0x98<64>:word64]
	rsi = rdx
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000455530
	// succ:  l000000000045551D l0000000000455530
l000000000045551D:
	rax = Mem0[rbx + 0x10<64>:word64]
	eax = eax - Mem0[rbx + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455500_exit
l0000000000455530:
	rcx = Mem0[rbx + 0x98<64>:word64]
	rax = Mem0[rbx + 0x10<64>:word64]
	rdx = rsi
	rax = rax - Mem0[rbx + 8<64>:word64]
	SCZO = cond(rax)
	r9 = Mem0[rbx + 0xB0<64>:word64]
	r8 = Mem0[rbx + 0xA0<64>:word64]
	r10 = Mem0[rcx:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	call Mem0[r10 + 0x38<64>:word64] (retsize: 8;)
	eax = eax + Mem0[rbx + 0xA0<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax - Mem0[rbx + 0xB8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455500_exit
fn0000000000455500_exit:


// fn0000000000455570
// Return size: 8
define fn0000000000455570
fn0000000000455570_entry:
	rsp = fp
	// succ:  l0000000000455570
l0000000000455570:
	SCZO = cond(Mem0[rcx + 0x90<64>:byte] - 0<8>)
	branch Test(NE,Z) l00000000004555AA
	// succ:  l0000000000455579 l00000000004555AA
l0000000000455579:
	rax = Mem0[rcx + 0x10<64>:word64]
	Mem0[rcx + 0x90<64>:byte] = 1<8>
	Mem0[rcx + 0x80<64>:word64] = rax
	rax = Mem0[rcx + 0x18<64>:word64]
	Mem0[rcx + 0x88<64>:word64] = rax
	rax = rcx + 0x7B<64>
	Mem0[rcx + 8<64>:word64] = rax
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = rcx + 0x7C<64>
	Mem0[rcx + 0x18<64>:word64] = rax
	// succ:  l00000000004555AA
l00000000004555AA:
	return
	// succ:  fn0000000000455570_exit
fn0000000000455570_exit:


// fn00000000004555B0
// Return size: 8
define fn00000000004555B0
fn00000000004555B0_entry:
	rsp = fp
	// succ:  l00000000004555B0
l00000000004555B0:
	SCZO = cond(Mem0[rcx + 0x90<64>:byte] - 0<8>)
	branch Test(EQ,Z) l00000000004555F3
	// succ:  l00000000004555B9 l00000000004555F3
l00000000004555B9:
	rax = Mem0[rcx + 8<64>:word64]
	SCZO = cond(Mem0[rcx + 0x10<64>:word64] - rax)
	rdx = Mem0[rcx + 0x88<64>:word64]
	r8 = Mem0[rcx + 0x68<64>:word64]
	Mem0[rcx + 0x90<64>:byte] = 0<8>
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word64] = r8
	Mem0[rcx + 0x18<64>:word64] = rdx
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = rax + Mem0[rcx + 0x80<64>:word64]
	SCZO = cond(rax)
	Mem0[rcx + 0x80<64>:word64] = rax
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l00000000004555F3
l00000000004555F3:
	return
	// succ:  fn00000000004555B0_exit
fn00000000004555B0_exit:


// fn0000000000455600
// Return size: 0
define fn0000000000455600
fn0000000000455600_entry:
	rsp = fp
	// succ:  l0000000000455600
l0000000000455600:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xD8<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x28<64>:word64]
	SCZO = cond(Mem0[rcx + 0x20<64>:word64] - rax)
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	r15 = rcx
	branch Test(ULT,C) l0000000000455730
	// succ:  l0000000000455629 l0000000000455730
l0000000000455629:
	SCZO = cond(Mem0[r15 + 0x7A<64>:byte] - 0<8>)
	branch Test(EQ,Z) l00000000004556E0
	// succ:  l0000000000455634 l00000000004556E0
l0000000000455634:
	rcx = Mem0[r15 + 0x98<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000455747
	// succ:  l0000000000455644 l0000000000455747
l0000000000455644:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(sil - al)
	branch Test(ULE,CZ) l00000000004556E0
	// succ:  l0000000000455653 l00000000004556E0
l0000000000455653:
	r12 = r15 + 0x60<64>
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	rdi = rsp + 0x50<64>
	rbp = rsp + 0x48<64>
	r14 = r15 + 0x48<64>
	goto l0000000000455683
	// succ:  l0000000000455683
l0000000000455670:
	SZO = cond(r13 & r13)
	C = false
	branch Test(LE,SZO) l00000000004556BC
	// succ:  l0000000000455675 l00000000004556BC
l0000000000455675:
	SCZO = cond(ebx - 1<32>)
	branch Test(NE,Z) l00000000004556BC
	// succ:  l000000000045567A l00000000004556BC
l000000000045567A:
	SZO = cond(sil & sil)
	C = false
	branch Test(EQ,Z) l0000000000455724
	// succ:  l0000000000455683 l0000000000455724
l0000000000455683:
	rcx = Mem0[r15 + 0x98<64>:word64]
	r9 = rsp + 0xD0<64>
	r8 = rdi
	rdx = r12
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x20<64>:word64] = rbp
	call Mem0[rax + 0x18<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 2<32>)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(EQ,Z) l0000000000455724
	// succ:  l00000000004556AA l0000000000455724
l00000000004556AA:
	SCZO = cond(eax - 1<32>)
	branch Test(UGT,CZ) l0000000000455670
	// succ:  l00000000004556AF l0000000000455670
l00000000004556AF:
	r9 = Mem0[rsp + 0x48<64>:word64]
	r9 = r9 - rdi
	SCZO = cond(r9)
	SZO = cond(r9 & r9)
	C = false
	branch Test(GT,SZO) l0000000000455700
	// succ:  l00000000004556BC l0000000000455700
l00000000004556BC:
	SZO = cond(sil & sil)
	C = false
	branch Test(EQ,Z) l00000000004556E0
	// succ:  l00000000004556C1 l00000000004556E0
l00000000004556C1:
	rax = Mem0[r15:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r15
	call Mem0[rax + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	sil = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l00000000004556E0
l00000000004556E0:
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0xD8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455600_exit
l0000000000455700:
	r8 = r9
	rdx = rdi
	rcx = r14
	Mem0[rsp + 0x38<64>:word64] = r9
	call fn0000000000454E50 (retsize: 8;)
	r9 = Mem0[rsp + 0x38<64>:word64]
	r13 = rax
	SCZO = cond(r9 - rax)
	branch Test(EQ,Z) l0000000000455670
	// succ:  l0000000000455724 l0000000000455670
l0000000000455724:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l00000000004556E0
	// succ:  l00000000004556E0
l0000000000455730:
	rax = Mem0[rcx:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	sil = CONVERT(Test(NE,Z), bool, int8)
	goto l0000000000455629
	// succ:  l0000000000455629
l0000000000455747:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000045574F_thunk_fn0000000000455750
l000000000045574F_thunk_fn0000000000455750:
	call fn0000000000455750 (retsize: 0;)
	return
	// succ:  fn0000000000455600_exit
fn0000000000455600_exit:


// fn0000000000455750
// Return size: 8
define fn0000000000455750
fn0000000000455750_entry:
	rsp = fp
	// succ:  l0000000000455750
l0000000000455750:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x68<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	rbx = rcx
	rcx = Mem0[rcx + 0x98<64>:word64]
	rdi = rdx
	rsi = r8
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004558AF
	// succ:  l0000000000455781 l00000000004558AF
l0000000000455781:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004557FC
	// succ:  l000000000045578B l00000000004557FC
l000000000045578B:
	rcx = Mem0[rbx + 0x98<64>:word64]
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x40<64>:word64] (retsize: 8;)
	r9 = CONVERT(eax, word32, int64)
	r9 = r9 *s rsi
	SCZO = cond(r9)
	rax = r9 + 0x1E<64>
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rcx = Mem0[rbx + 0x98<64>:word64]
	rsp = rsp - rax
	SCZO = cond(rsp)
	r12 = rbx + 0x60<64>
	r13 = rbp - 0x30<64>
	r14 = rsp + 0x40<64>
	r15 = rbp - 0x28<64>
	r8 = rdi
	rax = Mem0[rcx:word64]
	rdx = r12
	Mem0[rsp + 0x38<64>:word64] = r13
	r9 = r9 + r14
	SCZO = cond(r9)
	Mem0[rsp + 0x28<64>:word64] = r14
	Mem0[rsp + 0x20<64>:word64] = r15
	Mem0[rsp + 0x30<64>:word64] = r9
	r9 = rdi + rsi
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 1<32>)
	branch Test(ULE,CZ) l0000000000455822
	// succ:  l00000000004557F3 l0000000000455822
l00000000004557F3:
	SCZO = cond(eax - 3<32>)
	branch Test(NE,Z) l00000000004558A3
	// succ:  l00000000004557FC l00000000004558A3
l00000000004557FC:
	rcx = rbx + 0x48<64>
	r8 = rsi
	rdx = rdi
	call fn0000000000454E50 (retsize: 8;)
	// succ:  l000000000045580B
l000000000045580B:
	SCZO = cond(rax - rsi)
	al = CONVERT(Test(EQ,Z), bool, int8)
	rsp = rbp - 0x18<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455750_exit
l0000000000455822:
	r10 = Mem0[rbp - 0x30<64>:word64]
	rdi = rbx + 0x48<64>
	rdx = r14
	Mem0[rbp - 0x3C<64>:word32] = eax
	rcx = rdi
	rsi = r10
	Mem0[rbp - 0x38<64>:word64] = r10
	rsi = rsi - r14
	SCZO = cond(rsi)
	r8 = rsi
	call fn0000000000454E50 (retsize: 8;)
	SCZO = cond(rsi - rax)
	branch Test(NE,Z) l000000000045580B
	// succ:  l000000000045584A l000000000045580B
l000000000045584A:
	r9d = Mem0[rbp - 0x3C<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	r10 = Mem0[rbp - 0x38<64>:word64]
	r9d = r9d & 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	branch Test(EQ,Z) l000000000045580B
	// succ:  l0000000000455858 l000000000045580B
l0000000000455858:
	rcx = Mem0[rbx + 0x98<64>:word64]
	r9 = Mem0[rbx + 0x28<64>:word64]
	rdx = r12
	r8 = Mem0[rbp - 0x28<64>:word64]
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x38<64>:word64] = r13
	Mem0[rsp + 0x30<64>:word64] = r10
	Mem0[rsp + 0x28<64>:word64] = r14
	Mem0[rsp + 0x20<64>:word64] = r15
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l00000000004558A3
	// succ:  l0000000000455889 l00000000004558A3
l0000000000455889:
	rsi = Mem0[rbp - 0x30<64>:word64]
	rdx = r14
	rcx = rdi
	rsi = rsi - r14
	SCZO = cond(rsi)
	r8 = rsi
	call fn0000000000454E50 (retsize: 8;)
	goto l000000000045580B
	// succ:  l000000000045580B
l00000000004558A3:
	rcx = 0x000000000048D570<p64>
	call fn0000000000470B20 (retsize: 8;)
	// succ:  l00000000004558AF
l00000000004558AF:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l00000000004558BF_thunk_fn00000000004558C0
l00000000004558BF_thunk_fn00000000004558C0:
	call fn00000000004558C0 (retsize: 0;)
	return
	// succ:  fn0000000000455750_exit
fn0000000000455750_exit:


// fn00000000004558C0
// Return size: 8
define fn00000000004558C0
fn00000000004558C0_entry:
	rsp = fp
	// succ:  l00000000004558C0
l00000000004558C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0x78<64>:byte] - 0<8>)
	rbx = rcx
	branch Test(EQ,Z) l00000000004558E8
	// succ:  l00000000004558CE l00000000004558E8
l00000000004558CE:
	rcx = Mem0[rcx + 0x68<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004558DC
	// succ:  l00000000004558D7 l00000000004558DC
l00000000004558D7:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l00000000004558DC
l00000000004558DC:
	Mem0[rbx + 0x68<64>:word64] = 0<64>
	Mem0[rbx + 0x78<64>:byte] = 0<8>
	// succ:  l00000000004558E8
l00000000004558E8:
	rcx = Mem0[rbx + 0xA0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004558F9
	// succ:  l00000000004558F4 l00000000004558F9
l00000000004558F4:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l00000000004558F9
l00000000004558F9:
	Mem0[rbx + 0xA0<64>:word64] = 0<64>
	Mem0[rbx + 0xA8<64>:word64] = 0<64>
	Mem0[rbx + 0xB0<64>:word64] = 0<64>
	Mem0[rbx + 0xB8<64>:word64] = 0<64>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004558C0_exit
fn00000000004558C0_exit:


// fn0000000000455930
// Return size: 8
define fn0000000000455930
fn0000000000455930_entry:
	rsp = fp
	// succ:  l0000000000455930
l0000000000455930:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0x78<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000455942
	// succ:  l000000000045593B l0000000000455942
l000000000045593B:
	SCZO = cond(Mem0[rcx + 0x68<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000455950
	// succ:  l0000000000455942 l0000000000455950
l0000000000455942:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455930_exit
l0000000000455950:
	rbx = rcx
	rcx = Mem0[rcx + 0x70<64>:word64]
	call fn0000000000475560 (retsize: 8;)
	Mem0[rbx + 0x78<64>:byte] = 1<8>
	Mem0[rbx + 0x68<64>:word64] = rax
	goto l0000000000455942
	// succ:  l0000000000455942
fn0000000000455930_exit:


// fn0000000000455970
// Return size: 8
define fn0000000000455970
fn0000000000455970_entry:
	rsp = fp
	// succ:  l0000000000455970
l0000000000455970:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rsi = rcx + 0x48<64>
	rbx = rcx
	rbp = rdx
	edi = r8d
	rdi = CONVERT(edi, word32, uint64)
	rcx = rsi
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000455A60
	// succ:  l0000000000455995 l0000000000455A60
l0000000000455995:
	r9d = 0x1B4<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8d = edi
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rcx = rsi
	call fn0000000000454D00 (retsize: 8;)
	rcx = rsi
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000455A60
	// succ:  l00000000004559B9 l0000000000455A60
l00000000004559B9:
	SCZO = cond(Mem0[rbx + 0x78<64>:byte] - 0<8>)
	rax = Mem0[rbx + 0x68<64>:word64]
	branch Test(EQ,Z) l0000000000455A10
	// succ:  l00000000004559C3 l0000000000455A10
l00000000004559C3:
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	SZO = cond(dil & 2<8>)
	C = false
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = Mem0[rbx + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 0x58<64>:word32] = edi
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0x60<64>:word32] = eax
	Mem0[rbx + 0x64<64>:word32] = eax
	branch Test(NE,Z) l0000000000455A30
	// succ:  l0000000000455A01 l0000000000455A30
l0000000000455A01:
	rax = rbx
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455970_exit
l0000000000455A10:
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l00000000004559C3
	// succ:  l0000000000455A15 l00000000004559C3
l0000000000455A15:
	rcx = Mem0[rbx + 0x70<64>:word64]
	call fn0000000000475560 (retsize: 8;)
	Mem0[rbx + 0x78<64>:byte] = 1<8>
	Mem0[rbx + 0x68<64>:word64] = rax
	goto l00000000004559C3
	// succ:  l00000000004559C3
l0000000000455A30:
	rax = Mem0[rbx:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rsp + 0x30<64>
	Mem0[rsp + 0x20<64>:word32] = edi
	r9d = 2<32>
	r9 = CONVERT(r9d, word32, uint64)
	rdx = rbx
	call Mem0[rax + 0x20<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x30<64>:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l0000000000455A01
	// succ:  l0000000000455A53 l0000000000455A01
l0000000000455A53:
	rcx = rbx
	call fn0000000000455AB0 (retsize: 8;)
	// succ:  l0000000000455A60
l0000000000455A60:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455970_exit
fn0000000000455970_exit:


// fn0000000000455A70
// Return size: 8
define fn0000000000455A70
fn0000000000455A70_entry:
	rsp = fp
	// succ:  l0000000000455A70
l0000000000455A70:
	rdx = Mem0[rdx:word64]
	// succ:  l0000000000455A73_thunk_fn0000000000455970
l0000000000455A73_thunk_fn0000000000455970:
	call fn0000000000455970 (retsize: 0;)
	return
	// succ:  fn0000000000455A70_exit
fn0000000000455A70_exit:


// fn0000000000455A80
// Return size: 8
define fn0000000000455A80
fn0000000000455A80_entry:
	rsp = fp
	// succ:  l0000000000455A80
l0000000000455A80:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rdx = Mem0[rcx + 0x28<64>:word64]
	SCZO = cond(Mem0[rcx + 0x20<64>:word64] - rdx)
	branch Test(UGE,C) l0000000000455AA6
	// succ:  l0000000000455A90 l0000000000455AA6
l0000000000455A90:
	rax = Mem0[rcx:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = -eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	C = eax == 0<32>
	// succ:  l0000000000455AA6
l0000000000455AA6:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000455A80_exit
fn0000000000455A80_exit:


// fn0000000000455AB0
// Return size: 8
define fn0000000000455AB0
fn0000000000455AB0_entry:
	rsp = fp
	// succ:  l0000000000455AB0
l0000000000455AB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rdi = rcx + 0x48<64>
	rbx = rcx
	rcx = rdi
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000455B53
	// succ:  l0000000000455ACE l0000000000455B53
l0000000000455ACE:
	rcx = rbx
	Mem0[rsp + 0x20<64>:word64] = rbx
	call fn0000000000455600 (retsize: 8;)
	rsp = rsp + 8<64>
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	rcx = Mem0[rsp + 0x20<64>:word64]
	Mem0[rcx + 0x58<64>:word32] = 0<32>
	Mem0[rcx + 0x90<64>:byte] = 0<8>
	call fn00000000004558C0 (retsize: 8;)
	rdx = Mem0[rsp + 0x20<64>:word64]
	rcx = rdi
	rax = Mem0[rdx + 0x68<64>:word64]
	Mem0[rdx + 0x79<64>:byte] = 0<8>
	Mem0[rdx + 0x7A<64>:byte] = 0<8>
	Mem0[rdx + 0x28<64>:word64] = 0<64>
	Mem0[rdx + 0x20<64>:word64] = 0<64>
	Mem0[rdx + 0x30<64>:word64] = 0<64>
	Mem0[rdx + 8<64>:word64] = rax
	Mem0[rdx + 0x10<64>:word64] = rax
	Mem0[rdx + 0x18<64>:word64] = rax
	eax = Mem0[rdx + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdx + 0x60<64>:word32] = eax
	Mem0[rdx + 0x64<64>:word32] = eax
	call fn0000000000454D70 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000455B53
	// succ:  l0000000000455B43 l0000000000455B53
l0000000000455B43:
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000455B53
	// succ:  l0000000000455B48 l0000000000455B53
l0000000000455B48:
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455AB0_exit
l0000000000455B53:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455AB0_exit
fn0000000000455AB0_exit:


// fn0000000000455BB0
// Return size: 8
define fn0000000000455BB0
fn0000000000455BB0_entry:
	rsp = fp
	// succ:  l0000000000455BB0
l0000000000455BB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	rsi = rdx
	call fn00000000004725E0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000455CE3
	// succ:  l0000000000455BCD l0000000000455CE3
l0000000000455BCD:
	rcx = rsi
	call fn0000000000473080 (retsize: 8;)
	rsi = rax
	// succ:  l0000000000455BD8
l0000000000455BD8:
	rcx = rbx + 0x48<64>
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000455BF4
	// succ:  l0000000000455BE5 l0000000000455BF4
l0000000000455BE5:
	Mem0[rbx + 0x98<64>:word64] = rsi
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455BB0_exit
l0000000000455BF4:
	SCZO = cond(Mem0[rbx + 0x79<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000455C90
	// succ:  l0000000000455BFE l0000000000455C90
l0000000000455BFE:
	rcx = Mem0[rbx + 0x98<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000455DA4
	// succ:  l0000000000455C0E l0000000000455DA4
l0000000000455C0E:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x28<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000455C7D
	// succ:  l0000000000455C19 l0000000000455C7D
l0000000000455C19:
	SCZO = cond(Mem0[rbx + 0x79<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000455CA0
	// succ:  l0000000000455C23 l0000000000455CA0
l0000000000455C23:
	rcx = Mem0[rbx + 0x98<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000455DA4
	// succ:  l0000000000455C33 l0000000000455DA4
l0000000000455C33:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000455CF0
	// succ:  l0000000000455C41 l0000000000455CF0
l0000000000455C41:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000455BE5
	// succ:  l0000000000455C46 l0000000000455BE5
l0000000000455C46:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000455BE5
	// succ:  l0000000000455C53 l0000000000455BE5
l0000000000455C53:
	edx = Mem0[rbx + 0x58<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbx:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rsp + 0x30<64>
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = edx
	rdx = rbx
	call Mem0[rax + 0x20<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x30<64>:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l0000000000455BE5
	// succ:  l0000000000455C7D l0000000000455BE5
l0000000000455C7D:
	Mem0[rbx + 0x98<64>:word64] = 0<64>
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455BB0_exit
l0000000000455C90:
	SCZO = cond(Mem0[rbx + 0x7A<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000455BE5
	// succ:  l0000000000455C9A l0000000000455BE5
l0000000000455C9A:
	goto l0000000000455BFE
	// succ:  l0000000000455BFE
l0000000000455CA0:
	SCZO = cond(Mem0[rbx + 0x7A<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000455BE5
	// succ:  l0000000000455CAA l0000000000455BE5
l0000000000455CAA:
	rcx = rbx
	call fn0000000000455600 (retsize: 8;)
	rsp = rsp + 8<64>
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000455C7D
	// succ:  l0000000000455CB6 l0000000000455C7D
l0000000000455CB6:
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	goto l0000000000455BE5
	// succ:  l0000000000455BE5
l0000000000455CE3:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l0000000000455BD8
	// succ:  l0000000000455BD8
l0000000000455CF0:
	rcx = Mem0[rbx + 0x98<64>:word64]
	rax = Mem0[rbx + 0x10<64>:word64]
	rdx = rbx + 0x64<64>
	rax = rax - Mem0[rbx + 8<64>:word64]
	SCZO = cond(rax)
	rdi = Mem0[rbx + 0xA0<64>:word64]
	r9 = Mem0[rbx + 0xB0<64>:word64]
	r10 = Mem0[rcx:word64]
	r8 = rdi
	Mem0[rsp + 0x20<64>:word64] = rax
	call Mem0[r10 + 0x38<64>:word64] (retsize: 8;)
	rax = CONVERT(eax, int32, int64)
	rdx = rdi + rax
	rax = Mem0[rbx + 0xB8<64>:word64]
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	Mem0[rbx + 0xB0<64>:word64] = rdx
	rax = rax - rdx
	SCZO = cond(rax)
	branch Test(NE,Z) l0000000000455D90
	// succ:  l0000000000455D3B l0000000000455D90
l0000000000455D3B:
	rax = Mem0[rbx + 0xA0<64>:word64]
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	rdi = rdi + rax
	SCZO = cond(rdi)
	Mem0[rbx + 0xB0<64>:word64] = rax
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0xB8<64>:word64] = rdi
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = Mem0[rbx + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 0x60<64>:word32] = eax
	Mem0[rbx + 0x64<64>:word32] = eax
	goto l0000000000455BE5
	// succ:  l0000000000455BE5
l0000000000455D90:
	rcx = Mem0[rbx + 0xA0<64>:word64]
	r8 = rax
	rdi = rax
	rax = memmove(rcx, rdx, r8)
	goto l0000000000455D3B
	// succ:  l0000000000455D3B
l0000000000455DA4:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000455DAF_thunk_fn0000000000455DB0
l0000000000455DAF_thunk_fn0000000000455DB0:
	call fn0000000000455DB0 (retsize: 0;)
	return
	// succ:  fn0000000000455BB0_exit
fn0000000000455BB0_exit:


// fn0000000000455DB0
// Return size: 8
define fn0000000000455DB0
fn0000000000455DB0_entry:
	rsp = fp
	// succ:  l0000000000455DB0
l0000000000455DB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rcx + 0x48<64>
	rsi = rdx
	rdi = r8
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000455DDF
	// succ:  l0000000000455DCD l0000000000455DDF
l0000000000455DCD:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(NE,Z) l0000000000455DF0
	// succ:  l0000000000455DD2 l0000000000455DF0
l0000000000455DD2:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(NE,Z) l0000000000455DF0
	// succ:  l0000000000455DD7 l0000000000455DF0
l0000000000455DD7:
	Mem0[rbx + 0x70<64>:word64] = 1<64>
	// succ:  l0000000000455DDF
l0000000000455DDF:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455DB0_exit
l0000000000455DF0:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000455DDF
	// succ:  l0000000000455DF5 l0000000000455DDF
l0000000000455DF5:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(LE,SZO) l0000000000455DDF
	// succ:  l0000000000455DFA l0000000000455DDF
l0000000000455DFA:
	rax = rbx
	Mem0[rbx + 0x68<64>:word64] = rsi
	Mem0[rbx + 0x70<64>:word64] = rdi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455DB0_exit
fn0000000000455DB0_exit:


// fn0000000000455E10
// Return size: 8
define fn0000000000455E10
fn0000000000455E10_entry:
	rsp = fp
	// succ:  l0000000000455E10
l0000000000455E10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0x90<64>:byte] - 0<8>)
	rbp = rcx
	rsi = rdx
	rbx = r8
	branch Test(EQ,Z) l0000000000455F50
	// succ:  l0000000000455E30 l0000000000455F50
l0000000000455E30:
	SZO = cond(r8 & r8)
	C = false
	rax = Mem0[rcx + 0x10<64>:word64]
	rdx = Mem0[rcx + 8<64>:word64]
	branch Test(LE,SZO) l0000000000455E46
	// succ:  l0000000000455E3D l0000000000455E46
l0000000000455E3D:
	SCZO = cond(rax - rdx)
	branch Test(EQ,Z) l0000000000455FBF
	// succ:  l0000000000455E46 l0000000000455FBF
l0000000000455E46:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	// succ:  l0000000000455E48
l0000000000455E48:
	SCZO = cond(rax - rdx)
	rcx = Mem0[rbp + 0x68<64>:word64]
	rdx = Mem0[rbp + 0x88<64>:word64]
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rbp + 0x90<64>:byte] = 0<8>
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = rax + Mem0[rbp + 0x80<64>:word64]
	SCZO = cond(rax)
	Mem0[rbp + 8<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x80<64>:word64] = rax
	Mem0[rbp + 0x10<64>:word64] = rax
	// succ:  l0000000000455E7D
l0000000000455E7D:
	rdx = Mem0[rbp + 0x70<64>:word64]
	r12d = Mem0[rbp + 0x58<64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	rax = rdx - 1<64>
	SCZO = cond(rdx - 2<64>)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(UGE,C) l0000000000455E96
	// succ:  l0000000000455E92_1 l0000000000455E96
l0000000000455E92_1:
	rax = rdx
	// succ:  l0000000000455E96
l0000000000455E96:
	SCZO = cond(rbx - rax)
	branch Test(LE,SZO) l0000000000455FA0
	// succ:  l0000000000455E9F l0000000000455FA0
l0000000000455E9F:
	rcx = Mem0[rbp + 0x98<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045609A
	// succ:  l0000000000455EAF l000000000045609A
l0000000000455EAF:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000455FA0
	// succ:  l0000000000455EBD l0000000000455FA0
l0000000000455EBD:
	r12d = r12d & 8<32>
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	branch Test(EQ,Z) l0000000000455FA0
	// succ:  l0000000000455EC7 l0000000000455FA0
l0000000000455EC7:
	rdx = Mem0[rbp + 0x10<64>:word64]
	r12 = Mem0[rbp + 0x18<64>:word64]
	r12 = r12 - rdx
	SCZO = cond(r12)
	branch Test(NE,Z) l0000000000455FF2
	// succ:  l0000000000455ED8 l0000000000455FF2
l0000000000455ED8:
	r12 = rbp + 0x48<64>
	goto l0000000000455EEF
	// succ:  l0000000000455EEF
l0000000000455EE0:
	rdi = rdi + rax
	SCZO = cond(rdi)
	rbx = rbx - rax
	SCZO = cond(rbx)
	branch Test(EQ,Z) l0000000000456010
	// succ:  l0000000000455EEC l0000000000456010
l0000000000455EEC:
	rsi = rsi + rax
	SCZO = cond(rsi)
	// succ:  l0000000000455EEF
l0000000000455EEF:
	r8 = rbx
	rdx = rsi
	rcx = r12
	call fn0000000000454DE0 (retsize: 8;)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l000000000045607D
	// succ:  l0000000000455F07 l000000000045607D
l0000000000455F07:
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l0000000000455EE0
	// succ:  l0000000000455F0C l0000000000455EE0
l0000000000455F0C:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000456010
	// succ:  l0000000000455F15 l0000000000456010
l0000000000455F15:
	rax = Mem0[rbp + 0x68<64>:word64]
	Mem0[rbp + 0x28<64>:word64] = 0<64>
	Mem0[rbp + 0x20<64>:word64] = 0<64>
	Mem0[rbp + 0x30<64>:word64] = 0<64>
	Mem0[rbp + 0x79<64>:byte] = 0<8>
	Mem0[rbp + 8<64>:word64] = rax
	Mem0[rbp + 0x10<64>:word64] = rax
	Mem0[rbp + 0x18<64>:word64] = rax
	rax = rdi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455E10_exit
l0000000000455F50:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SCZO = cond(Mem0[rcx + 0x7A<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000455E7D
	// succ:  l0000000000455F5C l0000000000455E7D
l0000000000455F5C:
	rax = Mem0[rcx:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000455FB1
	// succ:  l0000000000455F6C l0000000000455FB1
l0000000000455F6C:
	rax = Mem0[rbp + 0x68<64>:word64]
	Mem0[rbp + 0x28<64>:word64] = 0<64>
	Mem0[rbp + 0x20<64>:word64] = 0<64>
	Mem0[rbp + 0x30<64>:word64] = 0<64>
	Mem0[rbp + 0x7A<64>:byte] = 0<8>
	Mem0[rbp + 8<64>:word64] = rax
	Mem0[rbp + 0x10<64>:word64] = rax
	Mem0[rbp + 0x18<64>:word64] = rax
	goto l0000000000455E7D
	// succ:  l0000000000455E7D
l0000000000455FA0:
	r8 = rbx
	rdx = rsi
	rcx = rbp
	call fn0000000000462650 (retsize: 8;)
	rdi = rdi + rax
	SCZO = cond(rdi)
	// succ:  l0000000000455FB1
l0000000000455FB1:
	rax = rdi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455E10_exit
l0000000000455FBF:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rbx = rbx - 1<64>
	SCZO = cond(rbx)
	rcx = rsi + 1<64>
	Mem0[rsi:byte] = al
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(Mem0[rbp + 0x90<64>:byte] - 0<8>)
	Mem0[rbp + 0x10<64>:word64] = rax
	branch Test(NE,Z) l0000000000456089
	// succ:  l0000000000455FE5 l0000000000456089
l0000000000455FE5:
	rsi = rcx
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	goto l0000000000455E7D
	// succ:  l0000000000455E7D
l0000000000455FF2:
	rcx = rsi
	r8 = r12
	rsi = rsi + r12
	SCZO = cond(rsi)
	rax = memcpy(rcx, rdx, r8)
	rdi = rdi + r12
	SCZO = cond(rdi)
	v21 = Mem0[rbp + 0x10<64>:word64] + r12
	Mem0[rbp + 0x10<64>:word64] = v21
	SCZO = cond(v21)
	rbx = rbx - r12
	SCZO = cond(rbx)
	goto l0000000000455ED8
	// succ:  l0000000000455ED8
l0000000000456010:
	SZO = cond(Mem0[rbp + 0x58<64>:byte] & 0x11<8>)
	C = false
	branch Test(NE,Z) l0000000000456050
	// succ:  l0000000000456016 l0000000000456050
l0000000000456016:
	rax = Mem0[rbp + 0x68<64>:word64]
	Mem0[rbp + 8<64>:word64] = rax
	Mem0[rbp + 0x10<64>:word64] = rax
	Mem0[rbp + 0x18<64>:word64] = rax
	// succ:  l0000000000456026
l0000000000456026:
	Mem0[rbp + 0x28<64>:word64] = 0<64>
	Mem0[rbp + 0x20<64>:word64] = 0<64>
	Mem0[rbp + 0x30<64>:word64] = 0<64>
	// succ:  l000000000045603E
l000000000045603E:
	rax = rdi
	Mem0[rbp + 0x79<64>:byte] = 1<8>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000455E10_exit
l0000000000456050:
	rdx = Mem0[rbp + 0x70<64>:word64]
	rax = Mem0[rbp + 0x68<64>:word64]
	SCZO = cond(rdx - 1<64>)
	Mem0[rbp + 8<64>:word64] = rax
	Mem0[rbp + 0x10<64>:word64] = rax
	Mem0[rbp + 0x18<64>:word64] = rax
	branch Test(ULE,CZ) l0000000000456026
	// succ:  l000000000045606A l0000000000456026
l000000000045606A:
	Mem0[rbp + 0x28<64>:word64] = rax
	Mem0[rbp + 0x20<64>:word64] = rax
	rax = rax - 1<64> + rdx
	Mem0[rbp + 0x30<64>:word64] = rax
	goto l000000000045603E
	// succ:  l000000000045603E
l000000000045607D:
	rcx = 0x000000000048D540<p64>
	call fn0000000000470B20 (retsize: 8;)
	// succ:  l0000000000456089
l0000000000456089:
	rdx = Mem0[rbp + 8<64>:word64]
	rsi = rcx
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	goto l0000000000455E48
	// succ:  l0000000000455E48
l000000000045609A:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000045609F_thunk_fn00000000004560A0
l000000000045609F_thunk_fn00000000004560A0:
	call fn00000000004560A0 (retsize: 0;)
	return
	// succ:  fn0000000000455E10_exit
fn0000000000455E10_exit:


// fn00000000004560A0
// Return size: 8
define fn00000000004560A0
fn00000000004560A0_entry:
	rsp = fp
	// succ:  l00000000004560A0
l00000000004560A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	SZO = cond(Mem0[rcx + 0x58<64>:byte] & 0x11<8>)
	C = false
	rbx = rcx
	rcx = Mem0[rcx + 0x98<64>:word64]
	rdi = rdx
	rsi = r8
	bpl = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004561D1
	// succ:  l00000000004560C9 l00000000004561D1
l00000000004560C9:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000456151
	// succ:  l00000000004560D3 l0000000000456151
l00000000004560D3:
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l0000000000456151
	// succ:  l00000000004560D8 l0000000000456151
l00000000004560D8:
	SCZO = cond(Mem0[rbx + 0x79<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000456151
	// succ:  l00000000004560DE l0000000000456151
l00000000004560DE:
	rbp = Mem0[rbx + 0x28<64>:word64]
	rax = Mem0[rbx + 0x30<64>:word64]
	rax = rax - rbp
	SCZO = cond(rax)
	SCZO = cond(Mem0[rbx + 0x7A<64>:byte] - 0<8>)
	branch Test(NE,Z) l00000000004560FF
	// succ:  l00000000004560EF l00000000004560FF
l00000000004560EF:
	rdx = Mem0[rbx + 0x70<64>:word64]
	rcx = rdx - 1<64>
	SCZO = cond(rdx - 2<64>)
	branch Test(ULT,C) l00000000004560FF
	// succ:  l00000000004560FB_1 l00000000004560FF
l00000000004560FB_1:
	rax = rcx
	// succ:  l00000000004560FF
l00000000004560FF:
	SCZO = cond(rax - 0x3FF<64>)
	edx = 0x400<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(LE,SZO) l000000000045610E
	// succ:  l000000000045610A_1 l000000000045610E
l000000000045610A_1:
	rax = rdx
	// succ:  l000000000045610E
l000000000045610E:
	SCZO = cond(rax - rsi)
	branch Test(GT,SZO) l0000000000456151
	// succ:  l0000000000456113 l0000000000456151
l0000000000456113:
	rdx = Mem0[rbx + 0x20<64>:word64]
	rcx = rbx + 0x48<64>
	Mem0[rsp + 0x20<64>:word64] = rsi
	r9 = rdi
	rbp = rbp - rdx
	SCZO = cond(rbp)
	r8 = rbp
	rsi = rsi + rbp
	SCZO = cond(rsi)
	call fn0000000000454FA0 (retsize: 8;)
	SCZO = cond(rax - rsi)
	branch Test(EQ,Z) l0000000000456170
	// succ:  l0000000000456136 l0000000000456170
l0000000000456136:
	rdx = rax
	rdx = rdx - rbp
	SCZO = cond(rdx)
	SCZO = cond(rbp - rax)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(GE,SO) l0000000000456148
	// succ:  l0000000000456144_1 l0000000000456148
l0000000000456144_1:
	rax = rdx
	// succ:  l0000000000456148
l0000000000456148:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004560A0_exit
l0000000000456151:
	r8 = rsi
	rdx = rdi
	rcx = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000456162_thunk_fn0000000000462720
l0000000000456162_thunk_fn0000000000462720:
	call fn0000000000462720 (retsize: 0;)
	return
	// succ:  fn00000000004560A0_exit
l0000000000456170:
	SZO = cond(Mem0[rbx + 0x58<64>:byte] & 0x11<8>)
	C = false
	branch Test(NE,Z) l00000000004561A4
	// succ:  l0000000000456176 l00000000004561A4
l0000000000456176:
	rdx = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 8<64>:word64] = rdx
	Mem0[rbx + 0x10<64>:word64] = rdx
	Mem0[rbx + 0x18<64>:word64] = rdx
	// succ:  l0000000000456186
l0000000000456186:
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	// succ:  l000000000045619E
l000000000045619E:
	Mem0[rbx + 0x7A<64>:byte] = 1<8>
	goto l0000000000456136
	// succ:  l0000000000456136
l00000000004561A4:
	rcx = Mem0[rbx + 0x70<64>:word64]
	rdx = Mem0[rbx + 0x68<64>:word64]
	SCZO = cond(rcx - 1<64>)
	Mem0[rbx + 8<64>:word64] = rdx
	Mem0[rbx + 0x10<64>:word64] = rdx
	Mem0[rbx + 0x18<64>:word64] = rdx
	branch Test(ULE,CZ) l0000000000456186
	// succ:  l00000000004561BE l0000000000456186
l00000000004561BE:
	Mem0[rbx + 0x28<64>:word64] = rdx
	Mem0[rbx + 0x20<64>:word64] = rdx
	rdx = rdx - 1<64> + rcx
	Mem0[rbx + 0x30<64>:word64] = rdx
	goto l000000000045619E
	// succ:  l000000000045619E
l00000000004561D1:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l00000000004561DF_thunk_fn00000000004561E0
l00000000004561DF_thunk_fn00000000004561E0:
	call fn00000000004561E0 (retsize: 0;)
	return
	// succ:  fn00000000004560A0_exit
fn00000000004560A0_exit:


// fn00000000004561E0
// Return size: 8
define fn00000000004561E0
fn00000000004561E0_entry:
	rsp = fp
	// succ:  l00000000004561E0
l00000000004561E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rcx + 8<64>:word32] = 0<32>
	rsi = rcx
	rcx = rdx
	rbx = rdx
	rdi = r8
	ebp = r9d
	rbp = CONVERT(ebp, word32, uint64)
	call fn0000000000455600 (retsize: 8;)
	rsp = rsp + 8<64>
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000456220
	// succ:  l000000000045620E l0000000000456220
l000000000045620E:
	rax = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004561E0_exit
l0000000000456220:
	rcx = rbx + 0x48<64>
	r8d = ebp
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rdi
	call fn0000000000454E80 (retsize: 8;)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l000000000045620E
	// succ:  l0000000000456235 l000000000045620E
l0000000000456235:
	rdx = Mem0[rbx + 0xA0<64>:word64]
	edi = Mem0[rsp + 0x70<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	Mem0[rsi:word64] = rax
	rax = rsi
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0xB8<64>:word64] = rdx
	Mem0[rbx + 0xB0<64>:word64] = rdx
	rdx = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0x60<64>:word32] = edi
	Mem0[rsi + 8<64>:word32] = edi
	Mem0[rbx + 8<64>:word64] = rdx
	Mem0[rbx + 0x10<64>:word64] = rdx
	Mem0[rbx + 0x18<64>:word64] = rdx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004561E0_exit
fn00000000004561E0_exit:


// fn00000000004562A0
// Return size: 8
define fn00000000004562A0
fn00000000004562A0_entry:
	rsp = fp
	// succ:  l00000000004562A0
l00000000004562A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = Mem0[rdx + 0x98<64>:word64]
	rbx = rdx
	rbp = r8
	r12d = r9d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004562E0
	// succ:  l00000000004562C6 l00000000004562E0
l00000000004562C6:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x28<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0<32>)
	r13d = eax
	r13 = CONVERT(r13d, word32, uint64)
	branch Test(LT,SO) l00000000004562E0
	// succ:  l00000000004562D4 l00000000004562E0
l00000000004562D4:
	dil = CONVERT(Test(LE,SZO), bool, int8)
	goto l00000000004562E8
	// succ:  l00000000004562E8
l00000000004562E0:
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	// succ:  l00000000004562E8
l00000000004562E8:
	SZO = cond(rbp & rbp)
	C = false
	r14 = rbx + 0x48<64>
	Mem0[rsi:word64] = 0xFFFFFFFFFFFFFFFF<64>
	dl = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rsi + 8<64>:word32] = 0<32>
	edi = edi & edx
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	rcx = r14
	call fn000000000042AA50 (retsize: 8;)
	SCZO = cond(al - dil)
	branch Test(ULE,CZ) l000000000045636B
	// succ:  l000000000045630F l000000000045636B
l000000000045630F:
	SCZO = cond(r12d - 1<32>)
	dil = CONVERT(Test(EQ,Z), bool, int8)
	SZO = cond(rbp & rbp)
	C = false
	branch Test(NE,Z) l0000000000456391
	// succ:  l000000000045631C l0000000000456391
l000000000045631C:
	SZO = cond(dil & dil)
	C = false
	branch Test(EQ,Z) l0000000000456391
	// succ:  l0000000000456321 l0000000000456391
l0000000000456321:
	SCZO = cond(Mem0[rbx + 0x7A<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000456380
	// succ:  l0000000000456327 l0000000000456380
l0000000000456327:
	SCZO = cond(Mem0[rbx + 0x79<64>:byte] - 0<8>)
	eax = Mem0[rbx + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x5C<64>:word32] = eax
	branch Test(NE,Z) l0000000000456420
	// succ:  l0000000000456338 l0000000000456420
l0000000000456338:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	// succ:  l000000000045633A
l000000000045633A:
	SCZO = cond(Mem0[rbx + 0x7A<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000456348
	// succ:  l0000000000456340 l0000000000456348
l0000000000456340:
	rdi = Mem0[rbx + 0x28<64>:word64]
	rdi = rdi - Mem0[rbx + 0x20<64>:word64]
	SCZO = cond(rdi)
	// succ:  l0000000000456348
l0000000000456348:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rcx = r14
	call fn0000000000454E80 (retsize: 8;)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l000000000045636B
	// succ:  l000000000045635E l000000000045636B
l000000000045635E:
	rdi = rdi + rax
	SCZO = cond(rdi)
	eax = Mem0[rsp + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi:word64] = rdi
	Mem0[rsi + 8<64>:word32] = eax
	// succ:  l000000000045636B
l000000000045636B:
	rax = rsi
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004562A0_exit
l0000000000456380:
	rcx = Mem0[rbx + 0x98<64>:word64]
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000456327
	// succ:  l0000000000456391 l0000000000456327
l0000000000456391:
	SCZO = cond(Mem0[rbx + 0x90<64>:byte] - 0<8>)
	branch Test(EQ,Z) l00000000004563D4
	// succ:  l000000000045639A l00000000004563D4
l000000000045639A:
	rax = Mem0[rbx + 8<64>:word64]
	SCZO = cond(Mem0[rbx + 0x10<64>:word64] - rax)
	rdx = Mem0[rbx + 0x88<64>:word64]
	rcx = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x90<64>:byte] = 0<8>
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rbx + 8<64>:word64] = rcx
	Mem0[rbx + 0x18<64>:word64] = rdx
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = rax + Mem0[rbx + 0x80<64>:word64]
	SCZO = cond(rax)
	Mem0[rbx + 0x80<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	// succ:  l00000000004563D4
l00000000004563D4:
	eax = Mem0[rbx + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r8 = CONVERT(r13d, word32, int64)
	r8 = r8 *s rbp
	SCZO = cond(r8)
	SZO = cond(dil & dil)
	C = false
	Mem0[rsp + 0x5C<64>:word32] = eax
	branch Test(EQ,Z) l00000000004563ED
	// succ:  l00000000004563E7 l00000000004563ED
l00000000004563E7:
	SCZO = cond(Mem0[rbx + 0x79<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000456440
	// succ:  l00000000004563ED l0000000000456440
l00000000004563ED:
	eax = Mem0[rsp + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = rsp + 0x40<64>
	r9d = r12d
	r9 = CONVERT(r9d, word32, uint64)
	rdx = rbx
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn00000000004561E0 (retsize: 8;)
	rax = Mem0[rsp + 0x40<64>:word64]
	Mem0[rsi:word64] = rax
	eax = Mem0[rsp + 0x48<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi + 8<64>:word32] = eax
	goto l000000000045636B
	// succ:  l000000000045636B
l0000000000456420:
	eax = Mem0[rbx + 0x64<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = rsp + 0x5C<64>
	rcx = rbx
	Mem0[rsp + 0x5C<64>:word32] = eax
	call fn0000000000455500 (retsize: 8;)
	rdi = CONVERT(eax, word32, int64)
	goto l000000000045633A
	// succ:  l000000000045633A
l0000000000456440:
	eax = Mem0[rbx + 0x64<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = rsp + 0x5C<64>
	rcx = rbx
	Mem0[rsp + 0x38<64>:word64] = r8
	Mem0[rsp + 0x5C<64>:word32] = eax
	call fn0000000000455500 (retsize: 8;)
	r8 = Mem0[rsp + 0x38<64>:word64]
	rax = CONVERT(eax, int32, int64)
	r8 = r8 + rax
	SCZO = cond(r8)
	goto l00000000004563ED
	// succ:  l00000000004563ED
fn00000000004562A0_exit:


// fn0000000000456470
// Return size: 8
define fn0000000000456470
fn0000000000456470_entry:
	rsp = fp
	// succ:  l0000000000456470
l0000000000456470:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rdi = Mem0[r8:word64]
	rbp = Mem0[r8 + 8<64>:word64]
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rcx + 8<64>:word32] = 0<32>
	rbx = rcx
	rcx = rdx + 0x48<64>
	rsi = rdx
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004564CF
	// succ:  l00000000004564A0 l00000000004564CF
l00000000004564A0:
	SCZO = cond(Mem0[rsi + 0x90<64>:byte] - 0<8>)
	branch Test(NE,Z) l00000000004564E0
	// succ:  l00000000004564A9 l00000000004564E0
l00000000004564A9:
	rcx = rsp + 0x30<64>
	Mem0[rsp + 0x20<64>:word32] = ebp
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rdi
	rdx = rsi
	call fn00000000004561E0 (retsize: 8;)
	rax = Mem0[rsp + 0x30<64>:word64]
	Mem0[rbx:word64] = rax
	eax = Mem0[rsp + 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 8<64>:word32] = eax
	// succ:  l00000000004564CF
l00000000004564CF:
	rax = rbx
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000456470_exit
l00000000004564E0:
	rax = Mem0[rsi + 8<64>:word64]
	SCZO = cond(Mem0[rsi + 0x10<64>:word64] - rax)
	rdx = Mem0[rsi + 0x88<64>:word64]
	rcx = Mem0[rsi + 0x68<64>:word64]
	Mem0[rsi + 0x90<64>:byte] = 0<8>
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rsi + 8<64>:word64] = rcx
	Mem0[rsi + 0x18<64>:word64] = rdx
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = rax + Mem0[rsi + 0x80<64>:word64]
	SCZO = cond(rax)
	Mem0[rsi + 0x80<64>:word64] = rax
	Mem0[rsi + 0x10<64>:word64] = rax
	goto l00000000004564A9
	// succ:  l00000000004564A9
fn0000000000456470_exit:


// fn0000000000456520
// Return size: 8
define fn0000000000456520
fn0000000000456520_entry:
	rsp = fp
	// succ:  l0000000000456520
l0000000000456520:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	SZO = cond(Mem0[rcx + 0x58<64>:byte] & 0x11<8>)
	C = false
	rbx = rcx
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	branch Test(EQ,Z) l00000000004565B6
	// succ:  l0000000000456535 l00000000004565B6
l0000000000456535:
	SCZO = cond(Mem0[rcx + 0x79<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000456579
	// succ:  l000000000045653B l0000000000456579
l000000000045653B:
	SCZO = cond(Mem0[rbx + 0x90<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000456645
	// succ:  l0000000000456548 l0000000000456645
l0000000000456548:
	rdx = rbx + 0x64<64>
	rcx = rbx
	call fn0000000000455500 (retsize: 8;)
	edx = Mem0[rbx + 0x64<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsp + 0x30<64>
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8 = CONVERT(eax, word32, int64)
	Mem0[rsp + 0x20<64>:word32] = edx
	rdx = rbx
	call fn00000000004561E0 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x30<64>:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l00000000004565B6
	// succ:  l0000000000456579 l00000000004565B6
l0000000000456579:
	rdx = Mem0[rbx + 0x20<64>:word64]
	r8 = Mem0[rbx + 0x28<64>:word64]
	SCZO = cond(esi - 0xFFFFFFFF<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(rdx - r8)
	branch Test(UGE,C) l00000000004565C4
	// succ:  l000000000045658C l00000000004565C4
l000000000045658C:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004565A3
	// succ:  l0000000000456590 l00000000004565A3
l0000000000456590:
	Mem0[r8:byte] = sil
	rax = Mem0[rbx + 0x28<64>:word64]
	rdx = Mem0[rbx + 0x20<64>:word64]
	r8 = rax + 1<64>
	Mem0[rbx + 0x28<64>:word64] = r8
	// succ:  l00000000004565A3
l00000000004565A3:
	r8 = r8 - rdx
	SCZO = cond(r8)
	rcx = rbx
	call fn0000000000455750 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000456684
	// succ:  l00000000004565B6 l0000000000456684
l00000000004565B6:
	esi = 0xFFFFFFFF<32>
	rsi = CONVERT(esi, word32, uint64)
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000456520_exit
l00000000004565C4:
	rcx = Mem0[rbx + 0x70<64>:word64]
	SCZO = cond(rcx - 1<64>)
	branch Test(ULE,CZ) l0000000000456620
	// succ:  l00000000004565CE l0000000000456620
l00000000004565CE:
	SZO = cond(Mem0[rbx + 0x58<64>:byte] & 0x11<8>)
	C = false
	branch Test(NE,Z) l00000000004566F0
	// succ:  l00000000004565D8 l00000000004566F0
l00000000004565D8:
	rdx = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = rdx
	Mem0[rbx + 0x10<64>:word64] = rdx
	Mem0[rbx + 0x18<64>:word64] = rdx
	// succ:  l0000000000456600
l0000000000456600:
	SZO = cond(al & al)
	C = false
	Mem0[rbx + 0x7A<64>:byte] = 1<8>
	branch Test(NE,Z) l0000000000456631
	// succ:  l0000000000456608 l0000000000456631
l0000000000456608:
	rax = Mem0[rbx + 0x28<64>:word64]
	Mem0[rax:byte] = sil
	v21 = Mem0[rbx + 0x28<64>:word64] + 1<64>
	Mem0[rbx + 0x28<64>:word64] = v21
	SCZO = cond(v21)
	goto l0000000000456631
	// succ:  l0000000000456631
l0000000000456620:
	SZO = cond(al & al)
	C = false
	Mem0[rsp + 0x4F<64>:byte] = sil
	branch Test(EQ,Z) l0000000000456720
	// succ:  l000000000045662D l0000000000456720
l000000000045662D:
	Mem0[rbx + 0x7A<64>:byte] = 1<8>
	// succ:  l0000000000456631
l0000000000456631:
	SCZO = cond(esi - 0xFFFFFFFF<32>)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l000000000045663C
	// succ:  l0000000000456639_1 l000000000045663C
l0000000000456639_1:
	esi = eax
	// succ:  l000000000045663C
l000000000045663C:
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000456520_exit
l0000000000456645:
	rax = Mem0[rbx + 8<64>:word64]
	SCZO = cond(Mem0[rbx + 0x10<64>:word64] - rax)
	rdx = Mem0[rbx + 0x88<64>:word64]
	rcx = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x90<64>:byte] = 0<8>
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rbx + 8<64>:word64] = rcx
	Mem0[rbx + 0x18<64>:word64] = rdx
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = rax + Mem0[rbx + 0x80<64>:word64]
	SCZO = cond(rax)
	Mem0[rbx + 0x80<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	goto l0000000000456548
	// succ:  l0000000000456548
l0000000000456684:
	SZO = cond(Mem0[rbx + 0x58<64>:byte] & 0x11<8>)
	C = false
	branch Test(NE,Z) l00000000004566C0
	// succ:  l000000000045668A l00000000004566C0
l000000000045668A:
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	// succ:  l000000000045669A
l000000000045669A:
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	goto l0000000000456631
	// succ:  l0000000000456631
l00000000004566C0:
	rdx = Mem0[rbx + 0x70<64>:word64]
	rax = Mem0[rbx + 0x68<64>:word64]
	SCZO = cond(rdx - 1<64>)
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	branch Test(ULE,CZ) l000000000045669A
	// succ:  l00000000004566DA l000000000045669A
l00000000004566DA:
	Mem0[rbx + 0x28<64>:word64] = rax
	Mem0[rbx + 0x20<64>:word64] = rax
	rax = rax - 1<64> + rdx
	Mem0[rbx + 0x30<64>:word64] = rax
	goto l0000000000456631
	// succ:  l0000000000456631
l00000000004566F0:
	rdx = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 8<64>:word64] = rdx
	Mem0[rbx + 0x10<64>:word64] = rdx
	Mem0[rbx + 0x18<64>:word64] = rdx
	Mem0[rbx + 0x28<64>:word64] = rdx
	Mem0[rbx + 0x20<64>:word64] = rdx
	rdx = rdx - 1<64> + rcx
	Mem0[rbx + 0x30<64>:word64] = rdx
	goto l0000000000456600
	// succ:  l0000000000456600
l0000000000456720:
	rdx = rsp + 0x4F<64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rbx
	call fn0000000000455750 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000045662D
	// succ:  l000000000045673B l000000000045662D
l000000000045673B:
	goto l00000000004565B6
	// succ:  l00000000004565B6
fn0000000000456520_exit:


// fn0000000000456740
// Return size: 8
define fn0000000000456740
fn0000000000456740_entry:
	rsp = fp
	// succ:  l0000000000456740
l0000000000456740:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	SZO = cond(Mem0[rcx + 0x58<64>:byte] & 8<8>)
	C = false
	rbx = rcx
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	branch Test(EQ,Z) l0000000000456840
	// succ:  l0000000000456757 l0000000000456840
l0000000000456757:
	SCZO = cond(Mem0[rcx + 0x7A<64>:byte] - 0<8>)
	branch Test(NE,Z) l00000000004567B2
	// succ:  l000000000045675D l00000000004567B2
l000000000045675D:
	SCZO = cond(edx - 0xFFFFFFFF<32>)
	rax = Mem0[rcx + 0x10<64>:word64]
	ebp = CONVERT(Mem0[rcx + 0x90<64>:byte], byte, word32)
	rbp = CONVERT(ebp, word32, uint64)
	dil = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(Mem0[rcx + 8<64>:word64] - rax)
	branch Test(UGE,C) l00000000004567FC
	// succ:  l0000000000456779 l00000000004567FC
l0000000000456779:
	rdx = rax - 1<64>
	Mem0[rcx + 0x10<64>:word64] = rdx
	eax = CONVERT(Mem0[rax - 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000456785
l0000000000456785:
	SCZO = cond(esi - eax)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(dil - al)
	branch Test(ULT,C) l0000000000456845
	// succ:  l0000000000456793 l0000000000456845
l0000000000456793:
	SZO = cond(dil & dil)
	C = false
	branch Test(EQ,Z) l0000000000456850
	// succ:  l000000000045679C l0000000000456850
l000000000045679C:
	SCZO = cond(esi - 0xFFFFFFFF<32>)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l00000000004567A7
	// succ:  l00000000004567A4_1 l00000000004567A7
l00000000004567A4_1:
	esi = eax
	// succ:  l00000000004567A7
l00000000004567A7:
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000456740_exit
l00000000004567B2:
	rax = Mem0[rcx:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000456840
	// succ:  l00000000004567C2 l0000000000456840
l00000000004567C2:
	rax = Mem0[rbx + 0x68<64>:word64]
	ebp = CONVERT(Mem0[rbx + 0x90<64>:byte], byte, word32)
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(esi - 0xFFFFFFFF<32>)
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	dil = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	// succ:  l00000000004567FC
l00000000004567FC:
	rax = Mem0[rbx:word64]
	rcx = rsp + 0x30<64>
	Mem0[rsp + 0x20<64>:word32] = 0x18<32>
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8 = 0xFFFFFFFFFFFFFFFF<64>
	rdx = rbx
	call Mem0[rax + 0x20<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x30<64>:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l0000000000456840
	// succ:  l0000000000456827 l0000000000456840
l0000000000456827:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000456785
	// succ:  l0000000000456839 l0000000000456785
l0000000000456839:
	// succ:  l0000000000456840
l0000000000456840:
	esi = 0xFFFFFFFF<32>
	rsi = CONVERT(esi, word32, uint64)
	// succ:  l0000000000456845
l0000000000456845:
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000456740_exit
l0000000000456850:
	SZO = cond(bpl & bpl)
	C = false
	branch Test(NE,Z) l0000000000456840
	// succ:  l0000000000456855 l0000000000456840
l0000000000456855:
	SCZO = cond(Mem0[rbx + 0x90<64>:byte] - 0<8>)
	rax = Mem0[rbx + 0x10<64>:word64]
	branch Test(EQ,Z) l0000000000456870
	// succ:  l0000000000456862 l0000000000456870
l0000000000456862:
	Mem0[rbx + 0x79<64>:byte] = 1<8>
	Mem0[rax:byte] = sil
	goto l0000000000456845
	// succ:  l0000000000456845
l0000000000456870:
	Mem0[rbx + 0x80<64>:word64] = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	rdx = rbx + 0x7C<64>
	Mem0[rbx + 0x90<64>:byte] = 1<8>
	Mem0[rbx + 0x18<64>:word64] = rdx
	Mem0[rbx + 0x88<64>:word64] = rax
	rax = rbx + 0x7B<64>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	goto l0000000000456862
	// succ:  l0000000000456862
fn0000000000456740_exit:


// fn00000000004568A0
// Return size: 8
define fn00000000004568A0
fn00000000004568A0_entry:
	rsp = fp
	// succ:  l00000000004568A0
l00000000004568A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ebx = Mem0[rcx + 0x58<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(bl & 8<8>)
	C = false
	branch Test(EQ,Z) l0000000000456920
	// succ:  l00000000004568B0 l0000000000456920
l00000000004568B0:
	rbp = rcx + 0x48<64>
	rsi = rcx
	rcx = rbp
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000456920
	// succ:  l00000000004568C3 l0000000000456920
l00000000004568C3:
	rcx = Mem0[rsi + 0x98<64>:word64]
	rdi = Mem0[rsi + 0x18<64>:word64]
	ebx = ebx & 4<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	rdi = rdi - Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rdi)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000456933
	// succ:  l00000000004568DA l0000000000456933
l00000000004568DA:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x28<64>:word64] (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000456927
	// succ:  l00000000004568E4 l0000000000456927
l00000000004568E4:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l0000000000456927
	// succ:  l00000000004568E8 l0000000000456927
l00000000004568E8:
	rcx = rbp
	call fn0000000000455020 (retsize: 8;)
	rcx = Mem0[rsi + 0x98<64>:word64]
	rbx = rax
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x40<64>:word64] (retsize: 8;)
	rcx = CONVERT(eax, word32, int64)
	rax = rbx
	rdx_rax = CONVERT(rax, int64, int128)
	v20 = rdx_rax
	rdx = CONVERT(v20 % rcx, int128, int64)
	rax = CONVERT(v20 / rcx, word64, int64)
	SCZO = cond(rax)
	rdi = rdi + rax
	SCZO = cond(rdi)
	rax = rdi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004568A0_exit
l0000000000456920:
	rdi = 0xFFFFFFFFFFFFFFFF<64>
	// succ:  l0000000000456927
l0000000000456927:
	rax = rdi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004568A0_exit
l0000000000456933:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000045693F_thunk_fn0000000000456940
l000000000045693F_thunk_fn0000000000456940:
	call fn0000000000456940 (retsize: 0;)
	return
	// succ:  fn00000000004568A0_exit
fn00000000004568A0_exit:


// fn0000000000456940
// Return size: 8
define fn0000000000456940
fn0000000000456940_entry:
	rsp = fp
	// succ:  l0000000000456940
l0000000000456940:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	SZO = cond(Mem0[rcx + 0x58<64>:byte] & 8<8>)
	C = false
	branch Test(EQ,Z) l0000000000456B65
	// succ:  l000000000045695A l0000000000456B65
l000000000045695A:
	SCZO = cond(Mem0[rcx + 0x7A<64>:byte] - 0<8>)
	rbx = rcx
	branch Test(NE,Z) l0000000000456BD0
	// succ:  l0000000000456967 l0000000000456BD0
l0000000000456967:
	rax = Mem0[rcx + 0x10<64>:word64]
	// succ:  l000000000045696B
l000000000045696B:
	SCZO = cond(Mem0[rbx + 0x90<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000456CA0
	// succ:  l0000000000456978 l0000000000456CA0
l0000000000456978:
	rdx = Mem0[rbx + 0x18<64>:word64]
	// succ:  l000000000045697C
l000000000045697C:
	SCZO = cond(rdx - rax)
	branch Test(UGT,CZ) l0000000000456BC2
	// succ:  l0000000000456985 l0000000000456BC2
l0000000000456985:
	rax = Mem0[rbx + 0x70<64>:word64]
	rcx = Mem0[rbx + 0x98<64>:word64]
	rbp = rax - 1<64>
	SCZO = cond(rax - 2<64>)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(UGE,C) l00000000004569A1
	// succ:  l000000000045699D_1 l00000000004569A1
l000000000045699D_1:
	rbp = rax
	// succ:  l00000000004569A1
l00000000004569A1:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000456E0E
	// succ:  l00000000004569AA l0000000000456E0E
l00000000004569AA:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000456B10
	// succ:  l00000000004569B8 l0000000000456B10
l00000000004569B8:
	rcx = Mem0[rbx + 0x98<64>:word64]
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x28<64>:word64] (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000456DCC
	// succ:  l00000000004569CD l0000000000456DCC
l00000000004569CD:
	rax = CONVERT(eax, int32, int64)
	rax = rax *s rbp
	SCZO = cond(rax)
	rsi = rax
	// succ:  l00000000004569D6
l00000000004569D6:
	rdx = Mem0[rbx + 0xB0<64>:word64]
	rdi = Mem0[rbx + 0xB8<64>:word64]
	r15 = rax
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rdi = rdi - rdx
	SCZO = cond(rdi)
	r15 = r15 - rdi
	SCZO = cond(r15)
	SCZO = cond(rax - rdi)
	branch Test(GT,SZO) l00000000004569F6
	// succ:  l00000000004569F2_1 l00000000004569F6
l00000000004569F2_1:
	r15 = rcx
	// succ:  l00000000004569F6
l00000000004569F6:
	SCZO = cond(Mem0[rbx + 0x79<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000456A0D
	// succ:  l00000000004569FC l0000000000456A0D
l00000000004569FC:
	rax = Mem0[rbx + 8<64>:word64]
	SCZO = cond(Mem0[rbx + 0x18<64>:word64] - rax)
	branch Test(NE,Z) l0000000000456A0D
	// succ:  l0000000000456A06 l0000000000456A0D
l0000000000456A06:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000456A0D
	// succ:  l0000000000456A09_1 l0000000000456A0D
l0000000000456A09_1:
	r15 = rcx
	// succ:  l0000000000456A0D
l0000000000456A0D:
	SCZO = cond(rsi - Mem0[rbx + 0xA8<64>:word64])
	branch Test(GT,SZO) l0000000000456D61
	// succ:  l0000000000456A1A l0000000000456D61
l0000000000456A1A:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(NE,Z) l0000000000456DA0
	// succ:  l0000000000456A23 l0000000000456DA0
l0000000000456A23:
	rax = Mem0[rbx + 0xA0<64>:word64]
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	// succ:  l0000000000456A2D
l0000000000456A2D:
	rdx = rax + r13
	Mem0[rbx + 0xB0<64>:word64] = rax
	eax = Mem0[rbx + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(r15 & r15)
	C = false
	Mem0[rbx + 0xB8<64>:word64] = rdx
	r12 = rbx + 0x48<64>
	r13 = rbx + 0x60<64>
	Mem0[rbx + 0x64<64>:word32] = eax
	r14 = rsp + 0x48<64>
	branch Test(GT,SZO) l0000000000456ACD
	// succ:  l0000000000456A5B l0000000000456ACD
l0000000000456A5B:
	goto l0000000000456C90
	// succ:  l0000000000456C90
l0000000000456A60:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l0000000000456B80
	// succ:  l0000000000456A6D l0000000000456B80
l0000000000456A6D:
	rax = rax + Mem0[rbx + 0xB8<64>:word64]
	SCZO = cond(rax)
	rdx = rax
	Mem0[rbx + 0xB8<64>:word64] = rax
	// succ:  l0000000000456A7E
l0000000000456A7E:
	r8 = Mem0[rbx + 0xB0<64>:word64]
	r9 = Mem0[rbx + 8<64>:word64]
	SCZO = cond(rdx - r8)
	Mem0[rsp + 0x48<64>:word64] = r9
	branch Test(UGT,CZ) l0000000000456C11
	// succ:  l0000000000456A97 l0000000000456C11
l0000000000456A97:
	SCZO = cond(edi - 3<32>)
	branch Test(EQ,Z) l0000000000456C52
	// succ:  l0000000000456AA0 l0000000000456C52
l0000000000456AA0:
	rsi = Mem0[rsp + 0x48<64>:word64]
	rsi = rsi - r9
	SCZO = cond(rsi)
	SCZO = cond(edi - 2<32>)
	branch Test(EQ,Z) l0000000000456B80
	// succ:  l0000000000456AB1 l0000000000456B80
l0000000000456AB1:
	SZO = cond(rsi & rsi)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(r15b - al)
	branch Test(UGE,C) l0000000000456B80
	// succ:  l0000000000456AC0 l0000000000456B80
l0000000000456AC0:
	rdx = Mem0[rbx + 0xB8<64>:word64]
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	// succ:  l0000000000456ACD
l0000000000456ACD:
	rax = rdx
	rax = rax - Mem0[rbx + 0xA0<64>:word64]
	SCZO = cond(rax)
	rax = rax + r15
	SCZO = cond(rax)
	SCZO = cond(rax - Mem0[rbx + 0xA8<64>:word64])
	branch Test(GT,SZO) l0000000000456E02
	// succ:  l0000000000456AE7 l0000000000456E02
l0000000000456AE7:
	r8 = r15
	rcx = r12
	call fn0000000000454DE0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l0000000000456A60
	// succ:  l0000000000456AFB l0000000000456A60
l0000000000456AFB:
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l0000000000456A6D
	// succ:  l0000000000456A6D
l0000000000456B10:
	rdx = Mem0[rbx + 8<64>:word64]
	rcx = rbx + 0x48<64>
	r8 = rbp
	call fn0000000000454DE0 (retsize: 8;)
	SCZO = cond(rax - 0<64>)
	rsi = rax
	branch Test(NE,Z) l0000000000456D10
	// succ:  l0000000000456B2D l0000000000456D10
l0000000000456B2D:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(Mem0[rbx + 0x58<64>:byte] & 0x10<8>)
	C = false
	branch Test(EQ,Z) l0000000000456D20
	// succ:  l0000000000456B39 l0000000000456D20
l0000000000456B39:
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	// succ:  l0000000000456B65
l0000000000456B65:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000456B6A
l0000000000456B6A:
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000456940_exit
l0000000000456B80:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(LE,SZO) l0000000000456CE0
	// succ:  l0000000000456B89 l0000000000456CE0
l0000000000456B89:
	SZO = cond(Mem0[rbx + 0x58<64>:byte] & 8<8>)
	C = false
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	branch Test(EQ,Z) l0000000000456D00
	// succ:  l0000000000456B9F l0000000000456D00
l0000000000456B9F:
	rsi = rsi + rax
	SCZO = cond(rsi)
	Mem0[rbx + 0x18<64>:word64] = rsi
	// succ:  l0000000000456BA6
l0000000000456BA6:
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0x79<64>:byte] = 1<8>
	// succ:  l0000000000456BC2
l0000000000456BC2:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000456B6A
	// succ:  l0000000000456B6A
l0000000000456BD0:
	rax = Mem0[rcx:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000456B6A
	// succ:  l0000000000456BE0 l0000000000456B6A
l0000000000456BE0:
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	goto l000000000045696B
	// succ:  l000000000045696B
l0000000000456C11:
	rcx = Mem0[rbx + 0x98<64>:word64]
	r10 = r9 + rbp
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x28<64>:word64] = r9
	r9 = rbx + 0xB0<64>
	Mem0[rsp + 0x38<64>:word64] = r14
	Mem0[rsp + 0x30<64>:word64] = r10
	Mem0[rsp + 0x20<64>:word64] = r9
	r9 = rdx
	rdx = r13
	call Mem0[rax + 0x20<64>:word64] (retsize: 8;)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	r9 = Mem0[rbx + 8<64>:word64]
	SCZO = cond(edi - 3<32>)
	branch Test(NE,Z) l0000000000456AA0
	// succ:  l0000000000456C52 l0000000000456AA0
l0000000000456C52:
	rdx = Mem0[rbx + 0xA0<64>:word64]
	rsi = Mem0[rbx + 0xB8<64>:word64]
	rcx = r9
	rsi = rsi - rdx
	SCZO = cond(rsi)
	SCZO = cond(rbp - rsi)
	branch Test(UGT,CZ) l0000000000456C6D
	// succ:  l0000000000456C69_1 l0000000000456C6D
l0000000000456C69_1:
	rsi = rbp
	// succ:  l0000000000456C6D
l0000000000456C6D:
	r8 = rsi
	rax = memcpy(rcx, rdx, r8)
	rax = rsi
	rax = rax + Mem0[rbx + 0xA0<64>:word64]
	SCZO = cond(rax)
	Mem0[rbx + 0xB0<64>:word64] = rax
	goto l0000000000456AB1
	// succ:  l0000000000456AB1
l0000000000456C90:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	goto l0000000000456A7E
	// succ:  l0000000000456A7E
l0000000000456CA0:
	SCZO = cond(Mem0[rbx + 8<64>:word64] - rax)
	rdx = Mem0[rbx + 0x88<64>:word64]
	rcx = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x90<64>:byte] = 0<8>
	Mem0[rbx + 0x18<64>:word64] = rdx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rbx + 8<64>:word64] = rcx
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = rax + Mem0[rbx + 0x80<64>:word64]
	SCZO = cond(rax)
	Mem0[rbx + 0x80<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	goto l000000000045697C
	// succ:  l000000000045697C
l0000000000456CE0:
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l0000000000456D20
	// succ:  l0000000000456CE5 l0000000000456D20
l0000000000456CE5:
	SCZO = cond(edi - 2<32>)
	branch Test(EQ,Z) l0000000000456DC0
	// succ:  l0000000000456CEE l0000000000456DC0
l0000000000456CEE:
	rcx = 0x000000000048D510<p64>
	call fn0000000000470B20 (retsize: 8;)
	// succ:  l0000000000456D00
l0000000000456D00:
	Mem0[rbx + 0x18<64>:word64] = rax
	goto l0000000000456BA6
	// succ:  l0000000000456BA6
l0000000000456D10:
	branch Test(GT,SZO) l0000000000456B89
	// succ:  l0000000000456D16 l0000000000456B89
l0000000000456D16:
	goto l0000000000456CEE
	// succ:  l0000000000456CEE
l0000000000456D20:
	rax = Mem0[rbx + 0x68<64>:word64]
	SCZO = cond(edi - 1<32>)
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	branch Test(NE,Z) l0000000000456B65
	// succ:  l0000000000456D55 l0000000000456B65
l0000000000456D55:
	rcx = 0x000000000048D4A0<p64>
	call fn0000000000470B20 (retsize: 8;)
	// succ:  l0000000000456D61
l0000000000456D61:
	rcx = rsi
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	call fn0000000000475560 (retsize: 8;)
	SZO = cond(rdi & rdi)
	C = false
	r12 = rax
	branch Test(NE,Z) l0000000000456DE8
	// succ:  l0000000000456D74 l0000000000456DE8
l0000000000456D74:
	rcx = Mem0[rbx + 0xA0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000456D85
	// succ:  l0000000000456D80 l0000000000456D85
l0000000000456D80:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000456D85
l0000000000456D85:
	Mem0[rbx + 0xA0<64>:word64] = r12
	Mem0[rbx + 0xA8<64>:word64] = rsi
	rax = r12
	goto l0000000000456A2D
	// succ:  l0000000000456A2D
l0000000000456DA0:
	rcx = Mem0[rbx + 0xA0<64>:word64]
	r8 = rdi
	r13 = rdi
	rax = memmove(rcx, rdx, r8)
	rax = Mem0[rbx + 0xA0<64>:word64]
	goto l0000000000456A2D
	// succ:  l0000000000456A2D
l0000000000456DC0:
	rcx = 0x000000000048D4D8<p64>
	call fn0000000000470B20 (retsize: 8;)
	// succ:  l0000000000456DCC
l0000000000456DCC:
	rcx = Mem0[rbx + 0x98<64>:word64]
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x40<64>:word64] (retsize: 8;)
	rax = CONVERT(eax, int32, int64)
	rsi = rbp - 1<64> + rax
	rax = rbp
	goto l00000000004569D6
	// succ:  l00000000004569D6
l0000000000456DE8:
	rdx = Mem0[rbx + 0xB0<64>:word64]
	r8 = rdi
	rcx = rax
	r13 = rdi
	rax = memcpy(rcx, rdx, r8)
	goto l0000000000456D74
	// succ:  l0000000000456D74
l0000000000456E02:
	rcx = 0x000000000048D460<p64>
	call fn0000000000470B20 (retsize: 8;)
	// succ:  l0000000000456E0E
l0000000000456E0E:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000456E1F_thunk_fn0000000000456E20
l0000000000456E1F_thunk_fn0000000000456E20:
	call fn0000000000456E20 (retsize: 0;)
	return
	// succ:  fn0000000000456940_exit
fn0000000000456940_exit:


// fn0000000000456E20
// Return size: 8
define fn0000000000456E20
fn0000000000456E20_entry:
	rsp = fp
	// succ:  l0000000000456E20
l0000000000456E20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r12 = Mem0[0x0000000000491C30<p64>:word64]
	rsi = rcx + 0x38<64>
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	rdi = rbx + 0x48<64>
	rax = r12 + 0x10<64>
	Mem0[rcx + 0x20<64>:word64] = 0<64>
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	rcx = rsi
	call fn000000000046AE90 (retsize: 8;)
	rax = 0x0000000000496710<p64>
	rdx = rbx + 0x40<64>
	rcx = rdi
	Mem0[rbx + 0x40<64>:word64] = 0<64>
	Mem0[rbx:word64] = rax
	call fn0000000000455090 (retsize: 8;)
	Mem0[rbx + 0x58<64>:word32] = 0<32>
	Mem0[rbx + 0x5C<64>:word32] = 0<32>
	rcx = rsi
	Mem0[rbx + 0x60<64>:word32] = 0<32>
	Mem0[rbx + 0x64<64>:word32] = 0<32>
	Mem0[rbx + 0x68<64>:word64] = 0<64>
	Mem0[rbx + 0x70<64>:word64] = 0x200<64>
	Mem0[rbx + 0x78<64>:byte] = 0<8>
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 0x7B<64>:byte] = 0<8>
	Mem0[rbx + 0x80<64>:word64] = 0<64>
	Mem0[rbx + 0x88<64>:word64] = 0<64>
	Mem0[rbx + 0x90<64>:byte] = 0<8>
	Mem0[rbx + 0x98<64>:word64] = 0<64>
	Mem0[rbx + 0xA0<64>:word64] = 0<64>
	Mem0[rbx + 0xA8<64>:word64] = 0<64>
	Mem0[rbx + 0xB0<64>:word64] = 0<64>
	Mem0[rbx + 0xB8<64>:word64] = 0<64>
	call fn00000000004725E0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000456F41
	// succ:  l0000000000456F36 l0000000000456F41
l0000000000456F36:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000456E20_exit
l0000000000456F41:
	rcx = rsi
	call fn0000000000473080 (retsize: 8;)
	Mem0[rbx + 0x98<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000456E20_exit
fn0000000000456E20_exit:


// fn0000000000456F80
// Return size: 8
define fn0000000000456F80
fn0000000000456F80_entry:
	rsp = fp
	// succ:  l0000000000456F80
l0000000000456F80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r12 = Mem0[0x0000000000491C30<p64>:word64]
	rsi = rcx + 0x38<64>
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	rdi = rbx + 0x48<64>
	rax = r12 + 0x10<64>
	Mem0[rcx + 0x20<64>:word64] = 0<64>
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	rcx = rsi
	call fn000000000046AE90 (retsize: 8;)
	rax = 0x0000000000496710<p64>
	rdx = rbx + 0x40<64>
	rcx = rdi
	Mem0[rbx + 0x40<64>:word64] = 0<64>
	Mem0[rbx:word64] = rax
	call fn0000000000455090 (retsize: 8;)
	Mem0[rbx + 0x58<64>:word32] = 0<32>
	Mem0[rbx + 0x5C<64>:word32] = 0<32>
	rcx = rsi
	Mem0[rbx + 0x60<64>:word32] = 0<32>
	Mem0[rbx + 0x64<64>:word32] = 0<32>
	Mem0[rbx + 0x68<64>:word64] = 0<64>
	Mem0[rbx + 0x70<64>:word64] = 0x200<64>
	Mem0[rbx + 0x78<64>:byte] = 0<8>
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 0x7B<64>:byte] = 0<8>
	Mem0[rbx + 0x80<64>:word64] = 0<64>
	Mem0[rbx + 0x88<64>:word64] = 0<64>
	Mem0[rbx + 0x90<64>:byte] = 0<8>
	Mem0[rbx + 0x98<64>:word64] = 0<64>
	Mem0[rbx + 0xA0<64>:word64] = 0<64>
	Mem0[rbx + 0xA8<64>:word64] = 0<64>
	Mem0[rbx + 0xB0<64>:word64] = 0<64>
	Mem0[rbx + 0xB8<64>:word64] = 0<64>
	call fn00000000004725E0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004570A1
	// succ:  l0000000000457096 l00000000004570A1
l0000000000457096:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000456F80_exit
l00000000004570A1:
	rcx = rsi
	call fn0000000000473080 (retsize: 8;)
	Mem0[rbx + 0x98<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000456F80_exit
fn0000000000456F80_exit:


// fn00000000004570E0
// Return size: 0
define fn00000000004570E0
fn00000000004570E0_entry:
	rsp = fp
	// succ:  l00000000004570E0
l00000000004570E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496710<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000455AB0 (retsize: 8;)
	rcx = rbx + 0x48<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rcx = rbx + 0x38<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045711F_thunk_fn0000000000475550
l000000000045711F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn00000000004570E0_exit
fn00000000004570E0_exit:


// fn0000000000457130
// Return size: 0
define fn0000000000457130
fn0000000000457130_entry:
	rsp = fp
	// succ:  l0000000000457130
l0000000000457130:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496710<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000455AB0 (retsize: 8;)
	rcx = rbx + 0x48<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rcx = rbx + 0x38<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000457167_thunk_fn000000000046AF20
l0000000000457167_thunk_fn000000000046AF20:
	call fn000000000046AF20 (retsize: 0;)
	return
	// succ:  fn0000000000457130_exit
fn0000000000457130_exit:


// fn0000000000457170
// Return size: 0
define fn0000000000457170
fn0000000000457170_entry:
	rsp = fp
	// succ:  l0000000000457170
l0000000000457170:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496710<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000455AB0 (retsize: 8;)
	rcx = rbx + 0x48<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rcx = rbx + 0x38<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004571A7_thunk_fn000000000046AF20
l00000000004571A7_thunk_fn000000000046AF20:
	call fn000000000046AF20 (retsize: 0;)
	return
	// succ:  fn0000000000457170_exit
fn0000000000457170_exit:


// fn00000000004571B0
// Return size: 8
define fn00000000004571B0
fn00000000004571B0_entry:
	rsp = fp
	// succ:  l00000000004571B0
l00000000004571B0:
	eax = Mem0[rcx + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & 0x11<8>)
	C = false
	r8b = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(al & 8<8>)
	C = false
	rax = Mem0[rcx + 0x68<64>:word64]
	Mem0[rcx + 8<64>:word64] = rax
	Mem0[rcx + 0x10<64>:word64] = rax
	branch Test(EQ,Z) l0000000000457220
	// succ:  l00000000004571C9 l0000000000457220
l00000000004571C9:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(LE,SZO) l0000000000457220
	// succ:  l00000000004571CE l0000000000457220
l00000000004571CE:
	r9 = rax + rdx * 2<64>
	Mem0[rcx + 0x18<64>:word64] = r9
	// succ:  l00000000004571D6
l00000000004571D6:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(NE,Z) l0000000000457200
	// succ:  l00000000004571DB l0000000000457200
l00000000004571DB:
	SZO = cond(r8b & r8b)
	C = false
	branch Test(EQ,Z) l0000000000457200
	// succ:  l00000000004571E0 l0000000000457200
l00000000004571E0:
	rdx = Mem0[rcx + 0x70<64>:word64]
	SCZO = cond(rdx - 1<64>)
	branch Test(ULE,CZ) l0000000000457200
	// succ:  l00000000004571EA l0000000000457200
l00000000004571EA:
	Mem0[rcx + 0x28<64>:word64] = rax
	Mem0[rcx + 0x20<64>:word64] = rax
	rax = rax - 2<64> + rdx * 2<64>
	Mem0[rcx + 0x30<64>:word64] = rax
	return
	// succ:  fn00000000004571B0_exit
l0000000000457200:
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 0x20<64>:word64] = 0<64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	return
	// succ:  fn00000000004571B0_exit
l0000000000457220:
	Mem0[rcx + 0x18<64>:word64] = rax
	goto l00000000004571D6
	// succ:  l00000000004571D6
fn00000000004571B0_exit:


// fn0000000000457230
// Return size: 8
define fn0000000000457230
fn0000000000457230_entry:
	rsp = fp
	// succ:  l0000000000457230
l0000000000457230:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[rcx + 0x98<64>:word64]
	rsi = rdx
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000457260
	// succ:  l000000000045724D l0000000000457260
l000000000045724D:
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = rax - Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(rax)
	rax = rax >>u 1<64>
	SCZO = cond(rax)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000457230_exit
l0000000000457260:
	rcx = Mem0[rbx + 0x98<64>:word64]
	rax = Mem0[rbx + 0x10<64>:word64]
	rdx = rsi
	rax = rax - Mem0[rbx + 8<64>:word64]
	SCZO = cond(rax)
	r9 = Mem0[rbx + 0xB0<64>:word64]
	r8 = Mem0[rbx + 0xA0<64>:word64]
	r10 = Mem0[rcx:word64]
	rax = rax >> 1<64>
	SCZO = cond(rax)
	Mem0[rsp + 0x20<64>:word64] = rax
	call Mem0[r10 + 0x38<64>:word64] (retsize: 8;)
	eax = eax + Mem0[rbx + 0xA0<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax - Mem0[rbx + 0xB8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000457230_exit
fn0000000000457230_exit:


// fn00000000004572B0
// Return size: 8
define fn00000000004572B0
fn00000000004572B0_entry:
	rsp = fp
	// succ:  l00000000004572B0
l00000000004572B0:
	SCZO = cond(Mem0[rcx + 0x90<64>:byte] - 0<8>)
	branch Test(NE,Z) l00000000004572EA
	// succ:  l00000000004572B9 l00000000004572EA
l00000000004572B9:
	rax = Mem0[rcx + 0x10<64>:word64]
	Mem0[rcx + 0x90<64>:byte] = 1<8>
	Mem0[rcx + 0x80<64>:word64] = rax
	rax = Mem0[rcx + 0x18<64>:word64]
	Mem0[rcx + 0x88<64>:word64] = rax
	rax = rcx + 0x7C<64>
	Mem0[rcx + 8<64>:word64] = rax
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = rcx + 0x7E<64>
	Mem0[rcx + 0x18<64>:word64] = rax
	// succ:  l00000000004572EA
l00000000004572EA:
	return
	// succ:  fn00000000004572B0_exit
fn00000000004572B0_exit:


// fn00000000004572F0
// Return size: 8
define fn00000000004572F0
fn00000000004572F0_entry:
	rsp = fp
	// succ:  l00000000004572F0
l00000000004572F0:
	SCZO = cond(Mem0[rcx + 0x90<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000457336
	// succ:  l00000000004572F9 l0000000000457336
l00000000004572F9:
	rax = Mem0[rcx + 8<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(Mem0[rcx + 0x10<64>:word64] - rax)
	rax = Mem0[rcx + 0x80<64>:word64]
	r8 = Mem0[rcx + 0x68<64>:word64]
	Mem0[rcx + 0x90<64>:byte] = 0<8>
	dl = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word64] = r8
	rax = rax + rdx * 2<64>
	rdx = Mem0[rcx + 0x88<64>:word64]
	Mem0[rcx + 0x80<64>:word64] = rax
	Mem0[rcx + 0x10<64>:word64] = rax
	Mem0[rcx + 0x18<64>:word64] = rdx
	// succ:  l0000000000457336
l0000000000457336:
	return
	// succ:  fn00000000004572F0_exit
fn00000000004572F0_exit:


// fn0000000000457340
// Return size: 0
define fn0000000000457340
fn0000000000457340_entry:
	rsp = fp
	// succ:  l0000000000457340
l0000000000457340:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xD8<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x28<64>:word64]
	SCZO = cond(Mem0[rcx + 0x20<64>:word64] - rax)
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	r15 = rcx
	branch Test(ULT,C) l0000000000457470
	// succ:  l0000000000457369 l0000000000457470
l0000000000457369:
	SCZO = cond(Mem0[r15 + 0x7A<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000457420
	// succ:  l0000000000457374 l0000000000457420
l0000000000457374:
	rcx = Mem0[r15 + 0x98<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000457488
	// succ:  l0000000000457384 l0000000000457488
l0000000000457384:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(sil - al)
	branch Test(ULE,CZ) l0000000000457420
	// succ:  l0000000000457393 l0000000000457420
l0000000000457393:
	r12 = r15 + 0x60<64>
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	rdi = rsp + 0x50<64>
	rbp = rsp + 0x48<64>
	r14 = r15 + 0x48<64>
	goto l00000000004573C3
	// succ:  l00000000004573C3
l00000000004573B0:
	SZO = cond(r13 & r13)
	C = false
	branch Test(LE,SZO) l00000000004573FC
	// succ:  l00000000004573B5 l00000000004573FC
l00000000004573B5:
	SCZO = cond(ebx - 1<32>)
	branch Test(NE,Z) l00000000004573FC
	// succ:  l00000000004573BA l00000000004573FC
l00000000004573BA:
	SZO = cond(sil & sil)
	C = false
	branch Test(EQ,Z) l0000000000457464
	// succ:  l00000000004573C3 l0000000000457464
l00000000004573C3:
	rcx = Mem0[r15 + 0x98<64>:word64]
	r9 = rsp + 0xD0<64>
	r8 = rdi
	rdx = r12
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x20<64>:word64] = rbp
	call Mem0[rax + 0x18<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 2<32>)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(EQ,Z) l0000000000457464
	// succ:  l00000000004573EA l0000000000457464
l00000000004573EA:
	SCZO = cond(eax - 1<32>)
	branch Test(UGT,CZ) l00000000004573B0
	// succ:  l00000000004573EF l00000000004573B0
l00000000004573EF:
	r9 = Mem0[rsp + 0x48<64>:word64]
	r9 = r9 - rdi
	SCZO = cond(r9)
	SZO = cond(r9 & r9)
	C = false
	branch Test(GT,SZO) l0000000000457440
	// succ:  l00000000004573FC l0000000000457440
l00000000004573FC:
	SZO = cond(sil & sil)
	C = false
	branch Test(EQ,Z) l0000000000457420
	// succ:  l0000000000457401 l0000000000457420
l0000000000457401:
	rax = Mem0[r15:word64]
	edx = 0xFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r15
	call Mem0[rax + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(ax - 0xFFFF<16>)
	sil = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l0000000000457420
l0000000000457420:
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0xD8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000457340_exit
l0000000000457440:
	r8 = r9
	rdx = rdi
	rcx = r14
	Mem0[rsp + 0x38<64>:word64] = r9
	call fn0000000000454E50 (retsize: 8;)
	r9 = Mem0[rsp + 0x38<64>:word64]
	r13 = rax
	SCZO = cond(r9 - rax)
	branch Test(EQ,Z) l00000000004573B0
	// succ:  l0000000000457464 l00000000004573B0
l0000000000457464:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l0000000000457420
	// succ:  l0000000000457420
l0000000000457470:
	rax = Mem0[rcx:word64]
	edx = 0xFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(ax - 0xFFFF<16>)
	sil = CONVERT(Test(NE,Z), bool, int8)
	goto l0000000000457369
	// succ:  l0000000000457369
l0000000000457488:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000045748F_thunk_fn0000000000457490
l000000000045748F_thunk_fn0000000000457490:
	call fn0000000000457490 (retsize: 0;)
	return
	// succ:  fn0000000000457340_exit
fn0000000000457340_exit:


// fn0000000000457490
// Return size: 8
define fn0000000000457490
fn0000000000457490_entry:
	rsp = fp
	// succ:  l0000000000457490
l0000000000457490:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x68<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	rbx = rcx
	rcx = Mem0[rcx + 0x98<64>:word64]
	rdi = rdx
	rsi = r8
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004575EF
	// succ:  l00000000004574C1 l00000000004575EF
l00000000004574C1:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000045753C
	// succ:  l00000000004574CB l000000000045753C
l00000000004574CB:
	rcx = Mem0[rbx + 0x98<64>:word64]
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x40<64>:word64] (retsize: 8;)
	r9 = CONVERT(eax, word32, int64)
	r9 = r9 *s rsi
	SCZO = cond(r9)
	rax = r9 + 0x1E<64>
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rcx = Mem0[rbx + 0x98<64>:word64]
	rsp = rsp - rax
	SCZO = cond(rsp)
	r12 = rbx + 0x60<64>
	r13 = rbp - 0x30<64>
	r14 = rsp + 0x40<64>
	r15 = rbp - 0x28<64>
	r8 = rdi
	rax = Mem0[rcx:word64]
	rdx = r12
	Mem0[rsp + 0x38<64>:word64] = r13
	r9 = r9 + r14
	SCZO = cond(r9)
	Mem0[rsp + 0x28<64>:word64] = r14
	Mem0[rsp + 0x20<64>:word64] = r15
	Mem0[rsp + 0x30<64>:word64] = r9
	r9 = rdi + rsi * 2<64>
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 1<32>)
	branch Test(ULE,CZ) l0000000000457562
	// succ:  l0000000000457533 l0000000000457562
l0000000000457533:
	SCZO = cond(eax - 3<32>)
	branch Test(NE,Z) l00000000004575E3
	// succ:  l000000000045753C l00000000004575E3
l000000000045753C:
	rcx = rbx + 0x48<64>
	r8 = rsi
	rdx = rdi
	call fn0000000000454E50 (retsize: 8;)
	// succ:  l000000000045754B
l000000000045754B:
	SCZO = cond(rax - rsi)
	al = CONVERT(Test(EQ,Z), bool, int8)
	rsp = rbp - 0x18<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000457490_exit
l0000000000457562:
	r10 = Mem0[rbp - 0x30<64>:word64]
	rdi = rbx + 0x48<64>
	rdx = r14
	Mem0[rbp - 0x3C<64>:word32] = eax
	rcx = rdi
	rsi = r10
	Mem0[rbp - 0x38<64>:word64] = r10
	rsi = rsi - r14
	SCZO = cond(rsi)
	r8 = rsi
	call fn0000000000454E50 (retsize: 8;)
	SCZO = cond(rsi - rax)
	branch Test(NE,Z) l000000000045754B
	// succ:  l000000000045758A l000000000045754B
l000000000045758A:
	r9d = Mem0[rbp - 0x3C<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	r10 = Mem0[rbp - 0x38<64>:word64]
	r9d = r9d & 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	branch Test(EQ,Z) l000000000045754B
	// succ:  l0000000000457598 l000000000045754B
l0000000000457598:
	rcx = Mem0[rbx + 0x98<64>:word64]
	r9 = Mem0[rbx + 0x28<64>:word64]
	rdx = r12
	r8 = Mem0[rbp - 0x28<64>:word64]
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x38<64>:word64] = r13
	Mem0[rsp + 0x30<64>:word64] = r10
	Mem0[rsp + 0x28<64>:word64] = r14
	Mem0[rsp + 0x20<64>:word64] = r15
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l00000000004575E3
	// succ:  l00000000004575C9 l00000000004575E3
l00000000004575C9:
	rsi = Mem0[rbp - 0x30<64>:word64]
	rdx = r14
	rcx = rdi
	rsi = rsi - r14
	SCZO = cond(rsi)
	r8 = rsi
	call fn0000000000454E50 (retsize: 8;)
	goto l000000000045754B
	// succ:  l000000000045754B
l00000000004575E3:
	rcx = 0x000000000048D570<p64>
	call fn0000000000470B20 (retsize: 8;)
	// succ:  l00000000004575EF
l00000000004575EF:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l00000000004575FF_thunk_fn0000000000457600
l00000000004575FF_thunk_fn0000000000457600:
	call fn0000000000457600 (retsize: 0;)
	return
	// succ:  fn0000000000457490_exit
fn0000000000457490_exit:


// fn0000000000457600
// Return size: 8
define fn0000000000457600
fn0000000000457600_entry:
	rsp = fp
	// succ:  l0000000000457600
l0000000000457600:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0x78<64>:byte] - 0<8>)
	rbx = rcx
	branch Test(EQ,Z) l0000000000457628
	// succ:  l000000000045760E l0000000000457628
l000000000045760E:
	rcx = Mem0[rcx + 0x68<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045761C
	// succ:  l0000000000457617 l000000000045761C
l0000000000457617:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l000000000045761C
l000000000045761C:
	Mem0[rbx + 0x68<64>:word64] = 0<64>
	Mem0[rbx + 0x78<64>:byte] = 0<8>
	// succ:  l0000000000457628
l0000000000457628:
	rcx = Mem0[rbx + 0xA0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000457639
	// succ:  l0000000000457634 l0000000000457639
l0000000000457634:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000457639
l0000000000457639:
	Mem0[rbx + 0xA0<64>:word64] = 0<64>
	Mem0[rbx + 0xA8<64>:word64] = 0<64>
	Mem0[rbx + 0xB0<64>:word64] = 0<64>
	Mem0[rbx + 0xB8<64>:word64] = 0<64>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000457600_exit
fn0000000000457600_exit:


// fn0000000000457670
// Return size: 8
define fn0000000000457670
fn0000000000457670_entry:
	rsp = fp
	// succ:  l0000000000457670
l0000000000457670:
	SCZO = cond(Mem0[rcx + 0x78<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000045767D
	// succ:  l0000000000457676 l000000000045767D
l0000000000457676:
	SCZO = cond(Mem0[rcx + 0x68<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000457680
	// succ:  l000000000045767D l0000000000457680
l000000000045767D:
	return
	// succ:  fn0000000000457670_exit
l0000000000457680:
	// succ:  l0000000000457680_thunk_fn0000000000457690
l0000000000457680_thunk_fn0000000000457690:
	call fn0000000000457690 (retsize: 0;)
	return
	// succ:  fn0000000000457670_exit
fn0000000000457670_exit:


// fn0000000000457690
// Return size: 0
define fn0000000000457690
fn0000000000457690_entry:
	rsp = fp
	// succ:  l0000000000457690
l0000000000457690:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x70<64>:word64]
	rdx = 0x3F80000000000000<64>
	rbx = rcx
	SCZO = cond(rax - rdx)
	branch Test(UGT,CZ) l00000000004576C2
	// succ:  l00000000004576AB l00000000004576C2
l00000000004576AB:
	rcx = rax + rax
	call fn0000000000475560 (retsize: 8;)
	Mem0[rbx + 0x78<64>:byte] = 1<8>
	Mem0[rbx + 0x68<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000457690_exit
l00000000004576C2:
	call fn0000000000476160 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	// succ:  l00000000004576CF_thunk_fn00000000004576D0
l00000000004576CF_thunk_fn00000000004576D0:
	call fn00000000004576D0 (retsize: 0;)
	return
	// succ:  fn0000000000457690_exit
fn0000000000457690_exit:


// fn00000000004576D0
// Return size: 8
define fn00000000004576D0
fn00000000004576D0_entry:
	rsp = fp
	// succ:  l00000000004576D0
l00000000004576D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rsi = rcx + 0x48<64>
	rbx = rcx
	rbp = rdx
	edi = r8d
	rdi = CONVERT(edi, word32, uint64)
	rcx = rsi
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004577B0
	// succ:  l00000000004576F5 l00000000004577B0
l00000000004576F5:
	r9d = 0x1B4<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8d = edi
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rcx = rsi
	call fn0000000000454D00 (retsize: 8;)
	rcx = rsi
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004577B0
	// succ:  l0000000000457719 l00000000004577B0
l0000000000457719:
	SCZO = cond(Mem0[rbx + 0x78<64>:byte] - 0<8>)
	rax = Mem0[rbx + 0x68<64>:word64]
	branch Test(EQ,Z) l0000000000457770
	// succ:  l0000000000457723 l0000000000457770
l0000000000457723:
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	SZO = cond(dil & 2<8>)
	C = false
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = Mem0[rbx + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 0x58<64>:word32] = edi
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0x60<64>:word32] = eax
	Mem0[rbx + 0x64<64>:word32] = eax
	branch Test(NE,Z) l0000000000457783
	// succ:  l0000000000457761 l0000000000457783
l0000000000457761:
	rax = rbx
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004576D0_exit
l0000000000457770:
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l0000000000457723
	// succ:  l0000000000457775 l0000000000457723
l0000000000457775:
	rcx = rbx
	call fn0000000000457690 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[rbx + 0x68<64>:word64]
	goto l0000000000457723
	// succ:  l0000000000457723
l0000000000457783:
	rax = Mem0[rbx:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rsp + 0x30<64>
	Mem0[rsp + 0x20<64>:word32] = edi
	r9d = 2<32>
	r9 = CONVERT(r9d, word32, uint64)
	rdx = rbx
	call Mem0[rax + 0x20<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x30<64>:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l0000000000457761
	// succ:  l00000000004577A6 l0000000000457761
l00000000004577A6:
	rcx = rbx
	call fn0000000000457800 (retsize: 8;)
	// succ:  l00000000004577B0
l00000000004577B0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004576D0_exit
fn00000000004576D0_exit:


// fn00000000004577C0
// Return size: 8
define fn00000000004577C0
fn00000000004577C0_entry:
	rsp = fp
	// succ:  l00000000004577C0
l00000000004577C0:
	rdx = Mem0[rdx:word64]
	// succ:  l00000000004577C3_thunk_fn00000000004576D0
l00000000004577C3_thunk_fn00000000004576D0:
	call fn00000000004576D0 (retsize: 0;)
	return
	// succ:  fn00000000004577C0_exit
fn00000000004577C0_exit:


// fn00000000004577D0
// Return size: 8
define fn00000000004577D0
fn00000000004577D0_entry:
	rsp = fp
	// succ:  l00000000004577D0
l00000000004577D0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rdx = Mem0[rcx + 0x28<64>:word64]
	SCZO = cond(Mem0[rcx + 0x20<64>:word64] - rdx)
	branch Test(UGE,C) l00000000004577F7
	// succ:  l00000000004577E0 l00000000004577F7
l00000000004577E0:
	rax = Mem0[rcx:word64]
	edx = 0xFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(ax - 0xFFFF<16>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = -eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	C = eax == 0<32>
	// succ:  l00000000004577F7
l00000000004577F7:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004577D0_exit
fn00000000004577D0_exit:


// fn0000000000457800
// Return size: 8
define fn0000000000457800
fn0000000000457800_entry:
	rsp = fp
	// succ:  l0000000000457800
l0000000000457800:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rdi = rcx + 0x48<64>
	rbx = rcx
	rcx = rdi
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004578A3
	// succ:  l000000000045781E l00000000004578A3
l000000000045781E:
	rcx = rbx
	Mem0[rsp + 0x20<64>:word64] = rbx
	call fn0000000000457340 (retsize: 8;)
	rsp = rsp + 8<64>
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	rcx = Mem0[rsp + 0x20<64>:word64]
	Mem0[rcx + 0x58<64>:word32] = 0<32>
	Mem0[rcx + 0x90<64>:byte] = 0<8>
	call fn0000000000457600 (retsize: 8;)
	rdx = Mem0[rsp + 0x20<64>:word64]
	rcx = rdi
	rax = Mem0[rdx + 0x68<64>:word64]
	Mem0[rdx + 0x79<64>:byte] = 0<8>
	Mem0[rdx + 0x7A<64>:byte] = 0<8>
	Mem0[rdx + 0x28<64>:word64] = 0<64>
	Mem0[rdx + 0x20<64>:word64] = 0<64>
	Mem0[rdx + 0x30<64>:word64] = 0<64>
	Mem0[rdx + 8<64>:word64] = rax
	Mem0[rdx + 0x10<64>:word64] = rax
	Mem0[rdx + 0x18<64>:word64] = rax
	eax = Mem0[rdx + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdx + 0x60<64>:word32] = eax
	Mem0[rdx + 0x64<64>:word32] = eax
	call fn0000000000454D70 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004578A3
	// succ:  l0000000000457893 l00000000004578A3
l0000000000457893:
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l00000000004578A3
	// succ:  l0000000000457898 l00000000004578A3
l0000000000457898:
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000457800_exit
l00000000004578A3:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000457800_exit
fn0000000000457800_exit:


// fn0000000000457900
// Return size: 8
define fn0000000000457900
fn0000000000457900_entry:
	rsp = fp
	// succ:  l0000000000457900
l0000000000457900:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rdx
	rsi = rdx
	call fn0000000000472640 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000457A33
	// succ:  l000000000045791D l0000000000457A33
l000000000045791D:
	rcx = rsi
	call fn00000000004730E0 (retsize: 8;)
	rsi = rax
	// succ:  l0000000000457928
l0000000000457928:
	rcx = rbx + 0x48<64>
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000457944
	// succ:  l0000000000457935 l0000000000457944
l0000000000457935:
	Mem0[rbx + 0x98<64>:word64] = rsi
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000457900_exit
l0000000000457944:
	SCZO = cond(Mem0[rbx + 0x79<64>:byte] - 0<8>)
	branch Test(EQ,Z) l00000000004579E0
	// succ:  l000000000045794E l00000000004579E0
l000000000045794E:
	rcx = Mem0[rbx + 0x98<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000457AF4
	// succ:  l000000000045795E l0000000000457AF4
l000000000045795E:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x28<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l00000000004579CD
	// succ:  l0000000000457969 l00000000004579CD
l0000000000457969:
	SCZO = cond(Mem0[rbx + 0x79<64>:byte] - 0<8>)
	branch Test(EQ,Z) l00000000004579F0
	// succ:  l0000000000457973 l00000000004579F0
l0000000000457973:
	rcx = Mem0[rbx + 0x98<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000457AF4
	// succ:  l0000000000457983 l0000000000457AF4
l0000000000457983:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000457A40
	// succ:  l0000000000457991 l0000000000457A40
l0000000000457991:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000457935
	// succ:  l0000000000457996 l0000000000457935
l0000000000457996:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000457935
	// succ:  l00000000004579A3 l0000000000457935
l00000000004579A3:
	edx = Mem0[rbx + 0x58<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbx:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rsp + 0x30<64>
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = edx
	rdx = rbx
	call Mem0[rax + 0x20<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x30<64>:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l0000000000457935
	// succ:  l00000000004579CD l0000000000457935
l00000000004579CD:
	Mem0[rbx + 0x98<64>:word64] = 0<64>
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000457900_exit
l00000000004579E0:
	SCZO = cond(Mem0[rbx + 0x7A<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000457935
	// succ:  l00000000004579EA l0000000000457935
l00000000004579EA:
	goto l000000000045794E
	// succ:  l000000000045794E
l00000000004579F0:
	SCZO = cond(Mem0[rbx + 0x7A<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000457935
	// succ:  l00000000004579FA l0000000000457935
l00000000004579FA:
	rcx = rbx
	call fn0000000000457340 (retsize: 8;)
	rsp = rsp + 8<64>
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004579CD
	// succ:  l0000000000457A06 l00000000004579CD
l0000000000457A06:
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	goto l0000000000457935
	// succ:  l0000000000457935
l0000000000457A33:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l0000000000457928
	// succ:  l0000000000457928
l0000000000457A40:
	rcx = Mem0[rbx + 0x98<64>:word64]
	rax = Mem0[rbx + 0x10<64>:word64]
	rdx = rbx + 0x64<64>
	rax = rax - Mem0[rbx + 8<64>:word64]
	SCZO = cond(rax)
	rdi = Mem0[rbx + 0xA0<64>:word64]
	r9 = Mem0[rbx + 0xB0<64>:word64]
	r10 = Mem0[rcx:word64]
	r8 = rdi
	rax = rax >> 1<64>
	SCZO = cond(rax)
	Mem0[rsp + 0x20<64>:word64] = rax
	call Mem0[r10 + 0x38<64>:word64] (retsize: 8;)
	rax = CONVERT(eax, int32, int64)
	rdx = rdi + rax
	rax = Mem0[rbx + 0xB8<64>:word64]
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	Mem0[rbx + 0xB0<64>:word64] = rdx
	rax = rax - rdx
	SCZO = cond(rax)
	branch Test(NE,Z) l0000000000457AE0
	// succ:  l0000000000457A8E l0000000000457AE0
l0000000000457A8E:
	rax = Mem0[rbx + 0xA0<64>:word64]
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	rdi = rdi + rax
	SCZO = cond(rdi)
	Mem0[rbx + 0xB0<64>:word64] = rax
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0xB8<64>:word64] = rdi
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = Mem0[rbx + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 0x60<64>:word32] = eax
	Mem0[rbx + 0x64<64>:word32] = eax
	goto l0000000000457935
	// succ:  l0000000000457935
l0000000000457AE0:
	rcx = Mem0[rbx + 0xA0<64>:word64]
	r8 = rax
	rdi = rax
	rax = memmove(rcx, rdx, r8)
	goto l0000000000457A8E
	// succ:  l0000000000457A8E
l0000000000457AF4:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000457AFF_thunk_fn0000000000457B00
l0000000000457AFF_thunk_fn0000000000457B00:
	call fn0000000000457B00 (retsize: 0;)
	return
	// succ:  fn0000000000457900_exit
fn0000000000457900_exit:


// fn0000000000457B00
// Return size: 8
define fn0000000000457B00
fn0000000000457B00_entry:
	rsp = fp
	// succ:  l0000000000457B00
l0000000000457B00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rcx + 0x48<64>
	rsi = rdx
	rdi = r8
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000457B2F
	// succ:  l0000000000457B1D l0000000000457B2F
l0000000000457B1D:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(NE,Z) l0000000000457B40
	// succ:  l0000000000457B22 l0000000000457B40
l0000000000457B22:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(NE,Z) l0000000000457B40
	// succ:  l0000000000457B27 l0000000000457B40
l0000000000457B27:
	Mem0[rbx + 0x70<64>:word64] = 1<64>
	// succ:  l0000000000457B2F
l0000000000457B2F:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000457B00_exit
l0000000000457B40:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000457B2F
	// succ:  l0000000000457B45 l0000000000457B2F
l0000000000457B45:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(LE,SZO) l0000000000457B2F
	// succ:  l0000000000457B4A l0000000000457B2F
l0000000000457B4A:
	rax = rbx
	Mem0[rbx + 0x68<64>:word64] = rsi
	Mem0[rbx + 0x70<64>:word64] = rdi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000457B00_exit
fn0000000000457B00_exit:


// fn0000000000457B60
// Return size: 8
define fn0000000000457B60
fn0000000000457B60_entry:
	rsp = fp
	// succ:  l0000000000457B60
l0000000000457B60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0x90<64>:byte] - 0<8>)
	rbp = rcx
	rsi = rdx
	rbx = r8
	branch Test(EQ,Z) l0000000000457CB2
	// succ:  l0000000000457B82 l0000000000457CB2
l0000000000457B82:
	SZO = cond(r8 & r8)
	C = false
	rax = Mem0[rcx + 0x10<64>:word64]
	rdx = Mem0[rcx + 8<64>:word64]
	branch Test(LE,SZO) l0000000000457B98
	// succ:  l0000000000457B8F l0000000000457B98
l0000000000457B8F:
	SCZO = cond(rax - rdx)
	branch Test(EQ,Z) l0000000000457D21
	// succ:  l0000000000457B98 l0000000000457D21
l0000000000457B98:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	// succ:  l0000000000457B9A
l0000000000457B9A:
	SCZO = cond(rdx - rax)
	rax = Mem0[rbp + 0x80<64>:word64]
	rcx = Mem0[rbp + 0x68<64>:word64]
	dl = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rbp + 0x90<64>:byte] = 0<8>
	edx = CONVERT(dl, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = rax + rdx * 2<64>
	rdx = Mem0[rbp + 0x88<64>:word64]
	Mem0[rbp + 8<64>:word64] = rcx
	Mem0[rbp + 0x80<64>:word64] = rax
	Mem0[rbp + 0x10<64>:word64] = rax
	Mem0[rbp + 0x18<64>:word64] = rdx
	// succ:  l0000000000457BD3
l0000000000457BD3:
	rdx = Mem0[rbp + 0x70<64>:word64]
	r12d = Mem0[rbp + 0x58<64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	rax = rdx - 1<64>
	SCZO = cond(rdx - 2<64>)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(UGE,C) l0000000000457BEC
	// succ:  l0000000000457BE8_1 l0000000000457BEC
l0000000000457BE8_1:
	rax = rdx
	// succ:  l0000000000457BEC
l0000000000457BEC:
	SCZO = cond(rbx - rax)
	branch Test(LE,SZO) l0000000000457D00
	// succ:  l0000000000457BF5 l0000000000457D00
l0000000000457BF5:
	rcx = Mem0[rbp + 0x98<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000457DDB
	// succ:  l0000000000457C05 l0000000000457DDB
l0000000000457C05:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000457D00
	// succ:  l0000000000457C13 l0000000000457D00
l0000000000457C13:
	r12d = r12d & 8<32>
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	branch Test(EQ,Z) l0000000000457D00
	// succ:  l0000000000457C1D l0000000000457D00
l0000000000457C1D:
	rdx = Mem0[rbp + 0x10<64>:word64]
	r12 = Mem0[rbp + 0x18<64>:word64]
	r12 = r12 - rdx
	SCZO = cond(r12)
	r13 = r12
	r13 = r13 >> 1<64>
	SCZO = cond(r13)
	branch Test(NE,Z) l0000000000457D3E
	// succ:  l0000000000457C34 l0000000000457D3E
l0000000000457C34:
	r12 = rbp + 0x48<64>
	goto l0000000000457C50
	// succ:  l0000000000457C50
l0000000000457C40:
	rdi = rdi + rax
	SCZO = cond(rdi)
	rbx = rbx - rax
	SCZO = cond(rbx)
	branch Test(EQ,Z) l0000000000457D60
	// succ:  l0000000000457C4C l0000000000457D60
l0000000000457C4C:
	rsi = rsi + rax * 2<64>
	// succ:  l0000000000457C50
l0000000000457C50:
	r8 = rbx
	rdx = rsi
	rcx = r12
	call fn0000000000454DE0 (retsize: 8;)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l0000000000457DCF
	// succ:  l0000000000457C68 l0000000000457DCF
l0000000000457C68:
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l0000000000457C40
	// succ:  l0000000000457C6D l0000000000457C40
l0000000000457C6D:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000457D60
	// succ:  l0000000000457C76 l0000000000457D60
l0000000000457C76:
	rax = Mem0[rbp + 0x68<64>:word64]
	Mem0[rbp + 0x28<64>:word64] = 0<64>
	Mem0[rbp + 0x20<64>:word64] = 0<64>
	Mem0[rbp + 0x30<64>:word64] = 0<64>
	Mem0[rbp + 0x79<64>:byte] = 0<8>
	Mem0[rbp + 8<64>:word64] = rax
	Mem0[rbp + 0x10<64>:word64] = rax
	Mem0[rbp + 0x18<64>:word64] = rax
	rax = rdi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000457B60_exit
l0000000000457CB2:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SCZO = cond(Mem0[rcx + 0x7A<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000457BD3
	// succ:  l0000000000457CBE l0000000000457BD3
l0000000000457CBE:
	rax = Mem0[rcx:word64]
	edx = 0xFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000457D11
	// succ:  l0000000000457CCF l0000000000457D11
l0000000000457CCF:
	rax = Mem0[rbp + 0x68<64>:word64]
	Mem0[rbp + 0x28<64>:word64] = 0<64>
	Mem0[rbp + 0x20<64>:word64] = 0<64>
	Mem0[rbp + 0x30<64>:word64] = 0<64>
	Mem0[rbp + 0x7A<64>:byte] = 0<8>
	Mem0[rbp + 8<64>:word64] = rax
	Mem0[rbp + 0x10<64>:word64] = rax
	Mem0[rbp + 0x18<64>:word64] = rax
	goto l0000000000457BD3
	// succ:  l0000000000457BD3
l0000000000457D00:
	r8 = rbx
	rdx = rsi
	rcx = rbp
	call fn0000000000462F80 (retsize: 8;)
	rdi = rdi + rax
	SCZO = cond(rdi)
	// succ:  l0000000000457D11
l0000000000457D11:
	rax = rdi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000457B60_exit
l0000000000457D21:
	ecx = CONVERT(Mem0[rax:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rbx = rbx - 1<64>
	SCZO = cond(rbx)
	rax = rax + 2<64>
	SCZO = cond(rax)
	rsi = rsi + 2<64>
	SCZO = cond(rsi)
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	Mem0[rsi - 2<64>:word16] = cx
	goto l0000000000457B9A
	// succ:  l0000000000457B9A
l0000000000457D3E:
	rcx = rsi
	r8 = r12
	rsi = rsi + r12
	SCZO = cond(rsi)
	rax = memcpy(rcx, rdx, r8)
	rdi = rdi + r13
	SCZO = cond(rdi)
	v23 = Mem0[rbp + 0x10<64>:word64] + r12
	Mem0[rbp + 0x10<64>:word64] = v23
	SCZO = cond(v23)
	rbx = rbx - r13
	SCZO = cond(rbx)
	goto l0000000000457C34
	// succ:  l0000000000457C34
l0000000000457D60:
	SZO = cond(Mem0[rbp + 0x58<64>:byte] & 0x11<8>)
	C = false
	branch Test(NE,Z) l0000000000457DA2
	// succ:  l0000000000457D66 l0000000000457DA2
l0000000000457D66:
	rax = Mem0[rbp + 0x68<64>:word64]
	Mem0[rbp + 8<64>:word64] = rax
	Mem0[rbp + 0x10<64>:word64] = rax
	Mem0[rbp + 0x18<64>:word64] = rax
	// succ:  l0000000000457D76
l0000000000457D76:
	Mem0[rbp + 0x28<64>:word64] = 0<64>
	Mem0[rbp + 0x20<64>:word64] = 0<64>
	Mem0[rbp + 0x30<64>:word64] = 0<64>
	// succ:  l0000000000457D8E
l0000000000457D8E:
	rax = rdi
	Mem0[rbp + 0x79<64>:byte] = 1<8>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000457B60_exit
l0000000000457DA2:
	rdx = Mem0[rbp + 0x70<64>:word64]
	rax = Mem0[rbp + 0x68<64>:word64]
	SCZO = cond(rdx - 1<64>)
	Mem0[rbp + 8<64>:word64] = rax
	Mem0[rbp + 0x10<64>:word64] = rax
	Mem0[rbp + 0x18<64>:word64] = rax
	branch Test(ULE,CZ) l0000000000457D76
	// succ:  l0000000000457DBC l0000000000457D76
l0000000000457DBC:
	Mem0[rbp + 0x28<64>:word64] = rax
	Mem0[rbp + 0x20<64>:word64] = rax
	rax = rax - 2<64> + rdx * 2<64>
	Mem0[rbp + 0x30<64>:word64] = rax
	goto l0000000000457D8E
	// succ:  l0000000000457D8E
l0000000000457DCF:
	rcx = 0x000000000048D540<p64>
	call fn0000000000470B20 (retsize: 8;)
	// succ:  l0000000000457DDB
l0000000000457DDB:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000457DEF_thunk_fn0000000000457DF0
l0000000000457DEF_thunk_fn0000000000457DF0:
	call fn0000000000457DF0 (retsize: 0;)
	return
	// succ:  fn0000000000457B60_exit
fn0000000000457B60_exit:


// fn0000000000457DF0
// Return size: 8
define fn0000000000457DF0
fn0000000000457DF0_entry:
	rsp = fp
	// succ:  l0000000000457DF0
l0000000000457DF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	SZO = cond(Mem0[rcx + 0x58<64>:byte] & 0x11<8>)
	C = false
	rbx = rcx
	rcx = Mem0[rcx + 0x98<64>:word64]
	rbp = rdx
	rsi = r8
	dil = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000457F31
	// succ:  l0000000000457E19 l0000000000457F31
l0000000000457E19:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000457EB0
	// succ:  l0000000000457E27 l0000000000457EB0
l0000000000457E27:
	SZO = cond(dil & dil)
	C = false
	branch Test(EQ,Z) l0000000000457EB0
	// succ:  l0000000000457E30 l0000000000457EB0
l0000000000457E30:
	SCZO = cond(Mem0[rbx + 0x79<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000457EB0
	// succ:  l0000000000457E36 l0000000000457EB0
l0000000000457E36:
	rdi = Mem0[rbx + 0x28<64>:word64]
	rax = Mem0[rbx + 0x30<64>:word64]
	rax = rax - rdi
	SCZO = cond(rax)
	rax = rax >> 1<64>
	SCZO = cond(rax)
	SCZO = cond(Mem0[rbx + 0x7A<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000457E5A
	// succ:  l0000000000457E4A l0000000000457E5A
l0000000000457E4A:
	rdx = Mem0[rbx + 0x70<64>:word64]
	rcx = rdx - 1<64>
	SCZO = cond(rdx - 2<64>)
	branch Test(ULT,C) l0000000000457E5A
	// succ:  l0000000000457E56_1 l0000000000457E5A
l0000000000457E56_1:
	rax = rcx
	// succ:  l0000000000457E5A
l0000000000457E5A:
	SCZO = cond(rax - 0x3FF<64>)
	edx = 0x400<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(LE,SZO) l0000000000457E69
	// succ:  l0000000000457E65_1 l0000000000457E69
l0000000000457E65_1:
	rax = rdx
	// succ:  l0000000000457E69
l0000000000457E69:
	SCZO = cond(rax - rsi)
	branch Test(GT,SZO) l0000000000457EB0
	// succ:  l0000000000457E6E l0000000000457EB0
l0000000000457E6E:
	rdx = Mem0[rbx + 0x20<64>:word64]
	rcx = rbx + 0x48<64>
	Mem0[rsp + 0x20<64>:word64] = rsi
	r9 = rbp
	rdi = rdi - rdx
	SCZO = cond(rdi)
	rdi = rdi >> 1<64>
	SCZO = cond(rdi)
	r8 = rdi
	rsi = rsi + rdi
	SCZO = cond(rsi)
	call fn0000000000454FA0 (retsize: 8;)
	SCZO = cond(rax - rsi)
	branch Test(EQ,Z) l0000000000457ED0
	// succ:  l0000000000457E94 l0000000000457ED0
l0000000000457E94:
	rdx = rax
	rdx = rdx - rdi
	SCZO = cond(rdx)
	SCZO = cond(rdi - rax)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(GE,SO) l0000000000457EA6
	// succ:  l0000000000457EA2_1 l0000000000457EA6
l0000000000457EA2_1:
	rax = rdx
	// succ:  l0000000000457EA6
l0000000000457EA6:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000457DF0_exit
l0000000000457EB0:
	r8 = rsi
	rdx = rbp
	rcx = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000457EC1_thunk_fn0000000000463060
l0000000000457EC1_thunk_fn0000000000463060:
	call fn0000000000463060 (retsize: 0;)
	return
	// succ:  fn0000000000457DF0_exit
l0000000000457ED0:
	SZO = cond(Mem0[rbx + 0x58<64>:byte] & 0x11<8>)
	C = false
	branch Test(NE,Z) l0000000000457F04
	// succ:  l0000000000457ED6 l0000000000457F04
l0000000000457ED6:
	rdx = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 8<64>:word64] = rdx
	Mem0[rbx + 0x10<64>:word64] = rdx
	Mem0[rbx + 0x18<64>:word64] = rdx
	// succ:  l0000000000457EE6
l0000000000457EE6:
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	// succ:  l0000000000457EFE
l0000000000457EFE:
	Mem0[rbx + 0x7A<64>:byte] = 1<8>
	goto l0000000000457E94
	// succ:  l0000000000457E94
l0000000000457F04:
	rcx = Mem0[rbx + 0x70<64>:word64]
	rdx = Mem0[rbx + 0x68<64>:word64]
	SCZO = cond(rcx - 1<64>)
	Mem0[rbx + 8<64>:word64] = rdx
	Mem0[rbx + 0x10<64>:word64] = rdx
	Mem0[rbx + 0x18<64>:word64] = rdx
	branch Test(ULE,CZ) l0000000000457EE6
	// succ:  l0000000000457F1E l0000000000457EE6
l0000000000457F1E:
	Mem0[rbx + 0x28<64>:word64] = rdx
	Mem0[rbx + 0x20<64>:word64] = rdx
	rdx = rdx - 2<64> + rcx * 2<64>
	Mem0[rbx + 0x30<64>:word64] = rdx
	goto l0000000000457EFE
	// succ:  l0000000000457EFE
l0000000000457F31:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000457F3F_thunk_fn0000000000457F40
l0000000000457F3F_thunk_fn0000000000457F40:
	call fn0000000000457F40 (retsize: 0;)
	return
	// succ:  fn0000000000457DF0_exit
fn0000000000457DF0_exit:


// fn0000000000457F40
// Return size: 8
define fn0000000000457F40
fn0000000000457F40_entry:
	rsp = fp
	// succ:  l0000000000457F40
l0000000000457F40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rcx + 8<64>:word32] = 0<32>
	rsi = rcx
	rcx = rdx
	rbx = rdx
	rdi = r8
	ebp = r9d
	rbp = CONVERT(ebp, word32, uint64)
	call fn0000000000457340 (retsize: 8;)
	rsp = rsp + 8<64>
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000457F80
	// succ:  l0000000000457F6E l0000000000457F80
l0000000000457F6E:
	rax = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000457F40_exit
l0000000000457F80:
	rcx = rbx + 0x48<64>
	r8d = ebp
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rdi
	call fn0000000000454E80 (retsize: 8;)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l0000000000457F6E
	// succ:  l0000000000457F95 l0000000000457F6E
l0000000000457F95:
	rdx = Mem0[rbx + 0xA0<64>:word64]
	edi = Mem0[rsp + 0x70<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	Mem0[rsi:word64] = rax
	rax = rsi
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0xB8<64>:word64] = rdx
	Mem0[rbx + 0xB0<64>:word64] = rdx
	rdx = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0x60<64>:word32] = edi
	Mem0[rsi + 8<64>:word32] = edi
	Mem0[rbx + 8<64>:word64] = rdx
	Mem0[rbx + 0x10<64>:word64] = rdx
	Mem0[rbx + 0x18<64>:word64] = rdx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000457F40_exit
fn0000000000457F40_exit:


// fn0000000000458000
// Return size: 8
define fn0000000000458000
fn0000000000458000_entry:
	rsp = fp
	// succ:  l0000000000458000
l0000000000458000:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = Mem0[rdx + 0x98<64>:word64]
	rbx = rdx
	rbp = r8
	r12d = r9d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000458040
	// succ:  l0000000000458026 l0000000000458040
l0000000000458026:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x28<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0<32>)
	r13d = eax
	r13 = CONVERT(r13d, word32, uint64)
	branch Test(LT,SO) l0000000000458040
	// succ:  l0000000000458034 l0000000000458040
l0000000000458034:
	dil = CONVERT(Test(LE,SZO), bool, int8)
	goto l0000000000458048
	// succ:  l0000000000458048
l0000000000458040:
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	// succ:  l0000000000458048
l0000000000458048:
	SZO = cond(rbp & rbp)
	C = false
	r14 = rbx + 0x48<64>
	Mem0[rsi:word64] = 0xFFFFFFFFFFFFFFFF<64>
	dl = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rsi + 8<64>:word32] = 0<32>
	edi = edi & edx
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	rcx = r14
	call fn000000000042AA50 (retsize: 8;)
	SCZO = cond(al - dil)
	branch Test(ULE,CZ) l00000000004580CE
	// succ:  l000000000045806F l00000000004580CE
l000000000045806F:
	SCZO = cond(r12d - 1<32>)
	dil = CONVERT(Test(EQ,Z), bool, int8)
	SZO = cond(rbp & rbp)
	C = false
	branch Test(NE,Z) l00000000004580F1
	// succ:  l000000000045807C l00000000004580F1
l000000000045807C:
	SZO = cond(dil & dil)
	C = false
	branch Test(EQ,Z) l00000000004580F1
	// succ:  l0000000000458081 l00000000004580F1
l0000000000458081:
	SCZO = cond(Mem0[rbx + 0x7A<64>:byte] - 0<8>)
	branch Test(NE,Z) l00000000004580E0
	// succ:  l0000000000458087 l00000000004580E0
l0000000000458087:
	SCZO = cond(Mem0[rbx + 0x79<64>:byte] - 0<8>)
	eax = Mem0[rbx + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x5C<64>:word32] = eax
	branch Test(NE,Z) l0000000000458180
	// succ:  l0000000000458098 l0000000000458180
l0000000000458098:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	// succ:  l000000000045809A
l000000000045809A:
	SCZO = cond(Mem0[rbx + 0x7A<64>:byte] - 0<8>)
	branch Test(EQ,Z) l00000000004580AB
	// succ:  l00000000004580A0 l00000000004580AB
l00000000004580A0:
	rdi = Mem0[rbx + 0x28<64>:word64]
	rdi = rdi - Mem0[rbx + 0x20<64>:word64]
	SCZO = cond(rdi)
	rdi = rdi >> 1<64>
	SCZO = cond(rdi)
	// succ:  l00000000004580AB
l00000000004580AB:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rcx = r14
	call fn0000000000454E80 (retsize: 8;)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l00000000004580CE
	// succ:  l00000000004580C1 l00000000004580CE
l00000000004580C1:
	rdi = rdi + rax
	SCZO = cond(rdi)
	eax = Mem0[rsp + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi:word64] = rdi
	Mem0[rsi + 8<64>:word32] = eax
	// succ:  l00000000004580CE
l00000000004580CE:
	rax = rsi
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000458000_exit
l00000000004580E0:
	rcx = Mem0[rbx + 0x98<64>:word64]
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000458087
	// succ:  l00000000004580F1 l0000000000458087
l00000000004580F1:
	SCZO = cond(Mem0[rbx + 0x90<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000458137
	// succ:  l00000000004580FA l0000000000458137
l00000000004580FA:
	rax = Mem0[rbx + 8<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(Mem0[rbx + 0x10<64>:word64] - rax)
	rax = Mem0[rbx + 0x80<64>:word64]
	rcx = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x90<64>:byte] = 0<8>
	dl = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rbx + 8<64>:word64] = rcx
	rax = rax + rdx * 2<64>
	rdx = Mem0[rbx + 0x88<64>:word64]
	Mem0[rbx + 0x80<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rdx
	// succ:  l0000000000458137
l0000000000458137:
	eax = Mem0[rbx + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r8 = CONVERT(r13d, word32, int64)
	r8 = r8 *s rbp
	SCZO = cond(r8)
	SZO = cond(dil & dil)
	C = false
	Mem0[rsp + 0x5C<64>:word32] = eax
	branch Test(EQ,Z) l0000000000458150
	// succ:  l000000000045814A l0000000000458150
l000000000045814A:
	SCZO = cond(Mem0[rbx + 0x79<64>:byte] - 0<8>)
	branch Test(NE,Z) l00000000004581A0
	// succ:  l0000000000458150 l00000000004581A0
l0000000000458150:
	eax = Mem0[rsp + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = rsp + 0x40<64>
	r9d = r12d
	r9 = CONVERT(r9d, word32, uint64)
	rdx = rbx
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn0000000000457F40 (retsize: 8;)
	rax = Mem0[rsp + 0x40<64>:word64]
	Mem0[rsi:word64] = rax
	eax = Mem0[rsp + 0x48<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi + 8<64>:word32] = eax
	goto l00000000004580CE
	// succ:  l00000000004580CE
l0000000000458180:
	eax = Mem0[rbx + 0x64<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = rsp + 0x5C<64>
	rcx = rbx
	Mem0[rsp + 0x5C<64>:word32] = eax
	call fn0000000000457230 (retsize: 8;)
	rdi = CONVERT(eax, word32, int64)
	goto l000000000045809A
	// succ:  l000000000045809A
l00000000004581A0:
	eax = Mem0[rbx + 0x64<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = rsp + 0x5C<64>
	rcx = rbx
	Mem0[rsp + 0x38<64>:word64] = r8
	Mem0[rsp + 0x5C<64>:word32] = eax
	call fn0000000000457230 (retsize: 8;)
	r8 = Mem0[rsp + 0x38<64>:word64]
	rax = CONVERT(eax, int32, int64)
	r8 = r8 + rax
	SCZO = cond(r8)
	goto l0000000000458150
	// succ:  l0000000000458150
fn0000000000458000_exit:


// fn00000000004581D0
// Return size: 8
define fn00000000004581D0
fn00000000004581D0_entry:
	rsp = fp
	// succ:  l00000000004581D0
l00000000004581D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rdi = Mem0[r8:word64]
	rbp = Mem0[r8 + 8<64>:word64]
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rcx + 8<64>:word32] = 0<32>
	rbx = rcx
	rcx = rdx + 0x48<64>
	rsi = rdx
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000045822F
	// succ:  l0000000000458200 l000000000045822F
l0000000000458200:
	SCZO = cond(Mem0[rsi + 0x90<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000458240
	// succ:  l0000000000458209 l0000000000458240
l0000000000458209:
	rcx = rsp + 0x30<64>
	Mem0[rsp + 0x20<64>:word32] = ebp
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rdi
	rdx = rsi
	call fn0000000000457F40 (retsize: 8;)
	rax = Mem0[rsp + 0x30<64>:word64]
	Mem0[rbx:word64] = rax
	eax = Mem0[rsp + 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 8<64>:word32] = eax
	// succ:  l000000000045822F
l000000000045822F:
	rax = rbx
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004581D0_exit
l0000000000458240:
	rax = Mem0[rsi + 8<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(Mem0[rsi + 0x10<64>:word64] - rax)
	rax = Mem0[rsi + 0x80<64>:word64]
	rcx = Mem0[rsi + 0x68<64>:word64]
	Mem0[rsi + 0x90<64>:byte] = 0<8>
	dl = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rsi + 8<64>:word64] = rcx
	rax = rax + rdx * 2<64>
	rdx = Mem0[rsi + 0x88<64>:word64]
	Mem0[rsi + 0x80<64>:word64] = rax
	Mem0[rsi + 0x10<64>:word64] = rax
	Mem0[rsi + 0x18<64>:word64] = rdx
	goto l0000000000458209
	// succ:  l0000000000458209
fn00000000004581D0_exit:


// fn0000000000458280
// Return size: 8
define fn0000000000458280
fn0000000000458280_entry:
	rsp = fp
	// succ:  l0000000000458280
l0000000000458280:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	SZO = cond(Mem0[rcx + 0x58<64>:byte] & 0x11<8>)
	C = false
	rbx = rcx
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	branch Test(EQ,Z) l0000000000458360
	// succ:  l0000000000458299 l0000000000458360
l0000000000458299:
	SCZO = cond(Mem0[rcx + 0x79<64>:byte] - 0<8>)
	branch Test(EQ,Z) l00000000004582E1
	// succ:  l000000000045829F l00000000004582E1
l000000000045829F:
	SCZO = cond(Mem0[rbx + 0x90<64>:byte] - 0<8>)
	branch Test(NE,Z) l00000000004583D0
	// succ:  l00000000004582AC l00000000004583D0
l00000000004582AC:
	rdx = rbx + 0x64<64>
	rcx = rbx
	call fn0000000000457230 (retsize: 8;)
	edx = Mem0[rbx + 0x64<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsp + 0x30<64>
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8 = CONVERT(eax, word32, int64)
	Mem0[rsp + 0x20<64>:word32] = edx
	rdx = rbx
	call fn0000000000457F40 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x30<64>:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l0000000000458360
	// succ:  l00000000004582E1 l0000000000458360
l00000000004582E1:
	rdx = Mem0[rbx + 0x20<64>:word64]
	r8 = Mem0[rbx + 0x28<64>:word64]
	SCZO = cond(di - 0xFFFF<16>)
	bpl = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(rdx - r8)
	branch Test(UGE,C) l0000000000458370
	// succ:  l00000000004582F6 l0000000000458370
l00000000004582F6:
	SZO = cond(bpl & bpl)
	C = false
	branch Test(NE,Z) l0000000000458307
	// succ:  l00000000004582FB l0000000000458307
l00000000004582FB:
	Mem0[r8:word16] = di
	r8 = r8 + 2<64>
	SCZO = cond(r8)
	Mem0[rbx + 0x28<64>:word64] = r8
	// succ:  l0000000000458307
l0000000000458307:
	r8 = r8 - rdx
	SCZO = cond(r8)
	rcx = rbx
	r8 = r8 >> 1<64>
	SCZO = cond(r8)
	call fn0000000000457490 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000458360
	// succ:  l0000000000458319 l0000000000458360
l0000000000458319:
	SZO = cond(Mem0[rbx + 0x58<64>:byte] & 0x11<8>)
	C = false
	branch Test(EQ,Z) l0000000000458460
	// succ:  l0000000000458323 l0000000000458460
l0000000000458323:
	rdx = Mem0[rbx + 0x70<64>:word64]
	rax = Mem0[rbx + 0x68<64>:word64]
	SCZO = cond(rdx - 1<64>)
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	branch Test(ULE,CZ) l0000000000458470
	// succ:  l0000000000458341 l0000000000458470
l0000000000458341:
	Mem0[rbx + 0x28<64>:word64] = rax
	Mem0[rbx + 0x20<64>:word64] = rax
	rax = rax - 2<64> + rdx * 2<64>
	Mem0[rbx + 0x30<64>:word64] = rax
	// succ:  l0000000000458352
l0000000000458352:
	SZO = cond(bpl & bpl)
	C = false
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l000000000045835D
	// succ:  l000000000045835A_1 l000000000045835D
l000000000045835A_1:
	esi = eax
	// succ:  l000000000045835D
l000000000045835D:
	goto l0000000000458365
	// succ:  l0000000000458365
l0000000000458360:
	esi = 0xFFFFFFFF<32>
	rsi = CONVERT(esi, word32, uint64)
	// succ:  l0000000000458365
l0000000000458365:
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000458280_exit
l0000000000458370:
	rdx = Mem0[rbx + 0x70<64>:word64]
	SCZO = cond(rdx - 1<64>)
	branch Test(ULE,CZ) l0000000000458412
	// succ:  l000000000045837E l0000000000458412
l000000000045837E:
	SZO = cond(Mem0[rbx + 0x58<64>:byte] & 0x11<8>)
	C = false
	branch Test(NE,Z) l0000000000458430
	// succ:  l0000000000458388 l0000000000458430
l0000000000458388:
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	// succ:  l00000000004583B0
l00000000004583B0:
	SZO = cond(bpl & bpl)
	C = false
	Mem0[rbx + 0x7A<64>:byte] = 1<8>
	branch Test(NE,Z) l0000000000458420
	// succ:  l00000000004583B9 l0000000000458420
l00000000004583B9:
	rax = Mem0[rbx + 0x28<64>:word64]
	Mem0[rax:word16] = di
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x28<64>:word64] = rax
	goto l0000000000458365
	// succ:  l0000000000458365
l00000000004583D0:
	rax = Mem0[rbx + 8<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(Mem0[rbx + 0x10<64>:word64] - rax)
	rax = Mem0[rbx + 0x80<64>:word64]
	rcx = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x90<64>:byte] = 0<8>
	dl = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rbx + 8<64>:word64] = rcx
	rax = rax + rdx * 2<64>
	rdx = Mem0[rbx + 0x88<64>:word64]
	Mem0[rbx + 0x80<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rdx
	goto l00000000004582AC
	// succ:  l00000000004582AC
l0000000000458412:
	SZO = cond(bpl & bpl)
	C = false
	Mem0[rsp + 0x4E<64>:word16] = di
	branch Test(EQ,Z) l0000000000458490
	// succ:  l000000000045841C l0000000000458490
l000000000045841C:
	Mem0[rbx + 0x7A<64>:byte] = 1<8>
	// succ:  l0000000000458420
l0000000000458420:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000458280_exit
l0000000000458430:
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	Mem0[rbx + 0x28<64>:word64] = rax
	Mem0[rbx + 0x20<64>:word64] = rax
	rax = rax - 2<64> + rdx * 2<64>
	Mem0[rbx + 0x30<64>:word64] = rax
	goto l00000000004583B0
	// succ:  l00000000004583B0
l0000000000458460:
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	// succ:  l0000000000458470
l0000000000458470:
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	goto l0000000000458352
	// succ:  l0000000000458352
l0000000000458490:
	rdx = rsp + 0x4E<64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rbx
	call fn0000000000457490 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000458360
	// succ:  l00000000004584AB l0000000000458360
l00000000004584AB:
	Mem0[rbx + 0x7A<64>:byte] = 1<8>
	goto l0000000000458365
	// succ:  l0000000000458365
fn0000000000458280_exit:


// fn00000000004584C0
// Return size: 8
define fn00000000004584C0
fn00000000004584C0_entry:
	rsp = fp
	// succ:  l00000000004584C0
l00000000004584C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	SZO = cond(Mem0[rcx + 0x58<64>:byte] & 8<8>)
	C = false
	rbx = rcx
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	branch Test(EQ,Z) l0000000000458541
	// succ:  l00000000004584D7 l0000000000458541
l00000000004584D7:
	SCZO = cond(Mem0[rcx + 0x7A<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000458530
	// succ:  l00000000004584DD l0000000000458530
l00000000004584DD:
	SCZO = cond(dx - 0xFFFF<16>)
	rax = Mem0[rcx + 0x10<64>:word64]
	r12d = CONVERT(Mem0[rcx + 0x90<64>:byte], byte, word32)
	r12 = CONVERT(r12d, word32, uint64)
	bpl = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(Mem0[rcx + 8<64>:word64] - rax)
	branch Test(UGE,C) l00000000004585AE
	// succ:  l00000000004584FB l00000000004585AE
l00000000004584FB:
	rdx = rax - 2<64>
	eax = CONVERT(Mem0[rax - 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rdx
	// succ:  l0000000000458507
l0000000000458507:
	SCZO = cond(di - ax)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(bpl - al)
	branch Test(ULT,C) l0000000000458546
	// succ:  l0000000000458512 l0000000000458546
l0000000000458512:
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l0000000000458553
	// succ:  l0000000000458517 l0000000000458553
l0000000000458517:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004584C0_exit
l0000000000458530:
	rax = Mem0[rcx:word64]
	edx = 0xFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(NE,Z) l0000000000458572
	// succ:  l0000000000458541 l0000000000458572
l0000000000458541:
	esi = 0xFFFFFFFF<32>
	rsi = CONVERT(esi, word32, uint64)
	// succ:  l0000000000458546
l0000000000458546:
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004584C0_exit
l0000000000458553:
	SZO = cond(r12b & r12b)
	C = false
	branch Test(NE,Z) l0000000000458541
	// succ:  l0000000000458558 l0000000000458541
l0000000000458558:
	SCZO = cond(Mem0[rbx + 0x90<64>:byte] - 0<8>)
	rax = Mem0[rbx + 0x10<64>:word64]
	branch Test(EQ,Z) l00000000004585F5
	// succ:  l0000000000458569 l00000000004585F5
l0000000000458569:
	Mem0[rbx + 0x79<64>:byte] = 1<8>
	Mem0[rax:word16] = di
	goto l0000000000458546
	// succ:  l0000000000458546
l0000000000458572:
	rax = Mem0[rbx + 0x68<64>:word64]
	r12d = CONVERT(Mem0[rbx + 0x90<64>:byte], byte, word32)
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(di - 0xFFFF<16>)
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	bpl = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	// succ:  l00000000004585AE
l00000000004585AE:
	rax = Mem0[rbx:word64]
	rcx = rsp + 0x30<64>
	Mem0[rsp + 0x20<64>:word32] = 0x18<32>
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8 = 0xFFFFFFFFFFFFFFFF<64>
	rdx = rbx
	call Mem0[rax + 0x20<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x30<64>:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l0000000000458541
	// succ:  l00000000004585DD l0000000000458541
l00000000004585DD:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(NE,Z) l0000000000458507
	// succ:  l00000000004585F0 l0000000000458507
l00000000004585F0:
	goto l0000000000458541
	// succ:  l0000000000458541
l00000000004585F5:
	Mem0[rbx + 0x80<64>:word64] = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	rdx = rbx + 0x7E<64>
	Mem0[rbx + 0x90<64>:byte] = 1<8>
	Mem0[rbx + 0x18<64>:word64] = rdx
	Mem0[rbx + 0x88<64>:word64] = rax
	rax = rbx + 0x7C<64>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	goto l0000000000458569
	// succ:  l0000000000458569
fn00000000004584C0_exit:


// fn0000000000458630
// Return size: 8
define fn0000000000458630
fn0000000000458630_entry:
	rsp = fp
	// succ:  l0000000000458630
l0000000000458630:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ebx = Mem0[rcx + 0x58<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(bl & 8<8>)
	C = false
	branch Test(EQ,Z) l00000000004586B0
	// succ:  l0000000000458640 l00000000004586B0
l0000000000458640:
	rbp = rcx + 0x48<64>
	rsi = rcx
	rcx = rbp
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004586B0
	// succ:  l0000000000458653 l00000000004586B0
l0000000000458653:
	rdi = Mem0[rsi + 0x18<64>:word64]
	rdi = rdi - Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rdi)
	ebx = ebx & 4<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	rcx = Mem0[rsi + 0x98<64>:word64]
	rdi = rdi >> 1<64>
	SCZO = cond(rdi)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004586C3
	// succ:  l000000000045866D l00000000004586C3
l000000000045866D:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x28<64>:word64] (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l00000000004586B7
	// succ:  l0000000000458677 l00000000004586B7
l0000000000458677:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l00000000004586B7
	// succ:  l000000000045867B l00000000004586B7
l000000000045867B:
	rcx = rbp
	call fn0000000000455020 (retsize: 8;)
	rcx = Mem0[rsi + 0x98<64>:word64]
	rbx = rax
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x40<64>:word64] (retsize: 8;)
	rcx = CONVERT(eax, word32, int64)
	rax = rbx
	rdx_rax = CONVERT(rax, int64, int128)
	v20 = rdx_rax
	rdx = CONVERT(v20 % rcx, int128, int64)
	rax = CONVERT(v20 / rcx, word64, int64)
	SCZO = cond(rax)
	rdi = rdi + rax
	SCZO = cond(rdi)
	rax = rdi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000458630_exit
l00000000004586B0:
	rdi = 0xFFFFFFFFFFFFFFFF<64>
	// succ:  l00000000004586B7
l00000000004586B7:
	rax = rdi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000458630_exit
l00000000004586C3:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l00000000004586CF_thunk_fn00000000004586D0
l00000000004586CF_thunk_fn00000000004586D0:
	call fn00000000004586D0 (retsize: 0;)
	return
	// succ:  fn0000000000458630_exit
fn0000000000458630_exit:


// fn00000000004586D0
// Return size: 8
define fn00000000004586D0
fn00000000004586D0_entry:
	rsp = fp
	// succ:  l00000000004586D0
l00000000004586D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x68<64>
	SCZO = cond(rsp)
	SZO = cond(Mem0[rcx + 0x58<64>:byte] & 8<8>)
	C = false
	branch Test(EQ,Z) l0000000000458905
	// succ:  l00000000004586EA l0000000000458905
l00000000004586EA:
	SCZO = cond(Mem0[rcx + 0x7A<64>:byte] - 0<8>)
	rbx = rcx
	branch Test(NE,Z) l0000000000458970
	// succ:  l00000000004586F7 l0000000000458970
l00000000004586F7:
	rax = Mem0[rcx + 0x10<64>:word64]
	// succ:  l00000000004586FB
l00000000004586FB:
	SCZO = cond(Mem0[rbx + 0x90<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000458A40
	// succ:  l0000000000458708 l0000000000458A40
l0000000000458708:
	rdx = Mem0[rbx + 0x18<64>:word64]
	// succ:  l000000000045870C
l000000000045870C:
	SCZO = cond(rdx - rax)
	branch Test(UGT,CZ) l0000000000458963
	// succ:  l0000000000458715 l0000000000458963
l0000000000458715:
	rax = Mem0[rbx + 0x70<64>:word64]
	rcx = Mem0[rbx + 0x98<64>:word64]
	rdi = rax - 1<64>
	SCZO = cond(rax - 2<64>)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(UGE,C) l0000000000458731
	// succ:  l000000000045872D_1 l0000000000458731
l000000000045872D_1:
	rdi = rax
	// succ:  l0000000000458731
l0000000000458731:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000458BD3
	// succ:  l000000000045873A l0000000000458BD3
l000000000045873A:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004588B0
	// succ:  l0000000000458748 l00000000004588B0
l0000000000458748:
	rcx = Mem0[rbx + 0x98<64>:word64]
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x28<64>:word64] (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000458B8C
	// succ:  l000000000045875D l0000000000458B8C
l000000000045875D:
	rax = CONVERT(eax, int32, int64)
	rax = rax *s rdi
	SCZO = cond(rax)
	rsi = rax
	// succ:  l0000000000458766
l0000000000458766:
	rdx = Mem0[rbx + 0xB0<64>:word64]
	rbp = Mem0[rbx + 0xB8<64>:word64]
	r10 = rax
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rbp = rbp - rdx
	SCZO = cond(rbp)
	r10 = r10 - rbp
	SCZO = cond(r10)
	SCZO = cond(rax - rbp)
	branch Test(GT,SZO) l0000000000458786
	// succ:  l0000000000458782_1 l0000000000458786
l0000000000458782_1:
	r10 = rcx
	// succ:  l0000000000458786
l0000000000458786:
	SCZO = cond(Mem0[rbx + 0x79<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045879D
	// succ:  l000000000045878C l000000000045879D
l000000000045878C:
	rax = Mem0[rbx + 8<64>:word64]
	SCZO = cond(Mem0[rbx + 0x18<64>:word64] - rax)
	branch Test(NE,Z) l000000000045879D
	// succ:  l0000000000458796 l000000000045879D
l0000000000458796:
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000045879D
	// succ:  l0000000000458799_1 l000000000045879D
l0000000000458799_1:
	r10 = rcx
	// succ:  l000000000045879D
l000000000045879D:
	SCZO = cond(rsi - Mem0[rbx + 0xA8<64>:word64])
	branch Test(GT,SZO) l0000000000458B01
	// succ:  l00000000004587AA l0000000000458B01
l00000000004587AA:
	SZO = cond(rbp & rbp)
	C = false
	branch Test(NE,Z) l0000000000458B53
	// succ:  l00000000004587B3 l0000000000458B53
l00000000004587B3:
	rax = Mem0[rbx + 0xA0<64>:word64]
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	// succ:  l00000000004587BD
l00000000004587BD:
	rdx = rax + r13
	Mem0[rbx + 0xB0<64>:word64] = rax
	eax = Mem0[rbx + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(r10 & r10)
	C = false
	Mem0[rbx + 0xB8<64>:word64] = rdx
	r12 = rdi + rdi
	rbp = rbx + 0x48<64>
	Mem0[rbx + 0x64<64>:word32] = eax
	rax = rbx + 0x60<64>
	r14 = rsp + 0x58<64>
	Mem0[rsp + 0x48<64>:word64] = rax
	branch Test(GT,SZO) l0000000000458870
	// succ:  l00000000004587F5 l0000000000458870
l00000000004587F5:
	goto l0000000000458A30
	// succ:  l0000000000458A30
l0000000000458800:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l0000000000458920
	// succ:  l000000000045880D l0000000000458920
l000000000045880D:
	rax = rax + Mem0[rbx + 0xB8<64>:word64]
	SCZO = cond(rax)
	rdx = rax
	Mem0[rbx + 0xB8<64>:word64] = rax
	// succ:  l000000000045881E
l000000000045881E:
	r8 = Mem0[rbx + 0xB0<64>:word64]
	r9 = Mem0[rbx + 8<64>:word64]
	SCZO = cond(rdx - r8)
	Mem0[rsp + 0x58<64>:word64] = r9
	branch Test(UGT,CZ) l00000000004589B2
	// succ:  l0000000000458837 l00000000004589B2
l0000000000458837:
	SCZO = cond(esi - 3<32>)
	branch Test(EQ,Z) l00000000004589F5
	// succ:  l0000000000458840 l00000000004589F5
l0000000000458840:
	r15 = Mem0[rsp + 0x58<64>:word64]
	r15 = r15 - r9
	SCZO = cond(r15)
	r15 = r15 >> 1<64>
	SCZO = cond(r15)
	SCZO = cond(esi - 2<32>)
	branch Test(EQ,Z) l0000000000458920
	// succ:  l0000000000458854 l0000000000458920
l0000000000458854:
	SZO = cond(r15 & r15)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(r13b - al)
	branch Test(UGE,C) l0000000000458920
	// succ:  l0000000000458863 l0000000000458920
l0000000000458863:
	rdx = Mem0[rbx + 0xB8<64>:word64]
	r10d = 1<32>
	r10 = CONVERT(r10d, word32, uint64)
	// succ:  l0000000000458870
l0000000000458870:
	rax = rdx
	rax = rax - Mem0[rbx + 0xA0<64>:word64]
	SCZO = cond(rax)
	rax = rax + r10
	SCZO = cond(rax)
	SCZO = cond(rax - Mem0[rbx + 0xA8<64>:word64])
	branch Test(GT,SZO) l0000000000458BC7
	// succ:  l000000000045888A l0000000000458BC7
l000000000045888A:
	r8 = r10
	rcx = rbp
	call fn0000000000454DE0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l0000000000458800
	// succ:  l000000000045889E l0000000000458800
l000000000045889E:
	r13d = 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	goto l000000000045880D
	// succ:  l000000000045880D
l00000000004588B0:
	rdx = Mem0[rbx + 8<64>:word64]
	rcx = rbx + 0x48<64>
	r8 = rdi
	call fn0000000000454DE0 (retsize: 8;)
	SCZO = cond(rax - 0<64>)
	r15 = rax
	branch Test(NE,Z) l0000000000458AB0
	// succ:  l00000000004588CD l0000000000458AB0
l00000000004588CD:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(Mem0[rbx + 0x58<64>:byte] & 0x10<8>)
	C = false
	branch Test(EQ,Z) l0000000000458AC0
	// succ:  l00000000004588D9 l0000000000458AC0
l00000000004588D9:
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	// succ:  l0000000000458905
l0000000000458905:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000045890A
l000000000045890A:
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004586D0_exit
l0000000000458920:
	SZO = cond(r15 & r15)
	C = false
	branch Test(LE,SZO) l0000000000458A80
	// succ:  l0000000000458929 l0000000000458A80
l0000000000458929:
	SZO = cond(Mem0[rbx + 0x58<64>:byte] & 8<8>)
	C = false
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	branch Test(EQ,Z) l0000000000458AA0
	// succ:  l000000000045893F l0000000000458AA0
l000000000045893F:
	rdx = rax + r15 * 2<64>
	Mem0[rbx + 0x18<64>:word64] = rdx
	// succ:  l0000000000458947
l0000000000458947:
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0x79<64>:byte] = 1<8>
	// succ:  l0000000000458963
l0000000000458963:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000045890A
	// succ:  l000000000045890A
l0000000000458970:
	rax = Mem0[rcx:word64]
	edx = 0xFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000045890A
	// succ:  l0000000000458981 l000000000045890A
l0000000000458981:
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	goto l00000000004586FB
	// succ:  l00000000004586FB
l00000000004589B2:
	rcx = Mem0[rbx + 0x98<64>:word64]
	r11 = r9
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x28<64>:word64] = r9
	r9 = rbx + 0xB0<64>
	Mem0[rsp + 0x38<64>:word64] = r14
	Mem0[rsp + 0x30<64>:word64] = r11
	Mem0[rsp + 0x20<64>:word64] = r9
	r9 = rdx
	rdx = Mem0[rsp + 0x48<64>:word64]
	call Mem0[rax + 0x20<64>:word64] (retsize: 8;)
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	r9 = Mem0[rbx + 8<64>:word64]
	SCZO = cond(esi - 3<32>)
	branch Test(NE,Z) l0000000000458840
	// succ:  l00000000004589F5 l0000000000458840
l00000000004589F5:
	rdx = Mem0[rbx + 0xA0<64>:word64]
	r15 = Mem0[rbx + 0xB8<64>:word64]
	rcx = r9
	r15 = r15 - rdx
	SCZO = cond(r15)
	SCZO = cond(rdi - r15)
	branch Test(UGT,CZ) l0000000000458A10
	// succ:  l0000000000458A0C_1 l0000000000458A10
l0000000000458A0C_1:
	r15 = rdi
	// succ:  l0000000000458A10
l0000000000458A10:
	r8 = r15 + r15
	rax = memcpy(rcx, rdx, r8)
	rax = r15
	rax = rax + Mem0[rbx + 0xA0<64>:word64]
	SCZO = cond(rax)
	Mem0[rbx + 0xB0<64>:word64] = rax
	goto l0000000000458854
	// succ:  l0000000000458854
l0000000000458A30:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	goto l000000000045881E
	// succ:  l000000000045881E
l0000000000458A40:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(Mem0[rbx + 8<64>:word64] - rax)
	rax = Mem0[rbx + 0x80<64>:word64]
	rcx = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x90<64>:byte] = 0<8>
	dl = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rbx + 8<64>:word64] = rcx
	rax = rax + rdx * 2<64>
	rdx = Mem0[rbx + 0x88<64>:word64]
	Mem0[rbx + 0x80<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rdx
	goto l000000000045870C
	// succ:  l000000000045870C
l0000000000458A80:
	SZO = cond(r13b & r13b)
	C = false
	branch Test(NE,Z) l0000000000458AC0
	// succ:  l0000000000458A85 l0000000000458AC0
l0000000000458A85:
	SCZO = cond(esi - 2<32>)
	branch Test(EQ,Z) l0000000000458B80
	// succ:  l0000000000458A8E l0000000000458B80
l0000000000458A8E:
	rcx = 0x000000000048D510<p64>
	call fn0000000000470B20 (retsize: 8;)
	// succ:  l0000000000458AA0
l0000000000458AA0:
	Mem0[rbx + 0x18<64>:word64] = rax
	goto l0000000000458947
	// succ:  l0000000000458947
l0000000000458AB0:
	branch Test(GT,SZO) l0000000000458929
	// succ:  l0000000000458AB6 l0000000000458929
l0000000000458AB6:
	goto l0000000000458A8E
	// succ:  l0000000000458A8E
l0000000000458AC0:
	rax = Mem0[rbx + 0x68<64>:word64]
	SCZO = cond(esi - 1<32>)
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	branch Test(NE,Z) l0000000000458905
	// succ:  l0000000000458AF5 l0000000000458905
l0000000000458AF5:
	rcx = 0x000000000048D4A0<p64>
	call fn0000000000470B20 (retsize: 8;)
	// succ:  l0000000000458B01
l0000000000458B01:
	rcx = rsi
	Mem0[rsp + 0x48<64>:word64] = r10
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	call fn0000000000475560 (retsize: 8;)
	SZO = cond(rbp & rbp)
	C = false
	r12 = rax
	r10 = Mem0[rsp + 0x48<64>:word64]
	branch Test(NE,Z) l0000000000458BA8
	// succ:  l0000000000458B22 l0000000000458BA8
l0000000000458B22:
	rcx = Mem0[rbx + 0xA0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000458B3D
	// succ:  l0000000000458B2E l0000000000458B3D
l0000000000458B2E:
	Mem0[rsp + 0x48<64>:word64] = r10
	call fn0000000000475540 (retsize: 8;)
	r10 = Mem0[rsp + 0x48<64>:word64]
	// succ:  l0000000000458B3D
l0000000000458B3D:
	Mem0[rbx + 0xA0<64>:word64] = r12
	Mem0[rbx + 0xA8<64>:word64] = rsi
	rax = r12
	goto l00000000004587BD
	// succ:  l00000000004587BD
l0000000000458B53:
	rcx = Mem0[rbx + 0xA0<64>:word64]
	r8 = rbp
	Mem0[rsp + 0x48<64>:word64] = r10
	r13 = rbp
	rax = memmove(rcx, rdx, r8)
	rax = Mem0[rbx + 0xA0<64>:word64]
	r10 = Mem0[rsp + 0x48<64>:word64]
	goto l00000000004587BD
	// succ:  l00000000004587BD
l0000000000458B80:
	rcx = 0x000000000048D4D8<p64>
	call fn0000000000470B20 (retsize: 8;)
	// succ:  l0000000000458B8C
l0000000000458B8C:
	rcx = Mem0[rbx + 0x98<64>:word64]
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x40<64>:word64] (retsize: 8;)
	rax = CONVERT(eax, int32, int64)
	rsi = rdi - 1<64> + rax
	rax = rdi
	goto l0000000000458766
	// succ:  l0000000000458766
l0000000000458BA8:
	rdx = Mem0[rbx + 0xB0<64>:word64]
	r8 = rbp
	rcx = rax
	r13 = rbp
	rax = memcpy(rcx, rdx, r8)
	r10 = Mem0[rsp + 0x48<64>:word64]
	goto l0000000000458B22
	// succ:  l0000000000458B22
l0000000000458BC7:
	rcx = 0x000000000048D460<p64>
	call fn0000000000470B20 (retsize: 8;)
	// succ:  l0000000000458BD3
l0000000000458BD3:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000458BDF_thunk_fn0000000000458BE0
l0000000000458BDF_thunk_fn0000000000458BE0:
	call fn0000000000458BE0 (retsize: 0;)
	return
	// succ:  fn00000000004586D0_exit
fn00000000004586D0_exit:


// fn0000000000458BE0
// Return size: 8
define fn0000000000458BE0
fn0000000000458BE0_entry:
	rsp = fp
	// succ:  l0000000000458BE0
l0000000000458BE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r12 = Mem0[0x0000000000491C40<p64>:word64]
	rsi = rcx + 0x38<64>
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	rdi = rbx + 0x48<64>
	rax = r12 + 0x10<64>
	Mem0[rcx + 0x20<64>:word64] = 0<64>
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	rcx = rsi
	call fn000000000046AE90 (retsize: 8;)
	rax = 0x0000000000496790<p64>
	rdx = rbx + 0x40<64>
	rcx = rdi
	Mem0[rbx + 0x40<64>:word64] = 0<64>
	Mem0[rbx:word64] = rax
	call fn0000000000455090 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x58<64>:word32] = 0<32>
	Mem0[rbx + 0x5C<64>:word32] = 0<32>
	Mem0[rbx + 0x60<64>:word32] = 0<32>
	Mem0[rbx + 0x64<64>:word32] = 0<32>
	rcx = rsi
	Mem0[rbx + 0x68<64>:word64] = 0<64>
	Mem0[rbx + 0x70<64>:word64] = 0x200<64>
	Mem0[rbx + 0x78<64>:byte] = 0<8>
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 0x7C<64>:word16] = ax
	Mem0[rbx + 0x80<64>:word64] = 0<64>
	Mem0[rbx + 0x88<64>:word64] = 0<64>
	Mem0[rbx + 0x90<64>:byte] = 0<8>
	Mem0[rbx + 0x98<64>:word64] = 0<64>
	Mem0[rbx + 0xA0<64>:word64] = 0<64>
	Mem0[rbx + 0xA8<64>:word64] = 0<64>
	Mem0[rbx + 0xB0<64>:word64] = 0<64>
	Mem0[rbx + 0xB8<64>:word64] = 0<64>
	call fn0000000000472640 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000458D03
	// succ:  l0000000000458CF8 l0000000000458D03
l0000000000458CF8:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000458BE0_exit
l0000000000458D03:
	rcx = rsi
	call fn00000000004730E0 (retsize: 8;)
	Mem0[rbx + 0x98<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000458BE0_exit
fn0000000000458BE0_exit:


// fn0000000000458D50
// Return size: 8
define fn0000000000458D50
fn0000000000458D50_entry:
	rsp = fp
	// succ:  l0000000000458D50
l0000000000458D50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r12 = Mem0[0x0000000000491C40<p64>:word64]
	rsi = rcx + 0x38<64>
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	rdi = rbx + 0x48<64>
	rax = r12 + 0x10<64>
	Mem0[rcx + 0x20<64>:word64] = 0<64>
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	rcx = rsi
	call fn000000000046AE90 (retsize: 8;)
	rax = 0x0000000000496790<p64>
	rdx = rbx + 0x40<64>
	rcx = rdi
	Mem0[rbx + 0x40<64>:word64] = 0<64>
	Mem0[rbx:word64] = rax
	call fn0000000000455090 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x58<64>:word32] = 0<32>
	Mem0[rbx + 0x5C<64>:word32] = 0<32>
	Mem0[rbx + 0x60<64>:word32] = 0<32>
	Mem0[rbx + 0x64<64>:word32] = 0<32>
	rcx = rsi
	Mem0[rbx + 0x68<64>:word64] = 0<64>
	Mem0[rbx + 0x70<64>:word64] = 0x200<64>
	Mem0[rbx + 0x78<64>:byte] = 0<8>
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 0x7C<64>:word16] = ax
	Mem0[rbx + 0x80<64>:word64] = 0<64>
	Mem0[rbx + 0x88<64>:word64] = 0<64>
	Mem0[rbx + 0x90<64>:byte] = 0<8>
	Mem0[rbx + 0x98<64>:word64] = 0<64>
	Mem0[rbx + 0xA0<64>:word64] = 0<64>
	Mem0[rbx + 0xA8<64>:word64] = 0<64>
	Mem0[rbx + 0xB0<64>:word64] = 0<64>
	Mem0[rbx + 0xB8<64>:word64] = 0<64>
	call fn0000000000472640 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000458E73
	// succ:  l0000000000458E68 l0000000000458E73
l0000000000458E68:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000458D50_exit
l0000000000458E73:
	rcx = rsi
	call fn00000000004730E0 (retsize: 8;)
	Mem0[rbx + 0x98<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000458D50_exit
fn0000000000458D50_exit:


// fn0000000000458EC0
// Return size: 0
define fn0000000000458EC0
fn0000000000458EC0_entry:
	rsp = fp
	// succ:  l0000000000458EC0
l0000000000458EC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496790<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000457800 (retsize: 8;)
	rcx = rbx + 0x48<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rcx = rbx + 0x38<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000458EFF_thunk_fn0000000000475550
l0000000000458EFF_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000458EC0_exit
fn0000000000458EC0_exit:


// fn0000000000458F10
// Return size: 0
define fn0000000000458F10
fn0000000000458F10_entry:
	rsp = fp
	// succ:  l0000000000458F10
l0000000000458F10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496790<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000457800 (retsize: 8;)
	rcx = rbx + 0x48<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rcx = rbx + 0x38<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000458F47_thunk_fn000000000046AF20
l0000000000458F47_thunk_fn000000000046AF20:
	call fn000000000046AF20 (retsize: 0;)
	return
	// succ:  fn0000000000458F10_exit
fn0000000000458F10_exit:


// fn0000000000458F50
// Return size: 0
define fn0000000000458F50
fn0000000000458F50_entry:
	rsp = fp
	// succ:  l0000000000458F50
l0000000000458F50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496790<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000457800 (retsize: 8;)
	rcx = rbx + 0x48<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rcx = rbx + 0x38<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000458F87_thunk_fn000000000046AF20
l0000000000458F87_thunk_fn000000000046AF20:
	call fn000000000046AF20 (retsize: 0;)
	return
	// succ:  fn0000000000458F50_exit
fn0000000000458F50_exit:


// fn0000000000458F90
// Return size: 8
define fn0000000000458F90
fn0000000000458F90_entry:
	rsp = fp
	// succ:  l0000000000458F90
l0000000000458F90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rcx + 0x18<64>
	call fn0000000000455970 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000458FC0
	// succ:  l0000000000458FA9 l0000000000458FC0
l0000000000458FA9:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000458FB7_thunk_fn000000000046E370
l0000000000458FB7_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn0000000000458F90_exit
l0000000000458FC0:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000458FD2_thunk_fn000000000046E370
l0000000000458FD2_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn0000000000458F90_exit
fn0000000000458F90_exit:


// fn0000000000458FE0
// Return size: 8
define fn0000000000458FE0
fn0000000000458FE0_entry:
	rsp = fp
	// succ:  l0000000000458FE0
l0000000000458FE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdx = Mem0[rdx:word64]
	rbx = rcx
	rcx = rcx + 0x18<64>
	call fn0000000000455970 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000459010
	// succ:  l0000000000458FFC l0000000000459010
l0000000000458FFC:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045900A_thunk_fn000000000046E370
l000000000045900A_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn0000000000458FE0_exit
l0000000000459010:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000459022_thunk_fn000000000046E370
l0000000000459022_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn0000000000458FE0_exit
fn0000000000458FE0_exit:


// fn0000000000459030
// Return size: 8
define fn0000000000459030
fn0000000000459030_entry:
	rsp = fp
	// succ:  l0000000000459030
l0000000000459030:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rcx + 0x18<64>
	call fn0000000000455AB0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000459050
	// succ:  l0000000000459046 l0000000000459050
l0000000000459046:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000459030_exit
l0000000000459050:
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000459065_thunk_fn000000000046E370
l0000000000459065_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn0000000000459030_exit
fn0000000000459030_exit:


// fn0000000000459070
// Return size: 8
define fn0000000000459070
fn0000000000459070_entry:
	rsp = fp
	// succ:  l0000000000459070
l0000000000459070:
	rcx = rcx + 0x60<64>
	SCZO = cond(rcx)
	// succ:  l0000000000459074_thunk_fn000000000042AA50
l0000000000459074_thunk_fn000000000042AA50:
	call fn000000000042AA50 (retsize: 0;)
	return
	// succ:  fn0000000000459070_exit
fn0000000000459070_exit:


// fn0000000000459080
// Return size: 8
define fn0000000000459080
fn0000000000459080_entry:
	rsp = fp
	// succ:  l0000000000459080
l0000000000459080:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0xD8<64>
	rbx = rcx
	rbp = rdx
	r12d = r8d
	r12 = CONVERT(r12d, word32, uint64)
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	rax = 0x0000000000492A58<p64>
	Mem0[rbx + 0x1B0<64>:word64] = 0<64>
	Mem0[rbx + 0x1B8<64>:byte] = 0<8>
	Mem0[rbx + 0x1B9<64>:byte] = 0<8>
	Mem0[rbx + 0x1C0<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492A80<p64>
	Mem0[rbx + 0x1C8<64>:word64] = 0<64>
	Mem0[rbx + 0x1D0<64>:word64] = 0<64>
	Mem0[rbx + 0x1D8<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0xD8<64>:word64] = rax
	Mem0[rbx + 8<64>:word64] = 0<64>
	call fn000000000046E310 (retsize: 8;)
	rax = 0x0000000000492AD8<p64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rsi
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = 0x0000000000492B00<p64>
	Mem0[rbx + 0xD8<64>:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	rax = 0x0000000000496818<p64>
	rdi = rbx + 0x18<64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496868<p64>
	rcx = rdi
	Mem0[rbx + 0xD8<64>:word64] = rax
	rax = 0x0000000000496840<p64>
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn0000000000456E20 (retsize: 8;)
	rdx = rdi
	rcx = rsi
	call fn000000000046E310 (retsize: 8;)
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rcx = rdi
	call fn0000000000455970 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l00000000004591A0
	// succ:  l0000000000459187 l00000000004591A0
l0000000000459187:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000459080_exit
l00000000004591A0:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000459080_exit
fn0000000000459080_exit:


// fn0000000000459210
// Return size: 8
define fn0000000000459210
fn0000000000459210_entry:
	rsp = fp
	// succ:  l0000000000459210
l0000000000459210:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0xD8<64>
	rbx = rcx
	rbp = rdx
	r12d = r8d
	r12 = CONVERT(r12d, word32, uint64)
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	rax = 0x0000000000492A58<p64>
	Mem0[rbx + 0x1B0<64>:word64] = 0<64>
	Mem0[rbx + 0x1B8<64>:byte] = 0<8>
	Mem0[rbx + 0x1B9<64>:byte] = 0<8>
	Mem0[rbx + 0x1C0<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492A80<p64>
	Mem0[rbx + 0x1C8<64>:word64] = 0<64>
	Mem0[rbx + 0x1D0<64>:word64] = 0<64>
	Mem0[rbx + 0x1D8<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0xD8<64>:word64] = rax
	Mem0[rbx + 8<64>:word64] = 0<64>
	call fn000000000046E310 (retsize: 8;)
	rax = 0x0000000000492AD8<p64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rsi
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = 0x0000000000492B00<p64>
	Mem0[rbx + 0xD8<64>:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	rax = 0x0000000000496818<p64>
	rdi = rbx + 0x18<64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496868<p64>
	rcx = rdi
	Mem0[rbx + 0xD8<64>:word64] = rax
	rax = 0x0000000000496840<p64>
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn0000000000456E20 (retsize: 8;)
	rdx = rdi
	rcx = rsi
	call fn000000000046E310 (retsize: 8;)
	rdx = Mem0[rbp + 0<64>:word64]
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rdi
	call fn0000000000455970 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000459330
	// succ:  l0000000000459318 l0000000000459330
l0000000000459318:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000459210_exit
l0000000000459330:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000459210_exit
fn0000000000459210_exit:


// fn00000000004593A0
// Return size: 8
define fn00000000004593A0
fn00000000004593A0_entry:
	rsp = fp
	// succ:  l00000000004593A0
l00000000004593A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx + 0xD8<64>
	rbx = rcx
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	rax = 0x0000000000492A58<p64>
	Mem0[rbx + 0x1B0<64>:word64] = 0<64>
	Mem0[rbx + 0x1B8<64>:byte] = 0<8>
	Mem0[rbx + 0x1B9<64>:byte] = 0<8>
	Mem0[rbx + 0x1C0<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492A80<p64>
	Mem0[rbx + 0x1C8<64>:word64] = 0<64>
	Mem0[rbx + 0x1D0<64>:word64] = 0<64>
	Mem0[rbx + 0x1D8<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0xD8<64>:word64] = rax
	Mem0[rbx + 8<64>:word64] = 0<64>
	call fn000000000046E310 (retsize: 8;)
	rax = 0x0000000000492AD8<p64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rsi
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = 0x0000000000492B00<p64>
	Mem0[rbx + 0xD8<64>:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	rax = 0x0000000000496818<p64>
	rdi = rbx + 0x18<64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496868<p64>
	rcx = rdi
	Mem0[rbx + 0xD8<64>:word64] = rax
	rax = 0x0000000000496840<p64>
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn0000000000456E20 (retsize: 8;)
	rdx = rdi
	rcx = rsi
	call fn000000000046E310 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004593A0_exit
fn00000000004593A0_exit:


// fn00000000004594E0
// Return size: 8
define fn00000000004594E0
fn00000000004594E0_entry:
	rsp = fp
	// succ:  l00000000004594E0
l00000000004594E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	rbx = rcx
	rsi = rdx
	rbp = r8
	r12d = r9d
	r12 = CONVERT(r12d, word32, uint64)
	Mem0[rcx:word64] = rax
	rcx = Mem0[rdx + 0x18<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rbx + rdx:word64] = rcx
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E310 (retsize: 8;)
	rax = Mem0[rsi + 0x20<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = rbx + 0x10<64> + rax
	rax = Mem0[rsi + 0x28<64>:word64]
	Mem0[rcx:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	rax = Mem0[rsi + 8<64>:word64]
	rdi = rbx + 0x18<64>
	rcx = rdi
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x30<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rax = Mem0[rsi + 0x38<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rsi:word64]
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x40<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rax = Mem0[rsi + 0x48<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn0000000000456E20 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = rbx
	rdx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call fn000000000046E310 (retsize: 8;)
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rcx = rdi
	call fn0000000000455970 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l00000000004595C1
	// succ:  l00000000004595AA l00000000004595C1
l00000000004595AA:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004594E0_exit
l00000000004595C1:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004594E0_exit
fn00000000004594E0_exit:


// fn0000000000459620
// Return size: 8
define fn0000000000459620
fn0000000000459620_entry:
	rsp = fp
	// succ:  l0000000000459620
l0000000000459620:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	rbx = rcx
	rsi = rdx
	rbp = r8
	r12d = r9d
	r12 = CONVERT(r12d, word32, uint64)
	Mem0[rcx:word64] = rax
	rcx = Mem0[rdx + 0x18<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rbx + rdx:word64] = rcx
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E310 (retsize: 8;)
	rax = Mem0[rsi + 0x20<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = rbx + 0x10<64> + rax
	rax = Mem0[rsi + 0x28<64>:word64]
	Mem0[rcx:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	rax = Mem0[rsi + 8<64>:word64]
	rdi = rbx + 0x18<64>
	rcx = rdi
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x30<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rax = Mem0[rsi + 0x38<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rsi:word64]
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x40<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rax = Mem0[rsi + 0x48<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn0000000000456E20 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = rbx
	rdx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call fn000000000046E310 (retsize: 8;)
	rdx = Mem0[rbp + 0<64>:word64]
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rdi
	call fn0000000000455970 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000459702
	// succ:  l00000000004596EB l0000000000459702
l00000000004596EB:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000459620_exit
l0000000000459702:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000459620_exit
fn0000000000459620_exit:


// fn0000000000459760
// Return size: 8
define fn0000000000459760
fn0000000000459760_entry:
	rsp = fp
	// succ:  l0000000000459760
l0000000000459760:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	rbx = rcx
	rsi = rdx
	Mem0[rcx:word64] = rax
	rcx = Mem0[rdx + 0x18<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rbx + rdx:word64] = rcx
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E310 (retsize: 8;)
	rax = Mem0[rsi + 0x20<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = rbx + 0x10<64> + rax
	rax = Mem0[rsi + 0x28<64>:word64]
	Mem0[rcx:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	rax = Mem0[rsi + 8<64>:word64]
	rdi = rbx + 0x18<64>
	rcx = rdi
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x30<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rax = Mem0[rsi + 0x38<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rsi:word64]
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x40<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rax = Mem0[rsi + 0x48<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn0000000000456E20 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = rbx
	rdx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call fn000000000046E310 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000459760_exit
fn0000000000459760_exit:


// fn0000000000459860
// Return size: 0
define fn0000000000459860
fn0000000000459860_entry:
	rsp = fp
	// succ:  l0000000000459860
l0000000000459860:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496818<p64>
	rbx = rcx
	rcx = rcx + 0x18<64>
	Mem0[rcx - 0x18<64>:word64] = rax
	rax = 0x0000000000496868<p64>
	Mem0[rcx + 0xC0<64>:word64] = rax
	rax = 0x0000000000496840<p64>
	Mem0[rcx - 8<64>:word64] = rax
	rax = 0x0000000000496710<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000455AB0 (retsize: 8;)
	rcx = rbx + 0x60<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rcx = rbx + 0x50<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[0x0000000000491E20<p64>:word64]
	rcx = rbx + 0xD8<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0xD8<64>:word64] = rax
	call fn000000000046D3D0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004598E6_thunk_fn0000000000475550
l00000000004598E6_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000459860_exit
fn0000000000459860_exit:


// fn00000000004598F0
// Return size: 0
define fn00000000004598F0
fn00000000004598F0_entry:
	rsp = fp
	// succ:  l00000000004598F0
l00000000004598F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496818<p64>
	rbx = rcx
	rcx = rcx + 0x18<64>
	Mem0[rcx - 0x18<64>:word64] = rax
	rax = 0x0000000000496868<p64>
	Mem0[rcx + 0xC0<64>:word64] = rax
	rax = 0x0000000000496840<p64>
	Mem0[rcx - 8<64>:word64] = rax
	rax = 0x0000000000496710<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000455AB0 (retsize: 8;)
	rcx = rbx + 0x60<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rcx = rbx + 0x50<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[0x0000000000491E20<p64>:word64]
	rcx = rbx + 0xD8<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0xD8<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045996E_thunk_fn000000000046D3D0
l000000000045996E_thunk_fn000000000046D3D0:
	call fn000000000046D3D0 (retsize: 0;)
	return
	// succ:  fn00000000004598F0_exit
fn00000000004598F0_exit:


// fn0000000000459980
// Return size: 8
define fn0000000000459980
fn0000000000459980_entry:
	rsp = fp
	// succ:  l0000000000459980
l0000000000459980:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rsi = rdx
	rbx = rcx
	rcx = rcx + 0x18<64>
	Mem0[rcx - 0x18<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rdx + 0x40<64>:word64]
	Mem0[rcx - 0x18<64> + rax:word64] = rdx
	rax = Mem0[rsi + 0x48<64>:word64]
	Mem0[rcx - 8<64>:word64] = rax
	rax = 0x0000000000496710<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000455AB0 (retsize: 8;)
	rcx = rbx + 0x60<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rcx = rbx + 0x50<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[rsi + 8<64>:word64]
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x30<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rax = Mem0[rsi + 0x38<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rsi + 0x20<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x28<64>:word64]
	Mem0[rbx + 0x10<64> + rax:word64] = rdx
	rax = Mem0[rsi + 0x10<64>:word64]
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000459980_exit
fn0000000000459980_exit:


// fn0000000000459A30
// Return size: 8
define fn0000000000459A30
fn0000000000459A30_entry:
	rsp = fp
	// succ:  l0000000000459A30
l0000000000459A30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rcx + 0x18<64>
	call fn00000000004576D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000459A60
	// succ:  l0000000000459A49 l0000000000459A60
l0000000000459A49:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000459A57_thunk_fn000000000046EB40
l0000000000459A57_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn0000000000459A30_exit
l0000000000459A60:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000459A72_thunk_fn000000000046EB40
l0000000000459A72_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn0000000000459A30_exit
fn0000000000459A30_exit:


// fn0000000000459A80
// Return size: 8
define fn0000000000459A80
fn0000000000459A80_entry:
	rsp = fp
	// succ:  l0000000000459A80
l0000000000459A80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdx = Mem0[rdx:word64]
	rbx = rcx
	rcx = rcx + 0x18<64>
	call fn00000000004576D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000459AB0
	// succ:  l0000000000459A9C l0000000000459AB0
l0000000000459A9C:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000459AAA_thunk_fn000000000046EB40
l0000000000459AAA_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn0000000000459A80_exit
l0000000000459AB0:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000459AC2_thunk_fn000000000046EB40
l0000000000459AC2_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn0000000000459A80_exit
fn0000000000459A80_exit:


// fn0000000000459AD0
// Return size: 8
define fn0000000000459AD0
fn0000000000459AD0_entry:
	rsp = fp
	// succ:  l0000000000459AD0
l0000000000459AD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rcx + 0x18<64>
	call fn0000000000457800 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000459AF0
	// succ:  l0000000000459AE6 l0000000000459AF0
l0000000000459AE6:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000459AD0_exit
l0000000000459AF0:
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000459B05_thunk_fn000000000046EB40
l0000000000459B05_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn0000000000459AD0_exit
fn0000000000459AD0_exit:


// fn0000000000459B10
// Return size: 8
define fn0000000000459B10
fn0000000000459B10_entry:
	rsp = fp
	// succ:  l0000000000459B10
l0000000000459B10:
	rcx = rcx + 0x60<64>
	SCZO = cond(rcx)
	// succ:  l0000000000459B14_thunk_fn000000000042AA50
l0000000000459B14_thunk_fn000000000042AA50:
	call fn000000000042AA50 (retsize: 0;)
	return
	// succ:  fn0000000000459B10_exit
fn0000000000459B10_exit:


// fn0000000000459B20
// Return size: 8
define fn0000000000459B20
fn0000000000459B20_entry:
	rsp = fp
	// succ:  l0000000000459B20
l0000000000459B20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0xD8<64>
	rbx = rcx
	rbp = rdx
	r12d = r8d
	r12 = CONVERT(r12d, word32, uint64)
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x1B0<64>:word64] = 0<64>
	Mem0[rbx + 0x1BA<64>:byte] = 0<8>
	Mem0[rbx + 0x1B8<64>:word16] = ax
	rax = 0x0000000000492B58<p64>
	Mem0[rbx + 0x1C0<64>:word64] = 0<64>
	Mem0[rbx + 0x1C8<64>:word64] = 0<64>
	Mem0[rbx + 0x1D0<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492B80<p64>
	Mem0[rbx + 0x1D8<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0xD8<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = 0x0000000000492C58<p64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rsi
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = 0x0000000000492C80<p64>
	Mem0[rbx + 0xD8<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = 0x0000000000496898<p64>
	rdi = rbx + 0x18<64>
	Mem0[rbx:word64] = rax
	rax = 0x00000000004968E8<p64>
	rcx = rdi
	Mem0[rbx + 0xD8<64>:word64] = rax
	rax = 0x00000000004968C0<p64>
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn0000000000458BE0 (retsize: 8;)
	rdx = rdi
	rcx = rsi
	call fn000000000046EAE0 (retsize: 8;)
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rcx = rdi
	call fn00000000004576D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000459C40
	// succ:  l0000000000459C29 l0000000000459C40
l0000000000459C29:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000459B20_exit
l0000000000459C40:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000459B20_exit
fn0000000000459B20_exit:


// fn0000000000459CB0
// Return size: 8
define fn0000000000459CB0
fn0000000000459CB0_entry:
	rsp = fp
	// succ:  l0000000000459CB0
l0000000000459CB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0xD8<64>
	rbx = rcx
	rbp = rdx
	r12d = r8d
	r12 = CONVERT(r12d, word32, uint64)
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x1B0<64>:word64] = 0<64>
	Mem0[rbx + 0x1BA<64>:byte] = 0<8>
	Mem0[rbx + 0x1B8<64>:word16] = ax
	rax = 0x0000000000492B58<p64>
	Mem0[rbx + 0x1C0<64>:word64] = 0<64>
	Mem0[rbx + 0x1C8<64>:word64] = 0<64>
	Mem0[rbx + 0x1D0<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492B80<p64>
	Mem0[rbx + 0x1D8<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0xD8<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = 0x0000000000492C58<p64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rsi
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = 0x0000000000492C80<p64>
	Mem0[rbx + 0xD8<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = 0x0000000000496898<p64>
	rdi = rbx + 0x18<64>
	Mem0[rbx:word64] = rax
	rax = 0x00000000004968E8<p64>
	rcx = rdi
	Mem0[rbx + 0xD8<64>:word64] = rax
	rax = 0x00000000004968C0<p64>
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn0000000000458BE0 (retsize: 8;)
	rdx = rdi
	rcx = rsi
	call fn000000000046EAE0 (retsize: 8;)
	rdx = Mem0[rbp + 0<64>:word64]
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rdi
	call fn00000000004576D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000459DD1
	// succ:  l0000000000459DBA l0000000000459DD1
l0000000000459DBA:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000459CB0_exit
l0000000000459DD1:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000459CB0_exit
fn0000000000459CB0_exit:


// fn0000000000459E40
// Return size: 8
define fn0000000000459E40
fn0000000000459E40_entry:
	rsp = fp
	// succ:  l0000000000459E40
l0000000000459E40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx + 0xD8<64>
	rbx = rcx
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x1B0<64>:word64] = 0<64>
	Mem0[rbx + 0x1BA<64>:byte] = 0<8>
	Mem0[rbx + 0x1B8<64>:word16] = ax
	rax = 0x0000000000492B58<p64>
	Mem0[rbx + 0x1C0<64>:word64] = 0<64>
	Mem0[rbx + 0x1C8<64>:word64] = 0<64>
	Mem0[rbx + 0x1D0<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492B80<p64>
	Mem0[rbx + 0x1D8<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0xD8<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = 0x0000000000492C58<p64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rsi
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = 0x0000000000492C80<p64>
	Mem0[rbx + 0xD8<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = 0x0000000000496898<p64>
	rdi = rbx + 0x18<64>
	Mem0[rbx:word64] = rax
	rax = 0x00000000004968E8<p64>
	rcx = rdi
	Mem0[rbx + 0xD8<64>:word64] = rax
	rax = 0x00000000004968C0<p64>
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn0000000000458BE0 (retsize: 8;)
	rdx = rdi
	rcx = rsi
	call fn000000000046EAE0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000459E40_exit
fn0000000000459E40_exit:


// fn0000000000459F80
// Return size: 8
define fn0000000000459F80
fn0000000000459F80_entry:
	rsp = fp
	// succ:  l0000000000459F80
l0000000000459F80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	rbx = rcx
	rsi = rdx
	rbp = r8
	r12d = r9d
	r12 = CONVERT(r12d, word32, uint64)
	Mem0[rcx:word64] = rax
	rcx = Mem0[rdx + 0x18<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rbx + rdx:word64] = rcx
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EAE0 (retsize: 8;)
	rax = Mem0[rsi + 0x20<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = rbx + 0x10<64> + rax
	rax = Mem0[rsi + 0x28<64>:word64]
	Mem0[rcx:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = Mem0[rsi + 8<64>:word64]
	rdi = rbx + 0x18<64>
	rcx = rdi
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x30<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rax = Mem0[rsi + 0x38<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rsi:word64]
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x40<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rax = Mem0[rsi + 0x48<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn0000000000458BE0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = rbx
	rdx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call fn000000000046EAE0 (retsize: 8;)
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rcx = rdi
	call fn00000000004576D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l000000000045A061
	// succ:  l000000000045A04A l000000000045A061
l000000000045A04A:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000459F80_exit
l000000000045A061:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000459F80_exit
fn0000000000459F80_exit:


// fn000000000045A0C0
// Return size: 8
define fn000000000045A0C0
fn000000000045A0C0_entry:
	rsp = fp
	// succ:  l000000000045A0C0
l000000000045A0C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	rbx = rcx
	rsi = rdx
	rbp = r8
	r12d = r9d
	r12 = CONVERT(r12d, word32, uint64)
	Mem0[rcx:word64] = rax
	rcx = Mem0[rdx + 0x18<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rbx + rdx:word64] = rcx
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EAE0 (retsize: 8;)
	rax = Mem0[rsi + 0x20<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = rbx + 0x10<64> + rax
	rax = Mem0[rsi + 0x28<64>:word64]
	Mem0[rcx:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = Mem0[rsi + 8<64>:word64]
	rdi = rbx + 0x18<64>
	rcx = rdi
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x30<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rax = Mem0[rsi + 0x38<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rsi:word64]
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x40<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rax = Mem0[rsi + 0x48<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn0000000000458BE0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = rbx
	rdx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call fn000000000046EAE0 (retsize: 8;)
	rdx = Mem0[rbp + 0<64>:word64]
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rdi
	call fn00000000004576D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l000000000045A1A2
	// succ:  l000000000045A18B l000000000045A1A2
l000000000045A18B:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045A0C0_exit
l000000000045A1A2:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045A0C0_exit
fn000000000045A0C0_exit:


// fn000000000045A200
// Return size: 8
define fn000000000045A200
fn000000000045A200_entry:
	rsp = fp
	// succ:  l000000000045A200
l000000000045A200:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	rbx = rcx
	rsi = rdx
	Mem0[rcx:word64] = rax
	rcx = Mem0[rdx + 0x18<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rbx + rdx:word64] = rcx
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EAE0 (retsize: 8;)
	rax = Mem0[rsi + 0x20<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = rbx + 0x10<64> + rax
	rax = Mem0[rsi + 0x28<64>:word64]
	Mem0[rcx:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = Mem0[rsi + 8<64>:word64]
	rdi = rbx + 0x18<64>
	rcx = rdi
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x30<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rax = Mem0[rsi + 0x38<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rsi:word64]
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x40<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rax = Mem0[rsi + 0x48<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn0000000000458BE0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = rbx
	rdx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call fn000000000046EAE0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045A200_exit
fn000000000045A200_exit:


// fn000000000045A300
// Return size: 0
define fn000000000045A300
fn000000000045A300_entry:
	rsp = fp
	// succ:  l000000000045A300
l000000000045A300:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496898<p64>
	rbx = rcx
	rcx = rcx + 0x18<64>
	Mem0[rcx - 0x18<64>:word64] = rax
	rax = 0x00000000004968E8<p64>
	Mem0[rcx + 0xC0<64>:word64] = rax
	rax = 0x00000000004968C0<p64>
	Mem0[rcx - 8<64>:word64] = rax
	rax = 0x0000000000496790<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000457800 (retsize: 8;)
	rcx = rbx + 0x60<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rcx = rbx + 0x50<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[0x0000000000491E30<p64>:word64]
	rcx = rbx + 0xD8<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0xD8<64>:word64] = rax
	call fn000000000046D3D0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045A386_thunk_fn0000000000475550
l000000000045A386_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000045A300_exit
fn000000000045A300_exit:


// fn000000000045A390
// Return size: 0
define fn000000000045A390
fn000000000045A390_entry:
	rsp = fp
	// succ:  l000000000045A390
l000000000045A390:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496898<p64>
	rbx = rcx
	rcx = rcx + 0x18<64>
	Mem0[rcx - 0x18<64>:word64] = rax
	rax = 0x00000000004968E8<p64>
	Mem0[rcx + 0xC0<64>:word64] = rax
	rax = 0x00000000004968C0<p64>
	Mem0[rcx - 8<64>:word64] = rax
	rax = 0x0000000000496790<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000457800 (retsize: 8;)
	rcx = rbx + 0x60<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rcx = rbx + 0x50<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[0x0000000000491E30<p64>:word64]
	rcx = rbx + 0xD8<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0xD8<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045A40E_thunk_fn000000000046D3D0
l000000000045A40E_thunk_fn000000000046D3D0:
	call fn000000000046D3D0 (retsize: 0;)
	return
	// succ:  fn000000000045A390_exit
fn000000000045A390_exit:


// fn000000000045A420
// Return size: 8
define fn000000000045A420
fn000000000045A420_entry:
	rsp = fp
	// succ:  l000000000045A420
l000000000045A420:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rsi = rdx
	rbx = rcx
	rcx = rcx + 0x18<64>
	Mem0[rcx - 0x18<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rdx + 0x40<64>:word64]
	Mem0[rcx - 0x18<64> + rax:word64] = rdx
	rax = Mem0[rsi + 0x48<64>:word64]
	Mem0[rcx - 8<64>:word64] = rax
	rax = 0x0000000000496790<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000457800 (retsize: 8;)
	rcx = rbx + 0x60<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rcx = rbx + 0x50<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[rsi + 8<64>:word64]
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x30<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rax = Mem0[rsi + 0x38<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rsi + 0x20<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x28<64>:word64]
	Mem0[rbx + 0x10<64> + rax:word64] = rdx
	rax = Mem0[rsi + 0x10<64>:word64]
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045A420_exit
fn000000000045A420_exit:


// fn000000000045A4D0
// Return size: 0
define fn000000000045A4D0
fn000000000045A4D0_entry:
	rsp = fp
	// succ:  l000000000045A4D0
l000000000045A4D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045A574
	// succ:  l000000000045A4F6 l000000000045A574
l000000000045A4F6:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000045A5A0
	// succ:  l000000000045A518 l000000000045A5A0
l000000000045A518:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = 0xFFFF<64>
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x48<64>:word64] = 0xFFFF<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x60<64>:word64] (retsize: 8;)
	// succ:  l000000000045A56C
l000000000045A56C:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000045A581
	// succ:  l000000000045A574 l000000000045A581
l000000000045A574:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045A4D0_exit
l000000000045A581:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045A4D0_exit
l000000000045A5A0:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045A5C9
	// succ:  l000000000045A5AE l000000000045A5C9
l000000000045A5AE:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v17 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v17
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045A5F9
	// succ:  l000000000045A5C4 l000000000045A5F9
l000000000045A5C4:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045A5C9
l000000000045A5C9:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v18 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045A5FE
	// succ:  l000000000045A5E2 l000000000045A5FE
l000000000045A5E2:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045A56C
	// succ:  l000000000045A56C
l000000000045A5F9:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045A5FE
l000000000045A5FE:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000045A61F_thunk_fn000000000045A620
l000000000045A61F_thunk_fn000000000045A620:
	call fn000000000045A620 (retsize: 0;)
	return
	// succ:  fn000000000045A4D0_exit
fn000000000045A4D0_exit:


// fn000000000045A620
// Return size: 0
define fn000000000045A620
fn000000000045A620_entry:
	rsp = fp
	// succ:  l000000000045A620
l000000000045A620:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045A6C4
	// succ:  l000000000045A646 l000000000045A6C4
l000000000045A646:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000045A6F0
	// succ:  l000000000045A668 l000000000045A6F0
l000000000045A668:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = 0xFFFF<64>
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x48<64>:word64] = 0xFFFF<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x10<64>:word64] (retsize: 8;)
	// succ:  l000000000045A6BC
l000000000045A6BC:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000045A6D1
	// succ:  l000000000045A6C4 l000000000045A6D1
l000000000045A6C4:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045A620_exit
l000000000045A6D1:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045A620_exit
l000000000045A6F0:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045A719
	// succ:  l000000000045A6FE l000000000045A719
l000000000045A6FE:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v17 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v17
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045A749
	// succ:  l000000000045A714 l000000000045A749
l000000000045A714:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045A719
l000000000045A719:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v18 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045A74E
	// succ:  l000000000045A732 l000000000045A74E
l000000000045A732:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045A6BC
	// succ:  l000000000045A6BC
l000000000045A749:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045A74E
l000000000045A74E:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000045A76F_thunk_fn000000000045A770
l000000000045A76F_thunk_fn000000000045A770:
	call fn000000000045A770 (retsize: 0;)
	return
	// succ:  fn000000000045A620_exit
fn000000000045A620_exit:


// fn000000000045A770
// Return size: 0
define fn000000000045A770
fn000000000045A770_entry:
	rsp = fp
	// succ:  l000000000045A770
l000000000045A770:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045A814
	// succ:  l000000000045A796 l000000000045A814
l000000000045A796:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000045A840
	// succ:  l000000000045A7B8 l000000000045A840
l000000000045A7B8:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = 0xFFFF<64>
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x48<64>:word64] = 0xFFFF<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x50<64>:word64] (retsize: 8;)
	// succ:  l000000000045A80C
l000000000045A80C:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000045A821
	// succ:  l000000000045A814 l000000000045A821
l000000000045A814:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045A770_exit
l000000000045A821:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045A770_exit
l000000000045A840:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045A869
	// succ:  l000000000045A84E l000000000045A869
l000000000045A84E:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v17 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v17
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045A899
	// succ:  l000000000045A864 l000000000045A899
l000000000045A864:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045A869
l000000000045A869:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v18 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045A89E
	// succ:  l000000000045A882 l000000000045A89E
l000000000045A882:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045A80C
	// succ:  l000000000045A80C
l000000000045A899:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045A89E
l000000000045A89E:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000045A8BF_thunk_fn000000000045A8C0
l000000000045A8BF_thunk_fn000000000045A8C0:
	call fn000000000045A8C0 (retsize: 0;)
	return
	// succ:  fn000000000045A770_exit
fn000000000045A770_exit:


// fn000000000045A8C0
// Return size: 0
define fn000000000045A8C0
fn000000000045A8C0_entry:
	rsp = fp
	// succ:  l000000000045A8C0
l000000000045A8C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045A964
	// succ:  l000000000045A8E6 l000000000045A964
l000000000045A8E6:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000045A990
	// succ:  l000000000045A908 l000000000045A990
l000000000045A908:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = 0xFFFF<64>
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x48<64>:word64] = 0xFFFF<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x58<64>:word64] (retsize: 8;)
	// succ:  l000000000045A95C
l000000000045A95C:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000045A971
	// succ:  l000000000045A964 l000000000045A971
l000000000045A964:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045A8C0_exit
l000000000045A971:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045A8C0_exit
l000000000045A990:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045A9B9
	// succ:  l000000000045A99E l000000000045A9B9
l000000000045A99E:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v17 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v17
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045A9E9
	// succ:  l000000000045A9B4 l000000000045A9E9
l000000000045A9B4:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045A9B9
l000000000045A9B9:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v18 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045A9EE
	// succ:  l000000000045A9D2 l000000000045A9EE
l000000000045A9D2:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045A95C
	// succ:  l000000000045A95C
l000000000045A9E9:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045A9EE
l000000000045A9EE:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000045AA0F_thunk_fn000000000045AA10
l000000000045AA0F_thunk_fn000000000045AA10:
	call fn000000000045AA10 (retsize: 0;)
	return
	// succ:  fn000000000045A8C0_exit
fn000000000045A8C0_exit:


// fn000000000045AA10
// Return size: 0
define fn000000000045AA10
fn000000000045AA10_entry:
	rsp = fp
	// succ:  l000000000045AA10
l000000000045AA10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045AAB4
	// succ:  l000000000045AA36 l000000000045AAB4
l000000000045AA36:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000045AAE0
	// succ:  l000000000045AA58 l000000000045AAE0
l000000000045AA58:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = 0xFFFF<64>
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x48<64>:word64] = 0xFFFF<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x48<64>:word64] (retsize: 8;)
	// succ:  l000000000045AAAC
l000000000045AAAC:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000045AAC1
	// succ:  l000000000045AAB4 l000000000045AAC1
l000000000045AAB4:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045AA10_exit
l000000000045AAC1:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045AA10_exit
l000000000045AAE0:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045AB09
	// succ:  l000000000045AAEE l000000000045AB09
l000000000045AAEE:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v17 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v17
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045AB39
	// succ:  l000000000045AB04 l000000000045AB39
l000000000045AB04:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045AB09
l000000000045AB09:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v18 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045AB3E
	// succ:  l000000000045AB22 l000000000045AB3E
l000000000045AB22:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045AAAC
	// succ:  l000000000045AAAC
l000000000045AB39:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045AB3E
l000000000045AB3E:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000045AB5F_thunk_fn000000000045AB60
l000000000045AB5F_thunk_fn000000000045AB60:
	call fn000000000045AB60 (retsize: 0;)
	return
	// succ:  fn000000000045AA10_exit
fn000000000045AA10_exit:


// fn000000000045AB60
// Return size: 0
define fn000000000045AB60
fn000000000045AB60_entry:
	rsp = fp
	// succ:  l000000000045AB60
l000000000045AB60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045AC04
	// succ:  l000000000045AB86 l000000000045AC04
l000000000045AB86:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000045AC30
	// succ:  l000000000045ABA8 l000000000045AC30
l000000000045ABA8:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = 0xFFFF<64>
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x48<64>:word64] = 0xFFFF<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x28<64>:word64] (retsize: 8;)
	// succ:  l000000000045ABFC
l000000000045ABFC:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000045AC11
	// succ:  l000000000045AC04 l000000000045AC11
l000000000045AC04:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045AB60_exit
l000000000045AC11:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045AB60_exit
l000000000045AC30:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045AC59
	// succ:  l000000000045AC3E l000000000045AC59
l000000000045AC3E:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v17 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v17
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045AC89
	// succ:  l000000000045AC54 l000000000045AC89
l000000000045AC54:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045AC59
l000000000045AC59:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v18 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045AC8E
	// succ:  l000000000045AC72 l000000000045AC8E
l000000000045AC72:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045ABFC
	// succ:  l000000000045ABFC
l000000000045AC89:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045AC8E
l000000000045AC8E:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000045ACAF_thunk_fn000000000045ACB0
l000000000045ACAF_thunk_fn000000000045ACB0:
	call fn000000000045ACB0 (retsize: 0;)
	return
	// succ:  fn000000000045AB60_exit
fn000000000045AB60_exit:


// fn000000000045ACB0
// Return size: 0
define fn000000000045ACB0
fn000000000045ACB0_entry:
	rsp = fp
	// succ:  l000000000045ACB0
l000000000045ACB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045AD54
	// succ:  l000000000045ACD6 l000000000045AD54
l000000000045ACD6:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000045AD80
	// succ:  l000000000045ACF8 l000000000045AD80
l000000000045ACF8:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = 0xFFFF<64>
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x48<64>:word64] = 0xFFFF<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x18<64>:word64] (retsize: 8;)
	// succ:  l000000000045AD4C
l000000000045AD4C:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000045AD61
	// succ:  l000000000045AD54 l000000000045AD61
l000000000045AD54:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045ACB0_exit
l000000000045AD61:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045ACB0_exit
l000000000045AD80:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045ADA9
	// succ:  l000000000045AD8E l000000000045ADA9
l000000000045AD8E:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v17 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v17
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045ADD9
	// succ:  l000000000045ADA4 l000000000045ADD9
l000000000045ADA4:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045ADA9
l000000000045ADA9:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v18 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045ADDE
	// succ:  l000000000045ADC2 l000000000045ADDE
l000000000045ADC2:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045AD4C
	// succ:  l000000000045AD4C
l000000000045ADD9:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045ADDE
l000000000045ADDE:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000045ADFF_thunk_fn000000000045AE00
l000000000045ADFF_thunk_fn000000000045AE00:
	call fn000000000045AE00 (retsize: 0;)
	return
	// succ:  fn000000000045ACB0_exit
fn000000000045ACB0_exit:


// fn000000000045AE00
// Return size: 0
define fn000000000045AE00
fn000000000045AE00_entry:
	rsp = fp
	// succ:  l000000000045AE00
l000000000045AE00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045AEA4
	// succ:  l000000000045AE26 l000000000045AEA4
l000000000045AE26:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000045AED0
	// succ:  l000000000045AE48 l000000000045AED0
l000000000045AE48:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = 0xFFFF<64>
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x48<64>:word64] = 0xFFFF<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x30<64>:word64] (retsize: 8;)
	// succ:  l000000000045AE9C
l000000000045AE9C:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000045AEB1
	// succ:  l000000000045AEA4 l000000000045AEB1
l000000000045AEA4:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045AE00_exit
l000000000045AEB1:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045AE00_exit
l000000000045AED0:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045AEF9
	// succ:  l000000000045AEDE l000000000045AEF9
l000000000045AEDE:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v17 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v17
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045AF29
	// succ:  l000000000045AEF4 l000000000045AF29
l000000000045AEF4:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045AEF9
l000000000045AEF9:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v18 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045AF2E
	// succ:  l000000000045AF12 l000000000045AF2E
l000000000045AF12:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045AE9C
	// succ:  l000000000045AE9C
l000000000045AF29:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045AF2E
l000000000045AF2E:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000045AF4F_thunk_fn000000000045AF50
l000000000045AF4F_thunk_fn000000000045AF50:
	call fn000000000045AF50 (retsize: 0;)
	return
	// succ:  fn000000000045AE00_exit
fn000000000045AE00_exit:


// fn000000000045AF50
// Return size: 0
define fn000000000045AF50
fn000000000045AF50_entry:
	rsp = fp
	// succ:  l000000000045AF50
l000000000045AF50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045AFF4
	// succ:  l000000000045AF76 l000000000045AFF4
l000000000045AF76:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000045B020
	// succ:  l000000000045AF98 l000000000045B020
l000000000045AF98:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = 0xFFFF<64>
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x48<64>:word64] = 0xFFFF<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x20<64>:word64] (retsize: 8;)
	// succ:  l000000000045AFEC
l000000000045AFEC:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000045B001
	// succ:  l000000000045AFF4 l000000000045B001
l000000000045AFF4:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045AF50_exit
l000000000045B001:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045AF50_exit
l000000000045B020:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045B049
	// succ:  l000000000045B02E l000000000045B049
l000000000045B02E:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v17 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v17
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045B079
	// succ:  l000000000045B044 l000000000045B079
l000000000045B044:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045B049
l000000000045B049:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v18 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045B07E
	// succ:  l000000000045B062 l000000000045B07E
l000000000045B062:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045AFEC
	// succ:  l000000000045AFEC
l000000000045B079:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045B07E
l000000000045B07E:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000045B09F_thunk_fn000000000045B0A0
l000000000045B09F_thunk_fn000000000045B0A0:
	call fn000000000045B0A0 (retsize: 0;)
	return
	// succ:  fn000000000045AF50_exit
fn000000000045AF50_exit:


// fn000000000045B0A0
// Return size: 0
define fn000000000045B0A0
fn000000000045B0A0_entry:
	rsp = fp
	// succ:  l000000000045B0A0
l000000000045B0A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045B144
	// succ:  l000000000045B0C6 l000000000045B144
l000000000045B0C6:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000045B170
	// succ:  l000000000045B0E8 l000000000045B170
l000000000045B0E8:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = 0xFFFF<64>
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x48<64>:word64] = 0xFFFF<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x38<64>:word64] (retsize: 8;)
	// succ:  l000000000045B13C
l000000000045B13C:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000045B151
	// succ:  l000000000045B144 l000000000045B151
l000000000045B144:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045B0A0_exit
l000000000045B151:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045B0A0_exit
l000000000045B170:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045B199
	// succ:  l000000000045B17E l000000000045B199
l000000000045B17E:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v17 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v17
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045B1C9
	// succ:  l000000000045B194 l000000000045B1C9
l000000000045B194:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045B199
l000000000045B199:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v18 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045B1CE
	// succ:  l000000000045B1B2 l000000000045B1CE
l000000000045B1B2:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045B13C
	// succ:  l000000000045B13C
l000000000045B1C9:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045B1CE
l000000000045B1CE:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000045B1EF_thunk_fn000000000045B1F0
l000000000045B1EF_thunk_fn000000000045B1F0:
	call fn000000000045B1F0 (retsize: 0;)
	return
	// succ:  fn000000000045B0A0_exit
fn000000000045B0A0_exit:


// fn000000000045B1F0
// Return size: 0
define fn000000000045B1F0
fn000000000045B1F0_entry:
	rsp = fp
	// succ:  l000000000045B1F0
l000000000045B1F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x7B<64>
	rsi = rdx
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x7B<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045B294
	// succ:  l000000000045B216 l000000000045B294
l000000000045B216:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x7C<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000045B2C0
	// succ:  l000000000045B238 l000000000045B2C0
l000000000045B238:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = 0xFFFF<64>
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x48<64>:word64] = 0xFFFF<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	r10 = Mem0[rax:word64]
	rdx = rsp + 0x7C<64>
	Mem0[rsp + 0x20<64>:word64] = r8
	Mem0[rsp + 0x30<64>:word64] = rsi
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x40<64>:word64] (retsize: 8;)
	// succ:  l000000000045B28C
l000000000045B28C:
	edx = Mem0[rsp + 0x7C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000045B2A1
	// succ:  l000000000045B294 l000000000045B2A1
l000000000045B294:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045B1F0_exit
l000000000045B2A1:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045B1F0_exit
l000000000045B2C0:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045B2E9
	// succ:  l000000000045B2CE l000000000045B2E9
l000000000045B2CE:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v17 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v17
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045B319
	// succ:  l000000000045B2E4 l000000000045B319
l000000000045B2E4:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045B2E9
l000000000045B2E9:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v18 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045B31E
	// succ:  l000000000045B302 l000000000045B31E
l000000000045B302:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045B28C
	// succ:  l000000000045B28C
l000000000045B319:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045B31E
l000000000045B31E:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000045B33F_thunk_fn000000000045B340
l000000000045B33F_thunk_fn000000000045B340:
	call fn000000000045B340 (retsize: 0;)
	return
	// succ:  fn000000000045B1F0_exit
fn000000000045B1F0_exit:


// fn000000000045B340
// Return size: 8
define fn000000000045B340
fn000000000045B340_entry:
	rsp = fp
	// succ:  l000000000045B340
l000000000045B340:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rsi = rdx
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rcx + 0xF0<64> + rax:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045B38A
	// succ:  l000000000045B360 l000000000045B38A
l000000000045B360:
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x28<64>:word64] = r8
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9d = CONVERT(ax, word16, word32)
	r9 = CONVERT(r9d, word32, uint64)
	rdx = rsi
	rcx = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045B385_thunk_fn000000000045B390
l000000000045B385_thunk_fn000000000045B390:
	call fn000000000045B390 (retsize: 0;)
	return
	// succ:  fn000000000045B340_exit
l000000000045B38A:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000045B38F_thunk_fn000000000045B390
l000000000045B38F_thunk_fn000000000045B390:
	call fn000000000045B390 (retsize: 0;)
	return
	// succ:  fn000000000045B340_exit
fn000000000045B340_exit:


// fn000000000045B390
// Return size: 8
define fn000000000045B390
fn000000000045B390_entry:
	rsp = fp
	// succ:  l000000000045B390
l000000000045B390:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rsi = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x2F<64>
	rdi = rdx
	r12 = r8
	rdx = rsi
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	ebp = r9d
	rbp = CONVERT(ebp, word32, uint64)
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045B4B0
	// succ:  l000000000045B3CC l000000000045B4B0
l000000000045B3CC:
	rax = Mem0[rsi:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rbx = Mem0[rsi + 0xE8<64> + rax:word64]
	rax = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbx + 0x18<64>:word64])
	branch Test(ULT,C) l000000000045B427
	// succ:  l000000000045B3E5 l000000000045B427
l000000000045B3E5:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000045B42A
	// succ:  l000000000045B42A
l000000000045B3F0:
	SCZO = cond(rdx - r12)
	branch Test(GE,SO) l000000000045B446
	// succ:  l000000000045B3F5 l000000000045B446
l000000000045B3F5:
	rdi = rdi + 2<64>
	SCZO = cond(rdi)
	r10 = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(r10 - Mem0[rbx + 0x18<64>:word64])
	Mem0[rdi - 2<64>:word16] = ax
	Mem0[rsi + 8<64>:word64] = rdx
	branch Test(UGE,C) l000000000045B483
	// succ:  l000000000045B40B l000000000045B483
l000000000045B40B:
	eax = CONVERT(Mem0[r10:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r10 = r10 + 2<64>
	SCZO = cond(r10)
	Mem0[rbx + 0x10<64>:word64] = r10
	// succ:  l000000000045B417
l000000000045B417:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000045B42A
	// succ:  l000000000045B41D l000000000045B42A
l000000000045B41D:
	rax = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045B3E5
	// succ:  l000000000045B427 l000000000045B3E5
l000000000045B427:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000045B42A
l000000000045B42A:
	SCZO = cond(ax - 0xFFFF<16>)
	rcx = Mem0[rsi + 8<64>:word64]
	r9b = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(bp - ax)
	r8b = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(r9b & r8b)
	C = false
	rdx = rcx + 1<64>
	branch Test(NE,Z) l000000000045B3F0
	// succ:  l000000000045B446 l000000000045B3F0
l000000000045B446:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(ax - 0xFFFF<16>)
	dl = CONVERT(Test(EQ,Z), bool, int8)
	edx = edx + edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	// succ:  l000000000045B451
l000000000045B451:
	SZO = cond(r12 & r12)
	C = false
	branch Test(LE,SZO) l000000000045B45B
	// succ:  l000000000045B456 l000000000045B45B
l000000000045B456:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rdi:word16] = ax
	// succ:  l000000000045B45B
l000000000045B45B:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000045B4C0
	// succ:  l000000000045B460 l000000000045B4C0
l000000000045B460:
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l000000000045B463
l000000000045B463:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045B390_exit
l000000000045B483:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l000000000045B417
	// succ:  l000000000045B417
l000000000045B4B0:
	rcx = Mem0[rsi + 8<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l000000000045B451
	// succ:  l000000000045B451
l000000000045B4C0:
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000045B463
	// succ:  l000000000045B4C4 l000000000045B463
l000000000045B4C4:
	rax = rsi
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045B390_exit
fn000000000045B390_exit:


// fn000000000045B530
// Return size: 8
define fn000000000045B530
fn000000000045B530_entry:
	rsp = fp
	// succ:  l000000000045B530
l000000000045B530:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rsi = rdx
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rcx + 0xF0<64> + rax:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045B570
	// succ:  l000000000045B550 l000000000045B570
l000000000045B550:
	rax = Mem0[rcx:word64]
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rdx = rsi
	r8d = CONVERT(ax, word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045B56B_thunk_fn000000000045B580
l000000000045B56B_thunk_fn000000000045B580:
	call fn000000000045B580 (retsize: 0;)
	return
	// succ:  fn000000000045B530_exit
l000000000045B570:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000045B57F_thunk_fn000000000045B580
l000000000045B57F_thunk_fn000000000045B580:
	call fn000000000045B580 (retsize: 0;)
	return
	// succ:  fn000000000045B530_exit
fn000000000045B530_exit:


// fn000000000045B580
// Return size: 8
define fn000000000045B580
fn000000000045B580_entry:
	rsp = fp
	// succ:  l000000000045B580
l000000000045B580:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rsi = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x2F<64>
	rdi = rdx
	ebp = r8d
	rbp = CONVERT(ebp, word32, uint64)
	rdx = rsi
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045B638
	// succ:  l000000000045B5B7 l000000000045B638
l000000000045B5B7:
	rax = Mem0[rsi:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rbx = Mem0[rsi + 0xE8<64> + rax:word64]
	rax = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbx + 0x18<64>:word64])
	branch Test(ULT,C) l000000000045B629
	// succ:  l000000000045B5D0 l000000000045B629
l000000000045B5D0:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000045B632
	// succ:  l000000000045B5DF l000000000045B632
l000000000045B5DF:
	// succ:  l000000000045B5E0
l000000000045B5E0:
	SCZO = cond(ax - bp)
	branch Test(EQ,Z) l000000000045B632
	// succ:  l000000000045B5E5 l000000000045B632
l000000000045B5E5:
	rdx = Mem0[rdi + 0x28<64>:word64]
	SCZO = cond(rdx - Mem0[rdi + 0x30<64>:word64])
	branch Test(UGE,C) l000000000045B670
	// succ:  l000000000045B5F3 l000000000045B670
l000000000045B5F3:
	Mem0[rdx:word16] = ax
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rdi + 0x28<64>:word64] = rdx
	// succ:  l000000000045B5FE
l000000000045B5FE:
	v18 = Mem0[rsi + 8<64>:word64] + 1<64>
	Mem0[rsi + 8<64>:word64] = v18
	SCZO = cond(v18)
	r9 = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(r9 - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045B662
	// succ:  l000000000045B60D l000000000045B662
l000000000045B60D:
	eax = CONVERT(Mem0[r9:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r9 = r9 + 2<64>
	SCZO = cond(r9)
	Mem0[rbx + 0x10<64>:word64] = r9
	// succ:  l000000000045B619
l000000000045B619:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000045B62C
	// succ:  l000000000045B61F l000000000045B62C
l000000000045B61F:
	rax = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045B5D0
	// succ:  l000000000045B629 l000000000045B5D0
l000000000045B629:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000045B62C
l000000000045B62C:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(NE,Z) l000000000045B5E0
	// succ:  l000000000045B632 l000000000045B5E0
l000000000045B632:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000045B690
	// succ:  l000000000045B638 l000000000045B690
l000000000045B638:
	SCZO = cond(Mem0[rsi + 8<64>:word64] - 0<64>)
	branch Test(NE,Z) l000000000045B656
	// succ:  l000000000045B63F l000000000045B656
l000000000045B63F:
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000045B644
l000000000045B644:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	// succ:  l000000000045B656
l000000000045B656:
	rax = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045B580_exit
l000000000045B662:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l000000000045B619
	// succ:  l000000000045B619
l000000000045B670:
	r8 = Mem0[rdi:word64]
	edx = CONVERT(ax, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call Mem0[r8 + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000045B638
	// succ:  l000000000045B683 l000000000045B638
l000000000045B683:
	goto l000000000045B5FE
	// succ:  l000000000045B5FE
l000000000045B690:
	SCZO = cond(Mem0[rsi + 8<64>:word64] - 1<64>)
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx & 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	goto l000000000045B644
	// succ:  l000000000045B644
fn000000000045B580_exit:


// fn000000000045B720
// Return size: 8
define fn000000000045B720
fn000000000045B720_entry:
	rsp = fp
	// succ:  l000000000045B720
l000000000045B720:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x2F<64>
	rsi = rdx
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000045B780
	// succ:  l000000000045B74E l000000000045B780
l000000000045B74E:
	rax = Mem0[rbx + 8<64>:word64]
	SZO = cond(rax & rax)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l000000000045B76E
	// succ:  l000000000045B75C l000000000045B76E
l000000000045B75C:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	// succ:  l000000000045B76E
l000000000045B76E:
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045B720_exit
l000000000045B780:
	rax = Mem0[rbx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	r8 = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(r8 - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045B7D0
	// succ:  l000000000045B799 l000000000045B7D0
l000000000045B799:
	eax = CONVERT(Mem0[r8:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r8 = r8 + 2<64>
	SCZO = cond(r8)
	Mem0[rcx + 0x10<64>:word64] = r8
	// succ:  l000000000045B7A5
l000000000045B7A5:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000045B7C0
	// succ:  l000000000045B7AB l000000000045B7C0
l000000000045B7AB:
	Mem0[rbx + 8<64>:word64] = 1<64>
	Mem0[rsi:word16] = ax
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045B720_exit
l000000000045B7C0:
	SCZO = cond(Mem0[rbx + 8<64>:word64] - 1<64>)
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx & 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	goto l000000000045B75C
	// succ:  l000000000045B75C
l000000000045B7D0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l000000000045B7A5
	// succ:  l000000000045B7A5
fn000000000045B720_exit:


// fn000000000045B850
// Return size: 8
define fn000000000045B850
fn000000000045B850_entry:
	rsp = fp
	// succ:  l000000000045B850
l000000000045B850:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x2F<64>
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000045B8B0
	// succ:  l000000000045B87A l000000000045B8B0
l000000000045B87A:
	SCZO = cond(Mem0[rbx + 8<64>:word64] - 0<64>)
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l000000000045B8A3
	// succ:  l000000000045B886 l000000000045B8A3
l000000000045B886:
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = edx | Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx
	call fn000000000046EB40 (retsize: 8;)
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045B850_exit
l000000000045B8A3:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045B850_exit
l000000000045B8B0:
	rax = Mem0[rbx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045B900
	// succ:  l000000000045B8C9 l000000000045B900
l000000000045B8C9:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rcx + 0x10<64>:word64] = rdx
	// succ:  l000000000045B8D4
l000000000045B8D4:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000045B8F0
	// succ:  l000000000045B8DA l000000000045B8F0
l000000000045B8DA:
	Mem0[rbx + 8<64>:word64] = 1<64>
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045B850_exit
l000000000045B8F0:
	SCZO = cond(Mem0[rbx + 8<64>:word64] - 1<64>)
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx & 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	goto l000000000045B886
	// succ:  l000000000045B886
l000000000045B900:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l000000000045B8D4
	// succ:  l000000000045B8D4
fn000000000045B850_exit:


// fn000000000045B980
// Return size: 8
define fn000000000045B980
fn000000000045B980_entry:
	rsp = fp
	// succ:  l000000000045B980
l000000000045B980:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x3F<64>
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x3F<64>:byte] - 0<8>)
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l000000000045B9B5
	// succ:  l000000000045B9AF l000000000045B9B5
l000000000045B9AF:
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045B980_exit
l000000000045B9B5:
	rax = Mem0[rbx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045BA00
	// succ:  l000000000045B9CE l000000000045BA00
l000000000045B9CE:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000045B9D1
l000000000045B9D1:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(NE,Z) l000000000045B9AF
	// succ:  l000000000045B9D7 l000000000045B9AF
l000000000045B9D7:
	rdx = Mem0[rbx:word64]
	Mem0[rsp + 0x2C<64>:word32] = eax
	rbx = rbx + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	eax = Mem0[rsp + 0x2C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l000000000045B9AF
	// succ:  l000000000045B9AF
l000000000045BA00:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000045B9D1
	// succ:  l000000000045B9D1
fn000000000045B980_exit:


// fn000000000045BA80
// Return size: 8
define fn000000000045BA80
fn000000000045BA80_entry:
	rsp = fp
	// succ:  l000000000045BA80
l000000000045BA80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x2F<64>
	rdi = rdx
	rsi = r8
	rdx = rbx
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000045BAC0
	// succ:  l000000000045BAB2 l000000000045BAC0
l000000000045BAB2:
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045BA80_exit
l000000000045BAC0:
	rax = Mem0[rbx:word64]
	r8 = rsi
	rdx = rdi
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x40<64>:word64] (retsize: 8;)
	SCZO = cond(rsi - rax)
	Mem0[rbx + 8<64>:word64] = rax
	branch Test(EQ,Z) l000000000045BAB2
	// succ:  l000000000045BAE4 l000000000045BAB2
l000000000045BAE4:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 6<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045BA80_exit
fn000000000045BA80_exit:


// fn000000000045BB80
// Return size: 8
define fn000000000045BB80
fn000000000045BB80_entry:
	rsp = fp
	// succ:  l000000000045BB80
l000000000045BB80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rbx = rcx
	rcx = rsp + 0x3F<64>
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x3F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045BBD0
	// succ:  l000000000045BBA2 l000000000045BBD0
l000000000045BBA2:
	rax = Mem0[rbx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045BBD0
	// succ:  l000000000045BBB6 l000000000045BBD0
l000000000045BBB6:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000045BBE0
	// succ:  l000000000045BBC1 l000000000045BBE0
l000000000045BBC1:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045BB80_exit
l000000000045BBD0:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045BB80_exit
l000000000045BBE0:
	rdx = Mem0[rbx:word64]
	Mem0[rsp + 0x2C<64>:word32] = eax
	rbx = rbx + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	eax = Mem0[rsp + 0x2C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045BB80_exit
fn000000000045BB80_exit:


// fn000000000045BC80
// Return size: 8
define fn000000000045BC80
fn000000000045BC80_entry:
	rsp = fp
	// succ:  l000000000045BC80
l000000000045BC80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x50<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rsi = Mem0[rdx:word64]
	rbx = rcx
	rdi = Mem0[rdx + 8<64>:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xFFFFFFFD<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rcx = rsp + 0x4F<64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x4F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045BCCD
	// succ:  l000000000045BCBD l000000000045BCCD
l000000000045BCBD:
	rax = Mem0[rbx:word64]
	rdx = rbx
	rdx = rdx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx)
	SZO = cond(Mem0[rdx + 0x20<64>:byte] & 5<8>)
	C = false
	branch Test(EQ,Z) l000000000045BCE0
	// succ:  l000000000045BCCD l000000000045BCE0
l000000000045BCCD:
	rax = rbx
	rsp = rsp + 0x50<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045BC80_exit
l000000000045BCE0:
	rdx = Mem0[rdx + 0xE8<64>:word64]
	rcx = rsp + 0x30<64>
	Mem0[rsp + 0x20<64>:word64] = rsi
	Mem0[rsp + 0x28<64>:word64] = rdi
	r9d = 8<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8 = rsp + 0x20<64>
	rax = Mem0[rdx:word64]
	call Mem0[rax + 0x28<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x30<64>:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l000000000045BCCD
	// succ:  l000000000045BD0F l000000000045BCCD
l000000000045BD0F:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	goto l000000000045BCCD
	// succ:  l000000000045BCCD
fn000000000045BC80_exit:


// fn000000000045BDA0
// Return size: 8
define fn000000000045BDA0
fn000000000045BDA0_entry:
	rsp = fp
	// succ:  l000000000045BDA0
l000000000045BDA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x50<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rsi = rdx
	edi = r8d
	rdi = CONVERT(edi, word32, uint64)
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xFFFFFFFD<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rcx = rsp + 0x4F<64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x4F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045BDEC
	// succ:  l000000000045BDDC l000000000045BDEC
l000000000045BDDC:
	rax = Mem0[rbx:word64]
	rdx = rbx
	rdx = rdx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx)
	SZO = cond(Mem0[rdx + 0x20<64>:byte] & 5<8>)
	C = false
	branch Test(EQ,Z) l000000000045BE00
	// succ:  l000000000045BDEC l000000000045BE00
l000000000045BDEC:
	rax = rbx
	rsp = rsp + 0x50<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045BDA0_exit
l000000000045BE00:
	rdx = Mem0[rdx + 0xE8<64>:word64]
	rcx = rsp + 0x30<64>
	r9d = edi
	r9 = CONVERT(r9d, word32, uint64)
	r8 = rsi
	rax = Mem0[rdx:word64]
	Mem0[rsp + 0x20<64>:word32] = 8<32>
	call Mem0[rax + 0x20<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x30<64>:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l000000000045BDEC
	// succ:  l000000000045BE28 l000000000045BDEC
l000000000045BE28:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	goto l000000000045BDEC
	// succ:  l000000000045BDEC
fn000000000045BDA0_exit:


// fn000000000045BEC0
// Return size: 8
define fn000000000045BEC0
fn000000000045BEC0_entry:
	rsp = fp
	// succ:  l000000000045BEC0
l000000000045BEC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rcx + 8<64>:word32] = 0<32>
	rbx = rcx
	rcx = rsp + 0x4F<64>
	rsi = rdx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x4F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045BF01
	// succ:  l000000000045BEF1 l000000000045BF01
l000000000045BEF1:
	rax = Mem0[rsi:word64]
	rdx = rsi
	rdx = rdx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx)
	SZO = cond(Mem0[rdx + 0x20<64>:byte] & 5<8>)
	C = false
	branch Test(EQ,Z) l000000000045BF10
	// succ:  l000000000045BF01 l000000000045BF10
l000000000045BF01:
	rax = rbx
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045BEC0_exit
l000000000045BF10:
	rdx = Mem0[rdx + 0xE8<64>:word64]
	rcx = rsp + 0x30<64>
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rax = Mem0[rdx:word64]
	Mem0[rsp + 0x20<64>:word32] = 8<32>
	call Mem0[rax + 0x20<64>:word64] (retsize: 8;)
	rax = Mem0[rsp + 0x30<64>:word64]
	Mem0[rbx:word64] = rax
	eax = Mem0[rsp + 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 8<64>:word32] = eax
	rax = rbx
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045BEC0_exit
fn000000000045BEC0_exit:


// fn000000000045BFC0
// Return size: 8
define fn000000000045BFC0
fn000000000045BFC0_entry:
	rsp = fp
	// succ:  l000000000045BFC0
l000000000045BFC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xFFFFFFFD<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rcx = rsp + 0x2F<64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045C02E
	// succ:  l000000000045BFFC l000000000045C02E
l000000000045BFFC:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	rax = Mem0[rcx + 0xE8<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000045C04A
	// succ:  l000000000045C012 l000000000045C04A
l000000000045C012:
	rdx = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(Mem0[rax + 8<64>:word64] - rdx)
	branch Test(UGE,C) l000000000045C060
	// succ:  l000000000045C01C l000000000045C060
l000000000045C01C:
	rcx = rdx - 2<64>
	Mem0[rax + 0x10<64>:word64] = rcx
	eax = CONVERT(Mem0[rdx - 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000045C028
l000000000045C028:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000045C040
	// succ:  l000000000045C02E l000000000045C040
l000000000045C02E:
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045BFC0_exit
l000000000045C040:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	// succ:  l000000000045C04A
l000000000045C04A:
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045BFC0_exit
l000000000045C060:
	r8 = Mem0[rax:word64]
	edx = 0xFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	call Mem0[r8 + 0x58<64>:word64] (retsize: 8;)
	goto l000000000045C028
	// succ:  l000000000045C028
fn000000000045BFC0_exit:


// fn000000000045C0F0
// Return size: 8
define fn000000000045C0F0
fn000000000045C0F0_entry:
	rsp = fp
	// succ:  l000000000045C0F0
l000000000045C0F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x2F<64>
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000045C123
	// succ:  l000000000045C11A l000000000045C123
l000000000045C11A:
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045C0F0_exit
l000000000045C123:
	rax = Mem0[rbx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045C180
	// succ:  l000000000045C13C l000000000045C180
l000000000045C13C:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rcx + 0x10<64>:word64] = rdx
	// succ:  l000000000045C147
l000000000045C147:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000045C160
	// succ:  l000000000045C14D l000000000045C160
l000000000045C14D:
	rax = rbx
	Mem0[rbx + 8<64>:word64] = 1<64>
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045C0F0_exit
l000000000045C160:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045C0F0_exit
l000000000045C180:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l000000000045C147
	// succ:  l000000000045C147
fn000000000045C0F0_exit:


// fn000000000045C200
// Return size: 8
define fn000000000045C200
fn000000000045C200_entry:
	rsp = fp
	// succ:  l000000000045C200
l000000000045C200:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	SCZO = cond(rdx - 1<64>)
	rdi = rcx
	rbx = rdx
	branch Test(EQ,Z) l000000000045C3C6
	// succ:  l000000000045C21A l000000000045C3C6
l000000000045C21A:
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x2F<64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rdi
	call fn000000000045C740 (retsize: 8;)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(LE,SZO) l000000000045C330
	// succ:  l000000000045C23E l000000000045C330
l000000000045C23E:
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045C330
	// succ:  l000000000045C249 l000000000045C330
l000000000045C249:
	rax = Mem0[rdi:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rsi = Mem0[rdi + 0xE8<64> + rax:word64]
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045C3E1
	// succ:  l000000000045C266 l000000000045C3E1
l000000000045C266:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000045C269
l000000000045C269:
	r8 = Mem0[rdi + 8<64>:word64]
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	r12 = 0x7FFFFFFFFFFFFFFF<64>
	// succ:  l000000000045C280
l000000000045C280:
	SCZO = cond(ax - 0xFFFF<16>)
	dl = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(r8 - rbx)
	branch Test(GE,SO) l000000000045C2E3
	// succ:  l000000000045C28C l000000000045C2E3
l000000000045C28C:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l000000000045C340
	// succ:  l000000000045C294 l000000000045C340
l000000000045C294:
	rcx = Mem0[rsi + 0x18<64>:word64]
	rdx = Mem0[rsi + 0x10<64>:word64]
	r10 = rbx
	r10 = r10 - r8
	SCZO = cond(r10)
	r9 = rcx
	r9 = r9 - rdx
	SCZO = cond(r9)
	r9 = r9 >> 1<64>
	SCZO = cond(r9)
	SCZO = cond(r10 - r9)
	branch Test(GT,SZO) l000000000045C2B2
	// succ:  l000000000045C2AE_1 l000000000045C2B2
l000000000045C2AE_1:
	r9 = r10
	// succ:  l000000000045C2B2
l000000000045C2B2:
	SCZO = cond(r9 - 1<64>)
	branch Test(LE,SZO) l000000000045C380
	// succ:  l000000000045C2BC l000000000045C380
l000000000045C2BC:
	rax = rdx + r9 * 2<64>
	r8 = r8 + r9
	SCZO = cond(r8)
	SCZO = cond(rcx - rax)
	Mem0[rsi + 0x10<64>:word64] = rax
	Mem0[rdi + 8<64>:word64] = r8
	branch Test(ULE,CZ) l000000000045C3B4
	// succ:  l000000000045C2D4 l000000000045C3B4
l000000000045C2D4:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 0xFFFF<16>)
	dl = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(r8 - rbx)
	branch Test(LT,SO) l000000000045C28C
	// succ:  l000000000045C2E3 l000000000045C28C
l000000000045C2E3:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l000000000045C340
	// succ:  l000000000045C2E7 l000000000045C340
l000000000045C2E7:
	SCZO = cond(rbx - r12)
	branch Test(NE,Z) l000000000045C340
	// succ:  l000000000045C2EC l000000000045C340
l000000000045C2EC:
	rcx = 0x8000000000000000<64>
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	Mem0[rdi + 8<64>:word64] = rcx
	r8 = rcx
	goto l000000000045C280
	// succ:  l000000000045C280
l000000000045C330:
	rax = rdi
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045C200_exit
l000000000045C340:
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l000000000045C353
	// succ:  l000000000045C345 l000000000045C353
l000000000045C345:
	rsi = 0x7FFFFFFFFFFFFFFF<64>
	Mem0[rdi + 8<64>:word64] = rsi
	// succ:  l000000000045C353
l000000000045C353:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(NE,Z) l000000000045C330
	// succ:  l000000000045C359 l000000000045C330
l000000000045C359:
	rax = Mem0[rdi:word64]
	rcx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rdi
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045C200_exit
l000000000045C380:
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	SCZO = cond(rcx - rdx)
	Mem0[rdi + 8<64>:word64] = r8
	branch Test(ULE,CZ) l000000000045C3D6
	// succ:  l000000000045C38D l000000000045C3D6
l000000000045C38D:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rsi + 0x10<64>:word64] = rdx
	// succ:  l000000000045C398
l000000000045C398:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000045C3BD
	// succ:  l000000000045C39E l000000000045C3BD
l000000000045C39E:
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045C3B4
	// succ:  l000000000045C3A8 l000000000045C3B4
l000000000045C3A8:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r8 = Mem0[rdi + 8<64>:word64]
	goto l000000000045C280
	// succ:  l000000000045C280
l000000000045C3B4:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	// succ:  l000000000045C3BD
l000000000045C3BD:
	r8 = Mem0[rdi + 8<64>:word64]
	goto l000000000045C280
	// succ:  l000000000045C280
l000000000045C3C6:
	call fn000000000045C0F0 (retsize: 8;)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045C200_exit
l000000000045C3D6:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l000000000045C398
	// succ:  l000000000045C398
l000000000045C3E1:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000045C269
	// succ:  l000000000045C269
fn000000000045C200_exit:


// fn000000000045C450
// Return size: 8
define fn000000000045C450
fn000000000045C450_entry:
	rsp = fp
	// succ:  l000000000045C450
l000000000045C450:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	SCZO = cond(r8w - 0xFFFF<16>)
	rbp = rcx
	rsi = rdx
	r14d = r8d
	r14 = CONVERT(r14d, word32, uint64)
	ebx = r8d
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(EQ,Z) l000000000045C662
	// succ:  l000000000045C475 l000000000045C662
l000000000045C475:
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x2F<64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	call fn000000000045C740 (retsize: 8;)
	SZO = cond(rsi & rsi)
	C = false
	branch Test(LE,SZO) l000000000045C5C4
	// succ:  l000000000045C499 l000000000045C5C4
l000000000045C499:
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045C5C4
	// succ:  l000000000045C4A4 l000000000045C5C4
l000000000045C4A4:
	rax = Mem0[rbp + 0<64>:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rdi = Mem0[rbp + 0xE8<64> + rax:word64]
	rax = Mem0[rdi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rdi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045C6A9
	// succ:  l000000000045C4C2 l000000000045C6A9
l000000000045C4C2:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000045C4C5
l000000000045C4C5:
	rdx = Mem0[rbp + 8<64>:word64]
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	r13 = 0x7FFFFFFFFFFFFFFF<64>
	// succ:  l000000000045C4E0
l000000000045C4E0:
	SCZO = cond(bx - ax)
	r8b = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(ax - 0xFFFF<16>)
	cl = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(r8b & cl)
	C = false
	branch Test(EQ,Z) l000000000045C570
	// succ:  l000000000045C4F3 l000000000045C570
l000000000045C4F3:
	SCZO = cond(rsi - rdx)
	branch Test(LE,SZO) l000000000045C5E0
	// succ:  l000000000045C4FC l000000000045C5E0
l000000000045C4FC:
	r10 = Mem0[rdi + 0x18<64>:word64]
	r8 = Mem0[rdi + 0x10<64>:word64]
	rax = rsi
	rax = rax - rdx
	SCZO = cond(rax)
	r9 = r10
	r9 = r9 - r8
	SCZO = cond(r9)
	r9 = r9 >> 1<64>
	SCZO = cond(r9)
	SCZO = cond(rax - r9)
	rcx = r9
	branch Test(GT,SZO) l000000000045C51D
	// succ:  l000000000045C519_1 l000000000045C51D
l000000000045C519_1:
	rcx = rax
	// succ:  l000000000045C51D
l000000000045C51D:
	SCZO = cond(rcx - 1<64>)
	branch Test(LE,SZO) l000000000045C611
	// succ:  l000000000045C527 l000000000045C611
l000000000045C527:
	SZO = cond(r8 & r8)
	C = false
	rax = rcx
	branch Test(EQ,Z) l000000000045C549
	// succ:  l000000000045C52F l000000000045C549
l000000000045C52F:
	r9 = r8
	// succ:  l000000000045C532
l000000000045C532:
	SCZO = cond(bx - Mem0[r9:word16])
	branch Test(EQ,Z) l000000000045C600
	// succ:  l000000000045C53C l000000000045C600
l000000000045C53C:
	r9 = r9 + 2<64>
	SCZO = cond(r9)
	rax = rax - 1<64>
	SCZO = cond(rax)
	branch Test(NE,Z) l000000000045C532
	// succ:  l000000000045C546 l000000000045C532
l000000000045C546:
	rax = rcx
	// succ:  l000000000045C549
l000000000045C549:
	rax = r8 + rax * 2<64>
	rdx = rdx + rcx
	SCZO = cond(rdx)
	SCZO = cond(r10 - rax)
	Mem0[rdi + 0x10<64>:word64] = rax
	Mem0[rbp + 8<64>:word64] = rdx
	branch Test(ULE,CZ) l000000000045C650
	// succ:  l000000000045C561 l000000000045C650
l000000000045C561:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000045C4E0
	// succ:  l000000000045C4E0
l000000000045C570:
	SZO = cond(r12b & r12b)
	C = false
	branch Test(EQ,Z) l000000000045C583
	// succ:  l000000000045C575 l000000000045C583
l000000000045C575:
	rsi = 0x7FFFFFFFFFFFFFFF<64>
	Mem0[rbp + 8<64>:word64] = rsi
	// succ:  l000000000045C583
l000000000045C583:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000045C681
	// succ:  l000000000045C58D l000000000045C681
l000000000045C58D:
	SCZO = cond(r14w - ax)
	branch Test(NE,Z) l000000000045C5C4
	// succ:  l000000000045C593 l000000000045C5C4
l000000000045C593:
	rax = Mem0[rbp + 8<64>:word64]
	rdx = 0x7FFFFFFFFFFFFFFF<64>
	SCZO = cond(rax - rdx)
	branch Test(EQ,Z) l000000000045C5AE
	// succ:  l000000000045C5A6 l000000000045C5AE
l000000000045C5A6:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbp + 8<64>:word64] = rax
	// succ:  l000000000045C5AE
l000000000045C5AE:
	rax = Mem0[rdi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rdi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045C6B7
	// succ:  l000000000045C5BC l000000000045C6B7
l000000000045C5BC:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rdi + 0x10<64>:word64] = rax
	// succ:  l000000000045C5C4
l000000000045C5C4:
	rax = rbp
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045C450_exit
l000000000045C5E0:
	SCZO = cond(rsi - r13)
	branch Test(NE,Z) l000000000045C570
	// succ:  l000000000045C5E5 l000000000045C570
l000000000045C5E5:
	rdx = 0x8000000000000000<64>
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	Mem0[rbp + 8<64>:word64] = rdx
	goto l000000000045C4E0
	// succ:  l000000000045C4E0
l000000000045C600:
	r9 = r9 - r8
	SCZO = cond(r9)
	rcx = r9
	rcx = rcx >> 1<64>
	SCZO = cond(rcx)
	rax = rcx
	goto l000000000045C549
	// succ:  l000000000045C549
l000000000045C611:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	SCZO = cond(r10 - r8)
	Mem0[rbp + 8<64>:word64] = rdx
	branch Test(ULE,CZ) l000000000045C676
	// succ:  l000000000045C61E l000000000045C676
l000000000045C61E:
	eax = CONVERT(Mem0[r8:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r8 = r8 + 2<64>
	SCZO = cond(r8)
	Mem0[rdi + 0x10<64>:word64] = r8
	// succ:  l000000000045C62A
l000000000045C62A:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000045C659
	// succ:  l000000000045C630 l000000000045C659
l000000000045C630:
	rax = Mem0[rdi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rdi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045C650
	// succ:  l000000000045C63A l000000000045C650
l000000000045C63A:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = Mem0[rbp + 8<64>:word64]
	goto l000000000045C4E0
	// succ:  l000000000045C4E0
l000000000045C650:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	// succ:  l000000000045C659
l000000000045C659:
	rdx = Mem0[rbp + 8<64>:word64]
	goto l000000000045C4E0
	// succ:  l000000000045C4E0
l000000000045C662:
	call fn000000000045C200 (retsize: 8;)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045C450_exit
l000000000045C676:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l000000000045C62A
	// succ:  l000000000045C62A
l000000000045C681:
	rax = Mem0[rbp + 0<64>:word64]
	rcx = rbp
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbp
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045C450_exit
l000000000045C6A9:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000045C4C5
	// succ:  l000000000045C4C5
l000000000045C6B7:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l000000000045C5C4
	// succ:  l000000000045C5C4
fn000000000045C450_exit:


// fn000000000045C740
// Return size: 8
define fn000000000045C740
fn000000000045C740_entry:
	rsp = fp
	// succ:  l000000000045C740
l000000000045C740:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rdi = rcx
	Mem0[rcx:byte] = 0<8>
	rcx = rdx
	rsi = rdx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	r9d = Mem0[rcx + 0x20<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	rax = rcx
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NE,Z) l000000000045C7B0
	// succ:  l000000000045C767 l000000000045C7B0
l000000000045C767:
	rcx = Mem0[rcx + 0xD8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045C7D0
	// succ:  l000000000045C773 l000000000045C7D0
l000000000045C773:
	Mem0[rsp + 0x2C<64>:word32] = r8d
	call fn000000000045D8D0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rcx = rsi
	r8d = Mem0[rsp + 0x2C<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	SZO = cond(r8b & r8b)
	C = false
	rax = rcx
	branch Test(EQ,Z) l000000000045C7D5
	// succ:  l000000000045C794 l000000000045C7D5
l000000000045C794:
	r9d = Mem0[rax + 0x20<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NE,Z) l000000000045C7B0
	// succ:  l000000000045C79D l000000000045C7B0
l000000000045C79D:
	Mem0[rdi:byte] = 1<8>
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045C740_exit
l000000000045C7B0:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l000000000045C7B2
l000000000045C7B2:
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rax
	edx = edx | r9d
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045C7C3_thunk_fn000000000046EB40
l000000000045C7C3_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn000000000045C740_exit
l000000000045C7D0:
	SZO = cond(r8b & r8b)
	C = false
	branch Test(NE,Z) l000000000045C79D
	// succ:  l000000000045C7D5 l000000000045C79D
l000000000045C7D5:
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x10<8>)
	C = false
	branch Test(EQ,Z) l000000000045C794
	// succ:  l000000000045C7DB l000000000045C794
l000000000045C7DB:
	rbx = Mem0[rax + 0xE8<64>:word64]
	rdx = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045C89F
	// succ:  l000000000045C7F0 l000000000045C89F
l000000000045C7F0:
	r8d = CONVERT(Mem0[rdx:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	// succ:  l000000000045C7F4
l000000000045C7F4:
	rbp = Mem0[rax + 0xF0<64>:word64]
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000045C8BE
	// succ:  l000000000045C804 l000000000045C8BE
l000000000045C804:
	SCZO = cond(r8w - 0xFFFF<16>)
	branch Test(NE,Z) l000000000045C820
	// succ:  l000000000045C80B l000000000045C820
l000000000045C80B:
	// succ:  l000000000045C810
l000000000045C810:
	r9d = Mem0[rax + 0x20<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000045C7B2
	// succ:  l000000000045C7B2
l000000000045C820:
	rax = Mem0[rbp + 0<64>:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbp
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000045C870
	// succ:  l000000000045C833 l000000000045C870
l000000000045C833:
	r8 = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(r8 - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045C880
	// succ:  l000000000045C83D l000000000045C880
l000000000045C83D:
	eax = CONVERT(Mem0[r8:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r8 = r8 + 2<64>
	SCZO = cond(r8)
	Mem0[rbx + 0x10<64>:word64] = r8
	// succ:  l000000000045C849
l000000000045C849:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000045C864
	// succ:  l000000000045C84F l000000000045C864
l000000000045C84F:
	rax = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045C890
	// succ:  l000000000045C859 l000000000045C890
l000000000045C859:
	r8d = CONVERT(Mem0[rax:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	// succ:  l000000000045C85D
l000000000045C85D:
	SCZO = cond(r8w - 0xFFFF<16>)
	branch Test(NE,Z) l000000000045C820
	// succ:  l000000000045C864 l000000000045C820
l000000000045C864:
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	rax = rsi
	goto l000000000045C810
	// succ:  l000000000045C810
l000000000045C870:
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	rax = rsi
	goto l000000000045C794
	// succ:  l000000000045C794
l000000000045C880:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l000000000045C849
	// succ:  l000000000045C849
l000000000045C890:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	r8d = CONVERT(ax, word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	goto l000000000045C85D
	// succ:  l000000000045C85D
l000000000045C89F:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	r8d = CONVERT(ax, word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	rax = Mem0[rsi:word64]
	rdx = rsi
	rdx = rdx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx)
	rax = rdx
	goto l000000000045C7F4
	// succ:  l000000000045C7F4
l000000000045C8BE:
	call fn0000000000470820 (retsize: 8;)
fn000000000045C740_exit:


// fn000000000045C8D0
// Return size: 8
define fn000000000045C8D0
fn000000000045C8D0_entry:
	rsp = fp
	// succ:  l000000000045C8D0
l000000000045C8D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rdi = rcx
	Mem0[rcx:byte] = 0<8>
	rcx = rdx
	rsi = rdx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	r9d = Mem0[rcx + 0x20<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	rax = rcx
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NE,Z) l000000000045C940
	// succ:  l000000000045C8F7 l000000000045C940
l000000000045C8F7:
	rcx = Mem0[rcx + 0xD8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045C960
	// succ:  l000000000045C903 l000000000045C960
l000000000045C903:
	Mem0[rsp + 0x2C<64>:word32] = r8d
	call fn000000000045D8D0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rcx = rsi
	r8d = Mem0[rsp + 0x2C<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	SZO = cond(r8b & r8b)
	C = false
	rax = rcx
	branch Test(EQ,Z) l000000000045C965
	// succ:  l000000000045C924 l000000000045C965
l000000000045C924:
	r9d = Mem0[rax + 0x20<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NE,Z) l000000000045C940
	// succ:  l000000000045C92D l000000000045C940
l000000000045C92D:
	Mem0[rdi:byte] = 1<8>
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045C8D0_exit
l000000000045C940:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l000000000045C942
l000000000045C942:
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rax
	edx = edx | r9d
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045C953_thunk_fn000000000046EB40
l000000000045C953_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn000000000045C8D0_exit
l000000000045C960:
	SZO = cond(r8b & r8b)
	C = false
	branch Test(NE,Z) l000000000045C92D
	// succ:  l000000000045C965 l000000000045C92D
l000000000045C965:
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x10<8>)
	C = false
	branch Test(EQ,Z) l000000000045C924
	// succ:  l000000000045C96B l000000000045C924
l000000000045C96B:
	rbx = Mem0[rax + 0xE8<64>:word64]
	rdx = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045CA2F
	// succ:  l000000000045C980 l000000000045CA2F
l000000000045C980:
	r8d = CONVERT(Mem0[rdx:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	// succ:  l000000000045C984
l000000000045C984:
	rbp = Mem0[rax + 0xF0<64>:word64]
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000045CA4E
	// succ:  l000000000045C994 l000000000045CA4E
l000000000045C994:
	SCZO = cond(r8w - 0xFFFF<16>)
	branch Test(NE,Z) l000000000045C9B0
	// succ:  l000000000045C99B l000000000045C9B0
l000000000045C99B:
	// succ:  l000000000045C9A0
l000000000045C9A0:
	r9d = Mem0[rax + 0x20<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000045C942
	// succ:  l000000000045C942
l000000000045C9B0:
	rax = Mem0[rbp + 0<64>:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbp
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000045CA00
	// succ:  l000000000045C9C3 l000000000045CA00
l000000000045C9C3:
	r8 = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(r8 - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045CA10
	// succ:  l000000000045C9CD l000000000045CA10
l000000000045C9CD:
	eax = CONVERT(Mem0[r8:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r8 = r8 + 2<64>
	SCZO = cond(r8)
	Mem0[rbx + 0x10<64>:word64] = r8
	// succ:  l000000000045C9D9
l000000000045C9D9:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000045C9F4
	// succ:  l000000000045C9DF l000000000045C9F4
l000000000045C9DF:
	rax = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045CA20
	// succ:  l000000000045C9E9 l000000000045CA20
l000000000045C9E9:
	r8d = CONVERT(Mem0[rax:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	// succ:  l000000000045C9ED
l000000000045C9ED:
	SCZO = cond(r8w - 0xFFFF<16>)
	branch Test(NE,Z) l000000000045C9B0
	// succ:  l000000000045C9F4 l000000000045C9B0
l000000000045C9F4:
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	rax = rsi
	goto l000000000045C9A0
	// succ:  l000000000045C9A0
l000000000045CA00:
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	rax = rsi
	goto l000000000045C924
	// succ:  l000000000045C924
l000000000045CA10:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l000000000045C9D9
	// succ:  l000000000045C9D9
l000000000045CA20:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	r8d = CONVERT(ax, word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	goto l000000000045C9ED
	// succ:  l000000000045C9ED
l000000000045CA2F:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	r8d = CONVERT(ax, word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	rax = Mem0[rsi:word64]
	rdx = rsi
	rdx = rdx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx)
	rax = rdx
	goto l000000000045C984
	// succ:  l000000000045C984
l000000000045CA4E:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000045CA5F_thunk_fn000000000045CA60
l000000000045CA5F_thunk_fn000000000045CA60:
	call fn000000000045CA60 (retsize: 0;)
	return
	// succ:  fn000000000045C8D0_exit
fn000000000045C8D0_exit:


// fn000000000045CA60
// Return size: 8
define fn000000000045CA60
fn000000000045CA60_entry:
	rsp = fp
	// succ:  l000000000045CA60
l000000000045CA60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rsi = rdx
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rcx + 0xF0<64> + rax:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045CAAA
	// succ:  l000000000045CA80 l000000000045CAAA
l000000000045CA80:
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x28<64>:word64] = r8
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9d = CONVERT(ax, word16, word32)
	r9 = CONVERT(r9d, word32, uint64)
	rdx = rsi
	rcx = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045CAA5_thunk_fn000000000045CAB0
l000000000045CAA5_thunk_fn000000000045CAB0:
	call fn000000000045CAB0 (retsize: 0;)
	return
	// succ:  fn000000000045CA60_exit
l000000000045CAAA:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000045CAAF_thunk_fn000000000045CAB0
l000000000045CAAF_thunk_fn000000000045CAB0:
	call fn000000000045CAB0 (retsize: 0;)
	return
	// succ:  fn000000000045CA60_exit
fn000000000045CA60_exit:


// fn000000000045CAB0
// Return size: 8
define fn000000000045CAB0
fn000000000045CAB0_entry:
	rsp = fp
	// succ:  l000000000045CAB0
l000000000045CAB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbp = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x2F<64>
	rdi = rdx
	r12 = r8
	rdx = rbp
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	r13d = r9d
	r13 = CONVERT(r13d, word32, uint64)
	ebx = r9d
	rbx = CONVERT(ebx, word32, uint64)
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045CBD7
	// succ:  l000000000045CAF5 l000000000045CBD7
l000000000045CAF5:
	rax = Mem0[rbp + 0<64>:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rsi = Mem0[rbp + 0xE8<64> + rax:word64]
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045CCE2
	// succ:  l000000000045CB13 l000000000045CCE2
l000000000045CB13:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000045CB16
l000000000045CB16:
	r10 = Mem0[rbp + 8<64>:word64]
	// succ:  l000000000045CB20
l000000000045CB20:
	SCZO = cond(bx - ax)
	rcx = r10 + 1<64>
	r8b = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(ax - 0xFFFF<16>)
	dl = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(r8b & dl)
	C = false
	branch Test(EQ,Z) l000000000045CC31
	// succ:  l000000000045CB3B l000000000045CC31
l000000000045CB3B:
	SCZO = cond(rcx - r12)
	branch Test(GE,SO) l000000000045CC31
	// succ:  l000000000045CB44 l000000000045CC31
l000000000045CB44:
	r8 = Mem0[rsi + 0x18<64>:word64]
	rdx = Mem0[rsi + 0x10<64>:word64]
	r14 = r12
	r14 = r14 - r10
	SCZO = cond(r14)
	r14 = r14 - 1<64>
	SCZO = cond(r14)
	r10 = r8
	r10 = r10 - rdx
	SCZO = cond(r10)
	r10 = r10 >> 1<64>
	SCZO = cond(r10)
	SCZO = cond(r14 - r10)
	branch Test(LE,SZO) l000000000045CB66
	// succ:  l000000000045CB62_1 l000000000045CB66
l000000000045CB62_1:
	r14 = r10
	// succ:  l000000000045CB66
l000000000045CB66:
	SCZO = cond(r14 - 1<64>)
	branch Test(LE,SZO) l000000000045CC7A
	// succ:  l000000000045CB70 l000000000045CC7A
l000000000045CB70:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l000000000045CB94
	// succ:  l000000000045CB75 l000000000045CB94
l000000000045CB75:
	rax = r14
	r10 = rdx
	// succ:  l000000000045CB80
l000000000045CB80:
	SCZO = cond(bx - Mem0[r10:word16])
	branch Test(EQ,Z) l000000000045CC20
	// succ:  l000000000045CB8A l000000000045CC20
l000000000045CB8A:
	r10 = r10 + 2<64>
	SCZO = cond(r10)
	rax = rax - 1<64>
	SCZO = cond(rax)
	branch Test(NE,Z) l000000000045CB80
	// succ:  l000000000045CB94 l000000000045CB80
l000000000045CB94:
	r15 = r14
	// succ:  l000000000045CB97
l000000000045CB97:
	r15 = r15 + r15
	SCZO = cond(r15)
	rcx = rdi
	r8 = r15
	rdi = rdi + r15
	SCZO = cond(rdi)
	rax = memcpy(rcx, rdx, r8)
	r15 = r15 + Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(r15)
	r14 = r14 + Mem0[rbp + 8<64>:word64]
	SCZO = cond(r14)
	SCZO = cond(r15 - Mem0[rsi + 0x18<64>:word64])
	Mem0[rsi + 0x10<64>:word64] = r15
	r10 = r14
	Mem0[rbp + 8<64>:word64] = r14
	branch Test(UGE,C) l000000000045CCB4
	// succ:  l000000000045CBC5 l000000000045CCB4
l000000000045CBC5:
	eax = CONVERT(Mem0[r15:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000045CB20
	// succ:  l000000000045CB20
l000000000045CBCE:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	// succ:  l000000000045CBD7
l000000000045CBD7:
	r10 = Mem0[rbp + 8<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l000000000045CBE0
l000000000045CBE0:
	SZO = cond(r12 & r12)
	C = false
	branch Test(LE,SZO) l000000000045CBEA
	// succ:  l000000000045CBE5 l000000000045CBEA
l000000000045CBE5:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rdi:word16] = ax
	// succ:  l000000000045CBEA
l000000000045CBEA:
	SZO = cond(r10 & r10)
	C = false
	branch Test(NE,Z) l000000000045CC19
	// succ:  l000000000045CBEF l000000000045CC19
l000000000045CBEF:
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l000000000045CBF2
l000000000045CBF2:
	rax = Mem0[rbp + 0<64>:word64]
	rcx = rbp
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	// succ:  l000000000045CC05
l000000000045CC05:
	rax = rbp
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045CAB0_exit
l000000000045CC19:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l000000000045CC05
	// succ:  l000000000045CC1D l000000000045CC05
l000000000045CC1D:
	goto l000000000045CBF2
	// succ:  l000000000045CBF2
l000000000045CC20:
	r10 = r10 - rdx
	SCZO = cond(r10)
	r14 = r10
	r14 = r14 >> 1<64>
	SCZO = cond(r14)
	r15 = r14
	goto l000000000045CB97
	// succ:  l000000000045CB97
l000000000045CC31:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000045CC70
	// succ:  l000000000045CC37 l000000000045CC70
l000000000045CC37:
	SCZO = cond(r13w - ax)
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l000000000045CBE0
	// succ:  l000000000045CC42 l000000000045CBE0
l000000000045CC42:
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	Mem0[rbp + 8<64>:word64] = rcx
	branch Test(UGE,C) l000000000045CBCE
	// succ:  l000000000045CC54 l000000000045CBCE
l000000000045CC54:
	rax = rax + 2<64>
	SCZO = cond(rax)
	r10 = rcx
	dl = dl ^ dl
	SZO = cond(dl)
	C = false
	Mem0[rsi + 0x10<64>:word64] = rax
	goto l000000000045CBE0
	// succ:  l000000000045CBE0
l000000000045CC70:
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000045CBE0
	// succ:  l000000000045CBE0
l000000000045CC7A:
	SCZO = cond(r8 - rdx)
	Mem0[rdi:word16] = ax
	r15 = rdi + 2<64>
	Mem0[rbp + 8<64>:word64] = rcx
	branch Test(ULE,CZ) l000000000045CCD7
	// succ:  l000000000045CC8A l000000000045CCD7
l000000000045CC8A:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rsi + 0x10<64>:word64] = rdx
	// succ:  l000000000045CC95
l000000000045CC95:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000045CCCB
	// succ:  l000000000045CC9B l000000000045CCCB
l000000000045CC9B:
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000045CCC2
	// succ:  l000000000045CCA5 l000000000045CCC2
l000000000045CCA5:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r10 = Mem0[rbp + 8<64>:word64]
	rdi = r15
	goto l000000000045CB20
	// succ:  l000000000045CB20
l000000000045CCB4:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000045CB16
	// succ:  l000000000045CB16
l000000000045CCC2:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	// succ:  l000000000045CCCB
l000000000045CCCB:
	r10 = Mem0[rbp + 8<64>:word64]
	rdi = r15
	goto l000000000045CB20
	// succ:  l000000000045CB20
l000000000045CCD7:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l000000000045CC95
	// succ:  l000000000045CC95
l000000000045CCE2:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000045CB16
	// succ:  l000000000045CB16
fn000000000045CAB0_exit:


// fn000000000045CD80
// Return size: 8
define fn000000000045CD80
fn000000000045CD80_entry:
	rsp = fp
	// succ:  l000000000045CD80
l000000000045CD80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xFFFFFFFD<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rcx = rsp + 0x2F<64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045CDF9
	// succ:  l000000000045CDC2 l000000000045CDF9
l000000000045CDC2:
	rax = Mem0[rbx:word64]
	rdx = rbx
	rdx = rdx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx)
	rcx = Mem0[rdx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045CE04
	// succ:  l000000000045CDD8 l000000000045CE04
l000000000045CDD8:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(Mem0[rcx + 8<64>:word64] - rax)
	branch Test(UGE,C) l000000000045CDE8
	// succ:  l000000000045CDE2 l000000000045CDE8
l000000000045CDE2:
	SCZO = cond(si - Mem0[rax - 2<64>:word16])
	branch Test(EQ,Z) l000000000045CE30
	// succ:  l000000000045CDE8 l000000000045CE30
l000000000045CDE8:
	rax = Mem0[rcx:word64]
	edx = CONVERT(si, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x58<64>:word64] (retsize: 8;)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	// succ:  l000000000045CDF3
l000000000045CDF3:
	SCZO = cond(di - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000045CE20
	// succ:  l000000000045CDF9 l000000000045CE20
l000000000045CDF9:
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045CD80_exit
l000000000045CE04:
	rcx = rdx
	// succ:  l000000000045CE07
l000000000045CE07:
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045CD80_exit
l000000000045CE20:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	goto l000000000045CE07
	// succ:  l000000000045CE07
l000000000045CE30:
	rax = rax - 2<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	goto l000000000045CDF3
	// succ:  l000000000045CDF3
fn000000000045CD80_exit:


// fn000000000045CEB0
// Return size: 8
define fn000000000045CEB0
fn000000000045CEB0_entry:
	rsp = fp
	// succ:  l000000000045CEB0
l000000000045CEB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rsp + 0x2F<64>
	rdi = rdx
	rsi = r8
	rdx = rbx
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045CF3B
	// succ:  l000000000045CEE2 l000000000045CF3B
l000000000045CEE2:
	rax = Mem0[rbx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	rax = Mem0[rcx + 0x18<64>:word64]
	rax = rax - Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax)
	rax = rax >> 1<64>
	SCZO = cond(rax)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000045CF50
	// succ:  l000000000045CF01 l000000000045CF50
l000000000045CF01:
	SZO = cond(rax & rax)
	C = false
	branch Test(LE,SZO) l000000000045CF35
	// succ:  l000000000045CF06 l000000000045CF35
l000000000045CF06:
	rdx = Mem0[rbx:word64]
	SCZO = cond(rax - rsi)
	branch Test(GT,SZO) l000000000045CF10
	// succ:  l000000000045CF0C_1 l000000000045CF10
l000000000045CF0C_1:
	rsi = rax
	// succ:  l000000000045CF10
l000000000045CF10:
	r8 = rsi
	rdx = Mem0[rdx - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rdx:word64]
	rdx = rdi
	r9 = Mem0[rcx:word64]
	call Mem0[r9 + 0x40<64>:word64] (retsize: 8;)
	Mem0[rbx + 8<64>:word64] = rax
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045CEB0_exit
l000000000045CF35:
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l000000000045CF60
	// succ:  l000000000045CF3B l000000000045CF60
l000000000045CF3B:
	rax = Mem0[rbx + 8<64>:word64]
	// succ:  l000000000045CF3F
l000000000045CF3F:
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045CEB0_exit
l000000000045CF50:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x38<64>:word64] (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(GT,SZO) l000000000045CF06
	// succ:  l000000000045CF5B l000000000045CF06
l000000000045CF5B:
	goto l000000000045CF35
	// succ:  l000000000045CF35
l000000000045CF60:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = Mem0[rbx + 8<64>:word64]
	goto l000000000045CF3F
	// succ:  l000000000045CF3F
fn000000000045CEB0_exit:


// fn000000000045D000
// Return size: 8
define fn000000000045D000
fn000000000045D000_entry:
	rsp = fp
	// succ:  l000000000045D000
l000000000045D000:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0x10<64>
	rbx = rcx
	rdi = rdx
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0xE8<64>:word64] = 0<64>
	Mem0[rbx + 0xF2<64>:byte] = 0<8>
	Mem0[rbx + 0xF0<64>:word16] = ax
	rax = 0x0000000000496918<p64>
	Mem0[rbx + 0xF8<64>:word64] = 0<64>
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	Mem0[rbx + 0x108<64>:word64] = 0<64>
	rdx = rdi
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496940<p64>
	Mem0[rbx + 0x110<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045D000_exit
fn000000000045D000_exit:


// fn000000000045D0C0
// Return size: 8
define fn000000000045D0C0
fn000000000045D0C0_entry:
	rsp = fp
	// succ:  l000000000045D0C0
l000000000045D0C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0x10<64>
	rbx = rcx
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0xE8<64>:word64] = 0<64>
	Mem0[rbx + 0xF2<64>:byte] = 0<8>
	Mem0[rbx + 0xF0<64>:word16] = ax
	rax = 0x0000000000496918<p64>
	Mem0[rbx + 0xF8<64>:word64] = 0<64>
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	Mem0[rbx + 0x108<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496940<p64>
	Mem0[rbx + 0x110<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045D0C0_exit
fn000000000045D0C0_exit:


// fn000000000045D170
// Return size: 8
define fn000000000045D170
fn000000000045D170_entry:
	rsp = fp
	// succ:  l000000000045D170
l000000000045D170:
	rax = Mem0[rdx:word64]
	Mem0[rcx:word64] = rax
	r9 = Mem0[rdx + 8<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rcx + rdx:word64] = r9
	Mem0[rcx + 8<64>:word64] = 0<64>
	rdx = r8
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	// succ:  l000000000045D191_thunk_fn000000000046EAE0
l000000000045D191_thunk_fn000000000046EAE0:
	call fn000000000046EAE0 (retsize: 0;)
	return
	// succ:  fn000000000045D170_exit
fn000000000045D170_exit:


// fn000000000045D1A0
// Return size: 8
define fn000000000045D1A0
fn000000000045D1A0_entry:
	rsp = fp
	// succ:  l000000000045D1A0
l000000000045D1A0:
	rax = Mem0[rdx:word64]
	Mem0[rcx:word64] = rax
	r8 = Mem0[rdx + 8<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rcx + rdx:word64] = r8
	Mem0[rcx + 8<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	// succ:  l000000000045D1C0_thunk_fn000000000046EAE0
l000000000045D1C0_thunk_fn000000000046EAE0:
	call fn000000000046EAE0 (retsize: 0;)
	return
	// succ:  fn000000000045D1A0_exit
fn000000000045D1A0_exit:


// fn000000000045D1D0
// Return size: 0
define fn000000000045D1D0
fn000000000045D1D0_entry:
	rsp = fp
	// succ:  l000000000045D1D0
l000000000045D1D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496918<p64>
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	rax = Mem0[0x0000000000491E30<p64>:word64]
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	call fn000000000046D3D0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045D20A_thunk_fn0000000000475550
l000000000045D20A_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000045D1D0_exit
fn000000000045D1D0_exit:


// fn000000000045D210
// Return size: 0
define fn000000000045D210
fn000000000045D210_entry:
	rsp = fp
	// succ:  l000000000045D210
l000000000045D210:
	rax = 0x0000000000496918<p64>
	Mem0[rcx + 8<64>:word64] = 0<64>
	rcx = rcx + 0x10<64>
	SCZO = cond(rcx)
	Mem0[rcx - 0x10<64>:word64] = rax
	rax = Mem0[0x0000000000491E30<p64>:word64]
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	// succ:  l000000000045D235_thunk_fn000000000046D3D0
l000000000045D235_thunk_fn000000000046D3D0:
	call fn000000000046D3D0 (retsize: 0;)
	return
	// succ:  fn000000000045D210_exit
fn000000000045D210_exit:


// fn000000000045D240
// Return size: 8
define fn000000000045D240
fn000000000045D240_entry:
	rsp = fp
	// succ:  l000000000045D240
l000000000045D240:
	rax = Mem0[rdx:word64]
	Mem0[rcx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rdx + 8<64>:word64]
	Mem0[rcx + rax:word64] = rdx
	return
	// succ:  fn000000000045D240_exit
fn000000000045D240_exit:


// fn000000000045D260
// Return size: 0
define fn000000000045D260
fn000000000045D260_entry:
	rsp = fp
	// succ:  l000000000045D260
l000000000045D260:
	call rdx (retsize: 0;)
	return
	// succ:  fn000000000045D260_exit
fn000000000045D260_exit:


// fn000000000045D270
// Return size: 8
define fn000000000045D270
fn000000000045D270_entry:
	rsp = fp
	// succ:  l000000000045D270
l000000000045D270:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call rdx (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045D270_exit
fn000000000045D270_exit:


// fn000000000045D290
// Return size: 8
define fn000000000045D290
fn000000000045D290_entry:
	rsp = fp
	// succ:  l000000000045D290
l000000000045D290:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call rdx (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045D290_exit
fn000000000045D290_exit:


// fn000000000045D2B0
// Return size: 8
define fn000000000045D2B0
fn000000000045D2B0_entry:
	rsp = fp
	// succ:  l000000000045D2B0
l000000000045D2B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x2E<64>
	rsi = rdx
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000045D321
	// succ:  l000000000045D2D1 l000000000045D321
l000000000045D2D1:
	SCZO = cond(Mem0[rsp + 0x2E<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045D321
	// succ:  l000000000045D2D8 l000000000045D321
l000000000045D2D8:
	rax = Mem0[rbx:word64]
	r8 = rsp + 0x2F<64>
	rdx = rsi
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	call fn0000000000471150 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000045D330
	// succ:  l000000000045D2F9 l000000000045D330
l000000000045D2F9:
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045D317
	// succ:  l000000000045D300 l000000000045D317
l000000000045D300:
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000045D305
l000000000045D305:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	// succ:  l000000000045D317
l000000000045D317:
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045D2B0_exit
l000000000045D321:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(NE,Z) l000000000045D317
	// succ:  l000000000045D326 l000000000045D317
l000000000045D326:
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000045D305
	// succ:  l000000000045D305
l000000000045D330:
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 1<8>)
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx & 0xFFFFFFFE<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 6<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	goto l000000000045D305
	// succ:  l000000000045D305
fn000000000045D2B0_exit:


// fn000000000045D3B0
// Return size: 8
define fn000000000045D3B0
fn000000000045D3B0_entry:
	rsp = fp
	// succ:  l000000000045D3B0
l000000000045D3B0:
	// succ:  l000000000045D3B0_thunk_fn000000000045A4D0
l000000000045D3B0_thunk_fn000000000045A4D0:
	call fn000000000045A4D0 (retsize: 0;)
	return
	// succ:  fn000000000045D3B0_exit
fn000000000045D3B0_exit:


// fn000000000045D3C0
// Return size: 8
define fn000000000045D3C0
fn000000000045D3C0_entry:
	rsp = fp
	// succ:  l000000000045D3C0
l000000000045D3C0:
	// succ:  l000000000045D3C0_thunk_fn000000000045A620
l000000000045D3C0_thunk_fn000000000045A620:
	call fn000000000045A620 (retsize: 0;)
	return
	// succ:  fn000000000045D3C0_exit
fn000000000045D3C0_exit:


// fn000000000045D3D0
// Return size: 8
define fn000000000045D3D0
fn000000000045D3D0_entry:
	rsp = fp
	// succ:  l000000000045D3D0
l000000000045D3D0:
	// succ:  l000000000045D3D0_thunk_fn000000000045A770
l000000000045D3D0_thunk_fn000000000045A770:
	call fn000000000045A770 (retsize: 0;)
	return
	// succ:  fn000000000045D3D0_exit
fn000000000045D3D0_exit:


// fn000000000045D3E0
// Return size: 8
define fn000000000045D3E0
fn000000000045D3E0_entry:
	rsp = fp
	// succ:  l000000000045D3E0
l000000000045D3E0:
	// succ:  l000000000045D3E0_thunk_fn000000000045A8C0
l000000000045D3E0_thunk_fn000000000045A8C0:
	call fn000000000045A8C0 (retsize: 0;)
	return
	// succ:  fn000000000045D3E0_exit
fn000000000045D3E0_exit:


// fn000000000045D3F0
// Return size: 8
define fn000000000045D3F0
fn000000000045D3F0_entry:
	rsp = fp
	// succ:  l000000000045D3F0
l000000000045D3F0:
	// succ:  l000000000045D3F0_thunk_fn000000000045AA10
l000000000045D3F0_thunk_fn000000000045AA10:
	call fn000000000045AA10 (retsize: 0;)
	return
	// succ:  fn000000000045D3F0_exit
fn000000000045D3F0_exit:


// fn000000000045D400
// Return size: 8
define fn000000000045D400
fn000000000045D400_entry:
	rsp = fp
	// succ:  l000000000045D400
l000000000045D400:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x77<64>
	rsi = rdx
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x77<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045D4B3
	// succ:  l000000000045D42A l000000000045D4B3
l000000000045D42A:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x78<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000045D4DF
	// succ:  l000000000045D44C l000000000045D4DF
l000000000045D44C:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = 0xFFFF<64>
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x48<64>:word64] = 0xFFFF<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	rdx = rsp + 0x7C<64>
	r10 = Mem0[rax:word64]
	Mem0[rsp + 0x20<64>:word64] = r8
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x30<64>:word64] = rdx
	rdx = rsp + 0x78<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x18<64>:word64] (retsize: 8;)
	eax = Mem0[rsp + 0x7C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi:word32] = eax
	// succ:  l000000000045D4AB
l000000000045D4AB:
	edx = Mem0[rsp + 0x78<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000045D4C0
	// succ:  l000000000045D4B3 l000000000045D4C0
l000000000045D4B3:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045D400_exit
l000000000045D4C0:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045D400_exit
l000000000045D4DF:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045D508
	// succ:  l000000000045D4ED l000000000045D508
l000000000045D4ED:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v18 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045D538
	// succ:  l000000000045D503 l000000000045D538
l000000000045D503:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045D508
l000000000045D508:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v19 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v19
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045D53D
	// succ:  l000000000045D521 l000000000045D53D
l000000000045D521:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045D4AB
	// succ:  l000000000045D4AB
l000000000045D538:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045D53D
l000000000045D53D:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000045D55F_thunk_fn000000000045D560
l000000000045D55F_thunk_fn000000000045D560:
	call fn000000000045D560 (retsize: 0;)
	return
	// succ:  fn000000000045D400_exit
fn000000000045D400_exit:


// fn000000000045D560
// Return size: 8
define fn000000000045D560
fn000000000045D560_entry:
	rsp = fp
	// succ:  l000000000045D560
l000000000045D560:
	// succ:  l000000000045D560_thunk_fn000000000045AB60
l000000000045D560_thunk_fn000000000045AB60:
	call fn000000000045AB60 (retsize: 0;)
	return
	// succ:  fn000000000045D560_exit
fn000000000045D560_exit:


// fn000000000045D570
// Return size: 8
define fn000000000045D570
fn000000000045D570_entry:
	rsp = fp
	// succ:  l000000000045D570
l000000000045D570:
	// succ:  l000000000045D570_thunk_fn000000000045ACB0
l000000000045D570_thunk_fn000000000045ACB0:
	call fn000000000045ACB0 (retsize: 0;)
	return
	// succ:  fn000000000045D570_exit
fn000000000045D570_exit:


// fn000000000045D580
// Return size: 8
define fn000000000045D580
fn000000000045D580_entry:
	rsp = fp
	// succ:  l000000000045D580
l000000000045D580:
	// succ:  l000000000045D580_thunk_fn000000000045AE00
l000000000045D580_thunk_fn000000000045AE00:
	call fn000000000045AE00 (retsize: 0;)
	return
	// succ:  fn000000000045D580_exit
fn000000000045D580_exit:


// fn000000000045D590
// Return size: 8
define fn000000000045D590
fn000000000045D590_entry:
	rsp = fp
	// succ:  l000000000045D590
l000000000045D590:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbx = rcx
	rcx = rsp + 0x77<64>
	rsi = rdx
	rdx = rbx
	call fn000000000045C740 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x77<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045D657
	// succ:  l000000000045D5BA l000000000045D657
l000000000045D5BA:
	rax = Mem0[rbx:word64]
	r8 = rbx
	Mem0[rsp + 0x78<64>:word32] = 0<32>
	r8 = r8 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8)
	rax = Mem0[r8 + 0x100<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000045D6AC
	// succ:  l000000000045D5DC l000000000045D6AC
l000000000045D5DC:
	rdx = Mem0[r8 + 0xE8<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = 0xFFFF<64>
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	Mem0[rsp + 0x48<64>:word64] = 0xFFFF<64>
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	rdx = rsp + 0x7C<64>
	r10 = Mem0[rax:word64]
	Mem0[rsp + 0x20<64>:word64] = r8
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x30<64>:word64] = rdx
	rdx = rsp + 0x78<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rax
	call Mem0[r10 + 0x18<64>:word64] (retsize: 8;)
	eax = Mem0[rsp + 0x7C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFF8000<32>)
	branch Test(GE,SO) l000000000045D664
	// succ:  l000000000045D640 l000000000045D664
l000000000045D640:
	eax = Mem0[rsp + 0x78<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = 0xFFFF8000<32>
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsi:word16] = cx
	eax = eax | 4<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x78<64>:word32] = eax
	// succ:  l000000000045D653
l000000000045D653:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000045D682
	// succ:  l000000000045D657 l000000000045D682
l000000000045D657:
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045D590_exit
l000000000045D664:
	SCZO = cond(eax - 0x7FFF<32>)
	branch Test(LE,SZO) l000000000045D6A3
	// succ:  l000000000045D66B l000000000045D6A3
l000000000045D66B:
	eax = Mem0[rsp + 0x78<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = 0x7FFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsi:word16] = dx
	eax = eax | 4<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(eax & eax)
	C = false
	Mem0[rsp + 0x78<64>:word32] = eax
	branch Test(EQ,Z) l000000000045D657
	// succ:  l000000000045D682 l000000000045D657
l000000000045D682:
	rdx = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rcx)
	eax = eax | Mem0[rcx + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045D590_exit
l000000000045D6A3:
	Mem0[rsi:word16] = ax
	eax = Mem0[rsp + 0x78<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l000000000045D653
	// succ:  l000000000045D653
l000000000045D6AC:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045D6D5
	// succ:  l000000000045D6BA l000000000045D6D5
l000000000045D6BA:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	v22 = Mem0[rbx + 0x20<64>:word32] | 1<32>
	Mem0[rbx + 0x20<64>:word32] = v22
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rbx + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045D70C
	// succ:  l000000000045D6D0 l000000000045D70C
l000000000045D6D0:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045D6D5
l000000000045D6D5:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v24 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v24
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045D711
	// succ:  l000000000045D6EE l000000000045D711
l000000000045D6EE:
	call fn0000000000475A70 (retsize: 8;)
	eax = Mem0[rsp + 0x78<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l000000000045D653
	// succ:  l000000000045D653
l000000000045D70C:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045D711
l000000000045D711:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000045D72F_thunk_fn000000000045D730
l000000000045D72F_thunk_fn000000000045D730:
	call fn000000000045D730 (retsize: 0;)
	return
	// succ:  fn000000000045D590_exit
fn000000000045D590_exit:


// fn000000000045D730
// Return size: 8
define fn000000000045D730
fn000000000045D730_entry:
	rsp = fp
	// succ:  l000000000045D730
l000000000045D730:
	// succ:  l000000000045D730_thunk_fn000000000045AF50
l000000000045D730_thunk_fn000000000045AF50:
	call fn000000000045AF50 (retsize: 0;)
	return
	// succ:  fn000000000045D730_exit
fn000000000045D730_exit:


// fn000000000045D740
// Return size: 8
define fn000000000045D740
fn000000000045D740_entry:
	rsp = fp
	// succ:  l000000000045D740
l000000000045D740:
	// succ:  l000000000045D740_thunk_fn000000000045B0A0
l000000000045D740_thunk_fn000000000045B0A0:
	call fn000000000045B0A0 (retsize: 0;)
	return
	// succ:  fn000000000045D740_exit
fn000000000045D740_exit:


// fn000000000045D750
// Return size: 8
define fn000000000045D750
fn000000000045D750_entry:
	rsp = fp
	// succ:  l000000000045D750
l000000000045D750:
	// succ:  l000000000045D750_thunk_fn000000000045B1F0
l000000000045D750_thunk_fn000000000045B1F0:
	call fn000000000045B1F0 (retsize: 0;)
	return
	// succ:  fn000000000045D750_exit
fn000000000045D750_exit:


// fn000000000045D760
// Return size: 8
define fn000000000045D760
fn000000000045D760_entry:
	rsp = fp
	goto l000000000045D760
	// succ:  l000000000045D760
l000000000045C8CF_thunk_fn000000000045C8D0:
	call fn000000000045C8D0 (retsize: 0;)
	return
	// succ:  fn000000000045D760_exit
l000000000045D760:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rdi = rsp + 0x20<64>
	rsi = rcx
	ebx = edx
	rbx = CONVERT(ebx, word32, uint64)
	ebp = edx
	rbp = CONVERT(ebp, word32, uint64)
	rdx = rcx
	rcx = rdi
	call fn000000000045DD70 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045D7B5
	goto l000000000045D786
	// succ:  l000000000045D786 l000000000045D7B5
l000000000045D760:
	goto l000000000045C8CF_thunk_fn000000000045C8D0
	// succ:  l000000000045C8CF_thunk_fn000000000045C8D0
l000000000045D786:
	rax = Mem0[rsi:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rsi + 0xE8<64> + rax:word64]
	r8 = Mem0[rcx + 0x28<64>:word64]
	SCZO = cond(r8 - Mem0[rcx + 0x30<64>:word64])
	branch Test(UGE,C) l000000000045D843
	// succ:  l000000000045D7A3 l000000000045D843
l000000000045D7A3:
	Mem0[r8:word16] = bx
	r8 = r8 + 2<64>
	SCZO = cond(r8)
	Mem0[rcx + 0x28<64>:word64] = r8
	// succ:  l000000000045D7AF
l000000000045D7AF:
	SCZO = cond(bp - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000045D800
	// succ:  l000000000045D7B5 l000000000045D800
l000000000045D7B5:
	r8 = Mem0[rsp + 0x28<64>:word64]
	rax = Mem0[r8:word64]
	rbx = r8
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	SZO = cond(Mem0[rbx + 0x19<64>:byte] & 0x20<8>)
	C = false
	branch Test(EQ,Z) l000000000045D7EA
	// succ:  l000000000045D7CA l000000000045D7EA
l000000000045D7CA:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000045D7EA
	// succ:  l000000000045D7D3 l000000000045D7EA
l000000000045D7D3:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045D7EA
	// succ:  l000000000045D7DF l000000000045D7EA
l000000000045D7DF:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000045D820
	// succ:  l000000000045D7EA l000000000045D820
l000000000045D7EA:
	rax = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045D760_exit
l000000000045D800:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	goto l000000000045D7B5
	// succ:  l000000000045D7B5
l000000000045D820:
	rcx = Mem0[rsp + 0x28<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045D760_exit
l000000000045D843:
	rax = Mem0[rcx:word64]
	edx = CONVERT(bx, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x68<64>:word64] (retsize: 8;)
	ebp = eax
	rbp = CONVERT(ebp, word32, uint64)
	goto l000000000045D7AF
	// succ:  l000000000045D7AF
fn000000000045D760_exit:


// fn000000000045D8D0
// Return size: 8
define fn000000000045D8D0
fn000000000045D8D0_entry:
	rsp = fp
	// succ:  l000000000045D8D0
l000000000045D8D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rcx + 0xE8<64> + rax:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045D8F7
	// succ:  l000000000045D8EC l000000000045D8F7
l000000000045D8EC:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000045D900
	// succ:  l000000000045D8F7 l000000000045D900
l000000000045D8F7:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045D8D0_exit
l000000000045D900:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045D8D0_exit
fn000000000045D8D0_exit:


// fn000000000045D990
// Return size: 8
define fn000000000045D990
fn000000000045D990_entry:
	rsp = fp
	// succ:  l000000000045D990
l000000000045D990:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r9 = Mem0[rdx:word64]
	rbx = rcx
	r10 = Mem0[rdx + 8<64>:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	SZO = cond(Mem0[rcx + 0x20<64>:byte] & 5<8>)
	C = false
	branch Test(EQ,Z) l000000000045D9B5
	// succ:  l000000000045D9AC l000000000045D9B5
l000000000045D9AC:
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045D990_exit
l000000000045D9B5:
	rdx = Mem0[rcx + 0xE8<64>:word64]
	r8 = rsp + 0x20<64>
	Mem0[rsp + 0x20<64>:word64] = r9
	rcx = rsp + 0x30<64>
	Mem0[rsp + 0x28<64>:word64] = r10
	r9d = 0x10<32>
	r9 = CONVERT(r9d, word32, uint64)
	rax = Mem0[rdx:word64]
	call Mem0[rax + 0x28<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x30<64>:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l000000000045D9AC
	// succ:  l000000000045D9E4 l000000000045D9AC
l000000000045D9E4:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	goto l000000000045D9AC
	// succ:  l000000000045D9AC
fn000000000045D990_exit:


// fn000000000045DA70
// Return size: 8
define fn000000000045DA70
fn000000000045DA70_entry:
	rsp = fp
	// succ:  l000000000045DA70
l000000000045DA70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	SZO = cond(Mem0[rcx + 0x20<64>:byte] & 5<8>)
	C = false
	branch Test(EQ,Z) l000000000045DA90
	// succ:  l000000000045DA85 l000000000045DA90
l000000000045DA85:
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045DA70_exit
l000000000045DA90:
	rax = Mem0[rcx + 0xE8<64>:word64]
	r9d = r8d
	r9 = CONVERT(r9d, word32, uint64)
	rcx = rsp + 0x30<64>
	r8 = rdx
	r10 = Mem0[rax:word64]
	rdx = rax
	Mem0[rsp + 0x20<64>:word32] = 0x10<32>
	call Mem0[r10 + 0x20<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x30<64>:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l000000000045DA85
	// succ:  l000000000045DABC l000000000045DA85
l000000000045DABC:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	goto l000000000045DA85
	// succ:  l000000000045DA85
fn000000000045DA70_exit:


// fn000000000045DB50
// Return size: 8
define fn000000000045DB50
fn000000000045DB50_entry:
	rsp = fp
	// succ:  l000000000045DB50
l000000000045DB50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rcx + 8<64>:word32] = 0<32>
	rcx = rdx
	rsi = rdx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	SZO = cond(Mem0[rcx + 0x20<64>:byte] & 5<8>)
	C = false
	branch Test(EQ,Z) l000000000045DB84
	// succ:  l000000000045DB7A l000000000045DB84
l000000000045DB7A:
	rax = rbx
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045DB50_exit
l000000000045DB84:
	rdx = Mem0[rcx + 0xE8<64>:word64]
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	rcx = rsp + 0x30<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rax = Mem0[rdx:word64]
	Mem0[rsp + 0x20<64>:word32] = 0x10<32>
	call Mem0[rax + 0x20<64>:word64] (retsize: 8;)
	rax = Mem0[rsp + 0x30<64>:word64]
	Mem0[rbx:word64] = rax
	eax = Mem0[rsp + 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 8<64>:word32] = eax
	rax = rbx
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045DB50_exit
fn000000000045DB50_exit:


// fn000000000045DC30
// Return size: 8
define fn000000000045DC30
fn000000000045DC30_entry:
	rsp = fp
	// succ:  l000000000045DC30
l000000000045DC30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rdi = rsp + 0x20<64>
	rsi = rcx
	rbp = rdx
	rdx = rcx
	rbx = r8
	rcx = rdi
	call fn000000000045DD70 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045DC8D
	// succ:  l000000000045DC58 l000000000045DC8D
l000000000045DC58:
	rax = Mem0[rsi:word64]
	r8 = rbx
	rdx = rbp
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rsi + 0xE8<64> + rax:word64]
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rbx - rax)
	branch Test(EQ,Z) l000000000045DC8D
	// succ:  l000000000045DC78 l000000000045DC8D
l000000000045DC78:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	// succ:  l000000000045DC8D
l000000000045DC8D:
	r8 = Mem0[rsp + 0x28<64>:word64]
	rax = Mem0[r8:word64]
	rbx = r8
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	SZO = cond(Mem0[rbx + 0x19<64>:byte] & 0x20<8>)
	C = false
	branch Test(EQ,Z) l000000000045DCC2
	// succ:  l000000000045DCA2 l000000000045DCC2
l000000000045DCA2:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000045DCC2
	// succ:  l000000000045DCAB l000000000045DCC2
l000000000045DCAB:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045DCC2
	// succ:  l000000000045DCB7 l000000000045DCC2
l000000000045DCB7:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000045DCD0
	// succ:  l000000000045DCC2 l000000000045DCD0
l000000000045DCC2:
	rax = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045DC30_exit
l000000000045DCD0:
	rcx = Mem0[rsp + 0x28<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045DC30_exit
fn000000000045DC30_exit:


// fn000000000045DD70
// Return size: 8
define fn000000000045DD70
fn000000000045DD70_entry:
	rsp = fp
	// succ:  l000000000045DD70
l000000000045DD70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rsi = rcx
	Mem0[rcx:byte] = 0<8>
	rcx = rdx
	Mem0[rsi + 8<64>:word64] = rdx
	rbx = rdx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	rax = rcx
	rcx = Mem0[rcx + 0xD8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045DDB2
	// succ:  l000000000045DD9C l000000000045DDB2
l000000000045DD9C:
	edx = Mem0[rax + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000045DDC3
	// succ:  l000000000045DDA3 l000000000045DDC3
l000000000045DDA3:
	call fn000000000045D8D0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	rax = rbx
	// succ:  l000000000045DDB2
l000000000045DDB2:
	edx = Mem0[rax + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000045DDC3
	// succ:  l000000000045DDB9 l000000000045DDC3
l000000000045DDB9:
	Mem0[rsi:byte] = 1<8>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045DD70_exit
l000000000045DDC3:
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045DDCF_thunk_fn000000000046EB40
l000000000045DDCF_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn000000000045DD70_exit
fn000000000045DD70_exit:


// fn000000000045DDE0
// Return size: 8
define fn000000000045DDE0
fn000000000045DDE0_entry:
	rsp = fp
	// succ:  l000000000045DDE0
l000000000045DDE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rsi = rcx
	Mem0[rcx:byte] = 0<8>
	rcx = rdx
	Mem0[rsi + 8<64>:word64] = rdx
	rbx = rdx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	rax = rcx
	rcx = Mem0[rcx + 0xD8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045DE22
	// succ:  l000000000045DE0C l000000000045DE22
l000000000045DE0C:
	edx = Mem0[rax + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000045DE33
	// succ:  l000000000045DE13 l000000000045DE33
l000000000045DE13:
	call fn000000000045D8D0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	rax = rbx
	// succ:  l000000000045DE22
l000000000045DE22:
	edx = Mem0[rax + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000045DE33
	// succ:  l000000000045DE29 l000000000045DE33
l000000000045DE29:
	Mem0[rsi:byte] = 1<8>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045DDE0_exit
l000000000045DE33:
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045DE3F_thunk_fn000000000046EB40
l000000000045DE3F_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn000000000045DDE0_exit
fn000000000045DDE0_exit:


// fn000000000045DE50
// Return size: 8
define fn000000000045DE50
fn000000000045DE50_entry:
	rsp = fp
	// succ:  l000000000045DE50
l000000000045DE50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 8<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000045DE8D
	// succ:  l000000000045DE6A l000000000045DE8D
l000000000045DE6A:
	rsi = rcx
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000045DE8D
	// succ:  l000000000045DE76 l000000000045DE8D
l000000000045DE76:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045DE8D
	// succ:  l000000000045DE82 l000000000045DE8D
l000000000045DE82:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000045DE94
	// succ:  l000000000045DE8D l000000000045DE94
l000000000045DE8D:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045DE50_exit
l000000000045DE94:
	rcx = Mem0[rsi + 8<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045DEAB_thunk_fn000000000046EB40
l000000000045DEAB_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn000000000045DE50_exit
fn000000000045DE50_exit:


// fn000000000045DEB0
// Return size: 8
define fn000000000045DEB0
fn000000000045DEB0_entry:
	rsp = fp
	// succ:  l000000000045DEB0
l000000000045DEB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 8<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000045DEED
	// succ:  l000000000045DECA l000000000045DEED
l000000000045DECA:
	rsi = rcx
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000045DEED
	// succ:  l000000000045DED6 l000000000045DEED
l000000000045DED6:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045DEED
	// succ:  l000000000045DEE2 l000000000045DEED
l000000000045DEE2:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000045DEF4
	// succ:  l000000000045DEED l000000000045DEF4
l000000000045DEED:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045DEB0_exit
l000000000045DEF4:
	rcx = Mem0[rsi + 8<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045DF0B_thunk_fn000000000046EB40
l000000000045DF0B_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn000000000045DEB0_exit
fn000000000045DEB0_exit:


// fn000000000045DF10
// Return size: 8
define fn000000000045DF10
fn000000000045DF10_entry:
	rsp = fp
	// succ:  l000000000045DF10
l000000000045DF10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rsi = r8
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = Mem0[rcx + 0xE8<64> + rax:word64]
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rsi - rax)
	branch Test(EQ,Z) l000000000045DF51
	// succ:  l000000000045DF36 l000000000045DF51
l000000000045DF36:
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045DF4C_thunk_fn000000000046EB40
l000000000045DF4C_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn000000000045DF10_exit
l000000000045DF51:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045DF10_exit
fn000000000045DF10_exit:


// fn000000000045DF60
// Return size: 0
define fn000000000045DF60
fn000000000045DF60_entry:
	rsp = fp
	// succ:  l000000000045DF60
l000000000045DF60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x50<64>
	rsi = rcx
	r12 = rdx
	rdx = rcx
	rcx = rbp
	call fn000000000045DD70 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x50<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045E016
	// succ:  l000000000045DF8B l000000000045E016
l000000000045DF8B:
	rax = Mem0[rsi:word64]
	rbx = rsi
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	rdi = Mem0[rbx + 0xF8<64>:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000045E0B9
	// succ:  l000000000045DFA5 l000000000045E0B9
l000000000045DFA5:
	SCZO = cond(Mem0[rbx + 0xE2<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045E060
	// succ:  l000000000045DFB2 l000000000045E060
l000000000045DFB2:
	eax = CONVERT(Mem0[rbx + 0xE0<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r9 = rbx
	// succ:  l000000000045DFBC
l000000000045DFBC:
	rdx = Mem0[r9 + 0xE8<64>:word64]
	r8d = 0<32>
	r8 = CONVERT(r8d, word32, uint64)
	eax = CONVERT(ax, word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rcx = rsp + 0x40<64>
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rsp + 0x30<64>:word64] = rdx
	rdx = rdi
	r8b = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rsp + 0x38<64>:word64] = r8
	r10 = Mem0[rdi:word64]
	r8 = rsp + 0x30<64>
	Mem0[rsp + 0x28<64>:word64] = r12
	Mem0[rsp + 0x20<64>:word32] = eax
	call Mem0[r10 + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x48<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045E016
	// succ:  l000000000045E001 l000000000045E016
l000000000045E001:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	// succ:  l000000000045E016
l000000000045E016:
	rax = Mem0[rsp + 0x58<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000045E04B
	// succ:  l000000000045E02B l000000000045E04B
l000000000045E02B:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000045E04B
	// succ:  l000000000045E034 l000000000045E04B
l000000000045E034:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045E04B
	// succ:  l000000000045E040 l000000000045E04B
l000000000045E040:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000045E094
	// succ:  l000000000045E04B l000000000045E094
l000000000045E04B:
	rax = rsi
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045DF60_exit
l000000000045E060:
	rcx = Mem0[rbx + 0xF0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045E0E2
	// succ:  l000000000045E06C l000000000045E0E2
l000000000045E06C:
	rax = Mem0[rcx:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rdx = Mem0[rsi:word64]
	r9 = rsi
	Mem0[rbx + 0xE0<64>:word16] = ax
	Mem0[rbx + 0xE2<64>:byte] = 1<8>
	r9 = r9 + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(r9)
	goto l000000000045DFBC
	// succ:  l000000000045DFBC
l000000000045E094:
	rcx = Mem0[rsp + 0x58<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045DF60_exit
l000000000045E0B9:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045E109
	// succ:  l000000000045E0C7 l000000000045E109
l000000000045E0C7:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v24 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v24
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045E104
	// succ:  l000000000045E0DD l000000000045E104
l000000000045E0DD:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045E0E2
l000000000045E0E2:
	call fn0000000000470820 (retsize: 8;)
	rbx = rax
	// succ:  l000000000045E0EA
l000000000045E0EA:
	rcx = rbp
	call fn000000000045DE50 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045E0EA
	// succ:  l000000000045E0EA
l000000000045E104:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045E109
l000000000045E109:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdi = rsi
	rdi = rdi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdi)
	v25 = Mem0[rdi + 0x20<64>:word32] | 1<32>
	Mem0[rdi + 0x20<64>:word32] = v25
	SZO = cond(Mem0[rdi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rdi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045E12C
	// succ:  l000000000045E122 l000000000045E12C
l000000000045E122:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045E016
	// succ:  l000000000045E016
l000000000045E12C:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045E0EA
	// succ:  l000000000045E0EA
fn000000000045DF60_exit:


// fn000000000045E140
// Return size: 0
define fn000000000045E140
fn000000000045E140_entry:
	rsp = fp
	// succ:  l000000000045E140
l000000000045E140:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r12 = rsp + 0x50<64>
	rsi = rcx
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	rdx = rcx
	rcx = r12
	call fn000000000045DD70 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x50<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045E1F7
	// succ:  l000000000045E16A l000000000045E1F7
l000000000045E16A:
	rax = Mem0[rsi:word64]
	rbx = rsi
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	rbp = Mem0[rbx + 0xF8<64>:word64]
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000045E299
	// succ:  l000000000045E184 l000000000045E299
l000000000045E184:
	SCZO = cond(Mem0[rbx + 0xE2<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045E240
	// succ:  l000000000045E191 l000000000045E240
l000000000045E191:
	eax = CONVERT(Mem0[rbx + 0xE0<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r9 = rbx
	// succ:  l000000000045E19B
l000000000045E19B:
	r8 = Mem0[r9 + 0xE8<64>:word64]
	edx = 0<32>
	rdx = CONVERT(edx, word32, uint64)
	edi = CONVERT(dil, byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	eax = CONVERT(ax, word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rcx = rsp + 0x40<64>
	SZO = cond(r8 & r8)
	C = false
	Mem0[rsp + 0x30<64>:word64] = r8
	r8 = rsp + 0x30<64>
	dl = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rsp + 0x38<64>:word64] = rdx
	r10 = Mem0[rbp + 0<64>:word64]
	rdx = rbp
	Mem0[rsp + 0x28<64>:word32] = edi
	Mem0[rsp + 0x20<64>:word32] = eax
	call Mem0[r10 + 0x10<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x48<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045E1F7
	// succ:  l000000000045E1E2 l000000000045E1F7
l000000000045E1E2:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	// succ:  l000000000045E1F7
l000000000045E1F7:
	rax = Mem0[rsp + 0x58<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000045E22C
	// succ:  l000000000045E20C l000000000045E22C
l000000000045E20C:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000045E22C
	// succ:  l000000000045E215 l000000000045E22C
l000000000045E215:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045E22C
	// succ:  l000000000045E221 l000000000045E22C
l000000000045E221:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000045E274
	// succ:  l000000000045E22C l000000000045E274
l000000000045E22C:
	rax = rsi
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045E140_exit
l000000000045E240:
	rcx = Mem0[rbx + 0xF0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045E2C2
	// succ:  l000000000045E24C l000000000045E2C2
l000000000045E24C:
	rax = Mem0[rcx:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rdx = Mem0[rsi:word64]
	r9 = rsi
	Mem0[rbx + 0xE0<64>:word16] = ax
	Mem0[rbx + 0xE2<64>:byte] = 1<8>
	r9 = r9 + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(r9)
	goto l000000000045E19B
	// succ:  l000000000045E19B
l000000000045E274:
	rcx = Mem0[rsp + 0x58<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045E140_exit
l000000000045E299:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045E2E9
	// succ:  l000000000045E2A7 l000000000045E2E9
l000000000045E2A7:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v25 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v25
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045E2E4
	// succ:  l000000000045E2BD l000000000045E2E4
l000000000045E2BD:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045E2C2
l000000000045E2C2:
	call fn0000000000470820 (retsize: 8;)
	rbx = rax
	// succ:  l000000000045E2CA
l000000000045E2CA:
	rcx = r12
	call fn000000000045DE50 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045E2CA
	// succ:  l000000000045E2CA
l000000000045E2E4:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045E2E9
l000000000045E2E9:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdi = rsi
	rdi = rdi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdi)
	v26 = Mem0[rdi + 0x20<64>:word32] | 1<32>
	Mem0[rdi + 0x20<64>:word32] = v26
	SZO = cond(Mem0[rdi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rdi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045E30C
	// succ:  l000000000045E302 l000000000045E30C
l000000000045E302:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045E1F7
	// succ:  l000000000045E1F7
l000000000045E30C:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045E2CA
	// succ:  l000000000045E2CA
fn000000000045E140_exit:


// fn000000000045E320
// Return size: 0
define fn000000000045E320
fn000000000045E320_entry:
	rsp = fp
	// succ:  l000000000045E320
l000000000045E320:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x78<64>
	SCZO = cond(rsp)
	Mem0[rsp + 0x60<64>:word128] = xmm6
	rbp = rsp + 0x50<64>
	rdx = rcx
	rsi = rcx
	xmm6 = xmm1
	rcx = rbp
	call fn000000000045DD70 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x50<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045E3D9
	// succ:  l000000000045E34F l000000000045E3D9
l000000000045E34F:
	rax = Mem0[rsi:word64]
	rbx = rsi
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	rdi = Mem0[rbx + 0xF8<64>:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000045E46D
	// succ:  l000000000045E369 l000000000045E46D
l000000000045E369:
	SCZO = cond(Mem0[rbx + 0xE2<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045E420
	// succ:  l000000000045E376 l000000000045E420
l000000000045E376:
	eax = CONVERT(Mem0[rbx + 0xE0<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r9 = rbx
	// succ:  l000000000045E380
l000000000045E380:
	r8 = Mem0[r9 + 0xE8<64>:word64]
	edx = 0<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(ax, word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rcx = rsp + 0x40<64>
	SZO = cond(r8 & r8)
	C = false
	Mem0[rsp + 0x30<64>:word64] = r8
	r8 = rsp + 0x30<64>
	dl = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rsp + 0x38<64>:word64] = rdx
	r10 = Mem0[rdi:word64]
	rdx = rdi
	Mem0[rsp + 0x28<64>:real64] = SLICE(xmm6, real64, 0)
	Mem0[rsp + 0x20<64>:word32] = eax
	call Mem0[r10 + 0x38<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x48<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045E3D9
	// succ:  l000000000045E3C4 l000000000045E3D9
l000000000045E3C4:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	// succ:  l000000000045E3D9
l000000000045E3D9:
	rax = Mem0[rsp + 0x58<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000045E40E
	// succ:  l000000000045E3EE l000000000045E40E
l000000000045E3EE:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000045E40E
	// succ:  l000000000045E3F7 l000000000045E40E
l000000000045E3F7:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045E40E
	// succ:  l000000000045E403 l000000000045E40E
l000000000045E403:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000045E454
	// succ:  l000000000045E40E l000000000045E454
l000000000045E40E:
	xmm6 = Mem0[rsp + 0x60<64>:word128]
	rax = rsi
	rsp = rsp + 0x78<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045E320_exit
l000000000045E420:
	rcx = Mem0[rbx + 0xF0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045E496
	// succ:  l000000000045E42C l000000000045E496
l000000000045E42C:
	rax = Mem0[rcx:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rdx = Mem0[rsi:word64]
	r9 = rsi
	Mem0[rbx + 0xE0<64>:word16] = ax
	Mem0[rbx + 0xE2<64>:byte] = 1<8>
	r9 = r9 + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(r9)
	goto l000000000045E380
	// succ:  l000000000045E380
l000000000045E454:
	rcx = Mem0[rsp + 0x58<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	goto l000000000045E40E
	// succ:  l000000000045E40E
l000000000045E46D:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045E4BD
	// succ:  l000000000045E47B l000000000045E4BD
l000000000045E47B:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v24 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v24
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045E4B8
	// succ:  l000000000045E491 l000000000045E4B8
l000000000045E491:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045E496
l000000000045E496:
	call fn0000000000470820 (retsize: 8;)
	rbx = rax
	// succ:  l000000000045E49E
l000000000045E49E:
	rcx = rbp
	call fn000000000045DE50 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045E49E
	// succ:  l000000000045E49E
l000000000045E4B8:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045E4BD
l000000000045E4BD:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdi = rsi
	rdi = rdi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdi)
	v25 = Mem0[rdi + 0x20<64>:word32] | 1<32>
	Mem0[rdi + 0x20<64>:word32] = v25
	SZO = cond(Mem0[rdi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rdi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045E4E0
	// succ:  l000000000045E4D6 l000000000045E4E0
l000000000045E4D6:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045E3D9
	// succ:  l000000000045E3D9
l000000000045E4E0:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045E49E
	// succ:  l000000000045E49E
fn000000000045E320_exit:


// fn000000000045E4F0
// Return size: 8
define fn000000000045E4F0
fn000000000045E4F0_entry:
	rsp = fp
	// succ:  l000000000045E4F0
l000000000045E4F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rdx:real80], real80, real64)
	rbp = rsp + 0x70<64>
	rdx = rcx
	rsi = rcx
	rcx = rbp
	Mem0[rsp + 0x30<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call fn000000000045DD70 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x70<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045E5B5
	// succ:  l000000000045E51F l000000000045E5B5
l000000000045E51F:
	rax = Mem0[rsi:word64]
	rbx = rsi
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	rdi = Mem0[rbx + 0xF8<64>:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000045E65A
	// succ:  l000000000045E539 l000000000045E65A
l000000000045E539:
	SCZO = cond(Mem0[rbx + 0xE2<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045E600
	// succ:  l000000000045E546 l000000000045E600
l000000000045E546:
	eax = CONVERT(Mem0[rbx + 0xE0<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r9 = rbx
	// succ:  l000000000045E550
l000000000045E550:
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rsp + 0x30<64>:real80], real80, real64)
	r8 = Mem0[r9 + 0xE8<64>:word64]
	edx = 0<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(ax, word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rcx = rsp + 0x60<64>
	SZO = cond(r8 & r8)
	C = false
	Mem0[rsp + 0x50<64>:word64] = r8
	r8 = rsp + 0x50<64>
	dl = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rsp + 0x58<64>:word64] = rdx
	r10 = Mem0[rdi:word64]
	rdx = rsp + 0x40<64>
	Mem0[rsp + 0x20<64>:word32] = eax
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rdi
	Mem0[rsp + 0x40<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call Mem0[r10 + 0x40<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x68<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045E5B5
	// succ:  l000000000045E5A0 l000000000045E5B5
l000000000045E5A0:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	// succ:  l000000000045E5B5
l000000000045E5B5:
	rax = Mem0[rsp + 0x78<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000045E5EA
	// succ:  l000000000045E5CA l000000000045E5EA
l000000000045E5CA:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000045E5EA
	// succ:  l000000000045E5D3 l000000000045E5EA
l000000000045E5D3:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045E5EA
	// succ:  l000000000045E5DF l000000000045E5EA
l000000000045E5DF:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000045E634
	// succ:  l000000000045E5EA l000000000045E634
l000000000045E5EA:
	rax = rsi
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045E4F0_exit
l000000000045E600:
	rcx = Mem0[rbx + 0xF0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045E683
	// succ:  l000000000045E60C l000000000045E683
l000000000045E60C:
	rax = Mem0[rcx:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rdx = Mem0[rsi:word64]
	r9 = rsi
	Mem0[rbx + 0xE0<64>:word16] = ax
	Mem0[rbx + 0xE2<64>:byte] = 1<8>
	r9 = r9 + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(r9)
	goto l000000000045E550
	// succ:  l000000000045E550
l000000000045E634:
	rcx = Mem0[rsp + 0x78<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045E4F0_exit
l000000000045E65A:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045E6AA
	// succ:  l000000000045E668 l000000000045E6AA
l000000000045E668:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v23 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v23
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045E6A5
	// succ:  l000000000045E67E l000000000045E6A5
l000000000045E67E:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045E683
l000000000045E683:
	call fn0000000000470820 (retsize: 8;)
	rbx = rax
	// succ:  l000000000045E68B
l000000000045E68B:
	rcx = rbp
	call fn000000000045DE50 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045E68B
	// succ:  l000000000045E68B
l000000000045E6A5:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045E6AA
l000000000045E6AA:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdi = rsi
	rdi = rdi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdi)
	v24 = Mem0[rdi + 0x20<64>:word32] | 1<32>
	Mem0[rdi + 0x20<64>:word32] = v24
	SZO = cond(Mem0[rdi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rdi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045E6CD
	// succ:  l000000000045E6C3 l000000000045E6CD
l000000000045E6C3:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045E5B5
	// succ:  l000000000045E5B5
l000000000045E6CD:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045E68B
	// succ:  l000000000045E68B
fn000000000045E4F0_exit:


// fn000000000045E6E0
// Return size: 0
define fn000000000045E6E0
fn000000000045E6E0_entry:
	rsp = fp
	// succ:  l000000000045E6E0
l000000000045E6E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x50<64>
	rsi = rcx
	r12d = edx
	r12 = CONVERT(r12d, word32, uint64)
	rdx = rcx
	rcx = rbp
	call fn000000000045DD70 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x50<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045E796
	// succ:  l000000000045E70B l000000000045E796
l000000000045E70B:
	rax = Mem0[rsi:word64]
	rbx = rsi
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	rdi = Mem0[rbx + 0xF8<64>:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000045E839
	// succ:  l000000000045E725 l000000000045E839
l000000000045E725:
	SCZO = cond(Mem0[rbx + 0xE2<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045E7E0
	// succ:  l000000000045E732 l000000000045E7E0
l000000000045E732:
	eax = CONVERT(Mem0[rbx + 0xE0<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r9 = rbx
	// succ:  l000000000045E73C
l000000000045E73C:
	rdx = Mem0[r9 + 0xE8<64>:word64]
	r8d = 0<32>
	r8 = CONVERT(r8d, word32, uint64)
	eax = CONVERT(ax, word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rcx = rsp + 0x40<64>
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rsp + 0x30<64>:word64] = rdx
	rdx = rdi
	r8b = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rsp + 0x38<64>:word64] = r8
	r10 = Mem0[rdi:word64]
	r8 = rsp + 0x30<64>
	Mem0[rsp + 0x28<64>:word32] = r12d
	Mem0[rsp + 0x20<64>:word32] = eax
	call Mem0[r10 + 0x18<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x48<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045E796
	// succ:  l000000000045E781 l000000000045E796
l000000000045E781:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	// succ:  l000000000045E796
l000000000045E796:
	rax = Mem0[rsp + 0x58<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000045E7CB
	// succ:  l000000000045E7AB l000000000045E7CB
l000000000045E7AB:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000045E7CB
	// succ:  l000000000045E7B4 l000000000045E7CB
l000000000045E7B4:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045E7CB
	// succ:  l000000000045E7C0 l000000000045E7CB
l000000000045E7C0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000045E814
	// succ:  l000000000045E7CB l000000000045E814
l000000000045E7CB:
	rax = rsi
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045E6E0_exit
l000000000045E7E0:
	rcx = Mem0[rbx + 0xF0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045E862
	// succ:  l000000000045E7EC l000000000045E862
l000000000045E7EC:
	rax = Mem0[rcx:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rdx = Mem0[rsi:word64]
	r9 = rsi
	Mem0[rbx + 0xE0<64>:word16] = ax
	Mem0[rbx + 0xE2<64>:byte] = 1<8>
	r9 = r9 + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(r9)
	goto l000000000045E73C
	// succ:  l000000000045E73C
l000000000045E814:
	rcx = Mem0[rsp + 0x58<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045E6E0_exit
l000000000045E839:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045E889
	// succ:  l000000000045E847 l000000000045E889
l000000000045E847:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v25 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v25
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045E884
	// succ:  l000000000045E85D l000000000045E884
l000000000045E85D:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045E862
l000000000045E862:
	call fn0000000000470820 (retsize: 8;)
	rbx = rax
	// succ:  l000000000045E86A
l000000000045E86A:
	rcx = rbp
	call fn000000000045DE50 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045E86A
	// succ:  l000000000045E86A
l000000000045E884:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045E889
l000000000045E889:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdi = rsi
	rdi = rdi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdi)
	v26 = Mem0[rdi + 0x20<64>:word32] | 1<32>
	Mem0[rdi + 0x20<64>:word32] = v26
	SZO = cond(Mem0[rdi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rdi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045E8AC
	// succ:  l000000000045E8A2 l000000000045E8AC
l000000000045E8A2:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045E796
	// succ:  l000000000045E796
l000000000045E8AC:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045E86A
	// succ:  l000000000045E86A
fn000000000045E6E0_exit:


// fn000000000045E8C0
// Return size: 0
define fn000000000045E8C0
fn000000000045E8C0_entry:
	rsp = fp
	// succ:  l000000000045E8C0
l000000000045E8C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x50<64>
	rsi = rcx
	r12d = edx
	r12 = CONVERT(r12d, word32, uint64)
	rdx = rcx
	rcx = rbp
	call fn000000000045DD70 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x50<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045E976
	// succ:  l000000000045E8EB l000000000045E976
l000000000045E8EB:
	rax = Mem0[rsi:word64]
	rbx = rsi
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	rdi = Mem0[rbx + 0xF8<64>:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000045EA19
	// succ:  l000000000045E905 l000000000045EA19
l000000000045E905:
	SCZO = cond(Mem0[rbx + 0xE2<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045E9C0
	// succ:  l000000000045E912 l000000000045E9C0
l000000000045E912:
	eax = CONVERT(Mem0[rbx + 0xE0<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r9 = rbx
	// succ:  l000000000045E91C
l000000000045E91C:
	rdx = Mem0[r9 + 0xE8<64>:word64]
	r8d = 0<32>
	r8 = CONVERT(r8d, word32, uint64)
	eax = CONVERT(ax, word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rcx = rsp + 0x40<64>
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rsp + 0x30<64>:word64] = rdx
	rdx = rdi
	r8b = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rsp + 0x38<64>:word64] = r8
	r10 = Mem0[rdi:word64]
	r8 = rsp + 0x30<64>
	Mem0[rsp + 0x28<64>:word32] = r12d
	Mem0[rsp + 0x20<64>:word32] = eax
	call Mem0[r10 + 0x20<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x48<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045E976
	// succ:  l000000000045E961 l000000000045E976
l000000000045E961:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	// succ:  l000000000045E976
l000000000045E976:
	rax = Mem0[rsp + 0x58<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000045E9AB
	// succ:  l000000000045E98B l000000000045E9AB
l000000000045E98B:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000045E9AB
	// succ:  l000000000045E994 l000000000045E9AB
l000000000045E994:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045E9AB
	// succ:  l000000000045E9A0 l000000000045E9AB
l000000000045E9A0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000045E9F4
	// succ:  l000000000045E9AB l000000000045E9F4
l000000000045E9AB:
	rax = rsi
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045E8C0_exit
l000000000045E9C0:
	rcx = Mem0[rbx + 0xF0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045EA42
	// succ:  l000000000045E9CC l000000000045EA42
l000000000045E9CC:
	rax = Mem0[rcx:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rdx = Mem0[rsi:word64]
	r9 = rsi
	Mem0[rbx + 0xE0<64>:word16] = ax
	Mem0[rbx + 0xE2<64>:byte] = 1<8>
	r9 = r9 + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(r9)
	goto l000000000045E91C
	// succ:  l000000000045E91C
l000000000045E9F4:
	rcx = Mem0[rsp + 0x58<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045E8C0_exit
l000000000045EA19:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045EA69
	// succ:  l000000000045EA27 l000000000045EA69
l000000000045EA27:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v25 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v25
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045EA64
	// succ:  l000000000045EA3D l000000000045EA64
l000000000045EA3D:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045EA42
l000000000045EA42:
	call fn0000000000470820 (retsize: 8;)
	rbx = rax
	// succ:  l000000000045EA4A
l000000000045EA4A:
	rcx = rbp
	call fn000000000045DE50 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045EA4A
	// succ:  l000000000045EA4A
l000000000045EA64:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045EA69
l000000000045EA69:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdi = rsi
	rdi = rdi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdi)
	v26 = Mem0[rdi + 0x20<64>:word32] | 1<32>
	Mem0[rdi + 0x20<64>:word32] = v26
	SZO = cond(Mem0[rdi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rdi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045EA8C
	// succ:  l000000000045EA82 l000000000045EA8C
l000000000045EA82:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045E976
	// succ:  l000000000045E976
l000000000045EA8C:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045EA4A
	// succ:  l000000000045EA4A
fn000000000045E8C0_exit:


// fn000000000045EAA0
// Return size: 0
define fn000000000045EAA0
fn000000000045EAA0_entry:
	rsp = fp
	// succ:  l000000000045EAA0
l000000000045EAA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x50<64>
	rsi = rcx
	r12 = rdx
	rdx = rcx
	rcx = rbp
	call fn000000000045DD70 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x50<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045EB56
	// succ:  l000000000045EACB l000000000045EB56
l000000000045EACB:
	rax = Mem0[rsi:word64]
	rbx = rsi
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	rdi = Mem0[rbx + 0xF8<64>:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000045EBF9
	// succ:  l000000000045EAE5 l000000000045EBF9
l000000000045EAE5:
	SCZO = cond(Mem0[rbx + 0xE2<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045EBA0
	// succ:  l000000000045EAF2 l000000000045EBA0
l000000000045EAF2:
	eax = CONVERT(Mem0[rbx + 0xE0<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r9 = rbx
	// succ:  l000000000045EAFC
l000000000045EAFC:
	rdx = Mem0[r9 + 0xE8<64>:word64]
	r8d = 0<32>
	r8 = CONVERT(r8d, word32, uint64)
	eax = CONVERT(ax, word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rcx = rsp + 0x40<64>
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rsp + 0x30<64>:word64] = rdx
	rdx = rdi
	r8b = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rsp + 0x38<64>:word64] = r8
	r10 = Mem0[rdi:word64]
	r8 = rsp + 0x30<64>
	Mem0[rsp + 0x28<64>:word64] = r12
	Mem0[rsp + 0x20<64>:word32] = eax
	call Mem0[r10 + 0x28<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x48<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045EB56
	// succ:  l000000000045EB41 l000000000045EB56
l000000000045EB41:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	// succ:  l000000000045EB56
l000000000045EB56:
	rax = Mem0[rsp + 0x58<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000045EB8B
	// succ:  l000000000045EB6B l000000000045EB8B
l000000000045EB6B:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000045EB8B
	// succ:  l000000000045EB74 l000000000045EB8B
l000000000045EB74:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045EB8B
	// succ:  l000000000045EB80 l000000000045EB8B
l000000000045EB80:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000045EBD4
	// succ:  l000000000045EB8B l000000000045EBD4
l000000000045EB8B:
	rax = rsi
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045EAA0_exit
l000000000045EBA0:
	rcx = Mem0[rbx + 0xF0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045EC22
	// succ:  l000000000045EBAC l000000000045EC22
l000000000045EBAC:
	rax = Mem0[rcx:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rdx = Mem0[rsi:word64]
	r9 = rsi
	Mem0[rbx + 0xE0<64>:word16] = ax
	Mem0[rbx + 0xE2<64>:byte] = 1<8>
	r9 = r9 + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(r9)
	goto l000000000045EAFC
	// succ:  l000000000045EAFC
l000000000045EBD4:
	rcx = Mem0[rsp + 0x58<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045EAA0_exit
l000000000045EBF9:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045EC49
	// succ:  l000000000045EC07 l000000000045EC49
l000000000045EC07:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v24 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v24
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045EC44
	// succ:  l000000000045EC1D l000000000045EC44
l000000000045EC1D:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045EC22
l000000000045EC22:
	call fn0000000000470820 (retsize: 8;)
	rbx = rax
	// succ:  l000000000045EC2A
l000000000045EC2A:
	rcx = rbp
	call fn000000000045DE50 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045EC2A
	// succ:  l000000000045EC2A
l000000000045EC44:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045EC49
l000000000045EC49:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdi = rsi
	rdi = rdi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdi)
	v25 = Mem0[rdi + 0x20<64>:word32] | 1<32>
	Mem0[rdi + 0x20<64>:word32] = v25
	SZO = cond(Mem0[rdi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rdi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045EC6C
	// succ:  l000000000045EC62 l000000000045EC6C
l000000000045EC62:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045EB56
	// succ:  l000000000045EB56
l000000000045EC6C:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045EC2A
	// succ:  l000000000045EC2A
fn000000000045EAA0_exit:


// fn000000000045EC80
// Return size: 0
define fn000000000045EC80
fn000000000045EC80_entry:
	rsp = fp
	// succ:  l000000000045EC80
l000000000045EC80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x50<64>
	rsi = rcx
	r12 = rdx
	rdx = rcx
	rcx = rbp
	call fn000000000045DD70 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x50<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045ED36
	// succ:  l000000000045ECAB l000000000045ED36
l000000000045ECAB:
	rax = Mem0[rsi:word64]
	rbx = rsi
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	rdi = Mem0[rbx + 0xF8<64>:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000045EDD9
	// succ:  l000000000045ECC5 l000000000045EDD9
l000000000045ECC5:
	SCZO = cond(Mem0[rbx + 0xE2<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045ED80
	// succ:  l000000000045ECD2 l000000000045ED80
l000000000045ECD2:
	eax = CONVERT(Mem0[rbx + 0xE0<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r9 = rbx
	// succ:  l000000000045ECDC
l000000000045ECDC:
	rdx = Mem0[r9 + 0xE8<64>:word64]
	r8d = 0<32>
	r8 = CONVERT(r8d, word32, uint64)
	eax = CONVERT(ax, word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rcx = rsp + 0x40<64>
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rsp + 0x30<64>:word64] = rdx
	rdx = rdi
	r8b = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rsp + 0x38<64>:word64] = r8
	r10 = Mem0[rdi:word64]
	r8 = rsp + 0x30<64>
	Mem0[rsp + 0x28<64>:word64] = r12
	Mem0[rsp + 0x20<64>:word32] = eax
	call Mem0[r10 + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x48<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045ED36
	// succ:  l000000000045ED21 l000000000045ED36
l000000000045ED21:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	// succ:  l000000000045ED36
l000000000045ED36:
	rax = Mem0[rsp + 0x58<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000045ED6B
	// succ:  l000000000045ED4B l000000000045ED6B
l000000000045ED4B:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000045ED6B
	// succ:  l000000000045ED54 l000000000045ED6B
l000000000045ED54:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045ED6B
	// succ:  l000000000045ED60 l000000000045ED6B
l000000000045ED60:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000045EDB4
	// succ:  l000000000045ED6B l000000000045EDB4
l000000000045ED6B:
	rax = rsi
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045EC80_exit
l000000000045ED80:
	rcx = Mem0[rbx + 0xF0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045EE02
	// succ:  l000000000045ED8C l000000000045EE02
l000000000045ED8C:
	rax = Mem0[rcx:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rdx = Mem0[rsi:word64]
	r9 = rsi
	Mem0[rbx + 0xE0<64>:word16] = ax
	Mem0[rbx + 0xE2<64>:byte] = 1<8>
	r9 = r9 + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(r9)
	goto l000000000045ECDC
	// succ:  l000000000045ECDC
l000000000045EDB4:
	rcx = Mem0[rsp + 0x58<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045EC80_exit
l000000000045EDD9:
	call fn0000000000470820 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(NE,Z) l000000000045EE29
	// succ:  l000000000045EDE7 l000000000045EE29
l000000000045EDE7:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v24 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v24
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000045EE24
	// succ:  l000000000045EDFD l000000000045EE24
l000000000045EDFD:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045EE02
l000000000045EE02:
	call fn0000000000470820 (retsize: 8;)
	rbx = rax
	// succ:  l000000000045EE0A
l000000000045EE0A:
	rcx = rbp
	call fn000000000045DE50 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045EE0A
	// succ:  l000000000045EE0A
l000000000045EE24:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000045EE29
l000000000045EE29:
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdi = rsi
	rdi = rdi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdi)
	v25 = Mem0[rdi + 0x20<64>:word32] | 1<32>
	Mem0[rdi + 0x20<64>:word32] = v25
	SZO = cond(Mem0[rdi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rdi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000045EE4C
	// succ:  l000000000045EE42 l000000000045EE4C
l000000000045EE42:
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045ED36
	// succ:  l000000000045ED36
l000000000045EE4C:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	goto l000000000045EE0A
	// succ:  l000000000045EE0A
fn000000000045EC80_exit:


// fn000000000045EE60
// Return size: 8
define fn000000000045EE60
fn000000000045EE60_entry:
	rsp = fp
	// succ:  l000000000045EE60
l000000000045EE60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 8<64>
	rbx = rcx
	rdi = rdx
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0xE0<64>:word64] = 0<64>
	Mem0[rbx + 0xEA<64>:byte] = 0<8>
	Mem0[rbx + 0xE8<64>:word16] = ax
	rax = 0x0000000000496998<p64>
	Mem0[rbx + 0xF0<64>:word64] = 0<64>
	Mem0[rbx + 0xF8<64>:word64] = 0<64>
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	rdx = rdi
	Mem0[rbx:word64] = rax
	rax = 0x00000000004969C0<p64>
	Mem0[rbx + 0x108<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 8<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045EE60_exit
fn000000000045EE60_exit:


// fn000000000045EF10
// Return size: 8
define fn000000000045EF10
fn000000000045EF10_entry:
	rsp = fp
	// succ:  l000000000045EF10
l000000000045EF10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 8<64>
	rbx = rcx
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0xE0<64>:word64] = 0<64>
	Mem0[rbx + 0xEA<64>:byte] = 0<8>
	Mem0[rbx + 0xE8<64>:word16] = ax
	rax = 0x0000000000496998<p64>
	Mem0[rbx + 0xF0<64>:word64] = 0<64>
	Mem0[rbx + 0xF8<64>:word64] = 0<64>
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x00000000004969C0<p64>
	Mem0[rbx + 0x108<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 8<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045EF10_exit
fn000000000045EF10_exit:


// fn000000000045EFC0
// Return size: 8
define fn000000000045EFC0
fn000000000045EFC0_entry:
	rsp = fp
	// succ:  l000000000045EFC0
l000000000045EFC0:
	r9 = Mem0[rdx:word64]
	Mem0[rcx:word64] = r9
	rcx = rcx + Mem0[r9 - 0x18<64>:word64]
	SCZO = cond(rcx)
	rax = Mem0[rdx + 8<64>:word64]
	rdx = r8
	Mem0[rcx:word64] = rax
	// succ:  l000000000045EFD4_thunk_fn000000000046EAE0
l000000000045EFD4_thunk_fn000000000046EAE0:
	call fn000000000046EAE0 (retsize: 0;)
	return
	// succ:  fn000000000045EFC0_exit
fn000000000045EFC0_exit:


// fn000000000045EFE0
// Return size: 8
define fn000000000045EFE0
fn000000000045EFE0_entry:
	rsp = fp
	// succ:  l000000000045EFE0
l000000000045EFE0:
	rax = Mem0[rdx:word64]
	Mem0[rcx:word64] = rax
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	rax = Mem0[rdx + 8<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx:word64] = rax
	// succ:  l000000000045EFF3_thunk_fn000000000046EAE0
l000000000045EFF3_thunk_fn000000000046EAE0:
	call fn000000000046EAE0 (retsize: 0;)
	return
	// succ:  fn000000000045EFE0_exit
fn000000000045EFE0_exit:


// fn000000000045F000
// Return size: 0
define fn000000000045F000
fn000000000045F000_entry:
	rsp = fp
	// succ:  l000000000045F000
l000000000045F000:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496998<p64>
	rbx = rcx
	rcx = rcx + 8<64>
	Mem0[rcx - 8<64>:word64] = rax
	rax = Mem0[0x0000000000491E30<p64>:word64]
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	call fn000000000046D3D0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045F032_thunk_fn0000000000475550
l000000000045F032_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000045F000_exit
fn000000000045F000_exit:


// fn000000000045F040
// Return size: 0
define fn000000000045F040
fn000000000045F040_entry:
	rsp = fp
	// succ:  l000000000045F040
l000000000045F040:
	rax = 0x0000000000496998<p64>
	rcx = rcx + 8<64>
	SCZO = cond(rcx)
	Mem0[rcx - 8<64>:word64] = rax
	rax = Mem0[0x0000000000491E30<p64>:word64]
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	// succ:  l000000000045F05D_thunk_fn000000000046D3D0
l000000000045F05D_thunk_fn000000000046D3D0:
	call fn000000000046D3D0 (retsize: 0;)
	return
	// succ:  fn000000000045F040_exit
fn000000000045F040_exit:


// fn000000000045F070
// Return size: 8
define fn000000000045F070
fn000000000045F070_entry:
	rsp = fp
	// succ:  l000000000045F070
l000000000045F070:
	rax = Mem0[rdx:word64]
	Mem0[rcx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rdx + 8<64>:word64]
	Mem0[rcx + rax:word64] = rdx
	return
	// succ:  fn000000000045F070_exit
fn000000000045F070_exit:


// fn000000000045F090
// Return size: 0
define fn000000000045F090
fn000000000045F090_entry:
	rsp = fp
	// succ:  l000000000045F090
l000000000045F090:
	call rdx (retsize: 0;)
	return
	// succ:  fn000000000045F090_exit
fn000000000045F090_exit:


// fn000000000045F0A0
// Return size: 8
define fn000000000045F0A0
fn000000000045F0A0_entry:
	rsp = fp
	// succ:  l000000000045F0A0
l000000000045F0A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call rdx (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F0A0_exit
fn000000000045F0A0_exit:


// fn000000000045F0C0
// Return size: 8
define fn000000000045F0C0
fn000000000045F0C0_entry:
	rsp = fp
	// succ:  l000000000045F0C0
l000000000045F0C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = rcx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call rdx (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F0C0_exit
fn000000000045F0C0_exit:


// fn000000000045F0E0
// Return size: 8
define fn000000000045F0E0
fn000000000045F0E0_entry:
	rsp = fp
	// succ:  l000000000045F0E0
l000000000045F0E0:
	// succ:  l000000000045F0E0_thunk_fn000000000045DF60
l000000000045F0E0_thunk_fn000000000045DF60:
	call fn000000000045DF60 (retsize: 0;)
	return
	// succ:  fn000000000045F0E0_exit
fn000000000045F0E0_exit:


// fn000000000045F0F0
// Return size: 8
define fn000000000045F0F0
fn000000000045F0F0_entry:
	rsp = fp
	// succ:  l000000000045F0F0
l000000000045F0F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rdi = rsp + 0x30<64>
	rbx = rdx
	rsi = rcx
	rdx = rcx
	rcx = rdi
	call fn000000000045DD70 (retsize: 8;)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000045F180
	// succ:  l000000000045F112 l000000000045F180
l000000000045F112:
	SCZO = cond(Mem0[rsp + 0x30<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000045F180
	// succ:  l000000000045F119 l000000000045F180
l000000000045F119:
	rax = Mem0[rsi:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0xE8<64> + rax:word64]
	call fn0000000000471150 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(EQ,Z) l000000000045F18A
	// succ:  l000000000045F13F l000000000045F18A
l000000000045F13F:
	r8 = Mem0[rsp + 0x38<64>:word64]
	rax = Mem0[r8:word64]
	rbx = r8
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	SZO = cond(Mem0[rbx + 0x19<64>:byte] & 0x20<8>)
	C = false
	branch Test(EQ,Z) l000000000045F174
	// succ:  l000000000045F154 l000000000045F174
l000000000045F154:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000045F174
	// succ:  l000000000045F15D l000000000045F174
l000000000045F15D:
	rcx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000045F174
	// succ:  l000000000045F169 l000000000045F174
l000000000045F169:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000045F1A0
	// succ:  l000000000045F174 l000000000045F1A0
l000000000045F174:
	rax = rsi
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F0F0_exit
l000000000045F180:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l000000000045F13F
	// succ:  l000000000045F185 l000000000045F13F
l000000000045F185:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000045F18A
l000000000045F18A:
	rax = Mem0[rsi:word64]
	rcx = rsi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	goto l000000000045F13F
	// succ:  l000000000045F13F
l000000000045F1A0:
	rcx = Mem0[rsp + 0x38<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F0F0_exit
fn000000000045F0F0_exit:


// fn000000000045F240
// Return size: 8
define fn000000000045F240
fn000000000045F240_entry:
	rsp = fp
	// succ:  l000000000045F240
l000000000045F240:
	edx = CONVERT(dl, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000045F243_thunk_fn000000000045E140
l000000000045F243_thunk_fn000000000045E140:
	call fn000000000045E140 (retsize: 0;)
	return
	// succ:  fn000000000045F240_exit
fn000000000045F240_exit:


// fn000000000045F250
// Return size: 0
define fn000000000045F250
fn000000000045F250_entry:
	rsp = fp
	// succ:  l000000000045F250
l000000000045F250:
	// succ:  l000000000045F250_thunk_fn000000000045E320
l000000000045F250_thunk_fn000000000045E320:
	call fn000000000045E320 (retsize: 0;)
	return
	// succ:  fn000000000045F250_exit
fn000000000045F250_exit:


// fn000000000045F260
// Return size: 8
define fn000000000045F260
fn000000000045F260_entry:
	rsp = fp
	// succ:  l000000000045F260
l000000000045F260:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rdx:real80], real80, real64)
	rdx = rsp + 0x20<64>
	Mem0[rsp + 0x20<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call fn000000000045E4F0 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000045F260_exit
fn000000000045F260_exit:


// fn000000000045F280
// Return size: 8
define fn000000000045F280
fn000000000045F280_entry:
	rsp = fp
	// succ:  l000000000045F280
l000000000045F280:
	v4 = CONVERT(SLICE(xmm1, real32, 0), real32, real64)
	xmm1 = SEQ(SLICE(xmm1, word64, 64), v4)
	// succ:  l000000000045F284_thunk_fn000000000045E320
l000000000045F284_thunk_fn000000000045E320:
	call fn000000000045E320 (retsize: 0;)
	return
	// succ:  fn000000000045F280_exit
fn000000000045F280_exit:


// fn000000000045F290
// Return size: 0
define fn000000000045F290
fn000000000045F290_entry:
	rsp = fp
	// succ:  l000000000045F290
l000000000045F290:
	// succ:  l000000000045F290_thunk_fn000000000045E6E0
l000000000045F290_thunk_fn000000000045E6E0:
	call fn000000000045E6E0 (retsize: 0;)
	return
	// succ:  fn000000000045F290_exit
fn000000000045F290_exit:


// fn000000000045F2A0
// Return size: 0
define fn000000000045F2A0
fn000000000045F2A0_entry:
	rsp = fp
	// succ:  l000000000045F2A0
l000000000045F2A0:
	// succ:  l000000000045F2A0_thunk_fn000000000045E8C0
l000000000045F2A0_thunk_fn000000000045E8C0:
	call fn000000000045E8C0 (retsize: 0;)
	return
	// succ:  fn000000000045F2A0_exit
fn000000000045F2A0_exit:


// fn000000000045F2B0
// Return size: 0
define fn000000000045F2B0
fn000000000045F2B0_entry:
	rsp = fp
	// succ:  l000000000045F2B0
l000000000045F2B0:
	// succ:  l000000000045F2B0_thunk_fn000000000045E6E0
l000000000045F2B0_thunk_fn000000000045E6E0:
	call fn000000000045E6E0 (retsize: 0;)
	return
	// succ:  fn000000000045F2B0_exit
fn000000000045F2B0_exit:


// fn000000000045F2C0
// Return size: 0
define fn000000000045F2C0
fn000000000045F2C0_entry:
	rsp = fp
	// succ:  l000000000045F2C0
l000000000045F2C0:
	// succ:  l000000000045F2C0_thunk_fn000000000045E8C0
l000000000045F2C0_thunk_fn000000000045E8C0:
	call fn000000000045E8C0 (retsize: 0;)
	return
	// succ:  fn000000000045F2C0_exit
fn000000000045F2C0_exit:


// fn000000000045F2D0
// Return size: 8
define fn000000000045F2D0
fn000000000045F2D0_entry:
	rsp = fp
	// succ:  l000000000045F2D0
l000000000045F2D0:
	rax = Mem0[rcx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	eax = Mem0[rcx + 0x18<64> + rax:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0x4A<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 8<32>)
	branch Test(EQ,Z) l000000000045F2F0
	// succ:  l000000000045F2E3 l000000000045F2F0
l000000000045F2E3:
	SCZO = cond(eax - 0x40<32>)
	branch Test(EQ,Z) l000000000045F2F0
	// succ:  l000000000045F2E8 l000000000045F2F0
l000000000045F2E8:
	edx = CONVERT(dx, word16, int32)
	// succ:  l000000000045F2EB_thunk_fn000000000045E6E0
l000000000045F2EB_thunk_fn000000000045E6E0:
	call fn000000000045E6E0 (retsize: 0;)
	return
	// succ:  fn000000000045F2D0_exit
l000000000045F2F0:
	edx = CONVERT(dx, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000045F2F3_thunk_fn000000000045E6E0
l000000000045F2F3_thunk_fn000000000045E6E0:
	call fn000000000045E6E0 (retsize: 0;)
	return
	// succ:  fn000000000045F2D0_exit
fn000000000045F2D0_exit:


// fn000000000045F300
// Return size: 8
define fn000000000045F300
fn000000000045F300_entry:
	rsp = fp
	// succ:  l000000000045F300
l000000000045F300:
	edx = CONVERT(dx, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000045F303_thunk_fn000000000045E8C0
l000000000045F303_thunk_fn000000000045E8C0:
	call fn000000000045E8C0 (retsize: 0;)
	return
	// succ:  fn000000000045F300_exit
fn000000000045F300_exit:


// fn000000000045F310
// Return size: 8
define fn000000000045F310
fn000000000045F310_entry:
	rsp = fp
	// succ:  l000000000045F310
l000000000045F310:
	// succ:  l000000000045F310_thunk_fn000000000045EAA0
l000000000045F310_thunk_fn000000000045EAA0:
	call fn000000000045EAA0 (retsize: 0;)
	return
	// succ:  fn000000000045F310_exit
fn000000000045F310_exit:


// fn000000000045F320
// Return size: 8
define fn000000000045F320
fn000000000045F320_entry:
	rsp = fp
	// succ:  l000000000045F320
l000000000045F320:
	// succ:  l000000000045F320_thunk_fn000000000045EC80
l000000000045F320_thunk_fn000000000045EC80:
	call fn000000000045EC80 (retsize: 0;)
	return
	// succ:  fn000000000045F320_exit
fn000000000045F320_exit:


// fn000000000045F330
// Return size: 8
define fn000000000045F330
fn000000000045F330_entry:
	rsp = fp
	// succ:  l000000000045F330
l000000000045F330:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x10<64>:word64]
	rdx = Mem0[rbp + 0x18<64>:word64]
	Mem0[rax:word64] = rdx
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F330_exit
fn000000000045F330_exit:


// fn000000000045F350
// Return size: 8
define fn000000000045F350
fn000000000045F350_entry:
	rsp = fp
	// succ:  l000000000045F350
l000000000045F350:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x10<64>:word64]
	rdx = Mem0[rbp + 0x18<64>:word64]
	Mem0[rax:word64] = rdx
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F350_exit
fn000000000045F350_exit:


// fn000000000045F370
// Return size: 8
define fn000000000045F370
fn000000000045F370_entry:
	rsp = fp
	// succ:  l000000000045F370
l000000000045F370:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax:word64]
	rdx = rax + 1<64>
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax:word64] = rdx
	rax = Mem0[rbp + 0x10<64>:word64]
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F370_exit
fn000000000045F370_exit:


// fn000000000045F390
// Return size: 8
define fn000000000045F390
fn000000000045F390_entry:
	rsp = fp
	// succ:  l000000000045F390
l000000000045F390:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496A10<p64>
	rbx = rcx
	rcx = rcx + 8<64>
	Mem0[rcx - 8<64>:word64] = rax
	call fn0000000000451F40 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F390_exit
fn000000000045F390_exit:


// fn000000000045F3D0
// Return size: 0
define fn000000000045F3D0
fn000000000045F3D0_entry:
	rsp = fp
	// succ:  l000000000045F3D0
l000000000045F3D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn000000000045F3F0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045F3E5_thunk_fn0000000000475550
l000000000045F3E5_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000045F3D0_exit
fn000000000045F3D0_exit:


// fn000000000045F3F0
// Return size: 0
define fn000000000045F3F0
fn000000000045F3F0_entry:
	rsp = fp
	// succ:  l000000000045F3F0
l000000000045F3F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496A10<p64>
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rbx = rcx
	Mem0[rcx:word64] = rax
	rax = Mem0[rcx + 8<64>:word64]
	__lock()
	Mem0[rax - 8<64>:word32] = __xadd(Mem0[rax - 8<64>:word32], edx)
	SCZO = cond(Mem0[rax - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l000000000045F423
	// succ:  l000000000045F414 l000000000045F423
l000000000045F414:
	rcx = rbx
	call fn000000000046F0F0 (retsize: 8;)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F3F0_exit
l000000000045F423:
	rcx = rax - 0x18<64>
	rdx = rsp + 0x2F<64>
	call fn0000000000450A50 (retsize: 8;)
	rcx = rbx
	call fn000000000046F0F0 (retsize: 8;)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F3F0_exit
fn000000000045F3F0_exit:


// fn000000000045F440
// Return size: 8
define fn000000000045F440
fn000000000045F440_entry:
	rsp = fp
	// succ:  l000000000045F440
l000000000045F440:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rcx + 0x10<64>
	r8d = r8d | 8<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000455970 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l000000000045F470
	// succ:  l000000000045F45D l000000000045F470
l000000000045F45D:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045F46B_thunk_fn000000000046E370
l000000000045F46B_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn000000000045F440_exit
l000000000045F470:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045F482_thunk_fn000000000046E370
l000000000045F482_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn000000000045F440_exit
fn000000000045F440_exit:


// fn000000000045F490
// Return size: 8
define fn000000000045F490
fn000000000045F490_entry:
	rsp = fp
	// succ:  l000000000045F490
l000000000045F490:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdx = Mem0[rdx:word64]
	rbx = rcx
	rcx = rcx + 0x10<64>
	r8d = r8d | 8<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000455970 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l000000000045F4C3
	// succ:  l000000000045F4B0 l000000000045F4C3
l000000000045F4B0:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045F4BE_thunk_fn000000000046E370
l000000000045F4BE_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn000000000045F490_exit
l000000000045F4C3:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045F4D5_thunk_fn000000000046E370
l000000000045F4D5_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn000000000045F490_exit
fn000000000045F490_exit:


// fn000000000045F4E0
// Return size: 8
define fn000000000045F4E0
fn000000000045F4E0_entry:
	rsp = fp
	// succ:  l000000000045F4E0
l000000000045F4E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rcx + 0x10<64>
	call fn0000000000455AB0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000045F500
	// succ:  l000000000045F4F6 l000000000045F500
l000000000045F4F6:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F4E0_exit
l000000000045F500:
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045F515_thunk_fn000000000046E370
l000000000045F515_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn000000000045F4E0_exit
fn000000000045F4E0_exit:


// fn000000000045F520
// Return size: 8
define fn000000000045F520
fn000000000045F520_entry:
	rsp = fp
	// succ:  l000000000045F520
l000000000045F520:
	rcx = rcx + 0x58<64>
	SCZO = cond(rcx)
	// succ:  l000000000045F524_thunk_fn000000000042AA50
l000000000045F524_thunk_fn000000000042AA50:
	call fn000000000042AA50 (retsize: 0;)
	return
	// succ:  fn000000000045F520_exit
fn000000000045F520_exit:


// fn000000000045F530
// Return size: 8
define fn000000000045F530
fn000000000045F530_entry:
	rsp = fp
	// succ:  l000000000045F530
l000000000045F530:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0xD0<64>
	rbx = rcx
	rbp = rdx
	r12d = r8d
	r12 = CONVERT(r12d, word32, uint64)
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	rax = 0x0000000000492CD8<p64>
	Mem0[rbx + 0x1A8<64>:word64] = 0<64>
	Mem0[rbx + 0x1B0<64>:byte] = 0<8>
	Mem0[rbx + 0x1B1<64>:byte] = 0<8>
	Mem0[rbx + 0x1B8<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492D00<p64>
	Mem0[rbx + 0x1C0<64>:word64] = 0<64>
	Mem0[rbx + 0x1C8<64>:word64] = 0<64>
	Mem0[rbx + 0x1D0<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0xD0<64>:word64] = rax
	Mem0[rbx + 8<64>:word64] = 0<64>
	call fn000000000046E310 (retsize: 8;)
	rax = 0x0000000000496A58<p64>
	rdi = rbx + 0x10<64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496A80<p64>
	rcx = rdi
	Mem0[rbx + 0xD0<64>:word64] = rax
	call fn0000000000456E20 (retsize: 8;)
	rdx = rdi
	rcx = rsi
	call fn000000000046E310 (retsize: 8;)
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rcx = rdi
	r8d = r8d | 8<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000455970 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l000000000045F624
	// succ:  l000000000045F60D l000000000045F624
l000000000045F60D:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F530_exit
l000000000045F624:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F530_exit
fn000000000045F530_exit:


// fn000000000045F680
// Return size: 8
define fn000000000045F680
fn000000000045F680_entry:
	rsp = fp
	// succ:  l000000000045F680
l000000000045F680:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0xD0<64>
	rbx = rcx
	rbp = rdx
	r12d = r8d
	r12 = CONVERT(r12d, word32, uint64)
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	rax = 0x0000000000492CD8<p64>
	Mem0[rbx + 0x1A8<64>:word64] = 0<64>
	Mem0[rbx + 0x1B0<64>:byte] = 0<8>
	Mem0[rbx + 0x1B1<64>:byte] = 0<8>
	Mem0[rbx + 0x1B8<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492D00<p64>
	Mem0[rbx + 0x1C0<64>:word64] = 0<64>
	Mem0[rbx + 0x1C8<64>:word64] = 0<64>
	Mem0[rbx + 0x1D0<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0xD0<64>:word64] = rax
	Mem0[rbx + 8<64>:word64] = 0<64>
	call fn000000000046E310 (retsize: 8;)
	rax = 0x0000000000496A58<p64>
	rdi = rbx + 0x10<64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496A80<p64>
	rcx = rdi
	Mem0[rbx + 0xD0<64>:word64] = rax
	call fn0000000000456E20 (retsize: 8;)
	rdx = rdi
	rcx = rsi
	call fn000000000046E310 (retsize: 8;)
	rdx = Mem0[rbp + 0<64>:word64]
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rdi
	r8d = r8d | 8<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000455970 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l000000000045F775
	// succ:  l000000000045F75E l000000000045F775
l000000000045F75E:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F680_exit
l000000000045F775:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F680_exit
fn000000000045F680_exit:


// fn000000000045F7D0
// Return size: 8
define fn000000000045F7D0
fn000000000045F7D0_entry:
	rsp = fp
	// succ:  l000000000045F7D0
l000000000045F7D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx + 0xD0<64>
	rbx = rcx
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	rax = 0x0000000000492CD8<p64>
	Mem0[rbx + 0x1A8<64>:word64] = 0<64>
	Mem0[rbx + 0x1B0<64>:byte] = 0<8>
	Mem0[rbx + 0x1B1<64>:byte] = 0<8>
	Mem0[rbx + 0x1B8<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492D00<p64>
	Mem0[rbx + 0x1C0<64>:word64] = 0<64>
	Mem0[rbx + 0x1C8<64>:word64] = 0<64>
	Mem0[rbx + 0x1D0<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0xD0<64>:word64] = rax
	Mem0[rbx + 8<64>:word64] = 0<64>
	call fn000000000046E310 (retsize: 8;)
	rax = 0x0000000000496A58<p64>
	rdi = rbx + 0x10<64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496A80<p64>
	rcx = rdi
	Mem0[rbx + 0xD0<64>:word64] = rax
	call fn0000000000456E20 (retsize: 8;)
	rdx = rdi
	rcx = rsi
	call fn000000000046E310 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F7D0_exit
fn000000000045F7D0_exit:


// fn000000000045F8D0
// Return size: 8
define fn000000000045F8D0
fn000000000045F8D0_entry:
	rsp = fp
	// succ:  l000000000045F8D0
l000000000045F8D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 8<64>:word64]
	rbx = rcx
	rsi = rdx
	rbp = r8
	r12d = r9d
	r12 = CONVERT(r12d, word32, uint64)
	rdi = rbx + 0x10<64>
	Mem0[rcx:word64] = rax
	rcx = Mem0[rdx + 0x10<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rbx + rdx:word64] = rcx
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E310 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rcx = rdi
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	call fn0000000000456E20 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = rbx
	rdx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call fn000000000046E310 (retsize: 8;)
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rcx = rdi
	r8d = r8d | 8<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000455970 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l000000000045F973
	// succ:  l000000000045F95C l000000000045F973
l000000000045F95C:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F8D0_exit
l000000000045F973:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F8D0_exit
fn000000000045F8D0_exit:


// fn000000000045F9C0
// Return size: 8
define fn000000000045F9C0
fn000000000045F9C0_entry:
	rsp = fp
	// succ:  l000000000045F9C0
l000000000045F9C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 8<64>:word64]
	rbx = rcx
	rsi = rdx
	rbp = r8
	r12d = r9d
	r12 = CONVERT(r12d, word32, uint64)
	rdi = rbx + 0x10<64>
	Mem0[rcx:word64] = rax
	rcx = Mem0[rdx + 0x10<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rbx + rdx:word64] = rcx
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E310 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rcx = rdi
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	call fn0000000000456E20 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = rbx
	rdx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call fn000000000046E310 (retsize: 8;)
	rdx = Mem0[rbp + 0<64>:word64]
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rdi
	r8d = r8d | 8<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000455970 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l000000000045FA64
	// succ:  l000000000045FA4D l000000000045FA64
l000000000045FA4D:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F9C0_exit
l000000000045FA64:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045F9C0_exit
fn000000000045F9C0_exit:


// fn000000000045FAB0
// Return size: 8
define fn000000000045FAB0
fn000000000045FAB0_entry:
	rsp = fp
	// succ:  l000000000045FAB0
l000000000045FAB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 8<64>:word64]
	rbx = rcx
	rsi = rdx
	rdi = rbx + 0x10<64>
	Mem0[rcx:word64] = rax
	rcx = Mem0[rdx + 0x10<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rbx + rdx:word64] = rcx
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E310 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rcx = rdi
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	call fn0000000000456E20 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = rbx
	rdx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call fn000000000046E310 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045FAB0_exit
fn000000000045FAB0_exit:


// fn000000000045FB50
// Return size: 0
define fn000000000045FB50
fn000000000045FB50_entry:
	rsp = fp
	// succ:  l000000000045FB50
l000000000045FB50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496A58<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	rax = 0x0000000000496A80<p64>
	Mem0[rcx + 0xC0<64>:word64] = rax
	rax = 0x0000000000496710<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000455AB0 (retsize: 8;)
	rcx = rbx + 0x58<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rcx = rbx + 0x48<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[0x0000000000491E20<p64>:word64]
	rcx = rbx + 0xD0<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0xD0<64>:word64] = rax
	call fn000000000046D3D0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045FBCB_thunk_fn0000000000475550
l000000000045FBCB_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000045FB50_exit
fn000000000045FB50_exit:


// fn000000000045FBD0
// Return size: 0
define fn000000000045FBD0
fn000000000045FBD0_entry:
	rsp = fp
	// succ:  l000000000045FBD0
l000000000045FBD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496A58<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	rax = 0x0000000000496A80<p64>
	Mem0[rcx + 0xC0<64>:word64] = rax
	rax = 0x0000000000496710<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000455AB0 (retsize: 8;)
	rcx = rbx + 0x58<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rcx = rbx + 0x48<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[0x0000000000491E20<p64>:word64]
	rcx = rbx + 0xD0<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0xD0<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045FC43_thunk_fn000000000046D3D0
l000000000045FC43_thunk_fn000000000046D3D0:
	call fn000000000046D3D0 (retsize: 0;)
	return
	// succ:  fn000000000045FBD0_exit
fn000000000045FBD0_exit:


// fn000000000045FC50
// Return size: 8
define fn000000000045FC50
fn000000000045FC50_entry:
	rsp = fp
	// succ:  l000000000045FC50
l000000000045FC50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rsi = rdx
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rdx + 0x18<64>:word64]
	Mem0[rcx - 0x10<64> + rax:word64] = rdx
	rax = 0x0000000000496710<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000455AB0 (retsize: 8;)
	rcx = rbx + 0x58<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rcx = rbx + 0x48<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[rsi + 8<64>:word64]
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x10<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045FC50_exit
fn000000000045FC50_exit:


// fn000000000045FCC0
// Return size: 8
define fn000000000045FCC0
fn000000000045FCC0_entry:
	rsp = fp
	// succ:  l000000000045FCC0
l000000000045FCC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rcx + 0x10<64>
	r8d = r8d | 8<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn00000000004576D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l000000000045FCF0
	// succ:  l000000000045FCDD l000000000045FCF0
l000000000045FCDD:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045FCEB_thunk_fn000000000046EB40
l000000000045FCEB_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn000000000045FCC0_exit
l000000000045FCF0:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045FD02_thunk_fn000000000046EB40
l000000000045FD02_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn000000000045FCC0_exit
fn000000000045FCC0_exit:


// fn000000000045FD10
// Return size: 8
define fn000000000045FD10
fn000000000045FD10_entry:
	rsp = fp
	// succ:  l000000000045FD10
l000000000045FD10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdx = Mem0[rdx:word64]
	rbx = rcx
	rcx = rcx + 0x10<64>
	r8d = r8d | 8<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn00000000004576D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l000000000045FD43
	// succ:  l000000000045FD30 l000000000045FD43
l000000000045FD30:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045FD3E_thunk_fn000000000046EB40
l000000000045FD3E_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn000000000045FD10_exit
l000000000045FD43:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045FD55_thunk_fn000000000046EB40
l000000000045FD55_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn000000000045FD10_exit
fn000000000045FD10_exit:


// fn000000000045FD60
// Return size: 8
define fn000000000045FD60
fn000000000045FD60_entry:
	rsp = fp
	// succ:  l000000000045FD60
l000000000045FD60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rcx + 0x10<64>
	call fn0000000000457800 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000045FD80
	// succ:  l000000000045FD76 l000000000045FD80
l000000000045FD76:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045FD60_exit
l000000000045FD80:
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000045FD95_thunk_fn000000000046EB40
l000000000045FD95_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn000000000045FD60_exit
fn000000000045FD60_exit:


// fn000000000045FDA0
// Return size: 8
define fn000000000045FDA0
fn000000000045FDA0_entry:
	rsp = fp
	// succ:  l000000000045FDA0
l000000000045FDA0:
	rcx = rcx + 0x58<64>
	SCZO = cond(rcx)
	// succ:  l000000000045FDA4_thunk_fn000000000042AA50
l000000000045FDA4_thunk_fn000000000042AA50:
	call fn000000000042AA50 (retsize: 0;)
	return
	// succ:  fn000000000045FDA0_exit
fn000000000045FDA0_exit:


// fn000000000045FDB0
// Return size: 8
define fn000000000045FDB0
fn000000000045FDB0_entry:
	rsp = fp
	// succ:  l000000000045FDB0
l000000000045FDB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0xD0<64>
	rbx = rcx
	rbp = rdx
	r12d = r8d
	r12 = CONVERT(r12d, word32, uint64)
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x1A8<64>:word64] = 0<64>
	Mem0[rbx + 0x1B2<64>:byte] = 0<8>
	Mem0[rbx + 0x1B0<64>:word16] = ax
	rax = 0x0000000000492D58<p64>
	Mem0[rbx + 0x1B8<64>:word64] = 0<64>
	Mem0[rbx + 0x1C0<64>:word64] = 0<64>
	Mem0[rbx + 0x1C8<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492D80<p64>
	Mem0[rbx + 0x1D0<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0xD0<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = 0x0000000000496AD8<p64>
	rdi = rbx + 0x10<64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496B00<p64>
	rcx = rdi
	Mem0[rbx + 0xD0<64>:word64] = rax
	call fn0000000000458BE0 (retsize: 8;)
	rdx = rdi
	rcx = rsi
	call fn000000000046EAE0 (retsize: 8;)
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rcx = rdi
	r8d = r8d | 8<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn00000000004576D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l000000000045FEB0
	// succ:  l000000000045FE8F l000000000045FEB0
l000000000045FE8F:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045FDB0_exit
l000000000045FEB0:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045FDB0_exit
fn000000000045FDB0_exit:


// fn000000000045FF00
// Return size: 8
define fn000000000045FF00
fn000000000045FF00_entry:
	rsp = fp
	// succ:  l000000000045FF00
l000000000045FF00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0xD0<64>
	rbx = rcx
	rbp = rdx
	r12d = r8d
	r12 = CONVERT(r12d, word32, uint64)
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x1A8<64>:word64] = 0<64>
	Mem0[rbx + 0x1B2<64>:byte] = 0<8>
	Mem0[rbx + 0x1B0<64>:word16] = ax
	rax = 0x0000000000492D58<p64>
	Mem0[rbx + 0x1B8<64>:word64] = 0<64>
	Mem0[rbx + 0x1C0<64>:word64] = 0<64>
	Mem0[rbx + 0x1C8<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492D80<p64>
	Mem0[rbx + 0x1D0<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0xD0<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = 0x0000000000496AD8<p64>
	rdi = rbx + 0x10<64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496B00<p64>
	rcx = rdi
	Mem0[rbx + 0xD0<64>:word64] = rax
	call fn0000000000458BE0 (retsize: 8;)
	rdx = rdi
	rcx = rsi
	call fn000000000046EAE0 (retsize: 8;)
	rdx = Mem0[rbp + 0<64>:word64]
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rdi
	r8d = r8d | 8<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn00000000004576D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000460000
	// succ:  l000000000045FFE0 l0000000000460000
l000000000045FFE0:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045FF00_exit
l0000000000460000:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000045FF00_exit
fn000000000045FF00_exit:


// fn0000000000460050
// Return size: 8
define fn0000000000460050
fn0000000000460050_entry:
	rsp = fp
	// succ:  l0000000000460050
l0000000000460050:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx + 0xD0<64>
	rbx = rcx
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x1A8<64>:word64] = 0<64>
	Mem0[rbx + 0x1B2<64>:byte] = 0<8>
	Mem0[rbx + 0x1B0<64>:word16] = ax
	rax = 0x0000000000492D58<p64>
	Mem0[rbx + 0x1B8<64>:word64] = 0<64>
	Mem0[rbx + 0x1C0<64>:word64] = 0<64>
	Mem0[rbx + 0x1C8<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492D80<p64>
	Mem0[rbx + 0x1D0<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0xD0<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = 0x0000000000496AD8<p64>
	rdi = rbx + 0x10<64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496B00<p64>
	rcx = rdi
	Mem0[rbx + 0xD0<64>:word64] = rax
	call fn0000000000458BE0 (retsize: 8;)
	rdx = rdi
	rcx = rsi
	call fn000000000046EAE0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000460050_exit
fn0000000000460050_exit:


// fn0000000000460150
// Return size: 8
define fn0000000000460150
fn0000000000460150_entry:
	rsp = fp
	// succ:  l0000000000460150
l0000000000460150:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 8<64>:word64]
	rbx = rcx
	rsi = rdx
	rbp = r8
	r12d = r9d
	r12 = CONVERT(r12d, word32, uint64)
	rdi = rbx + 0x10<64>
	Mem0[rcx:word64] = rax
	rcx = Mem0[rdx + 0x10<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rbx + rdx:word64] = rcx
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EAE0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rcx = rdi
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	call fn0000000000458BE0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = rbx
	rdx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call fn000000000046EAE0 (retsize: 8;)
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rcx = rdi
	r8d = r8d | 8<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn00000000004576D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l00000000004601F3
	// succ:  l00000000004601DC l00000000004601F3
l00000000004601DC:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000460150_exit
l00000000004601F3:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000460150_exit
fn0000000000460150_exit:


// fn0000000000460240
// Return size: 8
define fn0000000000460240
fn0000000000460240_entry:
	rsp = fp
	// succ:  l0000000000460240
l0000000000460240:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 8<64>:word64]
	rbx = rcx
	rsi = rdx
	rbp = r8
	r12d = r9d
	r12 = CONVERT(r12d, word32, uint64)
	rdi = rbx + 0x10<64>
	Mem0[rcx:word64] = rax
	rcx = Mem0[rdx + 0x10<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rbx + rdx:word64] = rcx
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EAE0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rcx = rdi
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	call fn0000000000458BE0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = rbx
	rdx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call fn000000000046EAE0 (retsize: 8;)
	rdx = Mem0[rbp + 0<64>:word64]
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rdi
	r8d = r8d | 8<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn00000000004576D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l00000000004602E4
	// succ:  l00000000004602CD l00000000004602E4
l00000000004602CD:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000460240_exit
l00000000004602E4:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000460240_exit
fn0000000000460240_exit:


// fn0000000000460330
// Return size: 8
define fn0000000000460330
fn0000000000460330_entry:
	rsp = fp
	// succ:  l0000000000460330
l0000000000460330:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 8<64>:word64]
	rbx = rcx
	rsi = rdx
	rdi = rbx + 0x10<64>
	Mem0[rcx:word64] = rax
	rcx = Mem0[rdx + 0x10<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rbx + rdx:word64] = rcx
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EAE0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rcx = rdi
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	call fn0000000000458BE0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = rbx
	rdx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call fn000000000046EAE0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000460330_exit
fn0000000000460330_exit:


// fn00000000004603D0
// Return size: 0
define fn00000000004603D0
fn00000000004603D0_entry:
	rsp = fp
	// succ:  l00000000004603D0
l00000000004603D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496AD8<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	rax = 0x0000000000496B00<p64>
	Mem0[rcx + 0xC0<64>:word64] = rax
	rax = 0x0000000000496790<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000457800 (retsize: 8;)
	rcx = rbx + 0x58<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rcx = rbx + 0x48<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[0x0000000000491E30<p64>:word64]
	rcx = rbx + 0xD0<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0xD0<64>:word64] = rax
	call fn000000000046D3D0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046044B_thunk_fn0000000000475550
l000000000046044B_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn00000000004603D0_exit
fn00000000004603D0_exit:


// fn0000000000460450
// Return size: 0
define fn0000000000460450
fn0000000000460450_entry:
	rsp = fp
	// succ:  l0000000000460450
l0000000000460450:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496AD8<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	rax = 0x0000000000496B00<p64>
	Mem0[rcx + 0xC0<64>:word64] = rax
	rax = 0x0000000000496790<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000457800 (retsize: 8;)
	rcx = rbx + 0x58<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rcx = rbx + 0x48<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[0x0000000000491E30<p64>:word64]
	rcx = rbx + 0xD0<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0xD0<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004604C3_thunk_fn000000000046D3D0
l00000000004604C3_thunk_fn000000000046D3D0:
	call fn000000000046D3D0 (retsize: 0;)
	return
	// succ:  fn0000000000460450_exit
fn0000000000460450_exit:


// fn00000000004604D0
// Return size: 8
define fn00000000004604D0
fn00000000004604D0_entry:
	rsp = fp
	// succ:  l00000000004604D0
l00000000004604D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rsi = rdx
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rdx + 0x18<64>:word64]
	Mem0[rcx - 0x10<64> + rax:word64] = rdx
	rax = 0x0000000000496790<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000457800 (retsize: 8;)
	rcx = rbx + 0x58<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rcx = rbx + 0x48<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x10<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[rsi + 8<64>:word64]
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x10<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004604D0_exit
fn00000000004604D0_exit:


// fn0000000000460540
// Return size: 8
define fn0000000000460540
fn0000000000460540_entry:
	rsp = fp
	// succ:  l0000000000460540
l0000000000460540:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0x18<64>
	rbx = rcx
	rdi = rdx
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0xF0<64>:word64] = 0<64>
	Mem0[rbx + 0xFA<64>:byte] = 0<8>
	Mem0[rbx + 0xF8<64>:word16] = ax
	rax = 0x0000000000492DD8<p64>
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	Mem0[rbx + 0x108<64>:word64] = 0<64>
	Mem0[rbx + 0x110<64>:word64] = 0<64>
	rdx = rdi
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492E00<p64>
	Mem0[rbx + 0x118<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = 0x0000000000492E58<p64>
	rdx = rdi
	rcx = rsi
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = 0x0000000000492E80<p64>
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = 0x0000000000496B58<p64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496BA8<p64>
	Mem0[rbx + 0x18<64>:word64] = rax
	rax = 0x0000000000496B80<p64>
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000460540_exit
fn0000000000460540_exit:


// fn0000000000460640
// Return size: 8
define fn0000000000460640
fn0000000000460640_entry:
	rsp = fp
	// succ:  l0000000000460640
l0000000000460640:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0x18<64>
	rbx = rcx
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0xF0<64>:word64] = 0<64>
	Mem0[rbx + 0xFA<64>:byte] = 0<8>
	Mem0[rbx + 0xF8<64>:word16] = ax
	rax = 0x0000000000492DD8<p64>
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	Mem0[rbx + 0x108<64>:word64] = 0<64>
	Mem0[rbx + 0x110<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492E00<p64>
	Mem0[rbx + 0x118<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = 0x0000000000492E58<p64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rsi
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = 0x0000000000492E80<p64>
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = 0x0000000000496B58<p64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496BA8<p64>
	Mem0[rbx + 0x18<64>:word64] = rax
	rax = 0x0000000000496B80<p64>
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000460640_exit
fn0000000000460640_exit:


// fn0000000000460730
// Return size: 8
define fn0000000000460730
fn0000000000460730_entry:
	rsp = fp
	// succ:  l0000000000460730
l0000000000460730:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 8<64>:word64]
	rbx = rcx
	rsi = rdx
	rdi = r8
	Mem0[rcx:word64] = rax
	rcx = Mem0[rdx + 0x10<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rbx + rdx:word64] = rcx
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	rdx = r8
	call fn000000000046EAE0 (retsize: 8;)
	rax = Mem0[rsi + 0x18<64>:word64]
	rdx = rdi
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = rbx + 0x10<64> + rax
	rax = Mem0[rsi + 0x20<64>:word64]
	Mem0[rcx:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x28<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rax = Mem0[rsi + 0x30<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000460730_exit
fn0000000000460730_exit:


// fn00000000004607D0
// Return size: 8
define fn00000000004607D0
fn00000000004607D0_entry:
	rsp = fp
	// succ:  l00000000004607D0
l00000000004607D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 8<64>:word64]
	rbx = rcx
	rsi = rdx
	Mem0[rcx:word64] = rax
	rcx = Mem0[rdx + 0x10<64>:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	Mem0[rbx + rdx:word64] = rcx
	Mem0[rbx + 8<64>:word64] = 0<64>
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EAE0 (retsize: 8;)
	rax = Mem0[rsi + 0x18<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rcx = rbx + 0x10<64> + rax
	rax = Mem0[rsi + 0x20<64>:word64]
	Mem0[rcx:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x28<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rax = Mem0[rsi + 0x30<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004607D0_exit
fn00000000004607D0_exit:


// fn0000000000460870
// Return size: 0
define fn0000000000460870
fn0000000000460870_entry:
	rsp = fp
	// succ:  l0000000000460870
l0000000000460870:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491E30<p64>:word64]
	rbx = rcx
	rcx = rcx + 0x18<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	call fn000000000046D3D0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000460897_thunk_fn0000000000475550
l0000000000460897_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000460870_exit
fn0000000000460870_exit:


// fn00000000004608A0
// Return size: 0
define fn00000000004608A0
fn00000000004608A0_entry:
	rsp = fp
	// succ:  l00000000004608A0
l00000000004608A0:
	rax = Mem0[0x0000000000491E30<p64>:word64]
	rcx = rcx + 0x18<64>
	SCZO = cond(rcx)
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	// succ:  l00000000004608B2_thunk_fn000000000046D3D0
l00000000004608B2_thunk_fn000000000046D3D0:
	call fn000000000046D3D0 (retsize: 0;)
	return
	// succ:  fn00000000004608A0_exit
fn00000000004608A0_exit:


// fn00000000004608C0
// Return size: 8
define fn00000000004608C0
fn00000000004608C0_entry:
	rsp = fp
	// succ:  l00000000004608C0
l00000000004608C0:
	rax = Mem0[rdx:word64]
	Mem0[rcx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	r8 = Mem0[rdx + 0x28<64>:word64]
	Mem0[rcx + rax:word64] = r8
	rax = Mem0[rdx + 0x30<64>:word64]
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = Mem0[rdx + 0x18<64>:word64]
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	r8 = Mem0[rdx + 0x20<64>:word64]
	Mem0[rcx + 0x10<64> + rax:word64] = r8
	rax = Mem0[rdx + 8<64>:word64]
	Mem0[rcx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rdx + 0x10<64>:word64]
	Mem0[rcx + rax:word64] = rdx
	return
	// succ:  fn00000000004608C0_exit
fn00000000004608C0_exit:


// fn0000000000460910
// Return size: 8
define fn0000000000460910
fn0000000000460910_entry:
	rsp = fp
	// succ:  l0000000000460910
l0000000000460910:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rcx + 8<64>
	r8d = r8d | 0x10<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000455970 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000460940
	// succ:  l000000000046092D l0000000000460940
l000000000046092D:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046093B_thunk_fn000000000046E370
l000000000046093B_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn0000000000460910_exit
l0000000000460940:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000460952_thunk_fn000000000046E370
l0000000000460952_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn0000000000460910_exit
fn0000000000460910_exit:


// fn0000000000460960
// Return size: 8
define fn0000000000460960
fn0000000000460960_entry:
	rsp = fp
	// succ:  l0000000000460960
l0000000000460960:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdx = Mem0[rdx:word64]
	rbx = rcx
	rcx = rcx + 8<64>
	r8d = r8d | 0x10<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000455970 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000460993
	// succ:  l0000000000460980 l0000000000460993
l0000000000460980:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046098E_thunk_fn000000000046E370
l000000000046098E_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn0000000000460960_exit
l0000000000460993:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004609A5_thunk_fn000000000046E370
l00000000004609A5_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn0000000000460960_exit
fn0000000000460960_exit:


// fn00000000004609B0
// Return size: 8
define fn00000000004609B0
fn00000000004609B0_entry:
	rsp = fp
	// succ:  l00000000004609B0
l00000000004609B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rcx + 8<64>
	call fn0000000000455AB0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004609D0
	// succ:  l00000000004609C6 l00000000004609D0
l00000000004609C6:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004609B0_exit
l00000000004609D0:
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004609E5_thunk_fn000000000046E370
l00000000004609E5_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn00000000004609B0_exit
fn00000000004609B0_exit:


// fn00000000004609F0
// Return size: 8
define fn00000000004609F0
fn00000000004609F0_entry:
	rsp = fp
	// succ:  l00000000004609F0
l00000000004609F0:
	rcx = rcx + 0x50<64>
	SCZO = cond(rcx)
	// succ:  l00000000004609F4_thunk_fn000000000042AA50
l00000000004609F4_thunk_fn000000000042AA50:
	call fn000000000042AA50 (retsize: 0;)
	return
	// succ:  fn00000000004609F0_exit
fn00000000004609F0_exit:


// fn0000000000460A00
// Return size: 8
define fn0000000000460A00
fn0000000000460A00_entry:
	rsp = fp
	// succ:  l0000000000460A00
l0000000000460A00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0xC8<64>
	rbx = rcx
	rbp = rdx
	r12d = r8d
	r12 = CONVERT(r12d, word32, uint64)
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	rax = 0x0000000000492ED8<p64>
	Mem0[rbx + 0x1A0<64>:word64] = 0<64>
	Mem0[rbx + 0x1A8<64>:byte] = 0<8>
	Mem0[rbx + 0x1A9<64>:byte] = 0<8>
	Mem0[rbx + 0x1B0<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492F00<p64>
	Mem0[rbx + 0x1B8<64>:word64] = 0<64>
	Mem0[rbx + 0x1C0<64>:word64] = 0<64>
	Mem0[rbx + 0x1C8<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0xC8<64>:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	rax = 0x0000000000496BD8<p64>
	rdi = rbx + 8<64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496C00<p64>
	rcx = rdi
	Mem0[rbx + 0xC8<64>:word64] = rax
	call fn0000000000456E20 (retsize: 8;)
	rdx = rdi
	rcx = rsi
	call fn000000000046E310 (retsize: 8;)
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rcx = rdi
	r8d = r8d | 0x10<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000455970 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000460AF0
	// succ:  l0000000000460AD5 l0000000000460AF0
l0000000000460AD5:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000460A00_exit
l0000000000460AF0:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000460A00_exit
fn0000000000460A00_exit:


// fn0000000000460B40
// Return size: 8
define fn0000000000460B40
fn0000000000460B40_entry:
	rsp = fp
	// succ:  l0000000000460B40
l0000000000460B40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0xC8<64>
	rbx = rcx
	rbp = rdx
	r12d = r8d
	r12 = CONVERT(r12d, word32, uint64)
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	rax = 0x0000000000492ED8<p64>
	Mem0[rbx + 0x1A0<64>:word64] = 0<64>
	Mem0[rbx + 0x1A8<64>:byte] = 0<8>
	Mem0[rbx + 0x1A9<64>:byte] = 0<8>
	Mem0[rbx + 0x1B0<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492F00<p64>
	Mem0[rbx + 0x1B8<64>:word64] = 0<64>
	Mem0[rbx + 0x1C0<64>:word64] = 0<64>
	Mem0[rbx + 0x1C8<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0xC8<64>:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	rax = 0x0000000000496BD8<p64>
	rdi = rbx + 8<64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496C00<p64>
	rcx = rdi
	Mem0[rbx + 0xC8<64>:word64] = rax
	call fn0000000000456E20 (retsize: 8;)
	rdx = rdi
	rcx = rsi
	call fn000000000046E310 (retsize: 8;)
	rdx = Mem0[rbp + 0<64>:word64]
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rdi
	r8d = r8d | 0x10<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000455970 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000460C30
	// succ:  l0000000000460C16 l0000000000460C30
l0000000000460C16:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000460B40_exit
l0000000000460C30:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000460B40_exit
fn0000000000460B40_exit:


// fn0000000000460C80
// Return size: 8
define fn0000000000460C80
fn0000000000460C80_entry:
	rsp = fp
	// succ:  l0000000000460C80
l0000000000460C80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx + 0xC8<64>
	rbx = rcx
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	rax = 0x0000000000492ED8<p64>
	Mem0[rbx + 0x1A0<64>:word64] = 0<64>
	Mem0[rbx + 0x1A8<64>:byte] = 0<8>
	Mem0[rbx + 0x1A9<64>:byte] = 0<8>
	Mem0[rbx + 0x1B0<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492F00<p64>
	Mem0[rbx + 0x1B8<64>:word64] = 0<64>
	Mem0[rbx + 0x1C0<64>:word64] = 0<64>
	Mem0[rbx + 0x1C8<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0xC8<64>:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	rax = 0x0000000000496BD8<p64>
	rdi = rbx + 8<64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496C00<p64>
	rcx = rdi
	Mem0[rbx + 0xC8<64>:word64] = rax
	call fn0000000000456E20 (retsize: 8;)
	rdx = rdi
	rcx = rsi
	call fn000000000046E310 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000460C80_exit
fn0000000000460C80_exit:


// fn0000000000460D70
// Return size: 8
define fn0000000000460D70
fn0000000000460D70_entry:
	rsp = fp
	// succ:  l0000000000460D70
l0000000000460D70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 8<64>:word64]
	rbx = rcx
	rsi = rdx
	rbp = r8
	r12d = r9d
	r12 = CONVERT(r12d, word32, uint64)
	rdi = rbx + 8<64>
	Mem0[rcx:word64] = rax
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	rax = Mem0[rdx + 0x10<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rcx = rdi
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	call fn0000000000456E20 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = rbx
	rdx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call fn000000000046E310 (retsize: 8;)
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rcx = rdi
	r8d = r8d | 0x10<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000455970 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000460E03
	// succ:  l0000000000460DEC l0000000000460E03
l0000000000460DEC:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000460D70_exit
l0000000000460E03:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000460D70_exit
fn0000000000460D70_exit:


// fn0000000000460E50
// Return size: 8
define fn0000000000460E50
fn0000000000460E50_entry:
	rsp = fp
	// succ:  l0000000000460E50
l0000000000460E50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 8<64>:word64]
	rbx = rcx
	rsi = rdx
	rbp = r8
	r12d = r9d
	r12 = CONVERT(r12d, word32, uint64)
	rdi = rbx + 8<64>
	Mem0[rcx:word64] = rax
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	rax = Mem0[rdx + 0x10<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rcx = rdi
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	call fn0000000000456E20 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = rbx
	rdx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call fn000000000046E310 (retsize: 8;)
	rdx = Mem0[rbp + 0<64>:word64]
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rdi
	r8d = r8d | 0x10<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000455970 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000460EE4
	// succ:  l0000000000460ECD l0000000000460EE4
l0000000000460ECD:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000460E50_exit
l0000000000460EE4:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000460E50_exit
fn0000000000460E50_exit:


// fn0000000000460F30
// Return size: 8
define fn0000000000460F30
fn0000000000460F30_entry:
	rsp = fp
	// succ:  l0000000000460F30
l0000000000460F30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 8<64>:word64]
	rbx = rcx
	rsi = rdx
	rdi = rbx + 8<64>
	Mem0[rcx:word64] = rax
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	rax = Mem0[rdx + 0x10<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rcx = rdi
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	call fn0000000000456E20 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = rbx
	rdx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call fn000000000046E310 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000460F30_exit
fn0000000000460F30_exit:


// fn0000000000460FC0
// Return size: 0
define fn0000000000460FC0
fn0000000000460FC0_entry:
	rsp = fp
	// succ:  l0000000000460FC0
l0000000000460FC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496BD8<p64>
	rbx = rcx
	rcx = rcx + 8<64>
	Mem0[rcx - 8<64>:word64] = rax
	rax = 0x0000000000496C00<p64>
	Mem0[rcx + 0xC0<64>:word64] = rax
	rax = 0x0000000000496710<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000455AB0 (retsize: 8;)
	rcx = rbx + 0x50<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rcx = rbx + 0x40<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 8<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[0x0000000000491E20<p64>:word64]
	rcx = rbx + 0xC8<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0xC8<64>:word64] = rax
	call fn000000000046D3D0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046103B_thunk_fn0000000000475550
l000000000046103B_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000460FC0_exit
fn0000000000460FC0_exit:


