// fn0000000000411030
// Return size: 8
define fn0000000000411030
fn0000000000411030_entry:
	rsp = fp
	// succ:  l0000000000411030
l0000000000411030:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = Mem0[0x00000000004AD9E8<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000411050
	// succ:  l0000000000411041 l0000000000411050
l0000000000411041:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000411030_exit
l0000000000411050:
	rsi = rdx
	edi = ecx
	rdi = CONVERT(edi, word32, uint64)
	edx = 0x18<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = calloc(rcx, rdx)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l00000000004110A8
	// succ:  l000000000041106C l00000000004110A8
l000000000041106C:
	Mem0[rax:word32] = edi
	Mem0[rax + 8<64>:word64] = rsi
	rcx = 0x00000000004ADA00<p64>
	EnterCriticalSection(rcx)
	rax = Mem0[0x00000000004AD9E0<p64>:word64]
	rcx = 0x00000000004ADA00<p64>
	Mem0[0x00000000004AD9E0<p64>:word64] = rbx
	Mem0[rbx + 0x10<64>:word64] = rax
	LeaveCriticalSection(rcx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000411030_exit
l00000000004110A8:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000411041
	// succ:  l0000000000411041
fn0000000000411030_exit:


// fn00000000004110B0
// Return size: 8
define fn00000000004110B0
fn00000000004110B0_entry:
	rsp = fp
	// succ:  l00000000004110B0
l00000000004110B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = Mem0[0x00000000004AD9E8<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004110D0
	// succ:  l00000000004110BF l00000000004110D0
l00000000004110BF:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004110B0_exit
l00000000004110D0:
	ebx = ecx
	rbx = CONVERT(ebx, word32, uint64)
	rcx = 0x00000000004ADA00<p64>
	EnterCriticalSection(rcx)
	rdx = Mem0[0x00000000004AD9E0<p64>:word64]
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l0000000000411107
	// succ:  l00000000004110EB l0000000000411107
l00000000004110EB:
	eax = Mem0[rdx:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - ebx)
	branch Test(NE,Z) l00000000004110FE
	// succ:  l00000000004110F1 l00000000004110FE
l00000000004110F1:
	goto l000000000041113F
	// succ:  l000000000041113F
l00000000004110F3:
	r8d = Mem0[rax:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d - ebx)
	branch Test(EQ,Z) l0000000000411120
	// succ:  l00000000004110FB l0000000000411120
l00000000004110FB:
	rdx = rax
	// succ:  l00000000004110FE
l00000000004110FE:
	rax = Mem0[rdx + 0x10<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l00000000004110F3
	// succ:  l0000000000411107 l00000000004110F3
l0000000000411107:
	rcx = 0x00000000004ADA00<p64>
	LeaveCriticalSection(rcx)
	// succ:  l0000000000411114
l0000000000411114:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004110B0_exit
l0000000000411120:
	rcx = rax
	rax = Mem0[rax + 0x10<64>:word64]
	Mem0[rdx + 0x10<64>:word64] = rax
	// succ:  l000000000041112B
l000000000041112B:
	free(rcx)
	rcx = 0x00000000004ADA00<p64>
	LeaveCriticalSection(rcx)
	goto l0000000000411114
	// succ:  l0000000000411114
l000000000041113F:
	rax = Mem0[rdx + 0x10<64>:word64]
	rcx = rdx
	Mem0[0x00000000004AD9E0<p64>:word64] = rax
	goto l000000000041112B
	// succ:  l000000000041112B
fn00000000004110B0_exit:


// fn0000000000411150
// Return size: 8
define fn0000000000411150
fn0000000000411150_entry:
	rsp = fp
	// succ:  l0000000000411150
l0000000000411150:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(edx - 1<32>)
	branch Test(EQ,Z) l00000000004111A2
	// succ:  l0000000000411159 l00000000004111A2
l0000000000411159:
	branch Test(ULT,C) l0000000000411174
	// succ:  l000000000041115B l0000000000411174
l000000000041115B:
	SCZO = cond(edx - 3<32>)
	branch Test(NE,Z) l000000000041116A
	// succ:  l0000000000411160 l000000000041116A
l0000000000411160:
	eax = Mem0[0x00000000004AD9E8<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004111D0
	// succ:  l000000000041116A l00000000004111D0
l000000000041116A:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000411150_exit
l0000000000411174:
	eax = Mem0[0x00000000004AD9E8<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004111E0
	// succ:  l000000000041117E l00000000004111E0
l000000000041117E:
	eax = Mem0[0x00000000004AD9E8<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(NE,Z) l000000000041116A
	// succ:  l0000000000411189 l000000000041116A
l0000000000411189:
	rcx = 0x00000000004ADA00<p64>
	Mem0[0x00000000004AD9E8<p64>:word32] = 0<32>
	DeleteCriticalSection(rcx)
	goto l000000000041116A
	// succ:  l000000000041116A
l00000000004111A2:
	eax = Mem0[0x00000000004AD9E8<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000000004111C0
	// succ:  l00000000004111AC l00000000004111C0
l00000000004111AC:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[0x00000000004AD9E8<p64>:word32] = 1<32>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000411150_exit
l00000000004111C0:
	rcx = 0x00000000004ADA00<p64>
	InitializeCriticalSection(rcx)
	goto l00000000004111AC
	// succ:  l00000000004111AC
l00000000004111D0:
	call fn0000000000410FC0 (retsize: 8;)
	goto l000000000041116A
	// succ:  l000000000041116A
l00000000004111E0:
	call fn0000000000410FC0 (retsize: 8;)
	goto l000000000041117E
	// succ:  l000000000041117E
fn0000000000411150_exit:


// fn00000000004111F0
// Return size: 8
define fn00000000004111F0
fn00000000004111F0_entry:
	rsp = fp
	// succ:  l00000000004111F0
l00000000004111F0:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x40<64>:word64] = rcx
	r9 = rsp + 0x40<64>
	ecx = 0x22474343<32>
	rcx = CONVERT(ecx, word32, uint64)
	RaiseException(rcx, rdx, r8, r9)
	rax = Mem0[rsp + 0x40<64>:word64]
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	rdx = Mem0[rax + 0x30<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = 0<64>
	r9 = rax
	Mem0[rsp + 0x28<64>:word64] = rdx
	r8 = Mem0[rax:word64]
	edx = 0x1A<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	eax = 0x10<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004111F0_exit
fn00000000004111F0_exit:


// fn0000000000411250
// Return size: 8
define fn0000000000411250
fn0000000000411250_entry:
	rsp = fp
	// succ:  l0000000000411250
l0000000000411250:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(edx - 2<32>)
	branch Test(UGT,CZ) l0000000000411266
	// succ:  l0000000000411259 l0000000000411266
l0000000000411259:
	rdx = CONVERT(edx, word32, int64)
	rax = Mem0[rcx + 0x10<64> + rdx * 8<64>:word64]
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000411250_exit
l0000000000411266:
	abort()
	// succ:  l000000000041126C_thunk_fn0000000000411270
l000000000041126C_thunk_fn0000000000411270:
	call fn0000000000411270 (retsize: 0;)
	return
	// succ:  fn0000000000411250_exit
fn0000000000411250_exit:


// fn0000000000411270
// Return size: 8
define fn0000000000411270
fn0000000000411270_entry:
	rsp = fp
	// succ:  l0000000000411270
l0000000000411270:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(edx - 2<32>)
	branch Test(UGT,CZ) l0000000000411286
	// succ:  l0000000000411279 l0000000000411286
l0000000000411279:
	rdx = CONVERT(edx, word32, int64)
	Mem0[rcx + 0x10<64> + rdx * 8<64>:word64] = r8
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000411270_exit
l0000000000411286:
	abort()
	// succ:  l000000000041128C_thunk_fn0000000000411290
l000000000041128C_thunk_fn0000000000411290:
	call fn0000000000411290 (retsize: 0;)
	return
	// succ:  fn0000000000411270_exit
fn0000000000411270_exit:


// fn0000000000411290
// Return size: 8
define fn0000000000411290
fn0000000000411290_entry:
	rsp = fp
	// succ:  l0000000000411290
l0000000000411290:
	rax = Mem0[rcx:word64]
	return
	// succ:  fn0000000000411290_exit
fn0000000000411290_exit:


// fn00000000004112A0
// Return size: 8
define fn00000000004112A0
fn00000000004112A0_entry:
	rsp = fp
	// succ:  l00000000004112A0
l00000000004112A0:
	rax = Mem0[rcx + 8<64>:word64]
	return
	// succ:  fn00000000004112A0_exit
fn00000000004112A0_exit:


// fn00000000004112B0
// Return size: 8
define fn00000000004112B0
fn00000000004112B0_entry:
	rsp = fp
	// succ:  l00000000004112B0
l00000000004112B0:
	rax = Mem0[rcx + 8<64>:word64]
	Mem0[rdx:word32] = 0<32>
	return
	// succ:  fn00000000004112B0_exit
fn00000000004112B0_exit:


// fn00000000004112C0
// Return size: 8
define fn00000000004112C0
fn00000000004112C0_entry:
	rsp = fp
	// succ:  l00000000004112C0
l00000000004112C0:
	Mem0[rcx + 8<64>:word64] = rdx
	return
	// succ:  fn00000000004112C0_exit
fn00000000004112C0_exit:


// fn00000000004112D0
// Return size: 8
define fn00000000004112D0
fn00000000004112D0_entry:
	rsp = fp
	// succ:  l00000000004112D0
l00000000004112D0:
	rax = Mem0[rcx + 0x20<64>:word64]
	rax = Mem0[rax + 0x38<64>:word64]
	return
	// succ:  fn00000000004112D0_exit
fn00000000004112D0_exit:


// fn00000000004112E0
// Return size: 8
define fn00000000004112E0
fn00000000004112E0_entry:
	rsp = fp
	// succ:  l00000000004112E0
l00000000004112E0:
	rdx = Mem0[rcx + 0x20<64>:word64]
	rax = Mem0[rdx + 0x10<64>:word64]
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = rax + Mem0[rdx + 8<64>:word64]
	SCZO = cond(rax)
	return
	// succ:  fn00000000004112E0_exit
fn00000000004112E0_exit:


// fn00000000004112F0
// Return size: 8
define fn00000000004112F0
fn00000000004112F0_entry:
	rsp = fp
	// succ:  l00000000004112F0
l00000000004112F0:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rsp + 0x28<64>
	rax = RtlLookupFunctionEntry(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000411313
	// succ:  l0000000000411307 l0000000000411313
l0000000000411307:
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = rax + Mem0[rsp + 0x28<64>:word64]
	SCZO = cond(rax)
	// succ:  l000000000041130E
l000000000041130E:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004112F0_exit
l0000000000411313:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041130E
	// succ:  l000000000041130E
fn00000000004112F0_exit:


// fn0000000000411320
// Return size: 0
define fn0000000000411320
fn0000000000411320_entry:
	rsp = fp
	// succ:  l0000000000411320
l0000000000411320:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000411320_exit
fn0000000000411320_exit:


// fn0000000000411330
// Return size: 0
define fn0000000000411330
fn0000000000411330_entry:
	rsp = fp
	// succ:  l0000000000411330
l0000000000411330:
	rax = Mem0[rcx + 0x20<64>:word64]
	rax = Mem0[rax + 8<64>:word64]
	return
	// succ:  fn0000000000411330_exit
fn0000000000411330_exit:


// fn0000000000411340
// Return size: 8
define fn0000000000411340
fn0000000000411340_entry:
	rsp = fp
	// succ:  l0000000000411340
l0000000000411340:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x68<64>
	SCZO = cond(rsp)
	r10d = Mem0[rcx + 4<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	rbp = Mem0[rcx + 0x20<64>:word64]
	SZO = cond(r10b & 0x20<8>)
	C = false
	branch Test(NE,Z) l00000000004113C0
	// succ:  l000000000041135C l00000000004113C0
l000000000041135C:
	SCZO = cond(eax - 0x21474343<32>)
	rsi = r9
	r12 = r8
	rdi = rdx
	rbx = rcx
	branch Test(EQ,Z) l00000000004113D1
	// succ:  l000000000041136F l00000000004113D1
l000000000041136F:
	rdx = Mem0[r9 + 0x28<64>:word64]
	ecx = 0xDEADBEEF<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(eax - 0x22474343<32>)
	Mem0[rsp + 0x40<64>:word64] = rcx
	Mem0[rsp + 0x48<64>:word64] = rcx
	Mem0[rsp + 0x50<64>:word64] = r9
	rdx = Mem0[rdx + 0x98<64>:word64]
	Mem0[rsp + 0x30<64>:word64] = rdx
	rdx = Mem0[r9:word64]
	Mem0[rsp + 0x38<64>:word64] = rdx
	branch Test(EQ,Z) l0000000000411445
	// succ:  l00000000004113A6 l0000000000411445
l00000000004113A6:
	SCZO = cond(eax - 0x20474343<32>)
	branch Test(EQ,Z) l0000000000411400
	// succ:  l00000000004113AD l0000000000411400
l00000000004113AD:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000411340_exit
l00000000004113C0:
	rax = Mem0[r9 + 0x28<64>:word64]
	rdx = Mem0[rcx + 0x38<64>:word64]
	Mem0[rax + 0x88<64>:word64] = rdx
	goto l00000000004113AD
	// succ:  l00000000004113AD
l00000000004113D1:
	SCZO = cond(rdx - Mem0[rcx + 0x28<64>:word64])
	branch Test(NE,Z) l00000000004113AD
	// succ:  l00000000004113D7 l00000000004113AD
l00000000004113D7:
	rax = Mem0[r9 + 0x40<64>:word64]
	rdx = Mem0[rcx + 0x30<64>:word64]
	r9 = rbp
	Mem0[rsp + 0x20<64>:word64] = r8
	r8 = rcx
	rcx = rdi
	Mem0[rsp + 0x28<64>:word64] = rax
	call KERNEL32.dll!RtlUnwindEx (retsize: 8;)
	abort()
	// succ:  l0000000000411400
l0000000000411400:
	r10d = r10d & 6<32>
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	branch Test(EQ,Z) l0000000000411473
	// succ:  l0000000000411406 l0000000000411473
l0000000000411406:
	rsi = rsp + 0x30<64>
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000411410
l0000000000411410:
	Mem0[rsp + 0x20<64>:word64] = rsi
	r9 = rbp
	r8 = Mem0[rbp + 0<64>:word64]
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	call Mem0[rsp + 0xC0<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 8<32>)
	branch Test(EQ,Z) l00000000004113AD
	// succ:  l000000000041142D l00000000004113AD
l000000000041142D:
	SCZO = cond(eax - 7<32>)
	branch Test(EQ,Z) l0000000000411516
	// succ:  l0000000000411436 l0000000000411516
l0000000000411436:
	// succ:  l0000000000411440
l0000000000411440:
	abort()
	// succ:  l0000000000411445
l0000000000411445:
	rax = Mem0[rbp + 0x30<64>:word64]
	rsi = rsp + 0x30<64>
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	r9 = rbp
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x20<64>:word64] = rsi
	Mem0[rsp + 0x28<64>:word64] = rax
	r8 = Mem0[rbp + 0<64>:word64]
	call Mem0[rbp + 0x10<64>:word64] (retsize: 8;)
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000411410
	// succ:  l0000000000411410
l0000000000411473:
	r13 = rsp + 0x30<64>
	r9 = rbp
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x20<64>:word64] = r13
	r8 = Mem0[rbp + 0<64>:word64]
	call Mem0[rsp + 0xC0<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 8<32>)
	branch Test(EQ,Z) l00000000004113AD
	// succ:  l000000000041149E l00000000004113AD
l000000000041149E:
	SCZO = cond(eax - 6<32>)
	branch Test(NE,Z) l0000000000411440
	// succ:  l00000000004114A3 l0000000000411440
l00000000004114A3:
	Mem0[rsp + 0x20<64>:word64] = r13
	r9 = rbp
	r8 = Mem0[rbp + 0<64>:word64]
	edx = 6<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	call Mem0[rsp + 0xC0<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 7<32>)
	branch Test(NE,Z) l0000000000411440
	// succ:  l00000000004114C9 l0000000000411440
l00000000004114C9:
	rax = Mem0[rsp + 0x48<64>:word64]
	rdx = Mem0[rsp + 0x38<64>:word64]
	r8 = rbx
	Mem0[rbp + 0x18<64>:word64] = rdi
	r9 = Mem0[rsp + 0x40<64>:word64]
	rcx = rdi
	Mem0[rbp + 0x28<64>:word64] = rax
	Mem0[rbp + 0x20<64>:word64] = rdx
	Mem0[rbx + 0x38<64>:word64] = rax
	rax = Mem0[rsi + 0x40<64>:word64]
	Mem0[rbx + 0x18<64>:word32] = 4<32>
	Mem0[rbx + 0x28<64>:word64] = rdi
	Mem0[rbx + 0x30<64>:word64] = rdx
	Mem0[rsp + 0x20<64>:word64] = r12
	Mem0[rsp + 0x28<64>:word64] = rax
	call KERNEL32.dll!RtlUnwindEx (retsize: 8;)
	goto l0000000000411440
	// succ:  l0000000000411440
l0000000000411516:
	rax = Mem0[rsp + 0x38<64>:word64]
	Mem0[rbx + 0x28<64>:word64] = rdi
	r9 = rbx + 0x20<64>
	r8d = 4<32>
	r8 = CONVERT(r8d, word32, uint64)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 0x21474343<32>
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rbx + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0x48<64>:word64]
	Mem0[rbx + 0x38<64>:word64] = rax
	RaiseException(rcx, rdx, r8, r9)
	goto l0000000000411440
	// succ:  l0000000000411440
fn0000000000411340_exit:


// fn0000000000411550
// Return size: 8
define fn0000000000411550
fn0000000000411550_entry:
	rsp = fp
	// succ:  l0000000000411550
l0000000000411550:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rdi = rcx + 0x18<64>
	Mem0[rsp + 0x30<64>:word64] = rcx
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x38<64>:word64] = 0<64>
	r9 = rsp + 0x30<64>
	rdi = rdi & 0xFFFFFFFFFFFFFFF8<64>
	SZO = cond(rdi)
	C = false
	ecx = ecx - edi
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	ecx = ecx + 0x40<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	ecx = ecx >>u 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	// succ:  l0000000000411589
l0000000000411589:
	branch rcx == 0<64> l000000000041158C
	// succ:  l0000000000411589_1 l000000000041158C
l0000000000411589_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 8<i64>
	rcx = rcx - 1<64>
	goto l0000000000411589
	// succ:  l0000000000411589
l000000000041158C:
	ecx = 0x20474343<32>
	rcx = CONVERT(ecx, word32, uint64)
	RaiseException(rcx, rdx, r8, r9)
	eax = 5<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000411550_exit
fn0000000000411550_exit:


// fn00000000004115B0
// Return size: 0
define fn00000000004115B0
fn00000000004115B0_entry:
	rsp = fp
	// succ:  l00000000004115B0
l00000000004115B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x688<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsi = rsp + 0x30<64>
	rbx = rcx
	ecx = 0x13<32>
	rcx = CONVERT(ecx, word32, uint64)
	rbp = rsp + 0xD0<64>
	Mem0[rsp + 0x1E0<64>:word32] = 0x10001F<32>
	rdi = rsi
	// succ:  l00000000004115E0
l00000000004115E0:
	branch rcx == 0<64> l00000000004115E3
	// succ:  l00000000004115E0_1 l00000000004115E3
l00000000004115E0_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 8<i64>
	rcx = rcx - 1<64>
	goto l00000000004115E0
	// succ:  l00000000004115E0
l00000000004115E3:
	rdi = rbp
	Mem0[rsp + 0x30<64>:word32] = 0x20474343<32>
	Mem0[rsp + 0x34<64>:word32] = 1<32>
	Mem0[rsp + 0x48<64>:word32] = 4<32>
	Mem0[rsp + 0x50<64>:word64] = rbx
	cl = 0x1B<8>
	// succ:  l0000000000411605
l0000000000411605:
	branch rcx == 0<64> l0000000000411608
	// succ:  l0000000000411605_1 l0000000000411608
l0000000000411605_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 8<i64>
	rcx = rcx - 1<64>
	goto l0000000000411605
	// succ:  l0000000000411605
l0000000000411608:
	rax = Mem0[rbx + 0x18<64>:word64]
	rdi = rsp + 0x1B0<64>
	rcx = rdi
	Mem0[rsp + 0x58<64>:word64] = rax
	rax = Mem0[rbx + 0x20<64>:word64]
	Mem0[rsp + 0x60<64>:word64] = rax
	rax = Mem0[rbx + 0x28<64>:word64]
	Mem0[rsp + 0x68<64>:word64] = rax
	RtlCaptureContext(rcx)
	rdx = Mem0[rbx + 0x20<64>:word64]
	rcx = Mem0[rbx + 0x18<64>:word64]
	r9 = rbx
	r8 = rsi
	Mem0[rsp + 0x28<64>:word64] = rbp
	Mem0[rsp + 0x20<64>:word64] = rdi
	call KERNEL32.dll!RtlUnwindEx (retsize: 8;)
	abort()
	// succ:  l0000000000411658_thunk_fn0000000000411660
l0000000000411658_thunk_fn0000000000411660:
	call fn0000000000411660 (retsize: 0;)
	return
	// succ:  fn00000000004115B0_exit
fn00000000004115B0_exit:


// fn0000000000411660
// Return size: 0
define fn0000000000411660
fn0000000000411660_entry:
	rsp = fp
	// succ:  l0000000000411660
l0000000000411660:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0x10<64>:word64] - 0<64>)
	branch Test(NE,Z) l0000000000411675
	// succ:  l000000000041166B l0000000000411675
l000000000041166B:
	call fn0000000000411550 (retsize: 8;)
	// succ:  l0000000000411670
l0000000000411670:
	abort()
	// succ:  l0000000000411675
l0000000000411675:
	call fn00000000004111F0 (retsize: 8;)
	goto l0000000000411670
	// succ:  l0000000000411670
fn0000000000411660_exit:


// fn0000000000411680
// Return size: 8
define fn0000000000411680
fn0000000000411680_entry:
	rsp = fp
	// succ:  l0000000000411680
l0000000000411680:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rdi = rcx + 0x18<64>
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	r10 = rcx
	Mem0[rcx + 0x38<64>:word64] = 0<64>
	rdi = rdi & 0xFFFFFFFFFFFFFFF8<64>
	SZO = cond(rdi)
	C = false
	eax = eax - edi
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	r9d = SLICE(rax + 0x40<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	r9d = r9d >>u 3<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	ecx = r9d
	rcx = CONVERT(ecx, word32, uint64)
	// succ:  l00000000004116A5
l00000000004116A5:
	branch rcx == 0<64> l00000000004116A8
	// succ:  l00000000004116A5_1 l00000000004116A8
l00000000004116A5_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 8<i64>
	rcx = rcx - 1<64>
	goto l00000000004116A5
	// succ:  l00000000004116A5
l00000000004116A8:
	rcx = r10
	Mem0[r10 + 0x10<64>:word64] = rdx
	Mem0[r10 + 0x30<64>:word64] = r8
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004116B4_thunk_fn00000000004111F0
l00000000004116B4_thunk_fn00000000004111F0:
	call fn00000000004111F0 (retsize: 0;)
	return
	// succ:  fn0000000000411680_exit
fn0000000000411680_exit:


// fn00000000004116C0
// Return size: 0
define fn00000000004116C0
fn00000000004116C0_entry:
	rsp = fp
	// succ:  l00000000004116C0
l00000000004116C0:
	rax = Mem0[rcx + 8<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004116D4
	// succ:  l00000000004116C9 l00000000004116D4
l00000000004116C9:
	rdx = rcx
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	call rax (retsize: 0;)
	return
	// succ:  fn00000000004116C0_exit
l00000000004116D4:
	return
	// succ:  fn00000000004116C0_exit
fn00000000004116C0_exit:


// fn00000000004116E0
// Return size: 8
define fn00000000004116E0
fn00000000004116E0_entry:
	rsp = fp
	// succ:  l00000000004116E0
l00000000004116E0:
	eax = 5<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004116E0_exit
fn00000000004116E0_exit:


// fn00000000004116F0
// Return size: 8
define fn00000000004116F0
fn00000000004116F0_entry:
	rsp = fp
	// succ:  l00000000004116F0
l00000000004116F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rcx
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rax
	SCZO = cond(rax - 0x1000<64>)
	rcx = rsp + 0x18<64>
	branch Test(ULT,C) l0000000000411718
	// succ:  l00000000004116FF l0000000000411718
l00000000004116FF:
	rcx = rcx - 0x1000<64>
	SCZO = cond(rcx)
	v7 = Mem0[rcx:word64] | 0<64>
	Mem0[rcx:word64] = v7
	SZO = cond(Mem0[rcx:word64])
	C = false
	rax = rax - 0x1000<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 0x1000<64>)
	branch Test(UGT,CZ) l00000000004116FF
	// succ:  l0000000000411718 l00000000004116FF
l0000000000411718:
	rcx = rcx - rax
	SCZO = cond(rcx)
	v10 = Mem0[rcx:word64] | 0<64>
	Mem0[rcx:word64] = v10
	SZO = cond(Mem0[rcx:word64])
	C = false
	rax = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rcx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004116F0_exit
fn00000000004116F0_exit:


// fn0000000000411730
// Return size: 8
define fn0000000000411730
fn0000000000411730_entry:
	rsp = fp
	// succ:  l0000000000411730
l0000000000411730:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = CONVERT(r9d, word32, int64)
	eax = r8d
	rax = CONVERT(eax, word32, uint64)
	rsi = rdx
	eax = eax - ebx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - 0x40<32>)
	branch Test(GT,SZO) l0000000000411747
	// succ:  l0000000000411746 l0000000000411747
l0000000000411746:
	int3()
	// succ:  l0000000000411747
l0000000000411747:
	ecx = CONVERT(cx, word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rdx = rsi
	eax = GetAtomNameA(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004117A3
	// succ:  l0000000000411757 l00000000004117A3
l0000000000411757:
	int3()
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000041175D
l000000000041175D:
	rdx = rsi + rbx
	r10d = 0x40<32>
	r10 = CONVERT(r10d, word32, uint64)
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	goto l000000000041177A
	// succ:  l000000000041177A
l0000000000411770:
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	SCZO = cond(r8 - 0x40<64>)
	branch Test(EQ,Z) l000000000041179C
	// succ:  l000000000041177A l000000000041179C
l000000000041177A:
	SCZO = cond(Mem0[rdx + r8:byte] - 0x41<8>)
	branch Test(NE,Z) l0000000000411770
	// succ:  l0000000000411781 l0000000000411770
l0000000000411781:
	ecx = r10d
	rcx = CONVERT(ecx, word32, uint64)
	esi = r9d
	rsi = CONVERT(esi, word32, uint64)
	ecx = ecx - r8d
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	esi = esi << cl
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	rcx = CONVERT(esi, word32, int64)
	rax = rax | rcx
	SZO = cond(rax)
	C = false
	SCZO = cond(r8 - 0x40<64>)
	branch Test(NE,Z) l000000000041177A
	// succ:  l000000000041179C l000000000041177A
l000000000041179C:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000411730_exit
l00000000004117A3:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041175D
	// succ:  l000000000041175D
fn0000000000411730_exit:


// fn00000000004117B0
// Return size: 8
define fn00000000004117B0
fn00000000004117B0_entry:
	rsp = fp
	// succ:  l00000000004117B0
l00000000004117B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	rdi = rcx
	r12 = CONVERT(edx, word32, int64)
	r13 = r8
	eax = strlen(rcx)
	rsi = rax
	ebx = SLICE(rax + 0xF<64>, word32, 0)
	rbx = CONVERT(ebx, word32, uint64)
	eax = SLICE(rax + 0x52<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rax = rax + 0xF<64>
	SCZO = cond(rax)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	r14 = CONVERT(esi, word32, int64)
	rax = 0x656D68732D636367<64>
	r15 = rsp + 0x20<64>
	rcx = rsp + 0x2F<64>
	r8 = r14
	rdx = rdi
	Mem0[rsp + 0x20<64>:word64] = rax
	eax = 0x326D<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x28<64>:word32] = 0x64742D6D<32>
	Mem0[rsp + 0x2C<64>:word16] = ax
	rbx = CONVERT(ebx, word32, int64)
	Mem0[rsp + 0x2E<64>:byte] = 0x2D<8>
	rax = memcpy(rcx, rdx, r8)
	rax = r15 + 0x10<64> + r14
	r14d = SLICE(rsi + 0x50<64>, word32, 0)
	r14 = CONVERT(r14d, word32, uint64)
	rdx = 0x6161616161616161<64>
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = r15
	Mem0[rax:word64] = rdx
	Mem0[rax + 8<64>:word64] = rdx
	Mem0[rax + 0x10<64>:word64] = rdx
	Mem0[rax + 0x18<64>:word64] = rdx
	Mem0[rax + 0x20<64>:word64] = rdx
	Mem0[rax + 0x28<64>:word64] = rdx
	Mem0[rax + 0x30<64>:word64] = rdx
	Mem0[rax + 0x38<64>:word64] = rdx
	rax = CONVERT(r14d, word32, int64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x20<64> + rax:byte] = 0<8>
	Mem0[rsp + 0x20<64> + rbx:byte] = 0<8>
	rax = CreateMutexA(rcx, rdx, r8)
	Mem0[rsp + 0x20<64> + rbx:byte] = 0x2D<8>
	rdi = rax
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	eax = WaitForSingleObject(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000411899
	// succ:  l0000000000411898 l0000000000411899
l0000000000411898:
	int3()
	// succ:  l0000000000411899
l0000000000411899:
	rcx = r15
	ax = FindAtomA(rcx)
	SZO = cond(ax & ax)
	C = false
	branch Test(NE,Z) l0000000000411938
	// succ:  l00000000004118AB l0000000000411938
l00000000004118AB:
	rcx = r12
	rax = malloc(rcx)
	r9d = SLICE(rsi + 0x10<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	rbx = rax
	r10d = 0x40<32>
	r10 = CONVERT(r10d, word32, uint64)
	// succ:  l00000000004118C0
l00000000004118C0:
	C = __bt(rbx, r10)
	branch Test(UGE,C) l00000000004118D4
	// succ:  l00000000004118C6 l00000000004118D4
l00000000004118C6:
	r11d = r14d
	r11 = CONVERT(r11d, word32, uint64)
	r11d = r11d - r10d
	r11 = CONVERT(r11d, word32, uint64)
	SCZO = cond(r11d)
	r11 = CONVERT(r11d, word32, int64)
	Mem0[r15 + r11:byte] = 0x41<8>
	// succ:  l00000000004118D4
l00000000004118D4:
	r10d = r10d - 1<32>
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	branch Test(NE,Z) l00000000004118C0
	// succ:  l00000000004118DA l00000000004118C0
l00000000004118DA:
	Mem0[rbp - 0x54<64>:word32] = r9d
	rcx = r15
	ax = AddAtomA(rcx)
	SZO = cond(ax & ax)
	C = false
	r9d = Mem0[rbp - 0x54<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	branch Test(EQ,Z) l0000000000411935
	// succ:  l00000000004118F0 l0000000000411935
l00000000004118F0:
	r8d = SLICE(rsi + 0x51<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	ecx = CONVERT(ax, word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rdx = r15
	call fn0000000000411730 (retsize: 8;)
	SCZO = cond(rax - rbx)
	rsi = rax
	branch Test(EQ,Z) l0000000000411950
	// succ:  l0000000000411907 l0000000000411950
l0000000000411907:
	rcx = rbx
	free(rcx)
	// succ:  l000000000041190F
l000000000041190F:
	rcx = rdi
	eax = ReleaseMutex(rcx)
	rcx = rdi
	eax = CloseHandle(rcx)
	rax = rsi
	rsp = rbp - 0x48<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004117B0_exit
l0000000000411935:
	int3()
	goto l00000000004118F0
	// succ:  l00000000004118F0
l0000000000411938:
	r9d = SLICE(rsi + 0x10<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	r8d = SLICE(rsi + 0x51<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	ecx = CONVERT(ax, word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rdx = r15
	call fn0000000000411730 (retsize: 8;)
	rsi = rax
	goto l000000000041190F
	// succ:  l000000000041190F
l0000000000411950:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = r12
	rcx = rbx
	rax = memset(rcx, rdx, r8)
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l000000000041190F
	// succ:  l0000000000411962 l000000000041190F
l0000000000411962:
	rcx = rbx
	call r13 (retsize: 8;)
	goto l000000000041190F
	// succ:  l000000000041190F
fn00000000004117B0_exit:


// fn0000000000411970
// Return size: 8
define fn0000000000411970
fn0000000000411970_entry:
	rsp = fp
	// succ:  l0000000000411970
l0000000000411970:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = Mem0[rcx + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rsi = Mem0[rcx + 0x10<64>:word64]
	rbx = rcx
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 3<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(edx - 2<32>)
	branch Test(EQ,Z) l00000000004119A3
	// succ:  l000000000041198C l00000000004119A3
l000000000041198C:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	// succ:  l000000000041198E
l000000000041198E:
	eax = edi
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx:word64] = rsi
	Mem0[rbx + 8<64>:word32] = 0<32>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000411970_exit
l00000000004119A3:
	SZO = cond(eax & 0x108<32>)
	C = false
	branch Test(EQ,Z) l000000000041198C
	// succ:  l00000000004119AA l000000000041198C
l00000000004119AA:
	rbp = Mem0[rcx:word64]
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	rbp = rbp - rsi
	SCZO = cond(rbp)
	SZO = cond(rbp & rbp)
	C = false
	branch Test(LE,SZO) l000000000041198E
	// succ:  l00000000004119B7 l000000000041198E
l00000000004119B7:
	call fileno (retsize: 8;)
	r8d = ebp
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rsi
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	call write (retsize: 8;)
	rax = CONVERT(eax, int32, int64)
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l00000000004119E3
	// succ:  l00000000004119D0 l00000000004119E3
l00000000004119D0:
	eax = Mem0[rbx + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & 0x80<8>)
	C = false
	branch Test(EQ,Z) l00000000004119DD
	// succ:  l00000000004119D7 l00000000004119DD
l00000000004119D7:
	eax = eax & 0xFFFFFFFD<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x18<64>:word32] = eax
	// succ:  l00000000004119DD
l00000000004119DD:
	rsi = Mem0[rbx + 0x10<64>:word64]
	goto l000000000041198E
	// succ:  l000000000041198E
l00000000004119E3:
	v22 = Mem0[rbx + 0x18<64>:word32] | 0x20<32>
	Mem0[rbx + 0x18<64>:word32] = v22
	SZO = cond(Mem0[rbx + 0x18<64>:word32])
	C = false
	rsi = Mem0[rbx + 0x10<64>:word64]
	edi = 0xFFFFFFFF<32>
	rdi = CONVERT(edi, word32, uint64)
	goto l000000000041198E
	// succ:  l000000000041198E
fn0000000000411970_exit:


// fn0000000000411A00
// Return size: 8
define fn0000000000411A00
fn0000000000411A00_entry:
	rsp = fp
	// succ:  l0000000000411A00
l0000000000411A00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	SCZO = cond(r8d - 1<32>)
	rbx = rcx
	rsi = rdx
	branch Test(EQ,Z) l0000000000411A40
	// succ:  l0000000000411A13 l0000000000411A40
l0000000000411A13:
	SCZO = cond(r8d - 2<32>)
	branch Test(EQ,Z) l0000000000411A60
	// succ:  l0000000000411A19 l0000000000411A60
l0000000000411A19:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NE,Z) l0000000000411A83
	// succ:  l0000000000411A1E l0000000000411A83
l0000000000411A1E:
	rdi = rsp + 0x28<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	// succ:  l0000000000411A28
l0000000000411A28:
	rdx = rdi
	rcx = rbx
	call msvcrt.dll!fsetpos (retsize: 8;)
	// succ:  l0000000000411A33
l0000000000411A33:
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000411A00_exit
l0000000000411A40:
	rdi = rsp + 0x28<64>
	rdx = rdi
	call msvcrt.dll!fgetpos (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000411A95
	// succ:  l0000000000411A51 l0000000000411A95
l0000000000411A51:
	v14 = Mem0[rsp + 0x28<64>:word64] + rsi
	Mem0[rsp + 0x28<64>:word64] = v14
	SCZO = cond(v14)
	goto l0000000000411A28
	// succ:  l0000000000411A28
l0000000000411A60:
	call msvcrt.dll!fflush (retsize: 8;)
	rcx = rbx
	rdi = rsp + 0x28<64>
	call fileno (retsize: 8;)
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	call filelengthi64 (retsize: 8;)
	rsi = rsi + rax
	SCZO = cond(rsi)
	Mem0[rsp + 0x28<64>:word64] = rsi
	goto l0000000000411A28
	// succ:  l0000000000411A28
l0000000000411A83:
	eax = _errno()
	Mem0[rax:word32] = 0x16<32>
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000411A33
	// succ:  l0000000000411A33
l0000000000411A95:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000411A33
	// succ:  l0000000000411A33
fn0000000000411A00_exit:


// fn0000000000411AA0
// Return size: 8
define fn0000000000411AA0
fn0000000000411AA0_entry:
	rsp = fp
	// succ:  l0000000000411AA0
l0000000000411AA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	eax = _errno()
	rcx = rbx
	Mem0[rax:word32] = 0<32>
	call fileno (retsize: 8;)
	ebp = eax
	rbp = CONVERT(ebp, word32, uint64)
	eax = Mem0[rbx + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000411C00
	// succ:  l0000000000411AD3 l0000000000411C00
l0000000000411AD3:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	ecx = ebp
	rcx = CONVERT(ecx, word32, uint64)
	call lseeki64 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rsi = rax
	branch Test(SG,S) l0000000000411C30
	// succ:  l0000000000411AEE l0000000000411C30
l0000000000411AEE:
	r8d = Mem0[rbx + 0x18<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d & 0x108<32>)
	C = false
	branch Test(EQ,Z) l0000000000411BF0
	// succ:  l0000000000411AFF l0000000000411BF0
l0000000000411AFF:
	rax = Mem0[rbx:word64]
	rdx = Mem0[rbx + 0x10<64>:word64]
	r9 = rax
	r9 = r9 - rdx
	SCZO = cond(r9)
	SZO = cond(r8b & 3<8>)
	C = false
	branch Test(NE,Z) l0000000000411B91
	// succ:  l0000000000411B12 l0000000000411B91
l0000000000411B12:
	SZO = cond(r8b & 0x80<8>)
	C = false
	branch Test(EQ,Z) l0000000000411CD3
	// succ:  l0000000000411B1C l0000000000411CD3
l0000000000411B1C:
	rdi = r9
	// succ:  l0000000000411B1F
l0000000000411B1F:
	SZO = cond(rsi & rsi)
	C = false
	rax = rdi
	branch Test(EQ,Z) l0000000000411B80
	// succ:  l0000000000411B27 l0000000000411B80
l0000000000411B27:
	r8d = r8d & 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	branch Test(EQ,Z) l0000000000411C10
	// succ:  l0000000000411B31 l0000000000411C10
l0000000000411B31:
	rax = CONVERT(Mem0[rbx + 8<64>:word32], word32, int64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000411C20
	// succ:  l0000000000411B3D l0000000000411C20
l0000000000411B3D:
	r14 = Mem0[0x0000000000491F10<p64>:word64]
	r15 = r9 + rax
	r13d = ebp
	r13 = CONVERT(r13d, word32, uint64)
	r13d = r13d >> 5<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	r12d = ebp
	r12 = CONVERT(r12d, word32, uint64)
	r13 = CONVERT(r13d, word32, int64)
	r12d = r12d & 0x1F<32>
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	rax = Mem0[r14:word64]
	r12 = r12 << 6<64>
	SCZO = cond(r12)
	rax = Mem0[rax + r13 * 8<64>:word64]
	SCZO = cond(Mem0[rax + 8<64>:byte] - 0<8>)
	branch Test(SG,S) l0000000000411C40
	// succ:  l0000000000411B70 l0000000000411C40
l0000000000411B70:
	r9 = r15
	rax = rdi
	// succ:  l0000000000411B76
l0000000000411B76:
	rsi = rsi - r9
	SCZO = cond(rsi)
	rax = rax + rsi
	SCZO = cond(rax)
	// succ:  l0000000000411B80
l0000000000411B80:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000411AA0_exit
l0000000000411B91:
	rcx = Mem0[0x0000000000491F10<p64>:word64]
	r10d = ebp
	r10 = CONVERT(r10d, word32, uint64)
	rdi = r9
	r10d = r10d >> 5<32>
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	r10 = CONVERT(r10d, word32, int64)
	r11 = Mem0[rcx:word64]
	ecx = ebp
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx & 0x1F<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rcx = rcx << 6<64>
	SCZO = cond(rcx)
	rcx = rcx + Mem0[r11 + r10 * 8<64>:word64]
	SCZO = cond(rcx)
	SCZO = cond(Mem0[rcx + 8<64>:byte] - 0<8>)
	branch Test(NS,S) l0000000000411B1F
	// succ:  l0000000000411BBF l0000000000411B1F
l0000000000411BBF:
	SCZO = cond(rax - rdx)
	branch Test(ULE,CZ) l0000000000411B1C
	// succ:  l0000000000411BC8 l0000000000411B1C
l0000000000411BC8:
	// succ:  l0000000000411BD0
l0000000000411BD0:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	SCZO = cond(Mem0[rdx:byte] - 0xA<8>)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	rdi = rdi + rcx
	SCZO = cond(rdi)
	SCZO = cond(rdx - rax)
	branch Test(NE,Z) l0000000000411BD0
	// succ:  l0000000000411BE4 l0000000000411BD0
l0000000000411BE4:
	goto l0000000000411B1F
	// succ:  l0000000000411B1F
l0000000000411BF0:
	rax = CONVERT(Mem0[rbx + 8<64>:word32], word32, int64)
	rsi = rsi - rax
	SCZO = cond(rsi)
	rax = rsi
	goto l0000000000411B80
	// succ:  l0000000000411B80
l0000000000411C00:
	Mem0[rbx + 8<64>:word32] = 0<32>
	goto l0000000000411AD3
	// succ:  l0000000000411AD3
l0000000000411C10:
	rax = rdi
	rax = rax + rsi
	SCZO = cond(rax)
	goto l0000000000411B80
	// succ:  l0000000000411B80
l0000000000411C20:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	goto l0000000000411B76
	// succ:  l0000000000411B76
l0000000000411C30:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	goto l0000000000411B80
	// succ:  l0000000000411B80
l0000000000411C40:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8d = 2<32>
	r8 = CONVERT(r8d, word32, uint64)
	ecx = ebp
	rcx = CONVERT(ecx, word32, uint64)
	call lseeki64 (retsize: 8;)
	SCZO = cond(rax - rsi)
	branch Test(NE,Z) l0000000000411C8B
	// succ:  l0000000000411C54 l0000000000411C8B
l0000000000411C54:
	rax = Mem0[rbx + 0x10<64>:word64]
	rcx = rax + r15
	SCZO = cond(rax - rcx)
	branch Test(UGE,C) l0000000000411C75
	// succ:  l0000000000411C61 l0000000000411C75
l0000000000411C61:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(Mem0[rax:byte] - 0xA<8>)
	dl = CONVERT(Test(EQ,Z), bool, int8)
	rax = rax + 1<64>
	SCZO = cond(rax)
	r15 = r15 + rdx
	SCZO = cond(r15)
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000411C61
	// succ:  l0000000000411C75 l0000000000411C61
l0000000000411C75:
	SZO = cond(Mem0[rbx + 0x19<64>:byte] & 0x20<8>)
	C = false
	branch Test(EQ,Z) l0000000000411B70
	// succ:  l0000000000411C7F l0000000000411B70
l0000000000411C7F:
	r9 = r15 + 1<64>
	rax = rdi
	goto l0000000000411B76
	// succ:  l0000000000411B76
l0000000000411C8B:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rsi
	ecx = ebp
	rcx = CONVERT(ecx, word32, uint64)
	call lseeki64 (retsize: 8;)
	SCZO = cond(r15 - 0x200<64>)
	branch Test(UGT,CZ) l0000000000411CB4
	// succ:  l0000000000411CA1 l0000000000411CB4
l0000000000411CA1:
	eax = Mem0[rbx + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r9d = 0x200<32>
	r9 = CONVERT(r9d, word32, uint64)
	eax = eax & 0x408<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 8<32>)
	branch Test(EQ,Z) l0000000000411CB8
	// succ:  l0000000000411CB4 l0000000000411CB8
l0000000000411CB4:
	r9 = CONVERT(Mem0[rbx + 0x24<64>:word32], word32, int64)
	// succ:  l0000000000411CB8
l0000000000411CB8:
	rax = Mem0[r14:word64]
	rax = Mem0[rax + r13 * 8<64>:word64]
	SZO = cond(Mem0[rax + 8<64>:byte] & 4<8>)
	C = false
	branch Test(EQ,Z) l0000000000411CCB
	// succ:  l0000000000411CC7 l0000000000411CCB
l0000000000411CC7:
	r9 = r9 + 1<64>
	SCZO = cond(r9)
	// succ:  l0000000000411CCB
l0000000000411CCB:
	rax = rdi
	goto l0000000000411B76
	// succ:  l0000000000411B76
l0000000000411CD3:
	eax = _errno()
	Mem0[rax:word32] = 0x16<32>
	rax = 0xFFFFFFFFFFFFFFFF<64>
	goto l0000000000411B80
	// succ:  l0000000000411B80
fn0000000000411AA0_exit:


// fn0000000000411CF0
// Return size: 8
define fn0000000000411CF0
fn0000000000411CF0_entry:
	rsp = fp
	// succ:  l0000000000411CF0
l0000000000411CF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rdi = rdx
	esi = r8d
	rsi = CONVERT(esi, word32, uint64)
	eax = _errno()
	SZO = cond(rbx & rbx)
	C = false
	Mem0[rax:word32] = 0<32>
	branch Test(EQ,Z) l0000000000411D90
	// succ:  l0000000000411D14 l0000000000411D90
l0000000000411D14:
	SCZO = cond(esi - 2<32>)
	branch Test(UGT,CZ) l0000000000411D90
	// succ:  l0000000000411D19 l0000000000411D90
l0000000000411D19:
	v17 = Mem0[rbx + 0x18<64>:word32] & 0xFFFFFFEF<32>
	Mem0[rbx + 0x18<64>:word32] = v17
	SZO = cond(Mem0[rbx + 0x18<64>:word32])
	C = false
	SCZO = cond(esi - 1<32>)
	branch Test(EQ,Z) l0000000000411D80
	// succ:  l0000000000411D22 l0000000000411D80
l0000000000411D22:
	rcx = rbx
	call fn0000000000411970 (retsize: 8;)
	eax = Mem0[rbx + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & 0x80<8>)
	C = false
	branch Test(NE,Z) l0000000000411D64
	// succ:  l0000000000411D31 l0000000000411D64
l0000000000411D31:
	eax = eax & 0x409<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 9<32>)
	branch Test(EQ,Z) l0000000000411D70
	// succ:  l0000000000411D3B l0000000000411D70
l0000000000411D3B:
	rcx = rbx
	call fileno (retsize: 8;)
	r8d = esi
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rdi
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	call lseeki64 (retsize: 8;)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = -eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	C = eax == 0<32>
	// succ:  l0000000000411D5C
l0000000000411D5C:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000411CF0_exit
l0000000000411D64:
	eax = eax & 0xFFFFFFFC<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x18<64>:word32] = eax
	goto l0000000000411D3B
	// succ:  l0000000000411D3B
l0000000000411D70:
	Mem0[rbx + 0x24<64>:word32] = 0x200<32>
	goto l0000000000411D3B
	// succ:  l0000000000411D3B
l0000000000411D80:
	rcx = rbx
	sil = sil ^ sil
	SZO = cond(sil)
	C = false
	call fn0000000000411AA0 (retsize: 8;)
	rdi = rdi + rax
	SCZO = cond(rdi)
	goto l0000000000411D22
	// succ:  l0000000000411D22
l0000000000411D90:
	eax = _errno()
	Mem0[rax:word32] = 0x16<32>
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000411D5C
	// succ:  l0000000000411D5C
fn0000000000411CF0_exit:


// fn0000000000411DB0
// Return size: 8
define fn0000000000411DB0
fn0000000000411DB0_entry:
	rsp = fp
	// succ:  l0000000000411DB0
l0000000000411DB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	esi = ecx
	rsi = CONVERT(esi, word32, uint64)
	eax = __doserrno()
	rcx = 0x0000000000490740<p64>
	Mem0[rax:word32] = esi
	goto l0000000000411DE2
	// succ:  l0000000000411DE2
l0000000000411DD0:
	rdx = 0x0000000000490744<p64>
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	SCZO = cond(Mem0[rdx + 8<64> + rax:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000411E10
	// succ:  l0000000000411DE2 l0000000000411E10
l0000000000411DE2:
	SCZO = cond(Mem0[rcx + rbx * 8<64>:word32] - esi)
	rax = CONVERT(0<32> + rbx * 8<64>, word32, word64)
	branch Test(NE,Z) l0000000000411DD0
	// succ:  l0000000000411DEF l0000000000411DD0
l0000000000411DEF:
	eax = _errno()
	rdx = 0x0000000000490740<p64>
	edx = Mem0[rdx + 4<64> + rbx * 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rax:word32] = edx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000411DB0_exit
l0000000000411E10:
	eax = SLICE(rsi - 0x13<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x11<32>)
	branch Test(ULE,CZ) l0000000000411E47
	// succ:  l0000000000411E18 l0000000000411E47
l0000000000411E18:
	esi = esi - 0xBC<32>
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	SCZO = cond(esi - 0xE<32>)
	branch Test(ULE,CZ) l0000000000411E35
	// succ:  l0000000000411E23 l0000000000411E35
l0000000000411E23:
	eax = _errno()
	Mem0[rax:word32] = 0x16<32>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000411DB0_exit
l0000000000411E35:
	eax = _errno()
	Mem0[rax:word32] = 8<32>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000411DB0_exit
l0000000000411E47:
	eax = _errno()
	Mem0[rax:word32] = 0xD<32>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000411DB0_exit
fn0000000000411DB0_exit:


// fn0000000000411E60
// Return size: 8
define fn0000000000411E60
fn0000000000411E60_entry:
	rsp = fp
	// succ:  l0000000000411E60
l0000000000411E60:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rdx = rsp + 0x28<64>
	call msvcrt.dll!fgetpos (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	rax = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(NE,Z) l0000000000411E7D
	// succ:  l0000000000411E77_1 l0000000000411E7D
l0000000000411E77_1:
	rax = Mem0[rsp + 0x28<64>:word64]
	// succ:  l0000000000411E7D
l0000000000411E7D:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000411E60_exit
fn0000000000411E60_exit:


// fn0000000000411E90
// Return size: 8
define fn0000000000411E90
fn0000000000411E90_entry:
	rsp = fp
	// succ:  l0000000000411E90
l0000000000411E90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	SZO = cond(rdx & rdx)
	C = false
	rsi = rcx
	branch Test(EQ,Z) l0000000000411ED0
	// succ:  l0000000000411E9E l0000000000411ED0
l0000000000411E9E:
	rbx = rdx - 1<64>
	Mem0[rsp + 0x20<64>:word64] = r9
	rdx = rcx
	r9 = r8
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8d = ebx
	r8 = CONVERT(r8d, word32, uint64)
	call fn00000000004149D0 (retsize: 8;)
	SCZO = cond(eax - ebx)
	branch Test(GT,SZO) l0000000000411EBC
	// succ:  l0000000000411EB9_1 l0000000000411EBC
l0000000000411EB9_1:
	ebx = eax
	// succ:  l0000000000411EBC
l0000000000411EBC:
	rbx = CONVERT(ebx, word32, int64)
	Mem0[rsi + rbx:byte] = 0<8>
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000411E90_exit
l0000000000411ED0:
	Mem0[rsp + 0x20<64>:word64] = r9
	rdx = rcx
	r9 = r8
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn00000000004149D0 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000411E90_exit
fn0000000000411E90_exit:


// fn0000000000411EF0
// Return size: 0
define fn0000000000411EF0
fn0000000000411EF0_entry:
	rsp = fp
	// succ:  l0000000000411EF0
l0000000000411EF0:
	rax = fopen(rcx, rdx)
	return
	// succ:  fn0000000000411EF0_exit
fn0000000000411EF0_exit:


// fn0000000000411F00
// Return size: 0
define fn0000000000411F00
fn0000000000411F00_entry:
	rsp = fp
	// succ:  l0000000000411F00
l0000000000411F00:
	call lseeki64 (retsize: 0;)
	return
	// succ:  fn0000000000411F00_exit
fn0000000000411F00_exit:


// fn0000000000411F10
// Return size: 8
define fn0000000000411F10
fn0000000000411F10_entry:
	rsp = fp
	// succ:  l0000000000411F10
l0000000000411F10:
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	r8 = 0x0000000000477070<p64>
	rax = rsp + 0x40<64>
	r9 = rsp + 0x4C<64>
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000415960 (retsize: 8;)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 7<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(edx - 5<32>)
	branch Test(UGT,CZ) l0000000000411FB0
	// succ:  l0000000000411F39 l0000000000411FB0
l0000000000411F39:
	rcx = 0x00000000004908C0<p64>
	rdx = CONVERT(Mem0[rcx + rdx * 4<64>:word32], word32, int64)
	rcx = rcx + rdx
	SCZO = cond(rcx)
	switch (edx) { l0000000000411FB0 l0000000000411F80 l0000000000411F71 l0000000000411F50 l0000000000411FA0 l0000000000411F80 }
	// succ:  l0000000000411FB0 l0000000000411F80 l0000000000411F71 l0000000000411F50 l0000000000411FA0 l0000000000411F80
l0000000000411F50:
	edx = 0x7F800000<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000411F55
l0000000000411F55:
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx | 0x80000000<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	SZO = cond(al & 8<8>)
	C = false
	branch Test(EQ,Z) l0000000000411F62
	// succ:  l0000000000411F5F_1 l0000000000411F62
l0000000000411F5F_1:
	edx = ecx
	// succ:  l0000000000411F62
l0000000000411F62:
	Mem0[rsp + 0x3C<64>:word32] = edx
	xmm0 = SEQ(0<96>, Mem0[rsp + 0x3C<64>:real32])
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000411F10_exit
l0000000000411F71:
	edx = Mem0[rsp + 0x40<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000411F55
	// succ:  l0000000000411F55
l0000000000411F80:
	ecx = Mem0[rsp + 0x4C<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	edx = SLICE(rcx + 0x96<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	ecx = Mem0[rsp + 0x40<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	edx = edx << 0x17<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	ecx = ecx & 0x7FFFFF<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx | ecx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000411F55
	// succ:  l0000000000411F55
l0000000000411FA0:
	edx = 0x7FC00000<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000411F55
	// succ:  l0000000000411F55
l0000000000411FB0:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000411F55
	// succ:  l0000000000411F55
fn0000000000411F10_exit:


// fn0000000000411FC0
// Return size: 8
define fn0000000000411FC0
fn0000000000411FC0_entry:
	rsp = fp
	// succ:  l0000000000411FC0
l0000000000411FC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r8 = 0x0000000000477090<p64>
	rax = rsp + 0x50<64>
	r9 = rsp + 0x4C<64>
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000415960 (retsize: 8;)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 7<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(edx - 6<32>)
	branch Test(UGT,CZ) l0000000000412015
	// succ:  l0000000000411FEA l0000000000412015
l0000000000411FEA:
	rcx = 0x00000000004908E0<p64>
	rdx = CONVERT(Mem0[rcx + rdx * 4<64>:word32], word32, int64)
	rcx = rcx + rdx
	SCZO = cond(rcx)
	switch (edx) { l0000000000412050 l0000000000412054 l0000000000412080 l0000000000412091 l0000000000412040 l0000000000412000 l0000000000412050 }
	// succ:  l0000000000412050 l0000000000412054 l0000000000412080 l0000000000412091 l0000000000412040 l0000000000412000 l0000000000412050
l0000000000412000:
	ebx = Mem0[rsp + 0x54<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	edx = Mem0[rsp + 0x50<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	ebx = ebx | 0x7FF00000<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	rbx = rbx << 0x20<64>
	SCZO = cond(rbx)
	rbx = rbx | rdx
	SZO = cond(rbx)
	C = false
	// succ:  l0000000000412015
l0000000000412015:
	SZO = cond(al & 8<8>)
	C = false
	branch Test(EQ,Z) l000000000041202E
	// succ:  l0000000000412019 l000000000041202E
l0000000000412019:
	rax = rbx
	ebx = ebx
	rbx = CONVERT(ebx, word32, uint64)
	rax = rax >>u 0x20<64>
	SCZO = cond(rax)
	eax = eax | 0x80000000<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rax = rax << 0x20<64>
	SCZO = cond(rax)
	rbx = rbx | rax
	SZO = cond(rbx)
	C = false
	// succ:  l000000000041202E
l000000000041202E:
	Mem0[rsp + 0x38<64>:word64] = rbx
	xmm0 = SEQ(0<64>, Mem0[rsp + 0x38<64>:real64])
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000411FC0_exit
l0000000000412040:
	rbx = 0x7FF8000000000000<64>
	goto l0000000000412015
	// succ:  l0000000000412015
l0000000000412050:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l0000000000412015
	// succ:  l0000000000412015
l0000000000412054:
	ebx = Mem0[rsp + 0x4C<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	edx = Mem0[rsp + 0x54<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	ebx = ebx + 0x433<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	edx = edx & 0xFFEFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ebx = ebx << 0x14<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	ebx = ebx | edx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	edx = Mem0[rsp + 0x50<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rbx = rbx << 0x20<64>
	SCZO = cond(rbx)
	rbx = rbx | rdx
	SZO = cond(rbx)
	C = false
	goto l0000000000412015
	// succ:  l0000000000412015
l0000000000412080:
	ebx = Mem0[rsp + 0x54<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	edx = Mem0[rsp + 0x50<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rbx = rbx << 0x20<64>
	SCZO = cond(rbx)
	rbx = rbx | rdx
	SZO = cond(rbx)
	C = false
	goto l0000000000412015
	// succ:  l0000000000412015
l0000000000412091:
	rbx = 0x7FF0000000000000<64>
	goto l0000000000412015
	// succ:  l0000000000412015
fn0000000000411FC0_exit:


// fn00000000004120A0
// Return size: 8
define fn00000000004120A0
fn00000000004120A0_entry:
	rsp = fp
	// succ:  l00000000004120A0
l00000000004120A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xD8<64>
	SCZO = cond(rsp)
	rbp = rcx
	Mem0[rsp + 0x128<64>:word64] = rdx
	call msvcrt.dll!localeconv (retsize: 8;)
	rax = Mem0[rax:word64]
	rcx = rbp
	r14 = rbp
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x30<64>:byte] = al
	eax = strlen(rcx)
	r13d = SLICE(rax + 2<64>, word32, 0)
	r13 = CONVERT(r13d, word32, uint64)
	r12 = rax
	rcx = CONVERT(r13d, word32, int64)
	rax = malloc(rcx)
	rdi = rax
	goto l00000000004120F4
	// succ:  l00000000004120F4
l00000000004120F0:
	r14 = r14 + 1<64>
	SCZO = cond(r14)
	// succ:  l00000000004120F4
l00000000004120F4:
	ecx = CONVERT(Mem0[r14:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	esi = r14d
	rsi = CONVERT(esi, word32, uint64)
	esi = esi - ebp
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	ebx = ecx
	rbx = CONVERT(ebx, word32, uint64)
	eax = isspace(rcx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004120F0
	// succ:  l0000000000412108 l00000000004120F0
l0000000000412108:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(LE,SZO) l00000000004128D9
	// succ:  l0000000000412111 l00000000004128D9
l0000000000412111:
	SZO = cond(bl & bl)
	C = false
	rdx = rdi + 1<64>
	rax = r14 + 1<64>
	Mem0[rdi:byte] = bl
	branch Test(EQ,Z) l0000000000412148
	// succ:  l000000000041211F l0000000000412148
l000000000041211F:
	r12d = r12d + 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	r8 = r14 + 1<64>
	goto l0000000000412143
	// succ:  l0000000000412143
l0000000000412130:
	rax = rax + 1<64>
	SCZO = cond(rax)
	ecx = CONVERT(Mem0[rax - 1<64>:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	SZO = cond(cl & cl)
	C = false
	Mem0[rdx - 1<64>:byte] = cl
	branch Test(EQ,Z) l0000000000412148
	// succ:  l0000000000412143 l0000000000412148
l0000000000412143:
	SCZO = cond(rax - r8)
	branch Test(NE,Z) l0000000000412130
	// succ:  l0000000000412148 l0000000000412130
l0000000000412148:
	Mem0[rdx:byte] = 0<8>
	eax = CONVERT(Mem0[rdi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x2D<8>)
	branch Test(EQ,Z) l0000000000412290
	// succ:  l0000000000412156 l0000000000412290
l0000000000412156:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rbx = rdi
	SCZO = cond(al - 0x2B<8>)
	Mem0[rsp + 0x4E<64>:word16] = dx
	rdx = rdi + 1<64>
	branch Test(NE,Z) l000000000041216A
	// succ:  l0000000000412166_1 l000000000041216A
l0000000000412166_1:
	rbx = rdx
	// succ:  l000000000041216A
l000000000041216A:
	rcx = 0x0000000000490900<p64>
	r8d = 3<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbx
	eax = _strnicmp(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000412210
	// succ:  l0000000000412187 l0000000000412210
l0000000000412187:
	rbp = rbx + 3<64>
	rcx = 0x0000000000490904<p64>
	r8d = 5<32>
	r8 = CONVERT(r8d, word32, uint64)
	rbx = rbx + 8<64>
	SCZO = cond(rbx)
	r13 = rsp + 0x70<64>
	rdx = rbp
	eax = _strnicmp(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	eax = 0x7FFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x70<64>:word64] = 0<64>
	branch Test(NE,Z) l00000000004121BD
	// succ:  l00000000004121B9_1 l00000000004121BD
l00000000004121B9_1:
	rbp = rbx
	// succ:  l00000000004121BD
l00000000004121BD:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	Mem0[rsp + 0x78<64>:word64] = 0<64>
	Mem0[rsp + 0x80<64>:word16] = r15w
	Mem0[rsp + 0x72<64>:word16] = ax
	// succ:  l00000000004121D7
l00000000004121D7:
	eax = CONVERT(Mem0[rsp + 0x4E<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = Mem0[rsp + 0x128<64>:word64]
	rcx = r13
	Mem0[rsp + 0x70<64>:word16] = ax
	call fn0000000000417BF0 (retsize: 8;)
	// succ:  l00000000004121F1
l00000000004121F1:
	rbp = rbp - rdi
	SCZO = cond(rbp)
	ebp = ebp + esi
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	// succ:  l00000000004121F6
l00000000004121F6:
	eax = ebp
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0xD8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004120A0_exit
l0000000000412210:
	rcx = 0x000000000049090A<p64>
	r8d = 3<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbx
	eax = _strnicmp(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004122A3
	// succ:  l0000000000412229 l00000000004122A3
l0000000000412229:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	rbp = rbx + 3<64>
	r8d = 0x7FFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r10d = 0xFFFFC000<32>
	r10 = CONVERT(r10d, word32, uint64)
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	Mem0[rsp + 0x7E<64>:word16] = r13w
	Mem0[rsp + 0x72<64>:word16] = r8w
	r13 = rsp + 0x70<64>
	Mem0[rsp + 0x74<64>:word16] = r9w
	Mem0[rsp + 0x76<64>:word16] = r10w
	Mem0[rsp + 0x78<64>:word16] = r11w
	Mem0[rsp + 0x7A<64>:word16] = bx
	Mem0[rsp + 0x7C<64>:word16] = r12w
	Mem0[rsp + 0x80<64>:word16] = r14w
	goto l00000000004121D7
	// succ:  l00000000004121D7
l0000000000412290:
	ecx = 0xFFFFFFFF<32>
	rcx = CONVERT(ecx, word32, uint64)
	rbx = rdi + 1<64>
	Mem0[rsp + 0x4E<64>:word16] = cx
	goto l000000000041216A
	// succ:  l000000000041216A
l00000000004122A3:
	eax = CONVERT(Mem0[rbx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	Mem0[rsp + 0x70<64>:word64] = 0<64>
	Mem0[rsp + 0x78<64>:word64] = 0<64>
	Mem0[rsp + 0x80<64>:word16] = cx
	SCZO = cond(al - 0x30<8>)
	branch Test(NE,Z) l0000000000412938
	// succ:  l00000000004122CA l0000000000412938
l00000000004122CA:
	// succ:  l00000000004122D0
l00000000004122D0:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	eax = CONVERT(Mem0[rbx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x30<8>)
	branch Test(EQ,Z) l00000000004122D0
	// succ:  l00000000004122DB l00000000004122D0
l00000000004122DB:
	Mem0[rsp + 0x6C<64>:word32] = 1<32>
	// succ:  l00000000004122E3
l00000000004122E3:
	Mem0[rsp + 0x68<64>:word32] = esi
	esi = CONVERT(al, byte, int32)
	r13 = rsp + 0x70<64>
	r14 = rsp + 0x90<64>
	esi = esi - 0x30<32>
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	SCZO = cond(esi - 9<32>)
	Mem0[rsp + 0x60<64>:word64] = rdi
	Mem0[rsp + 0x5C<64>:word32] = 0<32>
	r15 = r13 + 2<64>
	r12 = r14 + 2<64>
	ebp = r10d
	rbp = CONVERT(ebp, word32, uint64)
	edi = r9d
	rdi = CONVERT(edi, word32, uint64)
	branch Test(UGT,CZ) l000000000041244D
	// succ:  l0000000000412324 l000000000041244D
l0000000000412324:
	eax = CONVERT(Mem0[rsp + 0x74<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(ax & ax)
	C = false
	branch Test(NE,Z) l0000000000412460
	// succ:  l0000000000412332 l0000000000412460
l0000000000412332:
	SCZO = cond(edi - 1<32>)
	rdx = r13 + 0x10<64>
	ebp = ebp - 0xFFFFFFFF<32> - C
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	// succ:  l0000000000412340
l0000000000412340:
	ecx = CONVERT(Mem0[rdx:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	r11d = r8d
	r11 = CONVERT(r11d, word32, uint64)
	r11d = r11d | 1<32>
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	SZO = cond(cx & cx)
	C = false
	branch Test(NS,S) l0000000000412351
	// succ:  l000000000041234D_1 l0000000000412351
l000000000041234D_1:
	r8d = r11d
	// succ:  l0000000000412351
l0000000000412351:
	ecx = ecx + ecx
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	SZO = cond(r8b & 2<8>)
	C = false
	branch Test(EQ,Z) l000000000041235C
	// succ:  l0000000000412359 l000000000041235C
l0000000000412359:
	ecx = ecx | 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	// succ:  l000000000041235C
l000000000041235C:
	Mem0[rdx:word16] = cx
	rdx = rdx - 2<64>
	SCZO = cond(rdx)
	r8d = r8d + r8d
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	SCZO = cond(rdx - r15)
	branch Test(NE,Z) l0000000000412340
	// succ:  l000000000041236B l0000000000412340
l000000000041236B:
	rdx = Mem0[r13 + 0<64>:word64]
	rcx = r14 + 0x10<64>
	Mem0[r14:word64] = rdx
	rdx = Mem0[r13 + 8<64>:word64]
	Mem0[r14 + 8<64>:word64] = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0xA0<64>:word16] = dx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000412393
	// succ:  l0000000000412393
l0000000000412390:
	eax = CONVERT(Mem0[rcx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000412393
l0000000000412393:
	r8d = edx
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d | 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SZO = cond(ax & ax)
	C = false
	branch Test(NS,S) l00000000004123A1
	// succ:  l000000000041239D_1 l00000000004123A1
l000000000041239D_1:
	edx = r8d
	// succ:  l00000000004123A1
l00000000004123A1:
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(dl & 2<8>)
	C = false
	branch Test(EQ,Z) l00000000004123AB
	// succ:  l00000000004123A8 l00000000004123AB
l00000000004123A8:
	eax = eax | 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l00000000004123AB
l00000000004123AB:
	Mem0[rcx:word16] = ax
	rcx = rcx - 2<64>
	SCZO = cond(rcx)
	edx = edx + edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(rcx - r12)
	branch Test(NE,Z) l0000000000412390
	// succ:  l00000000004123B9 l0000000000412390
l00000000004123B9:
	rcx = r14 + 0x10<64>
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l00000000004123C0
l00000000004123C0:
	edx = CONVERT(Mem0[rcx:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d | 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SZO = cond(dx & dx)
	C = false
	branch Test(NS,S) l00000000004123D1
	// succ:  l00000000004123CD_1 l00000000004123D1
l00000000004123CD_1:
	eax = r8d
	// succ:  l00000000004123D1
l00000000004123D1:
	edx = edx + edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SZO = cond(al & 2<8>)
	C = false
	branch Test(EQ,Z) l00000000004123DA
	// succ:  l00000000004123D7 l00000000004123DA
l00000000004123D7:
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l00000000004123DA
l00000000004123DA:
	Mem0[rcx:word16] = dx
	rcx = rcx - 2<64>
	SCZO = cond(rcx)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(rcx - r12)
	branch Test(NE,Z) l00000000004123C0
	// succ:  l00000000004123E8 l00000000004123C0
l00000000004123E8:
	rdx = r13
	rcx = r14
	Mem0[rsp + 0x50<64>:word32] = r9d
	Mem0[rsp + 0x58<64>:word32] = r10d
	call fn0000000000417840 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[r14:word64] = 0<64>
	Mem0[r14 + 8<64>:word64] = 0<64>
	Mem0[r14 + 0x10<64>:word16] = ax
	rdx = r13
	rcx = r14
	Mem0[rsp + 0x9E<64>:word16] = si
	call fn0000000000417840 (retsize: 8;)
	r10d = Mem0[rsp + 0x58<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	r9d = Mem0[rsp + 0x50<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	// succ:  l0000000000412430
l0000000000412430:
	r9d = r9d | esi
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r10d = r10d + 1<32>
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	// succ:  l0000000000412437
l0000000000412437:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	eax = CONVERT(Mem0[rbx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	esi = CONVERT(al, byte, int32)
	esi = esi - 0x30<32>
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	SCZO = cond(esi - 9<32>)
	branch Test(ULE,CZ) l0000000000412324
	// succ:  l000000000041244D l0000000000412324
l000000000041244D:
	SCZO = cond(al - Mem0[rsp + 0x30<64>:byte])
	branch Test(NE,Z) l000000000041246C
	// succ:  l0000000000412453 l000000000041246C
l0000000000412453:
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l0000000000412552
	// succ:  l000000000041245B l0000000000412552
l000000000041245B:
	dil = 1<8>
	goto l0000000000412437
	// succ:  l0000000000412437
l0000000000412460:
	v56 = Mem0[rsp + 0x5C<64>:word32] | esi
	Mem0[rsp + 0x5C<64>:word32] = v56
	SZO = cond(Mem0[rsp + 0x5C<64>:word32])
	C = false
	SCZO = cond(edi - 1<32>)
	ebp = ebp - 0<32> - C
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	goto l0000000000412430
	// succ:  l0000000000412430
l000000000041246C:
	eax = eax & 0xFFFFFFDF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edx = r10d
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsp + 0x30<64>:word32] = r9d
	SCZO = cond(al - 0x45<8>)
	r10d = ebp
	r10 = CONVERT(r10d, word32, uint64)
	rdi = Mem0[rsp + 0x60<64>:word64]
	esi = Mem0[rsp + 0x68<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	ebp = edx
	rbp = CONVERT(ebp, word32, uint64)
	branch Test(NE,Z) l0000000000412568
	// succ:  l000000000041248D l0000000000412568
l000000000041248D:
	ebp = ebp | Mem0[rsp + 0x6C<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	branch Test(EQ,Z) l0000000000412930
	// succ:  l0000000000412497 l0000000000412930
l0000000000412497:
	eax = CONVERT(Mem0[rbx + 1<64>:byte], byte, int32)
	SCZO = cond(al - 0x2D<8>)
	branch Test(EQ,Z) l0000000000412974
	// succ:  l00000000004124A3 l0000000000412974
l00000000004124A3:
	rdx = rbx + 1<64>
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	// succ:  l00000000004124AC
l00000000004124AC:
	SCZO = cond(al - 0x2B<8>)
	branch Test(EQ,Z) l0000000000412967
	// succ:  l00000000004124B4 l0000000000412967
l00000000004124B4:
	r8d = SLICE(rax - 0x30<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8b - 9<8>)
	branch Test(UGT,CZ) l0000000000412930
	// succ:  l00000000004124C2 l0000000000412930
l00000000004124C2:
	rbx = rdx
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	// succ:  l00000000004124C8
l00000000004124C8:
	SCZO = cond(r12d - 0x1371<32>)
	branch Test(GT,SZO) l00000000004124DA
	// succ:  l00000000004124D1 l00000000004124DA
l00000000004124D1:
	edx = SLICE(r12, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	r12d = SLICE(rax - 0x30<64> + rdx * 2<64>, word32, 0)
	r12 = CONVERT(r12d, word32, uint64)
	// succ:  l00000000004124DA
l00000000004124DA:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	eax = CONVERT(Mem0[rbx:byte], byte, int32)
	edx = SLICE(rax - 0x30<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 9<8>)
	branch Test(ULE,CZ) l00000000004124C8
	// succ:  l00000000004124E9 l00000000004124C8
l00000000004124E9:
	SCZO = cond(ecx - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l00000000004129E1
	// succ:  l00000000004124F2 l00000000004129E1
l00000000004124F2:
	SCZO = cond(r12d - 0x1371<32>)
	branch Test(LE,SZO) l000000000041256F
	// succ:  l00000000004124FB l000000000041256F
l00000000004124FB:
	r14d = Mem0[rsp + 0x30<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	Mem0[rsp + 0x70<64>:word64] = 0<64>
	Mem0[rsp + 0x78<64>:word64] = 0<64>
	Mem0[rsp + 0x80<64>:word16] = r12w
	SZO = cond(r14d & r14d)
	C = false
	branch Test(EQ,Z) l0000000000412A40
	// succ:  l0000000000412527 l0000000000412A40
l0000000000412527:
	eax = CONVERT(Mem0[rsp + 0x4E<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = Mem0[rsp + 0x128<64>:word64]
	r11d = 0x7FFF<32>
	r11 = CONVERT(r11d, word32, uint64)
	rcx = r13
	Mem0[rsp + 0x72<64>:word16] = r11w
	Mem0[rsp + 0x70<64>:word16] = ax
	call fn0000000000417BF0 (retsize: 8;)
	goto l00000000004126E1
	// succ:  l00000000004126E1
l0000000000412552:
	rdi = Mem0[rsp + 0x60<64>:word64]
	esi = Mem0[rsp + 0x68<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	eax = r10d
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x30<64>:word32] = r9d
	r10d = ebp
	r10 = CONVERT(r10d, word32, uint64)
	ebp = eax
	rbp = CONVERT(ebp, word32, uint64)
	// succ:  l0000000000412568
l0000000000412568:
	ebp = ebp | Mem0[rsp + 0x6C<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	// succ:  l000000000041256F
l000000000041256F:
	r12d = r12d - r10d
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	SZO = cond(r12d & r12d)
	C = false
	branch Test(LE,SZO) l0000000000412740
	// succ:  l000000000041257B l0000000000412740
l000000000041257B:
	SCZO = cond(Mem0[rsp + 0x74<64>:word16] - 0<16>)
	branch Test(NE,Z) l0000000000412692
	// succ:  l0000000000412587 l0000000000412692
l0000000000412587:
	r15 = rsp + 0x90<64>
	r14 = r15 + 2<64>
	// succ:  l0000000000412593
l0000000000412593:
	rax = Mem0[r13 + 0<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = r15 + 0x10<64>
	Mem0[r15:word64] = rax
	rax = Mem0[r13 + 8<64>:word64]
	Mem0[r15 + 8<64>:word64] = rax
	Mem0[rsp + 0xA0<64>:word16] = r8w
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	goto l00000000004125C4
	// succ:  l00000000004125C4
l00000000004125C0:
	r8d = CONVERT(Mem0[rdx:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	// succ:  l00000000004125C4
l00000000004125C4:
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx | 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	SZO = cond(r8w & r8w)
	C = false
	branch Test(NS,S) l00000000004125D0
	// succ:  l00000000004125CD_1 l00000000004125D0
l00000000004125CD_1:
	eax = ecx
	// succ:  l00000000004125D0
l00000000004125D0:
	r8d = r8d + r8d
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	SZO = cond(al & 2<8>)
	C = false
	branch Test(EQ,Z) l00000000004125DB
	// succ:  l00000000004125D7 l00000000004125DB
l00000000004125D7:
	r8d = r8d | 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	// succ:  l00000000004125DB
l00000000004125DB:
	Mem0[rdx:word16] = r8w
	rdx = rdx - 2<64>
	SCZO = cond(rdx)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(rdx - r14)
	branch Test(NE,Z) l00000000004125C0
	// succ:  l00000000004125EA l00000000004125C0
l00000000004125EA:
	rcx = r15 + 0x10<64>
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l00000000004125F0
l00000000004125F0:
	edx = CONVERT(Mem0[rcx:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d | 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SZO = cond(dx & dx)
	C = false
	branch Test(NS,S) l0000000000412601
	// succ:  l00000000004125FD_1 l0000000000412601
l00000000004125FD_1:
	eax = r8d
	// succ:  l0000000000412601
l0000000000412601:
	edx = edx + edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SZO = cond(al & 2<8>)
	C = false
	branch Test(EQ,Z) l000000000041260A
	// succ:  l0000000000412607 l000000000041260A
l0000000000412607:
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l000000000041260A
l000000000041260A:
	Mem0[rcx:word16] = dx
	rcx = rcx - 2<64>
	SCZO = cond(rcx)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(rcx - r14)
	branch Test(NE,Z) l00000000004125F0
	// succ:  l0000000000412618 l00000000004125F0
l0000000000412618:
	rcx = r13
	rdx = r15
	call fn0000000000417840 (retsize: 8;)
	rcx = r15 + 0x10<64>
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000412630
l0000000000412630:
	edx = CONVERT(Mem0[rcx:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d | 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SZO = cond(dx & dx)
	C = false
	branch Test(NS,S) l0000000000412641
	// succ:  l000000000041263D_1 l0000000000412641
l000000000041263D_1:
	eax = r8d
	// succ:  l0000000000412641
l0000000000412641:
	edx = edx + edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SZO = cond(al & 2<8>)
	C = false
	branch Test(EQ,Z) l000000000041264A
	// succ:  l0000000000412647 l000000000041264A
l0000000000412647:
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l000000000041264A
l000000000041264A:
	Mem0[rcx:word16] = dx
	rcx = rcx - 2<64>
	SCZO = cond(rcx)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(rcx - r14)
	branch Test(NE,Z) l0000000000412630
	// succ:  l0000000000412658 l0000000000412630
l0000000000412658:
	SCZO = cond(Mem0[rsp + 0x94<64>:word16] - 0<16>)
	branch Test(NE,Z) l0000000000412692
	// succ:  l0000000000412663 l0000000000412692
l0000000000412663:
	rax = Mem0[r15:word64]
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r12d = r12d - 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	Mem0[r13 + 0<64>:word64] = rax
	rax = Mem0[r15 + 8<64>:word64]
	Mem0[r13 + 8<64>:word64] = rax
	Mem0[rsp + 0x80<64>:word16] = cx
	branch Test(EQ,Z) l00000000004128E1
	// succ:  l0000000000412686 l00000000004128E1
l0000000000412686:
	SCZO = cond(Mem0[rsp + 0x74<64>:word16] - 0<16>)
	branch Test(EQ,Z) l0000000000412593
	// succ:  l0000000000412692 l0000000000412593
l0000000000412692:
	rcx = r13
	call fn0000000000417ED0 (retsize: 8;)
	SCZO = cond(eax - 0x50<32>)
	branch Test(LE,SZO) l0000000000412822
	// succ:  l00000000004126A3 l0000000000412822
l00000000004126A3:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x70<64>:word64] = 0<64>
	Mem0[rsp + 0x78<64>:word64] = 0<64>
	Mem0[rsp + 0x80<64>:word16] = dx
	// succ:  l00000000004126BF
l00000000004126BF:
	eax = CONVERT(Mem0[rsp + 0x4E<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = Mem0[rsp + 0x128<64>:word64]
	rcx = r13
	Mem0[rsp + 0x70<64>:word16] = ax
	call fn0000000000417BF0 (retsize: 8;)
	eax = Mem0[rsp + 0x30<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041272D
	// succ:  l00000000004126E1 l000000000041272D
l00000000004126E1:
	rax = Mem0[rsp + 0x128<64>:word64]
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rax:real80], real80, real64)
	v59 = ST[Top:real64]
	Top = Top - 1<i8>
	ST[Top:real64] = v59
	Mem0[rsp + 0x30<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	Top = Top - 1<i8>
	ST[Top:real64] = 0.0
	v60 = ST[Top:real64]
	ST[Top:real64] = ST[Top + 1<i8>:real64]
	ST[Top + 1<i8>:real64] = v60
	CZP = cond(ST[Top:real64] - ST[Top + 1<i8>:real64])
	O = false
	S = false
	Top = Top + 1<i8>
	ST[Top:real64] = ST[Top:real64]
	Top = Top + 1<i8>
	branch Test(PE,P) l00000000004126FD
	// succ:  l00000000004126FB l00000000004126FD
l00000000004126FB:
	branch Test(EQ,Z) l0000000000412722
	// succ:  l00000000004126FD l0000000000412722
l00000000004126FD:
	rax = Mem0[rsp + 0x38<64>:word64]
	ax = ax & 0x7FFF<16>
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x7FFF<16>)
	branch Test(NE,Z) l000000000041272D
	// succ:  l000000000041270C l000000000041272D
l000000000041270C:
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rax
	rdx = rdx >>u 0x20<64>
	SCZO = cond(rdx)
	edx = edx & 0x7FFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx | eax
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	branch Test(NE,Z) l000000000041272D
	// succ:  l0000000000412722 l000000000041272D
l0000000000412722:
	eax = _errno()
	Mem0[rax:word32] = 0x22<32>
	// succ:  l000000000041272D
l000000000041272D:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l00000000004121F6
	// succ:  l0000000000412735 l00000000004121F6
l0000000000412735:
	goto l0000000000412A37
	// succ:  l0000000000412A37
l0000000000412740:
	rcx = r13
	call fn0000000000417ED0 (retsize: 8;)
	SCZO = cond(eax - 0x50<32>)
	branch Test(GT,SZO) l00000000004126A3
	// succ:  l0000000000412751 l00000000004126A3
l0000000000412751:
	edx = Mem0[rsp + 0x5C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r9d = 0x404E<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	r9d = r9d - eax
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	Mem0[rsp + 0x28<64>:word32] = 0x50<32>
	Mem0[rsp + 0x20<64>:word32] = 0x40<32>
	rcx = r13
	call fn0000000000418080 (retsize: 8;)
	eax = CONVERT(Mem0[rsp + 0x72<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SZO = cond(r12d & r12d)
	C = false
	Mem0[rsp + 0x58<64>:word32] = eax
	branch Test(EQ,Z) l00000000004127FD
	// succ:  l0000000000412789 l00000000004127FD
l0000000000412789:
	r9d = r12d
	r9 = CONVERT(r9d, word32, uint64)
	r9d = -r9d
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	C = r9d == 0<32>
	SCZO = cond(r9d - 0x1000<32>)
	branch Test(GT,SZO) l0000000000412986
	// succ:  l000000000041279C l0000000000412986
l000000000041279C:
	rax = rsp + 0xB0<64>
	Mem0[rsp + 0x5C<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rsp + 0x50<64>:word64] = rax
	goto l000000000041286B
	// succ:  l000000000041286B
l00000000004127B6:
	rdx = Mem0[rsp + 0x50<64>:word64]
	rcx = r15
	rbx = Mem0[rsp + 0x60<64>:word64]
	call fn0000000000417750 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x5C<64>:word32] - 0xFFFFFFFF<32>)
	eax = CONVERT(Mem0[rsp + 0xB2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r14d = Mem0[rsp + 0x58<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(EQ,Z) l0000000000412945
	// succ:  l00000000004127E0 l0000000000412945
l00000000004127E0:
	rcx = Mem0[rsp + 0x50<64>:word64]
	r14d = r14d + eax
	r14 = CONVERT(r14d, word32, uint64)
	SCZO = cond(r14d)
	rdx = r13
	call fn0000000000417B10 (retsize: 8;)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	eax = SLICE(r14 + 0xFFFFFFFFFFFFC002<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x58<64>:word32] = eax
	// succ:  l00000000004127FD
l00000000004127FD:
	r9d = Mem0[rsp + 0x58<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x28<64>:word32] = 0x40<32>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	Mem0[rsp + 0x20<64>:word32] = 0x40<32>
	rcx = r13
	call fn0000000000418080 (retsize: 8;)
	goto l00000000004126BF
	// succ:  l00000000004126BF
l0000000000412822:
	edx = Mem0[rsp + 0x5C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r9d = 0x404E<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x28<64>:word32] = 0x50<32>
	r9d = r9d - eax
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	Mem0[rsp + 0x20<64>:word32] = 0x40<32>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = r13
	call fn0000000000418080 (retsize: 8;)
	eax = CONVERT(Mem0[rsp + 0x72<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r9d = r12d
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x5C<64>:word32] = 1<32>
	Mem0[rsp + 0x58<64>:word32] = eax
	rax = rsp + 0xB0<64>
	Mem0[rsp + 0x50<64>:word64] = rax
	// succ:  l000000000041286B
l000000000041286B:
	rax = Mem0[0x00000000004909DC<p64>:word64]
	Mem0[rsp + 0x60<64>:word64] = rbx
	r14 = 0x00000000004909D0<p64>
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	r15 = rsp + 0x90<64>
	ebx = r9d
	rbx = CONVERT(ebx, word32, uint64)
	Mem0[rsp + 0x90<64>:word64] = rax
	eax = Mem0[0x00000000004909E4<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x98<64>:word32] = eax
	goto l00000000004128C4
	// succ:  l00000000004128C4
l00000000004128B0:
	r12d = r12d + r12d
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	r14 = r14 - 0xC<64>
	SCZO = cond(r14)
	SCZO = cond(r12d - 0x1000<32>)
	branch Test(GT,SZO) l00000000004127B6
	// succ:  l00000000004128C4 l00000000004127B6
l00000000004128C4:
	SZO = cond(r12d & ebx)
	C = false
	branch Test(EQ,Z) l00000000004128B0
	// succ:  l00000000004128C9 l00000000004128B0
l00000000004128C9:
	r8 = r15
	rdx = r15
	rcx = r14
	call fn0000000000418440 (retsize: 8;)
	goto l00000000004128B0
	// succ:  l00000000004128B0
l00000000004128D9:
	rdx = rdi
	goto l0000000000412148
	// succ:  l0000000000412148
l00000000004128E1:
	rcx = r13
	call fn0000000000417ED0 (retsize: 8;)
	SCZO = cond(eax - 0x50<32>)
	branch Test(GT,SZO) l00000000004126A3
	// succ:  l00000000004128F2 l00000000004126A3
l00000000004128F2:
	edx = Mem0[rsp + 0x5C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r9d = 0x404E<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x28<64>:word32] = 0x50<32>
	r9d = r9d - eax
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	Mem0[rsp + 0x20<64>:word32] = 0x40<32>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = r13
	call fn0000000000418080 (retsize: 8;)
	eax = CONVERT(Mem0[rsp + 0x72<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x58<64>:word32] = eax
	goto l00000000004127FD
	// succ:  l00000000004127FD
l0000000000412930:
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	goto l000000000041256F
	// succ:  l000000000041256F
l0000000000412938:
	Mem0[rsp + 0x6C<64>:word32] = 0<32>
	goto l00000000004122E3
	// succ:  l00000000004122E3
l0000000000412945:
	rcx = Mem0[rsp + 0x50<64>:word64]
	r14d = r14d - eax
	r14 = CONVERT(r14d, word32, uint64)
	SCZO = cond(r14d)
	rdx = r13
	call fn00000000004178C0 (retsize: 8;)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	eax = SLICE(r14 + 0x3FFF<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x58<64>:word32] = eax
	goto l00000000004127FD
	// succ:  l00000000004127FD
l0000000000412967:
	eax = CONVERT(Mem0[rdx + 1<64>:byte], byte, int32)
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	goto l00000000004124B4
	// succ:  l00000000004124B4
l0000000000412974:
	rdx = rbx + 2<64>
	eax = CONVERT(Mem0[rbx + 2<64>:byte], byte, int32)
	ecx = 0xFFFFFFFF<32>
	rcx = CONVERT(ecx, word32, uint64)
	goto l00000000004124AC
	// succ:  l00000000004124AC
l0000000000412986:
	rax = rsp + 0xB0<64>
	rcx = 0x0000000000490940<p64>
	rdx = rax
	r15 = rax
	Mem0[rsp + 0x50<64>:word64] = rax
	call fn0000000000417750 (retsize: 8;)
	eax = CONVERT(Mem0[rsp + 0xB2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r14d = Mem0[rsp + 0x58<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	rdx = r13
	rcx = r15
	r14d = r14d - eax
	r14 = CONVERT(r14d, word32, uint64)
	SCZO = cond(r14d)
	call fn00000000004178C0 (retsize: 8;)
	eax = SLICE(r14 + 0x3FFF<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	r9d = 0xFFFFF000<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x5C<64>:word32] = 0xFFFFFFFF<32>
	r9d = r9d - r12d
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	Mem0[rsp + 0x58<64>:word32] = eax
	goto l000000000041286B
	// succ:  l000000000041286B
l00000000004129E1:
	r12d = -r12d
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	C = r12d == 0<32>
	SCZO = cond(r12d - 0xFFFFEC8F<32>)
	branch Test(GE,SO) l000000000041256F
	// succ:  l00000000004129F1 l000000000041256F
l00000000004129F1:
	eax = CONVERT(Mem0[rsp + 0x4E<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = Mem0[rsp + 0x128<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rcx = r13
	Mem0[rsp + 0x70<64>:word64] = 0<64>
	Mem0[rsp + 0x78<64>:word64] = 0<64>
	Mem0[rsp + 0x80<64>:word16] = r9w
	Mem0[rsp + 0x70<64>:word16] = ax
	call fn0000000000417BF0 (retsize: 8;)
	r10d = Mem0[rsp + 0x30<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d & r10d)
	C = false
	branch Test(NE,Z) l00000000004126E1
	// succ:  l0000000000412A37 l00000000004126E1
l0000000000412A37:
	rbp = rbx
	goto l00000000004121F1
	// succ:  l00000000004121F1
l0000000000412A40:
	rbp = rbx
	goto l00000000004121D7
	// succ:  l00000000004121D7
fn00000000004120A0_exit:


// fn0000000000412A50
// Return size: 8
define fn0000000000412A50
fn0000000000412A50_entry:
	rsp = fp
	// succ:  l0000000000412A50
l0000000000412A50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rdi = rdx
	rdx = rsp + 0x20<64>
	rsi = r8
	rbx = rcx
	rcx = rdi
	Mem0[rsp + 0x20<64>:word64] = 0<64>
	Mem0[rsp + 0x28<64>:word64] = 0<64>
	call fn00000000004120A0 (retsize: 8;)
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000412A8E
	// succ:  l0000000000412A84 l0000000000412A8E
l0000000000412A84:
	r9 = CONVERT(eax, word32, int64)
	rdx = rdi + r9
	Mem0[rsi:word64] = rdx
	// succ:  l0000000000412A8E
l0000000000412A8E:
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rsp + 0x20<64>:real80], real80, real64)
	rax = rbx
	Mem0[rbx:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000412A50_exit
fn0000000000412A50_exit:


// fn0000000000412AA0
// Return size: 0
define fn0000000000412AA0
fn0000000000412AA0_entry:
	rsp = fp
	// succ:  l0000000000412AA0
l0000000000412AA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbp = 0x0000000000490A80<p64>
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	rdi = rcx
	rsi = rbp
	// succ:  l0000000000412AC0
l0000000000412AC0:
	rdx = Mem0[rsi:word64]
	rcx = rdi
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000412AF0
	// succ:  l0000000000412ACF l0000000000412AF0
l0000000000412ACF:
	ebx = ebx + 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	rsi = rsi + 0x10<64>
	SCZO = cond(rsi)
	SCZO = cond(ebx - 0xB<32>)
	branch Test(NE,Z) l0000000000412AC0
	// succ:  l0000000000412ADB l0000000000412AC0
l0000000000412ADB:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000412AA0_exit
l0000000000412AF0:
	rbx = CONVERT(ebx, word32, int64)
	rbx = rbx << 4<64>
	SCZO = cond(rbx)
	eax = CONVERT(Mem0[rbp + 8<64> + rbx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000412AA0_exit
fn0000000000412AA0_exit:


// fn0000000000412B10
// Return size: 8
define fn0000000000412B10
fn0000000000412B10_entry:
	rsp = fp
	// succ:  l0000000000412B10
l0000000000412B10:
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	Mem0[rsp + 0x4A<64>:word16] = cx
	Mem0[rsp + 0x4C<64>:word32] = 0<32>
	call __lc_codepage_func (retsize: 8;)
	rdx = rsp + 0x4C<64>
	Mem0[rsp + 0x30<64>:word64] = 0<64>
	Mem0[rsp + 0x28<64>:word32] = 1<32>
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8 = rsp + 0x4A<64>
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x38<64>:word64] = rdx
	rdx = rsp + 0x49<64>
	Mem0[rsp + 0x20<64>:word64] = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = WideCharToMultiByte(rcx, rdx, r8, r9, Mem0[rsp + 32<i64>:LPSTR], Mem0[rsp + 40<i64>:int32], Mem0[rsp + 48<i64>:LPCSTR], Mem0[rsp + 56<i64>:LPBOOL])
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000412B80
	// succ:  l0000000000412B64 l0000000000412B80
l0000000000412B64:
	eax = Mem0[rsp + 0x4C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000412B80
	// succ:  l0000000000412B6C l0000000000412B80
l0000000000412B6C:
	eax = CONVERT(Mem0[rsp + 0x49<64>:byte], byte, int32)
	// succ:  l0000000000412B71
l0000000000412B71:
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000412B10_exit
l0000000000412B80:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000412B71
	// succ:  l0000000000412B71
fn0000000000412B10_exit:


// fn0000000000412B90
// Return size: 8
define fn0000000000412B90
fn0000000000412B90_entry:
	rsp = fp
	// succ:  l0000000000412B90
l0000000000412B90:
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ecx - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000412BDB
	// succ:  l0000000000412B9E l0000000000412BDB
l0000000000412B9E:
	Mem0[rsp + 0x3D<64>:byte] = cl
	Mem0[rsp + 0x3E<64>:word16] = ax
	call __lc_codepage_func (retsize: 8;)
	rdx = rsp + 0x3E<64>
	Mem0[rsp + 0x28<64>:word32] = 1<32>
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8 = rsp + 0x3D<64>
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x20<64>:word64] = rdx
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = MultiByteToWideChar(rcx, rdx, r8, r9, Mem0[rsp + 32<i64>:LPWSTR], Mem0[rsp + 40<i64>:int32])
	eax = CONVERT(Mem0[rsp + 0x3E<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000412BDB
l0000000000412BDB:
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000412B90_exit
fn0000000000412B90_exit:


// fn0000000000412BE0
// Return size: 8
define fn0000000000412BE0
fn0000000000412BE0_entry:
	rsp = fp
	// succ:  l0000000000412BE0
l0000000000412BE0:
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	SZO = cond(r8d & r8d)
	C = false
	eax = r8d
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x68<64>:word16] = dx
	branch Test(NE,Z) l0000000000412C04
	// succ:  l0000000000412BF1 l0000000000412C04
l0000000000412BF1:
	SCZO = cond(dx - 0xFF<16>)
	branch Test(UGT,CZ) l0000000000412C4A
	// succ:  l0000000000412BF8 l0000000000412C4A
l0000000000412BF8:
	Mem0[rcx:byte] = dl
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000412BFF
l0000000000412BFF:
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000412BE0_exit
l0000000000412C04:
	rdx = rsp + 0x4C<64>
	Mem0[rsp + 0x28<64>:word32] = r9d
	Mem0[rsp + 0x20<64>:word64] = rcx
	Mem0[rsp + 0x4C<64>:word32] = 0<32>
	Mem0[rsp + 0x30<64>:word64] = 0<64>
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x38<64>:word64] = rdx
	r8 = rsp + 0x68<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	eax = WideCharToMultiByte(rcx, rdx, r8, r9, Mem0[rsp + 32<i64>:LPSTR], Mem0[rsp + 40<i64>:int32], Mem0[rsp + 48<i64>:LPCSTR], Mem0[rsp + 56<i64>:LPBOOL])
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000412C4A
	// succ:  l0000000000412C42 l0000000000412C4A
l0000000000412C42:
	edx = Mem0[rsp + 0x4C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000412BFF
	// succ:  l0000000000412C4A l0000000000412BFF
l0000000000412C4A:
	eax = _errno()
	Mem0[rax:word32] = 0x2A<32>
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000412BE0_exit
fn0000000000412BE0_exit:


// fn0000000000412C60
// Return size: 8
define fn0000000000412C60
fn0000000000412C60_entry:
	rsp = fp
	// succ:  l0000000000412C60
l0000000000412C60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = rsp + 0x20<64>
	SZO = cond(rcx & rcx)
	C = false
	rbx = rcx
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	branch Test(NE,Z) l0000000000412C78
	// succ:  l0000000000412C74_1 l0000000000412C78
l0000000000412C74_1:
	rbx = rax
	// succ:  l0000000000412C78
l0000000000412C78:
	rax = Mem0[0x0000000000491F00<p64>:word64]
	rax = Mem0[rax:word64]
	edi = Mem0[rax:word32]
	rdi = CONVERT(edi, word32, uint64)
	call __lc_codepage_func (retsize: 8;)
	edx = CONVERT(si, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rbx
	r9d = edi
	r9 = CONVERT(r9d, word32, uint64)
	call fn0000000000412BE0 (retsize: 8;)
	rax = CONVERT(eax, int32, int64)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000412C60_exit
fn0000000000412C60_exit:


// fn0000000000412CB0
// Return size: 8
define fn0000000000412CB0
fn0000000000412CB0_entry:
	rsp = fp
	// succ:  l0000000000412CB0
l0000000000412CB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	r13 = rdx
	rbx = rcx
	rdi = r8
	call __lc_codepage_func (retsize: 8;)
	ebp = eax
	rbp = CONVERT(ebp, word32, uint64)
	rax = Mem0[0x0000000000491F00<p64>:word64]
	r14 = Mem0[r13 + 0<64>:word64]
	rax = Mem0[rax:word64]
	SZO = cond(r14 & r14)
	C = false
	r12d = Mem0[rax:word32]
	r12 = CONVERT(r12d, word32, uint64)
	branch Test(EQ,Z) l0000000000412DD0
	// succ:  l0000000000412CE8 l0000000000412DD0
l0000000000412CE8:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000412D80
	// succ:  l0000000000412CF3 l0000000000412D80
l0000000000412CF3:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(NE,Z) l0000000000412D18
	// succ:  l0000000000412CF8 l0000000000412D18
l0000000000412CF8:
	goto l0000000000412D44
	// succ:  l0000000000412D44
l0000000000412D00:
	r10 = CONVERT(eax, word32, int64)
	rbx = rbx + r10
	SCZO = cond(rbx)
	rsi = rsi + r10
	SCZO = cond(rsi)
	SCZO = cond(Mem0[rbx - 1<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000412D60
	// succ:  l0000000000412D0F l0000000000412D60
l0000000000412D0F:
	r14 = r14 + 2<64>
	SCZO = cond(r14)
	SCZO = cond(rdi - rsi)
	branch Test(ULE,CZ) l0000000000412D44
	// succ:  l0000000000412D18 l0000000000412D44
l0000000000412D18:
	edx = CONVERT(Mem0[r14:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r9d = r12d
	r9 = CONVERT(r9d, word32, uint64)
	r8d = ebp
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rbx
	call fn0000000000412BE0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l0000000000412D00
	// succ:  l0000000000412D2E l0000000000412D00
l0000000000412D2E:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	// succ:  l0000000000412D35
l0000000000412D35:
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000412CB0_exit
l0000000000412D44:
	rax = rsi
	Mem0[r13 + 0<64>:word64] = r14
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000412CB0_exit
l0000000000412D60:
	rax = rsi - 1<64>
	Mem0[r13 + 0<64>:word64] = 0<64>
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000412CB0_exit
l0000000000412D80:
	SZO = cond(rdi & rdi)
	C = false
	rbx = rsp + 0x20<64>
	branch Test(NE,Z) l0000000000412DAB
	// succ:  l0000000000412D8A l0000000000412DAB
l0000000000412D8A:
	goto l0000000000412DE1
	// succ:  l0000000000412DE1
l0000000000412D90:
	rdx = CONVERT(eax, word32, int64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rax = CONVERT(eax, int32, int64)
	rsi = rsi + rdx
	SCZO = cond(rsi)
	SCZO = cond(Mem0[rsp + 0x20<64> + rax:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000412DE9
	// succ:  l0000000000412DA2 l0000000000412DE9
l0000000000412DA2:
	r14 = r14 + 2<64>
	SCZO = cond(r14)
	SCZO = cond(rdi - rsi)
	branch Test(ULE,CZ) l0000000000412DE1
	// succ:  l0000000000412DAB l0000000000412DE1
l0000000000412DAB:
	edx = CONVERT(Mem0[r14:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r9d = r12d
	r9 = CONVERT(r9d, word32, uint64)
	r8d = ebp
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rbx
	call fn0000000000412BE0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l0000000000412D90
	// succ:  l0000000000412DC1 l0000000000412D90
l0000000000412DC1:
	goto l0000000000412D2E
	// succ:  l0000000000412D2E
l0000000000412DD0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000412CB0_exit
l0000000000412DE1:
	rax = rsi
	goto l0000000000412D35
	// succ:  l0000000000412D35
l0000000000412DE9:
	rax = rsi - 1<64>
	goto l0000000000412D35
	// succ:  l0000000000412D35
fn0000000000412CB0_exit:


// fn0000000000412E00
// Return size: 8
define fn0000000000412E00
fn0000000000412E00_entry:
	rsp = fp
	// succ:  l0000000000412E00
l0000000000412E00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l0000000000412F33
	// succ:  l0000000000412E11 l0000000000412F33
l0000000000412E11:
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l0000000000412F40
	// succ:  l0000000000412E1A l0000000000412F40
l0000000000412E1A:
	eax = Mem0[r9:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9:word32] = 0<32>
	Mem0[rsp + 0x30<64>:word32] = eax
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000412ED0
	// succ:  l0000000000412E33 l0000000000412ED0
l0000000000412E33:
	SCZO = cond(Mem0[rsp + 0x98<64>:word32] - 1<32>)
	rsi = r9
	rdi = r8
	rbx = rdx
	rbp = rcx
	branch Test(ULE,CZ) l0000000000412EB0
	// succ:  l0000000000412E49 l0000000000412EB0
l0000000000412E49:
	SCZO = cond(Mem0[rsp + 0x30<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000412EE0
	// succ:  l0000000000412E54 l0000000000412EE0
l0000000000412E54:
	edx = CONVERT(al, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	ecx = Mem0[rsp + 0x90<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = IsDBCSLeadByteEx(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000412EB0
	// succ:  l0000000000412E68 l0000000000412EB0
l0000000000412E68:
	SCZO = cond(rdi - 1<64>)
	branch Test(ULE,CZ) l0000000000412F5C
	// succ:  l0000000000412E72 l0000000000412F5C
l0000000000412E72:
	Mem0[rsp + 0x28<64>:word32] = 1<32>
	Mem0[rsp + 0x20<64>:word64] = rbp
	r9d = 2<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8 = rbx
	// succ:  l0000000000412E88
l0000000000412E88:
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = Mem0[rsp + 0x90<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = MultiByteToWideChar(rcx, rdx, r8, r9, Mem0[rsp + 32<i64>:LPWSTR], Mem0[rsp + 40<i64>:int32])
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000412F47
	// succ:  l0000000000412EA2 l0000000000412F47
l0000000000412EA2:
	eax = 2<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000412E00_exit
l0000000000412EB0:
	eax = Mem0[rsp + 0x90<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000412F00
	// succ:  l0000000000412EBB l0000000000412F00
l0000000000412EBB:
	eax = CONVERT(Mem0[rbx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0<64>:word16] = ax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000412E00_exit
l0000000000412ED0:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx:word16] = dx
	// succ:  l0000000000412ED7
l0000000000412ED7:
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000412E00_exit
l0000000000412EE0:
	Mem0[rsp + 0x31<64>:byte] = al
	Mem0[rsp + 0x28<64>:word32] = 1<32>
	r9d = 2<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x20<64>:word64] = rcx
	r8 = rsp + 0x30<64>
	goto l0000000000412E88
	// succ:  l0000000000412E88
l0000000000412F00:
	Mem0[rsp + 0x28<64>:word32] = 1<32>
	Mem0[rsp + 0x20<64>:word64] = rbp
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8 = rbx
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = Mem0[rsp + 0x90<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = MultiByteToWideChar(rcx, rdx, r8, r9, Mem0[rsp + 32<i64>:LPWSTR], Mem0[rsp + 40<i64>:int32])
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000412F47
	// succ:  l0000000000412F2C l0000000000412F47
l0000000000412F2C:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000412ED7
	// succ:  l0000000000412ED7
l0000000000412F33:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000412E00_exit
l0000000000412F40:
	eax = 0xFFFFFFFE<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000412ED7
	// succ:  l0000000000412ED7
l0000000000412F47:
	eax = _errno()
	Mem0[rax:word32] = 0x2A<32>
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000412ED7
	// succ:  l0000000000412ED7
l0000000000412F5C:
	eax = CONVERT(Mem0[rbx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi:byte] = al
	eax = 0xFFFFFFFE<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000412ED7
	// succ:  l0000000000412ED7
fn0000000000412E00_exit:


// fn0000000000412F70
// Return size: 8
define fn0000000000412F70
fn0000000000412F70_entry:
	rsp = fp
	// succ:  l0000000000412F70
l0000000000412F70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x4E<64>:word16] = ax
	rax = rsp + 0x4E<64>
	SZO = cond(rcx & rcx)
	C = false
	rbx = rcx
	rsi = r9
	rdi = rdx
	branch Test(NE,Z) l0000000000412F94
	// succ:  l0000000000412F90_1 l0000000000412F94
l0000000000412F90_1:
	rbx = rax
	// succ:  l0000000000412F94
l0000000000412F94:
	rax = Mem0[0x0000000000491F00<p64>:word64]
	Mem0[rsp + 0x38<64>:word64] = r8
	rax = Mem0[rax:word64]
	ebp = Mem0[rax:word32]
	rbp = CONVERT(ebp, word32, uint64)
	call __lc_codepage_func (retsize: 8;)
	r8 = Mem0[rsp + 0x38<64>:word64]
	r9 = 0x00000000004ADA48<p64>
	SZO = cond(rsi & rsi)
	C = false
	Mem0[rsp + 0x28<64>:word32] = ebp
	Mem0[rsp + 0x20<64>:word32] = eax
	rdx = rdi
	branch Test(EQ,Z) l0000000000412FC8
	// succ:  l0000000000412FC4_1 l0000000000412FC8
l0000000000412FC4_1:
	r9 = rsi
	// succ:  l0000000000412FC8
l0000000000412FC8:
	rcx = rbx
	call fn0000000000412E00 (retsize: 8;)
	rax = CONVERT(eax, int32, int64)
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000412F70_exit
fn0000000000412F70_exit:


// fn0000000000412FE0
// Return size: 8
define fn0000000000412FE0
fn0000000000412FE0_entry:
	rsp = fp
	// succ:  l0000000000412FE0
l0000000000412FE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rax = 0x00000000004ADA44<p64>
	SZO = cond(r9 & r9)
	C = false
	rdi = r9
	r13 = rdx
	branch Test(NE,Z) l0000000000413004
	// succ:  l0000000000413000_1 l0000000000413004
l0000000000413000_1:
	rdi = rax
	// succ:  l0000000000413004
l0000000000413004:
	r14 = rcx
	rsi = r8
	call __lc_codepage_func (retsize: 8;)
	r12d = eax
	r12 = CONVERT(r12d, word32, uint64)
	rax = Mem0[0x0000000000491F00<p64>:word64]
	SZO = cond(r13 & r13)
	C = false
	rax = Mem0[rax:word64]
	ebp = Mem0[rax:word32]
	rbp = CONVERT(ebp, word32, uint64)
	branch Test(EQ,Z) l00000000004130A5
	// succ:  l0000000000413027 l00000000004130A5
l0000000000413027:
	rdx = Mem0[r13 + 0<64>:word64]
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l00000000004130A5
	// succ:  l0000000000413030 l00000000004130A5
l0000000000413030:
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l00000000004130B0
	// succ:  l0000000000413035 l00000000004130B0
l0000000000413035:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	SZO = cond(rsi & rsi)
	C = false
	branch Test(NE,Z) l000000000041305A
	// succ:  l000000000041303C l000000000041305A
l000000000041303C:
	goto l00000000004130A5
	// succ:  l00000000004130A5
l0000000000413040:
	r10 = CONVERT(eax, word32, int64)
	r14 = r14 + 2<64>
	SCZO = cond(r14)
	rdx = r10
	rdx = rdx + Mem0[r13 + 0<64>:word64]
	SCZO = cond(rdx)
	rbx = rbx + r10
	SCZO = cond(rbx)
	SCZO = cond(rsi - rbx)
	Mem0[r13 + 0<64>:word64] = rdx
	branch Test(ULE,CZ) l00000000004130A0
	// succ:  l000000000041305A l00000000004130A0
l000000000041305A:
	r8 = rsi
	Mem0[rsp + 0x28<64>:word32] = ebp
	Mem0[rsp + 0x20<64>:word32] = r12d
	r8 = r8 - rbx
	SCZO = cond(r8)
	r9 = rdi
	rcx = r14
	call fn0000000000412E00 (retsize: 8;)
	SCZO = cond(eax - 0<32>)
	branch Test(GT,SZO) l0000000000413040
	// succ:  l0000000000413079 l0000000000413040
l0000000000413079:
	branch Test(NE,Z) l00000000004130A0
	// succ:  l000000000041307B l00000000004130A0
l000000000041307B:
	SCZO = cond(rbx - rsi)
	branch Test(UGE,C) l00000000004130A0
	// succ:  l0000000000413080 l00000000004130A0
l0000000000413080:
	Mem0[r13 + 0<64>:word64] = 0<64>
	rax = rbx
	// succ:  l000000000041308B
l000000000041308B:
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000412FE0_exit
l000000000041309C:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	// succ:  l00000000004130A0
l00000000004130A0:
	rax = rbx
	goto l000000000041308B
	// succ:  l000000000041308B
l00000000004130A5:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041308B
	// succ:  l000000000041308B
l00000000004130B0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rsi & rsi)
	C = false
	Mem0[rsp + 0x3E<64>:word16] = ax
	branch Test(EQ,Z) l000000000041309C
	// succ:  l00000000004130BC l000000000041309C
l00000000004130BC:
	r15d = ebp
	r15 = CONVERT(r15d, word32, uint64)
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r14 = rsp + 0x3E<64>
	goto l00000000004130E5
	// succ:  l00000000004130E5
l00000000004130D0:
	rax = CONVERT(eax, int32, int64)
	rdx = rax
	rdx = rdx + Mem0[r13 + 0<64>:word64]
	SCZO = cond(rdx)
	rbx = rbx + rax
	SCZO = cond(rbx)
	SCZO = cond(rsi - rbx)
	Mem0[r13 + 0<64>:word64] = rdx
	branch Test(ULE,CZ) l00000000004130A0
	// succ:  l00000000004130E5 l00000000004130A0
l00000000004130E5:
	Mem0[rsp + 0x28<64>:word32] = ebp
	Mem0[rsp + 0x20<64>:word32] = r12d
	r9 = rdi
	r8 = r15
	rcx = r14
	call fn0000000000412E00 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l00000000004130D0
	// succ:  l0000000000413100 l00000000004130D0
l0000000000413100:
	goto l00000000004130A0
	// succ:  l00000000004130A0
fn0000000000412FE0_exit:


// fn0000000000413110
// Return size: 8
define fn0000000000413110
fn0000000000413110_entry:
	rsp = fp
	// succ:  l0000000000413110
l0000000000413110:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x3E<64>:word16] = ax
	rax = Mem0[0x0000000000491F00<p64>:word64]
	rbx = r8
	rsi = rcx
	rdi = rdx
	rax = Mem0[rax:word64]
	ebp = Mem0[rax:word32]
	rbp = CONVERT(ebp, word32, uint64)
	call __lc_codepage_func (retsize: 8;)
	r9 = 0x00000000004ADA40<p64>
	SZO = cond(rbx & rbx)
	C = false
	rcx = rsp + 0x3E<64>
	Mem0[rsp + 0x28<64>:word32] = ebp
	Mem0[rsp + 0x20<64>:word32] = eax
	r8 = rdi
	branch Test(EQ,Z) l0000000000413157
	// succ:  l0000000000413153_1 l0000000000413157
l0000000000413153_1:
	r9 = rbx
	// succ:  l0000000000413157
l0000000000413157:
	rdx = rsi
	call fn0000000000412E00 (retsize: 8;)
	rax = CONVERT(eax, int32, int64)
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000413110_exit
fn0000000000413110_exit:


// fn0000000000413170
// Return size: 8
define fn0000000000413170
fn0000000000413170_entry:
	rsp = fp
	// succ:  l0000000000413170
l0000000000413170:
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r11 = rdx
	edx = Mem0[rdx + 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r10 = rdx
	r10w = r10w & 0x7FFF<16>
	SZO = cond(r10w)
	C = false
	branch Test(NE,Z) l00000000004131A4
	// succ:  l0000000000413188 l00000000004131A4
l0000000000413188:
	rdx = rax
	rdx = rdx >>u 0x20<64>
	SCZO = cond(rdx)
	eax = eax | edx
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	branch Test(NE,Z) l0000000000413210
	// succ:  l0000000000413193 l0000000000413210
l0000000000413193:
	Mem0[rsp + 0x44<64>:word32] = 0<32>
	eax = CONVERT(Mem0[r11 + 8<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l00000000004131CB
	// succ:  l00000000004131CB
l00000000004131A4:
	SCZO = cond(r10w - 0x7FFF<16>)
	branch Test(EQ,Z) l0000000000413230
	// succ:  l00000000004131B0 l0000000000413230
l00000000004131B0:
	eax = CONVERT(Mem0[r11 + 8<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x44<64>:word32] = 1<32>
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0x7FFF<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx - 0x403E<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	// succ:  l00000000004131CB
l00000000004131CB:
	eax = eax & 0x8000<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l00000000004131D0
l00000000004131D0:
	r10 = Mem0[rsp + 0x80<64>:word64]
	Mem0[r10:word32] = eax
	rax = rsp + 0x48<64>
	Mem0[rsp + 0x30<64>:word64] = r9
	Mem0[rsp + 0x20<64>:word32] = ecx
	r9 = rsp + 0x44<64>
	rcx = 0x00000000004770B0<p64>
	Mem0[rsp + 0x28<64>:word32] = r8d
	Mem0[rsp + 0x38<64>:word64] = rax
	r8 = r11
	call fn00000000004187D0 (retsize: 8;)
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000413170_exit
l0000000000413210:
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l00000000004131B0
	// succ:  l0000000000413214 l00000000004131B0
l0000000000413214:
	Mem0[rsp + 0x44<64>:word32] = 2<32>
	eax = CONVERT(Mem0[r11 + 8<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = 0xFFFFBFC3<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l00000000004131CB
	// succ:  l00000000004131CB
l0000000000413230:
	rdx = rax
	rdx = rdx >>u 0x20<64>
	SCZO = cond(rdx)
	edx = edx & 0x7FFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx | eax
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	branch Test(NE,Z) l0000000000413255
	// succ:  l0000000000413241 l0000000000413255
l0000000000413241:
	Mem0[rsp + 0x44<64>:word32] = 3<32>
	eax = CONVERT(Mem0[r11 + 8<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l00000000004131CB
	// succ:  l00000000004131CB
l0000000000413255:
	Mem0[rsp + 0x44<64>:word32] = 4<32>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004131D0
	// succ:  l00000000004131D0
fn0000000000413170_exit:


// fn0000000000413270
// Return size: 8
define fn0000000000413270
fn0000000000413270_entry:
	rsp = fp
	// succ:  l0000000000413270
l0000000000413270:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rdx
	edx = Mem0[rdx + 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(dh & 0x40<8>)
	C = false
	branch Test(NE,Z) l0000000000413288
	// succ:  l0000000000413280 l0000000000413288
l0000000000413280:
	eax = Mem0[rbx + 0x24<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[rbx + 0x28<64>:word32] - eax)
	branch Test(LE,SZO) l000000000041329A
	// succ:  l0000000000413288 l000000000041329A
l0000000000413288:
	dh = dh & 0x20<8>
	SZO = cond(dh)
	C = false
	branch Test(NE,Z) l00000000004132B0
	// succ:  l000000000041328D l00000000004132B0
l000000000041328D:
	rax = CONVERT(Mem0[rbx + 0x24<64>:word32], word32, int64)
	rdx = Mem0[rbx:word64]
	Mem0[rdx + rax:byte] = cl
	eax = Mem0[rbx + 0x24<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000041329A
l000000000041329A:
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx + 0x24<64>:word32] = eax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000413270_exit
l00000000004132B0:
	rdx = Mem0[rbx:word64]
	eax = fputc(rcx, rdx)
	eax = Mem0[rbx + 0x24<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx + 0x24<64>:word32] = eax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000413270_exit
fn0000000000413270_exit:


// fn00000000004132D0
// Return size: 8
define fn00000000004132D0
fn00000000004132D0_entry:
	rsp = fp
	// succ:  l00000000004132D0
l00000000004132D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	r14 = rsp + 0x2C<64>
	r13 = rsp + 0x30<64>
	ebx = edx
	rbx = CONVERT(ebx, word32, uint64)
	rsi = r8
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r12 = rcx
	r8 = r14
	rcx = r13
	call fn0000000000412C60 (retsize: 8;)
	ebp = Mem0[rsi + 0x10<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp - ebx)
	branch Test(GE,SO) l00000000004133A9
	// succ:  l0000000000413308 l00000000004133A9
l0000000000413308:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(SG,S) l00000000004133A9
	// succ:  l0000000000413310 l00000000004133A9
l0000000000413310:
	eax = Mem0[rsi + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ebp - eax)
	branch Test(GE,SO) l00000000004133B6
	// succ:  l000000000041331B l00000000004133B6
l000000000041331B:
	eax = eax - ebp
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(eax & eax)
	C = false
	Mem0[rsi + 0xC<64>:word32] = eax
	branch Test(LE,SZO) l0000000000413330
	// succ:  l0000000000413324 l0000000000413330
l0000000000413324:
	SZO = cond(Mem0[rsi + 9<64>:byte] & 4<8>)
	C = false
	branch Test(EQ,Z) l00000000004133C2
	// succ:  l000000000041332E l00000000004133C2
l000000000041332E:
	// succ:  l0000000000413330
l0000000000413330:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(LE,SZO) l000000000041338D
	// succ:  l0000000000413334 l000000000041338D
l0000000000413334:
	r12 = r12 + 2<64>
	SCZO = cond(r12)
	edx = CONVERT(Mem0[r12 - 2<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8 = r14
	rcx = r13
	call fn0000000000412C60 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000041338D
	// succ:  l000000000041334D l000000000041338D
l000000000041334D:
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rbx = r13
	rdi = r13 + 1<64> + rax
	// succ:  l0000000000413360
l0000000000413360:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	ecx = CONVERT(Mem0[rbx - 1<64>:byte], byte, int32)
	rdx = rsi
	call fn0000000000413270 (retsize: 8;)
	SCZO = cond(rbx - rdi)
	branch Test(NE,Z) l0000000000413360
	// succ:  l0000000000413375 l0000000000413360
l0000000000413375:
	ebp = ebp - 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	goto l0000000000413330
	// succ:  l0000000000413330
l0000000000413380:
	rdx = rsi
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	// succ:  l000000000041338D
l000000000041338D:
	eax = Mem0[rsi + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	Mem0[rsi + 0xC<64>:word32] = edx
	branch Test(GT,SZO) l0000000000413380
	// succ:  l000000000041339A l0000000000413380
l000000000041339A:
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004132D0_exit
l00000000004133A9:
	eax = Mem0[rsi + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ebp = ebx
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp - eax)
	branch Test(LT,SO) l000000000041331B
	// succ:  l00000000004133B6 l000000000041331B
l00000000004133B6:
	Mem0[rsi + 0xC<64>:word32] = 0xFFFFFFFF<32>
	goto l0000000000413330
	// succ:  l0000000000413330
l00000000004133C2:
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rsi + 0xC<64>:word32] = eax
	// succ:  l00000000004133D0
l00000000004133D0:
	rdx = rsi
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	eax = Mem0[rsi + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	Mem0[rsi + 0xC<64>:word32] = edx
	branch Test(NE,Z) l00000000004133D0
	// succ:  l00000000004133EA l00000000004133D0
l00000000004133EA:
	goto l0000000000413330
	// succ:  l0000000000413330
fn00000000004132D0_exit:


// fn00000000004133F0
// Return size: 8
define fn00000000004133F0
fn00000000004133F0_entry:
	rsp = fp
	// succ:  l00000000004133F0
l00000000004133F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	edi = Mem0[r8 + 0x10<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	rsi = rcx
	rbx = r8
	SCZO = cond(edi - edx)
	branch Test(GE,SO) l0000000000413480
	// succ:  l0000000000413405 l0000000000413480
l0000000000413405:
	SZO = cond(edi & edi)
	C = false
	branch Test(SG,S) l0000000000413480
	// succ:  l0000000000413409 l0000000000413480
l0000000000413409:
	eax = Mem0[rbx + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(edi - eax)
	branch Test(GE,SO) l0000000000413489
	// succ:  l0000000000413410 l0000000000413489
l0000000000413410:
	eax = eax - edi
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(eax & eax)
	C = false
	Mem0[rbx + 0xC<64>:word32] = eax
	branch Test(LE,SZO) l00000000004134E2
	// succ:  l000000000041341D l00000000004134E2
l000000000041341D:
	SZO = cond(Mem0[rbx + 9<64>:byte] & 4<8>)
	C = false
	branch Test(NE,Z) l00000000004134B0
	// succ:  l0000000000413427 l00000000004134B0
l0000000000413427:
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx + 0xC<64>:word32] = eax
	// succ:  l0000000000413430
l0000000000413430:
	rdx = rbx
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	eax = Mem0[rbx + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(edx & edx)
	C = false
	Mem0[rbx + 0xC<64>:word32] = eax
	branch Test(NE,Z) l0000000000413430
	// succ:  l000000000041344C l0000000000413430
l000000000041344C:
	SZO = cond(edi & edi)
	C = false
	edx = SLICE(rdi - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	branch Test(EQ,Z) l00000000004134D0
	// succ:  l0000000000413453 l00000000004134D0
l0000000000413453:
	rdi = rsi + 1<64> + rdx
	// succ:  l0000000000413460
l0000000000413460:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	ecx = CONVERT(Mem0[rsi - 1<64>:byte], byte, int32)
	rdx = rbx
	call fn0000000000413270 (retsize: 8;)
	SCZO = cond(rsi - rdi)
	branch Test(NE,Z) l0000000000413460
	// succ:  l0000000000413475 l0000000000413460
l0000000000413475:
	goto l00000000004134CD
	// succ:  l00000000004134CD
l0000000000413480:
	eax = Mem0[rbx + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi - eax)
	branch Test(LT,SO) l0000000000413410
	// succ:  l0000000000413489 l0000000000413410
l0000000000413489:
	SZO = cond(edi & edi)
	C = false
	Mem0[rbx + 0xC<64>:word32] = 0xFFFFFFFF<32>
	edx = SLICE(rdi - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l0000000000413453
	// succ:  l0000000000413497 l0000000000413453
l0000000000413497:
	Mem0[rbx + 0xC<64>:word32] = 0xFFFFFFFE<32>
	// succ:  l000000000041349E
l000000000041349E:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004133F0_exit
l00000000004134B0:
	SZO = cond(edi & edi)
	C = false
	edx = SLICE(rdi - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l0000000000413453
	// succ:  l00000000004134B7 l0000000000413453
l00000000004134B7:
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx + 0xC<64>:word32] = eax
	// succ:  l00000000004134C0
l00000000004134C0:
	rdx = rbx
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	// succ:  l00000000004134CD
l00000000004134CD:
	eax = Mem0[rbx + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004134D0
l00000000004134D0:
	edx = SLICE(rax - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	Mem0[rbx + 0xC<64>:word32] = edx
	branch Test(GT,SZO) l00000000004134C0
	// succ:  l00000000004134DA l00000000004134C0
l00000000004134DA:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004133F0_exit
l00000000004134E2:
	SZO = cond(edi & edi)
	C = false
	edx = SLICE(rdi - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l0000000000413453
	// succ:  l00000000004134ED l0000000000413453
l00000000004134ED:
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx + 0xC<64>:word32] = eax
	goto l000000000041349E
	// succ:  l000000000041349E
fn00000000004133F0_exit:


// fn0000000000413500
// Return size: 8
define fn0000000000413500
fn0000000000413500_entry:
	rsp = fp
	// succ:  l0000000000413500
l0000000000413500:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	SZO = cond(ecx & ecx)
	C = false
	Mem0[r8 + 0x10<64>:word32] = 0xFFFFFFFF<32>
	branch Test(EQ,Z) l0000000000413554
	// succ:  l0000000000413510 l0000000000413554
l0000000000413510:
	rcx = rsp + 0x20<64>
	r11d = Mem0[r8 + 8<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	Mem0[rsp + 0x20<64>:byte] = 0x2D<8>
	r10 = rcx + 1<64>
	// succ:  l0000000000413522
l0000000000413522:
	r11d = r11d & 0x20<32>
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	// succ:  l0000000000413529
l0000000000413529:
	eax = CONVERT(Mem0[rdx + r9:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0xFFFFFFDF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax | r11d
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[r10 + r9:byte] = al
	r9 = r9 + 1<64>
	SCZO = cond(r9)
	SCZO = cond(r9 - 3<64>)
	branch Test(NE,Z) l0000000000413529
	// succ:  l0000000000413542 l0000000000413529
l0000000000413542:
	rdx = r10 + 3<64>
	rdx = rdx - rcx
	SCZO = cond(rdx)
	call fn00000000004133F0 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000413500_exit
l0000000000413554:
	r11d = Mem0[r8 + 8<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d & 0x100<32>)
	C = false
	branch Test(EQ,Z) l0000000000413571
	// succ:  l0000000000413561 l0000000000413571
l0000000000413561:
	rcx = rsp + 0x20<64>
	Mem0[rsp + 0x20<64>:byte] = 0x2B<8>
	r10 = rcx + 1<64>
	goto l0000000000413522
	// succ:  l0000000000413522
l0000000000413571:
	SZO = cond(r11b & 0x40<8>)
	C = false
	branch Test(EQ,Z) l0000000000413590
	// succ:  l0000000000413577 l0000000000413590
l0000000000413577:
	rcx = rsp + 0x20<64>
	Mem0[rsp + 0x20<64>:byte] = 0x20<8>
	r10 = rcx + 1<64>
	goto l0000000000413522
	// succ:  l0000000000413522
l0000000000413590:
	rcx = rsp + 0x20<64>
	r10 = rcx
	goto l0000000000413522
	// succ:  l0000000000413522
fn0000000000413500_exit:


// fn00000000004135A0
// Return size: 8
define fn00000000004135A0
fn00000000004135A0_entry:
	rsp = fp
	// succ:  l00000000004135A0
l00000000004135A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	ebx = Mem0[rdx + 0x10<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	r11d = Mem0[rdx + 8<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	r8d = 0<32>
	r8 = CONVERT(r8d, word32, uint64)
	rsi = rdx
	r9 = rcx
	SZO = cond(ebx & ebx)
	C = false
	branch Test(SG,S) l00000000004135CD
	// succ:  l00000000004135C9_1 l00000000004135CD
l00000000004135C9_1:
	r8d = ebx
	// succ:  l00000000004135CD
l00000000004135CD:
	r8d = r8d + 0x17<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	SZO = cond(r11d & 0x1000<32>)
	C = false
	branch Test(EQ,Z) l00000000004135E5
	// succ:  l00000000004135DA l00000000004135E5
l00000000004135DA:
	SCZO = cond(Mem0[rdx + 0x20<64>:word16] - 0<16>)
	branch Test(NE,Z) l00000000004137D2
	// succ:  l00000000004135E5 l00000000004137D2
l00000000004135E5:
	r13 = CONVERT(Mem0[rsi + 0xC<64>:word32], word32, int64)
	rax = CONVERT(r8d, word32, int64)
	SCZO = cond(r8d - r13d)
	branch Test(GE,SO) l00000000004135F3
	// succ:  l00000000004135EF_1 l00000000004135F3
l00000000004135EF_1:
	rax = r13
	// succ:  l00000000004135F3
l00000000004135F3:
	rax = rax + 0xF<64>
	SCZO = cond(rax)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	SZO = cond(r11b & 0x80<8>)
	C = false
	r12 = rsp + 0x20<64>
	branch Test(EQ,Z) l000000000041361F
	// succ:  l000000000041360E l000000000041361F
l000000000041360E:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(SG,S) l0000000000413860
	// succ:  l0000000000413617 l0000000000413860
l0000000000413617:
	r11b = r11b & 0x7F<8>
	SZO = cond(r11b)
	C = false
	Mem0[rsi + 8<64>:word32] = r11d
	// succ:  l000000000041361F
l000000000041361F:
	SZO = cond(r9 & r9)
	C = false
	rcx = r9
	branch Test(EQ,Z) l000000000041386B
	// succ:  l000000000041362B l000000000041386B
l000000000041362B:
	r10d = r11d
	r10 = CONVERT(r10d, word32, uint64)
	r8 = r12
	r9 = 0xCCCCCCCCCCCCCCCD<64>
	r10d = r10d & 0x1000<32>
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	goto l0000000000413677
	// succ:  l0000000000413677
l0000000000413644:
	SCZO = cond(r12 - rdi)
	branch Test(EQ,Z) l0000000000413674
	// succ:  l0000000000413649 l0000000000413674
l0000000000413649:
	SZO = cond(r10d & r10d)
	C = false
	branch Test(EQ,Z) l0000000000413674
	// succ:  l000000000041364E l0000000000413674
l000000000041364E:
	SCZO = cond(Mem0[rsi + 0x20<64>:word16] - 0<16>)
	branch Test(EQ,Z) l0000000000413674
	// succ:  l0000000000413655 l0000000000413674
l0000000000413655:
	rax = rdi
	rax = rax - r12
	SCZO = cond(rax)
	rdx_rax = CONVERT(rax, int64, int128)
	rdx = rdx >>u 0x3E<64>
	SCZO = cond(rdx)
	rax = rax + rdx
	SCZO = cond(rax)
	eax = eax & 3<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rax = rax - rdx
	SCZO = cond(rax)
	SCZO = cond(rax - 3<64>)
	branch Test(EQ,Z) l00000000004137B0
	// succ:  l0000000000413674 l00000000004137B0
l0000000000413674:
	r8 = rdi
	// succ:  l0000000000413677
l0000000000413677:
	rax = rcx
	rdi = r8 + 1<64>
	rdx_rax = r9 *u rax
	SCZO = cond(rdx_rax)
	rdx = rdx >>u 3<64>
	SCZO = cond(rdx)
	rax = rdx + rdx * 4<64>
	rax = rax + rax
	SCZO = cond(rax)
	rcx = rcx - rax
	SCZO = cond(rcx)
	ecx = ecx + 0x30<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	SZO = cond(rdx & rdx)
	C = false
	Mem0[r8:byte] = cl
	rcx = rdx
	branch Test(NE,Z) l0000000000413644
	// succ:  l000000000041369D l0000000000413644
l000000000041369D:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(LE,SZO) l00000000004136D5
	// succ:  l00000000004136A1 l00000000004136D5
l00000000004136A1:
	rax = r12
	rax = rax - rdi
	SCZO = cond(rax)
	eax = eax + ebx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004136D5
	// succ:  l00000000004136AD l00000000004136D5
l00000000004136AD:
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rdx = rax
	rcx = rdi + 1<64> + rax
	rax = rdi
	// succ:  l00000000004136C0
l00000000004136C0:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rax - 1<64>:byte] = 0x30<8>
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l00000000004136C0
	// succ:  l00000000004136CD l00000000004136C0
l00000000004136CD:
	rax = CONVERT(edx, word32, int64)
	rdi = rdi + 1<64> + rax
	// succ:  l00000000004136D5
l00000000004136D5:
	SCZO = cond(rdi - r12)
	branch Test(NE,Z) l00000000004136E5
	// succ:  l00000000004136DA l00000000004136E5
l00000000004136DA:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l00000000004136E5
	// succ:  l00000000004136DE l00000000004136E5
l00000000004136DE:
	Mem0[rdi:byte] = 0x30<8>
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	// succ:  l00000000004136E5
l00000000004136E5:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(LE,SZO) l000000000041374E
	// succ:  l00000000004136EA l000000000041374E
l00000000004136EA:
	rax = r12
	rax = rax - rdi
	SCZO = cond(rax)
	r13d = r13d + eax
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	SZO = cond(r13d & r13d)
	C = false
	Mem0[rsi + 0xC<64>:word32] = r13d
	branch Test(LE,SZO) l000000000041374E
	// succ:  l00000000004136FC l000000000041374E
l00000000004136FC:
	SZO = cond(r11d & 0x1C0<32>)
	C = false
	branch Test(EQ,Z) l000000000041370D
	// succ:  l0000000000413705 l000000000041370D
l0000000000413705:
	r13d = r13d - 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	Mem0[rsi + 0xC<64>:word32] = r13d
	// succ:  l000000000041370D
l000000000041370D:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(SG,S) l0000000000413810
	// succ:  l0000000000413715 l0000000000413810
l0000000000413715:
	SZO = cond(r11d & 0x400<32>)
	C = false
	branch Test(NE,Z) l000000000041374E
	// succ:  l000000000041371E l000000000041374E
l000000000041371E:
	eax = Mem0[rsi + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	Mem0[rsi + 0xC<64>:word32] = edx
	branch Test(LE,SZO) l000000000041374E
	// succ:  l000000000041372B l000000000041374E
l000000000041372B:
	// succ:  l0000000000413730
l0000000000413730:
	rdx = rsi
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	eax = Mem0[rsi + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	Mem0[rsi + 0xC<64>:word32] = edx
	branch Test(GT,SZO) l0000000000413730
	// succ:  l000000000041374A l0000000000413730
l000000000041374A:
	r11d = Mem0[rsi + 8<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	// succ:  l000000000041374E
l000000000041374E:
	SZO = cond(r11b & 0x80<8>)
	C = false
	branch Test(EQ,Z) l00000000004137C0
	// succ:  l0000000000413754 l00000000004137C0
l0000000000413754:
	rbx = rdi + 1<64>
	Mem0[rdi:byte] = 0x2D<8>
	// succ:  l000000000041375B
l000000000041375B:
	SCZO = cond(r12 - rbx)
	branch Test(UGE,C) l000000000041378E
	// succ:  l0000000000413760 l000000000041378E
l0000000000413760:
	rbx = rbx - 1<64>
	SCZO = cond(rbx)
	ecx = CONVERT(Mem0[rbx:byte], byte, int32)
	rdx = rsi
	call fn0000000000413270 (retsize: 8;)
	SCZO = cond(rbx - r12)
	branch Test(NE,Z) l0000000000413760
	// succ:  l0000000000413774 l0000000000413760
l0000000000413774:
	eax = Mem0[rsi + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	Mem0[rsi + 0xC<64>:word32] = edx
	branch Test(LE,SZO) l000000000041379B
	// succ:  l0000000000413781 l000000000041379B
l0000000000413781:
	rdx = rsi
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	// succ:  l000000000041378E
l000000000041378E:
	eax = Mem0[rsi + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	Mem0[rsi + 0xC<64>:word32] = edx
	branch Test(GT,SZO) l0000000000413781
	// succ:  l000000000041379B l0000000000413781
l000000000041379B:
	rsp = rbp - 0x58<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004135A0_exit
l00000000004137B0:
	rdi = r8 + 2<64>
	Mem0[r8 + 1<64>:byte] = 0x2C<8>
	goto l0000000000413674
	// succ:  l0000000000413674
l00000000004137C0:
	SZO = cond(r11d & 0x100<32>)
	C = false
	branch Test(EQ,Z) l00000000004137F0
	// succ:  l00000000004137C9 l00000000004137F0
l00000000004137C9:
	rbx = rdi + 1<64>
	Mem0[rdi:byte] = 0x2B<8>
	goto l000000000041375B
	// succ:  l000000000041375B
l00000000004137D2:
	eax = r8d
	rax = CONVERT(eax, word32, uint64)
	edx = 0x55555556<32>
	rdx = CONVERT(edx, word32, uint64)
	edx_eax = edx *s eax
	SCZO = cond(edx_eax)
	eax = r8d
	rax = CONVERT(eax, word32, uint64)
	eax = eax >> 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = edx - eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r8d = r8d + edx
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	goto l00000000004135E5
	// succ:  l00000000004135E5
l00000000004137F0:
	r11d = r11d & 0x40<32>
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	rbx = rdi
	branch Test(EQ,Z) l000000000041375B
	// succ:  l00000000004137FD l000000000041375B
l00000000004137FD:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	Mem0[rdi:byte] = 0x20<8>
	goto l000000000041375B
	// succ:  l000000000041375B
l0000000000413810:
	eax = r11d
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0x600<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x200<32>)
	branch Test(NE,Z) l0000000000413715
	// succ:  l0000000000413823 l0000000000413715
l0000000000413823:
	eax = Mem0[rsi + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = SLICE(rax - 1<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	Mem0[rsi + 0xC<64>:word32] = ecx
	branch Test(LE,SZO) l000000000041374E
	// succ:  l0000000000413834 l000000000041374E
l0000000000413834:
	rdx = rdi + 1<64> + rcx
	rax = rdi
	// succ:  l0000000000413840
l0000000000413840:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rax - 1<64>:byte] = 0x30<8>
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000413840
	// succ:  l000000000041384D l0000000000413840
l000000000041384D:
	rdi = rdi + 1<64> + rcx
	Mem0[rsi + 0xC<64>:word32] = 0xFFFFFFFF<32>
	goto l000000000041374E
	// succ:  l000000000041374E
l0000000000413860:
	rcx = -rcx
	SCZO = cond(rcx)
	C = rcx == 0<64>
	r9 = rcx
	goto l000000000041361F
	// succ:  l000000000041361F
l000000000041386B:
	rdi = r12
	goto l000000000041369D
	// succ:  l000000000041369D
fn00000000004135A0_exit:


// fn0000000000413880
// Return size: 8
define fn0000000000413880
fn0000000000413880_entry:
	rsp = fp
	// succ:  l0000000000413880
l0000000000413880:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = 0x12<32>
	rax = CONVERT(eax, word32, uint64)
	r10d = 0x18<32>
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(ecx - 0x6F<32>)
	rbx = r8
	r8d = Mem0[r8 + 0x10<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	r11d = ecx
	r11 = CONVERT(r11d, word32, uint64)
	cl = CONVERT(Test(NE,Z), bool, int8)
	edi = Mem0[rbx + 8<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	r14d = CONVERT(cl, byte, word32)
	r14 = CONVERT(r14d, word32, uint64)
	ecx = CONVERT(cl, byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(EQ,Z) l00000000004138BA
	// succ:  l00000000004138B6_1 l00000000004138BA
l00000000004138B6_1:
	r10d = eax
	// succ:  l00000000004138BA
l00000000004138BA:
	ecx = ecx + 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	al = 0<8>
	SZO = cond(r8d & r8d)
	C = false
	branch Test(SG,S) l00000000004138C6
	// succ:  l00000000004138C2_1 l00000000004138C6
l00000000004138C2_1:
	eax = r8d
	// succ:  l00000000004138C6
l00000000004138C6:
	r13 = rdx
	r9 = rdx
	r10d = r10d + eax
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	SZO = cond(edi & 0x1000<32>)
	C = false
	r14d = 7<32> + r14 * 8<64>
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(EQ,Z) l00000000004138EA
	// succ:  l00000000004138DF l00000000004138EA
l00000000004138DF:
	SCZO = cond(Mem0[rbx + 0x20<64>:word16] - 0<16>)
	branch Test(NE,Z) l0000000000413AA3
	// succ:  l00000000004138EA l0000000000413AA3
l00000000004138EA:
	r12 = CONVERT(Mem0[rbx + 0xC<64>:word32], word32, int64)
	rax = CONVERT(r10d, word32, int64)
	SCZO = cond(r10d - r12d)
	branch Test(GE,SO) l00000000004138F8
	// succ:  l00000000004138F4_1 l00000000004138F8
l00000000004138F4_1:
	rax = r12
	// succ:  l00000000004138F8
l00000000004138F8:
	rax = rax + 0xF<64>
	SCZO = cond(rax)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	SZO = cond(r13 & r13)
	C = false
	rsi = rsp + 0x20<64>
	branch Test(EQ,Z) l0000000000413BE0
	// succ:  l0000000000413916 l0000000000413BE0
l0000000000413916:
	r13d = r11d
	r13 = CONVERT(r13d, word32, uint64)
	edx = r14d
	rdx = CONVERT(edx, word32, uint64)
	r10 = rsi
	r13d = r13d & 0x20<32>
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	goto l0000000000413931
	// succ:  l0000000000413931
l0000000000413925:
	r9 = r9 >>u cl
	SCZO = cond(r9)
	Mem0[r10 - 1<64>:byte] = r14b
	SZO = cond(r9 & r9)
	C = false
	branch Test(EQ,Z) l0000000000413956
	// succ:  l0000000000413931 l0000000000413956
l0000000000413931:
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	r10 = r10 + 1<64>
	SCZO = cond(r10)
	eax = eax & r9d
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	r14d = SLICE(rax + 0x30<64>, word32, 0)
	r14 = CONVERT(r14d, word32, uint64)
	SCZO = cond(r14b - 0x39<8>)
	branch Test(ULE,CZ) l0000000000413925
	// succ:  l0000000000413944 l0000000000413925
l0000000000413944:
	eax = eax + 0x37<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	r9 = r9 >>u cl
	SCZO = cond(r9)
	eax = eax | r13d
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r9 & r9)
	C = false
	Mem0[r10 - 1<64>:byte] = al
	branch Test(NE,Z) l0000000000413931
	// succ:  l0000000000413956 l0000000000413931
l0000000000413956:
	SCZO = cond(rsi - r10)
	branch Test(EQ,Z) l0000000000413BE3
	// succ:  l000000000041395F l0000000000413BE3
l000000000041395F:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(LE,SZO) l0000000000413B30
	// succ:  l0000000000413968 l0000000000413B30
l0000000000413968:
	rax = rsi
	rax = rax - r10
	SCZO = cond(rax)
	eax = eax + r8d
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000413B30
	// succ:  l0000000000413979 l0000000000413B30
l0000000000413979:
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rdx = rax
	rcx = r10 + 1<64> + rax
	rax = r10
	// succ:  l0000000000413990
l0000000000413990:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rax - 1<64>:byte] = 0x30<8>
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000413990
	// succ:  l000000000041399D l0000000000413990
l000000000041399D:
	rax = CONVERT(edx, word32, int64)
	r10 = r10 + 1<64> + rax
	// succ:  l00000000004139A5
l00000000004139A5:
	SCZO = cond(r10 - rsi)
	branch Test(NE,Z) l00000000004139C0
	// succ:  l00000000004139AA l00000000004139C0
l00000000004139AA:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(EQ,Z) l00000000004139C0
	// succ:  l00000000004139AF l00000000004139C0
l00000000004139AF:
	Mem0[r10:byte] = 0x30<8>
	r10 = r10 + 1<64>
	SCZO = cond(r10)
	// succ:  l00000000004139C0
l00000000004139C0:
	rax = r10
	rax = rax - rsi
	SCZO = cond(rax)
	SCZO = cond(eax - r12d)
	branch Test(GE,SO) l0000000000413AF0
	// succ:  l00000000004139CF l0000000000413AF0
l00000000004139CF:
	r12d = r12d - eax
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	SZO = cond(r12d & r12d)
	C = false
	Mem0[rbx + 0xC<64>:word32] = r12d
	branch Test(LE,SZO) l0000000000413C48
	// succ:  l00000000004139DF l0000000000413C48
l00000000004139DF:
	SCZO = cond(r11d - 0x6F<32>)
	edx = Mem0[rbx + 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	branch Test(EQ,Z) l0000000000413BC0
	// succ:  l00000000004139EC l0000000000413BC0
l00000000004139EC:
	SZO = cond(dh & 8<8>)
	C = false
	branch Test(EQ,Z) l0000000000413B80
	// succ:  l00000000004139F5 l0000000000413B80
l00000000004139F5:
	r13d = SLICE(r12 - 2<64>, word32, 0)
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d & r13d)
	C = false
	branch Test(LE,SZO) l0000000000413A08
	// succ:  l00000000004139FF l0000000000413A08
l00000000004139FF:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(SG,S) l0000000000413ABD
	// succ:  l0000000000413A08 l0000000000413ABD
l0000000000413A08:
	SZO = cond(r13d & r13d)
	C = false
	Mem0[r10:byte] = r11b
	rdi = r10 + 2<64>
	Mem0[r10 + 1<64>:byte] = 0x30<8>
	branch Test(LE,SZO) l0000000000413B1C
	// succ:  l0000000000413A1D l0000000000413B1C
l0000000000413A1D:
	dh = dh & 4<8>
	SZO = cond(dh)
	C = false
	branch Test(NE,Z) l0000000000413B51
	// succ:  l0000000000413A26 l0000000000413B51
l0000000000413A26:
	r14d = SLICE(r13 - 1<64>, word32, 0)
	r14 = CONVERT(r14d, word32, uint64)
	// succ:  l0000000000413A2A
l0000000000413A2A:
	r12d = r14d
	r12 = CONVERT(r12d, word32, uint64)
	// succ:  l0000000000413A30
l0000000000413A30:
	r12d = r12d - 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	rdx = rbx
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	eax = SLICE(r12 + 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l0000000000413A30
	// succ:  l0000000000413A4A l0000000000413A30
l0000000000413A4A:
	SZO = cond(r14d & r14d)
	C = false
	r13d = SLICE(r14 - 1<64>, word32, 0)
	r13 = CONVERT(r13d, word32, uint64)
	r12d = 0<32>
	r12 = CONVERT(r12d, word32, uint64)
	branch Test(SG,S) l0000000000413A5B
	// succ:  l0000000000413A57_1 l0000000000413A5B
l0000000000413A57_1:
	r12d = r14d
	// succ:  l0000000000413A5B
l0000000000413A5B:
	r13d = r13d - r12d
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	SCZO = cond(rsi - rdi)
	branch Test(ULT,C) l0000000000413B60
	// succ:  l0000000000413A67 l0000000000413B60
l0000000000413A67:
	// succ:  l0000000000413A70
l0000000000413A70:
	SZO = cond(r13d & r13d)
	C = false
	esi = SLICE(r13 - 1<64>, word32, 0)
	rsi = CONVERT(esi, word32, uint64)
	branch Test(LE,SZO) l0000000000413A95
	// succ:  l0000000000413A79 l0000000000413A95
l0000000000413A79:
	// succ:  l0000000000413A80
l0000000000413A80:
	rdx = rbx
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	esi = esi - 1<32>
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	call fn0000000000413270 (retsize: 8;)
	SCZO = cond(esi - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000413A80
	// succ:  l0000000000413A95 l0000000000413A80
l0000000000413A95:
	rsp = rbp
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000413880_exit
l0000000000413AA3:
	eax = r10d
	rax = CONVERT(eax, word32, uint64)
	edx = 0x55555556<32>
	rdx = CONVERT(edx, word32, uint64)
	edx_eax = edx *s eax
	SCZO = cond(edx_eax)
	eax = r10d
	rax = CONVERT(eax, word32, uint64)
	eax = eax >> 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = edx - eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r10d = r10d + edx
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	goto l00000000004138EA
	// succ:  l00000000004138EA
l0000000000413ABD:
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0x600<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x200<32>)
	branch Test(EQ,Z) l0000000000413BF1
	// succ:  l0000000000413ACF l0000000000413BF1
l0000000000413ACF:
	r12d = r13d
	r12 = CONVERT(r12d, word32, uint64)
	// succ:  l0000000000413AD2
l0000000000413AD2:
	SZO = cond(dh & 8<8>)
	C = false
	r13d = r12d
	r13 = CONVERT(r13d, word32, uint64)
	rdi = r10
	branch Test(EQ,Z) l0000000000413A1D
	// succ:  l0000000000413AE1 l0000000000413A1D
l0000000000413AE1:
	r13d = r12d
	r13 = CONVERT(r13d, word32, uint64)
	goto l0000000000413A08
	// succ:  l0000000000413A08
l0000000000413AF0:
	Mem0[rbx + 0xC<64>:word32] = 0xFFFFFFFF<32>
	r13d = 0xFFFFFFFF<32>
	r13 = CONVERT(r13d, word32, uint64)
	// succ:  l0000000000413AFD
l0000000000413AFD:
	SCZO = cond(r11d - 0x6F<32>)
	branch Test(EQ,Z) l0000000000413BD2
	// succ:  l0000000000413B07 l0000000000413BD2
l0000000000413B07:
	edx = Mem0[rbx + 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0x800<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000413B11
l0000000000413B11:
	SZO = cond(eax & eax)
	C = false
	rdi = r10
	branch Test(NE,Z) l0000000000413A08
	// succ:  l0000000000413B1C l0000000000413A08
l0000000000413B1C:
	SCZO = cond(rdi - rsi)
	branch Test(UGT,CZ) l0000000000413B60
	// succ:  l0000000000413B21 l0000000000413B60
l0000000000413B21:
	goto l0000000000413A95
	// succ:  l0000000000413A95
l0000000000413B30:
	SCZO = cond(r11d - 0x6F<32>)
	branch Test(NE,Z) l00000000004139A5
	// succ:  l0000000000413B3A l00000000004139A5
l0000000000413B3A:
	SZO = cond(Mem0[rbx + 9<64>:byte] & 8<8>)
	C = false
	branch Test(EQ,Z) l00000000004139A5
	// succ:  l0000000000413B44 l00000000004139A5
l0000000000413B44:
	Mem0[r10:byte] = 0x30<8>
	r10 = r10 + 1<64>
	SCZO = cond(r10)
	goto l00000000004139A5
	// succ:  l00000000004139A5
l0000000000413B51:
	SCZO = cond(rdi - rsi)
	branch Test(ULE,CZ) l0000000000413C50
	// succ:  l0000000000413B5A l0000000000413C50
l0000000000413B5A:
	// succ:  l0000000000413B60
l0000000000413B60:
	rdi = rdi - 1<64>
	SCZO = cond(rdi)
	ecx = CONVERT(Mem0[rdi:byte], byte, int32)
	rdx = rbx
	call fn0000000000413270 (retsize: 8;)
	// succ:  l0000000000413B6F
l0000000000413B6F:
	SCZO = cond(rsi - rdi)
	branch Test(ULT,C) l0000000000413B60
	// succ:  l0000000000413B74 l0000000000413B60
l0000000000413B74:
	goto l0000000000413A70
	// succ:  l0000000000413A70
l0000000000413B80:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NS,S) l0000000000413AD2
	// succ:  l0000000000413B89 l0000000000413AD2
l0000000000413B89:
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0x600<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x200<32>)
	branch Test(EQ,Z) l0000000000413C3F
	// succ:  l0000000000413B9B l0000000000413C3F
l0000000000413B9B:
	SCZO = cond(r11d - 0x6F<32>)
	branch Test(NE,Z) l0000000000413AD2
	// succ:  l0000000000413BA5 l0000000000413AD2
l0000000000413BA5:
	dh = dh & 4<8>
	SZO = cond(dh)
	C = false
	branch Test(NE,Z) l0000000000413BCA
	// succ:  l0000000000413BAA l0000000000413BCA
l0000000000413BAA:
	r14d = SLICE(r12 - 1<64>, word32, 0)
	r14 = CONVERT(r14d, word32, uint64)
	rdi = r10
	goto l0000000000413A2A
	// succ:  l0000000000413A2A
l0000000000413BC0:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(SG,S) l0000000000413B89
	// succ:  l0000000000413BC5 l0000000000413B89
l0000000000413BC5:
	dh = dh & 4<8>
	SZO = cond(dh)
	C = false
	branch Test(EQ,Z) l0000000000413BAA
	// succ:  l0000000000413BCA l0000000000413BAA
l0000000000413BCA:
	rdi = r10
	r13d = r12d
	r13 = CONVERT(r13d, word32, uint64)
	goto l0000000000413B6F
	// succ:  l0000000000413B6F
l0000000000413BD2:
	SCZO = cond(rsi - r10)
	rdi = r10
	branch Test(ULT,C) l0000000000413B60
	// succ:  l0000000000413BDA l0000000000413B60
l0000000000413BDA:
	goto l0000000000413A95
	// succ:  l0000000000413A95
l0000000000413BE0:
	r10 = rsi
	// succ:  l0000000000413BE3
l0000000000413BE3:
	edi = edi & 0xFFFFF7FF<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	Mem0[rbx + 8<64>:word32] = edi
	goto l000000000041395F
	// succ:  l000000000041395F
l0000000000413BF1:
	r8d = SLICE(r12 - 3<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	r12d = r8d
	r12 = CONVERT(r12d, word32, uint64)
	// succ:  l0000000000413BF9
l0000000000413BF9:
	eax = r12d
	rax = CONVERT(eax, word32, uint64)
	rcx = r10 + 1<64> + rax
	rax = r10
	// succ:  l0000000000413C04
l0000000000413C04:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rax - 1<64>:byte] = 0x30<8>
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000413C04
	// succ:  l0000000000413C11 l0000000000413C04
l0000000000413C11:
	rax = CONVERT(r8d, word32, int64)
	SCZO = cond(r11d - 0x6F<32>)
	r10 = r10 + 1<64> + rax
	branch Test(EQ,Z) l0000000000413C31
	// succ:  l0000000000413C1F l0000000000413C31
l0000000000413C1F:
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	r13d = 0xFFFFFFFF<32>
	r13 = CONVERT(r13d, word32, uint64)
	eax = eax & 0x800<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000413B11
	// succ:  l0000000000413B11
l0000000000413C31:
	rdi = r10
	r13d = 0xFFFFFFFF<32>
	r13 = CONVERT(r13d, word32, uint64)
	goto l0000000000413B1C
	// succ:  l0000000000413B1C
l0000000000413C3F:
	r12d = r12d - 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	goto l0000000000413BF9
	// succ:  l0000000000413BF9
l0000000000413C48:
	r13d = r12d
	r13 = CONVERT(r13d, word32, uint64)
	goto l0000000000413AFD
	// succ:  l0000000000413AFD
l0000000000413C50:
	esi = SLICE(r13 - 1<64>, word32, 0)
	rsi = CONVERT(esi, word32, uint64)
	goto l0000000000413A80
	// succ:  l0000000000413A80
fn0000000000413880_exit:


// fn0000000000413C60
// Return size: 8
define fn0000000000413C60
fn0000000000413C60_entry:
	rsp = fp
	// succ:  l0000000000413C60
l0000000000413C60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rbp = rsp
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0x14<64>:word32] - 0xFFFFFFFD<32>)
	rsi = rcx
	branch Test(EQ,Z) l0000000000413D10
	// succ:  l0000000000413C7A l0000000000413D10
l0000000000413C7A:
	edx = CONVERT(Mem0[rcx + 0x18<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000413C7E
l0000000000413C7E:
	SZO = cond(dx & dx)
	C = false
	branch Test(EQ,Z) l0000000000413CE2
	// succ:  l0000000000413C83 l0000000000413CE2
l0000000000413C83:
	rax = CONVERT(Mem0[rsi + 0x14<64>:word32], word32, int64)
	r12 = rsp
	rax = rax + 0xF<64>
	SCZO = cond(rax)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	r8 = rbp - 4<64>
	Mem0[rbp - 4<64>:word32] = 0<32>
	rbx = rsp + 0x20<64>
	rcx = rbx
	call fn0000000000412C60 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000413D00
	// succ:  l0000000000413CB6 l0000000000413D00
l0000000000413CB6:
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rdi = rbx + 1<64> + rax
	// succ:  l0000000000413CC0
l0000000000413CC0:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	ecx = CONVERT(Mem0[rbx - 1<64>:byte], byte, int32)
	rdx = rsi
	call fn0000000000413270 (retsize: 8;)
	SCZO = cond(rbx - rdi)
	branch Test(NE,Z) l0000000000413CC0
	// succ:  l0000000000413CD5 l0000000000413CC0
l0000000000413CD5:
	rsp = r12
	rsp = rbp
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000413C60_exit
l0000000000413CE2:
	rdx = rsi
	ecx = 0x2E<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	rsp = rbp
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000413C60_exit
l0000000000413D00:
	rdx = rsi
	ecx = 0x2E<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	goto l0000000000413CD5
	// succ:  l0000000000413CD5
l0000000000413D10:
	Mem0[rbp - 4<64>:word32] = 0<32>
	call msvcrt.dll!localeconv (retsize: 8;)
	rdx = Mem0[rax:word64]
	rcx = rbp - 6<64>
	r9 = rbp - 4<64>
	r8d = 0x10<32>
	r8 = CONVERT(r8d, word32, uint64)
	call fn0000000000412F70 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000413D46
	// succ:  l0000000000413D36 l0000000000413D46
l0000000000413D36:
	edx = CONVERT(Mem0[rbp - 6<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsi + 0x18<64>:word16] = dx
	// succ:  l0000000000413D3E
l0000000000413D3E:
	Mem0[rsi + 0x14<64>:word32] = eax
	goto l0000000000413C7E
	// succ:  l0000000000413C7E
l0000000000413D46:
	edx = CONVERT(Mem0[rsi + 0x18<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000413D3E
	// succ:  l0000000000413D3E
fn0000000000413C60_exit:


// fn0000000000413D50
// Return size: 8
define fn0000000000413D50
fn0000000000413D50_entry:
	rsp = fp
	// succ:  l0000000000413D50
l0000000000413D50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	esi = r8d
	rsi = CONVERT(esi, word32, uint64)
	ebp = ecx
	rbp = CONVERT(ebp, word32, uint64)
	rdi = rdx
	SZO = cond(esi & esi)
	C = false
	rbx = r9
	r8d = Mem0[r9 + 0xC<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	branch Test(LE,SZO) l0000000000413F42
	// succ:  l0000000000413D71 l0000000000413F42
l0000000000413D71:
	SCZO = cond(esi - r8d)
	branch Test(GE,SO) l0000000000413EB0
	// succ:  l0000000000413D7A l0000000000413EB0
l0000000000413D7A:
	r8d = r8d - esi
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	Mem0[r9 + 0xC<64>:word32] = r8d
	// succ:  l0000000000413D81
l0000000000413D81:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(SG,S) l0000000000413EB0
	// succ:  l0000000000413D8A l0000000000413EB0
l0000000000413D8A:
	eax = Mem0[rbx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - r8d)
	branch Test(GE,SO) l0000000000413EB0
	// succ:  l0000000000413D96 l0000000000413EB0
l0000000000413D96:
	r8d = r8d - eax
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	SZO = cond(r8d & r8d)
	C = false
	Mem0[rbx + 0xC<64>:word32] = r8d
	branch Test(LE,SZO) l0000000000413EBD
	// succ:  l0000000000413DA6 l0000000000413EBD
l0000000000413DA6:
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000413FF5
	// succ:  l0000000000413DAE l0000000000413FF5
l0000000000413DAE:
	r8d = r8d - 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	SZO = cond(esi & esi)
	C = false
	Mem0[rbx + 0xC<64>:word32] = r8d
	branch Test(LE,SZO) l0000000000413DC4
	// succ:  l0000000000413DBA l0000000000413DC4
l0000000000413DBA:
	SZO = cond(Mem0[rbx + 9<64>:byte] & 0x10<8>)
	C = false
	branch Test(NE,Z) l0000000000413ECF
	// succ:  l0000000000413DC4 l0000000000413ECF
l0000000000413DC4:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(LE,SZO) l0000000000413E0D
	// succ:  l0000000000413DC9 l0000000000413E0D
l0000000000413DC9:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(NE,Z) l0000000000413DDB
	// succ:  l0000000000413DCD l0000000000413DDB
l0000000000413DCD:
	eax = Mem0[rbx + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & 0x1C0<32>)
	C = false
	branch Test(EQ,Z) l0000000000413FD5
	// succ:  l0000000000413DDB l0000000000413FD5
l0000000000413DDB:
	r8d = r8d - 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	SZO = cond(r8d & r8d)
	C = false
	Mem0[rbx + 0xC<64>:word32] = r8d
	branch Test(LE,SZO) l0000000000413E0D
	// succ:  l0000000000413DE8 l0000000000413E0D
l0000000000413DE8:
	SZO = cond(Mem0[rbx + 8<64>:word32] & 0x600<32>)
	C = false
	branch Test(NE,Z) l0000000000413E0D
	// succ:  l0000000000413DF1 l0000000000413E0D
l0000000000413DF1:
	goto l0000000000413E00
	// succ:  l0000000000413E00
l0000000000413DF3:
	rdx = rbx
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	// succ:  l0000000000413E00
l0000000000413E00:
	eax = Mem0[rbx + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	Mem0[rbx + 0xC<64>:word32] = edx
	branch Test(GT,SZO) l0000000000413DF3
	// succ:  l0000000000413E0D l0000000000413DF3
l0000000000413E0D:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(NE,Z) l0000000000413F30
	// succ:  l0000000000413E15 l0000000000413F30
l0000000000413E15:
	eax = Mem0[rbx + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000413E18
l0000000000413E18:
	SZO = cond(ah & 1<8>)
	C = false
	branch Test(NE,Z) l0000000000413F60
	// succ:  l0000000000413E21 l0000000000413F60
l0000000000413E21:
	SZO = cond(al & 0x40<8>)
	C = false
	branch Test(NE,Z) l0000000000413FE3
	// succ:  l0000000000413E29 l0000000000413FE3
l0000000000413E29:
	edx = Mem0[rbx + 0xC<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l0000000000413E43
	// succ:  l0000000000413E30 l0000000000413E43
l0000000000413E30:
	eax = Mem0[rbx + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0x600<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x200<32>)
	branch Test(EQ,Z) l0000000000413F72
	// succ:  l0000000000413E43 l0000000000413F72
l0000000000413E43:
	SZO = cond(esi & esi)
	C = false
	branch Test(LE,SZO) l0000000000413FA2
	// succ:  l0000000000413E4B l0000000000413FA2
l0000000000413E4B:
	r12 = rbx + 0x20<64>
	ebp = 0x55555556<32>
	rbp = CONVERT(ebp, word32, uint64)
	// succ:  l0000000000413E54
l0000000000413E54:
	eax = CONVERT(Mem0[rdi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = 0x30<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000413E67
	// succ:  l0000000000413E60 l0000000000413E67
l0000000000413E60:
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	ecx = CONVERT(al, byte, int32)
	// succ:  l0000000000413E67
l0000000000413E67:
	rdx = rbx
	call fn0000000000413270 (retsize: 8;)
	esi = esi - 1<32>
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	branch Test(EQ,Z) l0000000000414090
	// succ:  l0000000000413E78 l0000000000414090
l0000000000413E78:
	SZO = cond(Mem0[rbx + 9<64>:byte] & 0x10<8>)
	C = false
	branch Test(EQ,Z) l0000000000413E54
	// succ:  l0000000000413E7E l0000000000413E54
l0000000000413E7E:
	SCZO = cond(Mem0[rbx + 0x20<64>:word16] - 0<16>)
	branch Test(EQ,Z) l0000000000413E54
	// succ:  l0000000000413E85 l0000000000413E54
l0000000000413E85:
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	edx_eax = ebp *s eax
	SCZO = cond(edx_eax)
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	eax = eax >> 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = edx - eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = SLICE(rdx + rdx * 2<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(esi - eax)
	branch Test(NE,Z) l0000000000413E54
	// succ:  l0000000000413E97 l0000000000413E54
l0000000000413E97:
	r8 = rbx
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r12
	call fn00000000004132D0 (retsize: 8;)
	goto l0000000000413E54
	// succ:  l0000000000413E54
l0000000000413EB0:
	Mem0[rbx + 0xC<64>:word32] = 0xFFFFFFFF<32>
	r8d = 0xFFFFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	// succ:  l0000000000413EBD
l0000000000413EBD:
	SZO = cond(esi & esi)
	C = false
	branch Test(LE,SZO) l0000000000413E0D
	// succ:  l0000000000413EC5 l0000000000413E0D
l0000000000413EC5:
	SZO = cond(Mem0[rbx + 9<64>:byte] & 0x10<8>)
	C = false
	branch Test(EQ,Z) l0000000000413E0D
	// succ:  l0000000000413ECF l0000000000413E0D
l0000000000413ECF:
	SCZO = cond(Mem0[rbx + 0x20<64>:word16] - 0<16>)
	branch Test(EQ,Z) l0000000000413DC4
	// succ:  l0000000000413EDA l0000000000413DC4
l0000000000413EDA:
	ecx = SLICE(rsi + 2<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	edx = 0x55555556<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx >> 0x1F<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	edx_eax = edx *s eax
	SCZO = cond(edx_eax)
	edx = edx - ecx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(edx - 1<32>)
	branch Test(LE,SZO) l0000000000413DC4
	// succ:  l0000000000413EF4 l0000000000413DC4
l0000000000413EF4:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(LE,SZO) l0000000000413E0D
	// succ:  l0000000000413EFD l0000000000413E0D
l0000000000413EFD:
	eax = r8d
	rax = CONVERT(eax, word32, uint64)
	eax = eax - edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	goto l0000000000413F19
	// succ:  l0000000000413F19
l0000000000413F10:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(EQ,Z) l0000000000414084
	// succ:  l0000000000413F19 l0000000000414084
l0000000000413F19:
	r8d = r8d - 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	SCZO = cond(r8d - eax)
	branch Test(NE,Z) l0000000000413F10
	// succ:  l0000000000413F22 l0000000000413F10
l0000000000413F22:
	Mem0[rbx + 0xC<64>:word32] = r8d
	goto l0000000000413DC4
	// succ:  l0000000000413DC4
l0000000000413F30:
	rdx = rbx
	ecx = 0x2D<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	goto l0000000000413E29
	// succ:  l0000000000413E29
l0000000000413F42:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(LE,SZO) l0000000000413D81
	// succ:  l0000000000413F4B l0000000000413D81
l0000000000413F4B:
	r8d = r8d - 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	Mem0[r9 + 0xC<64>:word32] = r8d
	goto l0000000000413D8A
	// succ:  l0000000000413D8A
l0000000000413F60:
	rdx = rbx
	ecx = 0x2B<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	goto l0000000000413E29
	// succ:  l0000000000413E29
l0000000000413F72:
	edx = edx - 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	Mem0[rbx + 0xC<64>:word32] = edx
	// succ:  l0000000000413F80
l0000000000413F80:
	rdx = rbx
	ecx = 0x30<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	eax = Mem0[rbx + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	Mem0[rbx + 0xC<64>:word32] = edx
	branch Test(GT,SZO) l0000000000413F80
	// succ:  l0000000000413F9A l0000000000413F80
l0000000000413F9A:
	SZO = cond(esi & esi)
	C = false
	branch Test(GT,SZO) l0000000000413E4B
	// succ:  l0000000000413FA2 l0000000000413E4B
l0000000000413FA2:
	rdx = rbx
	ecx = 0x30<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	eax = Mem0[rbx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l0000000000414022
	// succ:  l0000000000413FB6 l0000000000414022
l0000000000413FB6:
	SZO = cond(Mem0[rbx + 9<64>:byte] & 8<8>)
	C = false
	branch Test(NE,Z) l0000000000414022
	// succ:  l0000000000413FBC l0000000000414022
l0000000000413FBC:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l0000000000414066
	// succ:  l0000000000413FC4 l0000000000414066
l0000000000413FC4:
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx + 0x10<64>:word32] = eax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000413D50_exit
l0000000000413FD5:
	SZO = cond(ah & 6<8>)
	C = false
	branch Test(EQ,Z) l0000000000413E00
	// succ:  l0000000000413FDE l0000000000413E00
l0000000000413FDE:
	goto l0000000000413E18
	// succ:  l0000000000413E18
l0000000000413FE3:
	rdx = rbx
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	goto l0000000000413E29
	// succ:  l0000000000413E29
l0000000000413FF5:
	eax = Mem0[rbx + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(ah & 8<8>)
	C = false
	branch Test(NE,Z) l0000000000413DAE
	// succ:  l0000000000414001 l0000000000413DAE
l0000000000414001:
	SZO = cond(esi & esi)
	C = false
	branch Test(LE,SZO) l0000000000413DC9
	// succ:  l0000000000414009 l0000000000413DC9
l0000000000414009:
	SZO = cond(ah & 0x10<8>)
	C = false
	branch Test(EQ,Z) l0000000000413DC9
	// succ:  l0000000000414012 l0000000000413DC9
l0000000000414012:
	SCZO = cond(Mem0[rbx + 0x20<64>:word16] - 0<16>)
	branch Test(NE,Z) l0000000000413EDA
	// succ:  l000000000041401D l0000000000413EDA
l000000000041401D:
	goto l0000000000413DC9
	// succ:  l0000000000413DC9
l0000000000414022:
	rcx = rbx
	call fn0000000000413C60 (retsize: 8;)
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l000000000041404B
	// succ:  l000000000041402E l000000000041404B
l000000000041402E:
	goto l0000000000414063
	// succ:  l0000000000414063
l0000000000414030:
	eax = CONVERT(Mem0[rdi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = 0x30<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000414043
	// succ:  l000000000041403C l0000000000414043
l000000000041403C:
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	ecx = CONVERT(al, byte, int32)
	// succ:  l0000000000414043
l0000000000414043:
	rdx = rbx
	call fn0000000000413270 (retsize: 8;)
	// succ:  l000000000041404B
l000000000041404B:
	eax = Mem0[rbx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	Mem0[rbx + 0x10<64>:word32] = edx
	branch Test(GT,SZO) l0000000000414030
	// succ:  l0000000000414058 l0000000000414030
l0000000000414058:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000413D50_exit
l0000000000414063:
	eax = Mem0[rbx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000414066
l0000000000414066:
	eax = eax + esi
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx + 0x10<64>:word32] = eax
	// succ:  l0000000000414070
l0000000000414070:
	rdx = rbx
	ecx = 0x30<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	esi = esi + 1<32>
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	branch Test(NE,Z) l0000000000414070
	// succ:  l0000000000414082 l0000000000414070
l0000000000414082:
	goto l000000000041404B
	// succ:  l000000000041404B
l0000000000414084:
	Mem0[rbx + 0xC<64>:word32] = 0<32>
	goto l0000000000413E0D
	// succ:  l0000000000413E0D
l0000000000414090:
	eax = Mem0[rbx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004140A1
	// succ:  l0000000000414097 l00000000004140A1
l0000000000414097:
	rcx = rbx
	call fn0000000000413C60 (retsize: 8;)
	goto l000000000041404B
	// succ:  l000000000041404B
l00000000004140A1:
	SZO = cond(Mem0[rbx + 9<64>:byte] & 8<8>)
	C = false
	branch Test(NE,Z) l0000000000414097
	// succ:  l00000000004140A7 l0000000000414097
l00000000004140A7:
	goto l0000000000413FC4
	// succ:  l0000000000413FC4
fn0000000000413D50_exit:


// fn00000000004140B0
// Return size: 8
define fn00000000004140B0
fn00000000004140B0_entry:
	rsp = fp
	// succ:  l00000000004140B0
l00000000004140B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = r9
	r9d = SLICE(r8 - 1<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	r8d = 0x66666667<32>
	r8 = CONVERT(r8d, word32, uint64)
	r10 = rdx
	eax = r9d
	rax = CONVERT(eax, word32, uint64)
	rbx = CONVERT(r9d, word32, int64)
	r9d = r9d >> 0x1F<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	edx_eax = r8d *s eax
	SCZO = cond(edx_eax)
	edx = edx >> 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r8d = edx
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d - r9d
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	branch Test(EQ,Z) l000000000041410B
	// succ:  l00000000004140E5 l000000000041410B
l00000000004140E5:
	r11d = 0x66666667<32>
	r11 = CONVERT(r11d, word32, uint64)
	// succ:  l00000000004140F0
l00000000004140F0:
	eax = r8d
	rax = CONVERT(eax, word32, uint64)
	r8d = r8d >> 0x1F<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	r9d = r9d + 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	edx_eax = r11d *s eax
	SCZO = cond(edx_eax)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	eax = eax >> 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax - r8d
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	branch Test(NE,Z) l00000000004140F0
	// succ:  l000000000041410B l00000000004140F0
l000000000041410B:
	edi = Mem0[rsi + 0x2C<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	eax = Mem0[rsi + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r9d - edi)
	branch Test(LT,SO) l0000000000414118
	// succ:  l0000000000414114_1 l0000000000414118
l0000000000414114_1:
	edi = r9d
	// succ:  l0000000000414118
l0000000000414118:
	edx = SLICE(rdi + 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(eax - edx)
	branch Test(GT,SZO) l0000000000414174
	// succ:  l000000000041411F l0000000000414174
l000000000041411F:
	Mem0[rsi + 0xC<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l0000000000414126
l0000000000414126:
	rdx = r10
	r9 = rsi
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	call fn0000000000413D50 (retsize: 8;)
	ecx = Mem0[rsi + 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = Mem0[rsi + 0x2C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = rsi
	Mem0[rsi + 0x10<64>:word32] = eax
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx & 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	eax = eax | 0x1C0<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	ecx = ecx | 0x45<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	Mem0[rsi + 8<64>:word32] = eax
	call fn0000000000413270 (retsize: 8;)
	r9d = SLICE(rdi + 1<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	v26 = Mem0[rsi + 0xC<64>:word32] + r9d
	Mem0[rsi + 0xC<64>:word32] = v26
	SCZO = cond(v26)
	rdx = rsi
	rcx = rbx
	call fn00000000004135A0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004140B0_exit
l0000000000414174:
	eax = eax - edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rsi + 0xC<64>:word32] = eax
	goto l0000000000414126
	// succ:  l0000000000414126
fn00000000004140B0_exit:


// fn0000000000414180
// Return size: 8
define fn0000000000414180
fn0000000000414180_entry:
	rsp = fp
	// succ:  l0000000000414180
l0000000000414180:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x68<64>
	SCZO = cond(rsp)
	eax = Mem0[rdx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rcx:real80], real80, real64)
	rbx = rdx
	SZO = cond(eax & eax)
	C = false
	r8d = SLICE(rax + 1<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	branch Test(SG,S) l0000000000414200
	// succ:  l0000000000414196 l0000000000414200
l0000000000414196:
	rdx = rsp + 0x30<64>
	r9 = rsp + 0x4C<64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x50<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	rax = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0x58<64>:word64]
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = rsp + 0x48<64>
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000413170 (retsize: 8;)
	r8d = Mem0[rsp + 0x4C<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rsi = rax
	SCZO = cond(r8d - 0xFFFF8000<32>)
	branch Test(EQ,Z) l0000000000414210
	// succ:  l00000000004141DD l0000000000414210
l00000000004141DD:
	ecx = Mem0[rsp + 0x48<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	r9 = rbx
	rdx = rax
	call fn00000000004140B0 (retsize: 8;)
	rcx = rsi
	call fn0000000000419CC0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000414180_exit
l0000000000414200:
	Mem0[rdx + 0x10<64>:word32] = 6<32>
	r8d = 7<32>
	r8 = CONVERT(r8d, word32, uint64)
	goto l0000000000414196
	// succ:  l0000000000414196
l0000000000414210:
	ecx = Mem0[rsp + 0x48<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	r8 = rbx
	rdx = rax
	call fn0000000000413500 (retsize: 8;)
	rcx = rsi
	call fn0000000000419CC0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000414180_exit
fn0000000000414180_exit:


// fn0000000000414230
// Return size: 8
define fn0000000000414230
fn0000000000414230_entry:
	rsp = fp
	// succ:  l0000000000414230
l0000000000414230:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x68<64>
	SCZO = cond(rsp)
	r8d = Mem0[rdx + 0x10<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rcx:real80], real80, real64)
	rbx = rdx
	SZO = cond(r8d & r8d)
	C = false
	branch Test(SG,S) l00000000004142E0
	// succ:  l0000000000414248 l00000000004142E0
l0000000000414248:
	rdx = rsp + 0x30<64>
	r9 = rsp + 0x4C<64>
	ecx = 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x50<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	rax = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0x58<64>:word64]
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = rsp + 0x48<64>
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000413170 (retsize: 8;)
	r8d = Mem0[rsp + 0x4C<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rsi = rax
	SCZO = cond(r8d - 0xFFFF8000<32>)
	branch Test(EQ,Z) l00000000004142F2
	// succ:  l000000000041428F l00000000004142F2
l000000000041428F:
	ecx = Mem0[rsp + 0x48<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	rdx = rax
	r9 = rbx
	call fn0000000000413D50 (retsize: 8;)
	eax = Mem0[rbx + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	Mem0[rbx + 0xC<64>:word32] = edx
	branch Test(LE,SZO) l00000000004142CE
	// succ:  l00000000004142AB l00000000004142CE
l00000000004142AB:
	// succ:  l00000000004142B0
l00000000004142B0:
	rdx = rbx
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	r8d = Mem0[rbx + 0xC<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	r9d = SLICE(r8 - 1<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r8d & r8d)
	C = false
	Mem0[rbx + 0xC<64>:word32] = r9d
	branch Test(GT,SZO) l00000000004142B0
	// succ:  l00000000004142CE l00000000004142B0
l00000000004142CE:
	rcx = rsi
	call fn0000000000419CC0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000414230_exit
l00000000004142E0:
	Mem0[rdx + 0x10<64>:word32] = 6<32>
	r8d = 6<32>
	r8 = CONVERT(r8d, word32, uint64)
	goto l0000000000414248
	// succ:  l0000000000414248
l00000000004142F2:
	ecx = Mem0[rsp + 0x48<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	r8 = rbx
	rdx = rax
	call fn0000000000413500 (retsize: 8;)
	rcx = rsi
	call fn0000000000419CC0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000414230_exit
fn0000000000414230_exit:


// fn0000000000414320
// Return size: 8
define fn0000000000414320
fn0000000000414320_entry:
	rsp = fp
	// succ:  l0000000000414320
l0000000000414320:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x78<64>
	SCZO = cond(rsp)
	r8d = Mem0[rdx + 0x10<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rcx:real80], real80, real64)
	rbx = rdx
	SZO = cond(r8d & r8d)
	C = false
	branch Test(SG,S) l0000000000414470
	// succ:  l0000000000414338 l0000000000414470
l0000000000414338:
	branch Test(EQ,Z) l0000000000414450
	// succ:  l000000000041433E l0000000000414450
l000000000041433E:
	rdx = rsp + 0x40<64>
	r9 = rsp + 0x5C<64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x60<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	rax = Mem0[rsp + 0x60<64>:word64]
	Mem0[rsp + 0x40<64>:word64] = rax
	rax = Mem0[rsp + 0x68<64>:word64]
	Mem0[rsp + 0x48<64>:word64] = rax
	rax = rsp + 0x58<64>
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000413170 (retsize: 8;)
	r8d = Mem0[rsp + 0x5C<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rsi = rax
	SCZO = cond(r8d - 0xFFFF8000<32>)
	branch Test(EQ,Z) l0000000000414490
	// succ:  l0000000000414389 l0000000000414490
l0000000000414389:
	SCZO = cond(r8d - 0xFFFFFFFD<32>)
	branch Test(LT,SO) l0000000000414410
	// succ:  l0000000000414393 l0000000000414410
l0000000000414393:
	eax = Mem0[rbx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8d - eax)
	branch Test(GT,SZO) l0000000000414410
	// succ:  l000000000041439B l0000000000414410
l000000000041439B:
	SZO = cond(Mem0[rbx + 9<64>:byte] & 8<8>)
	C = false
	branch Test(NE,Z) l0000000000414482
	// succ:  l00000000004143A5 l0000000000414482
l00000000004143A5:
	rcx = rsi
	Mem0[rsp + 0x3C<64>:word32] = r8d
	eax = strlen(rcx)
	r8d = Mem0[rsp + 0x3C<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	eax = eax - r8d
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(eax & eax)
	C = false
	Mem0[rbx + 0x10<64>:word32] = eax
	branch Test(SG,S) l00000000004144A1
	// succ:  l00000000004143C5 l00000000004144A1
l00000000004143C5:
	ecx = Mem0[rsp + 0x58<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	rdx = rsi
	r9 = rbx
	call fn0000000000413D50 (retsize: 8;)
	eax = Mem0[rbx + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	Mem0[rbx + 0xC<64>:word32] = edx
	branch Test(LE,SZO) l000000000041443D
	// succ:  l00000000004143E1 l000000000041443D
l00000000004143E1:
	rdx = rbx
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	r8d = Mem0[rbx + 0xC<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	r9d = SLICE(r8 - 1<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r8d & r8d)
	C = false
	Mem0[rbx + 0xC<64>:word32] = r9d
	branch Test(GT,SZO) l00000000004143E1
	// succ:  l00000000004143FF l00000000004143E1
l00000000004143FF:
	rcx = rsi
	call fn0000000000419CC0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rsp = rsp + 0x78<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000414320_exit
l0000000000414410:
	SZO = cond(Mem0[rbx + 9<64>:byte] & 8<8>)
	C = false
	branch Test(NE,Z) l0000000000414462
	// succ:  l0000000000414416 l0000000000414462
l0000000000414416:
	rcx = rsi
	Mem0[rsp + 0x3C<64>:word32] = r8d
	eax = strlen(rcx)
	r8d = Mem0[rsp + 0x3C<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx + 0x10<64>:word32] = eax
	// succ:  l000000000041442E
l000000000041442E:
	ecx = Mem0[rsp + 0x58<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	r9 = rbx
	rdx = rsi
	call fn00000000004140B0 (retsize: 8;)
	// succ:  l000000000041443D
l000000000041443D:
	rcx = rsi
	call fn0000000000419CC0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rsp = rsp + 0x78<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000414320_exit
l0000000000414450:
	Mem0[rdx + 0x10<64>:word32] = 1<32>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	goto l000000000041433E
	// succ:  l000000000041433E
l0000000000414462:
	v22 = Mem0[rbx + 0x10<64>:word32] - 1<32>
	Mem0[rbx + 0x10<64>:word32] = v22
	SCZO = cond(v22)
	goto l000000000041442E
	// succ:  l000000000041442E
l0000000000414470:
	Mem0[rdx + 0x10<64>:word32] = 6<32>
	r8d = 6<32>
	r8 = CONVERT(r8d, word32, uint64)
	goto l000000000041433E
	// succ:  l000000000041433E
l0000000000414482:
	eax = eax - r8d
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx + 0x10<64>:word32] = eax
	goto l00000000004143C5
	// succ:  l00000000004143C5
l0000000000414490:
	ecx = Mem0[rsp + 0x58<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	r8 = rbx
	rdx = rax
	call fn0000000000413500 (retsize: 8;)
	goto l000000000041443D
	// succ:  l000000000041443D
l00000000004144A1:
	edx = Mem0[rbx + 0xC<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l00000000004143C5
	// succ:  l00000000004144AC l00000000004143C5
l00000000004144AC:
	eax = eax + edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx + 0xC<64>:word32] = eax
	goto l00000000004143C5
	// succ:  l00000000004143C5
fn0000000000414320_exit:


// fn00000000004144C0
// Return size: 8
define fn00000000004144C0
fn00000000004144C0_entry:
	rsp = fp
	// succ:  l00000000004144C0
l00000000004144C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x68<64>
	SCZO = cond(rsp)
	r9 = Mem0[rcx:word64]
	r10d = Mem0[rcx + 8<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	rbx = rdx
	rax = r9
	Mem0[rsp + 0x30<64>:word64] = r9
	Mem0[rsp + 0x38<64>:word32] = r10d
	rax = rax >>u 0x20<64>
	SCZO = cond(rax)
	r8 = r10
	eax = eax & 0x7FFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	r9d = r9d | eax
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	eax = SLICE(r10 + r10, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	edx = r9d
	rdx = CONVERT(edx, word32, uint64)
	edx = -edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	C = edx == 0<32>
	eax = eax & 0xFFFE<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edx = edx | r9d
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx >>u 0x1F<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx | eax
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = 0xFFFE<32>
	rax = CONVERT(eax, word32, uint64)
	eax = eax - edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax >> 0x10<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000414900
	// succ:  l000000000041451A l0000000000414900
l000000000041451A:
	esi = CONVERT(Mem0[rsp + 0x38<64>:word16], word16, word32)
	rsi = CONVERT(esi, word32, uint64)
	ecx = esi
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx & 0x8000<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	branch Test(EQ,Z) l0000000000414530
	// succ:  l0000000000414529 l0000000000414530
l0000000000414529:
	v25 = Mem0[rbx + 8<64>:word32] | 0x80<32>
	Mem0[rbx + 8<64>:word32] = v25
	SZO = cond(Mem0[rbx + 8<64>:word32])
	C = false
	// succ:  l0000000000414530
l0000000000414530:
	r8w = r8w & 0x7FFF<16>
	SZO = cond(r8w)
	C = false
	SCZO = cond(r8w - 0x7FFF<16>)
	branch Test(NE,Z) l0000000000414560
	// succ:  l000000000041453E l0000000000414560
l000000000041453E:
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NE,Z) l0000000000414560
	// succ:  l0000000000414543 l0000000000414560
l0000000000414543:
	rdx = 0x0000000000490B44<p64>
	r8 = rbx
	call fn0000000000413500 (retsize: 8;)
	goto l00000000004148D5
	// succ:  l00000000004148D5
l0000000000414560:
	si = si & 0x7FFF<16>
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0000000000414690
	// succ:  l000000000041456B l0000000000414690
l000000000041456B:
	rax = Mem0[rsp + 0x30<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000041491F
	// succ:  l0000000000414579 l000000000041491F
l0000000000414579:
	r9d = Mem0[rbx + 0x10<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d - 0xE<32>)
	branch Test(ULE,CZ) l000000000041499C
	// succ:  l0000000000414587 l000000000041499C
l0000000000414587:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	// succ:  l0000000000414589
l0000000000414589:
	r8d = Mem0[rbx + 8<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rbp = rsp + 0x40<64>
	// succ:  l0000000000414592
l0000000000414592:
	SZO = cond(r9d & r9d)
	C = false
	branch Test(LE,SZO) l00000000004149AC
	// succ:  l000000000041459B l00000000004149AC
l000000000041459B:
	rax = rbp + 1<64>
	Mem0[rsp + 0x40<64>:byte] = 0x2E<8>
	// succ:  l00000000004145A4
l00000000004145A4:
	r10d = Mem0[rbx + 0xC<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	rdi = rax + 1<64>
	Mem0[rax:byte] = 0x30<8>
	r12d = 2<32>
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r10d & r10d)
	C = false
	branch Test(GT,SZO) l00000000004147BC
	// succ:  l00000000004145BE l00000000004147BC
l00000000004145BE:
	// succ:  l00000000004145C0
l00000000004145C0:
	SZO = cond(r8b & 0x80<8>)
	C = false
	branch Test(NE,Z) l0000000000414880
	// succ:  l00000000004145CA l0000000000414880
l00000000004145CA:
	SZO = cond(r8d & 0x100<32>)
	C = false
	branch Test(NE,Z) l0000000000414970
	// succ:  l00000000004145D7 l0000000000414970
l00000000004145D7:
	r8d = r8d & 0x40<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	branch Test(NE,Z) l0000000000414982
	// succ:  l00000000004145E1 l0000000000414982
l00000000004145E1:
	rdx = rbx
	ecx = 0x30<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	ecx = Mem0[rbx + 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	rdx = rbx
	ecx = ecx & 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	ecx = ecx | 0x58<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call fn0000000000413270 (retsize: 8;)
	eax = Mem0[rbx + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000041462C
	// succ:  l0000000000414606 l000000000041462C
l0000000000414606:
	SZO = cond(Mem0[rbx + 9<64>:byte] & 2<8>)
	C = false
	branch Test(EQ,Z) l000000000041462C
	// succ:  l000000000041460C l000000000041462C
l000000000041460C:
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx + 0xC<64>:word32] = eax
	// succ:  l0000000000414612
l0000000000414612:
	rdx = rbx
	ecx = 0x30<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	eax = Mem0[rbx + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	Mem0[rbx + 0xC<64>:word32] = edx
	branch Test(GT,SZO) l0000000000414612
	// succ:  l000000000041462C l0000000000414612
l000000000041462C:
	SCZO = cond(rdi - rbp)
	r13 = rsp + 0x2E<64>
	branch Test(UGT,CZ) l0000000000414669
	// succ:  l0000000000414636 l0000000000414669
l0000000000414636:
	goto l000000000041489F
	// succ:  l000000000041489F
l0000000000414640:
	eax = CONVERT(Mem0[rbx + 0x20<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(ax & ax)
	C = false
	Mem0[rsp + 0x2E<64>:word16] = ax
	branch Test(EQ,Z) l0000000000414660
	// succ:  l000000000041464E l0000000000414660
l000000000041464E:
	r8 = rbx
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r13
	call fn00000000004132D0 (retsize: 8;)
	// succ:  l0000000000414660
l0000000000414660:
	SCZO = cond(rdi - rbp)
	branch Test(EQ,Z) l000000000041489F
	// succ:  l0000000000414669 l000000000041489F
l0000000000414669:
	rdi = rdi - 1<64>
	SCZO = cond(rdi)
	ecx = CONVERT(Mem0[rdi:byte], byte, int32)
	SCZO = cond(ecx - 0x2E<32>)
	branch Test(EQ,Z) l00000000004148E2
	// succ:  l0000000000414679 l00000000004148E2
l0000000000414679:
	SCZO = cond(ecx - 0x2C<32>)
	branch Test(EQ,Z) l0000000000414640
	// succ:  l000000000041467E l0000000000414640
l000000000041467E:
	rdx = rbx
	call fn0000000000413270 (retsize: 8;)
	goto l0000000000414660
	// succ:  l0000000000414660
l0000000000414690:
	r9d = Mem0[rbx + 0x10<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	si = si - 0x3FFF<16>
	SCZO = cond(si)
	rax = Mem0[rsp + 0x30<64>:word64]
	SCZO = cond(r9d - 0xE<32>)
	branch Test(UGT,CZ) l000000000041494D
	// succ:  l00000000004146A8 l000000000041494D
l00000000004146A8:
	SZO = cond(rax & rax)
	C = false
	branch Test(SG,S) l00000000004146B5
	// succ:  l00000000004146AD l00000000004146B5
l00000000004146AD:
	// succ:  l00000000004146B0
l00000000004146B0:
	rax = rax + rax
	SCZO = cond(rax)
	branch Test(NS,S) l00000000004146B0
	// succ:  l00000000004146B5 l00000000004146B0
l00000000004146B5:
	ecx = 0xE<32>
	rcx = CONVERT(ecx, word32, uint64)
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rax = rax >>u 1<64>
	SCZO = cond(rax)
	ecx = ecx - r9d
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	ecx = ecx << 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	rdx = rdx << cl
	SCZO = cond(rdx)
	rax = rax + rdx
	SCZO = cond(rax)
	branch Test(SG,S) l0000000000414994
	// succ:  l00000000004146D4 l0000000000414994
l00000000004146D4:
	rax = rax + rax
	SCZO = cond(rax)
	// succ:  l00000000004146D7
l00000000004146D7:
	ecx = 0xF<32>
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx - r9d
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	ecx = ecx << 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	rax = rax >>u cl
	SCZO = cond(rax)
	// succ:  l00000000004146E5
l00000000004146E5:
	r8d = Mem0[rbx + 8<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rbp = rsp + 0x40<64>
	rdi = rbp
	r11d = r8d
	r11 = CONVERT(r11d, word32, uint64)
	r10d = r8d
	r10 = CONVERT(r10d, word32, uint64)
	r11d = r11d & 0x800<32>
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	r10d = r10d & 0x20<32>
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	goto l0000000000414733
	// succ:  l0000000000414733
l0000000000414704:
	ecx = Mem0[rbx + 0x10<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(LE,SZO) l0000000000414711
	// succ:  l000000000041470B l0000000000414711
l000000000041470B:
	ecx = ecx - 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	Mem0[rbx + 0x10<64>:word32] = ecx
	// succ:  l0000000000414711
l0000000000414711:
	rax = rax >>u 4<64>
	SCZO = cond(rax)
	r9 = rdi
	// succ:  l0000000000414718
l0000000000414718:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000414784
	// succ:  l000000000041471C l0000000000414784
l000000000041471C:
	SCZO = cond(edx - 9<32>)
	rdi = r9 + 1<64>
	branch Test(LE,SZO) l0000000000414797
	// succ:  l0000000000414725 l0000000000414797
l0000000000414725:
	edx = edx + 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx | r10d
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l000000000041472B
l000000000041472B:
	Mem0[r9:byte] = dl
	// succ:  l000000000041472E
l000000000041472E:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004147A0
	// succ:  l0000000000414733 l00000000004147A0
l0000000000414733:
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xF<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(edx - eax)
	branch Test(NE,Z) l0000000000414704
	// succ:  l000000000041473C l0000000000414704
l000000000041473C:
	SCZO = cond(rdi - rbp)
	branch Test(UGT,CZ) l0000000000414752
	// succ:  l0000000000414741 l0000000000414752
l0000000000414741:
	SZO = cond(r11d & r11d)
	C = false
	branch Test(NE,Z) l0000000000414752
	// succ:  l0000000000414746 l0000000000414752
l0000000000414746:
	r12d = Mem0[rbx + 0x10<64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	r9 = rdi
	SZO = cond(r12d & r12d)
	C = false
	branch Test(LE,SZO) l0000000000414759
	// succ:  l0000000000414752 l0000000000414759
l0000000000414752:
	r9 = rdi + 1<64>
	Mem0[rdi:byte] = 0x2E<8>
	// succ:  l0000000000414759
l0000000000414759:
	SCZO = cond(rax - 1<64>)
	branch Test(ULE,CZ) l0000000000414969
	// succ:  l0000000000414763 l0000000000414969
l0000000000414763:
	ecx = SLICE(rsi - 1<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	// succ:  l0000000000414770
l0000000000414770:
	rax = rax >>u 1<64>
	SCZO = cond(rax)
	esi = ecx
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(rax - 1<64>)
	ecx = SLICE(rsi - 1<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(NE,Z) l0000000000414770
	// succ:  l000000000041477E l0000000000414770
l000000000041477E:
	al = al ^ al
	SZO = cond(al)
	C = false
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000041471C
	// succ:  l0000000000414784 l000000000041471C
l0000000000414784:
	SCZO = cond(r9 - rbp)
	branch Test(UGT,CZ) l0000000000414793
	// succ:  l0000000000414789 l0000000000414793
l0000000000414789:
	ecx = Mem0[rbx + 0x10<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	rdi = r9
	SZO = cond(ecx & ecx)
	C = false
	branch Test(SG,S) l000000000041472E
	// succ:  l0000000000414793 l000000000041472E
l0000000000414793:
	rdi = r9 + 1<64>
	// succ:  l0000000000414797
l0000000000414797:
	edx = edx + 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	goto l000000000041472B
	// succ:  l000000000041472B
l00000000004147A0:
	SCZO = cond(rdi - rbp)
	branch Test(EQ,Z) l00000000004149A3
	// succ:  l00000000004147A9 l00000000004149A3
l00000000004147A9:
	r10d = Mem0[rbx + 0xC<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	r12d = 2<32>
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r10d & r10d)
	C = false
	branch Test(LE,SZO) l00000000004145C0
	// succ:  l00000000004147BC l00000000004145C0
l00000000004147BC:
	edx = Mem0[rbx + 0x10<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = rdi
	r11d = CONVERT(si, word16, int32)
	rax = rax - rbp
	SCZO = cond(rax)
	ecx = SLICE(rdx + rax, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	edx = r8d
	rdx = CONVERT(edx, word32, uint64)
	branch Test(LE,SZO) l00000000004147D4
	// succ:  l00000000004147D1_1 l00000000004147D4
l00000000004147D1_1:
	eax = ecx
	// succ:  l00000000004147D4
l00000000004147D4:
	edx = edx & 0x1C0<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = 0x66666667<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(edx - 1<32>)
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r9d = SLICE(rax + 6<64> + rdx, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	eax = r11d
	rax = CONVERT(eax, word32, uint64)
	edx_eax = ecx *s eax
	SCZO = cond(edx_eax)
	eax = r11d
	rax = CONVERT(eax, word32, uint64)
	eax = eax >> 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx >> 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	ecx = ecx - eax
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	branch Test(EQ,Z) l0000000000414820
	// succ:  l00000000004147FD l0000000000414820
l00000000004147FD:
	r11d = 0x66666667<32>
	r11 = CONVERT(r11d, word32, uint64)
	// succ:  l0000000000414803
l0000000000414803:
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx >> 0x1F<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9d = r9d + 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	edx_eax = r11d *s eax
	SCZO = cond(edx_eax)
	r12d = r12d + 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	edx = edx >> 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx - ecx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(NE,Z) l0000000000414803
	// succ:  l000000000041481C l0000000000414803
l000000000041481C:
	r12d = CONVERT(r12w, word16, int32)
	// succ:  l0000000000414820
l0000000000414820:
	SCZO = cond(r10d - r9d)
	branch Test(LE,SZO) l00000000004148F0
	// succ:  l0000000000414829 l00000000004148F0
l0000000000414829:
	r10d = r10d - r9d
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	SZO = cond(r8d & 0x600<32>)
	C = false
	branch Test(NE,Z) l0000000000414960
	// succ:  l0000000000414839 l0000000000414960
l0000000000414839:
	eax = SLICE(r10 - 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(r10d & r10d)
	C = false
	Mem0[rbx + 0xC<64>:word32] = eax
	branch Test(LE,SZO) l00000000004145C0
	// succ:  l0000000000414849 l00000000004145C0
l0000000000414849:
	// succ:  l0000000000414850
l0000000000414850:
	rdx = rbx
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	eax = Mem0[rbx + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	Mem0[rbx + 0xC<64>:word32] = edx
	branch Test(GT,SZO) l0000000000414850
	// succ:  l000000000041486A l0000000000414850
l000000000041486A:
	r8d = Mem0[rbx + 8<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8b & 0x80<8>)
	C = false
	branch Test(EQ,Z) l00000000004145CA
	// succ:  l0000000000414878 l00000000004145CA
l0000000000414878:
	// succ:  l0000000000414880
l0000000000414880:
	rdx = rbx
	ecx = 0x2D<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	goto l00000000004145E1
	// succ:  l00000000004145E1
l0000000000414892:
	rdx = rbx
	ecx = 0x30<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	// succ:  l000000000041489F
l000000000041489F:
	eax = Mem0[rbx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	Mem0[rbx + 0x10<64>:word32] = edx
	branch Test(GT,SZO) l0000000000414892
	// succ:  l00000000004148AC l0000000000414892
l00000000004148AC:
	ecx = Mem0[rbx + 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	rdx = rbx
	ecx = ecx & 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	ecx = ecx | 0x50<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call fn0000000000413270 (retsize: 8;)
	v36 = Mem0[rbx + 0xC<64>:word32] + r12d
	Mem0[rbx + 0xC<64>:word32] = v36
	SCZO = cond(v36)
	v37 = Mem0[rbx + 8<64>:word32] | 0x1C0<32>
	Mem0[rbx + 8<64>:word32] = v37
	SZO = cond(Mem0[rbx + 8<64>:word32])
	C = false
	rcx = CONVERT(si, word16, int64)
	rdx = rbx
	call fn00000000004135A0 (retsize: 8;)
	// succ:  l00000000004148D5
l00000000004148D5:
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004144C0_exit
l00000000004148E2:
	rcx = rbx
	call fn0000000000413C60 (retsize: 8;)
	goto l0000000000414660
	// succ:  l0000000000414660
l00000000004148F0:
	Mem0[rbx + 0xC<64>:word32] = 0xFFFFFFFF<32>
	goto l00000000004145C0
	// succ:  l00000000004145C0
l0000000000414900:
	rdx = 0x0000000000490B40<p64>
	r8 = rbx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call fn0000000000413500 (retsize: 8;)
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004144C0_exit
l000000000041491F:
	branch Test(SG,S) l00000000004149C1
	// succ:  l0000000000414925 l00000000004149C1
l0000000000414925:
	edx = 0xFFFFC001<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000414930
l0000000000414930:
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	edx = edx - 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rax = rax + rax
	SCZO = cond(rax)
	branch Test(NS,S) l0000000000414930
	// succ:  l000000000041493A l0000000000414930
l000000000041493A:
	r9d = Mem0[rbx + 0x10<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d - 0xE<32>)
	branch Test(ULE,CZ) l00000000004146B5
	// succ:  l0000000000414948 l00000000004146B5
l0000000000414948:
	goto l00000000004146E5
	// succ:  l00000000004146E5
l000000000041494D:
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l00000000004146E5
	// succ:  l0000000000414956 l00000000004146E5
l0000000000414956:
	goto l0000000000414589
	// succ:  l0000000000414589
l0000000000414960:
	Mem0[rbx + 0xC<64>:word32] = r10d
	goto l00000000004145C0
	// succ:  l00000000004145C0
l0000000000414969:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000414718
	// succ:  l0000000000414718
l0000000000414970:
	rdx = rbx
	ecx = 0x2B<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	goto l00000000004145E1
	// succ:  l00000000004145E1
l0000000000414982:
	rdx = rbx
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000413270 (retsize: 8;)
	goto l00000000004145E1
	// succ:  l00000000004145E1
l0000000000414994:
	esi = esi + 1<32>
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	goto l00000000004146D7
	// succ:  l00000000004146D7
l000000000041499C:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004146B0
	// succ:  l00000000004146B0
l00000000004149A3:
	r9d = Mem0[rbx + 0x10<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	goto l0000000000414592
	// succ:  l0000000000414592
l00000000004149AC:
	SZO = cond(r8d & 0x800<32>)
	C = false
	rax = rbp
	branch Test(EQ,Z) l00000000004145A4
	// succ:  l00000000004149BC l00000000004145A4
l00000000004149BC:
	goto l000000000041459B
	// succ:  l000000000041459B
l00000000004149C1:
	esi = 0xFFFFC002<32>
	rsi = CONVERT(esi, word32, uint64)
	goto l000000000041493A
	// succ:  l000000000041493A
fn00000000004144C0_exit:


// fn00000000004149D0
// Return size: 8
define fn00000000004149D0
fn00000000004149D0_entry:
	rsp = fp
	// succ:  l00000000004149D0
l00000000004149D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xB8<64>
	SCZO = cond(rsp)
	r13 = Mem0[rsp + 0x120<64>:word64]
	r15d = ecx
	r15 = CONVERT(r15d, word32, uint64)
	rdi = rdx
	esi = r8d
	rsi = CONVERT(esi, word32, uint64)
	rbx = r9
	r15d = r15d & 0x6000<32>
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	eax = _errno()
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = 0x0000000000490B5D<p64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x80<64>:word64] = rdi
	Mem0[rsp + 0x88<64>:word32] = r15d
	Mem0[rsp + 0x8C<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rsp + 0x90<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rsp + 0x34<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x94<64>:word32] = 0xFFFFFFFD<32>
	Mem0[rsp + 0x98<64>:word16] = ax
	Mem0[rsp + 0x9C<64>:word32] = 0<32>
	Mem0[rsp + 0xA0<64>:word16] = dx
	Mem0[rsp + 0xA4<64>:word32] = 0<32>
	Mem0[rsp + 0xA8<64>:word32] = esi
	rax = getenv(rcx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000414A8C
	// succ:  l0000000000414A7C l0000000000414A8C
l0000000000414A7C:
	edx = CONVERT(Mem0[rax:byte], byte, int32)
	eax = 2<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx - 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(edx - 2<32>)
	branch Test(ULE,CZ) l0000000000414A99
	// succ:  l0000000000414A8C l0000000000414A99
l0000000000414A8C:
	call fn000000000041BFF0 (retsize: 8;)
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = -eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	C = eax == 0<32>
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	// succ:  l0000000000414A99
l0000000000414A99:
	rdi = rsp + 0x70<64>
	Mem0[rsp + 0xAC<64>:word32] = eax
	eax = CONVERT(Mem0[rbx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rsi = rsp + 0x6E<64>
	r12 = rsp + 0x80<64>
	rbp = 0x0000000000490B74<p64>
	Mem0[rsp + 0x28<64>:word64] = rdi
	rdi = rsp + 0x50<64>
	Mem0[rsp + 0x38<64>:word64] = rsi
	Mem0[rsp + 0x20<64>:word64] = rdi
	edi = r15d
	rdi = CONVERT(edi, word32, uint64)
	edi = edi | 0x200<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	Mem0[rsp + 0x48<64>:word32] = edi
	// succ:  l0000000000414AE0
l0000000000414AE0:
	ecx = CONVERT(al, byte, int32)
	rsi = rbx + 1<64>
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0000000000414B6A
	// succ:  l0000000000414AEB l0000000000414B6A
l0000000000414AEB:
	SCZO = cond(ecx - 0x25<32>)
	branch Test(NE,Z) l0000000000414B50
	// succ:  l0000000000414AF0 l0000000000414B50
l0000000000414AF0:
	eax = CONVERT(Mem0[rbx + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	Mem0[rsp + 0x88<64>:word32] = r15d
	Mem0[rsp + 0x90<64>:word32] = 0xFFFFFFFF<32>
	rdi = rsi
	Mem0[rsp + 0x8C<64>:word32] = 0xFFFFFFFF<32>
	r11 = r12 + 0xC<64>
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000414CBB
	// succ:  l0000000000414B28 l0000000000414CBB
l0000000000414B28:
	edx = SLICE(rax - 0x20<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rbx = rdi + 1<64>
	ecx = CONVERT(al, byte, int32)
	SCZO = cond(dl - 0x5A<8>)
	branch Test(UGT,CZ) l0000000000415120
	// succ:  l0000000000414B3B l0000000000415120
l0000000000414B3B:
	edx = CONVERT(dl, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rdx = CONVERT(Mem0[rbp + 0<64> + rdx * 4<64>:word32], word32, int64)
	rdx = rdx + rbp
	SCZO = cond(rdx)
	call rdx (retsize: 0;)
	return
	// succ:  fn00000000004149D0_exit
l0000000000414B50:
	rdx = r12
	call fn0000000000413270 (retsize: 8;)
	eax = CONVERT(Mem0[rbx + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rbx = rsi
	rsi = rbx + 1<64>
	ecx = CONVERT(al, byte, int32)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l0000000000414AEB
	// succ:  l0000000000414B6A l0000000000414AEB
l0000000000414B6A:
	eax = Mem0[rsp + 0xA4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0xB8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004149D0_exit
l0000000000414BC0:
	eax = CONVERT(Mem0[rbx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000414AE0
	// succ:  l0000000000414AE0
l0000000000414CB0:
	SZO = cond(al & al)
	C = false
	rdi = rbx
	branch Test(NE,Z) l0000000000414B28
	// succ:  l0000000000414CBB l0000000000414B28
l0000000000414CBB:
	rbx = rdi
	goto l0000000000414AE0
	// succ:  l0000000000414AE0
l00000000004150C9:
	eax = CONVERT(Mem0[rdi + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000414CB0
	// succ:  l0000000000414CB0
l0000000000415120:
	eax = eax - 0x30<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 9<8>)
	branch Test(UGT,CZ) l0000000000415336
	// succ:  l000000000041512B l0000000000415336
l000000000041512B:
	SCZO = cond(r14d - 3<32>)
	branch Test(UGT,CZ) l0000000000415336
	// succ:  l0000000000415135 l0000000000415336
l0000000000415135:
	SZO = cond(r14d & r14d)
	C = false
	branch Test(NE,Z) l00000000004151AA
	// succ:  l000000000041513A l00000000004151AA
l000000000041513A:
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	// succ:  l0000000000415140
l0000000000415140:
	SZO = cond(r11 & r11)
	C = false
	branch Test(EQ,Z) l00000000004150C9
	// succ:  l0000000000415145 l00000000004150C9
l0000000000415145:
	eax = Mem0[r11:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l00000000004152AD
	// succ:  l0000000000415150 l00000000004152AD
l0000000000415150:
	eax = SLICE(rax + rax * 4<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	eax = SLICE(rcx - 0x30<64> + rax * 2<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r11:word32] = eax
	eax = CONVERT(Mem0[rdi + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000414CB0
	// succ:  l0000000000414CB0
l00000000004151AA:
	SCZO = cond(r14d - 2<32>)
	eax = 3<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l00000000004151B7
	// succ:  l00000000004151B3_1 l00000000004151B7
l00000000004151B3_1:
	r14d = eax
	// succ:  l00000000004151B7
l00000000004151B7:
	goto l0000000000415140
	// succ:  l0000000000415140
l00000000004152AD:
	ecx = ecx - 0x30<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	eax = CONVERT(Mem0[rdi + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r11:word32] = ecx
	goto l0000000000414CB0
	// succ:  l0000000000414CB0
l0000000000415336:
	rdx = r12
	ecx = 0x25<32>
	rcx = CONVERT(ecx, word32, uint64)
	rbx = rsi
	call fn0000000000413270 (retsize: 8;)
	goto l0000000000414BC0
	// succ:  l0000000000414BC0
fn00000000004149D0_exit:


// fn0000000000415400
// Return size: 8
define fn0000000000415400
fn0000000000415400_entry:
	rsp = fp
	// succ:  l0000000000415400
l0000000000415400:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = CONVERT(Mem0[rcx + 0x14<64>:word32], word32, int64)
	rdx = rcx + 0x18<64>
	rbx = rcx
	r9 = rdx + rax * 4<64>
	rcx = rax
	goto l0000000000415430
	// succ:  l0000000000415430
l0000000000415420:
	rdx = rdx + 4<64>
	SCZO = cond(rdx)
	Mem0[rdx - 4<64>:word32] = 0<32>
	SCZO = cond(r9 - rdx)
	branch Test(ULE,CZ) l0000000000415450
	// succ:  l0000000000415430 l0000000000415450
l0000000000415430:
	r8d = Mem0[rdx:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000415420
	// succ:  l0000000000415439 l0000000000415420
l0000000000415439:
	r8d = r8d + 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	rax = rbx
	Mem0[rdx:word32] = r8d
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000415400_exit
l0000000000415450:
	SCZO = cond(ecx - Mem0[rbx + 0xC<64>:word32])
	branch Test(GE,SO) l0000000000415470
	// succ:  l0000000000415455 l0000000000415470
l0000000000415455:
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	Mem0[rbx + 0x14<64>:word32] = ecx
	Mem0[rbx + 0x18<64> + rax * 4<64>:word32] = 1<32>
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000415400_exit
l0000000000415470:
	eax = Mem0[rbx + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = SLICE(rax + 1<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000419F80 (retsize: 8;)
	rsi = rax
	rcx = rax + 0x10<64>
	rax = CONVERT(Mem0[rbx + 0x14<64>:word32], word32, int64)
	rdx = rbx + 0x10<64>
	r8 = CONVERT(8<32> + rax * 4<64>, word32, word64)
	rax = memcpy(rcx, rdx, r8)
	rcx = rbx
	rbx = rsi
	call fn000000000041A090 (retsize: 8;)
	rax = CONVERT(Mem0[rsi + 0x14<64>:word32], word32, int64)
	rcx = rax
	goto l0000000000415455
	// succ:  l0000000000415455
fn0000000000415400_exit:


// fn00000000004154B0
// Return size: 8
define fn00000000004154B0
fn00000000004154B0_entry:
	rsp = fp
	// succ:  l00000000004154B0
l00000000004154B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rdi = rdx
	r12 = r8
	rdx = rsp + 0x3C<64>
	r8 = rsp + 0x38<64>
	xmm0 = SEQ(0<64>, Mem0[rcx:real64])
	r13 = r9
	call fn000000000041A860 (retsize: 8;)
	r10d = Mem0[rsp + 0x38<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	esi = Mem0[rdi:word32]
	rsi = CONVERT(esi, word32, uint64)
	rbx = rax
	edx = Mem0[rsp + 0x3C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r10d = r10d - esi
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	edx = edx + r10d
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SZO = cond(r10d & r10d)
	C = false
	Mem0[rsp + 0x38<64>:word32] = r10d
	Mem0[rsp + 0x3C<64>:word32] = edx
	branch Test(LE,SZO) l00000000004156C0
	// succ:  l0000000000415502 l00000000004156C0
l0000000000415502:
	SCZO = cond(esi - 0x35<32>)
	branch Test(EQ,Z) l00000000004156F0
	// succ:  l000000000041550B l00000000004156F0
l000000000041550B:
	SCZO = cond(Mem0[rsp + 0xB8<64>:word32] - 1<32>)
	branch Test(EQ,Z) l00000000004155C4
	// succ:  l0000000000415519 l00000000004155C4
l0000000000415519:
	SCZO = cond(Mem0[rsp + 0xB8<64>:word32] - 2<32>)
	branch Test(EQ,Z) l0000000000415550
	// succ:  l0000000000415523 l0000000000415550
l0000000000415523:
	eax = r10d
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	branch Test(NE,Z) l00000000004157C0
	// succ:  l000000000041552F l00000000004157C0
l000000000041552F:
	ecx = Mem0[rsp + 0xB0<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0000000000415647
	// succ:  l0000000000415541 l0000000000415647
l0000000000415541:
	SZO = cond(Mem0[rbx + 0x18<64>:byte] & 2<8>)
	C = false
	branch Test(EQ,Z) l000000000041570E
	// succ:  l000000000041554B l000000000041570E
l000000000041554B:
	// succ:  l0000000000415550
l0000000000415550:
	edx = r10d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000041AC20 (retsize: 8;)
	edx = Mem0[rsp + 0x38<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	call fn000000000041ACB0 (retsize: 8;)
	rcx = rbx
	call fn0000000000415400 (retsize: 8;)
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	rbx = rax
	edx = edx & 0x1F<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	branch Test(NE,Z) l00000000004157B0
	// succ:  l0000000000415580 l00000000004157B0
l0000000000415580:
	eax = Mem0[rbx + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rax = CONVERT(eax, int32, int64)
	Z = Mem0[rbx + 0x18<64> + rax * 4<64>:word32] == 0<32>
	eax = __bsr(Mem0[rbx + 0x18<64> + rax * 4<64>:word32])
	eax = eax ^ 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(edx - eax)
	branch Test(EQ,Z) l0000000000415840
	// succ:  l0000000000415598 l0000000000415840
l0000000000415598:
	SZO = cond(r14d & r14d)
	C = false
	branch Test(NE,Z) l00000000004155A5
	// succ:  l000000000041559D l00000000004155A5
l000000000041559D:
	r14d = Mem0[rbx + 0x18<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	r14d = r14d & 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	// succ:  l00000000004155A5
l00000000004155A5:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	ebp = 0x20<32>
	rbp = CONVERT(ebp, word32, uint64)
	call fn000000000041ACB0 (retsize: 8;)
	eax = Mem0[rsp + 0x3C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsp + 0x3C<64>:word32] = edx
	goto l00000000004155EF
	// succ:  l00000000004155EF
l00000000004155C4:
	edx = r10d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	call fn000000000041AC20 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(NE,Z) l0000000000415663
	// succ:  l00000000004155DA l0000000000415663
l00000000004155DA:
	edx = Mem0[rsp + 0x38<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	call fn000000000041ACB0 (retsize: 8;)
	// succ:  l00000000004155EB
l00000000004155EB:
	edx = Mem0[rsp + 0x3C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l00000000004155EF
l00000000004155EF:
	eax = Mem0[rdi + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - edx)
	branch Test(LE,SZO) l0000000000415680
	// succ:  l00000000004155FA l0000000000415680
l00000000004155FA:
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x3C<64>:word32] = eax
	r8d = r8d - edx
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	SCZO = cond(esi - r8d)
	branch Test(GE,SO) l0000000000415740
	// succ:  l000000000041560D l0000000000415740
l000000000041560D:
	rdi = Mem0[rsp + 0xC0<64>:word64]
	Mem0[rbx + 0x14<64>:word32] = 0<32>
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	Mem0[rdi:word32] = 0x50<32>
	// succ:  l0000000000415626
l0000000000415626:
	Mem0[r12:word32] = edx
	r8 = rbx
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	rcx = r13
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	call fn000000000041ABB0 (retsize: 8;)
	rax = Mem0[rsp + 0xC0<64>:word64]
	v33 = Mem0[rax:word32] | ebp
	Mem0[rax:word32] = v33
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l0000000000415647
l0000000000415647:
	rcx = rbx
	call fn000000000041A090 (retsize: 8;)
	eax = r15d
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004154B0_exit
l0000000000415663:
	edx = Mem0[rsp + 0x38<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	ebp = 0x10<32>
	rbp = CONVERT(ebp, word32, uint64)
	call fn000000000041ACB0 (retsize: 8;)
	goto l00000000004155EB
	// succ:  l00000000004155EB
l0000000000415680:
	eax = Mem0[rdi + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - edx)
	branch Test(GE,SO) l0000000000415626
	// succ:  l0000000000415687 l0000000000415626
l0000000000415687:
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	Mem0[rsp + 0x3C<64>:word32] = eax
	rax = Mem0[rsp + 0xC0<64>:word64]
	Mem0[rax:word32] = 0xA3<32>
	eax = _errno()
	Mem0[rax:word32] = 0x22<32>
	Mem0[rbx + 0x14<64>:word32] = 0<32>
	edx = Mem0[rsp + 0x3C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000415626
	// succ:  l0000000000415626
l00000000004156C0:
	r9d = Mem0[rsp + 0xB0<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(r9d & r9d)
	C = false
	branch Test(EQ,Z) l0000000000415647
	// succ:  l00000000004156D4 l0000000000415647
l00000000004156D4:
	SZO = cond(r10d & r10d)
	C = false
	branch Test(NE,Z) l0000000000415820
	// succ:  l00000000004156DD l0000000000415820
l00000000004156DD:
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	goto l00000000004155EF
	// succ:  l00000000004155EF
l00000000004156F0:
	r8d = Mem0[rsp + 0xB0<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(r8d & r8d)
	C = false
	branch Test(EQ,Z) l0000000000415647
	// succ:  l0000000000415704 l0000000000415647
l0000000000415704:
	SCZO = cond(Mem0[rdi + 0xC<64>:word32] - 1<32>)
	branch Test(NE,Z) l0000000000415647
	// succ:  l000000000041570E l0000000000415647
l000000000041570E:
	edx = r10d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000041AC20 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(EQ,Z) l00000000004155DA
	// succ:  l0000000000415724 l00000000004155DA
l0000000000415724:
	edx = Mem0[rsp + 0x38<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	ebp = 0x10<32>
	rbp = CONVERT(ebp, word32, uint64)
	call fn000000000041ACB0 (retsize: 8;)
	edx = Mem0[rsp + 0x3C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	goto l00000000004155EF
	// succ:  l00000000004155EF
l0000000000415740:
	edx = Mem0[rdi + 0x10<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000041560D
	// succ:  l000000000041574B l000000000041560D
l000000000041574B:
	edi = SLICE(r8 - 1<64>, word32, 0)
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(r14d & r14d)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	SZO = cond(edi & edi)
	C = false
	branch Test(LE,SZO) l00000000004157FC
	// succ:  l000000000041575D l00000000004157FC
l000000000041575D:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004157E0
	// succ:  l0000000000415761 l00000000004157E0
l0000000000415761:
	ecx = edi
	rcx = CONVERT(ecx, word32, uint64)
	edi = edi >> 5<32>
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rdi = CONVERT(edi, word32, int64)
	eax = eax << cl
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = r8d
	rdx = CONVERT(edx, word32, uint64)
	eax = eax & Mem0[(rbx + 0x18<64>) + rdi * 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rcx = rbx
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call fn000000000041ACB0 (retsize: 8;)
	rax = Mem0[rsp + 0xC0<64>:word64]
	SZO = cond(edi & edi)
	C = false
	Mem0[rax:word32] = 2<32>
	branch Test(NE,Z) l0000000000415850
	// succ:  l0000000000415797 l0000000000415850
l0000000000415797:
	SZO = cond(r14d & r14d)
	C = false
	edx = Mem0[rsp + 0x3C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	branch Test(EQ,Z) l0000000000415626
	// succ:  l00000000004157A4 l0000000000415626
l00000000004157A4:
	ebp = 0x50<32>
	rbp = CONVERT(ebp, word32, uint64)
	goto l0000000000415626
	// succ:  l0000000000415626
l00000000004157B0:
	eax = 0x20<32>
	rax = CONVERT(eax, word32, uint64)
	eax = eax - edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000415580
	// succ:  l0000000000415580
l00000000004157C0:
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx >> 5<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rdx = CONVERT(edx, word32, int64)
	edx = Mem0[rbx + 0x18<64> + rdx * 4<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	C = __bt(edx, eax)
	branch Test(ULT,C) l0000000000415550
	// succ:  l00000000004157D5 l0000000000415550
l00000000004157D5:
	goto l000000000041570E
	// succ:  l000000000041570E
l00000000004157E0:
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rsp + 0x2C<64>:word32] = r8d
	call fn000000000041AC20 (retsize: 8;)
	r8d = Mem0[rsp + 0x2C<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	al = CONVERT(Test(EQ,Z), bool, int8)
	// succ:  l00000000004157FC
l00000000004157FC:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000415761
	// succ:  l0000000000415804 l0000000000415761
l0000000000415804:
	eax = Mem0[rsp + 0xB0<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000415647
	// succ:  l0000000000415816 l0000000000415647
l0000000000415816:
	goto l0000000000415761
	// succ:  l0000000000415761
l0000000000415820:
	edx = r10d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = -edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	C = edx == 0<32>
	call fn000000000041A490 (retsize: 8;)
	edx = Mem0[rsp + 0x3C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rbx = rax
	goto l00000000004156DD
	// succ:  l00000000004156DD
l0000000000415840:
	edx = Mem0[rsp + 0x3C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	ebp = 0x20<32>
	rbp = CONVERT(ebp, word32, uint64)
	goto l00000000004155EF
	// succ:  l00000000004155EF
l0000000000415850:
	rcx = rbx
	ebp = 0x60<32>
	rbp = CONVERT(ebp, word32, uint64)
	call fn0000000000415400 (retsize: 8;)
	edx = Mem0[rsp + 0x3C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rbx = rax
	goto l0000000000415626
	// succ:  l0000000000415626
fn00000000004154B0_exit:


// fn0000000000415870
// Return size: 8
define fn0000000000415870
fn0000000000415870_entry:
	rsp = fp
	// succ:  l0000000000415870
l0000000000415870:
	rdx = CONVERT(Mem0[rcx + 0x14<64>:word32], word32, int64)
	rax = rcx + 0x18<64>
	rcx = rax + rdx * 4<64>
	goto l0000000000415890
	// succ:  l0000000000415890
l0000000000415880:
	rax = rax + 4<64>
	SCZO = cond(rax)
	Mem0[rax - 4<64>:word32] = 0xFFFFFFFF<32>
	SCZO = cond(rcx - rax)
	branch Test(ULE,CZ) l00000000004158A0
	// succ:  l0000000000415890 l00000000004158A0
l0000000000415890:
	edx = Mem0[rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000415880
	// succ:  l0000000000415896 l0000000000415880
l0000000000415896:
	edx = edx - 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	Mem0[rax:word32] = edx
	return
	// succ:  fn0000000000415870_exit
l00000000004158A0:
	return
	// succ:  fn0000000000415870_exit
fn0000000000415870_exit:


// fn00000000004158B0
// Return size: 8
define fn00000000004158B0
fn00000000004158B0_entry:
	rsp = fp
	// succ:  l00000000004158B0
l00000000004158B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	ebx = SLICE(rdx + 0x1F<64>, word32, 0)
	rbx = CONVERT(ebx, word32, uint64)
	rax = rcx
	ebx = ebx >> 5<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SCZO = cond(ebx - Mem0[rcx + 8<64>:word32])
	branch Test(GT,SZO) l0000000000415940
	// succ:  l00000000004158C3 l0000000000415940
l00000000004158C3:
	r9d = edx
	r9 = CONVERT(r9d, word32, uint64)
	r9d = r9d >> 5<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	edx = edx & 0x1F<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l0000000000415920
	// succ:  l00000000004158CF l0000000000415920
l00000000004158CF:
	r9d = r9d + 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	r8 = rax + 0x18<64>
	Mem0[rax + 0x14<64>:word32] = r9d
	r9 = CONVERT(r9d, word32, int64)
	r9 = r8 + r9 * 4<64>
	SCZO = cond(r8 - r9)
	branch Test(UGE,C) l0000000000415905
	// succ:  l00000000004158E7 l0000000000415905
l00000000004158E7:
	// succ:  l00000000004158F0
l00000000004158F0:
	r8 = r8 + 4<64>
	SCZO = cond(r8)
	Mem0[r8 - 4<64>:word32] = 0xFFFFFFFF<32>
	SCZO = cond(r8 - r9)
	branch Test(ULT,C) l00000000004158F0
	// succ:  l0000000000415901 l00000000004158F0
l0000000000415901:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000415910
	// succ:  l0000000000415905 l0000000000415910
l0000000000415905:
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx - edx
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	v18 = Mem0[r8 - 4<64>:word32] >>u cl
	Mem0[r8 - 4<64>:word32] = v18
	SCZO = cond(v18)
	// succ:  l0000000000415910
l0000000000415910:
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004158B0_exit
l0000000000415920:
	r8 = rax + 0x18<64>
	Mem0[rax + 0x14<64>:word32] = r9d
	r9 = CONVERT(r9d, word32, int64)
	r9 = r8 + r9 * 4<64>
	SCZO = cond(r8 - r9)
	branch Test(ULT,C) l00000000004158F0
	// succ:  l0000000000415934 l00000000004158F0
l0000000000415934:
	goto l0000000000415910
	// succ:  l0000000000415910
l0000000000415940:
	Mem0[rsp + 0x2C<64>:word32] = edx
	call fn000000000041A090 (retsize: 8;)
	ecx = ebx
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000419F80 (retsize: 8;)
	edx = Mem0[rsp + 0x2C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	goto l00000000004158C3
	// succ:  l00000000004158C3
fn00000000004158B0_exit:


// fn0000000000415960
// Return size: 8
define fn0000000000415960
fn0000000000415960_entry:
	rsp = fp
	// succ:  l0000000000415960
l0000000000415960:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x138<64>
	SCZO = cond(rsp)
	Mem0[rsp + 0xD0<64>:word128] = xmm6
	Mem0[rsp + 0xE0<64>:word128] = xmm7
	Mem0[rsp + 0xF0<64>:word128] = xmm8
	Mem0[rsp + 0x100<64>:word128] = xmm9
	Mem0[rsp + 0x110<64>:word128] = xmm10
	Mem0[rsp + 0x120<64>:word128] = xmm11
	rdi = rcx
	Mem0[rsp + 0x190<64>:word64] = r8
	Mem0[rsp + 0x188<64>:word64] = rdx
	Mem0[rsp + 0x198<64>:word64] = r9
	call msvcrt.dll!localeconv (retsize: 8;)
	rbp = Mem0[rax:word64]
	rcx = rbp
	eax = strlen(rcx)
	r14 = rax
	rax = Mem0[rsp + 0x190<64>:word64]
	Mem0[rsp + 0xA4<64>:word32] = 0<32>
	Mem0[rsp + 0xB0<64>:word64] = 0<64>
	Mem0[rsp + 0xC8<64>:word64] = 0<64>
	rcx = 0x0000000000490D0C<p64>
	Mem0[rsp + 0xC0<64>:word64] = rdi
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x40<64>:word32] = eax
	rax = rdi
	r8d = CONVERT(Mem0[rax:byte], byte, word32)
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8b - 0x2D<8>)
	branch Test(UGT,CZ) l0000000000415BD0
	// succ:  l0000000000415A26 l0000000000415BD0
l0000000000415A26:
	edx = CONVERT(r8b, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rdx = CONVERT(Mem0[rcx + rdx * 4<64>:word32], word32, int64)
	rdx = rdx + rcx
	SCZO = cond(rdx)
	call rdx (retsize: 0;)
	return
	// succ:  fn0000000000415960_exit
l0000000000415A51:
	SCZO = cond(Mem0[rsp + 0x188<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000415A6F
	// succ:  l0000000000415A5C l0000000000415A6F
l0000000000415A5C:
	rax = Mem0[rsp + 0xC0<64>:word64]
	rsi = Mem0[rsp + 0x188<64>:word64]
	Mem0[rsi:word64] = rax
	// succ:  l0000000000415A6F
l0000000000415A6F:
	eax = Mem0[rsp + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000415AF0
	// succ:  l0000000000415A77 l0000000000415AF0
l0000000000415A77:
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l0000000000415A9A
	// succ:  l0000000000415A7C l0000000000415A9A
l0000000000415A7C:
	rcx = Mem0[rsp + 0x1A0<64>:word64]
	edx = Mem0[rsp + 0x40<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041ABB0 (retsize: 8;)
	rcx = Mem0[rsp + 0xC8<64>:word64]
	call fn000000000041A090 (retsize: 8;)
	// succ:  l0000000000415A9A
l0000000000415A9A:
	eax = Mem0[rsp + 0xA4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	xmm6 = Mem0[rsp + 0xD0<64>:word128]
	xmm7 = Mem0[rsp + 0xE0<64>:word128]
	xmm8 = Mem0[rsp + 0xF0<64>:word128]
	xmm9 = Mem0[rsp + 0x100<64>:word128]
	xmm10 = Mem0[rsp + 0x110<64>:word128]
	xmm11 = Mem0[rsp + 0x120<64>:word128]
	rsp = rsp + 0x138<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000415960_exit
l0000000000415AF0:
	v44 = Mem0[rsp + 0xA4<64>:word32] | 8<32>
	Mem0[rsp + 0xA4<64>:word32] = v44
	SZO = cond(Mem0[rsp + 0xA4<64>:word32])
	C = false
	goto l0000000000415A77
	// succ:  l0000000000415A77
l0000000000415B35:
	rax = Mem0[rsp + 0x190<64>:word64]
	eax = Mem0[rax + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x84<64>:word32] = eax
	eax = CONVERT(r8b, byte, int32)
	edx = SLICE(rax - 0x30<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - 9<32>)
	branch Test(UGT,CZ) l0000000000415C43
	// succ:  l0000000000415B57 l0000000000415C43
l0000000000415B57:
	rcx = r15 + 1<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l0000000000415B95
	// succ:  l0000000000415B95
l0000000000415B63:
	eax = SLICE(rsi + rsi * 4<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	r8d = CONVERT(r8b, byte, int32)
	esi = SLICE(r8 - 0x30<64> + rax * 2<64>, word32, 0)
	rsi = CONVERT(esi, word32, uint64)
	// succ:  l0000000000415B6F
l0000000000415B6F:
	Mem0[rsp + 0xC0<64>:word64] = rcx
	eax = CONVERT(Mem0[rcx:byte], byte, int32)
	ebx = ebx + 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	r9 = rcx
	rcx = rcx + 1<64>
	r10d = SLICE(rax - 0x30<64>, word32, 0)
	r10 = CONVERT(r10d, word32, uint64)
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r10d - 9<32>)
	branch Test(UGT,CZ) l0000000000415C50
	// succ:  l0000000000415B95 l0000000000415C50
l0000000000415B95:
	SCZO = cond(ebx - 8<32>)
	branch Test(LE,SZO) l0000000000415B63
	// succ:  l0000000000415B9A l0000000000415B63
l0000000000415B9A:
	SCZO = cond(ebx - 0xF<32>)
	branch Test(GT,SZO) l0000000000415B6F
	// succ:  l0000000000415B9F l0000000000415B6F
l0000000000415B9F:
	eax = SLICE(rdx + rdx * 4<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	r8d = CONVERT(r8b, byte, int32)
	edx = SLICE(r8 - 0x30<64> + rax * 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000415B6F
	// succ:  l0000000000415B6F
l0000000000415BD0:
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	SCZO = cond(r8b - 0x30<8>)
	Mem0[rsp + 0x58<64>:word32] = 0<32>
	r15 = rax
	branch Test(NE,Z) l0000000000415B35
	// succ:  l0000000000415BE8 l0000000000415B35
l0000000000415BE8:
	edx = CONVERT(Mem0[rax + 1<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x58<8>)
	branch Test(EQ,Z) l0000000000416DBF
	// succ:  l0000000000415BF5 l0000000000416DBF
l0000000000415BF5:
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(dl - 0x78<8>)
	branch Test(EQ,Z) l0000000000416DBF
	// succ:  l0000000000415C02 l0000000000416DBF
l0000000000415C02:
	r15 = rax
	Mem0[rsp + 0xC0<64>:word64] = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	edx = CONVERT(Mem0[rax - 1<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x30<8>)
	branch Test(EQ,Z) l0000000000415C02
	// succ:  l0000000000415C1A l0000000000415C02
l0000000000415C1A:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l0000000000415A51
	// succ:  l0000000000415C25 l0000000000415A51
l0000000000415C25:
	r8d = edx
	r8 = CONVERT(r8d, word32, uint64)
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	goto l0000000000415B35
	// succ:  l0000000000415B35
l0000000000415C43:
	r9 = r15
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	// succ:  l0000000000415C50
l0000000000415C50:
	ecx = CONVERT(Mem0[rbp + 0<64>:byte], byte, int32)
	SCZO = cond(ecx - eax)
	branch Test(EQ,Z) l0000000000416054
	// succ:  l0000000000415C5C l0000000000416054
l0000000000415C5C:
	ebp = ebx
	rbp = CONVERT(ebp, word32, uint64)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	// succ:  l0000000000415C66
l0000000000415C66:
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d & 0xFFFFFFDF<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(r8d - 0x45<32>)
	branch Test(EQ,Z) l0000000000415D70
	// succ:  l0000000000415C77 l0000000000415D70
l0000000000415C77:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	// succ:  l0000000000415C7A
l0000000000415C7A:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(NE,Z) l0000000000415EE5
	// succ:  l0000000000415C82 l0000000000415EE5
l0000000000415C82:
	ecx = ecx | r12d
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	branch Test(NE,Z) l0000000000415ED8
	// succ:  l0000000000415C8B l0000000000415ED8
l0000000000415C8B:
	SZO = cond(r11d & r11d)
	C = false
	branch Test(NE,Z) l0000000000415EA3
	// succ:  l0000000000415C94 l0000000000415EA3
l0000000000415C94:
	SCZO = cond(eax - 0x4E<32>)
	branch Test(EQ,Z) l0000000000415CB1
	// succ:  l0000000000415C99 l0000000000415CB1
l0000000000415C99:
	branch Test(LE,SZO) l0000000000415E9A
	// succ:  l0000000000415C9F l0000000000415E9A
l0000000000415C9F:
	SCZO = cond(eax - 0x69<32>)
	branch Test(EQ,Z) l000000000041702F
	// succ:  l0000000000415CA8 l000000000041702F
l0000000000415CA8:
	SCZO = cond(eax - 0x6E<32>)
	branch Test(NE,Z) l0000000000415EA3
	// succ:  l0000000000415CB1 l0000000000415EA3
l0000000000415CB1:
	rbx = rsp + 0xC0<64>
	rdx = 0x0000000000490D09<p64>
	rcx = rbx
	call fn000000000041AB60 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000415EA3
	// succ:  l0000000000415CD0 l0000000000415EA3
l0000000000415CD0:
	rax = Mem0[rsp + 0x190<64>:word64]
	rsi = Mem0[rsp + 0x198<64>:word64]
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	rdx = Mem0[rsp + 0xC0<64>:word64]
	Mem0[rsp + 0xA4<64>:word32] = 4<32>
	eax = Mem0[rax + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x44<64>:word32] = eax
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rsi:word32] = eax
	SCZO = cond(Mem0[rdx:byte] - 0x28<8>)
	branch Test(EQ,Z) l0000000000417412
	// succ:  l0000000000415D0A l0000000000417412
l0000000000415D0A:
	// succ:  l0000000000415D10
l0000000000415D10:
	rsi = Mem0[rsp + 0x198<64>:word64]
	Mem0[rsi:word32] = eax
	// succ:  l0000000000415D1A
l0000000000415D1A:
	r8 = Mem0[rsp + 0xC8<64>:word64]
	// succ:  l0000000000415D22
l0000000000415D22:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l0000000000415A51
	// succ:  l0000000000415D2A l0000000000415A51
l0000000000415D2A:
	r9d = Mem0[rsp + 0x84<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NE,Z) l0000000000416464
	// succ:  l0000000000415D3B l0000000000416464
l0000000000415D3B:
	eax = Mem0[rsp + 0xA4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = Mem0[r8 + 0x14<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = eax & 0xFFFFFFF8<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(ecx & ecx)
	C = false
	dl = CONVERT(Test(GT,SZO), bool, int8)
	edx = edx + edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = eax | edx
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(al & 0x30<8>)
	C = false
	branch Test(NE,Z) l0000000000415EC3
	// succ:  l0000000000415D5C l0000000000415EC3
l0000000000415D5C:
	Mem0[rsp + 0xA4<64>:word32] = eax
	goto l0000000000415A51
	// succ:  l0000000000415A51
l0000000000415D70:
	eax = ebp
	rax = CONVERT(eax, word32, uint64)
	eax = eax | ecx
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax | r12d
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000415EA3
	// succ:  l0000000000415D7D l0000000000415EA3
l0000000000415D7D:
	rdi = Mem0[rsp + 0xC0<64>:word64]
	rax = rdi + 1<64>
	Mem0[rsp + 0xC0<64>:word64] = rax
	eax = CONVERT(Mem0[rdi + 1<64>:byte], byte, int32)
	SCZO = cond(al - 0x2B<8>)
	branch Test(EQ,Z) l0000000000416F57
	// succ:  l0000000000415D9D l0000000000416F57
l0000000000415D9D:
	SCZO = cond(al - 0x2D<8>)
	branch Test(EQ,Z) l0000000000416361
	// succ:  l0000000000415DA5 l0000000000416361
l0000000000415DA5:
	Mem0[rsp + 0x44<64>:word32] = 0<32>
	// succ:  l0000000000415DAD
l0000000000415DAD:
	r8d = SLICE(rax - 0x30<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d - 9<32>)
	branch Test(UGT,CZ) l0000000000416490
	// succ:  l0000000000415DBB l0000000000416490
l0000000000415DBB:
	SCZO = cond(eax - 0x30<32>)
	branch Test(NE,Z) l0000000000415DE5
	// succ:  l0000000000415DC0 l0000000000415DE5
l0000000000415DC0:
	rax = Mem0[rsp + 0xC0<64>:word64]
	r8 = rax + 1<64>
	// succ:  l0000000000415DD0
l0000000000415DD0:
	Mem0[rsp + 0xC0<64>:word64] = r8
	eax = CONVERT(Mem0[r8:byte], byte, int32)
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	SCZO = cond(eax - 0x30<32>)
	branch Test(EQ,Z) l0000000000415DD0
	// succ:  l0000000000415DE5 l0000000000415DD0
l0000000000415DE5:
	r9d = SLICE(rax - 0x31<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(r9d - 8<32>)
	branch Test(UGT,CZ) l0000000000415C7A
	// succ:  l0000000000415DF6 l0000000000415C7A
l0000000000415DF6:
	r9d = SLICE(rax - 0x30<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	rax = Mem0[rsp + 0xC0<64>:word64]
	r10 = rax + 1<64>
	Mem0[rsp + 0x50<64>:word64] = rax
	Mem0[rsp + 0xC0<64>:word64] = r10
	Mem0[rsp + 0x48<64>:word64] = r10
	r10 = rax
	eax = CONVERT(Mem0[rax + 1<64>:byte], byte, int32)
	r8d = SLICE(rax - 0x30<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d - 9<32>)
	branch Test(UGT,CZ) l0000000000415E63
	// succ:  l0000000000415E29 l0000000000415E63
l0000000000415E29:
	r8 = r10 + 2<64>
	Mem0[rsp + 0x5C<64>:word32] = r11d
	// succ:  l0000000000415E32
l0000000000415E32:
	r9d = SLICE(r9 + r9 * 4<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0xC0<64>:word64] = r8
	r11 = r8
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	r9d = SLICE(rax - 0x30<64> + r9 * 2<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	eax = CONVERT(Mem0[r8 - 1<64>:byte], byte, int32)
	r10d = SLICE(rax - 0x30<64>, word32, 0)
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d - 9<32>)
	branch Test(ULE,CZ) l0000000000415E32
	// succ:  l0000000000415E59 l0000000000415E32
l0000000000415E59:
	Mem0[rsp + 0x48<64>:word64] = r11
	r11d = Mem0[rsp + 0x5C<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	// succ:  l0000000000415E63
l0000000000415E63:
	r8 = Mem0[rsp + 0x48<64>:word64]
	r8 = r8 - Mem0[rsp + 0x50<64>:word64]
	SCZO = cond(r8)
	SCZO = cond(r8 - 8<64>)
	branch Test(GT,SZO) l0000000000417093
	// succ:  l0000000000415E77 l0000000000417093
l0000000000415E77:
	SCZO = cond(r9d - 0x4E1F<32>)
	branch Test(GT,SZO) l0000000000417093
	// succ:  l0000000000415E84 l0000000000417093
l0000000000415E84:
	r10d = Mem0[rsp + 0x44<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	r8d = r10d
	r8 = CONVERT(r8d, word32, uint64)
	r8d = -r8d
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	C = r8d == 0<32>
	r8d = r8d ^ r9d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	r8d = r8d + r10d
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	goto l0000000000415C7A
	// succ:  l0000000000415C7A
l0000000000415E9A:
	SCZO = cond(eax - 0x49<32>)
	branch Test(EQ,Z) l000000000041702F
	// succ:  l0000000000415EA3 l000000000041702F
l0000000000415EA3:
	Mem0[rsp + 0xA4<64>:word32] = 6<32>
	Mem0[rsp + 0xC0<64>:word64] = rdi
	r8 = Mem0[rsp + 0xC8<64>:word64]
	goto l0000000000415A51
	// succ:  l0000000000415A51
l0000000000415EC3:
	eax = eax | 0x40<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0xA4<64>:word32] = eax
	eax = _errno()
	Mem0[rax:word32] = 0x22<32>
	// succ:  l0000000000415ED8
l0000000000415ED8:
	r8 = Mem0[rsp + 0xC8<64>:word64]
	goto l0000000000415A51
	// succ:  l0000000000415A51
l0000000000415EE5:
	rax = Mem0[rsp + 0x190<64>:word64]
	ecx = Mem0[rsp + 0x58<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	r8d = r8d - r13d
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	Mem0[rsp + 0xA4<64>:word32] = 1<32>
	Mem0[rsp + 0x68<64>:word32] = r8d
	eax = Mem0[rax + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x44<64>:word32] = eax
	eax = eax & 3<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	edi = edi - ecx
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	SCZO = cond(eax - 2<32>)
	Mem0[rsp + 0x6C<64>:word32] = edi
	branch Test(EQ,Z) l0000000000415F33
	// succ:  l0000000000415F1B l0000000000415F33
l0000000000415F1B:
	edi = SLICE(rcx + 1<64>, word32, 0)
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(eax - 3<32>)
	Mem0[rsp + 0x6C<64>:word32] = edi
	branch Test(EQ,Z) l0000000000415F33
	// succ:  l0000000000415F27 l0000000000415F33
l0000000000415F27:
	SZO = cond(eax & eax)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x6C<64>:word32] = eax
	// succ:  l0000000000415F33
l0000000000415F33:
	xmm0 = 0<128>
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(ebx & ebx)
	C = false
	branch Test(NE,Z) l0000000000415F3E
	// succ:  l0000000000415F3B_1 l0000000000415F3E
l0000000000415F3B_1:
	ebx = ebp
	// succ:  l0000000000415F3E
l0000000000415F3E:
	edi = 0x10<32>
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(ebp - 0x10<32>)
	branch Test(GT,SZO) l0000000000415F49
	// succ:  l0000000000415F46_1 l0000000000415F49
l0000000000415F46_1:
	edi = ebp
	// succ:  l0000000000415F49
l0000000000415F49:
	v49 = CONVERT(rax, int64, real64)
	xmm0 = SEQ(SLICE(xmm0, word64, 64), v49)
	SCZO = cond(edi - 9<32>)
	Mem0[rsp + 0xB0<64>:real64] = SLICE(xmm0, real64, 0)
	branch Test(LE,SZO) l0000000000415F83
	// succ:  l0000000000415F5C l0000000000415F83
l0000000000415F5C:
	xmm1 = 0<128>
	eax = SLICE(rdi - 9<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	rcx = Mem0[0x0000000000491FA0<p64>:word64]
	rax = CONVERT(eax, int32, int64)
	v51 = CONVERT(rdx, int64, real64)
	xmm1 = SEQ(SLICE(xmm1, word64, 64), v51)
	v52 = SLICE(xmm0, real64, 0) * Mem0[rcx + rax * 8<64>:real64]
	v53 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v53, v52)
	v54 = SLICE(xmm0, real64, 0) + SLICE(xmm1, real64, 0)
	v55 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v55, v54)
	Mem0[rsp + 0xB0<64>:real64] = SLICE(xmm0, real64, 0)
	// succ:  l0000000000415F83
l0000000000415F83:
	SCZO = cond(ebp - 0xF<32>)
	branch Test(GT,SZO) l00000000004160F5
	// succ:  l0000000000415F8C l00000000004160F5
l0000000000415F8C:
	SCZO = cond(Mem0[rsp + 0x40<64>:word32] - 0x35<32>)
	branch Test(GT,SZO) l00000000004160F5
	// succ:  l0000000000415F97 l00000000004160F5
l0000000000415F97:
	SCZO = cond(Mem0[rsp + 0x68<64>:word32] - 0<32>)
	branch Test(EQ,Z) l0000000000416F71
	// succ:  l0000000000415FA2 l0000000000416F71
l0000000000415FA2:
	branch Test(LE,SZO) l0000000000416409
	// succ:  l0000000000415FA8 l0000000000416409
l0000000000415FA8:
	SCZO = cond(Mem0[rsp + 0x68<64>:word32] - 0x16<32>)
	branch Test(GT,SZO) l0000000000416F9B
	// succ:  l0000000000415FB3 l0000000000416F9B
l0000000000415FB3:
	rcx = CONVERT(Mem0[rsp + 0x68<64>:word32], word32, int64)
	edx = Mem0[rsp + 0xB0<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x0000000000490E00<p64>
	SZO = cond(edx & edx)
	C = false
	r8d = Mem0[rax + rcx * 4<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	branch Test(EQ,Z) l000000000041709E
	// succ:  l0000000000415FD2 l000000000041709E
l0000000000415FD2:
	edx = __tzcnt(edx)
	eax = 0x35<32>
	rax = CONVERT(eax, word32, uint64)
	eax = eax - edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	// succ:  l0000000000415FDD
l0000000000415FDD:
	rdx = Mem0[0x0000000000491FA0<p64>:word64]
	xmm0 = SEQ(0<64>, Mem0[rsp + 0xB0<64>:real64])
	eax = eax + r8d
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - 0x35<32>)
	v56 = SLICE(xmm0, real64, 0) * Mem0[rdx + rcx * 8<64>:real64]
	v57 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v57, v56)
	rdx = rsp + 0xA4<64>
	al = CONVERT(Test(LE,SZO), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rcx = rsp + 0xB0<64>
	Mem0[rsp + 0x30<64>:word64] = rdx
	edx = Mem0[rsp + 0x6C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = eax
	Mem0[rsp + 0x28<64>:word32] = edx
	Mem0[rsp + 0xB0<64>:real64] = SLICE(xmm0, real64, 0)
	// succ:  l0000000000416028
l0000000000416028:
	r9 = Mem0[rsp + 0x1A0<64>:word64]
	r8 = Mem0[rsp + 0x198<64>:word64]
	rdx = Mem0[rsp + 0x190<64>:word64]
	call fn00000000004154B0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000415ED8
	// succ:  l000000000041604D l0000000000415ED8
l000000000041604D:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004160F9
	// succ:  l00000000004160F9
l0000000000416054:
	r8d = CONVERT(Mem0[rbp + 1<64>:byte], byte, word32)
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8b & r8b)
	C = false
	branch Test(EQ,Z) l00000000004172D5
	// succ:  l0000000000416062 l00000000004172D5
l0000000000416062:
	SCZO = cond(r8b - Mem0[r9 + 1<64>:byte])
	branch Test(NE,Z) l0000000000415C5C
	// succ:  l000000000041606C l0000000000415C5C
l000000000041606C:
	eax = 2<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000416082
	// succ:  l0000000000416082
l0000000000416073:
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(r8b - Mem0[(r9 - 1<64>) + rax:byte])
	branch Test(NE,Z) l0000000000416280
	// succ:  l0000000000416082 l0000000000416280
l0000000000416082:
	r8d = CONVERT(Mem0[rbp + 0<64> + rax:byte], byte, word32)
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8b & r8b)
	C = false
	branch Test(NE,Z) l0000000000416073
	// succ:  l000000000041608D l0000000000416073
l000000000041608D:
	r8 = r9 + rax
	SZO = cond(ebx & ebx)
	C = false
	Mem0[rsp + 0xC0<64>:word64] = r8
	eax = CONVERT(Mem0[r8:byte], byte, int32)
	branch Test(EQ,Z) l000000000041637E
	// succ:  l00000000004160A5 l000000000041637E
l00000000004160A5:
	r8d = SLICE(rax - 0x30<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	ebp = ebx
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(r8d - 9<32>)
	branch Test(UGT,CZ) l00000000004160EA
	// succ:  l00000000004160B6 l00000000004160EA
l00000000004160B6:
	SZO = cond(r8d & r8d)
	C = false
	eax = SLICE(rcx + 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	r9d = r8d
	r9 = CONVERT(r9d, word32, uint64)
	branch Test(NE,Z) l0000000000417255
	// succ:  l00000000004160C5 l0000000000417255
l00000000004160C5:
	r8 = Mem0[rsp + 0xC0<64>:word64]
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	// succ:  l00000000004160CF
l00000000004160CF:
	rax = r8 + 1<64>
	Mem0[rsp + 0xC0<64>:word64] = rax
	eax = CONVERT(Mem0[r8 + 1<64>:byte], byte, int32)
	r8d = SLICE(rax - 0x30<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d - 9<32>)
	branch Test(ULE,CZ) l00000000004160B6
	// succ:  l00000000004160EA l00000000004160B6
l00000000004160EA:
	r11d = 1<32>
	r11 = CONVERT(r11d, word32, uint64)
	goto l0000000000415C66
	// succ:  l0000000000415C66
l00000000004160F5:
	eax = Mem0[rsp + 0x68<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004160F9
l00000000004160F9:
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	edx = edx - edi
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx + eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(edx - 0<32>)
	branch Test(LE,SZO) l0000000000416E4A
	// succ:  l0000000000416108 l0000000000416E4A
l0000000000416108:
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0xF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l000000000041612F
	// succ:  l000000000041610F l000000000041612F
l000000000041610F:
	rcx = Mem0[0x0000000000491FA0<p64>:word64]
	xmm0 = SEQ(0<64>, Mem0[rsp + 0xB0<64>:real64])
	rax = CONVERT(eax, int32, int64)
	v58 = SLICE(xmm0, real64, 0) * Mem0[rcx + rax * 8<64>:real64]
	v59 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v59, v58)
	Mem0[rsp + 0xB0<64>:real64] = SLICE(xmm0, real64, 0)
	// succ:  l000000000041612F
l000000000041612F:
	edx = edx & 0xFFFFFFF0<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	branch Test(NE,Z) l0000000000416291
	// succ:  l0000000000416138 l0000000000416291
l0000000000416138:
	xmm0 = SEQ(0<64>, Mem0[rsp + 0xB0<64>:real64])
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	// succ:  l0000000000416143
l0000000000416143:
	rdx = rsp + 0xAC<64>
	r8 = rsp + 0xA8<64>
	call fn000000000041A860 (retsize: 8;)
	edx = Mem0[rsp + 0xA8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r13d = Mem0[rsp + 0x40<64>:word32]
	r13 = CONVERT(r13d, word32, uint64)
	edi = edi + Mem0[rsp + 0xAC<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	Mem0[rsp + 0xC8<64>:word64] = rax
	r12d = edx
	r12 = CONVERT(r12d, word32, uint64)
	r12d = r12d - r13d
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	SZO = cond(r12d & r12d)
	C = false
	Mem0[rsp + 0xAC<64>:word32] = edi
	branch Test(LE,SZO) l00000000004161AC
	// succ:  l0000000000416185 l00000000004161AC
l0000000000416185:
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	call fn000000000041ACB0 (retsize: 8;)
	edi = Mem0[rsp + 0xAC<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	Mem0[rsp + 0xA8<64>:word32] = r13d
	edx = r13d
	rdx = CONVERT(edx, word32, uint64)
	edi = edi + r12d
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	Mem0[rsp + 0xAC<64>:word32] = edi
	// succ:  l00000000004161AC
l00000000004161AC:
	eax = SLICE(rdi + rdx, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	eax = eax - Mem0[rsp + 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x8C<64>:word32] = eax
	rax = Mem0[rsp + 0x190<64>:word64]
	eax = Mem0[rax + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x44<64>:word32] = eax
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(ecx - eax)
	branch Test(GT,SZO) l0000000000416D85
	// succ:  l00000000004161D6 l0000000000416D85
l00000000004161D6:
	rax = Mem0[rsp + 0x190<64>:word64]
	eax = Mem0[rax + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ecx - eax)
	Mem0[rsp + 0x50<64>:word32] = eax
	branch Test(GE,SO) l0000000000416F64
	// succ:  l00000000004161ED l0000000000416F64
l00000000004161ED:
	edi = edi - eax
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	SCZO = cond(edi - 0<32>)
	branch Test(LE,SZO) l00000000004163DC
	// succ:  l00000000004161F8 l00000000004163DC
l00000000004161F8:
	rcx = Mem0[rsp + 0xC8<64>:word64]
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041A490 (retsize: 8;)
	v67 = Mem0[rsp + 0xA8<64>:word32] + edi
	Mem0[rsp + 0xA8<64>:word32] = v67
	SCZO = cond(v67)
	Mem0[rsp + 0xC8<64>:word64] = rax
	// succ:  l0000000000416216
l0000000000416216:
	eax = Mem0[rsp + 0x50<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0xAC<64>:word32] = eax
	eax = Mem0[rsp + 0x84<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000000004164A0
	// succ:  l0000000000416230 l00000000004164A0
l0000000000416230:
	eax = Mem0[rsp + 0x8C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(Mem0[rsp + 0x50<64>:word32] - eax)
	branch Test(LE,SZO) l00000000004164A0
	// succ:  l0000000000416244 l00000000004164A0
l0000000000416244:
	r8 = Mem0[rsp + 0xC8<64>:word64]
	rax = Mem0[rsp + 0x198<64>:word64]
	esi = Mem0[rsp + 0x50<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	Mem0[rsp + 0xA4<64>:word32] = 0x50<32>
	Mem0[r8 + 0x14<64>:word32] = 0<32>
	Mem0[r8 + 0x18<64>:word32] = 0<32>
	Mem0[rax:word32] = esi
	goto l0000000000415D2A
	// succ:  l0000000000415D2A
l0000000000416280:
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	ebp = ebx
	rbp = CONVERT(ebp, word32, uint64)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	goto l0000000000415C66
	// succ:  l0000000000415C66
l0000000000416291:
	edx = edx >> 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(edx - 0xF<32>)
	branch Test(LE,SZO) l000000000041735F
	// succ:  l000000000041629D l000000000041735F
l000000000041629D:
	rax = Mem0[0x0000000000491EB0<p64>:word64]
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
l00000000004162FF:
	eax = Mem0[rsp + 0xB4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	eax = eax & 0x800FFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax | 0x3FF00000<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	ecx = ecx & 0x7FF00000<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	ecx = ecx >>u 0x14<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	Mem0[rsp + 0xB4<64>:word32] = eax
	SZO = cond(edx & edx)
	C = false
	edi = SLICE(r8 - 0x3FF<64> + rcx, word32, 0)
	rdi = CONVERT(edi, word32, uint64)
	xmm0 = SEQ(0<64>, Mem0[rsp + 0xB0<64>:real64])
	rax = Mem0[0x0000000000491EB0<p64>:word64]
	branch Test(EQ,Z) l0000000000416143
	// succ:  l0000000000416342 l0000000000416143
l0000000000416342:
	SZO = cond(dl & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000041634B
	// succ:  l0000000000416347 l000000000041634B
l0000000000416347:
	v75 = SLICE(xmm0, real64, 0) * Mem0[rax:real64]
	v76 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v76, v75)
	// succ:  l000000000041634B
l000000000041634B:
	rax = rax + 8<64>
	SCZO = cond(rax)
	edx = edx >> 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	branch Test(NE,Z) l0000000000416342
	// succ:  l0000000000416353 l0000000000416342
l0000000000416353:
	Mem0[rsp + 0xB0<64>:real64] = SLICE(xmm0, real64, 0)
	goto l0000000000416143
	// succ:  l0000000000416143
l0000000000416361:
	Mem0[rsp + 0x44<64>:word32] = 1<32>
	// succ:  l0000000000416369
l0000000000416369:
	rax = rdi + 2<64>
	Mem0[rsp + 0xC0<64>:word64] = rax
	eax = CONVERT(Mem0[rdi + 2<64>:byte], byte, int32)
	goto l0000000000415DAD
	// succ:  l0000000000415DAD
l000000000041637E:
	SCZO = cond(eax - 0x30<32>)
	branch Test(NE,Z) l00000000004173C1
	// succ:  l0000000000416387 l00000000004173C1
l0000000000416387:
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	// succ:  l0000000000416390
l0000000000416390:
	Mem0[rsp + 0xC0<64>:word64] = r8
	eax = CONVERT(Mem0[r8:byte], byte, int32)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	SCZO = cond(eax - 0x30<32>)
	branch Test(EQ,Z) l0000000000416390
	// succ:  l00000000004163A8 l0000000000416390
l00000000004163A8:
	r8d = SLICE(rax - 0x31<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d - 8<32>)
	branch Test(UGT,CZ) l0000000000417016
	// succ:  l00000000004163B6 l0000000000417016
l00000000004163B6:
	r15 = Mem0[rsp + 0xC0<64>:word64]
	r9d = SLICE(rax - 0x30<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	r13d = SLICE(rcx + 1<64>, word32, 0)
	r13 = CONVERT(r13d, word32, uint64)
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	r8 = r15
	// succ:  l00000000004163CE
l00000000004163CE:
	eax = SLICE(rsi + rsi * 4<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	esi = SLICE(r9 + rax * 2<64>, word32, 0)
	rsi = CONVERT(esi, word32, uint64)
	goto l00000000004160CF
	// succ:  l00000000004160CF
l00000000004163DC:
	branch Test(EQ,Z) l0000000000416216
	// succ:  l00000000004163E2 l0000000000416216
l00000000004163E2:
	edx = edx + edi
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SZO = cond(edx & edx)
	C = false
	Mem0[rsp + 0xA8<64>:word32] = edx
	branch Test(LE,SZO) l0000000000417367
	// succ:  l00000000004163F3 l0000000000417367
l00000000004163F3:
	rcx = Mem0[rsp + 0xC8<64>:word64]
	edi = -edi
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	C = edi == 0<32>
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041ACB0 (retsize: 8;)
	goto l0000000000416216
	// succ:  l0000000000416216
l0000000000416409:
	edx = Mem0[rsp + 0x68<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - 0xFFFFFFEA<32>)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	branch Test(LT,SO) l00000000004160F9
	// succ:  l0000000000416418 l00000000004160F9
l0000000000416418:
	rdx = Mem0[0x0000000000491FA0<p64>:word64]
	eax = -eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	C = eax == 0<32>
	xmm0 = SEQ(0<64>, Mem0[rsp + 0xB0<64>:real64])
	rax = CONVERT(eax, int32, int64)
	v77 = SLICE(xmm0, real64, 0) / Mem0[rdx + rax * 8<64>:real64]
	v78 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v78, v77)
	// succ:  l0000000000416431
l0000000000416431:
	rax = rsp + 0xA4<64>
	Mem0[rsp + 0xB0<64>:real64] = SLICE(xmm0, real64, 0)
	rcx = rsp + 0xB0<64>
	Mem0[rsp + 0x20<64>:word32] = 0<32>
	Mem0[rsp + 0x30<64>:word64] = rax
	eax = Mem0[rsp + 0x6C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x28<64>:word32] = eax
	goto l0000000000416028
	// succ:  l0000000000416028
l0000000000416464:
	Mem0[r8 + 0x14<64>:word32] = 0<32>
	Mem0[rsp + 0xA4<64>:word32] = 0x50<32>
	eax = _errno()
	r8 = Mem0[rsp + 0xC8<64>:word64]
	Mem0[rax:word32] = 0x22<32>
	goto l0000000000415A51
	// succ:  l0000000000415A51
l0000000000416490:
	Mem0[rsp + 0xC0<64>:word64] = rdi
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	goto l0000000000415C7A
	// succ:  l0000000000415C7A
l00000000004164A0:
	eax = Mem0[rsp + 0x50<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x44<64>:word32] = 1<32>
	Mem0[rsp + 0x8C<64>:word32] = eax
	// succ:  l00000000004164B3
l00000000004164B3:
	r8d = ebp
	r8 = CONVERT(r8d, word32, uint64)
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = r14d
	r9d = esi
	r9 = CONVERT(r9d, word32, uint64)
	rcx = r15
	call fn000000000041A9A0 (retsize: 8;)
	Mem0[rsp + 0x70<64>:word64] = rax
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rsp + 0x78<64>:word64] = rax
	eax = Mem0[rsp + 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	xmm8 = SEQ(0<64>, Mem0[0x0000000000490E60<p64>:real64])
	xmm9 = SEQ(0<64>, Mem0[0x0000000000490E70<p64>:real64])
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	xmm11 = xmm8
	Mem0[rsp + 0x80<64>:word32] = eax
	eax = Mem0[rsp + 0x68<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	xmm10 = SEQ(0<64>, Mem0[0x0000000000490E90<p64>:real64])
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = -edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	C = edx == 0<32>
	SZO = cond(eax & eax)
	C = false
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(NS,S) l0000000000416516
	// succ:  l0000000000416513_1 l0000000000416516
l0000000000416513_1:
	eax = edx
	// succ:  l0000000000416516
l0000000000416516:
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	Mem0[rsp + 0x5C<64>:word32] = eax
	goto l0000000000416760
	// succ:  l0000000000416760
l0000000000416521:
	rcx = rsi
	call fn000000000041A490 (retsize: 8;)
	rsi = rax
	// succ:  l000000000041652C
l000000000041652C:
	SZO = cond(r15d & r15d)
	C = false
	branch Test(EQ,Z) l000000000041653F
	// succ:  l0000000000416531 l000000000041653F
l0000000000416531:
	rcx = rdi
	edx = r15d
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041A320 (retsize: 8;)
	rdi = rax
	// succ:  l000000000041653F
l000000000041653F:
	SZO = cond(r12d & r12d)
	C = false
	branch Test(LE,SZO) l0000000000416552
	// succ:  l0000000000416544 l0000000000416552
l0000000000416544:
	rcx = rdi
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041A490 (retsize: 8;)
	rdi = rax
	// succ:  l0000000000416552
l0000000000416552:
	SZO = cond(r14d & r14d)
	C = false
	branch Test(LE,SZO) l0000000000416565
	// succ:  l0000000000416557 l0000000000416565
l0000000000416557:
	rcx = r13
	edx = r14d
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041A490 (retsize: 8;)
	r13 = rax
	// succ:  l0000000000416565
l0000000000416565:
	rdx = rdi
	rcx = rsi
	call fn000000000041A600 (retsize: 8;)
	SCZO = cond(Mem0[rax + 0x14<64>:word32] - 1<32>)
	rbx = rax
	branch Test(LE,SZO) l0000000000416910
	// succ:  l000000000041657D l0000000000416910
l000000000041657D:
	ebp = Mem0[rbx + 0x10<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	rdx = r13
	Mem0[rbx + 0x10<64>:word32] = 0<32>
	rcx = rbx
	call fn000000000041A5B0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l00000000004168A0
	// succ:  l000000000041659A l00000000004168A0
l000000000041659A:
	ecx = Mem0[rsp + 0x6C<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l00000000004168A0
	// succ:  l00000000004165A6 l00000000004168A0
l00000000004165A6:
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax ^ ebp
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x60<64>:word32] = eax
	branch Test(EQ,Z) l00000000004170BB
	// succ:  l00000000004165B7 l00000000004170BB
l00000000004165B7:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l0000000000416B11
	// succ:  l00000000004165BF l0000000000416B11
l00000000004165BF:
	xmm6 = SEQ(0<64>, Mem0[0x0000000000490E60<p64>:real64])
	Mem0[rsp + 0xA4<64>:word32] = 0x21<32>
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	Mem0[rsp + 0x88<64>:word32] = 0x20<32>
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	xmm7 = xmm6
	// succ:  l00000000004165E7
l00000000004165E7:
	eax = Mem0[rsp + 0xA8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = Mem0[rsp + 0xAC<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r8d = Mem0[rsp + 0x44<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	edx = edx + eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SZO = cond(r8d & r8d)
	C = false
	Mem0[rsp + 0x48<64>:word32] = edx
	branch Test(NE,Z) l000000000041660F
	// succ:  l0000000000416605 l000000000041660F
l0000000000416605:
	SCZO = cond(Mem0[rsp + 0x40<64>:word32] - eax)
	branch Test(GT,SZO) l0000000000416CD3
	// succ:  l000000000041660F l0000000000416CD3
l000000000041660F:
	rdx = rsp + 0x9C<64>
	r8 = rsp + 0xA0<64>
	xmm0 = xmm6
	call fn000000000041A860 (retsize: 8;)
	edx = Mem0[rsp + 0x9C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r15 = rax
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l0000000000416D10
	// succ:  l000000000041663A l0000000000416D10
l000000000041663A:
	branch Test(EQ,Z) l0000000000416647
	// succ:  l000000000041663C l0000000000416647
l000000000041663C:
	rcx = rax
	call fn000000000041A490 (retsize: 8;)
	r15 = rax
	// succ:  l0000000000416647
l0000000000416647:
	rbp = Mem0[rsp + 0xC8<64>:word64]
	SZO = cond(r14d & r14d)
	C = false
	rdx = r15
	rcx = rbp
	branch Test(EQ,Z) l0000000000416A40
	// succ:  l000000000041665E l0000000000416A40
l000000000041665E:
	call fn000000000041A600 (retsize: 8;)
	ecx = Mem0[rsp + 0x44<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0xC8<64>:word64] = rax
	edx = Mem0[rbp + 0x14<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l0000000000416BE0
	// succ:  l000000000041667A l0000000000416BE0
l000000000041667A:
	edx = edx - 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(edx - Mem0[rax + 0x14<64>:word32])
	branch Test(GE,SO) l000000000041669D
	// succ:  l0000000000416682 l000000000041669D
l0000000000416682:
	rdx = CONVERT(edx, word32, int64)
	rdx = rdx + 4<64>
	SCZO = cond(rdx)
	Z = Mem0[rax + 8<64> + rdx * 4<64>:word32] == 0<32>
	ecx = __bsr(Mem0[rax + 8<64> + rdx * 4<64>:word32])
	Z = Mem0[rbp + 8<64> + rdx * 4<64>:word32] == 0<32>
	edx = __bsr(Mem0[rbp + 8<64> + rdx * 4<64>:word32])
	ecx = ecx ^ 0x1F<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ 0x1F<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(ecx - edx)
	branch Test(LE,SZO) l00000000004166C0
	// succ:  l000000000041669D l00000000004166C0
l000000000041669D:
	ecx = Mem0[rsp + 0x50<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(Mem0[rsp + 0x8C<64>:word32] - ecx)
	branch Test(NE,Z) l0000000000416AC0
	// succ:  l00000000004166AE l0000000000416AC0
l00000000004166AE:
	v83 = Mem0[rsp + 0xA8<64>:word32] - 1<32>
	Mem0[rsp + 0xA8<64>:word32] = v83
	SCZO = cond(v83)
	Mem0[rsp + 0x44<64>:word32] = 1<32>
	// succ:  l00000000004166C0
l00000000004166C0:
	rcx = r15
	call fn000000000041A090 (retsize: 8;)
	rcx = rbp
	call fn000000000041A090 (retsize: 8;)
	r14d = Mem0[rsp + 0x60<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d & r14d)
	C = false
	branch Test(NE,Z) l0000000000416920
	// succ:  l00000000004166DE l0000000000416920
l00000000004166DE:
	SZO = cond(r12d & r12d)
	C = false
	branch Test(EQ,Z) l0000000000416728
	// succ:  l00000000004166E3 l0000000000416728
l00000000004166E3:
	eax = Mem0[rsp + 0xA8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + Mem0[rsp + 0xAC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - eax)
	branch Test(NE,Z) l0000000000416728
	// succ:  l00000000004166F7 l0000000000416728
l00000000004166F7:
	v86 = SLICE(xmm6, real64, 0) * Mem0[0x0000000000490E88<p64>:real64]
	v87 = SLICE(xmm6, word64, 64)
	xmm6 = SEQ(v87, v86)
	xmm0 = xmm7
	v88 = SLICE(xmm0, real64, 0) - Mem0[0x0000000000490E78<p64>:real64]
	v89 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v89, v88)
	xmm1 = xmm6
	v90 = xmm1
	v91 = xmm10
	xmm1 = __xorpd(v90, v91)
	CZP = cond(SLICE(xmm1, real64, 0) - SLICE(xmm0, real64, 0))
	O = false
	S = false
	branch Test(ULE,CZ) l0000000000416CA0
	// succ:  l000000000041671E l0000000000416CA0
l000000000041671E:
	CZP = cond(SLICE(xmm7, real64, 0) - SLICE(xmm6, real64, 0))
	O = false
	S = false
	branch Test(UGT,CZ) l0000000000416CC0
	// succ:  l0000000000416728 l0000000000416CC0
l0000000000416728:
	r12d = Mem0[rsp + 0x44<64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d & r12d)
	C = false
	branch Test(EQ,Z) l0000000000416AF5
	// succ:  l0000000000416736 l0000000000416AF5
l0000000000416736:
	Mem0[rsp + 0x44<64>:word32] = 1<32>
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	// succ:  l0000000000416740
l0000000000416740:
	rcx = rsi
	call fn000000000041A090 (retsize: 8;)
	rcx = rdi
	call fn000000000041A090 (retsize: 8;)
	rcx = r13
	call fn000000000041A090 (retsize: 8;)
	rcx = rbx
	call fn000000000041A090 (retsize: 8;)
	// succ:  l0000000000416760
l0000000000416760:
	rsi = Mem0[rsp + 0x70<64>:word64]
	r15d = 0<32>
	r15 = CONVERT(r15d, word32, uint64)
	ecx = Mem0[rsi + 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000419F80 (retsize: 8;)
	rcx = rax + 0x10<64>
	rdi = rax
	rax = CONVERT(Mem0[rsi + 0x14<64>:word32], word32, int64)
	rdx = Mem0[rsp + 0x78<64>:word64]
	r8 = CONVERT(8<32> + rax * 4<64>, word32, word64)
	rax = memcpy(rcx, rdx, r8)
	rax = Mem0[rsp + 0xC8<64>:word64]
	ecx = Mem0[rax + 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000419F80 (retsize: 8;)
	rdx = Mem0[rsp + 0xC8<64>:word64]
	rcx = rax + 0x10<64>
	rsi = rax
	rax = CONVERT(Mem0[rdx + 0x14<64>:word32], word32, int64)
	rdx = rdx + 0x10<64>
	SCZO = cond(rdx)
	r8 = CONVERT(8<32> + rax * 4<64>, word32, word64)
	rax = memcpy(rcx, rdx, r8)
	eax = Mem0[rsp + 0xA8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	ebx = Mem0[rsp + 0xAC<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	eax = eax - ebp
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ebx = ebx + ebp
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	Mem0[rsp + 0x48<64>:word32] = eax
	call fn000000000041A1C0 (retsize: 8;)
	r13 = rax
	eax = Mem0[rsp + 0x68<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004167F1
	// succ:  l00000000004167ED_1 l00000000004167F1
l00000000004167ED_1:
	r15d = eax
	// succ:  l00000000004167F1
l00000000004167F1:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(SG,S) l0000000000416AB0
	// succ:  l00000000004167F9 l0000000000416AB0
l00000000004167F9:
	eax = Mem0[rsp + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = r15d
	rdx = CONVERT(edx, word32, uint64)
	r14d = SLICE(rax + rbx, word32, 0)
	r14 = CONVERT(r14d, word32, uint64)
	// succ:  l0000000000416804
l0000000000416804:
	ecx = Mem0[rsp + 0x48<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = Mem0[rsp + 0x80<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ebx = ebx + ecx
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	ebx = ebx - Mem0[rsp + 0x40<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	eax = eax - ecx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(Mem0[rsp + 0x50<64>:word32] - ebx)
	branch Test(LE,SZO) l0000000000416823
	// succ:  l000000000041681D l0000000000416823
l000000000041681D:
	ebx = ebx - Mem0[rsp + 0x50<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	eax = eax + ebx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	// succ:  l0000000000416823
l0000000000416823:
	ebx = SLICE(r14 + rax, word32, 0)
	rbx = CONVERT(ebx, word32, uint64)
	r12d = SLICE(rdx + rax, word32, 0)
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(ebx - r12d)
	eax = r12d
	rax = CONVERT(eax, word32, uint64)
	branch Test(GT,SZO) l0000000000416834
	// succ:  l0000000000416831_1 l0000000000416834
l0000000000416831_1:
	eax = ebx
	// succ:  l0000000000416834
l0000000000416834:
	SCZO = cond(eax - r14d)
	branch Test(LE,SZO) l000000000041683B
	// succ:  l0000000000416837_1 l000000000041683B
l0000000000416837_1:
	eax = r14d
	// succ:  l000000000041683B
l000000000041683B:
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000416847
	// succ:  l000000000041683F l0000000000416847
l000000000041683F:
	ebx = ebx - eax
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	r12d = r12d - eax
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	r14d = r14d - eax
	r14 = CONVERT(r14d, word32, uint64)
	SCZO = cond(r14d)
	// succ:  l0000000000416847
l0000000000416847:
	eax = Mem0[rsp + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041687C
	// succ:  l000000000041684F l000000000041687C
l000000000041684F:
	rcx = r13
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041A320 (retsize: 8;)
	rdx = rsi
	rcx = rax
	r13 = rax
	call fn000000000041A1F0 (retsize: 8;)
	rcx = rsi
	Mem0[rsp + 0x60<64>:word64] = rax
	call fn000000000041A090 (retsize: 8;)
	rax = Mem0[rsp + 0x60<64>:word64]
	rsi = rax
	// succ:  l000000000041687C
l000000000041687C:
	ebx = ebx - ebp
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SCZO = cond(ebx - 0<32>)
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	branch Test(GT,SZO) l0000000000416521
	// succ:  l0000000000416889 l0000000000416521
l0000000000416889:
	branch Test(EQ,Z) l000000000041652C
	// succ:  l000000000041688F l000000000041652C
l000000000041688F:
	edx = -edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	C = edx == 0<32>
	rcx = rsi
	call fn000000000041ACB0 (retsize: 8;)
	goto l000000000041652C
	// succ:  l000000000041652C
l00000000004168A0:
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l00000000004170D2
	// succ:  l00000000004168A8 l00000000004170D2
l00000000004168A8:
	branch Test(EQ,Z) l0000000000417178
	// succ:  l00000000004168AE l0000000000417178
l00000000004168AE:
	rdx = r13
	rcx = rbx
	call fn000000000041AAA0 (retsize: 8;)
	CZP = cond(SLICE(xmm9, real64, 0) - SLICE(xmm0, real64, 0))
	O = false
	S = false
	branch Test(ULT,C) l0000000000416BF0
	// succ:  l00000000004168C4 l0000000000416BF0
l00000000004168C4:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(NE,Z) l0000000000416D30
	// succ:  l00000000004168CC l0000000000416D30
l00000000004168CC:
	Mem0[rsp + 0x60<64>:word32] = 0<32>
	// succ:  l00000000004168D4
l00000000004168D4:
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 1<32>)
	branch Test(GT,SZO) l00000000004168E9
	// succ:  l00000000004168DB l00000000004168E9
l00000000004168DB:
	r9d = Mem0[rsp + 0x44<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NE,Z) l00000000004172A2
	// succ:  l00000000004168E9 l00000000004172A2
l00000000004168E9:
	xmm6 = xmm8
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	Mem0[rsp + 0x88<64>:word32] = 0x10<32>
	xmm7 = xmm8
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	goto l00000000004165E7
	// succ:  l00000000004165E7
l0000000000416910:
	r15d = Mem0[rax + 0x18<64>:word32]
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d & r15d)
	C = false
	branch Test(NE,Z) l000000000041657D
	// succ:  l000000000041691D l000000000041657D
l000000000041691D:
	// succ:  l0000000000416920
l0000000000416920:
	ebp = Mem0[rsp + 0x44<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l0000000000416E28
	// succ:  l000000000041692C l0000000000416E28
l000000000041692C:
	eax = Mem0[rsp + 0xAC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	// succ:  l0000000000416938
l0000000000416938:
	rdx = Mem0[rsp + 0x198<64>:word64]
	rcx = rsi
	Mem0[rdx:word32] = eax
	call fn000000000041A090 (retsize: 8;)
	rcx = rdi
	call fn000000000041A090 (retsize: 8;)
	rcx = r13
	call fn000000000041A090 (retsize: 8;)
	rcx = Mem0[rsp + 0x70<64>:word64]
	call fn000000000041A090 (retsize: 8;)
	rcx = rbx
	call fn000000000041A090 (retsize: 8;)
	rax = Mem0[rsp + 0x190<64>:word64]
	esi = Mem0[rsp + 0xAC<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(Mem0[rax + 8<64>:word32] - esi)
	branch Test(GE,SO) l0000000000415D1A
	// succ:  l0000000000416984 l0000000000415D1A
l0000000000416984:
	rax = Mem0[rsp + 0x190<64>:word64]
	eax = Mem0[rax + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x44<64>:word32] = eax
	eax = eax & 3<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000041722F
	// succ:  l000000000041699F l000000000041722F
l000000000041699F:
	SCZO = cond(eax - 3<32>)
	branch Test(EQ,Z) l0000000000417242
	// succ:  l00000000004169A8 l0000000000417242
l00000000004169A8:
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l0000000000416D87
	// succ:  l00000000004169B1 l0000000000416D87
l00000000004169B1:
	rcx = Mem0[rsp + 0xC8<64>:word64]
	call fn000000000041A090 (retsize: 8;)
	rax = Mem0[rsp + 0x190<64>:word64]
	rsi = Mem0[rsp + 0x198<64>:word64]
	Mem0[rsp + 0xC8<64>:word64] = 0<64>
	Mem0[rsp + 0xA4<64>:word32] = 0x11<32>
	eax = Mem0[rax + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi:word32] = eax
	rax = Mem0[rsp + 0x190<64>:word64]
	rsi = Mem0[rsp + 0x1A0<64>:word64]
	ecx = Mem0[rax:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = SLICE(rcx + 0x1F<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	eax = eax >> 5<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rax = CONVERT(eax, int32, int64)
	rdx = rsi + rax * 4<64>
	rax = rsi
	SCZO = cond(rsi - rdx)
	branch Test(UGE,C) l0000000000416A20
	// succ:  l0000000000416A10 l0000000000416A20
l0000000000416A10:
	rax = rax + 4<64>
	SCZO = cond(rax)
	Mem0[rax - 4<64>:word32] = 0xFFFFFFFF<32>
	SCZO = cond(rdx - rax)
	branch Test(UGT,CZ) l0000000000416A10
	// succ:  l0000000000416A20 l0000000000416A10
l0000000000416A20:
	ecx = ecx & 0x1F<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	branch Test(EQ,Z) l0000000000416A31
	// succ:  l0000000000416A25 l0000000000416A31
l0000000000416A25:
	eax = 0x20<32>
	rax = CONVERT(eax, word32, uint64)
	eax = eax - ecx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	v80 = Mem0[rdx - 4<64>:word32] >>u cl
	Mem0[rdx - 4<64>:word32] = v80
	SCZO = cond(v80)
	// succ:  l0000000000416A31
l0000000000416A31:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	goto l0000000000415D22
	// succ:  l0000000000415D22
l0000000000416A40:
	call fn000000000041ADF0 (retsize: 8;)
	edx = Mem0[rax + 0x14<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsp + 0xC8<64>:word64] = rax
	edx = edx - 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(edx - Mem0[rbp + 0x14<64>:word32])
	branch Test(GE,SO) l0000000000416A77
	// succ:  l0000000000416A58 l0000000000416A77
l0000000000416A58:
	rdx = CONVERT(edx, word32, int64)
	rdx = rdx + 4<64>
	SCZO = cond(rdx)
	Z = Mem0[rax + 8<64> + rdx * 4<64>:word32] == 0<32>
	ecx = __bsr(Mem0[rax + 8<64> + rdx * 4<64>:word32])
	Z = Mem0[rbp + 8<64> + rdx * 4<64>:word32] == 0<32>
	edx = __bsr(Mem0[rbp + 8<64> + rdx * 4<64>:word32])
	ecx = ecx ^ 0x1F<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ 0x1F<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(ecx - edx)
	branch Test(GE,SO) l00000000004166C0
	// succ:  l0000000000416A77 l00000000004166C0
l0000000000416A77:
	edx = Mem0[rsp + 0x44<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000416D60
	// succ:  l0000000000416A83 l0000000000416D60
l0000000000416A83:
	eax = Mem0[rsp + 0xA8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(Mem0[rsp + 0x40<64>:word32] - eax)
	Mem0[rsp + 0xA8<64>:word32] = eax
	al = CONVERT(Test(NE,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x44<64>:word32] = eax
	goto l00000000004166C0
	// succ:  l00000000004166C0
l0000000000416AB0:
	edx = r15d
	rdx = CONVERT(edx, word32, uint64)
	r14d = Mem0[rsp + 0x5C<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	edx = edx - ebx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	goto l0000000000416804
	// succ:  l0000000000416804
l0000000000416AC0:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	call fn000000000041A490 (retsize: 8;)
	rcx = r15
	Mem0[rsp + 0xC8<64>:word64] = rax
	v84 = Mem0[rsp + 0xAC<64>:word32] - 1<32>
	Mem0[rsp + 0xAC<64>:word32] = v84
	SCZO = cond(v84)
	v85 = Mem0[rsp + 0x8C<64>:word32] - 1<32>
	Mem0[rsp + 0x8C<64>:word32] = v85
	SCZO = cond(v85)
	call fn000000000041A090 (retsize: 8;)
	rcx = rbp
	call fn000000000041A090 (retsize: 8;)
	// succ:  l0000000000416AF5
l0000000000416AF5:
	rcx = Mem0[rsp + 0xC8<64>:word64]
	call fn000000000041ADB0 (retsize: 8;)
	Mem0[rsp + 0x44<64>:word32] = 0<32>
	ebp = eax
	rbp = CONVERT(ebp, word32, uint64)
	goto l0000000000416740
	// succ:  l0000000000416740
l0000000000416B11:
	edx = Mem0[rsp + 0x50<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(Mem0[rsp + 0x8C<64>:word32] - edx)
	Mem0[rsp + 0xA4<64>:word32] = 0x11<32>
	branch Test(EQ,Z) l00000000004168D4
	// succ:  l0000000000416B2D l00000000004168D4
l0000000000416B2D:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	SCZO = cond(Mem0[rsp + 0x40<64>:word32] - 0x1F<32>)
	r9 = Mem0[rsp + 0xC8<64>:word64]
	eax = Mem0[rsp + 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	branch Test(LE,SZO) l0000000000416B7C
	// succ:  l0000000000416B42 l0000000000416B7C
l0000000000416B42:
	r14d = Mem0[r9 + 0x18<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d & r14d)
	C = false
	branch Test(NE,Z) l00000000004168D4
	// succ:  l0000000000416B4F l00000000004168D4
l0000000000416B4F:
	rdx = r9 + 0x1C<64>
	eax = Mem0[rsp + 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	goto l0000000000416B71
	// succ:  l0000000000416B71
l0000000000416B60:
	rdx = rdx + 4<64>
	SCZO = cond(rdx)
	r12d = Mem0[rdx - 4<64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d & r12d)
	C = false
	branch Test(NE,Z) l00000000004168D4
	// succ:  l0000000000416B71 l00000000004168D4
l0000000000416B71:
	eax = eax - 0x20<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	SCZO = cond(eax - 0x1F<32>)
	branch Test(GT,SZO) l0000000000416B60
	// succ:  l0000000000416B7C l0000000000416B60
l0000000000416B7C:
	SCZO = cond(eax - 1<32>)
	branch Test(LE,SZO) l0000000000416BA3
	// succ:  l0000000000416B81 l0000000000416BA3
l0000000000416B81:
	rcx = CONVERT(ecx, word32, int64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	r8 = r9 + rcx * 4<64>
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = Mem0[r8 + 0x18<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	ecx = __tzcnt(edx)
	edx = edx >>u cl
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(eax - ecx)
	Mem0[r8 + 0x18<64>:word32] = edx
	branch Test(GT,SZO) l00000000004168D4
	// succ:  l0000000000416BA3 l00000000004168D4
l0000000000416BA3:
	eax = Mem0[rsp + 0x8C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = r9
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rsp + 0xAC<64>:word32] = eax
	eax = Mem0[rsp + 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsp + 0xA8<64>:word32] = eax
	call fn00000000004158B0 (retsize: 8;)
	Mem0[rsp + 0xC8<64>:word64] = rax
	goto l0000000000416920
	// succ:  l0000000000416920
l0000000000416BE0:
	Mem0[rsp + 0x44<64>:word32] = 1<32>
	goto l00000000004166C0
	// succ:  l00000000004166C0
l0000000000416BF0:
	xmm7 = xmm0
	SCZO = cond(ebp - 1<32>)
	xmm1 = SEQ(0<64>, Mem0[0x0000000000490E78<p64>:real64])
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & 0x10<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	xmm0 = SEQ(0<64>, Mem0[0x0000000000490E80<p64>:real64])
	v98 = SLICE(xmm7, real64, 0) * SLICE(xmm1, real64, 0)
	v99 = SLICE(xmm7, word64, 64)
	xmm7 = SEQ(v99, v98)
	eax = eax + 0x10<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	SCZO = cond(ebp - 1<32>)
	Mem0[rsp + 0x88<64>:word32] = eax
	r14b = CONVERT(Test(ULT,C), bool, int8)
	CZP = cond(SLICE(xmm0, real64, 0) - SLICE(xmm7, real64, 0))
	O = false
	S = false
	branch Test(ULE,CZ) l0000000000416D20
	// succ:  l0000000000416C2E l0000000000416D20
l0000000000416C2E:
	r12d = CONVERT(SLICE(xmm7, real64, 0), real64, int32)
	xmm6 = 0<128>
	eax = Mem0[rsp + 0x6C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	v101 = CONVERT(r12d, int32, real64)
	xmm6 = SEQ(SLICE(xmm6, word64, 64), v101)
	v102 = SLICE(xmm7, real64, 0) - SLICE(xmm6, real64, 0)
	v103 = SLICE(xmm7, word64, 64)
	xmm7 = SEQ(v103, v102)
	branch Test(EQ,Z) l0000000000417020
	// succ:  l0000000000416C4D l0000000000417020
l0000000000416C4D:
	SCZO = cond(eax - 2<32>)
	branch Test(NE,Z) l0000000000416E19
	// succ:  l0000000000416C56 l0000000000416E19
l0000000000416C56:
	SZO = cond(r14b & 1<8>)
	C = false
	branch Test(NE,Z) l0000000000416C90
	// succ:  l0000000000416C5C l0000000000416C90
l0000000000416C5C:
	CZP = cond(SLICE(xmm7, real64, 0) - Mem0[0x0000000000490E68<p64>:real64])
	O = false
	S = false
	branch Test(ULE,CZ) l0000000000416C90
	// succ:  l0000000000416C66 l0000000000416C90
l0000000000416C66:
	xmm6 = 0<128>
	r12d = r12d + 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	eax = 0x30<32>
	rax = CONVERT(eax, word32, uint64)
	eax = eax - Mem0[rsp + 0x88<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	v104 = CONVERT(r12d, int32, real64)
	xmm6 = SEQ(SLICE(xmm6, word64, 64), v104)
	Mem0[rsp + 0x88<64>:word32] = eax
	// succ:  l0000000000416C90
l0000000000416C90:
	Mem0[rsp + 0x60<64>:word32] = 0<32>
	goto l00000000004165E7
	// succ:  l00000000004165E7
l0000000000416CA0:
	CZP = cond(SLICE(xmm0, real64, 0) - SLICE(xmm6, real64, 0))
	O = false
	S = false
	branch Test(ULE,CZ) l0000000000416728
	// succ:  l0000000000416CAA l0000000000416728
l0000000000416CAA:
	xmm0 = SEQ(0<64>, Mem0[0x0000000000490E60<p64>:real64])
	v93 = SLICE(xmm0, real64, 0) - SLICE(xmm6, real64, 0)
	v94 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v94, v93)
	CZP = cond(SLICE(xmm0, real64, 0) - SLICE(xmm7, real64, 0))
	O = false
	S = false
	branch Test(ULE,CZ) l0000000000416728
	// succ:  l0000000000416CC0 l0000000000416728
l0000000000416CC0:
	eax = Mem0[rsp + 0x88<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	v92 = Mem0[rsp + 0xA4<64>:word32] | eax
	Mem0[rsp + 0xA4<64>:word32] = v92
	SZO = cond(Mem0[rsp + 0xA4<64>:word32])
	C = false
	goto l0000000000416920
	// succ:  l0000000000416920
l0000000000416CD3:
	r15d = Mem0[rsp + 0x40<64>:word32]
	r15 = CONVERT(r15d, word32, uint64)
	rcx = Mem0[rsp + 0xC8<64>:word64]
	ebp = r15d
	rbp = CONVERT(ebp, word32, uint64)
	ebp = ebp - eax
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041A490 (retsize: 8;)
	v105 = Mem0[rsp + 0xAC<64>:word32] - ebp
	Mem0[rsp + 0xAC<64>:word32] = v105
	SCZO = cond(v105)
	Mem0[rsp + 0xC8<64>:word64] = rax
	Mem0[rsp + 0xA8<64>:word32] = r15d
	goto l000000000041660F
	// succ:  l000000000041660F
l0000000000416D10:
	edx = -edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	C = edx == 0<32>
	rcx = rax
	call fn000000000041ACB0 (retsize: 8;)
	goto l0000000000416647
	// succ:  l0000000000416647
l0000000000416D20:
	xmm6 = xmm7
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	goto l0000000000416C90
	// succ:  l0000000000416C90
l0000000000416D30:
	xmm6 = xmm11
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	xmm7 = xmm11
	Mem0[rsp + 0x88<64>:word32] = 0x20<32>
	Mem0[rsp + 0x60<64>:word32] = 0<32>
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	goto l00000000004165E7
	// succ:  l00000000004165E7
l0000000000416D60:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	call fn000000000041ACB0 (retsize: 8;)
	v95 = Mem0[rsp + 0xAC<64>:word32] + 1<32>
	Mem0[rsp + 0xAC<64>:word32] = v95
	SCZO = cond(v95)
	v96 = Mem0[rsp + 0x8C<64>:word32] + 1<32>
	Mem0[rsp + 0x8C<64>:word32] = v96
	SCZO = cond(v96)
	goto l00000000004166C0
	// succ:  l00000000004166C0
l0000000000416D85:
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	// succ:  l0000000000416D87
l0000000000416D87:
	rax = Mem0[rsp + 0xC8<64>:word64]
	Mem0[rsp + 0xA4<64>:word32] = 0xA3<32>
	Mem0[rax + 0x14<64>:word32] = 0<32>
	eax = _errno()
	Mem0[rax:word32] = 0x22<32>
	rax = Mem0[rsp + 0x190<64>:word64]
	eax = Mem0[rax + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	goto l0000000000415D10
	// succ:  l0000000000415D10
l0000000000416DBF:
	eax = Mem0[rsp + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r8 = Mem0[rsp + 0x198<64>:word64]
	rcx = rsp + 0xC0<64>
	rdx = Mem0[rsp + 0x190<64>:word64]
	r9 = rsp + 0xC8<64>
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn000000000041AF50 (retsize: 8;)
	SCZO = cond(eax - 6<32>)
	Mem0[rsp + 0xA4<64>:word32] = eax
	r8 = Mem0[rsp + 0xC8<64>:word64]
	branch Test(NE,Z) l0000000000415A51
	// succ:  l0000000000416E04 l0000000000415A51
l0000000000416E04:
	Mem0[rsp + 0xC0<64>:word64] = rdi
	Mem0[rsp + 0x58<64>:word32] = 0<32>
	goto l0000000000415A51
	// succ:  l0000000000415A51
l0000000000416E19:
	CZP = cond(SLICE(xmm7, real64, 0) - SLICE(xmm1, real64, 0))
	O = false
	S = false
	branch Test(UGE,C) l0000000000416C66
	// succ:  l0000000000416E23 l0000000000416C66
l0000000000416E23:
	goto l0000000000416C90
	// succ:  l0000000000416C90
l0000000000416E28:
	eax = Mem0[rsp + 0xA8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000416E2F
l0000000000416E2F:
	ebp = Mem0[rsp + 0x40<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	ebp = ebp - eax
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	SCZO = cond(ebp - 0<32>)
	branch Test(NE,Z) l0000000000416FE2
	// succ:  l0000000000416E3E l0000000000416FE2
l0000000000416E3E:
	eax = Mem0[rsp + 0xAC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000416938
	// succ:  l0000000000416938
l0000000000416E4A:
	branch Test(EQ,Z) l0000000000416138
	// succ:  l0000000000416E50 l0000000000416138
l0000000000416E50:
	edx = -edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	C = edx == 0<32>
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0xF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000416E79
	// succ:  l0000000000416E59 l0000000000416E79
l0000000000416E59:
	rcx = Mem0[0x0000000000491FA0<p64>:word64]
	xmm0 = SEQ(0<64>, Mem0[rsp + 0xB0<64>:real64])
	rax = CONVERT(eax, int32, int64)
	v60 = SLICE(xmm0, real64, 0) / Mem0[rcx + rax * 8<64>:real64]
	v61 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v61, v60)
	Mem0[rsp + 0xB0<64>:real64] = SLICE(xmm0, real64, 0)
	// succ:  l0000000000416E79
l0000000000416E79:
	edx = edx & 0xFFFFFFF0<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l0000000000416138
	// succ:  l0000000000416E82 l0000000000416138
l0000000000416E82:
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	eax = eax >> 4<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - 0xF<32>)
	branch Test(LE,SZO) l0000000000417444
	// succ:  l0000000000416E90 l0000000000417444
l0000000000416E90:
	rdx = Mem0[0x0000000000491FB0<p64>:word64]
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	xmm1 = SEQ(0<64>, Mem0[rdx + 0x20<64>:real64])
	// succ:  l0000000000416EA1
l0000000000416EA1:
	edx = Mem0[rsp + 0xB4<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	ecx = ecx - 0x10<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9d = edx
	r9 = CONVERT(r9d, word32, uint64)
	edx = edx & 0x800FFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx | 0x3FF00000<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r9d = r9d & 0x7FF00000<32>
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	Mem0[rsp + 0xB4<64>:word32] = edx
	r9d = r9d >>u 0x14<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	SCZO = cond(ecx - 0xF<32>)
	xmm0 = SEQ(0<64>, Mem0[rsp + 0xB0<64>:real64])
	r8d = SLICE(r8 - 0x3FF<64> + r9, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	v71 = SLICE(xmm0, real64, 0) * SLICE(xmm1, real64, 0)
	v72 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v72, v71)
	Mem0[rsp + 0xB0<64>:real64] = SLICE(xmm0, real64, 0)
	branch Test(GT,SZO) l0000000000416EA1
	// succ:  l0000000000416EEF l0000000000416EA1
l0000000000416EEF:
	eax = eax & 0xF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000416EF2
l0000000000416EF2:
	edx = Mem0[rsp + 0xB4<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	edx = edx & 0x800FFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx | 0x3FF00000<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx & 0x7FF00000<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	ecx = ecx >>u 0x14<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	Mem0[rsp + 0xB4<64>:word32] = edx
	SZO = cond(eax & eax)
	C = false
	edi = SLICE(r8 - 0x3FF<64> + rcx, word32, 0)
	rdi = CONVERT(edi, word32, uint64)
	xmm0 = SEQ(0<64>, Mem0[rsp + 0xB0<64>:real64])
	rdx = Mem0[0x0000000000491FB0<p64>:word64]
	branch Test(LE,SZO) l0000000000416143
	// succ:  l0000000000416F37 l0000000000416143
l0000000000416F37:
	// succ:  l0000000000416F40
l0000000000416F40:
	SZO = cond(al & 1<8>)
	C = false
	branch Test(EQ,Z) l0000000000416F48
	// succ:  l0000000000416F44 l0000000000416F48
l0000000000416F44:
	v73 = SLICE(xmm0, real64, 0) * Mem0[rdx:real64]
	v74 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v74, v73)
	// succ:  l0000000000416F48
l0000000000416F48:
	eax = eax >> 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rdx = rdx + 8<64>
	SCZO = cond(rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l0000000000416F40
	// succ:  l0000000000416F52 l0000000000416F40
l0000000000416F52:
	goto l0000000000416353
	// succ:  l0000000000416353
l0000000000416F57:
	Mem0[rsp + 0x44<64>:word32] = 0<32>
	goto l0000000000416369
	// succ:  l0000000000416369
l0000000000416F64:
	Mem0[rsp + 0x44<64>:word32] = 0<32>
	goto l00000000004164B3
	// succ:  l00000000004164B3
l0000000000416F71:
	rax = rsp + 0xA4<64>
	rcx = rsp + 0xB0<64>
	Mem0[rsp + 0x20<64>:word32] = 1<32>
	Mem0[rsp + 0x30<64>:word64] = rax
	eax = Mem0[rsp + 0x6C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x28<64>:word32] = eax
	goto l0000000000416028
	// succ:  l0000000000416028
l0000000000416F9B:
	ecx = Mem0[rsp + 0x68<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	edx = 0x25<32>
	rdx = CONVERT(edx, word32, uint64)
	edx = edx - ebp
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(ecx - edx)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	branch Test(GT,SZO) l00000000004160F9
	// succ:  l0000000000416FB0 l00000000004160F9
l0000000000416FB0:
	rdx = Mem0[0x0000000000491FA0<p64>:word64]
	eax = 0xF<32>
	rax = CONVERT(eax, word32, uint64)
	eax = eax - ebp
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	xmm0 = SEQ(0<64>, Mem0[rsp + 0xB0<64>:real64])
	rcx = CONVERT(eax, word32, int64)
	v62 = SLICE(xmm0, real64, 0) * Mem0[rdx + rcx * 8<64>:real64]
	v63 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v63, v62)
	ecx = Mem0[rsp + 0x68<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx - eax
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	rax = CONVERT(ecx, word32, int64)
	v64 = SLICE(xmm0, real64, 0) * Mem0[rdx + rax * 8<64>:real64]
	v65 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v65, v64)
	goto l0000000000416431
	// succ:  l0000000000416431
l0000000000416FE2:
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	branch Test(LE,SZO) l00000000004172DF
	// succ:  l0000000000416FEA l00000000004172DF
l0000000000416FEA:
	rcx = Mem0[rsp + 0xC8<64>:word64]
	call fn000000000041A490 (retsize: 8;)
	Mem0[rsp + 0xC8<64>:word64] = rax
	// succ:  l0000000000416FFF
l0000000000416FFF:
	eax = Mem0[rsp + 0xAC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - ebp
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	Mem0[rsp + 0xAC<64>:word32] = eax
	goto l0000000000416938
	// succ:  l0000000000416938
l0000000000417016:
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	goto l00000000004160EA
	// succ:  l00000000004160EA
l0000000000417020:
	SZO = cond(r14b & 1<8>)
	C = false
	branch Test(NE,Z) l0000000000416C5C
	// succ:  l000000000041702A l0000000000416C5C
l000000000041702A:
	goto l0000000000416C90
	// succ:  l0000000000416C90
l000000000041702F:
	rbx = rsp + 0xC0<64>
	rdx = 0x0000000000490D00<p64>
	rcx = rbx
	call fn000000000041AB60 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000415EA3
	// succ:  l000000000041704E l0000000000415EA3
l000000000041704E:
	rdx = 0x0000000000490D03<p64>
	rcx = rbx
	v45 = Mem0[rsp + 0xC0<64>:word64] - 1<64>
	Mem0[rsp + 0xC0<64>:word64] = v45
	SCZO = cond(v45)
	call fn000000000041AB60 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000417073
	// succ:  l000000000041706A l0000000000417073
l000000000041706A:
	v46 = Mem0[rsp + 0xC0<64>:word64] + 1<64>
	Mem0[rsp + 0xC0<64>:word64] = v46
	SCZO = cond(v46)
	// succ:  l0000000000417073
l0000000000417073:
	rax = Mem0[rsp + 0x190<64>:word64]
	Mem0[rsp + 0xA4<64>:word32] = 3<32>
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	eax = Mem0[rax + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	goto l0000000000415D10
	// succ:  l0000000000415D10
l0000000000417093:
	r9d = 0x4E1F<32>
	r9 = CONVERT(r9d, word32, uint64)
	goto l0000000000415E84
	// succ:  l0000000000415E84
l000000000041709E:
	edx = Mem0[rsp + 0xB4<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = 0x15<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx | 0x100000<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = __tzcnt(edx)
	eax = eax - edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	goto l0000000000415FDD
	// succ:  l0000000000415FDD
l00000000004170BB:
	SCZO = cond(ebp - 1<32>)
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & 0x10<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax + 0x11<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rsp + 0xA4<64>:word32] = eax
	goto l0000000000416920
	// succ:  l0000000000416920
l00000000004170D2:
	SCZO = cond(ebp - 1<32>)
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & 0x10<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax + 0x11<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(ebp & ebp)
	C = false
	Mem0[rsp + 0xA4<64>:word32] = eax
	branch Test(NE,Z) l0000000000416920
	// succ:  l00000000004170EC l0000000000416920
l00000000004170EC:
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 1<32>)
	branch Test(GT,SZO) l0000000000416920
	// succ:  l00000000004170F7 l0000000000416920
l00000000004170F7:
	ebp = Mem0[rsp + 0x44<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp & ebp)
	C = false
	branch Test(NE,Z) l0000000000416920
	// succ:  l0000000000417103 l0000000000416920
l0000000000417103:
	edx = Mem0[rsp + 0x8C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(Mem0[rsp + 0x50<64>:word32] - edx)
	branch Test(EQ,Z) l0000000000416920
	// succ:  l0000000000417114 l0000000000416920
l0000000000417114:
	rcx = rbx
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041A490 (retsize: 8;)
	rdx = r13
	rcx = rax
	rbx = rax
	call fn000000000041A5B0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000416E28
	// succ:  l0000000000417137 l0000000000416E28
l0000000000417137:
	Mem0[rsp + 0xA4<64>:word32] = 0x11<32>
	Mem0[rsp + 0x44<64>:word32] = 0<32>
	// succ:  l000000000041714A
l000000000041714A:
	eax = Mem0[rsp + 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = Mem0[rsp + 0xC8<64>:word64]
	v97 = Mem0[rsp + 0xAC<64>:word32] - eax
	Mem0[rsp + 0xAC<64>:word32] = v97
	SCZO = cond(v97)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsp + 0xA8<64>:word32] = eax
	call fn00000000004158B0 (retsize: 8;)
	Mem0[rsp + 0xC8<64>:word64] = rax
	goto l0000000000416920
	// succ:  l0000000000416920
l0000000000417178:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l00000000004172F3
	// succ:  l0000000000417180 l00000000004172F3
l0000000000417180:
	r11d = Mem0[rsp + 0x44<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d & r11d)
	C = false
	branch Test(EQ,Z) l00000000004173B1
	// succ:  l000000000041718E l00000000004173B1
l000000000041718E:
	ecx = Mem0[rsp + 0xA8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	r8 = Mem0[rsp + 0xC8<64>:word64]
	edx = ecx
	rdx = CONVERT(edx, word32, uint64)
	rax = r8 + 0x18<64>
	edx = edx >> 5<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rdx = CONVERT(edx, word32, int64)
	rdx = rax + rdx * 4<64>
	SCZO = cond(rax - rdx)
	branch Test(UGE,C) l00000000004171D5
	// succ:  l00000000004171B2 l00000000004171D5
l00000000004171B2:
	SCZO = cond(Mem0[r8 + 0x18<64>:word32] - 0xFFFFFFFF<32>)
	rax = r8 + 0x1C<64>
	branch Test(EQ,Z) l00000000004171D0
	// succ:  l00000000004171BD l00000000004171D0
l00000000004171BD:
	goto l00000000004173B1
	// succ:  l00000000004173B1
l00000000004171C2:
	rax = rax + 4<64>
	SCZO = cond(rax)
	SCZO = cond(Mem0[rax - 4<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l00000000004173B1
	// succ:  l00000000004171D0 l00000000004173B1
l00000000004171D0:
	SCZO = cond(rdx - rax)
	branch Test(UGT,CZ) l00000000004171C2
	// succ:  l00000000004171D5 l00000000004171C2
l00000000004171D5:
	ecx = ecx & 0x1F<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	branch Test(EQ,Z) l00000000004171EC
	// succ:  l00000000004171DA l00000000004171EC
l00000000004171DA:
	edx = edx | 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx << cl
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx | Mem0[rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	branch Test(NE,Z) l00000000004173B1
	// succ:  l00000000004171EC l00000000004173B1
l00000000004171EC:
	eax = Mem0[rsp + 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = Mem0[rsp + 0x50<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[r8 + 0x14<64>:word32] = 1<32>
	Mem0[r8 + 0x18<64>:word32] = 1<32>
	Mem0[rsp + 0xA8<64>:word32] = 1<32>
	Mem0[rsp + 0xA4<64>:word32] = 0x21<32>
	eax = SLICE(rax - 1<64> + rdx, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0xAC<64>:word32] = eax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000416E2F
	// succ:  l0000000000416E2F
l000000000041722F:
	r11d = Mem0[rsp + 0x58<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d & r11d)
	C = false
	branch Test(EQ,Z) l0000000000416D87
	// succ:  l000000000041723D l0000000000416D87
l000000000041723D:
	goto l00000000004169B1
	// succ:  l00000000004169B1
l0000000000417242:
	r10d = Mem0[rsp + 0x58<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d & r10d)
	C = false
	branch Test(NE,Z) l0000000000416D87
	// succ:  l0000000000417250 l0000000000416D87
l0000000000417250:
	goto l00000000004169B1
	// succ:  l00000000004169B1
l0000000000417255:
	r13d = r13d + eax
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l0000000000417284
	// succ:  l000000000041725D l0000000000417284
l000000000041725D:
	ecx = ecx + ebp
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r10d = ecx
	r10 = CONVERT(r10d, word32, uint64)
	goto l000000000041726D
	// succ:  l000000000041726D
l0000000000417264:
	esi = SLICE(rsi + rsi * 4<64>, word32, 0)
	rsi = CONVERT(esi, word32, uint64)
	esi = esi + esi
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	// succ:  l0000000000417269
l0000000000417269:
	SCZO = cond(ebp - ecx)
	branch Test(EQ,Z) l0000000000417287
	// succ:  l000000000041726D l0000000000417287
l000000000041726D:
	ebp = ebp + 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	eax = SLICE(rbp - 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 8<32>)
	branch Test(LE,SZO) l0000000000417264
	// succ:  l0000000000417278 l0000000000417264
l0000000000417278:
	SCZO = cond(ebp - 0x10<32>)
	branch Test(GT,SZO) l0000000000417269
	// succ:  l000000000041727D l0000000000417269
l000000000041727D:
	edx = SLICE(rdx + rdx * 4<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	edx = edx + edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	goto l0000000000417269
	// succ:  l0000000000417269
l0000000000417284:
	r10d = ebp
	r10 = CONVERT(r10d, word32, uint64)
	// succ:  l0000000000417287
l0000000000417287:
	SCZO = cond(r10d - 8<32>)
	ebp = SLICE(r10 + 1<64>, word32, 0)
	rbp = CONVERT(ebp, word32, uint64)
	branch Test(GT,SZO) l0000000000417396
	// succ:  l0000000000417295 l0000000000417396
l0000000000417295:
	r8 = Mem0[rsp + 0xC0<64>:word64]
	goto l00000000004163CE
	// succ:  l00000000004163CE
l00000000004172A2:
	r9 = Mem0[rsp + 0xC8<64>:word64]
	Mem0[rsp + 0x44<64>:word32] = 1<32>
	// succ:  l00000000004172B2
l00000000004172B2:
	eax = Mem0[rsp + 0x50<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9 + 0x14<64>:word32] = 0<32>
	Mem0[rsp + 0xA4<64>:word32] = 0x50<32>
	Mem0[rsp + 0xAC<64>:word32] = eax
	goto l0000000000416920
	// succ:  l0000000000416920
l00000000004172D5:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000041608D
	// succ:  l000000000041608D
l00000000004172DF:
	rcx = Mem0[rsp + 0xC8<64>:word64]
	edx = -edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	C = edx == 0<32>
	call fn000000000041ACB0 (retsize: 8;)
	goto l0000000000416FFF
	// succ:  l0000000000416FFF
l00000000004172F3:
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 1<32>)
	branch Test(EQ,Z) l00000000004173C8
	// succ:  l00000000004172FE l00000000004173C8
l00000000004172FE:
	Mem0[rsp + 0xA4<64>:word32] = 0x21<32>
	// succ:  l0000000000417309
l0000000000417309:
	r10d = Mem0[rsp + 0x44<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d & r10d)
	C = false
	branch Test(NE,Z) l0000000000417321
	// succ:  l0000000000417313 l0000000000417321
l0000000000417313:
	edx = Mem0[rsp + 0x40<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - edx)
	branch Test(LT,SO) l0000000000416E28
	// succ:  l0000000000417321 l0000000000416E28
l0000000000417321:
	r9 = Mem0[rsp + 0xC8<64>:word64]
	eax = Mem0[r9 + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & 1<8>)
	C = false
	branch Test(EQ,Z) l0000000000416920
	// succ:  l0000000000417335 l0000000000416920
l0000000000417335:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(NE,Z) l000000000041744C
	// succ:  l000000000041733D l000000000041744C
l000000000041733D:
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 1<32>)
	branch Test(EQ,Z) l00000000004172B2
	// succ:  l0000000000417348 l00000000004172B2
l0000000000417348:
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rsp + 0xA4<64>:word32] = 0x11<32>
	Mem0[r9 + 0x18<64>:word32] = eax
	goto l0000000000416920
	// succ:  l0000000000416920
l000000000041735F:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	goto l00000000004162FF
	// succ:  l00000000004162FF
l0000000000417367:
	SCZO = cond(edx - 0xFFFFFFFF<32>)
	branch Test(LT,SO) l0000000000416244
	// succ:  l0000000000417370 l0000000000416244
l0000000000417370:
	rax = Mem0[rsp + 0xC8<64>:word64]
	Mem0[rsp + 0xA8<64>:word32] = 1<32>
	Mem0[rax + 0x14<64>:word32] = 1<32>
	Mem0[rax + 0x18<64>:word32] = 1<32>
	goto l0000000000416216
	// succ:  l0000000000416216
l0000000000417396:
	SCZO = cond(ebp - 0x10<32>)
	branch Test(GT,SZO) l00000000004173A2
	// succ:  l000000000041739B l00000000004173A2
l000000000041739B:
	eax = SLICE(rdx + rdx * 4<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(r8 + rax * 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l00000000004173A2
l00000000004173A2:
	r8 = Mem0[rsp + 0xC0<64>:word64]
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	goto l00000000004160CF
	// succ:  l00000000004160CF
l00000000004173B1:
	Mem0[rsp + 0xA4<64>:word32] = 0x11<32>
	goto l0000000000417309
	// succ:  l0000000000417309
l00000000004173C1:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	goto l00000000004163A8
	// succ:  l00000000004163A8
l00000000004173C8:
	edx = Mem0[rsp + 0x8C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(Mem0[rsp + 0x50<64>:word32] - edx)
	branch Test(NE,Z) l0000000000417499
	// succ:  l00000000004173D9 l0000000000417499
l00000000004173D9:
	rax = Mem0[rsp + 0xC8<64>:word64]
	Mem0[rsp + 0xA4<64>:word32] = 0x21<32>
	SCZO = cond(Mem0[rax + 0x14<64>:word32] - 1<32>)
	branch Test(NE,Z) l0000000000416920
	// succ:  l00000000004173F6 l0000000000416920
l00000000004173F6:
	SCZO = cond(Mem0[rax + 0x18<64>:word32] - 1<32>)
	eax = Mem0[rsp + 0x48<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l0000000000417406
	// succ:  l00000000004173FE_1 l0000000000417406
l00000000004173FE_1:
	eax = Mem0[rsp + 0x84<64>:word32]
	// succ:  l0000000000417406
l0000000000417406:
	Mem0[rsp + 0x84<64>:word32] = eax
	goto l0000000000416920
	// succ:  l0000000000416920
l0000000000417412:
	r8 = Mem0[rsp + 0x1A0<64>:word64]
	rdx = Mem0[rsp + 0x190<64>:word64]
	rcx = rbx
	call fn000000000041B820 (retsize: 8;)
	Mem0[rsp + 0xA4<64>:word32] = eax
	rax = Mem0[rsp + 0x190<64>:word64]
	eax = Mem0[rax + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	goto l0000000000415D10
	// succ:  l0000000000415D10
l0000000000417444:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	goto l0000000000416EF2
	// succ:  l0000000000416EF2
l000000000041744C:
	rcx = r9
	call fn0000000000415400 (retsize: 8;)
	edx = Mem0[rax + 0x14<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	ecx = Mem0[rsp + 0xA8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0xC8<64>:word64] = rax
	edx = edx - 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rdx = CONVERT(edx, word32, int64)
	Z = Mem0[rax + 0x18<64> + rdx * 4<64>:word32] == 0<32>
	edx = __bsr(Mem0[rax + 0x18<64> + rdx * 4<64>:word32])
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	eax = -eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	C = eax == 0<32>
	eax = eax & 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edx = edx ^ 0x1F<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(edx - eax)
	branch Test(EQ,Z) l0000000000417489
	// succ:  l000000000041747F l0000000000417489
l000000000041747F:
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	Mem0[rsp + 0xA8<64>:word32] = ecx
	// succ:  l0000000000417489
l0000000000417489:
	Mem0[rsp + 0xA4<64>:word32] = 0x21<32>
	goto l0000000000416920
	// succ:  l0000000000416920
l0000000000417499:
	Mem0[rsp + 0xA4<64>:word32] = 1<32>
	goto l000000000041714A
	// succ:  l000000000041714A
fn0000000000415960_exit:


// fn00000000004174B0
// Return size: 8
define fn00000000004174B0
fn00000000004174B0_entry:
	rsp = fp
	// succ:  l00000000004174B0
l00000000004174B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	ebx = CONVERT(cx, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	Mem0[rsp + 0x10<64>:word16] = r11w
	Mem0[rsp + 0xE<64>:word16] = r10w
	rcx = rsp
	rax = rsp + 0xE<64>
	rdx = rdx + 0xE<64>
	SCZO = cond(rdx)
	r11 = rsp + 2<64>
	goto l00000000004174F4
	// succ:  l00000000004174F4
l00000000004174E0:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rax = rax - 2<64>
	SCZO = cond(rax)
	rdx = rdx - 2<64>
	SCZO = cond(rdx)
	Mem0[rax:word16] = r9w
	SCZO = cond(rax - r11)
	branch Test(EQ,Z) l0000000000417540
	// succ:  l00000000004174F4 l0000000000417540
l00000000004174F4:
	r9d = CONVERT(Mem0[rdx + 2<64>:word16], word16, word32)
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9w & r9w)
	C = false
	branch Test(EQ,Z) l00000000004174E0
	// succ:  l00000000004174FF l00000000004174E0
l00000000004174FF:
	r10d = CONVERT(Mem0[rax + 2<64>:word16], word16, word32)
	r10 = CONVERT(r10d, word32, uint64)
	rax = rax - 2<64>
	SCZO = cond(rax)
	rdx = rdx - 2<64>
	SCZO = cond(rdx)
	r9d = r9d *s ebx
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	esi = CONVERT(r9w, word16, word32)
	rsi = CONVERT(esi, word32, uint64)
	r9d = r9d >>u 0x10<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	r10d = r10d + esi
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	esi = CONVERT(Mem0[rax + 2<64>:word16], word16, word32)
	rsi = CONVERT(esi, word32, uint64)
	Mem0[rax + 4<64>:word16] = r10w
	r10d = r10d >>u 0x10<32>
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	r9d = r9d + esi
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	r9d = r9d + r10d
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	Mem0[rax + 2<64>:word16] = r9w
	r9d = r9d >>u 0x10<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	Mem0[rax:word16] = r9w
	SCZO = cond(rax - r11)
	branch Test(NE,Z) l00000000004174F4
	// succ:  l0000000000417540 l00000000004174F4
l0000000000417540:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rcx = rcx + 4<64>
	SCZO = cond(rcx)
	// succ:  l0000000000417550
l0000000000417550:
	edx = CONVERT(Mem0[rcx + rax:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	Mem0[r8 + 4<64> + rax:word16] = dx
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 0xE<64>)
	branch Test(NE,Z) l0000000000417550
	// succ:  l0000000000417564 l0000000000417550
l0000000000417564:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004174B0_exit
fn00000000004174B0_exit:


// fn0000000000417570
// Return size: 8
define fn0000000000417570
fn0000000000417570_entry:
	rsp = fp
	// succ:  l0000000000417570
l0000000000417570:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l0000000000417644
	// succ:  l000000000041757A l0000000000417644
l000000000041757A:
	SCZO = cond(edx - 0xF<32>)
	r11 = rcx + 4<64>
	r10d = edx
	r10 = CONVERT(r10d, word32, uint64)
	r9 = rcx + 0x10<64>
	branch Test(LE,SZO) l00000000004175B8
	// succ:  l000000000041758A l00000000004175B8
l000000000041758A:
	// succ:  l0000000000417590
l0000000000417590:
	rax = r11
	// succ:  l0000000000417593
l0000000000417593:
	rax = rax + 2<64>
	SCZO = cond(rax)
	r8d = CONVERT(Mem0[rax:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(rax - r9)
	Mem0[rax - 2<64>:word16] = r8w
	branch Test(NE,Z) l0000000000417593
	// succ:  l00000000004175A5 l0000000000417593
l00000000004175A5:
	r10d = r10d - 0x10<32>
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r10d - 0xF<32>)
	Mem0[rcx + 0x10<64>:word16] = ax
	branch Test(GT,SZO) l0000000000417590
	// succ:  l00000000004175B5 l0000000000417590
l00000000004175B5:
	edx = edx & 0xF<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l00000000004175B8
l00000000004175B8:
	SCZO = cond(edx - 7<32>)
	branch Test(LE,SZO) l00000000004175F7
	// succ:  l00000000004175BD l00000000004175F7
l00000000004175BD:
	rax = rcx + 0x10<64>
	r10 = rcx + 2<64>
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	// succ:  l00000000004175D0
l00000000004175D0:
	r9d = CONVERT(Mem0[rax:word16], word16, word32)
	r9 = CONVERT(r9d, word32, uint64)
	rax = rax - 2<64>
	SCZO = cond(rax)
	r8d = r9d
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d << 8<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	r8d = r8d | r11d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	r11d = r9d
	r11 = CONVERT(r11d, word32, uint64)
	Mem0[rax + 2<64>:word16] = r8w
	r11w = r11w >>u 8<16>
	SCZO = cond(r11w)
	SCZO = cond(rax - r10)
	branch Test(NE,Z) l00000000004175D0
	// succ:  l00000000004175F4 l00000000004175D0
l00000000004175F4:
	edx = edx & 7<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l00000000004175F7
l00000000004175F7:
	SZO = cond(edx & edx)
	C = false
	r11 = rcx + 0x10<64>
	r10 = rcx + 2<64>
	branch Test(EQ,Z) l000000000041763F
	// succ:  l0000000000417603 l000000000041763F
l0000000000417603:
	r8 = r11
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000417610
l0000000000417610:
	ecx = CONVERT(Mem0[r8:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	r9d = eax
	r9 = CONVERT(r9d, word32, uint64)
	r9d = r9d | 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	SZO = cond(cx & cx)
	C = false
	branch Test(NS,S) l0000000000417622
	// succ:  l000000000041761E_1 l0000000000417622
l000000000041761E_1:
	eax = r9d
	// succ:  l0000000000417622
l0000000000417622:
	ecx = ecx + ecx
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	SZO = cond(al & 2<8>)
	C = false
	branch Test(EQ,Z) l000000000041762B
	// succ:  l0000000000417628 l000000000041762B
l0000000000417628:
	ecx = ecx | 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	// succ:  l000000000041762B
l000000000041762B:
	Mem0[r8:word16] = cx
	r8 = r8 - 2<64>
	SCZO = cond(r8)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(r8 - r10)
	branch Test(NE,Z) l0000000000417610
	// succ:  l000000000041763A l0000000000417610
l000000000041763A:
	edx = edx - 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	branch Test(NE,Z) l0000000000417603
	// succ:  l000000000041763F l0000000000417603
l000000000041763F:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000417570_exit
l0000000000417644:
	r10d = edx
	r10 = CONVERT(r10d, word32, uint64)
	r10d = -r10d
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	C = r10d == 0<32>
	SCZO = cond(r10d - 0xF<32>)
	branch Test(LE,SZO) l0000000000417742
	// succ:  l0000000000417654 l0000000000417742
l0000000000417654:
	r9 = rcx + 0x12<64>
	ebx = r10d
	rbx = CONVERT(ebx, word32, uint64)
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	// succ:  l0000000000417660
l0000000000417660:
	r11w = r11w | Mem0[rcx + 0x10<64>:word16]
	SZO = cond(r11w)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000417670
l0000000000417670:
	r8d = CONVERT(Mem0[rcx + 0xE<64> + rax:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[r9 - 2<64> + rax:word16] = r8w
	rax = rax - 2<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFF4<64>)
	branch Test(NE,Z) l0000000000417670
	// succ:  l0000000000417686 l0000000000417670
l0000000000417686:
	ebx = ebx - 0x10<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(ebx - 0xF<32>)
	Mem0[rcx + 4<64>:word16] = r8w
	branch Test(GT,SZO) l0000000000417660
	// succ:  l0000000000417696 l0000000000417660
l0000000000417696:
	al = 0xF0<8>
	r10d = r10d - 0x10<32>
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	r10d = r10d & 0xFFFFFFF0<32>
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	eax = eax - edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax - r10d
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	r10d = eax
	r10 = CONVERT(r10d, word32, uint64)
	// succ:  l00000000004176A8
l00000000004176A8:
	SCZO = cond(r10d - 7<32>)
	branch Test(LE,SZO) l00000000004176E4
	// succ:  l00000000004176AE l00000000004176E4
l00000000004176AE:
	edx = CONVERT(Mem0[rcx + 0x10<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = rcx + 4<64>
	r9 = rcx + 0x12<64>
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r11d = r11d | edx
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	// succ:  l00000000004176C0
l00000000004176C0:
	r8d = CONVERT(Mem0[rax:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	rax = rax + 2<64>
	SCZO = cond(rax)
	edx = r8d
	rdx = CONVERT(edx, word32, uint64)
	dx = dx >>u 8<16>
	SCZO = cond(dx)
	edx = edx | ebx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ebx = r8d
	rbx = CONVERT(ebx, word32, uint64)
	Mem0[rax - 2<64>:word16] = dx
	ebx = ebx << 8<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SCZO = cond(rax - r9)
	branch Test(NE,Z) l00000000004176C0
	// succ:  l00000000004176E0 l00000000004176C0
l00000000004176E0:
	r10d = r10d & 7<32>
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	// succ:  l00000000004176E4
l00000000004176E4:
	SZO = cond(r10d & r10d)
	C = false
	branch Test(EQ,Z) l0000000000417730
	// succ:  l00000000004176E9 l0000000000417730
l00000000004176E9:
	rsi = rcx + 4<64>
	r9 = rcx + 0x12<64>
	// succ:  l00000000004176F1
l00000000004176F1:
	eax = CONVERT(Mem0[rcx + 0x10<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r8 = rsi
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	r11d = r11d | eax
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000417700
l0000000000417700:
	edx = CONVERT(Mem0[r8:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	ebx = ebx | 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	SZO = cond(dl & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000041770F
	// succ:  l000000000041770C_1 l000000000041770F
l000000000041770C_1:
	eax = ebx
	// succ:  l000000000041770F
l000000000041770F:
	dx = dx >>u 1<16>
	SCZO = cond(dx)
	SZO = cond(al & 2<8>)
	C = false
	branch Test(EQ,Z) l000000000041771B
	// succ:  l0000000000417716 l000000000041771B
l0000000000417716:
	dx = dx | 0x8000<16>
	SZO = cond(dx)
	C = false
	// succ:  l000000000041771B
l000000000041771B:
	Mem0[r8:word16] = dx
	r8 = r8 + 2<64>
	SCZO = cond(r8)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(r8 - r9)
	branch Test(NE,Z) l0000000000417700
	// succ:  l000000000041772A l0000000000417700
l000000000041772A:
	r10d = r10d - 1<32>
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	branch Test(NE,Z) l00000000004176F1
	// succ:  l0000000000417730 l00000000004176F1
l0000000000417730:
	SZO = cond(r11w & r11w)
	C = false
	branch Test(EQ,Z) l000000000041763F
	// succ:  l000000000041773A l000000000041763F
l000000000041773A:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000417570_exit
l0000000000417742:
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	goto l00000000004176A8
	// succ:  l00000000004176A8
fn0000000000417570_exit:


// fn0000000000417750
// Return size: 8
define fn0000000000417750
fn0000000000417750_entry:
	rsp = fp
	// succ:  l0000000000417750
l0000000000417750:
	SCZO = cond(Mem0[rcx + 0xA<64>:word16] - 0<16>)
	r9 = rdx + 2<64>
	branch Test(SG,S) l00000000004177E1
	// succ:  l000000000041775F l00000000004177E1
l000000000041775F:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	Mem0[rdx:word16] = r8w
	// succ:  l0000000000417766
l0000000000417766:
	edx = CONVERT(Mem0[rcx + 0xA<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = rcx + 8<64>
	dx = dx & 0x7FFF<16>
	SZO = cond(dx)
	C = false
	SCZO = cond(dx - 0x7FFF<16>)
	Mem0[r9:word16] = dx
	branch Test(EQ,Z) l00000000004177B0
	// succ:  l000000000041777E l00000000004177B0
l000000000041777E:
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	rdx = r9 + 4<64>
	rcx = rcx - 2<64>
	SCZO = cond(rcx)
	Mem0[r9 + 2<64>:word16] = r11w
	// succ:  l000000000041778E
l000000000041778E:
	rax = rax - 2<64>
	SCZO = cond(rax)
	r8d = CONVERT(Mem0[rax + 2<64>:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	SCZO = cond(rax - rcx)
	Mem0[rdx - 2<64>:word16] = r8w
	branch Test(NE,Z) l000000000041778E
	// succ:  l00000000004177A5 l000000000041778E
l00000000004177A5:
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	Mem0[r9 + 0xE<64>:word16] = r10w
	return
	// succ:  fn0000000000417750_exit
l00000000004177B0:
	edx = CONVERT(Mem0[rcx + 0xA<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	dx = dx & 0x7FFF<16>
	SZO = cond(dx)
	C = false
	SCZO = cond(dx - 0x7FFF<16>)
	branch Test(EQ,Z) l00000000004177F0
	// succ:  l00000000004177C0 l00000000004177F0
l00000000004177C0:
	rax = r9 + 2<64>
	r9 = r9 + 0x10<64>
	SCZO = cond(r9)
	// succ:  l00000000004177D0
l00000000004177D0:
	rax = rax + 2<64>
	SCZO = cond(rax)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(rax - r9)
	Mem0[rax - 2<64>:word16] = dx
	branch Test(NE,Z) l00000000004177D0
	// succ:  l00000000004177DF l00000000004177D0
l00000000004177DF:
	return
	// succ:  fn0000000000417750_exit
l00000000004177E1:
	r10d = 0xFFFFFFFF<32>
	r10 = CONVERT(r10d, word32, uint64)
	Mem0[rdx:word16] = r10w
	goto l0000000000417766
	// succ:  l0000000000417766
l00000000004177F0:
	r8 = rcx + 0xA<64>
	rdx = rcx
	// succ:  l00000000004177F7
l00000000004177F7:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	SCZO = cond(Mem0[rdx - 2<64>:word16] - 0<16>)
	branch Test(NE,Z) l0000000000417809
	// succ:  l0000000000417802 l0000000000417809
l0000000000417802:
	SCZO = cond(rdx - r8)
	branch Test(NE,Z) l00000000004177F7
	// succ:  l0000000000417807 l00000000004177F7
l0000000000417807:
	goto l00000000004177C0
	// succ:  l00000000004177C0
l0000000000417809:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = r9 + 4<64>
	rcx = rcx - 4<64>
	SCZO = cond(rcx)
	Mem0[r9 + 2<64>:word16] = r8w
	// succ:  l0000000000417820
l0000000000417820:
	rax = rax - 2<64>
	SCZO = cond(rax)
	r8d = CONVERT(Mem0[rax + 2<64>:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	SCZO = cond(rax - rcx)
	Mem0[rdx - 2<64>:word16] = r8w
	branch Test(NE,Z) l0000000000417820
	// succ:  l0000000000417837 l0000000000417820
l0000000000417837:
	return
	// succ:  fn0000000000417750_exit
fn0000000000417750_exit:


// fn0000000000417840
// Return size: 8
define fn0000000000417840
fn0000000000417840_entry:
	rsp = fp
	// succ:  l0000000000417840
l0000000000417840:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	// succ:  l0000000000417850
l0000000000417850:
	r10d = CONVERT(Mem0[rdx + 0x10<64> + r8:word16], word16, word32)
	r10 = CONVERT(r10d, word32, uint64)
	eax = CONVERT(Mem0[rcx + 0x10<64> + r8:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax + r10d
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax + r9d
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	r9d = eax
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rdx + 0x10<64> + r8:word16] = ax
	r8 = r8 - 2<64>
	SCZO = cond(r8)
	r9d = r9d >>u 0x10<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	r9d = r9d & 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	SCZO = cond(r8 - 0xFFFFFFFFFFFFFFF2<64>)
	branch Test(NE,Z) l0000000000417850
	// succ:  l000000000041787D l0000000000417850
l000000000041787D:
	return
	// succ:  fn0000000000417840_exit
fn0000000000417840_exit:


// fn0000000000417880
// Return size: 8
define fn0000000000417880
fn0000000000417880_entry:
	rsp = fp
	// succ:  l0000000000417880
l0000000000417880:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	// succ:  l0000000000417890
l0000000000417890:
	eax = CONVERT(Mem0[rdx + 0x10<64> + r8:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r10d = CONVERT(Mem0[rcx + 0x10<64> + r8:word16], word16, word32)
	r10 = CONVERT(r10d, word32, uint64)
	eax = eax - r10d
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax - r9d
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	r9d = eax
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rdx + 0x10<64> + r8:word16] = ax
	r8 = r8 - 2<64>
	SCZO = cond(r8)
	r9d = r9d >>u 0x10<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	r9d = r9d & 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	SCZO = cond(r8 - 0xFFFFFFFFFFFFFFF2<64>)
	branch Test(NE,Z) l0000000000417890
	// succ:  l00000000004178BD l0000000000417890
l00000000004178BD:
	return
	// succ:  fn0000000000417880_exit
fn0000000000417880_exit:


// fn00000000004178C0
// Return size: 8
define fn00000000004178C0
fn00000000004178C0_entry:
	rsp = fp
	// succ:  l00000000004178C0
l00000000004178C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x98<64>
	SCZO = cond(rsp)
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r15 = rdx
	Mem0[rsp + 0x60<64>:word16] = bx
	Mem0[rsp + 0xE0<64>:word64] = rcx
	rbx = r15 + 4<64>
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	Mem0[rsp + 0x56<64>:word16] = cx
	Mem0[rsp + 0x50<64>:word16] = ax
	eax = CONVERT(Mem0[rdx + 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x5A<64>:word16] = r9w
	Mem0[rsp + 0x54<64>:word16] = dx
	rcx = rbx
	Mem0[rsp + 0x58<64>:word16] = r8w
	Mem0[rsp + 0x5C<64>:word16] = r10w
	Mem0[rsp + 0x5E<64>:word16] = r11w
	Mem0[rsp + 0x52<64>:word16] = ax
	rax = r15 + 0x12<64>
	r9 = rax
	Mem0[rsp + 0x38<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000417940
l0000000000417940:
	edx = CONVERT(Mem0[rcx:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d | 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SZO = cond(dl & 1<8>)
	C = false
	branch Test(EQ,Z) l0000000000417951
	// succ:  l000000000041794D_1 l0000000000417951
l000000000041794D_1:
	eax = r8d
	// succ:  l0000000000417951
l0000000000417951:
	dx = dx >>u 1<16>
	SCZO = cond(dx)
	SZO = cond(al & 2<8>)
	C = false
	branch Test(EQ,Z) l000000000041795D
	// succ:  l0000000000417958 l000000000041795D
l0000000000417958:
	dx = dx | 0x8000<16>
	SZO = cond(dx)
	C = false
	// succ:  l000000000041795D
l000000000041795D:
	Mem0[rcx:word16] = dx
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(rcx - r9)
	branch Test(NE,Z) l0000000000417940
	// succ:  l000000000041796B l0000000000417940
l000000000041796B:
	rax = Mem0[rsp + 0xE0<64>:word64]
	r13 = rsp + 0x50<64>
	r12 = r15 + 0x10<64>
	rbp = rsp + 0x70<64>
	rsi = r13
	Mem0[rsp + 0x40<64>:word64] = r13
	r13 = r12
	eax = CONVERT(Mem0[rax + 6<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r12 = Mem0[rsp + 0xE0<64>:word64]
	r14 = rbp + 4<64>
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	Mem0[rsp + 0x48<64>:word32] = eax
	eax = eax << 0x10<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax - edi
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rsp + 0x34<64>:word32] = eax
	rax = rsp + 0x5E<64>
	Mem0[rsp + 0x28<64>:word64] = rax
	// succ:  l00000000004179B5
l00000000004179B5:
	eax = CONVERT(Mem0[r15 + 4<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = CONVERT(Mem0[r15 + 6<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	edi = 0xFFFFFFFF<32>
	rdi = CONVERT(edi, word32, uint64)
	eax = eax << 0x10<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax + ecx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - Mem0[rsp + 0x34<64>:word32])
	ecx = 0xFFFF<32>
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(UGT,CZ) l00000000004179DF
	// succ:  l00000000004179D4 l00000000004179DF
l00000000004179D4:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	v43 = edx_eax
	edx = CONVERT(v43 % Mem0[rsp + 0x48<64>:word32], word64, uint32)
	eax = CONVERT(v43 /u Mem0[rsp + 0x48<64>:word32], word32, uint32)
	SCZO = cond(eax)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	ecx = CONVERT(ax, word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	// succ:  l00000000004179DF
l00000000004179DF:
	r8 = rbp
	rdx = r12
	call fn00000000004174B0 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l00000000004179F0
l00000000004179F0:
	edx = CONVERT(Mem0[r14 + rax:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	ecx = CONVERT(Mem0[r15 + 4<64> + rax:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(dx - cx)
	branch Test(NE,Z) l0000000000417AA0
	// succ:  l0000000000417A04 l0000000000417AA0
l0000000000417A04:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 0xE<64>)
	branch Test(NE,Z) l00000000004179F0
	// succ:  l0000000000417A0E l00000000004179F0
l0000000000417A0E:
	rdx = r15
	rcx = rbp
	call fn0000000000417880 (retsize: 8;)
	Mem0[rsi + 4<64>:word16] = di
	rax = rbx
	// succ:  l0000000000417A20
l0000000000417A20:
	rax = rax + 2<64>
	SCZO = cond(rax)
	edx = CONVERT(Mem0[rax:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(rax - r13)
	Mem0[rax - 2<64>:word16] = dx
	branch Test(NE,Z) l0000000000417A20
	// succ:  l0000000000417A30 l0000000000417A20
l0000000000417A30:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsi = rsi + 2<64>
	SCZO = cond(rsi)
	SCZO = cond(rsi - Mem0[rsp + 0x28<64>:word64])
	Mem0[r15 + 0x10<64>:word16] = ax
	branch Test(NE,Z) l00000000004179B5
	// succ:  l0000000000417A46 l00000000004179B5
l0000000000417A46:
	r13 = Mem0[rsp + 0x40<64>:word64]
	rdx = Mem0[rsp + 0x38<64>:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000417A52
l0000000000417A52:
	rbx = rbx + 2<64>
	SCZO = cond(rbx)
	ax = ax | Mem0[rbx - 2<64>:word16]
	SZO = cond(ax)
	C = false
	SCZO = cond(rbx - rdx)
	branch Test(NE,Z) l0000000000417A52
	// succ:  l0000000000417A5F l0000000000417A52
l0000000000417A5F:
	SZO = cond(ax & ax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l0000000000417A70
l0000000000417A70:
	ecx = CONVERT(Mem0[r13 + 0<64> + rdx:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[r15 + rdx:word16] = cx
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	SCZO = cond(rdx - 0x12<64>)
	branch Test(NE,Z) l0000000000417A70
	// succ:  l0000000000417A85 l0000000000417A70
l0000000000417A85:
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x98<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004178C0_exit
l0000000000417AA0:
	SCZO = cond(cx - dx)
	branch Test(UGE,C) l0000000000417A0E
	// succ:  l0000000000417AA9 l0000000000417A0E
l0000000000417AA9:
	r8d = SLICE(rdi - 1<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rcx = r12
	Mem0[rsp + 0x4C<64>:word32] = r8d
	call fn0000000000417880 (retsize: 8;)
	r8d = Mem0[rsp + 0x4C<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000417AC4
l0000000000417AC4:
	edx = CONVERT(Mem0[r14 + rax:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	ecx = CONVERT(Mem0[r15 + 4<64> + rax:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(dx - cx)
	branch Test(NE,Z) l0000000000417AF0
	// succ:  l0000000000417AD4 l0000000000417AF0
l0000000000417AD4:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 0xE<64>)
	branch Test(NE,Z) l0000000000417AC4
	// succ:  l0000000000417ADE l0000000000417AC4
l0000000000417ADE:
	edi = r8d
	rdi = CONVERT(edi, word32, uint64)
	goto l0000000000417A0E
	// succ:  l0000000000417A0E
l0000000000417AF0:
	SCZO = cond(cx - dx)
	branch Test(UGE,C) l0000000000417ADE
	// succ:  l0000000000417AF5 l0000000000417ADE
l0000000000417AF5:
	rdx = rbp
	rcx = r12
	edi = edi - 2<32>
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	call fn0000000000417880 (retsize: 8;)
	goto l0000000000417A0E
	// succ:  l0000000000417A0E
fn00000000004178C0_exit:


// fn0000000000417B10
// Return size: 8
define fn0000000000417B10
fn0000000000417B10_entry:
	rsp = fp
	// succ:  l0000000000417B10
l0000000000417B10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdi = rsp + 0x40<64>
	r12 = rdx
	Mem0[rsp + 0x40<64>:word16] = ax
	eax = CONVERT(Mem0[rdx + 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdi + 0xE<64>
	Mem0[rsp + 0x42<64>:word16] = ax
	rax = rdi
	// succ:  l0000000000417B40
l0000000000417B40:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rax + 2<64>:word16] = r8w
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000417B40
	// succ:  l0000000000417B51 l0000000000417B40
l0000000000417B51:
	rsi = rcx + 0xE<64>
	r14 = rcx + 2<64>
	rbp = rsp + 0x20<64>
	rbx = rdi + 4<64>
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	// succ:  l0000000000417B65
l0000000000417B65:
	r9d = CONVERT(Mem0[rsi + 2<64>:word16], word16, word32)
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9w & r9w)
	C = false
	branch Test(NE,Z) l0000000000417BD0
	// succ:  l0000000000417B70 l0000000000417BD0
l0000000000417B70:
	r13w = r13w | Mem0[rsp + 0x50<64>:word16]
	SZO = cond(r13w)
	C = false
	r9 = rdi + 0x10<64>
	// succ:  l0000000000417B80
l0000000000417B80:
	r9 = r9 - 2<64>
	SCZO = cond(r9)
	r10d = CONVERT(Mem0[r9:word16], word16, word32)
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r9 - rbx)
	Mem0[r9 + 2<64>:word16] = r10w
	branch Test(NE,Z) l0000000000417B80
	// succ:  l0000000000417B92 l0000000000417B80
l0000000000417B92:
	rsi = rsi - 2<64>
	SCZO = cond(rsi)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(rsi - r14)
	Mem0[rsp + 0x44<64>:word16] = ax
	branch Test(NE,Z) l0000000000417B65
	// succ:  l0000000000417BA2 l0000000000417B65
l0000000000417BA2:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	// succ:  l0000000000417BA4
l0000000000417BA4:
	r8d = CONVERT(Mem0[rdi + rcx:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[r12 + rcx:word16] = r8w
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	SCZO = cond(rcx - 0x12<64>)
	branch Test(NE,Z) l0000000000417BA4
	// succ:  l0000000000417BB8 l0000000000417BA4
l0000000000417BB8:
	eax = CONVERT(r13w, word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000417B10_exit
l0000000000417BD0:
	ecx = CONVERT(r9w, word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rdx = r12
	r8 = rbp
	call fn00000000004174B0 (retsize: 8;)
	rdx = rdi
	rcx = rbp
	call fn0000000000417840 (retsize: 8;)
	goto l0000000000417B70
	// succ:  l0000000000417B70
fn0000000000417B10_exit:


// fn0000000000417BF0
// Return size: 8
define fn0000000000417BF0
fn0000000000417BF0_entry:
	rsp = fp
	// succ:  l0000000000417BF0
l0000000000417BF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	eax = CONVERT(Mem0[rcx + 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	r8w = r8w & 0x7FFF<16>
	SZO = cond(r8w)
	C = false
	SCZO = cond(r8w - 0x7FFF<16>)
	branch Test(EQ,Z) l0000000000417CB2
	// succ:  l0000000000417C0A l0000000000417CB2
l0000000000417C0A:
	SZO = cond(ax & ax)
	C = false
	branch Test(EQ,Z) l0000000000417CD0
	// succ:  l0000000000417C13 l0000000000417CD0
l0000000000417C13:
	r10 = rcx + 4<64>
	// succ:  l0000000000417C17
l0000000000417C17:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rax = rdx + 6<64>
	Mem0[rdx + 0xA<64>:word16] = r9w
	SCZO = cond(Mem0[rcx:word16] - 0<16>)
	r8d = CONVERT(Mem0[rcx + 2<64>:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	branch Test(NE,Z) l0000000000417C62
	// succ:  l0000000000417C2E l0000000000417C62
l0000000000417C2E:
	Mem0[rdx + 8<64>:word16] = r8w
	edx = CONVERT(Mem0[rcx + 2<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	dx = dx & 0x7FFF<16>
	SZO = cond(dx)
	C = false
	SCZO = cond(dx - 0x7FFF<16>)
	branch Test(EQ,Z) l0000000000417C7D
	// succ:  l0000000000417C43 l0000000000417C7D
l0000000000417C43:
	rdx = r10 + 2<64>
	r10 = r10 + 0xA<64>
	SCZO = cond(r10)
	// succ:  l0000000000417C4B
l0000000000417C4B:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	ecx = CONVERT(Mem0[rdx - 2<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rax = rax - 2<64>
	SCZO = cond(rax)
	Mem0[rax + 2<64>:word16] = cx
	SCZO = cond(rdx - r10)
	branch Test(NE,Z) l0000000000417C4B
	// succ:  l0000000000417C60 l0000000000417C4B
l0000000000417C60:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000417BF0_exit
l0000000000417C62:
	r8w = r8w | 0x8000<16>
	SZO = cond(r8w)
	C = false
	Mem0[rdx + 8<64>:word16] = r8w
	edx = CONVERT(Mem0[rcx + 2<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	dx = dx & 0x7FFF<16>
	SZO = cond(dx)
	C = false
	SCZO = cond(dx - 0x7FFF<16>)
	branch Test(NE,Z) l0000000000417C43
	// succ:  l0000000000417C7D l0000000000417C43
l0000000000417C7D:
	rdx = rcx + 6<64>
	rcx = rcx + 0x12<64>
	SCZO = cond(rcx)
	// succ:  l0000000000417C85
l0000000000417C85:
	SCZO = cond(Mem0[rdx:word16] - 0<16>)
	branch Test(NE,Z) l0000000000417C43
	// succ:  l0000000000417C8B l0000000000417C43
l0000000000417C8B:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000417C85
	// succ:  l0000000000417C94 l0000000000417C85
l0000000000417C94:
	ebx = 0xFFFF8000<32>
	rbx = CONVERT(ebx, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	Mem0[rax:word16] = bx
	Mem0[rax - 2<64>:word16] = dx
	Mem0[rax - 4<64>:word16] = cx
	Mem0[rax - 6<64>:word16] = r8w
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000417BF0_exit
l0000000000417CB2:
	rax = rcx + 6<64>
	r8 = rcx + 0x12<64>
	// succ:  l0000000000417CBA
l0000000000417CBA:
	SCZO = cond(Mem0[rax:word16] - 0<16>)
	branch Test(NE,Z) l0000000000417D15
	// succ:  l0000000000417CC0 l0000000000417D15
l0000000000417CC0:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(rax - r8)
	branch Test(NE,Z) l0000000000417CBA
	// succ:  l0000000000417CC9 l0000000000417CBA
l0000000000417CC9:
	goto l0000000000417C13
	// succ:  l0000000000417C13
l0000000000417CD0:
	r10 = rcx + 4<64>
	rbx = rcx + 0x12<64>
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	r9 = r10
	// succ:  l0000000000417CE0
l0000000000417CE0:
	r8d = CONVERT(Mem0[r9:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	r11d = eax
	r11 = CONVERT(r11d, word32, uint64)
	r11d = r11d | 1<32>
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	SZO = cond(r8b & 1<8>)
	C = false
	branch Test(EQ,Z) l0000000000417CF3
	// succ:  l0000000000417CEF_1 l0000000000417CF3
l0000000000417CEF_1:
	eax = r11d
	// succ:  l0000000000417CF3
l0000000000417CF3:
	r8w = r8w >>u 1<16>
	SCZO = cond(r8w)
	SZO = cond(al & 2<8>)
	C = false
	branch Test(EQ,Z) l0000000000417D01
	// succ:  l0000000000417CFB l0000000000417D01
l0000000000417CFB:
	r8w = r8w | 0x8000<16>
	SZO = cond(r8w)
	C = false
	// succ:  l0000000000417D01
l0000000000417D01:
	Mem0[r9:word16] = r8w
	r9 = r9 + 2<64>
	SCZO = cond(r9)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(r9 - rbx)
	branch Test(NE,Z) l0000000000417CE0
	// succ:  l0000000000417D10 l0000000000417CE0
l0000000000417D10:
	goto l0000000000417C17
	// succ:  l0000000000417C17
l0000000000417D15:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	r9d = 0xFFFFC000<32>
	r9 = CONVERT(r9d, word32, uint64)
	r10d = 0x7FFF<32>
	r10 = CONVERT(r10d, word32, uint64)
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	Mem0[rdx:word16] = ax
	Mem0[rdx + 2<64>:word16] = cx
	Mem0[rdx + 4<64>:word16] = r8w
	Mem0[rdx + 6<64>:word16] = r9w
	Mem0[rdx + 8<64>:word16] = r10w
	Mem0[rdx + 0xA<64>:word16] = r11w
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000417BF0_exit
fn0000000000417BF0_exit:


// fn0000000000417D50
// Return size: 8
define fn0000000000417D50
fn0000000000417D50_entry:
	rsp = fp
	// succ:  l0000000000417D50
l0000000000417D50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = rcx
	ecx = CONVERT(Mem0[rcx + 0xA<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	cx = cx & 0x7FFF<16>
	SZO = cond(cx)
	C = false
	SCZO = cond(cx - 0x7FFF<16>)
	branch Test(EQ,Z) l0000000000417DE3
	// succ:  l0000000000417D6A l0000000000417DE3
l0000000000417D6A:
	ecx = CONVERT(Mem0[rdx + 0xA<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	cx = cx & 0x7FFF<16>
	SZO = cond(cx)
	C = false
	SCZO = cond(cx - 0x7FFF<16>)
	branch Test(EQ,Z) l0000000000417E12
	// succ:  l0000000000417D7E l0000000000417E12
l0000000000417D7E:
	rsi = rsp + 0x20<64>
	rdi = rsp + 0x40<64>
	rcx = rax
	rbx = rdx
	rdx = rsi
	call fn0000000000417750 (retsize: 8;)
	rdx = rdi
	rcx = rbx
	call fn0000000000417750 (retsize: 8;)
	r8d = CONVERT(Mem0[rsp + 0x20<64>:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rcx = rsi + 2<64>
	SCZO = cond(r8w - Mem0[rsp + 0x40<64>:word16])
	rdx = rdi + 2<64>
	branch Test(EQ,Z) l0000000000417E30
	// succ:  l0000000000417DB9 l0000000000417E30
l0000000000417DB9:
	SCZO = cond(Mem0[rcx + rax:word16] - 0<16>)
	branch Test(NE,Z) l0000000000417E70
	// succ:  l0000000000417DC4 l0000000000417E70
l0000000000417DC4:
	SCZO = cond(Mem0[rdx + rax:word16] - 0<16>)
	branch Test(NE,Z) l0000000000417E70
	// succ:  l0000000000417DCF l0000000000417E70
l0000000000417DCF:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 0xE<64>)
	branch Test(NE,Z) l0000000000417DB9
	// succ:  l0000000000417DD9 l0000000000417DB9
l0000000000417DD9:
	al = al ^ al
	SZO = cond(al)
	C = false
	// succ:  l0000000000417DDB
l0000000000417DDB:
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000417D50_exit
l0000000000417DE3:
	r8 = rax + 0xA<64>
	rcx = rax
	// succ:  l0000000000417DEA
l0000000000417DEA:
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	SCZO = cond(Mem0[rcx - 2<64>:word16] - 0<16>)
	branch Test(NE,Z) l0000000000417E85
	// succ:  l0000000000417DF9 l0000000000417E85
l0000000000417DF9:
	SCZO = cond(rcx - r8)
	branch Test(NE,Z) l0000000000417DEA
	// succ:  l0000000000417DFE l0000000000417DEA
l0000000000417DFE:
	ecx = CONVERT(Mem0[rdx + 0xA<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	cx = cx & 0x7FFF<16>
	SZO = cond(cx)
	C = false
	SCZO = cond(cx - 0x7FFF<16>)
	branch Test(NE,Z) l0000000000417D7E
	// succ:  l0000000000417E12 l0000000000417D7E
l0000000000417E12:
	r8 = rdx + 0xA<64>
	rcx = rdx
	// succ:  l0000000000417E19
l0000000000417E19:
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	SCZO = cond(Mem0[rcx - 2<64>:word16] - 0<16>)
	branch Test(NE,Z) l0000000000417E85
	// succ:  l0000000000417E24 l0000000000417E85
l0000000000417E24:
	SCZO = cond(rcx - r8)
	branch Test(NE,Z) l0000000000417E19
	// succ:  l0000000000417E29 l0000000000417E19
l0000000000417E29:
	goto l0000000000417D7E
	// succ:  l0000000000417D7E
l0000000000417E30:
	SCZO = cond(r8w - 1<16>)
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rsi = rsi + 2<64>
	SCZO = cond(rsi)
	eax = eax & 2<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	// succ:  l0000000000417E43
l0000000000417E43:
	edx = CONVERT(Mem0[rsi + rcx:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	r8d = CONVERT(Mem0[rdi + rcx:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(dx - r8w)
	branch Test(NE,Z) l0000000000417E92
	// succ:  l0000000000417E56 l0000000000417E92
l0000000000417E56:
	SCZO = cond(rcx - 0xE<64>)
	branch Test(NE,Z) l0000000000417E43
	// succ:  l0000000000417E5C l0000000000417E43
l0000000000417E5C:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000417D50_exit
l0000000000417E70:
	SCZO = cond(r8w - 1<16>)
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & 2<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000417D50_exit
l0000000000417E85:
	eax = 0xFFFFFFFE<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000417D50_exit
l0000000000417E92:
	SCZO = cond(r8w - dx)
	dl = CONVERT(Test(UGE,C), bool, int8)
	edx = CONVERT(dl, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	ecx = -ecx
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	C = ecx == 0<32>
	eax = eax ^ ecx
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax + edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	goto l0000000000417DDB
	// succ:  l0000000000417DDB
fn0000000000417D50_exit:


// fn0000000000417EB0
// Return size: 8
define fn0000000000417EB0
fn0000000000417EB0_entry:
	rsp = fp
	// succ:  l0000000000417EB0
l0000000000417EB0:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000417EC0
	// succ:  l0000000000417EB4 l0000000000417EC0
l0000000000417EB4:
	// succ:  l0000000000417EB4_thunk_fn0000000000417570
l0000000000417EB4_thunk_fn0000000000417570:
	call fn0000000000417570 (retsize: 0;)
	return
	// succ:  fn0000000000417EB0_exit
l0000000000417EC0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000417EB0_exit
fn0000000000417EB0_exit:


// fn0000000000417ED0
// Return size: 8
define fn0000000000417ED0
fn0000000000417ED0_entry:
	rsp = fp
	// succ:  l0000000000417ED0
l0000000000417ED0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	edx = CONVERT(Mem0[rcx + 4<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(dx & dx)
	C = false
	branch Test(NE,Z) l0000000000417F30
	// succ:  l0000000000417EDA l0000000000417F30
l0000000000417EDA:
	edx = CONVERT(Mem0[rcx + 6<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(dx & dx)
	C = false
	branch Test(SG,S) l0000000000417FD6
	// succ:  l0000000000417EE7 l0000000000417FD6
l0000000000417EE7:
	r8 = rcx + 0x12<64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	// succ:  l0000000000417EEE
l0000000000417EEE:
	SZO = cond(dx & dx)
	C = false
	branch Test(NE,Z) l0000000000417FDA
	// succ:  l0000000000417EF7 l0000000000417FDA
l0000000000417EF7:
	rax = rcx + 6<64>
	goto l0000000000417F03
	// succ:  l0000000000417F03
l0000000000417F00:
	edx = CONVERT(Mem0[rax:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000417F03
l0000000000417F03:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rax - 4<64>:word16] = dx
	SCZO = cond(rax - r8)
	branch Test(NE,Z) l0000000000417F00
	// succ:  l0000000000417F10 l0000000000417F00
l0000000000417F10:
	r9d = r9d + 0x10<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r9d - 0x60<32>)
	Mem0[rcx + 0x10<64>:word16] = ax
	branch Test(EQ,Z) l0000000000417FCF
	// succ:  l0000000000417F24 l0000000000417FCF
l0000000000417F24:
	edx = CONVERT(Mem0[rcx + 6<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000417EEE
	// succ:  l0000000000417EEE
l0000000000417F30:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(dx & 0xFF00<16>)
	C = false
	branch Test(NE,Z) l0000000000417F93
	// succ:  l0000000000417F39 l0000000000417F93
l0000000000417F39:
	SZO = cond(dx & dx)
	C = false
	r11 = rcx + 0x12<64>
	branch Test(EQ,Z) l0000000000417F91
	// succ:  l0000000000417F42 l0000000000417F91
l0000000000417F42:
	r9 = rcx + 4<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	goto l0000000000417F54
	// succ:  l0000000000417F54
l0000000000417F50:
	edx = CONVERT(Mem0[r9:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000417F54
l0000000000417F54:
	r10d = r8d
	r10 = CONVERT(r10d, word32, uint64)
	r10d = r10d | 1<32>
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	SZO = cond(dl & 1<8>)
	C = false
	branch Test(EQ,Z) l0000000000417F62
	// succ:  l0000000000417F5E_1 l0000000000417F62
l0000000000417F5E_1:
	r8d = r10d
	// succ:  l0000000000417F62
l0000000000417F62:
	dx = dx >>u 1<16>
	SCZO = cond(dx)
	SZO = cond(r8b & 2<8>)
	C = false
	branch Test(EQ,Z) l0000000000417F70
	// succ:  l0000000000417F6B l0000000000417F70
l0000000000417F6B:
	dx = dx | 0x8000<16>
	SZO = cond(dx)
	C = false
	// succ:  l0000000000417F70
l0000000000417F70:
	Mem0[r9:word16] = dx
	r9 = r9 + 2<64>
	SCZO = cond(r9)
	r8d = r8d + r8d
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	SCZO = cond(r9 - r11)
	branch Test(NE,Z) l0000000000417F50
	// succ:  l0000000000417F80 l0000000000417F50
l0000000000417F80:
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - 0xFFFFFFAF<32>)
	branch Test(EQ,Z) l0000000000417F91
	// succ:  l0000000000417F88 l0000000000417F91
l0000000000417F88:
	edx = CONVERT(Mem0[rcx + 4<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(dx & dx)
	C = false
	branch Test(NE,Z) l0000000000417F42
	// succ:  l0000000000417F91 l0000000000417F42
l0000000000417F91:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000417ED0_exit
l0000000000417F93:
	rax = rcx + 4<64>
	r10 = rcx + 0x12<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	goto l0000000000417FA6
	// succ:  l0000000000417FA6
l0000000000417FA0:
	edx = CONVERT(Mem0[rax:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8d = r9d
	r8 = CONVERT(r8d, word32, uint64)
	// succ:  l0000000000417FA6
l0000000000417FA6:
	r9d = edx
	r9 = CONVERT(r9d, word32, uint64)
	dx = dx >>u 8<16>
	SCZO = cond(dx)
	rax = rax + 2<64>
	SCZO = cond(rax)
	edx = edx | r8d
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r9d = r9d << 8<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	Mem0[rax - 2<64>:word16] = dx
	SCZO = cond(rax - r10)
	branch Test(NE,Z) l0000000000417FA0
	// succ:  l0000000000417FC1 l0000000000417FA0
l0000000000417FC1:
	edx = CONVERT(Mem0[rcx + 4<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	eax = 0xFFFFFFF8<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000417F39
	// succ:  l0000000000417F39
l0000000000417FCF:
	eax = 0x60<32>
	rax = CONVERT(eax, word32, uint64)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000417ED0_exit
l0000000000417FD6:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000417ED0_exit
l0000000000417FDA:
	SZO = cond(dx & 0xFF00<16>)
	C = false
	branch Test(NE,Z) l0000000000418031
	// succ:  l0000000000417FE1 l0000000000418031
l0000000000417FE1:
	rbx = rcx + 0x10<64>
	r11 = rcx + 2<64>
	// succ:  l0000000000417FF0
l0000000000417FF0:
	rax = rbx
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	// succ:  l0000000000418000
l0000000000418000:
	r8d = CONVERT(Mem0[rax:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	rax = rax - 2<64>
	SCZO = cond(rax)
	edx = r8d
	rdx = CONVERT(edx, word32, uint64)
	r8w = r8w >>u 8<16>
	SCZO = cond(r8w)
	edx = edx << 8<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx | r10d
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r10d = r8d
	r10 = CONVERT(r10d, word32, uint64)
	Mem0[rax + 2<64>:word16] = dx
	SCZO = cond(rax - r11)
	branch Test(NE,Z) l0000000000418000
	// succ:  l0000000000418022 l0000000000418000
l0000000000418022:
	edx = CONVERT(Mem0[rcx + 6<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r9d = r9d + 8<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	SZO = cond(dx & 0xFF00<16>)
	C = false
	branch Test(EQ,Z) l0000000000417FF0
	// succ:  l0000000000418031 l0000000000417FF0
l0000000000418031:
	r11 = rcx + 2<64>
	// succ:  l0000000000418035
l0000000000418035:
	SZO = cond(dx & dx)
	C = false
	branch Test(SG,S) l000000000041807A
	// succ:  l000000000041803A l000000000041807A
l000000000041803A:
	r8 = rcx + 0x10<64>
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000418040
l0000000000418040:
	edx = CONVERT(Mem0[r8:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r10d = eax
	r10 = CONVERT(r10d, word32, uint64)
	r10d = r10d | 1<32>
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	SZO = cond(dx & dx)
	C = false
	branch Test(NS,S) l0000000000418052
	// succ:  l000000000041804E_1 l0000000000418052
l000000000041804E_1:
	eax = r10d
	// succ:  l0000000000418052
l0000000000418052:
	edx = edx + edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SZO = cond(al & 2<8>)
	C = false
	branch Test(EQ,Z) l000000000041805B
	// succ:  l0000000000418058 l000000000041805B
l0000000000418058:
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l000000000041805B
l000000000041805B:
	Mem0[r8:word16] = dx
	r8 = r8 - 2<64>
	SCZO = cond(r8)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(r8 - r11)
	branch Test(NE,Z) l0000000000418040
	// succ:  l000000000041806A l0000000000418040
l000000000041806A:
	r9d = r9d + 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	SCZO = cond(r9d - 0x60<32>)
	branch Test(GT,SZO) l000000000041807A
	// succ:  l0000000000418074 l000000000041807A
l0000000000418074:
	edx = CONVERT(Mem0[rcx + 6<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000418035
	// succ:  l0000000000418035
l000000000041807A:
	eax = r9d
	rax = CONVERT(eax, word32, uint64)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000417ED0_exit
fn0000000000417ED0_exit:


// fn0000000000418080
// Return size: 8
define fn0000000000418080
fn0000000000418080_entry:
	rsp = fp
	// succ:  l0000000000418080
l0000000000418080:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	ebp = r9d
	rbp = CONVERT(ebp, word32, uint64)
	Mem0[rsp + 0x30<64>:word16] = r14w
	Mem0[rsp + 0x28<64>:word64] = 0<64>
	r14d = ebp
	r14 = CONVERT(r14d, word32, uint64)
	rbx = rcx
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	edi = r8d
	rdi = CONVERT(edi, word32, uint64)
	Mem0[rsp + 0x20<64>:word64] = 0<64>
	Mem0[rsp + 0x2E<64>:word16] = ax
	call fn0000000000417ED0 (retsize: 8;)
	r14d = r14d - eax
	r14 = CONVERT(r14d, word32, uint64)
	SCZO = cond(r14d)
	SCZO = cond(r14d - 0x7FFE<32>)
	branch Test(GT,SZO) l00000000004180DB
	// succ:  l00000000004180D2 l00000000004180DB
l00000000004180D2:
	SCZO = cond(eax - 0x50<32>)
	branch Test(GT,SZO) l00000000004181D0
	// succ:  l00000000004180DB l00000000004181D0
l00000000004180DB:
	SZO = cond(r14d & r14d)
	C = false
	branch Test(SG,S) l0000000000418253
	// succ:  l00000000004180E4 l0000000000418253
l00000000004180E4:
	r13d = Mem0[rsp + 0xA0<64>:word32]
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l0000000000418167
	// succ:  l00000000004180F1 l0000000000418167
l00000000004180F1:
	SCZO = cond(Mem0[rsp + 0xA8<64>:word32] - 0x40<32>)
	branch Test(EQ,Z) l0000000000418300
	// succ:  l00000000004180FF l0000000000418300
l00000000004180FF:
	r8d = 0x10<32>
	r8 = CONVERT(r8d, word32, uint64)
	r10d = 7<32>
	r10 = CONVERT(r10d, word32, uint64)
	r11d = 8<32>
	r11 = CONVERT(r11d, word32, uint64)
	// succ:  l0000000000418111
l0000000000418111:
	SZO = cond(r14d & r14d)
	C = false
	bpl = CONVERT(Test(LE,SZO), bool, int8)
	SCZO = cond(Mem0[rsp + 0xA8<64>:word32] - 0x50<32>)
	al = CONVERT(Test(NE,Z), bool, int8)
	bpl = bpl & al
	SZO = cond(bpl)
	C = false
	branch Test(NE,Z) l0000000000418280
	// succ:  l000000000041812C l0000000000418280
l000000000041812C:
	SCZO = cond(Mem0[rsp + 0xA8<64>:word32] - 0x4F<32>)
	rcx = rbx + r8
	eax = CONVERT(Mem0[rcx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	branch Test(LE,SZO) l00000000004181F0
	// succ:  l0000000000418141 l00000000004181F0
l0000000000418141:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	SZO = cond(ax & ax)
	C = false
	Mem0[rcx:word16] = r9w
	branch Test(SG,S) l0000000000418330
	// succ:  l0000000000418151 l0000000000418330
l0000000000418151:
	SZO = cond(bpl & bpl)
	C = false
	branch Test(NE,Z) l00000000004182C3
	// succ:  l000000000041815A l00000000004182C3
l000000000041815A:
	eax = CONVERT(Mem0[rbx + 4<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(ax & ax)
	C = false
	branch Test(NE,Z) l0000000000418214
	// succ:  l0000000000418167 l0000000000418214
l0000000000418167:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(r14d - 0x7FFE<32>)
	Mem0[rbx + 0x10<64>:word16] = r8w
	branch Test(LE,SZO) l00000000004181B0
	// succ:  l0000000000418178 l00000000004181B0
l0000000000418178:
	ecx = 0x7FFF<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = rbx + 4<64>
	rbx = rbx + 0x10<64>
	SCZO = cond(rbx)
	Mem0[rbx - 0xE<64>:word16] = cx
	// succ:  l0000000000418190
l0000000000418190:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rax - 2<64>:word16] = dx
	SCZO = cond(rax - rbx)
	branch Test(NE,Z) l0000000000418190
	// succ:  l000000000041819F l0000000000418190
l000000000041819F:
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000418080_exit
l00000000004181B0:
	SZO = cond(r14d & r14d)
	C = false
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(SG,S) l00000000004181BC
	// succ:  l00000000004181B8_1 l00000000004181BC
l00000000004181B8_1:
	eax = r14d
	// succ:  l00000000004181BC
l00000000004181BC:
	Mem0[rbx + 2<64>:word16] = ax
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000418080_exit
l00000000004181D0:
	Mem0[rbx + 2<64>:word64] = 0<64>
	Mem0[rbx + 0xA<64>:word64] = 0<64>
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000418080_exit
l00000000004181F0:
	SCZO = cond(r11d - 7<32>)
	branch Test(NE,Z) l0000000000418141
	// succ:  l00000000004181FA l0000000000418141
l00000000004181FA:
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(Mem0[rbx + 0x10<64>:word16] - 0<16>)
	branch Test(EQ,Z) l0000000000418207
	// succ:  l0000000000418204_1 l0000000000418207
l0000000000418204_1:
	eax = edx
	// succ:  l0000000000418207
l0000000000418207:
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	Mem0[rbx + 0x10<64>:word16] = r11w
	goto l0000000000418141
	// succ:  l0000000000418141
l0000000000418214:
	rcx = rbx + 4<64>
	r10 = rbx + 0x12<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000418223
	// succ:  l0000000000418223
l0000000000418220:
	eax = CONVERT(Mem0[rcx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000418223
l0000000000418223:
	r8d = edx
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d | 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SZO = cond(al & 1<8>)
	C = false
	branch Test(EQ,Z) l0000000000418230
	// succ:  l000000000041822C_1 l0000000000418230
l000000000041822C_1:
	edx = r8d
	// succ:  l0000000000418230
l0000000000418230:
	ax = ax >>u 1<16>
	SCZO = cond(ax)
	SZO = cond(dl & 2<8>)
	C = false
	branch Test(EQ,Z) l000000000041823C
	// succ:  l0000000000418238 l000000000041823C
l0000000000418238:
	ax = ax | 0x8000<16>
	SZO = cond(ax)
	C = false
	// succ:  l000000000041823C
l000000000041823C:
	Mem0[rcx:word16] = ax
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	edx = edx + edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(rcx - r10)
	branch Test(NE,Z) l0000000000418220
	// succ:  l000000000041824A l0000000000418220
l000000000041824A:
	r14d = r14d + 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	SCZO = cond(r14d)
	goto l0000000000418167
	// succ:  l0000000000418167
l0000000000418253:
	SCZO = cond(r14d - 0xFFFFFFB0<32>)
	branch Test(LT,SO) l00000000004181D0
	// succ:  l000000000041825D l00000000004181D0
l000000000041825D:
	edx = r14d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000417570 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l0000000000418272
	// succ:  l000000000041826F_1 l0000000000418272
l000000000041826F_1:
	esi = eax
	// succ:  l0000000000418272
l0000000000418272:
	goto l00000000004180E4
	// succ:  l00000000004180E4
l0000000000418280:
	eax = CONVERT(Mem0[rbx + 0x10<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rbx + 4<64>
	r13 = rbx + 0x12<64>
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	esi = esi | eax
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000418293
l0000000000418293:
	ecx = CONVERT(Mem0[rdx:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	r12d = eax
	r12 = CONVERT(r12d, word32, uint64)
	r12d = r12d | 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	SZO = cond(cl & 1<8>)
	C = false
	branch Test(EQ,Z) l00000000004182A4
	// succ:  l00000000004182A0_1 l00000000004182A4
l00000000004182A0_1:
	eax = r12d
	// succ:  l00000000004182A4
l00000000004182A4:
	cx = cx >>u 1<16>
	SCZO = cond(cx)
	SZO = cond(al & 2<8>)
	C = false
	branch Test(EQ,Z) l00000000004182B0
	// succ:  l00000000004182AB l00000000004182B0
l00000000004182AB:
	cx = cx | 0x8000<16>
	SZO = cond(cx)
	C = false
	// succ:  l00000000004182B0
l00000000004182B0:
	Mem0[rdx:word16] = cx
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(rdx - r13)
	branch Test(NE,Z) l0000000000418293
	// succ:  l00000000004182BE l0000000000418293
l00000000004182BE:
	goto l000000000041812C
	// succ:  l000000000041812C
l00000000004182C3:
	rcx = rbx + 0x10<64>
	r10 = rbx + 2<64>
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l00000000004182D0
l00000000004182D0:
	edx = CONVERT(Mem0[rcx:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d | 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SZO = cond(dx & dx)
	C = false
	branch Test(NS,S) l00000000004182E1
	// succ:  l00000000004182DD_1 l00000000004182E1
l00000000004182DD_1:
	eax = r8d
	// succ:  l00000000004182E1
l00000000004182E1:
	edx = edx + edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SZO = cond(al & 2<8>)
	C = false
	branch Test(EQ,Z) l00000000004182EA
	// succ:  l00000000004182E7 l00000000004182EA
l00000000004182E7:
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l00000000004182EA
l00000000004182EA:
	Mem0[rcx:word16] = dx
	rcx = rcx - 2<64>
	SCZO = cond(rcx)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(rcx - r10)
	branch Test(NE,Z) l00000000004182D0
	// succ:  l00000000004182F8 l00000000004182D0
l00000000004182F8:
	goto l000000000041815A
	// succ:  l000000000041815A
l0000000000418300:
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	r8d = 0xE<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x2E<64>:word16] = bp
	Mem0[rsp + 0x2C<64>:word16] = r12w
	r10d = 6<32>
	r10 = CONVERT(r10d, word32, uint64)
	r11d = 7<32>
	r11 = CONVERT(r11d, word32, uint64)
	goto l0000000000418111
	// succ:  l0000000000418111
l0000000000418330:
	SCZO = cond(ax - 0x8000<16>)
	branch Test(EQ,Z) l0000000000418350
	// succ:  l0000000000418336 l0000000000418350
l0000000000418336:
	rcx = rsp + 0x20<64>
	rdx = rbx
	call fn0000000000417840 (retsize: 8;)
	goto l0000000000418151
	// succ:  l0000000000418151
l0000000000418350:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l0000000000418361
	// succ:  l0000000000418354 l0000000000418361
l0000000000418354:
	SZO = cond(Mem0[rbx + r10 * 2<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l0000000000418151
	// succ:  l000000000041835F l0000000000418151
l000000000041835F:
	goto l0000000000418336
	// succ:  l0000000000418336
l0000000000418361:
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l0000000000418151
	// succ:  l0000000000418369 l0000000000418151
l0000000000418369:
	goto l0000000000418336
	// succ:  l0000000000418336
fn0000000000418080_exit:


// fn0000000000418370
// Return size: 8
define fn0000000000418370
fn0000000000418370_entry:
	rsp = fp
	// succ:  l0000000000418370
l0000000000418370:
	SCZO = cond(Mem0[rcx:word16] - 0<16>)
	eax = CONVERT(Mem0[rcx + 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r8 = rdx + 8<64>
	r9 = rcx + 4<64>
	branch Test(EQ,Z) l00000000004183C0
	// succ:  l0000000000418382 l00000000004183C0
l0000000000418382:
	ax = ax | 0x8000<16>
	SZO = cond(ax)
	C = false
	Mem0[rdx + 0xA<64>:word16] = ax
	// succ:  l000000000041838A
l000000000041838A:
	rax = rcx + 6<64>
	rcx = rcx + 0x12<64>
	SCZO = cond(rcx)
	SCZO = cond(Mem0[r9 - 2<64>:word16] - 0x7FFF<16>)
	branch Test(EQ,Z) l00000000004183D0
	// succ:  l000000000041839B l00000000004183D0
l000000000041839B:
	rax = r9 + 2<64>
	rcx = r9 + 0xC<64>
	rdx = r8
	// succ:  l00000000004183A6
l00000000004183A6:
	rax = rax + 2<64>
	SCZO = cond(rax)
	r8d = CONVERT(Mem0[rax - 2<64>:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rdx - 2<64>
	SCZO = cond(rdx)
	Mem0[rdx + 2<64>:word16] = r8w
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l00000000004183A6
	// succ:  l00000000004183BD l00000000004183A6
l00000000004183BD:
	return
	// succ:  fn0000000000418370_exit
l00000000004183C0:
	Mem0[rdx + 0xA<64>:word16] = ax
	goto l000000000041838A
	// succ:  l000000000041838A
l00000000004183D0:
	SCZO = cond(Mem0[rax:word16] - 0<16>)
	branch Test(NE,Z) l0000000000418408
	// succ:  l00000000004183D6 l0000000000418408
l00000000004183D6:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l00000000004183D0
	// succ:  l00000000004183DF l00000000004183D0
l00000000004183DF:
	rcx = rdx + 0xA<64>
	rax = rdx
	// succ:  l00000000004183F0
l00000000004183F0:
	rax = rax + 2<64>
	SCZO = cond(rax)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(rax - rcx)
	Mem0[rax - 2<64>:word16] = r8w
	branch Test(NE,Z) l00000000004183F0
	// succ:  l0000000000418401 l00000000004183F0
l0000000000418401:
	v16 = Mem0[rdx + 0xA<64>:word16] | 0x7FFF<16>
	Mem0[rdx + 0xA<64>:word16] = v16
	SZO = cond(Mem0[rdx + 0xA<64>:word16])
	C = false
	return
	// succ:  fn0000000000418370_exit
l0000000000418408:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r10d = 0xFFFFC000<32>
	r10 = CONVERT(r10d, word32, uint64)
	r11d = 0x7FFF<32>
	r11 = CONVERT(r11d, word32, uint64)
	Mem0[rdx:word16] = ax
	Mem0[rdx + 2<64>:word16] = cx
	Mem0[rdx + 4<64>:word16] = r8w
	Mem0[rdx + 6<64>:word16] = r9w
	Mem0[rdx + 8<64>:word16] = r10w
	Mem0[rdx + 0xA<64>:word16] = r11w
	return
	// succ:  fn0000000000418370_exit
fn0000000000418370_exit:


// fn0000000000418440
// Return size: 8
define fn0000000000418440
fn0000000000418440_entry:
	rsp = fp
	// succ:  l0000000000418440
l0000000000418440:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x70<64>
	SCZO = cond(rsp)
	rsi = rdx
	edx = CONVERT(Mem0[rcx + 0xA<64>:word16], word16, int32)
	rbx = r8
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	di = di & 0x7FFF<16>
	SZO = cond(di)
	C = false
	SCZO = cond(di - 0x7FFF<16>)
	branch Test(EQ,Z) l00000000004184F0
	// succ:  l0000000000418466 l00000000004184F0
l0000000000418466:
	r11d = CONVERT(Mem0[rsi + 0xA<64>:word16], word16, word32)
	r11 = CONVERT(r11d, word32, uint64)
	r8d = r11d
	r8 = CONVERT(r8d, word32, uint64)
	r8w = r8w & 0x7FFF<16>
	SZO = cond(r8w)
	C = false
	SCZO = cond(r8w - 0x7FFF<16>)
	branch Test(EQ,Z) l0000000000418590
	// succ:  l0000000000418480 l0000000000418590
l0000000000418480:
	rbp = rsp + 0x30<64>
	rdi = rsp + 0x50<64>
	rdx = rbp
	call fn0000000000417750 (retsize: 8;)
	rcx = rsi
	rdx = rdi
	call fn0000000000417750 (retsize: 8;)
	r12d = CONVERT(Mem0[rsp + 0x32<64>:word16], word16, word32)
	r12 = CONVERT(r12d, word32, uint64)
	esi = CONVERT(Mem0[rsp + 0x52<64>:word16], word16, word32)
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(r12w & r12w)
	C = false
	ecx = esi
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(EQ,Z) l0000000000418620
	// succ:  l00000000004184B4 l0000000000418620
l00000000004184B4:
	SZO = cond(cx & cx)
	C = false
	rax = rdi
	rdx = rdi + 0xC<64>
	branch Test(EQ,Z) l00000000004184D4
	// succ:  l00000000004184C0 l00000000004184D4
l00000000004184C0:
	goto l0000000000418738
	// succ:  l0000000000418738
l00000000004184C5:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(Mem0[rax + 2<64>:word16] - 0<16>)
	branch Test(NE,Z) l000000000041872E
	// succ:  l00000000004184D4 l000000000041872E
l00000000004184D4:
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000004184C5
	// succ:  l00000000004184D9 l00000000004184C5
l00000000004184D9:
	Mem0[rbx:word64] = 0<64>
	Mem0[rbx + 8<64>:word32] = 0<32>
	goto l000000000041860C
	// succ:  l000000000041860C
l00000000004184F0:
	r9 = rcx + 0xA<64>
	rax = rcx
	// succ:  l00000000004184F7
l00000000004184F7:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(Mem0[rax - 2<64>:word16] - 0<16>)
	branch Test(NE,Z) l0000000000418600
	// succ:  l0000000000418506 l0000000000418600
l0000000000418506:
	SCZO = cond(rax - r9)
	branch Test(NE,Z) l00000000004184F7
	// succ:  l000000000041850B l00000000004184F7
l000000000041850B:
	r11d = CONVERT(Mem0[rsi + 0xA<64>:word16], word16, word32)
	r11 = CONVERT(r11d, word32, uint64)
	r8d = r11d
	r8 = CONVERT(r8d, word32, uint64)
	r8w = r8w & 0x7FFF<16>
	SZO = cond(r8w)
	C = false
	SCZO = cond(r8w - 0x7FFF<16>)
	branch Test(EQ,Z) l0000000000418590
	// succ:  l0000000000418521 l0000000000418590
l0000000000418521:
	rax = rcx
	// succ:  l0000000000418524
l0000000000418524:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(Mem0[rax - 2<64>:word16] - 0<16>)
	branch Test(NE,Z) l00000000004187B9
	// succ:  l0000000000418533 l00000000004187B9
l0000000000418533:
	SCZO = cond(rax - r9)
	branch Test(NE,Z) l0000000000418524
	// succ:  l0000000000418538 l0000000000418524
l0000000000418538:
	rax = rsi + 2<64>
	r10 = rsi + 0x10<64>
	// succ:  l0000000000418540
l0000000000418540:
	SCZO = cond(Mem0[rax:word16] - 0<16>)
	branch Test(NE,Z) l0000000000418650
	// succ:  l000000000041854A l0000000000418650
l000000000041854A:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(rax - r10)
	branch Test(NE,Z) l0000000000418540
	// succ:  l0000000000418553 l0000000000418540
l0000000000418553:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	esi = 0xFFFFC000<32>
	rsi = CONVERT(esi, word32, uint64)
	edi = 0x7FFF<32>
	rdi = CONVERT(edi, word32, uint64)
	Mem0[rbx:word16] = r8w
	Mem0[rbx + 2<64>:word16] = r9w
	Mem0[rbx + 4<64>:word16] = r10w
	Mem0[rbx + 6<64>:word16] = r11w
	Mem0[rbx + 8<64>:word16] = si
	Mem0[rbx + 0xA<64>:word16] = di
	rsp = rsp + 0x70<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000418440_exit
l0000000000418590:
	r9 = rsi + 0xA<64>
	rax = rsi
	// succ:  l0000000000418597
l0000000000418597:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(Mem0[rax - 2<64>:word16] - 0<16>)
	branch Test(NE,Z) l0000000000418700
	// succ:  l00000000004185A6 l0000000000418700
l00000000004185A6:
	SCZO = cond(rax - r9)
	branch Test(NE,Z) l0000000000418597
	// succ:  l00000000004185AB l0000000000418597
l00000000004185AB:
	SCZO = cond(di - 0x7FFF<16>)
	branch Test(EQ,Z) l00000000004185F0
	// succ:  l00000000004185B2 l00000000004185F0
l00000000004185B2:
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	// succ:  l00000000004185B5
l00000000004185B5:
	rax = rsi
	// succ:  l00000000004185B8
l00000000004185B8:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(Mem0[rax - 2<64>:word16] - 0<16>)
	branch Test(NE,Z) l0000000000418790
	// succ:  l00000000004185C7 l0000000000418790
l00000000004185C7:
	SCZO = cond(rax - r9)
	branch Test(NE,Z) l00000000004185B8
	// succ:  l00000000004185CC l00000000004185B8
l00000000004185CC:
	rax = rcx + 2<64>
	r8 = rcx + 0x10<64>
	// succ:  l00000000004185D4
l00000000004185D4:
	SCZO = cond(Mem0[rax:word16] - 0<16>)
	branch Test(NE,Z) l00000000004186E0
	// succ:  l00000000004185DE l00000000004186E0
l00000000004185DE:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(rax - r8)
	branch Test(NE,Z) l00000000004185D4
	// succ:  l00000000004185E7 l00000000004185D4
l00000000004185E7:
	goto l0000000000418553
	// succ:  l0000000000418553
l00000000004185F0:
	r8d = 0x7FFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	r9 = rcx + 0xA<64>
	goto l0000000000418521
	// succ:  l0000000000418521
l0000000000418600:
	rax = Mem0[rcx:word64]
	Mem0[rbx:word64] = rax
	eax = Mem0[rcx + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 8<64>:word32] = eax
	// succ:  l000000000041860C
l000000000041860C:
	rsp = rsp + 0x70<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000418440_exit
l0000000000418620:
	rax = rbp
	rdx = rbp + 0xC<64>
	goto l000000000041863F
	// succ:  l000000000041863F
l0000000000418630:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(Mem0[rax + 2<64>:word16] - 0<16>)
	branch Test(NE,Z) l00000000004187A4
	// succ:  l000000000041863F l00000000004187A4
l000000000041863F:
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000418630
	// succ:  l0000000000418644 l0000000000418630
l0000000000418644:
	goto l00000000004184D9
	// succ:  l00000000004184D9
l0000000000418650:
	SCZO = cond(r8w - 0x7FFF<16>)
	branch Test(EQ,Z) l0000000000418711
	// succ:  l000000000041865C l0000000000418711
l000000000041865C:
	// succ:  l0000000000418660
l0000000000418660:
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	SCZO = cond(Mem0[rcx - 2<64>:word16] - 0<16>)
	branch Test(NE,Z) l0000000000418727
	// succ:  l000000000041866F l0000000000418727
l000000000041866F:
	SCZO = cond(rcx - r9)
	branch Test(NE,Z) l0000000000418660
	// succ:  l0000000000418674 l0000000000418660
l0000000000418674:
	edx = edx >>u 0x1F<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	// succ:  l0000000000418677
l0000000000418677:
	SCZO = cond(r8w - 0x7FFF<16>)
	branch Test(EQ,Z) l00000000004186C0
	// succ:  l000000000041867F l00000000004186C0
l000000000041867F:
	eax = CONVERT(r11w, word16, int32)
	eax = eax >>u 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	// succ:  l0000000000418686
l0000000000418686:
	SCZO = cond(edx - eax)
	edx = 0xFFFF8000<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l0000000000418695
	// succ:  l0000000000418692_1 l0000000000418695
l0000000000418692_1:
	eax = edx
	// succ:  l0000000000418695
l0000000000418695:
	rdx = rbx + 0xA<64>
	Mem0[rbx + 0xA<64>:word16] = ax
	rax = rbx
	// succ:  l00000000004186A0
l00000000004186A0:
	rax = rax + 2<64>
	SCZO = cond(rax)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	SCZO = cond(rax - rdx)
	Mem0[rax - 2<64>:word16] = cx
	branch Test(NE,Z) l00000000004186A0
	// succ:  l00000000004186AF l00000000004186A0
l00000000004186AF:
	v39 = Mem0[rbx + 0xA<64>:word16] | 0x7FFF<16>
	Mem0[rbx + 0xA<64>:word16] = v39
	SZO = cond(Mem0[rbx + 0xA<64>:word16])
	C = false
	rsp = rsp + 0x70<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000418440_exit
l00000000004186C0:
	rax = rsi + 0xA<64>
	// succ:  l00000000004186C4
l00000000004186C4:
	rsi = rsi + 2<64>
	SCZO = cond(rsi)
	SCZO = cond(Mem0[rsi - 2<64>:word16] - 0<16>)
	branch Test(NE,Z) l0000000000418720
	// succ:  l00000000004186CF l0000000000418720
l00000000004186CF:
	SCZO = cond(rsi - rax)
	branch Test(NE,Z) l00000000004186C4
	// succ:  l00000000004186D4 l00000000004186C4
l00000000004186D4:
	goto l000000000041867F
	// succ:  l000000000041867F
l00000000004186E0:
	r8d = 0x7FFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	// succ:  l00000000004186E6
l00000000004186E6:
	SCZO = cond(di - 0x7FFF<16>)
	branch Test(NE,Z) l0000000000418674
	// succ:  l00000000004186ED l0000000000418674
l00000000004186ED:
	r9 = rcx + 0xA<64>
	goto l0000000000418660
	// succ:  l0000000000418660
l0000000000418700:
	rax = Mem0[rsi:word64]
	Mem0[rbx:word64] = rax
	eax = Mem0[rsi + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 8<64>:word32] = eax
	goto l000000000041860C
	// succ:  l000000000041860C
l0000000000418711:
	r10d = 1<32>
	r10 = CONVERT(r10d, word32, uint64)
	r9 = rsi + 0xA<64>
	goto l00000000004185B5
	// succ:  l00000000004185B5
l0000000000418720:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000418686
	// succ:  l0000000000418686
l0000000000418727:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000418677
	// succ:  l0000000000418677
l000000000041872E:
	rcx = rdi
	call fn0000000000417ED0 (retsize: 8;)
	esi = esi - eax
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	// succ:  l0000000000418738
l0000000000418738:
	rdx = rdi
	rcx = rbp
	call fn0000000000417B10 (retsize: 8;)
	r9d = SLICE(r12 + 0xFFFFFFFFFFFFC002<64> + rsi, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	Mem0[rsp + 0x28<64>:word32] = 0x50<32>
	Mem0[rsp + 0x20<64>:word32] = 0x40<32>
	call fn0000000000418080 (retsize: 8;)
	eax = CONVERT(Mem0[rsp + 0x50<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rbx
	rcx = rdi
	SCZO = cond(Mem0[rsp + 0x30<64>:word16] - ax)
	al = CONVERT(Test(EQ,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rsp + 0x50<64>:word16] = ax
	call fn0000000000418370 (retsize: 8;)
	goto l000000000041860C
	// succ:  l000000000041860C
l0000000000418790:
	SZO = cond(r10d & r10d)
	C = false
	r8d = 0x7FFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	branch Test(NE,Z) l00000000004186E6
	// succ:  l000000000041879F l00000000004186E6
l000000000041879F:
	goto l0000000000418480
	// succ:  l0000000000418480
l00000000004187A4:
	rcx = rbp
	call fn0000000000417ED0 (retsize: 8;)
	ecx = CONVERT(Mem0[rsp + 0x52<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	r12d = r12d - eax
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	goto l00000000004184B4
	// succ:  l00000000004184B4
l00000000004187B9:
	SCZO = cond(r8w - 0x7FFF<16>)
	r9 = rsi + 0xA<64>
	branch Test(EQ,Z) l00000000004185B2
	// succ:  l00000000004187C9 l00000000004185B2
l00000000004187C9:
	goto l0000000000418480
	// succ:  l0000000000418480
fn0000000000418440_exit:


// fn00000000004187D0
// Return size: 8
define fn00000000004187D0
fn00000000004187D0_entry:
	rsp = fp
	// succ:  l00000000004187D0
l00000000004187D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xB8<64>
	SCZO = cond(rsp)
	Mem0[rsp + 0xA0<64>:word128] = xmm6
	r12d = Mem0[r9:word32]
	r12 = CONVERT(r12d, word32, uint64)
	eax = r12d
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0xFFFFFFCF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[r9:word32] = eax
	eax = r12d
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 7<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 4<32>)
	branch Test(UGT,CZ) l0000000000419C33
	// succ:  l0000000000418806 l0000000000419C33
l0000000000418806:
	r13d = edx
	r13 = CONVERT(r13d, word32, uint64)
	rdx = 0x0000000000490ED0<p64>
	Mem0[rsp + 0x28<64>:word64] = r9
	r15 = r8
	rbp = rcx
	rax = CONVERT(Mem0[rdx + rax * 4<64>:word32], word32, int64)
	rdx = rdx + rax
	SCZO = cond(rdx)
	switch (eax) { l00000000004188EE l0000000000418824 l0000000000418824 l0000000000418960 l0000000000418933 }
	// succ:  l00000000004188EE l0000000000418824 l0000000000418824 l0000000000418960 l0000000000418933
l0000000000418824:
	edi = Mem0[rcx:word32]
	rdi = CONVERT(edi, word32, uint64)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	SCZO = cond(edi - 0x20<32>)
	branch Test(LE,SZO) l000000000041883B
	// succ:  l000000000041882D l000000000041883B
l000000000041882D:
	eax = 0x20<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000418832
l0000000000418832:
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	SCZO = cond(edi - eax)
	branch Test(GT,SZO) l0000000000418832
	// succ:  l000000000041883B l0000000000418832
l000000000041883B:
	call fn0000000000419F80 (retsize: 8;)
	rsi = rax
	eax = SLICE(rdi - 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	r9 = rsi + 0x18<64>
	eax = eax >> 5<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rax = CONVERT(eax, int32, int64)
	rdx = r9
	r11 = r15 + rax * 4<64>
	rax = r15
	// succ:  l0000000000418860
l0000000000418860:
	ecx = Mem0[rax:word32]
	rcx = CONVERT(ecx, word32, uint64)
	rax = rax + 4<64>
	SCZO = cond(rax)
	rdx = rdx + 4<64>
	SCZO = cond(rdx)
	SCZO = cond(r11 - rax)
	Mem0[rdx - 4<64>:word32] = ecx
	branch Test(UGE,C) l0000000000418860
	// succ:  l0000000000418872 l0000000000418860
l0000000000418872:
	rdx = rdx - r9
	SCZO = cond(rdx)
	rdx = rdx >> 2<64>
	SCZO = cond(rdx)
	r14d = edx
	r14 = CONVERT(r14d, word32, uint64)
	rdx = CONVERT(edx, word32, int64)
	rax = r9 - 4<64> + rdx * 4<64>
	goto l000000000041889F
	// succ:  l000000000041889F
l0000000000418890:
	rax = rax - 4<64>
	SCZO = cond(rax)
	SZO = cond(edx & edx)
	C = false
	r14d = edx
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(EQ,Z) l0000000000418DA0
	// succ:  l000000000041889F l0000000000418DA0
l000000000041889F:
	r8d = Mem0[rax:word32]
	r8 = CONVERT(r8d, word32, uint64)
	edx = SLICE(r14 - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(r8d & r8d)
	C = false
	branch Test(EQ,Z) l0000000000418890
	// succ:  l00000000004188AB l0000000000418890
l00000000004188AB:
	rdx = CONVERT(edx, word32, int64)
	Mem0[rsi + 0x14<64>:word32] = r14d
	r14d = r14d << 5<32>
	r14 = CONVERT(r14d, word32, uint64)
	SCZO = cond(r14d)
	Z = Mem0[rsi + 0x18<64> + rdx * 4<64>:word32] == 0<32>
	eax = __bsr(Mem0[rsi + 0x18<64> + rdx * 4<64>:word32])
	eax = eax ^ 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	r14d = r14d - eax
	r14 = CONVERT(r14d, word32, uint64)
	SCZO = cond(r14d)
	// succ:  l00000000004188C1
l00000000004188C1:
	rcx = rsi
	call fn000000000041ADB0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	Mem0[rsp + 0x9C<64>:word32] = eax
	r11d = r13d
	r11 = CONVERT(r11d, word32, uint64)
	branch Test(NE,Z) l0000000000418DB0
	// succ:  l00000000004188DB l0000000000418DB0
l00000000004188DB:
	ecx = Mem0[rsi + 0x14<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l0000000000418990
	// succ:  l00000000004188E6 l0000000000418990
l00000000004188E6:
	rcx = rsi
	call fn000000000041A090 (retsize: 8;)
	// succ:  l00000000004188EE
l00000000004188EE:
	rax = Mem0[rsp + 0x130<64>:word64]
	rdx = Mem0[rsp + 0x138<64>:word64]
	rcx = 0x0000000000490ECD<p64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rax:word32] = 1<32>
	call fn0000000000419C70 (retsize: 8;)
	// succ:  l0000000000418917
l0000000000418917:
	xmm6 = Mem0[rsp + 0xA0<64>:word128]
	rsp = rsp + 0xB8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004187D0_exit
l0000000000418933:
	rax = Mem0[rsp + 0x130<64>:word64]
	rdx = Mem0[rsp + 0x138<64>:word64]
	rcx = 0x0000000000490EC9<p64>
	r8d = 3<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rax:word32] = 0xFFFF8000<32>
	call fn0000000000419C70 (retsize: 8;)
	goto l0000000000418917
	// succ:  l0000000000418917
l0000000000418960:
	rax = Mem0[rsp + 0x130<64>:word64]
	rdx = Mem0[rsp + 0x138<64>:word64]
	rcx = 0x0000000000490EC0<p64>
	r8d = 8<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rax:word32] = 0xFFFF8000<32>
	call fn0000000000419C70 (retsize: 8;)
	goto l0000000000418917
	// succ:  l0000000000418917
l0000000000418990:
	rdx = rsp + 0x9C<64>
	rcx = rsi
	Mem0[rsp + 0x30<64>:word32] = r11d
	call fn000000000041A740 (retsize: 8;)
	rax = xmm0
	r9 = xmm0
	r11d = Mem0[rsp + 0x30<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	xmm0 = 0<128>
	rax = rax >>u 0x20<64>
	SCZO = cond(rax)
	r9d = r9d
	r9 = CONVERT(r9d, word32, uint64)
	eax = eax & 0xFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	ecx = SLICE(r11 - 1<64> + r14, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	eax = eax | 0x3FF00000<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rdx = rax
	v34 = CONVERT(ecx, int32, real64)
	xmm0 = SEQ(SLICE(xmm0, word64, 64), v34)
	rdx = rdx << 0x20<64>
	SCZO = cond(rdx)
	ebx = ecx
	rbx = CONVERT(ebx, word32, uint64)
	r9 = r9 | rdx
	SZO = cond(r9)
	C = false
	ebx = ebx >> 0x1F<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	Mem0[rsp + 0x30<64>:word64] = r9
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	xmm1 = SEQ(0<64>, Mem0[rsp + 0x30<64>:real64])
	edx = edx ^ ecx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx - ebx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	v37 = SLICE(xmm1, real64, 0) - Mem0[0x0000000000490EE8<p64>:real64]
	v38 = SLICE(xmm1, word64, 64)
	xmm1 = SEQ(v38, v37)
	edx = edx - 0x435<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SZO = cond(edx & edx)
	C = false
	v39 = SLICE(xmm0, real64, 0) * Mem0[0x0000000000490F00<p64>:real64]
	v40 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v40, v39)
	v41 = SLICE(xmm1, real64, 0) * Mem0[0x0000000000490EF0<p64>:real64]
	v42 = SLICE(xmm1, word64, 64)
	xmm1 = SEQ(v42, v41)
	v43 = SLICE(xmm1, real64, 0) + Mem0[0x0000000000490EF8<p64>:real64]
	v44 = SLICE(xmm1, word64, 64)
	xmm1 = SEQ(v44, v43)
	v45 = SLICE(xmm1, real64, 0) + SLICE(xmm0, real64, 0)
	v46 = SLICE(xmm1, word64, 64)
	xmm1 = SEQ(v46, v45)
	branch Test(LE,SZO) l0000000000418A34
	// succ:  l0000000000418A20 l0000000000418A34
l0000000000418A20:
	xmm0 = 0<128>
	v47 = CONVERT(edx, int32, real64)
	xmm0 = SEQ(SLICE(xmm0, word64, 64), v47)
	v48 = SLICE(xmm0, real64, 0) * Mem0[0x0000000000490F08<p64>:real64]
	v49 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v49, v48)
	v50 = SLICE(xmm1, real64, 0) + SLICE(xmm0, real64, 0)
	v51 = SLICE(xmm1, word64, 64)
	xmm1 = SEQ(v51, v50)
	// succ:  l0000000000418A34
l0000000000418A34:
	ebx = CONVERT(SLICE(xmm1, real64, 0), real64, int32)
	xmm6 = 0<128>
	CZP = cond(SLICE(xmm6, real64, 0) - SLICE(xmm1, real64, 0))
	O = false
	S = false
	Mem0[rsp + 0x30<64>:word32] = ebx
	branch Test(UGT,CZ) l00000000004192D3
	// succ:  l0000000000418A4A l00000000004192D3
l0000000000418A4A:
	edx = ecx
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsp + 0x6C<64>:word32] = 1<32>
	edx = edx << 0x14<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = eax + edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = r9d
	rdx = CONVERT(edx, word32, uint64)
	rax = rax << 0x20<64>
	SCZO = cond(rax)
	rdx = rdx | rax
	SZO = cond(rdx)
	C = false
	SCZO = cond(Mem0[rsp + 0x30<64>:word32] - 0x16<32>)
	Mem0[rsp + 0x80<64>:word64] = rdx
	r9 = rdx
	branch Test(UGT,CZ) l0000000000418AA2
	// succ:  l0000000000418A75 l0000000000418AA2
l0000000000418A75:
	rax = CONVERT(Mem0[rsp + 0x30<64>:word32], word32, int64)
	rdx = Mem0[0x0000000000491FA0<p64>:word64]
	xmm0 = SEQ(0<64>, Mem0[rdx + rax * 8<64>:real64])
	CZP = cond(SLICE(xmm0, real64, 0) - Mem0[rsp + 0x80<64>:real64])
	O = false
	S = false
	branch Test(ULE,CZ) l0000000000418DF0
	// succ:  l0000000000418A95 l0000000000418DF0
l0000000000418A95:
	v55 = Mem0[rsp + 0x30<64>:word32] - 1<32>
	Mem0[rsp + 0x30<64>:word32] = v55
	SCZO = cond(v55)
	Mem0[rsp + 0x6C<64>:word32] = 0<32>
	// succ:  l0000000000418AA2
l0000000000418AA2:
	eax = r14d
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x50<64>:word32] = 0<32>
	eax = eax - ecx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rsp + 0x40<64>:word32] = eax
	branch Test(SG,S) l00000000004192C0
	// succ:  l0000000000418ABC l00000000004192C0
l0000000000418ABC:
	eax = Mem0[rsp + 0x30<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l00000000004192A0
	// succ:  l0000000000418AC8 l00000000004192A0
l0000000000418AC8:
	v59 = Mem0[rsp + 0x40<64>:word32] + eax
	Mem0[rsp + 0x40<64>:word32] = v59
	SCZO = cond(v59)
	Mem0[rsp + 0x88<64>:word32] = eax
	Mem0[rsp + 0x58<64>:word32] = 0<32>
	// succ:  l0000000000418ADB
l0000000000418ADB:
	SCZO = cond(Mem0[rsp + 0x120<64>:word32] - 9<32>)
	branch Test(UGT,CZ) l0000000000418DD0
	// succ:  l0000000000418AE9 l0000000000418DD0
l0000000000418AE9:
	SCZO = cond(Mem0[rsp + 0x120<64>:word32] - 5<32>)
	branch Test(LE,SZO) l0000000000418DDB
	// succ:  l0000000000418AF7 l0000000000418DDB
l0000000000418AF7:
	v60 = Mem0[rsp + 0x120<64>:word32] - 4<32>
	Mem0[rsp + 0x120<64>:word32] = v60
	SCZO = cond(v60)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000418B01
l0000000000418B01:
	SCZO = cond(Mem0[rsp + 0x120<64>:word32] - 3<32>)
	branch Test(EQ,Z) l0000000000419494
	// succ:  l0000000000418B0F l0000000000419494
l0000000000418B0F:
	branch Test(LE,SZO) l00000000004191F3
	// succ:  l0000000000418B15 l00000000004191F3
l0000000000418B15:
	SCZO = cond(Mem0[rsp + 0x120<64>:word32] - 4<32>)
	Mem0[rsp + 0x60<64>:word32] = 1<32>
	branch Test(EQ,Z) l0000000000418E00
	// succ:  l0000000000418B2B l0000000000418E00
l0000000000418B2B:
	SCZO = cond(Mem0[rsp + 0x120<64>:word32] - 5<32>)
	branch Test(NE,Z) l0000000000419209
	// succ:  l0000000000418B39 l0000000000419209
l0000000000418B39:
	ebx = Mem0[rsp + 0x30<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	ebx = ebx + Mem0[rsp + 0x128<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	Mem0[rsp + 0x8C<64>:word32] = ebx
	ebx = ebx + 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SZO = cond(ebx & ebx)
	C = false
	Mem0[rsp + 0x68<64>:word32] = ebx
	ecx = ebx
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(LE,SZO) l00000000004196D0
	// succ:  l0000000000418B5C l00000000004196D0
l0000000000418B5C:
	SCZO = cond(ebx - 0xE<32>)
	Mem0[rsp + 0x9C<64>:word32] = ebx
	bl = CONVERT(Test(ULE,CZ), bool, int8)
	ebx = ebx & eax
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	// succ:  l0000000000418B6B
l0000000000418B6B:
	Mem0[rsp + 0x78<64>:word64] = r9
	Mem0[rsp + 0x70<64>:word32] = r11d
	call fn0000000000419C40 (retsize: 8;)
	Mem0[rsp + 0x48<64>:word64] = rax
	eax = Mem0[rbp + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r11d = Mem0[rsp + 0x70<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	r9 = Mem0[rsp + 0x78<64>:word64]
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rsp + 0x38<64>:word32] = eax
	branch Test(EQ,Z) l0000000000418BBA
	// succ:  l0000000000418B95 l0000000000418BBA
l0000000000418B95:
	ecx = Mem0[rsp + 0x38<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = 2<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(SG,S) l0000000000418BA3
	// succ:  l0000000000418BA0_1 l0000000000418BA3
l0000000000418BA0_1:
	eax = ecx
	// succ:  l0000000000418BA3
l0000000000418BA3:
	r12d = r12d & 8<32>
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	Mem0[rsp + 0x38<64>:word32] = eax
	branch Test(EQ,Z) l0000000000418BBA
	// succ:  l0000000000418BAD l0000000000418BBA
l0000000000418BAD:
	eax = 3<32>
	rax = CONVERT(eax, word32, uint64)
	eax = eax - Mem0[rsp + 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rsp + 0x38<64>:word32] = eax
	// succ:  l0000000000418BBA
l0000000000418BBA:
	SZO = cond(bl & bl)
	C = false
	branch Test(EQ,Z) l0000000000418EB0
	// succ:  l0000000000418BC2 l0000000000418EB0
l0000000000418BC2:
	eax = Mem0[rsp + 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax | Mem0[rsp + 0x30<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	branch Test(NE,Z) l0000000000418EB0
	// succ:  l0000000000418BD0 l0000000000418EB0
l0000000000418BD0:
	eax = Mem0[rsp + 0x6C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x9C<64>:word32] = 0<32>
	xmm4 = SEQ(0<64>, Mem0[rsp + 0x80<64>:real64])
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000418BFE
	// succ:  l0000000000418BEC l0000000000418BFE
l0000000000418BEC:
	xmm0 = SEQ(0<64>, Mem0[0x0000000000490F18<p64>:real64])
	CZP = cond(SLICE(xmm0, real64, 0) - SLICE(xmm4, real64, 0))
	O = false
	S = false
	branch Test(UGT,CZ) l0000000000419A2B
	// succ:  l0000000000418BFE l0000000000419A2B
l0000000000418BFE:
	xmm0 = xmm4
	r12d = Mem0[rsp + 0x68<64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	v63 = SLICE(xmm0, real64, 0) + SLICE(xmm4, real64, 0)
	v64 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v64, v63)
	v65 = SLICE(xmm0, real64, 0) + Mem0[0x0000000000490F30<p64>:real64]
	v66 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v66, v65)
	rdx = xmm0
	rax = xmm0
	rdx = rdx >>u 0x20<64>
	SCZO = cond(rdx)
	eax = eax
	rax = CONVERT(eax, word32, uint64)
	edx = edx - 0x3400000<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rdx = rdx << 0x20<64>
	SCZO = cond(rdx)
	rax = rax | rdx
	SZO = cond(rax)
	C = false
	SZO = cond(r12d & r12d)
	C = false
	branch Test(EQ,Z) l0000000000418E67
	// succ:  l0000000000418C39 l0000000000418E67
l0000000000418C39:
	r9d = Mem0[rsp + 0x68<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	xmm0 = xmm4
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	// succ:  l0000000000418C44
l0000000000418C44:
	ebx = Mem0[rsp + 0x60<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	edx = SLICE(r9 - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rdx = CONVERT(edx, word32, int64)
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l0000000000419773
	// succ:  l0000000000418C57 l0000000000419773
l0000000000418C57:
	r10 = Mem0[0x0000000000491FA0<p64>:word64]
	xmm1 = SEQ(0<64>, Mem0[0x0000000000490F50<p64>:real64])
	Mem0[rsp + 0x38<64>:word64] = rax
	eax = CONVERT(SLICE(xmm0, real64, 0), real64, int32)
	xmm2 = 0<128>
	Mem0[rsp + 0x9C<64>:word32] = 0<32>
	v69 = SLICE(xmm1, real64, 0) / Mem0[r10 + rdx * 8<64>:real64]
	v70 = SLICE(xmm1, word64, 64)
	xmm1 = SEQ(v70, v69)
	rdx = Mem0[rsp + 0x48<64>:word64]
	rbx = rdx
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	v71 = CONVERT(eax, int32, real64)
	xmm2 = SEQ(SLICE(xmm2, word64, 64), v71)
	eax = eax + 0x30<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rdx:byte] = al
	xmm5 = SEQ(0<64>, Mem0[rsp + 0x38<64>:real64])
	v74 = SLICE(xmm0, real64, 0) - SLICE(xmm2, real64, 0)
	v75 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v75, v74)
	v76 = SLICE(xmm1, real64, 0) - SLICE(xmm5, real64, 0)
	v77 = SLICE(xmm1, word64, 64)
	xmm1 = SEQ(v77, v76)
	CZP = cond(SLICE(xmm1, real64, 0) - SLICE(xmm0, real64, 0))
	O = false
	S = false
	branch Test(UGT,CZ) l0000000000418D44
	// succ:  l0000000000418CB1 l0000000000418D44
l0000000000418CB1:
	xmm5 = SEQ(0<64>, Mem0[0x0000000000490F18<p64>:real64])
	xmm2 = xmm5
	v78 = SLICE(xmm2, real64, 0) - SLICE(xmm0, real64, 0)
	v79 = SLICE(xmm2, word64, 64)
	xmm2 = SEQ(v79, v78)
	CZP = cond(SLICE(xmm1, real64, 0) - SLICE(xmm2, real64, 0))
	O = false
	S = false
	branch Test(UGT,CZ) l0000000000419847
	// succ:  l0000000000418CCB l0000000000419847
l0000000000418CCB:
	eax = Mem0[rsp + 0x9C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	xmm3 = SEQ(0<64>, Mem0[0x0000000000490F20<p64>:real64])
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(r9d - eax)
	Mem0[rsp + 0x9C<64>:word32] = eax
	branch Test(GT,SZO) l0000000000418D1C
	// succ:  l0000000000418CE9 l0000000000418D1C
l0000000000418CE9:
	goto l0000000000418E9E
	// succ:  l0000000000418E9E
l0000000000418CF0:
	xmm2 = xmm5
	v94 = SLICE(xmm2, real64, 0) - SLICE(xmm0, real64, 0)
	v95 = SLICE(xmm2, word64, 64)
	xmm2 = SEQ(v95, v94)
	CZP = cond(SLICE(xmm1, real64, 0) - SLICE(xmm2, real64, 0))
	O = false
	S = false
	branch Test(UGT,CZ) l0000000000419847
	// succ:  l0000000000418D02 l0000000000419847
l0000000000418D02:
	eax = Mem0[rsp + 0x9C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(r9d - eax)
	Mem0[rsp + 0x9C<64>:word32] = eax
	branch Test(LE,SZO) l0000000000418E9E
	// succ:  l0000000000418D1C l0000000000418E9E
l0000000000418D1C:
	v84 = SLICE(xmm0, real64, 0) * SLICE(xmm3, real64, 0)
	v85 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v85, v84)
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	xmm2 = 0<128>
	v86 = SLICE(xmm1, real64, 0) * SLICE(xmm3, real64, 0)
	v87 = SLICE(xmm1, word64, 64)
	xmm1 = SEQ(v87, v86)
	eax = CONVERT(SLICE(xmm0, real64, 0), real64, int32)
	v88 = CONVERT(eax, int32, real64)
	xmm2 = SEQ(SLICE(xmm2, word64, 64), v88)
	eax = eax + 0x30<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx - 1<64>:byte] = al
	v89 = SLICE(xmm0, real64, 0) - SLICE(xmm2, real64, 0)
	v90 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v90, v89)
	CZP = cond(SLICE(xmm1, real64, 0) - SLICE(xmm0, real64, 0))
	O = false
	S = false
	branch Test(ULE,CZ) l0000000000418CF0
	// succ:  l0000000000418D44 l0000000000418CF0
l0000000000418D44:
	CZP = cond(SLICE(xmm0, real64, 0) - SLICE(xmm6, real64, 0))
	O = false
	S = false
	ebp = SLICE(rcx + 1<64>, word32, 0)
	rbp = CONVERT(ebp, word32, uint64)
	branch Test(PE,P) l0000000000418D53
	// succ:  l0000000000418D4D l0000000000418D53
l0000000000418D4D:
	branch Test(EQ,Z) l00000000004196A7
	// succ:  l0000000000418D53 l00000000004196A7
l0000000000418D53:
	r15d = 0x10<32>
	r15 = CONVERT(r15d, word32, uint64)
	// succ:  l0000000000418D60
l0000000000418D60:
	rcx = rsi
	call fn000000000041A090 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x138<64>:word64] - 0<64>)
	rax = Mem0[rsp + 0x130<64>:word64]
	Mem0[rbx:byte] = 0<8>
	Mem0[rax:word32] = ebp
	branch Test(EQ,Z) l0000000000418D8B
	// succ:  l0000000000418D80 l0000000000418D8B
l0000000000418D80:
	rax = Mem0[rsp + 0x138<64>:word64]
	Mem0[rax:word64] = rbx
	// succ:  l0000000000418D8B
l0000000000418D8B:
	rax = Mem0[rsp + 0x28<64>:word64]
	v93 = Mem0[rax:word32] | r15d
	Mem0[rax:word32] = v93
	SZO = cond(Mem0[rax:word32])
	C = false
	rax = Mem0[rsp + 0x48<64>:word64]
	goto l0000000000418917
	// succ:  l0000000000418917
l0000000000418DA0:
	Mem0[rsi + 0x14<64>:word32] = 0<32>
	goto l00000000004188C1
	// succ:  l00000000004188C1
l0000000000418DB0:
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	call fn000000000041ACB0 (retsize: 8;)
	eax = Mem0[rsp + 0x9C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r11d = SLICE(r13 + 0<64> + rax, word32, 0)
	r11 = CONVERT(r11d, word32, uint64)
	r14d = r14d - eax
	r14 = CONVERT(r14d, word32, uint64)
	SCZO = cond(r14d)
	goto l00000000004188DB
	// succ:  l00000000004188DB
l0000000000418DD0:
	Mem0[rsp + 0x120<64>:word32] = 0<32>
	// succ:  l0000000000418DDB
l0000000000418DDB:
	ecx = ecx + 0x3FE<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	SCZO = cond(ecx - 0x7F7<32>)
	al = CONVERT(Test(ULE,CZ), bool, int8)
	goto l0000000000418B01
	// succ:  l0000000000418B01
l0000000000418DF0:
	Mem0[rsp + 0x6C<64>:word32] = 0<32>
	goto l0000000000418AA2
	// succ:  l0000000000418AA2
l0000000000418E00:
	edx = Mem0[rsp + 0x128<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l00000000004196BB
	// succ:  l0000000000418E0F l00000000004196BB
l0000000000418E0F:
	SCZO = cond(Mem0[rsp + 0x128<64>:word32] - 0xE<32>)
	bl = CONVERT(Test(ULE,CZ), bool, int8)
	// succ:  l0000000000418E1A
l0000000000418E1A:
	ecx = Mem0[rsp + 0x128<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	ebx = ebx & eax
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x9C<64>:word32] = ecx
	Mem0[rsp + 0x8C<64>:word32] = ecx
	Mem0[rsp + 0x68<64>:word32] = ecx
	goto l0000000000418B6B
	// succ:  l0000000000418B6B
l0000000000418E3A:
	xmm0 = xmm4
	v115 = SLICE(xmm0, real64, 0) + SLICE(xmm4, real64, 0)
	v116 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v116, v115)
	v117 = SLICE(xmm0, real64, 0) + Mem0[0x0000000000490F30<p64>:real64]
	v118 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v118, v117)
	rdx = xmm0
	rax = xmm0
	rdx = rdx >>u 0x20<64>
	SCZO = cond(rdx)
	eax = eax
	rax = CONVERT(eax, word32, uint64)
	edx = edx - 0x3400000<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rdx = rdx << 0x20<64>
	SCZO = cond(rdx)
	rax = rax | rdx
	SZO = cond(rax)
	C = false
	// succ:  l0000000000418E67
l0000000000418E67:
	xmm1 = xmm4
	Mem0[rsp + 0x38<64>:word64] = rax
	xmm0 = SEQ(0<64>, Mem0[rsp + 0x38<64>:real64])
	v98 = SLICE(xmm1, real64, 0) - Mem0[0x0000000000490F38<p64>:real64]
	v99 = SLICE(xmm1, word64, 64)
	xmm1 = SEQ(v99, v98)
	CZP = cond(SLICE(xmm1, real64, 0) - SLICE(xmm0, real64, 0))
	O = false
	S = false
	branch Test(UGT,CZ) l0000000000419764
	// succ:  l0000000000418E88 l0000000000419764
l0000000000418E88:
	xmm2 = SEQ(0<64>, Mem0[0x0000000000490F40<p64>:real64])
	v100 = xmm0
	v101 = xmm2
	xmm0 = __xorpd(v100, v101)
	CZP = cond(SLICE(xmm0, real64, 0) - SLICE(xmm1, real64, 0))
	O = false
	S = false
	branch Test(UGT,CZ) l000000000041927D
	// succ:  l0000000000418E9E l000000000041927D
l0000000000418E9E:
	r9 = xmm4
	Mem0[rsp + 0x38<64>:word32] = 0<32>
	// succ:  l0000000000418EB0
l0000000000418EB0:
	SZO = cond(r11d & r11d)
	C = false
	branch Test(SG,S) l0000000000418F52
	// succ:  l0000000000418EB9 l0000000000418F52
l0000000000418EB9:
	rax = CONVERT(Mem0[rsp + 0x30<64>:word32], word32, int64)
	SCZO = cond(eax - Mem0[rbp + 0x14<64>:word32])
	branch Test(GT,SZO) l0000000000418F52
	// succ:  l0000000000418EC7 l0000000000418F52
l0000000000418EC7:
	ebx = Mem0[rsp + 0x68<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	rdx = Mem0[0x0000000000491FA0<p64>:word64]
	SZO = cond(ebx & ebx)
	C = false
	xmm2 = SEQ(0<64>, Mem0[rdx + rax * 8<64>:real64])
	branch Test(GT,SZO) l00000000004195E3
	// succ:  l0000000000418EDF l00000000004195E3
l0000000000418EDF:
	eax = Mem0[rsp + 0x128<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax >>u 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004195E3
	// succ:  l0000000000418EF1 l00000000004195E3
l0000000000418EF1:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(NE,Z) l000000000041927D
	// succ:  l0000000000418EF9 l000000000041927D
l0000000000418EF9:
	v121 = SLICE(xmm2, real64, 0) * Mem0[0x0000000000490F38<p64>:real64]
	v122 = SLICE(xmm2, word64, 64)
	xmm2 = SEQ(v122, v121)
	Mem0[rsp + 0x38<64>:word64] = r9
	xmm5 = SEQ(0<64>, Mem0[rsp + 0x38<64>:real64])
	CZP = cond(SLICE(xmm2, real64, 0) - SLICE(xmm5, real64, 0))
	O = false
	S = false
	branch Test(UGE,C) l000000000041927D
	// succ:  l0000000000418F16 l000000000041927D
l0000000000418F16:
	ebp = Mem0[rsp + 0x30<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	ebp = ebp + 2<32>
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	// succ:  l0000000000418F22
l0000000000418F22:
	rax = Mem0[rsp + 0x48<64>:word64]
	r15d = 0x20<32>
	r15 = CONVERT(r15d, word32, uint64)
	rbx = rax + 1<64>
	Mem0[rax:byte] = 0x31<8>
	// succ:  l0000000000418F34
l0000000000418F34:
	rcx = r12
	call fn000000000041A090 (retsize: 8;)
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000418D60
	// succ:  l0000000000418F45 l0000000000418D60
l0000000000418F45:
	rcx = rdi
	call fn000000000041A090 (retsize: 8;)
	goto l0000000000418D60
	// succ:  l0000000000418D60
l0000000000418F52:
	r9d = Mem0[rsp + 0x60<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(EQ,Z) l0000000000419460
	// succ:  l0000000000418F60 l0000000000419460
l0000000000418F60:
	edx = Mem0[rbp + 4<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edi = edi - r14d
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	ecx = r11d
	rcx = CONVERT(ecx, word32, uint64)
	eax = SLICE(rdi + 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx - edi
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	SCZO = cond(ecx - edx)
	Mem0[rsp + 0x9C<64>:word32] = eax
	branch Test(GE,SO) l0000000000418FAC
	// succ:  l0000000000418F79 l0000000000418FAC
l0000000000418F79:
	ebx = Mem0[rsp + 0x120<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	ecx = SLICE(rbx - 3<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx & 0xFFFFFFFD<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	branch Test(EQ,Z) l0000000000418FAC
	// succ:  l0000000000418F88 l0000000000418FAC
l0000000000418F88:
	ebx = Mem0[rsp + 0x68<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	r11d = r11d - edx
	r11 = CONVERT(r11d, word32, uint64)
	SCZO = cond(r11d)
	eax = SLICE(r11 + 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(ebx & ebx)
	C = false
	Mem0[rsp + 0x9C<64>:word32] = eax
	cl = CONVERT(Test(GT,SZO), bool, int8)
	SCZO = cond(ebx - eax)
	dl = CONVERT(Test(LT,SO), bool, int8)
	SZO = cond(cl & dl)
	C = false
	branch Test(EQ,Z) l00000000004196EF
	// succ:  l0000000000418FAC l00000000004196EF
l0000000000418FAC:
	SCZO = cond(Mem0[rsp + 0x120<64>:word32] - 1<32>)
	branch Test(LE,SZO) l00000000004196EF
	// succ:  l0000000000418FBA l00000000004196EF
l0000000000418FBA:
	ebx = Mem0[rsp + 0x58<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	eax = Mem0[rsp + 0x68<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r12d = ebx
	r12 = CONVERT(r12d, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	r12d = r12d - eax
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	SCZO = cond(ebx - eax)
	branch Test(GE,SO) l0000000000418FE3
	// succ:  l0000000000418FCF l0000000000418FE3
l0000000000418FCF:
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx - Mem0[rsp + 0x58<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	v133 = Mem0[rsp + 0x88<64>:word32] + edx
	Mem0[rsp + 0x88<64>:word32] = v133
	SCZO = cond(v133)
	Mem0[rsp + 0x58<64>:word32] = eax
	// succ:  l0000000000418FE3
l0000000000418FE3:
	eax = Mem0[rsp + 0x68<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000419982
	// succ:  l0000000000418FEF l0000000000419982
l0000000000418FEF:
	ebx = Mem0[rsp + 0x50<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	Mem0[rsp + 0x9C<64>:word32] = eax
	// succ:  l0000000000418FFA
l0000000000418FFA:
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	v144 = Mem0[rsp + 0x50<64>:word32] + eax
	Mem0[rsp + 0x50<64>:word32] = v144
	SCZO = cond(v144)
	v145 = Mem0[rsp + 0x40<64>:word32] + eax
	Mem0[rsp + 0x40<64>:word32] = v145
	SCZO = cond(v145)
	call fn000000000041A1C0 (retsize: 8;)
	rdi = rax
	// succ:  l000000000041900F
l000000000041900F:
	ecx = Mem0[rsp + 0x40<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	branch Test(LE,SZO) l0000000000419035
	// succ:  l0000000000419019 l0000000000419035
l0000000000419019:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(LE,SZO) l0000000000419035
	// succ:  l000000000041901D l0000000000419035
l000000000041901D:
	SCZO = cond(ecx - ebx)
	branch Test(LE,SZO) l0000000000419022
	// succ:  l000000000041901F_1 l0000000000419022
l000000000041901F_1:
	eax = ebx
	// succ:  l0000000000419022
l0000000000419022:
	v148 = Mem0[rsp + 0x50<64>:word32] - eax
	Mem0[rsp + 0x50<64>:word32] = v148
	SCZO = cond(v148)
	ecx = ecx - eax
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	Mem0[rsp + 0x9C<64>:word32] = eax
	ebx = ebx - eax
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	Mem0[rsp + 0x40<64>:word32] = ecx
	// succ:  l0000000000419035
l0000000000419035:
	r8d = Mem0[rsp + 0x58<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d & r8d)
	C = false
	branch Test(LE,SZO) l000000000041908B
	// succ:  l000000000041903F l000000000041908B
l000000000041903F:
	ecx = Mem0[rsp + 0x60<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0000000000419480
	// succ:  l000000000041904B l0000000000419480
l000000000041904B:
	SZO = cond(r12d & r12d)
	C = false
	branch Test(LE,SZO) l000000000041907E
	// succ:  l0000000000419050 l000000000041907E
l0000000000419050:
	rcx = rdi
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041A320 (retsize: 8;)
	rdx = rsi
	rcx = rax
	rdi = rax
	call fn000000000041A1F0 (retsize: 8;)
	rcx = rsi
	Mem0[rsp + 0x70<64>:word64] = rax
	call fn000000000041A090 (retsize: 8;)
	rax = Mem0[rsp + 0x70<64>:word64]
	rsi = rax
	// succ:  l000000000041907E
l000000000041907E:
	edx = Mem0[rsp + 0x58<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx - r12d
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	branch Test(NE,Z) l0000000000419484
	// succ:  l000000000041908B l0000000000419484
l000000000041908B:
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn000000000041A1C0 (retsize: 8;)
	r12 = rax
	eax = Mem0[rsp + 0x88<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004191D0
	// succ:  l00000000004190A7 l00000000004191D0
l00000000004190A7:
	rcx = r12
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041A320 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x120<64>:word32] - 1<32>)
	r12 = rax
	branch Test(GT,SZO) l00000000004190C8
	// succ:  l00000000004190BE l00000000004190C8
l00000000004190BE:
	SCZO = cond(r14d - 1<32>)
	branch Test(EQ,Z) l000000000041918C
	// succ:  l00000000004190C8 l000000000041918C
l00000000004190C8:
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	// succ:  l00000000004190CA
l00000000004190CA:
	eax = Mem0[r12 + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rax = CONVERT(eax, int32, int64)
	Z = Mem0[r12 + 0x18<64> + rax * 4<64>:word32] == 0<32>
	eax = __bsr(Mem0[r12 + 0x18<64> + rax * 4<64>:word32])
	eax = eax ^ 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l00000000004190DD
l00000000004190DD:
	eax = eax - Mem0[rsp + 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = Mem0[rsp + 0x50<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = eax - 4<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edx = edx + eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r13d = eax
	r13 = CONVERT(r13d, word32, uint64)
	Mem0[rsp + 0x9C<64>:word32] = eax
	SZO = cond(edx & edx)
	C = false
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(LE,SZO) l000000000041910F
	// succ:  l00000000004190FD l000000000041910F
l00000000004190FD:
	rcx = rsi
	call fn000000000041A490 (retsize: 8;)
	ecx = Mem0[rsp + 0x9C<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rax
	// succ:  l000000000041910F
l000000000041910F:
	edx = Mem0[rsp + 0x40<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx + ecx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l0000000000419124
	// succ:  l0000000000419119 l0000000000419124
l0000000000419119:
	rcx = r12
	call fn000000000041A490 (retsize: 8;)
	r12 = rax
	// succ:  l0000000000419124
l0000000000419124:
	eax = Mem0[rsp + 0x6C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004194A1
	// succ:  l0000000000419130 l00000000004194A1
l0000000000419130:
	r14d = Mem0[rsp + 0x68<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d & r14d)
	C = false
	branch Test(GT,SZO) l00000000004192F1
	// succ:  l000000000041913E l00000000004192F1
l000000000041913E:
	SCZO = cond(Mem0[rsp + 0x120<64>:word32] - 2<32>)
	branch Test(LE,SZO) l00000000004192F1
	// succ:  l000000000041914C l00000000004192F1
l000000000041914C:
	r11d = Mem0[rsp + 0x68<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d & r11d)
	C = false
	branch Test(NE,Z) l0000000000419282
	// succ:  l000000000041915A l0000000000419282
l000000000041915A:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = r12
	edx = 5<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041A100 (retsize: 8;)
	rcx = rsi
	rdx = rax
	r12 = rax
	call fn000000000041A5B0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000419282
	// succ:  l0000000000419180 l0000000000419282
l0000000000419180:
	ebp = Mem0[rsp + 0x30<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	ebp = ebp + 2<32>
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	goto l0000000000418F22
	// succ:  l0000000000418F22
l000000000041918C:
	eax = Mem0[rbp + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(r13d - eax)
	branch Test(LE,SZO) l00000000004190C8
	// succ:  l000000000041919B l00000000004190C8
l000000000041919B:
	v149 = Mem0[rsp + 0x50<64>:word32] + 1<32>
	Mem0[rsp + 0x50<64>:word32] = v149
	SCZO = cond(v149)
	v150 = Mem0[rsp + 0x40<64>:word32] + 1<32>
	Mem0[rsp + 0x40<64>:word32] = v150
	SCZO = cond(v150)
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	// succ:  l00000000004191B0
l00000000004191B0:
	edx = Mem0[rsp + 0x88<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l00000000004190DD
	// succ:  l00000000004191C4 l00000000004190DD
l00000000004191C4:
	goto l00000000004190CA
	// succ:  l00000000004190CA
l00000000004191D0:
	SCZO = cond(Mem0[rsp + 0x120<64>:word32] - 1<32>)
	branch Test(GT,SZO) l00000000004191E0
	// succ:  l00000000004191DA l00000000004191E0
l00000000004191DA:
	SCZO = cond(r14d - 1<32>)
	branch Test(EQ,Z) l00000000004191E4
	// succ:  l00000000004191E0 l00000000004191E4
l00000000004191E0:
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	goto l00000000004191B0
	// succ:  l00000000004191B0
l00000000004191E4:
	eax = Mem0[rbp + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(r13d - eax)
	branch Test(LE,SZO) l00000000004191B0
	// succ:  l00000000004191F1 l00000000004191B0
l00000000004191F1:
	goto l000000000041919B
	// succ:  l000000000041919B
l00000000004191F3:
	SCZO = cond(Mem0[rsp + 0x120<64>:word32] - 2<32>)
	Mem0[rsp + 0x60<64>:word32] = 0<32>
	branch Test(EQ,Z) l0000000000418E00
	// succ:  l0000000000419209 l0000000000418E00
l0000000000419209:
	xmm0 = 0<128>
	Mem0[rsp + 0x60<64>:word64] = r9
	Mem0[rsp + 0x68<64>:word32] = r11d
	v81 = CONVERT(edi, int32, real64)
	xmm0 = SEQ(SLICE(xmm0, word64, 64), v81)
	v82 = SLICE(xmm0, real64, 0) * Mem0[0x0000000000490F10<p64>:real64]
	v83 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v83, v82)
	ecx = CONVERT(SLICE(xmm0, real64, 0), real64, int32)
	ecx = ecx + 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	Mem0[rsp + 0x9C<64>:word32] = ecx
	call fn0000000000419C40 (retsize: 8;)
	Mem0[rsp + 0x48<64>:word64] = rax
	eax = Mem0[rbp + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r11d = Mem0[rsp + 0x68<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	r9 = Mem0[rsp + 0x60<64>:word64]
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rsp + 0x38<64>:word32] = eax
	branch Test(NE,Z) l00000000004196FD
	// succ:  l0000000000419255 l00000000004196FD
l0000000000419255:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x60<64>:word32] = 1<32>
	Mem0[rsp + 0x128<64>:word32] = 0<32>
	Mem0[rsp + 0x8C<64>:word32] = eax
	Mem0[rsp + 0x68<64>:word32] = eax
	goto l0000000000418EB0
	// succ:  l0000000000418EB0
l000000000041927D:
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	// succ:  l0000000000419282
l0000000000419282:
	ebp = Mem0[rsp + 0x128<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	rbx = Mem0[rsp + 0x48<64>:word64]
	r15d = 0x10<32>
	r15 = CONVERT(r15d, word32, uint64)
	ebp = -ebp
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	C = ebp == 0<32>
	goto l0000000000418F34
	// succ:  l0000000000418F34
l00000000004192A0:
	eax = Mem0[rsp + 0x30<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	v157 = Mem0[rsp + 0x50<64>:word32] - eax
	Mem0[rsp + 0x50<64>:word32] = v157
	SCZO = cond(v157)
	Mem0[rsp + 0x88<64>:word32] = 0<32>
	eax = -eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	C = eax == 0<32>
	Mem0[rsp + 0x58<64>:word32] = eax
	goto l0000000000418ADB
	// succ:  l0000000000418ADB
l00000000004192C0:
	eax = -eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	C = eax == 0<32>
	Mem0[rsp + 0x40<64>:word32] = 0<32>
	Mem0[rsp + 0x50<64>:word32] = eax
	goto l0000000000418ABC
	// succ:  l0000000000418ABC
l00000000004192D3:
	xmm0 = 0<128>
	v56 = CONVERT(ebx, int32, real64)
	xmm0 = SEQ(SLICE(xmm0, word64, 64), v56)
	CZP = cond(SLICE(xmm0, real64, 0) - SLICE(xmm1, real64, 0))
	O = false
	S = false
	branch Test(PE,P) l00000000004192E7
	// succ:  l00000000004192E1 l00000000004192E7
l00000000004192E1:
	branch Test(EQ,Z) l0000000000418A4A
	// succ:  l00000000004192E7 l0000000000418A4A
l00000000004192E7:
	v58 = Mem0[rsp + 0x30<64>:word32] - 1<32>
	Mem0[rsp + 0x30<64>:word32] = v58
	SCZO = cond(v58)
	goto l0000000000418A4A
	// succ:  l0000000000418A4A
l00000000004192F1:
	r10d = Mem0[rsp + 0x60<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d & r10d)
	C = false
	branch Test(EQ,Z) l0000000000419500
	// succ:  l00000000004192FF l0000000000419500
l00000000004192FF:
	edx = SLICE(rbx + r13, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l0000000000419312
	// succ:  l0000000000419307 l0000000000419312
l0000000000419307:
	rcx = rdi
	call fn000000000041A490 (retsize: 8;)
	rdi = rax
	// succ:  l0000000000419312
l0000000000419312:
	SZO = cond(ebp & ebp)
	C = false
	r13 = rdi
	branch Test(NE,Z) l00000000004199B5
	// succ:  l000000000041931D l00000000004199B5
l000000000041931D:
	Mem0[rsp + 0x9C<64>:word32] = 1<32>
	rbx = Mem0[rsp + 0x48<64>:word64]
	Mem0[rsp + 0x40<64>:word64] = r12
	Mem0[rsp + 0x50<64>:word64] = r15
	goto l00000000004193FE
	// succ:  l00000000004193FE
l0000000000419340:
	rcx = r8
	call fn000000000041A090 (retsize: 8;)
	eax = r12d
	rax = CONVERT(eax, word32, uint64)
	eax = eax | Mem0[rsp + 0x120<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	branch Test(NE,Z) l000000000041936A
	// succ:  l0000000000419354 l000000000041936A
l0000000000419354:
	ecx = Mem0[rsp + 0x38<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l000000000041936A
	// succ:  l000000000041935C l000000000041936A
l000000000041935C:
	rax = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(Mem0[rax:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l0000000000419B25
	// succ:  l000000000041936A l0000000000419B25
l000000000041936A:
	SZO = cond(r14d & r14d)
	C = false
	branch Test(SG,S) l0000000000419880
	// succ:  l0000000000419373 l0000000000419880
l0000000000419373:
	r14d = r14d | Mem0[rsp + 0x120<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	branch Test(NE,Z) l000000000041938B
	// succ:  l000000000041937D l000000000041938B
l000000000041937D:
	rax = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(Mem0[rax:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l0000000000419880
	// succ:  l000000000041938B l0000000000419880
l000000000041938B:
	SZO = cond(r12d & r12d)
	C = false
	branch Test(LE,SZO) l000000000041939B
	// succ:  l0000000000419390 l000000000041939B
l0000000000419390:
	SCZO = cond(Mem0[rsp + 0x38<64>:word32] - 2<32>)
	branch Test(NE,Z) l0000000000419A8F
	// succ:  l000000000041939B l0000000000419A8F
l000000000041939B:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	Mem0[rbx - 1<64>:byte] = bpl
	eax = Mem0[rsp + 0x68<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[rsp + 0x9C<64>:word32] - eax)
	branch Test(EQ,Z) l0000000000419A1B
	// succ:  l00000000004193B4 l0000000000419A1B
l00000000004193B4:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rsi
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041A100 (retsize: 8;)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(rdi - r13)
	rsi = rax
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	branch Test(EQ,Z) l0000000000419470
	// succ:  l00000000004193DB l0000000000419470
l00000000004193DB:
	call fn000000000041A100 (retsize: 8;)
	rcx = r13
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	rdi = rax
	call fn000000000041A100 (retsize: 8;)
	r13 = rax
	// succ:  l00000000004193F6
l00000000004193F6:
	v153 = Mem0[rsp + 0x9C<64>:word32] + 1<32>
	Mem0[rsp + 0x9C<64>:word32] = v153
	SCZO = cond(v153)
	// succ:  l00000000004193FE
l00000000004193FE:
	r12 = Mem0[rsp + 0x40<64>:word64]
	rcx = rsi
	rdx = r12
	call fn0000000000419CE0 (retsize: 8;)
	rdx = rdi
	rcx = rsi
	r15d = eax
	r15 = CONVERT(r15d, word32, uint64)
	ebp = SLICE(rax + 0x30<64>, word32, 0)
	rbp = CONVERT(ebp, word32, uint64)
	call fn000000000041A5B0 (retsize: 8;)
	rcx = r12
	rdx = r13
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	call fn000000000041A600 (retsize: 8;)
	r9d = Mem0[rax + 0x10<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	r8 = rax
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NE,Z) l0000000000419340
	// succ:  l0000000000419443 l0000000000419340
l0000000000419443:
	rdx = rax
	rcx = rsi
	Mem0[rsp + 0x58<64>:word64] = rax
	call fn000000000041A5B0 (retsize: 8;)
	r8 = Mem0[rsp + 0x58<64>:word64]
	r12d = eax
	r12 = CONVERT(r12d, word32, uint64)
	goto l0000000000419340
	// succ:  l0000000000419340
l0000000000419460:
	r12d = Mem0[rsp + 0x58<64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	ebx = Mem0[rsp + 0x50<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	goto l000000000041900F
	// succ:  l000000000041900F
l0000000000419470:
	call fn000000000041A100 (retsize: 8;)
	rdi = rax
	r13 = rax
	goto l00000000004193F6
	// succ:  l00000000004193F6
l0000000000419480:
	edx = Mem0[rsp + 0x58<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000419484
l0000000000419484:
	rcx = rsi
	call fn000000000041A320 (retsize: 8;)
	rsi = rax
	goto l000000000041908B
	// succ:  l000000000041908B
l0000000000419494:
	Mem0[rsp + 0x60<64>:word32] = 0<32>
	goto l0000000000418B39
	// succ:  l0000000000418B39
l00000000004194A1:
	rdx = r12
	rcx = rsi
	call fn000000000041A5B0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NS,S) l0000000000419130
	// succ:  l00000000004194B4 l0000000000419130
l00000000004194B4:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rsi
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	v151 = Mem0[rsp + 0x30<64>:word32] - 1<32>
	Mem0[rsp + 0x30<64>:word32] = v151
	SCZO = cond(v151)
	call fn000000000041A100 (retsize: 8;)
	rsi = rax
	eax = Mem0[rsp + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000419B98
	// succ:  l00000000004194D8 l0000000000419B98
l00000000004194D8:
	eax = Mem0[rsp + 0x8C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l00000000004194F5
	// succ:  l00000000004194E3 l00000000004194F5
l00000000004194E3:
	SCZO = cond(Mem0[rsp + 0x120<64>:word32] - 2<32>)
	Mem0[rsp + 0x68<64>:word32] = eax
	branch Test(GT,SZO) l000000000041914C
	// succ:  l00000000004194F5 l000000000041914C
l00000000004194F5:
	eax = Mem0[rsp + 0x8C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x68<64>:word32] = eax
	// succ:  l0000000000419500
l0000000000419500:
	Mem0[rsp + 0x9C<64>:word32] = 1<32>
	rbx = Mem0[rsp + 0x48<64>:word64]
	r13d = Mem0[rsp + 0x68<64>:word32]
	r13 = CONVERT(r13d, word32, uint64)
	goto l000000000041953B
	// succ:  l000000000041953B
l0000000000419520:
	rcx = rsi
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041A100 (retsize: 8;)
	v156 = Mem0[rsp + 0x9C<64>:word32] + 1<32>
	Mem0[rsp + 0x9C<64>:word32] = v156
	SCZO = cond(v156)
	rsi = rax
	// succ:  l000000000041953B
l000000000041953B:
	rdx = r12
	rcx = rsi
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	call fn0000000000419CE0 (retsize: 8;)
	ebp = SLICE(rax + 0x30<64>, word32, 0)
	rbp = CONVERT(ebp, word32, uint64)
	Mem0[rbx - 1<64>:byte] = bpl
	SCZO = cond(Mem0[rsp + 0x9C<64>:word32] - r13d)
	branch Test(LT,SO) l0000000000419520
	// succ:  l000000000041955B l0000000000419520
l000000000041955B:
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	// succ:  l000000000041955E
l000000000041955E:
	eax = Mem0[rsp + 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041992C
	// succ:  l000000000041956A l000000000041992C
l000000000041956A:
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000041995C
	// succ:  l0000000000419573 l000000000041995C
l0000000000419573:
	SCZO = cond(Mem0[rsi + 0x14<64>:word32] - 1<32>)
	branch Test(LE,SZO) l0000000000419AF3
	// succ:  l000000000041957D l0000000000419AF3
l000000000041957D:
	edx = CONVERT(Mem0[rbx - 1<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[rsp + 0x48<64>:word64]
	goto l00000000004195A0
	// succ:  l00000000004195A0
l0000000000419590:
	SCZO = cond(rax - rcx)
	branch Test(EQ,Z) l000000000041974C
	// succ:  l0000000000419599 l000000000041974C
l0000000000419599:
	edx = CONVERT(Mem0[rax - 1<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rbx = rax
	// succ:  l00000000004195A0
l00000000004195A0:
	SCZO = cond(dl - 0x39<8>)
	rax = rbx - 1<64>
	branch Test(EQ,Z) l0000000000419590
	// succ:  l00000000004195A9 l0000000000419590
l00000000004195A9:
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r15d = 0x20<32>
	r15 = CONVERT(r15d, word32, uint64)
	Mem0[rax:byte] = dl
	// succ:  l00000000004195B4
l00000000004195B4:
	rcx = r12
	call fn000000000041A090 (retsize: 8;)
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l00000000004196AF
	// succ:  l00000000004195C5 l00000000004196AF
l00000000004195C5:
	SCZO = cond(r14 - rdi)
	branch Test(EQ,Z) l00000000004195D7
	// succ:  l00000000004195CA l00000000004195D7
l00000000004195CA:
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l00000000004195D7
	// succ:  l00000000004195CF l00000000004195D7
l00000000004195CF:
	rcx = r14
	call fn000000000041A090 (retsize: 8;)
	// succ:  l00000000004195D7
l00000000004195D7:
	ebp = Mem0[rsp + 0x30<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	ebp = ebp + 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	goto l0000000000418F45
	// succ:  l0000000000418F45
l00000000004195E3:
	Mem0[rsp + 0x40<64>:word64] = r9
	rdi = Mem0[rsp + 0x48<64>:word64]
	xmm0 = SEQ(0<64>, Mem0[rsp + 0x40<64>:real64])
	Mem0[rsp + 0x9C<64>:word32] = 1<32>
	xmm1 = xmm0
	rbx = rdi
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	v123 = SLICE(xmm1, real64, 0) / SLICE(xmm2, real64, 0)
	v124 = SLICE(xmm1, word64, 64)
	xmm1 = SEQ(v124, v123)
	eax = CONVERT(SLICE(xmm1, real64, 0), real64, int32)
	xmm1 = 0<128>
	v125 = CONVERT(eax, int32, real64)
	xmm1 = SEQ(SLICE(xmm1, word64, 64), v125)
	edx = SLICE(rax + 0x30<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rdi:byte] = dl
	v127 = SLICE(xmm1, real64, 0) * SLICE(xmm2, real64, 0)
	v128 = SLICE(xmm1, word64, 64)
	xmm1 = SEQ(v128, v127)
	v129 = SLICE(xmm0, real64, 0) - SLICE(xmm1, real64, 0)
	v130 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v130, v129)
	CZP = cond(SLICE(xmm0, real64, 0) - SLICE(xmm6, real64, 0))
	O = false
	S = false
	branch Test(PE,P) l000000000041962E
	// succ:  l000000000041962C l000000000041962E
l000000000041962C:
	branch Test(EQ,Z) l00000000004196A0
	// succ:  l000000000041962E l00000000004196A0
l000000000041962E:
	edx = Mem0[rsp + 0x9C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(Mem0[rsp + 0x68<64>:word32] - edx)
	branch Test(EQ,Z) l0000000000419727
	// succ:  l000000000041963F l0000000000419727
l000000000041963F:
	xmm3 = SEQ(0<64>, Mem0[0x0000000000490F20<p64>:real64])
	xmm4 = xmm6
	ecx = Mem0[rsp + 0x68<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	goto l0000000000419660
	// succ:  l0000000000419660
l0000000000419651:
	edx = Mem0[rsp + 0x9C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(ecx - edx)
	branch Test(EQ,Z) l0000000000419727
	// succ:  l0000000000419660 l0000000000419727
l0000000000419660:
	v134 = SLICE(xmm0, real64, 0) * SLICE(xmm3, real64, 0)
	v135 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v135, v134)
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	Mem0[rsp + 0x9C<64>:word32] = edx
	xmm1 = xmm0
	v136 = SLICE(xmm1, real64, 0) / SLICE(xmm2, real64, 0)
	v137 = SLICE(xmm1, word64, 64)
	xmm1 = SEQ(v137, v136)
	eax = CONVERT(SLICE(xmm1, real64, 0), real64, int32)
	xmm1 = 0<128>
	v138 = CONVERT(eax, int32, real64)
	xmm1 = SEQ(SLICE(xmm1, word64, 64), v138)
	edx = SLICE(rax + 0x30<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx - 1<64>:byte] = dl
	v139 = SLICE(xmm1, real64, 0) * SLICE(xmm2, real64, 0)
	v140 = SLICE(xmm1, word64, 64)
	xmm1 = SEQ(v140, v139)
	v141 = SLICE(xmm0, real64, 0) - SLICE(xmm1, real64, 0)
	v142 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v142, v141)
	CZP = cond(SLICE(xmm0, real64, 0) - SLICE(xmm6, real64, 0))
	O = false
	S = false
	branch Test(PE,P) l0000000000419651
	// succ:  l000000000041969A l0000000000419651
l000000000041969A:
	CZP = cond(SLICE(xmm0, real64, 0) - SLICE(xmm4, real64, 0))
	O = false
	S = false
	branch Test(NE,Z) l0000000000419651
	// succ:  l00000000004196A0 l0000000000419651
l00000000004196A0:
	ebp = Mem0[rsp + 0x30<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	ebp = ebp + 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	// succ:  l00000000004196A7
l00000000004196A7:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	goto l0000000000418D60
	// succ:  l0000000000418D60
l00000000004196AF:
	ebp = Mem0[rsp + 0x30<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	ebp = ebp + 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	goto l0000000000418D60
	// succ:  l0000000000418D60
l00000000004196BB:
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	Mem0[rsp + 0x128<64>:word32] = 1<32>
	goto l0000000000418E1A
	// succ:  l0000000000418E1A
l00000000004196D0:
	SCZO = cond(Mem0[rsp + 0x68<64>:word32] - 0xE<32>)
	Mem0[rsp + 0x9C<64>:word32] = 1<32>
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	bl = CONVERT(Test(ULE,CZ), bool, int8)
	ebx = ebx & eax
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l0000000000418B6B
	// succ:  l0000000000418B6B
l00000000004196EF:
	r12d = Mem0[rsp + 0x58<64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	ebx = Mem0[rsp + 0x50<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000418FFA
	// succ:  l0000000000418FFA
l00000000004196FD:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x60<64>:word32] = 1<32>
	Mem0[rsp + 0x8C<64>:word32] = eax
	Mem0[rsp + 0x68<64>:word32] = eax
	Mem0[rsp + 0x128<64>:word32] = 0<32>
	goto l0000000000418B95
	// succ:  l0000000000418B95
l0000000000419727:
	r10d = Mem0[rsp + 0x38<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d & r10d)
	C = false
	branch Test(EQ,Z) l00000000004199EE
	// succ:  l0000000000419735 l00000000004199EE
l0000000000419735:
	SCZO = cond(Mem0[rsp + 0x38<64>:word32] - 1<32>)
	branch Test(EQ,Z) l0000000000419AE1
	// succ:  l0000000000419740 l0000000000419AE1
l0000000000419740:
	ebp = Mem0[rsp + 0x30<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	ebp = ebp + 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	goto l0000000000418D53
	// succ:  l0000000000418D53
l000000000041974C:
	rax = Mem0[rsp + 0x48<64>:word64]
	v155 = Mem0[rsp + 0x30<64>:word32] + 1<32>
	Mem0[rsp + 0x30<64>:word32] = v155
	SCZO = cond(v155)
	r15d = 0x20<32>
	r15 = CONVERT(r15d, word32, uint64)
	Mem0[rax:byte] = 0x31<8>
	goto l00000000004195B4
	// succ:  l00000000004195B4
l0000000000419764:
	ebp = 2<32>
	rbp = CONVERT(ebp, word32, uint64)
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	goto l0000000000418F22
	// succ:  l0000000000418F22
l0000000000419773:
	r10 = Mem0[0x0000000000491FA0<p64>:word64]
	Mem0[rsp + 0x38<64>:word64] = rax
	xmm3 = SEQ(0<64>, Mem0[rsp + 0x38<64>:real64])
	Mem0[rsp + 0x9C<64>:word32] = 1<32>
	rbx = Mem0[rsp + 0x48<64>:word64]
	xmm1 = SEQ(0<64>, Mem0[0x0000000000490F20<p64>:real64])
	v96 = SLICE(xmm3, real64, 0) * Mem0[r10 + rdx * 8<64>:real64]
	v97 = SLICE(xmm3, word64, 64)
	xmm3 = SEQ(v97, v96)
	goto l00000000004197B3
	// succ:  l00000000004197B3
l00000000004197A5:
	v119 = SLICE(xmm0, real64, 0) * SLICE(xmm1, real64, 0)
	v120 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v120, v119)
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	Mem0[rsp + 0x9C<64>:word32] = edx
	// succ:  l00000000004197B3
l00000000004197B3:
	eax = CONVERT(SLICE(xmm0, real64, 0), real64, int32)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000000004197C7
	// succ:  l00000000004197BB l00000000004197C7
l00000000004197BB:
	xmm2 = 0<128>
	v108 = CONVERT(eax, int32, real64)
	xmm2 = SEQ(SLICE(xmm2, word64, 64), v108)
	v109 = SLICE(xmm0, real64, 0) - SLICE(xmm2, real64, 0)
	v110 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v110, v109)
	// succ:  l00000000004197C7
l00000000004197C7:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	eax = eax + 0x30<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx - 1<64>:byte] = al
	edx = Mem0[rsp + 0x9C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - r9d)
	branch Test(NE,Z) l00000000004197A5
	// succ:  l00000000004197DD l00000000004197A5
l00000000004197DD:
	xmm1 = SEQ(0<64>, Mem0[0x0000000000490F50<p64>:real64])
	xmm2 = xmm3
	v111 = SLICE(xmm2, real64, 0) + SLICE(xmm1, real64, 0)
	v112 = SLICE(xmm2, word64, 64)
	xmm2 = SEQ(v112, v111)
	CZP = cond(SLICE(xmm0, real64, 0) - SLICE(xmm2, real64, 0))
	O = false
	S = false
	branch Test(UGT,CZ) l0000000000419847
	// succ:  l00000000004197F3 l0000000000419847
l00000000004197F3:
	v113 = SLICE(xmm1, real64, 0) - SLICE(xmm3, real64, 0)
	v114 = SLICE(xmm1, word64, 64)
	xmm1 = SEQ(v114, v113)
	CZP = cond(SLICE(xmm1, real64, 0) - SLICE(xmm0, real64, 0))
	O = false
	S = false
	branch Test(ULE,CZ) l0000000000418E9E
	// succ:  l0000000000419801 l0000000000418E9E
l0000000000419801:
	CZP = cond(SLICE(xmm0, real64, 0) - SLICE(xmm6, real64, 0))
	O = false
	S = false
	branch Test(PE,P) l0000000000419B8D
	// succ:  l000000000041980B l0000000000419B8D
l000000000041980B:
	branch Test(NE,Z) l0000000000419B8D
	// succ:  l0000000000419811 l0000000000419B8D
l0000000000419811:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	goto l0000000000419827
	// succ:  l0000000000419827
l0000000000419820:
	eax = CONVERT(Mem0[rbx - 2<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rbx = rdx
	// succ:  l0000000000419827
l0000000000419827:
	SCZO = cond(al - 0x30<8>)
	rdx = rbx - 1<64>
	branch Test(EQ,Z) l0000000000419820
	// succ:  l000000000041982F l0000000000419820
l000000000041982F:
	ebp = SLICE(rcx + 1<64>, word32, 0)
	rbp = CONVERT(ebp, word32, uint64)
	goto l0000000000418D60
	// succ:  l0000000000418D60
l0000000000419837:
	SZO = cond(al & 1<8>)
	C = false
	ecx = Mem0[rsp + 0x30<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rbx - 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l0000000000419B8D
	// succ:  l0000000000419847 l0000000000419B8D
l0000000000419847:
	r8 = Mem0[rsp + 0x48<64>:word64]
	goto l0000000000419860
	// succ:  l0000000000419860
l0000000000419850:
	SCZO = cond(rdx - r8)
	branch Test(EQ,Z) l000000000041999C
	// succ:  l0000000000419859 l000000000041999C
l0000000000419859:
	eax = CONVERT(Mem0[rdx - 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rbx = rdx
	// succ:  l0000000000419860
l0000000000419860:
	SCZO = cond(al - 0x39<8>)
	rdx = rbx - 1<64>
	branch Test(EQ,Z) l0000000000419850
	// succ:  l0000000000419868 l0000000000419850
l0000000000419868:
	Mem0[rsp + 0x48<64>:word64] = r8
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	// succ:  l0000000000419870
l0000000000419870:
	Mem0[rdx:byte] = al
	ebp = SLICE(rcx + 1<64>, word32, 0)
	rbp = CONVERT(ebp, word32, uint64)
	r15d = 0x20<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l0000000000418D60
	// succ:  l0000000000418D60
l0000000000419880:
	edx = Mem0[rsp + 0x38<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = r12d
	rax = CONVERT(eax, word32, uint64)
	r14d = ebp
	r14 = CONVERT(r14d, word32, uint64)
	r12 = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000419AC1
	// succ:  l0000000000419897 l0000000000419AC1
l0000000000419897:
	SCZO = cond(Mem0[rsi + 0x14<64>:word32] - 1<32>)
	branch Test(LE,SZO) l0000000000419AB7
	// succ:  l00000000004198A1 l0000000000419AB7
l00000000004198A1:
	SCZO = cond(Mem0[rsp + 0x38<64>:word32] - 2<32>)
	branch Test(NE,Z) l00000000004198F7
	// succ:  l00000000004198A8 l00000000004198F7
l00000000004198A8:
	goto l0000000000419AD6
	// succ:  l0000000000419AD6
l00000000004198B0:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = r13
	Mem0[rbx - 1<64>:byte] = r14b
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041A100 (retsize: 8;)
	SCZO = cond(rdi - r13)
	rcx = rsi
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l00000000004198D7
	// succ:  l00000000004198D3_1 l00000000004198D7
l00000000004198D3_1:
	rdi = rax
	// succ:  l00000000004198D7
l00000000004198D7:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rbp = rax
	call fn000000000041A100 (retsize: 8;)
	rdx = r12
	rcx = rax
	rsi = rax
	call fn0000000000419CE0 (retsize: 8;)
	r14d = SLICE(rax + 0x30<64>, word32, 0)
	r14 = CONVERT(r14d, word32, uint64)
	r13 = rbp
	// succ:  l00000000004198F7
l00000000004198F7:
	rdx = r13
	rcx = r12
	call fn000000000041A5B0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l00000000004198B0
	// succ:  l0000000000419906 l00000000004198B0
l0000000000419906:
	SCZO = cond(r14d - 0x39<32>)
	branch Test(EQ,Z) l0000000000419B06
	// succ:  l0000000000419910 l0000000000419B06
l0000000000419910:
	r14d = r14d + 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	SCZO = cond(r14d)
	r15d = 0x20<32>
	r15 = CONVERT(r15d, word32, uint64)
	// succ:  l000000000041991A
l000000000041991A:
	Mem0[rbx:byte] = r14b
	r14 = rdi
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	rdi = r13
	goto l00000000004195B4
	// succ:  l00000000004195B4
l000000000041992C:
	rcx = rsi
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041A490 (retsize: 8;)
	rdx = r12
	rcx = rax
	rsi = rax
	call fn000000000041A5B0 (retsize: 8;)
	SCZO = cond(eax - 0<32>)
	branch Test(GT,SZO) l000000000041957D
	// succ:  l0000000000419950 l000000000041957D
l0000000000419950:
	branch Test(NE,Z) l000000000041995C
	// succ:  l0000000000419952 l000000000041995C
l0000000000419952:
	bpl = bpl & 1<8>
	SZO = cond(bpl)
	C = false
	branch Test(NE,Z) l000000000041957D
	// succ:  l000000000041995C l000000000041957D
l000000000041995C:
	SCZO = cond(Mem0[rsi + 0x14<64>:word32] - 1<32>)
	r15d = 0x10<32>
	r15 = CONVERT(r15d, word32, uint64)
	branch Test(GT,SZO) l0000000000419973
	// succ:  l0000000000419968 l0000000000419973
l0000000000419968:
	goto l0000000000419BFD
	// succ:  l0000000000419BFD
l0000000000419970:
	rbx = rax
	// succ:  l0000000000419973
l0000000000419973:
	SCZO = cond(Mem0[rbx - 1<64>:byte] - 0x30<8>)
	rax = rbx - 1<64>
	branch Test(EQ,Z) l0000000000419970
	// succ:  l000000000041997D l0000000000419970
l000000000041997D:
	goto l00000000004195B4
	// succ:  l00000000004195B4
l0000000000419982:
	ebx = Mem0[rsp + 0x50<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	Mem0[rsp + 0x9C<64>:word32] = 0<32>
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	ebx = ebx - Mem0[rsp + 0x68<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	goto l0000000000418FFA
	// succ:  l0000000000418FFA
l000000000041999C:
	Mem0[rsp + 0x48<64>:word64] = r8
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	Mem0[r8:byte] = 0x30<8>
	rdx = r8
	eax = 0x31<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000419870
	// succ:  l0000000000419870
l00000000004199B5:
	ecx = Mem0[rdi + 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000419F80 (retsize: 8;)
	rcx = rax + 0x10<64>
	rbx = rax
	rax = CONVERT(Mem0[rdi + 0x14<64>:word32], word32, int64)
	rdx = rdi + 0x10<64>
	r8 = CONVERT(8<32> + rax * 4<64>, word32, word64)
	rax = memcpy(rcx, rdx, r8)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000041A490 (retsize: 8;)
	r13 = rax
	goto l000000000041931D
	// succ:  l000000000041931D
l00000000004199EE:
	v146 = SLICE(xmm0, real64, 0) + SLICE(xmm0, real64, 0)
	v147 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v147, v146)
	CZP = cond(SLICE(xmm0, real64, 0) - SLICE(xmm2, real64, 0))
	O = false
	S = false
	branch Test(UGT,CZ) l0000000000419AE1
	// succ:  l00000000004199FC l0000000000419AE1
l00000000004199FC:
	CZP = cond(SLICE(xmm2, real64, 0) - SLICE(xmm0, real64, 0))
	O = false
	S = false
	branch Test(PE,P) l0000000000419A08
	// succ:  l0000000000419A02 l0000000000419A08
l0000000000419A02:
	branch Test(EQ,Z) l0000000000419837
	// succ:  l0000000000419A08 l0000000000419837
l0000000000419A08:
	eax = CONVERT(Mem0[rbx - 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = Mem0[rsp + 0x30<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	r15d = 0x10<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l0000000000419827
	// succ:  l0000000000419827
l0000000000419A1B:
	r14 = rdi
	r12 = Mem0[rsp + 0x40<64>:word64]
	rdi = r13
	goto l000000000041955E
	// succ:  l000000000041955E
l0000000000419A2B:
	eax = Mem0[rsp + 0x68<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000418E3A
	// succ:  l0000000000419A37 l0000000000418E3A
l0000000000419A37:
	r9d = Mem0[rsp + 0x8C<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(LE,SZO) l0000000000418E9E
	// succ:  l0000000000419A48 l0000000000418E9E
l0000000000419A48:
	xmm0 = SEQ(0<64>, Mem0[0x0000000000490F20<p64>:real64])
	ecx = 0xFFFFFFFF<32>
	rcx = CONVERT(ecx, word32, uint64)
	xmm1 = SEQ(0<64>, Mem0[0x0000000000490F28<p64>:real64])
	v102 = SLICE(xmm0, real64, 0) * SLICE(xmm4, real64, 0)
	v103 = SLICE(xmm0, word64, 64)
	xmm0 = SEQ(v103, v102)
	v104 = SLICE(xmm1, real64, 0) * SLICE(xmm0, real64, 0)
	v105 = SLICE(xmm1, word64, 64)
	xmm1 = SEQ(v105, v104)
	v106 = SLICE(xmm1, real64, 0) + Mem0[0x0000000000490F30<p64>:real64]
	v107 = SLICE(xmm1, word64, 64)
	xmm1 = SEQ(v107, v106)
	rdx = xmm1
	rax = xmm1
	rdx = rdx >>u 0x20<64>
	SCZO = cond(rdx)
	eax = eax
	rax = CONVERT(eax, word32, uint64)
	edx = edx - 0x3400000<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rdx = rdx << 0x20<64>
	SCZO = cond(rdx)
	rax = rax | rdx
	SZO = cond(rax)
	C = false
	goto l0000000000418C44
	// succ:  l0000000000418C44
l0000000000419A8F:
	SCZO = cond(ebp - 0x39<32>)
	r12 = Mem0[rsp + 0x40<64>:word64]
	rax = rbx
	branch Test(EQ,Z) l0000000000419B09
	// succ:  l0000000000419A9C l0000000000419B09
l0000000000419A9C:
	ebp = ebp + 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	r14 = rdi
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	Mem0[rax:byte] = bpl
	rdi = r13
	r15d = 0x20<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l00000000004195B4
	// succ:  l00000000004195B4
l0000000000419AB7:
	SCZO = cond(Mem0[rsi + 0x18<64>:word32] - 0<32>)
	branch Test(NE,Z) l00000000004198A1
	// succ:  l0000000000419AC1 l00000000004198A1
l0000000000419AC1:
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l0000000000419B59
	// succ:  l0000000000419AC9 l0000000000419B59
l0000000000419AC9:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	// succ:  l0000000000419ACC
l0000000000419ACC:
	SCZO = cond(Mem0[rsi + 0x14<64>:word32] - 1<32>)
	branch Test(LE,SZO) l0000000000419BD8
	// succ:  l0000000000419AD6 l0000000000419BD8
l0000000000419AD6:
	r15d = 0x10<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l000000000041991A
	// succ:  l000000000041991A
l0000000000419AE1:
	eax = CONVERT(Mem0[rbx - 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = Mem0[rsp + 0x30<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	r8 = Mem0[rsp + 0x48<64>:word64]
	goto l0000000000419860
	// succ:  l0000000000419860
l0000000000419AF3:
	eax = Mem0[rsi + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000041957D
	// succ:  l0000000000419AFE l000000000041957D
l0000000000419AFE:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	goto l0000000000419973
	// succ:  l0000000000419973
l0000000000419B06:
	rax = rbx
	// succ:  l0000000000419B09
l0000000000419B09:
	r14 = rdi
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	rdi = r13
	Mem0[rax:byte] = 0x39<8>
	edx = 0x39<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[rsp + 0x48<64>:word64]
	goto l00000000004195A0
	// succ:  l00000000004195A0
l0000000000419B25:
	SCZO = cond(ebp - 0x39<32>)
	r12 = Mem0[rsp + 0x40<64>:word64]
	rax = rbx
	branch Test(EQ,Z) l0000000000419B06
	// succ:  l0000000000419B32 l0000000000419B06
l0000000000419B32:
	SZO = cond(r14d & r14d)
	C = false
	branch Test(LE,SZO) l0000000000419C10
	// succ:  l0000000000419B3B l0000000000419C10
l0000000000419B3B:
	ebp = r15d
	rbp = CONVERT(ebp, word32, uint64)
	r15d = 0x20<32>
	r15 = CONVERT(r15d, word32, uint64)
	ebp = ebp + 0x31<32>
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	// succ:  l0000000000419B47
l0000000000419B47:
	r14 = rdi
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	Mem0[rax:byte] = bpl
	rdi = r13
	goto l00000000004195B4
	// succ:  l00000000004195B4
l0000000000419B59:
	rcx = rsi
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041A490 (retsize: 8;)
	rdx = r12
	rcx = rax
	rsi = rax
	call fn000000000041A5B0 (retsize: 8;)
	SCZO = cond(eax - 0<32>)
	branch Test(LE,SZO) l0000000000419BEA
	// succ:  l0000000000419B79 l0000000000419BEA
l0000000000419B79:
	SCZO = cond(ebp - 0x39<32>)
	branch Test(EQ,Z) l0000000000419B06
	// succ:  l0000000000419B7E l0000000000419B06
l0000000000419B7E:
	r14d = SLICE(rbp + 1<64>, word32, 0)
	r14 = CONVERT(r14d, word32, uint64)
	r15d = 0x20<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l0000000000419ACC
	// succ:  l0000000000419ACC
l0000000000419B8D:
	r15d = 0x10<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l0000000000419827
	// succ:  l0000000000419827
l0000000000419B98:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rdi
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041A100 (retsize: 8;)
	rdi = rax
	eax = Mem0[rsp + 0x8C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l0000000000419BC8
	// succ:  l0000000000419BB6 l0000000000419BC8
l0000000000419BB6:
	SCZO = cond(Mem0[rsp + 0x120<64>:word32] - 2<32>)
	Mem0[rsp + 0x68<64>:word32] = eax
	branch Test(GT,SZO) l000000000041914C
	// succ:  l0000000000419BC8 l000000000041914C
l0000000000419BC8:
	eax = Mem0[rsp + 0x8C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x68<64>:word32] = eax
	goto l00000000004192FF
	// succ:  l00000000004192FF
l0000000000419BD8:
	SCZO = cond(Mem0[rsi + 0x18<64>:word32] - 0<32>)
	eax = 0x10<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l0000000000419BE5
	// succ:  l0000000000419BE1_1 l0000000000419BE5
l0000000000419BE1_1:
	r15d = eax
	// succ:  l0000000000419BE5
l0000000000419BE5:
	goto l000000000041991A
	// succ:  l000000000041991A
l0000000000419BEA:
	branch Test(NE,Z) l0000000000419BF2
	// succ:  l0000000000419BEC l0000000000419BF2
l0000000000419BEC:
	SZO = cond(bpl & 1<8>)
	C = false
	branch Test(NE,Z) l0000000000419B79
	// succ:  l0000000000419BF2 l0000000000419B79
l0000000000419BF2:
	r15d = 0x20<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l0000000000419ACC
	// succ:  l0000000000419ACC
l0000000000419BFD:
	SCZO = cond(Mem0[rsi + 0x18<64>:word32] - 1<32>)
	r15d = r15d - r15d - C
	r15 = CONVERT(r15d, word32, uint64)
	SCZO = cond(r15d)
	r15d = ~r15d
	r15 = CONVERT(r15d, word32, uint64)
	r15d = r15d & 0x10<32>
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	goto l0000000000419973
	// succ:  l0000000000419973
l0000000000419C10:
	SCZO = cond(Mem0[rsi + 0x14<64>:word32] - 1<32>)
	r15d = 0x10<32>
	r15 = CONVERT(r15d, word32, uint64)
	branch Test(GT,SZO) l0000000000419B47
	// succ:  l0000000000419C20 l0000000000419B47
l0000000000419C20:
	SCZO = cond(Mem0[rsi + 0x18<64>:word32] - 1<32>)
	r15d = r15d - r15d - C
	r15 = CONVERT(r15d, word32, uint64)
	SCZO = cond(r15d)
	r15d = ~r15d
	r15 = CONVERT(r15d, word32, uint64)
	r15d = r15d & 0x10<32>
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	goto l0000000000419B47
	// succ:  l0000000000419B47
l0000000000419C33:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000418917
	// succ:  l0000000000418917
fn00000000004187D0_exit:


// fn0000000000419C40
// Return size: 8
define fn0000000000419C40
fn0000000000419C40_entry:
	rsp = fp
	// succ:  l0000000000419C40
l0000000000419C40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	SCZO = cond(ecx - 0x1B<32>)
	branch Test(LE,SZO) l0000000000419C5D
	// succ:  l0000000000419C4C l0000000000419C5D
l0000000000419C4C:
	eax = 4<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000419C51
l0000000000419C51:
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ebx = ebx + 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	edx = SLICE(rax + 0x17<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - ecx)
	branch Test(LT,SO) l0000000000419C51
	// succ:  l0000000000419C5D l0000000000419C51
l0000000000419C5D:
	ecx = ebx
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000419F80 (retsize: 8;)
	Mem0[rax:word32] = ebx
	rax = rax + 4<64>
	SCZO = cond(rax)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000419C40_exit
fn0000000000419C40_exit:


// fn0000000000419C70
// Return size: 8
define fn0000000000419C70
fn0000000000419C70_entry:
	rsp = fp
	// succ:  l0000000000419C70
l0000000000419C70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	ecx = r8d
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rdx
	call fn0000000000419C40 (retsize: 8;)
	ecx = CONVERT(Mem0[rbx:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	r8 = rbx + 1<64>
	SZO = cond(cl & cl)
	C = false
	Mem0[rax:byte] = cl
	rcx = rax
	branch Test(EQ,Z) l0000000000419CA9
	// succ:  l0000000000419C94 l0000000000419CA9
l0000000000419C94:
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	r9d = CONVERT(Mem0[r8 - 1<64>:byte], byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	rcx = rcx + 1<64>
	SCZO = cond(rcx)
	SZO = cond(r9b & r9b)
	C = false
	Mem0[rcx:byte] = r9b
	branch Test(NE,Z) l0000000000419C94
	// succ:  l0000000000419CA9 l0000000000419C94
l0000000000419CA9:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000419CB1
	// succ:  l0000000000419CAE l0000000000419CB1
l0000000000419CAE:
	Mem0[rsi:word64] = rcx
	// succ:  l0000000000419CB1
l0000000000419CB1:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000419C70_exit
fn0000000000419C70_exit:


// fn0000000000419CC0
// Return size: 8
define fn0000000000419CC0
fn0000000000419CC0_entry:
	rsp = fp
	// succ:  l0000000000419CC0
l0000000000419CC0:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rax = rcx
	ecx = Mem0[rcx - 4<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	edx = edx << cl
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	Mem0[rax + 4<64>:word32] = ecx
	rcx = rax - 4<64>
	Mem0[rax + 8<64>:word32] = edx
	// succ:  l0000000000419CD7_thunk_fn000000000041A090
l0000000000419CD7_thunk_fn000000000041A090:
	call fn000000000041A090 (retsize: 0;)
	return
	// succ:  fn0000000000419CC0_exit
fn0000000000419CC0_exit:


// fn0000000000419CE0
// Return size: 8
define fn0000000000419CE0
fn0000000000419CE0_entry:
	rsp = fp
	// succ:  l0000000000419CE0
l0000000000419CE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edi = Mem0[rdx + 0x14<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi - Mem0[rcx + 0x14<64>:word32])
	r15 = rdx
	branch Test(GT,SZO) l0000000000419E49
	// succ:  l0000000000419D01 l0000000000419E49
l0000000000419D01:
	edi = edi - 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	rbx = rdx + 0x18<64>
	r12 = rcx + 0x18<64>
	r13 = CONVERT(edi, word32, int64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r13 = r13 << 2<64>
	SCZO = cond(r13)
	rbp = rbx + r13
	r13 = r13 + r12
	SCZO = cond(r13)
	eax = Mem0[rbp + 0<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r8d = SLICE(rax + 1<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	eax = Mem0[r13 + 0<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	v23 = edx_eax
	edx = CONVERT(v23 % r8d, word64, uint32)
	eax = CONVERT(v23 /u r8d, word32, uint32)
	SCZO = cond(eax)
	SZO = cond(eax & eax)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	Mem0[rsp + 0x2C<64>:word32] = eax
	branch Test(EQ,Z) l0000000000419DC7
	// succ:  l0000000000419D39 l0000000000419DC7
l0000000000419D39:
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rsi = rbx
	r11 = r12
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	// succ:  l0000000000419D50
l0000000000419D50:
	rsi = rsi + 4<64>
	SCZO = cond(rsi)
	r8d = Mem0[rsi - 4<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	r9d = Mem0[r11:word32]
	r9 = CONVERT(r9d, word32, uint64)
	r11 = r11 + 4<64>
	SCZO = cond(r11)
	r8 = r8 *s rdx
	SCZO = cond(r8)
	r8 = r8 + rax
	SCZO = cond(r8)
	rax = r8
	r8d = r8d
	r8 = CONVERT(r8d, word32, uint64)
	r9 = r9 - r8
	SCZO = cond(r9)
	rax = rax >>u 0x20<64>
	SCZO = cond(rax)
	r9 = r9 - r10
	SCZO = cond(r9)
	r10 = r9
	Mem0[r11 - 4<64>:word32] = r9d
	r10 = r10 >>u 0x20<64>
	SCZO = cond(r10)
	r10d = r10d & 1<32>
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	SCZO = cond(rbp - rsi)
	branch Test(UGE,C) l0000000000419D50
	// succ:  l0000000000419D8A l0000000000419D50
l0000000000419D8A:
	r11d = Mem0[r13 + 0<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d & r11d)
	C = false
	branch Test(NE,Z) l0000000000419DC7
	// succ:  l0000000000419D93 l0000000000419DC7
l0000000000419D93:
	rax = r13 - 4<64>
	SCZO = cond(r12 - rax)
	branch Test(UGE,C) l0000000000419DC4
	// succ:  l0000000000419D9C l0000000000419DC4
l0000000000419D9C:
	r10d = Mem0[r13 - 4<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d & r10d)
	C = false
	branch Test(EQ,Z) l0000000000419DB8
	// succ:  l0000000000419DA5 l0000000000419DB8
l0000000000419DA5:
	goto l0000000000419DC4
	// succ:  l0000000000419DC4
l0000000000419DB0:
	r9d = Mem0[rax:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NE,Z) l0000000000419DC4
	// succ:  l0000000000419DB8 l0000000000419DC4
l0000000000419DB8:
	rax = rax - 4<64>
	SCZO = cond(rax)
	edi = edi - 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	SCZO = cond(r12 - rax)
	branch Test(ULT,C) l0000000000419DB0
	// succ:  l0000000000419DC4 l0000000000419DB0
l0000000000419DC4:
	Mem0[rcx + 0x14<64>:word32] = edi
	// succ:  l0000000000419DC7
l0000000000419DC7:
	rdx = r15
	rsi = rcx
	call fn000000000041A5B0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000419E45
	// succ:  l0000000000419DD6 l0000000000419E45
l0000000000419DD6:
	eax = SLICE(r14 + 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	rcx = r12
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x2C<64>:word32] = eax
	// succ:  l0000000000419DE3
l0000000000419DE3:
	rbx = rbx + 4<64>
	SCZO = cond(rbx)
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	r8d = Mem0[rbx - 4<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rcx + 4<64>
	SCZO = cond(rcx)
	rax = rax - r8
	SCZO = cond(rax)
	rax = rax - rdx
	SCZO = cond(rax)
	rdx = rax
	Mem0[rcx - 4<64>:word32] = eax
	rdx = rdx >>u 0x20<64>
	SCZO = cond(rdx)
	edx = edx & 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(rbp - rbx)
	branch Test(UGE,C) l0000000000419DE3
	// succ:  l0000000000419E09 l0000000000419DE3
l0000000000419E09:
	rax = CONVERT(edi, word32, int64)
	rdx = r12 + rax * 4<64>
	r8d = Mem0[rdx:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NE,Z) l0000000000419E45
	// succ:  l0000000000419E18 l0000000000419E45
l0000000000419E18:
	rax = rdx - 4<64>
	SCZO = cond(r12 - rax)
	branch Test(UGE,C) l0000000000419E42
	// succ:  l0000000000419E21 l0000000000419E42
l0000000000419E21:
	ecx = Mem0[rdx - 4<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0000000000419E36
	// succ:  l0000000000419E28 l0000000000419E36
l0000000000419E28:
	goto l0000000000419E42
	// succ:  l0000000000419E42
l0000000000419E30:
	edx = Mem0[rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000419E42
	// succ:  l0000000000419E36 l0000000000419E42
l0000000000419E36:
	rax = rax - 4<64>
	SCZO = cond(rax)
	edi = edi - 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	SCZO = cond(r12 - rax)
	branch Test(ULT,C) l0000000000419E30
	// succ:  l0000000000419E42 l0000000000419E30
l0000000000419E42:
	Mem0[rsi + 0x14<64>:word32] = edi
	// succ:  l0000000000419E45
l0000000000419E45:
	eax = Mem0[rsp + 0x2C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000419E49
l0000000000419E49:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000419CE0_exit
fn0000000000419CE0_exit:


// fn0000000000419E60
// Return size: 8
define fn0000000000419E60
fn0000000000419E60_entry:
	rsp = fp
	// succ:  l0000000000419E60
l0000000000419E60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = Mem0[0x00000000004AE410<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rsi = CONVERT(ecx, word32, int64)
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l0000000000419EDD
	// succ:  l0000000000419E74 l0000000000419EDD
l0000000000419E74:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000419EA2
	// succ:  l0000000000419E78 l0000000000419EA2
l0000000000419E78:
	SCZO = cond(eax - 1<32>)
	branch Test(NE,Z) l0000000000419E9B
	// succ:  l0000000000419E7D l0000000000419E9B
l0000000000419E7D:
	rbx = Sleep
	// succ:  l0000000000419E84
l0000000000419E84:
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	Sleep(rcx)
	eax = Mem0[0x00000000004AE410<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l0000000000419E84
	// succ:  l0000000000419E96 l0000000000419E84
l0000000000419E96:
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l0000000000419EDD
	// succ:  l0000000000419E9B l0000000000419EDD
l0000000000419E9B:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000419E60_exit
l0000000000419EA2:
	al = 1<8>
	v15 = Mem0[0x00000000004AE410<p64>:word32]
	Mem0[0x00000000004AE410<p64>:word32] = eax
	eax = v15
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000419F00
	// succ:  l0000000000419EAE l0000000000419F00
l0000000000419EAE:
	rcx = 0x00000000004AE440<p64>
	rbx = InitializeCriticalSection
	InitializeCriticalSection(rcx)
	rcx = 0x00000000004AE468<p64>
	InitializeCriticalSection(rcx)
	rcx = 0x0000000000419F30<p64>
	call fn0000000000410BF0 (retsize: 8;)
	rsp = rsp + 8<64>
	Mem0[0x00000000004AE410<p64>:word32] = 2<32>
	// succ:  l0000000000419EDD
l0000000000419EDD:
	rdx = rsi + rsi * 4<64>
	rax = 0x00000000004AE440<p64>
	rcx = rax + rdx * 8<64>
	rax = EnterCriticalSection
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000419E60_exit
l0000000000419F00:
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l0000000000419F20
	// succ:  l0000000000419F05 l0000000000419F20
l0000000000419F05:
	eax = Mem0[0x00000000004AE410<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l0000000000419E7D
	// succ:  l0000000000419F14 l0000000000419E7D
l0000000000419F14:
	goto l0000000000419E96
	// succ:  l0000000000419E96
l0000000000419F20:
	Mem0[0x00000000004AE410<p64>:word32] = 2<32>
	goto l0000000000419EDD
	// succ:  l0000000000419EDD
fn0000000000419E60_exit:


// fn0000000000419F30
// Return size: 8
define fn0000000000419F30
fn0000000000419F30_entry:
	rsp = fp
	// succ:  l0000000000419F30
l0000000000419F30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = 3<32>
	rax = CONVERT(eax, word32, uint64)
	v7 = Mem0[0x00000000004AE410<p64>:word32]
	Mem0[0x00000000004AE410<p64>:word32] = eax
	eax = v7
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l0000000000419F50
	// succ:  l0000000000419F45 l0000000000419F50
l0000000000419F45:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000419F30_exit
l0000000000419F50:
	rbx = DeleteCriticalSection
	rcx = 0x00000000004AE440<p64>
	DeleteCriticalSection(rcx)
	rcx = 0x00000000004AE468<p64>
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000419F30_exit
fn0000000000419F30_exit:


// fn0000000000419F80
// Return size: 8
define fn0000000000419F80
fn0000000000419F80_entry:
	rsp = fp
	// succ:  l0000000000419F80
l0000000000419F80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	ebx = ecx
	rbx = CONVERT(ebx, word32, uint64)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call fn0000000000419E60 (retsize: 8;)
	SCZO = cond(ebx - 9<32>)
	branch Test(GT,SZO) l0000000000419FD0
	// succ:  l0000000000419F95 l0000000000419FD0
l0000000000419F95:
	rdx = 0x00000000004AE3C0<p64>
	rcx = CONVERT(ebx, word32, int64)
	rdi = Mem0[rdx + rcx * 8<64>:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000041A030
	// succ:  l0000000000419FAC l000000000041A030
l0000000000419FAC:
	SCZO = cond(Mem0[0x00000000004AE410<p64>:word32] - 2<32>)
	r8 = Mem0[rdi:word64]
	Mem0[rdx + rcx * 8<64>:word64] = r8
	branch Test(NE,Z) l000000000041A016
	// succ:  l0000000000419FBC l000000000041A016
l0000000000419FBC:
	rcx = 0x00000000004AE440<p64>
	LeaveCriticalSection(rcx)
	goto l000000000041A016
	// succ:  l000000000041A016
l0000000000419FD0:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	ecx = ebx
	rcx = CONVERT(ecx, word32, uint64)
	eax = eax << cl
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	eax = SLICE(rax - 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = CONVERT(0x27<32> + rax * 4<64>, word32, word64)
	rdx = rdx >>u 3<64>
	SCZO = cond(rdx)
	edx = edx
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000419FEE
l0000000000419FEE:
	rcx = CONVERT(0<32> + rdx * 8<64>, word32, word64)
	rax = malloc(rcx)
	SZO = cond(rax & rax)
	C = false
	rdi = rax
	branch Test(EQ,Z) l000000000041A08A
	// succ:  l000000000041A007 l000000000041A08A
l000000000041A007:
	SCZO = cond(Mem0[0x00000000004AE410<p64>:word32] - 2<32>)
	Mem0[rdi + 8<64>:word32] = ebx
	Mem0[rdi + 0xC<64>:word32] = esi
	branch Test(EQ,Z) l0000000000419FBC
	// succ:  l000000000041A016 l0000000000419FBC
l000000000041A016:
	Mem0[rdi + 0x14<64>:word32] = 0<32>
	Mem0[rdi + 0x10<64>:word32] = 0<32>
	rax = rdi
	// succ:  l000000000041A027
l000000000041A027:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000419F80_exit
l000000000041A030:
	ecx = ebx
	rcx = CONVERT(ecx, word32, uint64)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rdi = Mem0[0x00000000004770D0<p64>:word64]
	eax = eax << cl
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rcx = 0x00000000004ADAC0<p64>
	edx = SLICE(rax - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	rax = rdi
	rdx = CONVERT(edx, word32, int64)
	rax = rax - rcx
	SCZO = cond(rax)
	rdx = CONVERT(0x27<32> + rdx * 4<64>, word32, word64)
	rcx = rax
	rcx = rcx >> 3<64>
	SCZO = cond(rcx)
	rdx = rdx >>u 3<64>
	SCZO = cond(rdx)
	edx = edx
	rdx = CONVERT(edx, word32, uint64)
	rcx = rcx + rdx
	SCZO = cond(rcx)
	SCZO = cond(rcx - 0x120<64>)
	branch Test(UGT,CZ) l0000000000419FEE
	// succ:  l000000000041A07A l0000000000419FEE
l000000000041A07A:
	rdx = rdi + rdx * 8<64>
	Mem0[0x00000000004770D0<p64>:word64] = rdx
	goto l000000000041A007
	// succ:  l000000000041A007
l000000000041A08A:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041A027
	// succ:  l000000000041A027
fn0000000000419F80_exit:


// fn000000000041A090
// Return size: 8
define fn000000000041A090
fn000000000041A090_entry:
	rsp = fp
	// succ:  l000000000041A090
l000000000041A090:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041A0C9
	// succ:  l000000000041A09A l000000000041A0C9
l000000000041A09A:
	SCZO = cond(Mem0[rcx + 8<64>:word32] - 9<32>)
	branch Test(GT,SZO) l000000000041A0D0
	// succ:  l000000000041A0A0 l000000000041A0D0
l000000000041A0A0:
	rbx = rcx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call fn0000000000419E60 (retsize: 8;)
	rdx = CONVERT(Mem0[rbx + 8<64>:word32], word32, int64)
	rax = 0x00000000004AE3C0<p64>
	SCZO = cond(Mem0[0x00000000004AE410<p64>:word32] - 2<32>)
	rcx = Mem0[rax + rdx * 8<64>:word64]
	Mem0[rax + rdx * 8<64>:word64] = rbx
	Mem0[rbx:word64] = rcx
	branch Test(EQ,Z) l000000000041A0E0
	// succ:  l000000000041A0C9 l000000000041A0E0
l000000000041A0C9:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041A090_exit
l000000000041A0D0:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	free(rcx)
	return
	// succ:  fn000000000041A090_exit
l000000000041A0E0:
	rax = LeaveCriticalSection
	rcx = 0x00000000004AE440<p64>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call rax (retsize: 0;)
	return
	// succ:  fn000000000041A090_exit
fn000000000041A090_exit:


// fn000000000041A100
// Return size: 8
define fn000000000041A100
fn000000000041A100_entry:
	rsp = fp
	// succ:  l000000000041A100
l000000000041A100:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	esi = Mem0[rcx + 0x14<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r10 = rcx + 0x18<64>
	rdi = rcx
	rbx = CONVERT(r8d, word32, int64)
	rdx = CONVERT(edx, word32, int64)
	// succ:  l000000000041A120
l000000000041A120:
	eax = Mem0[r10 + r9 * 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = rax *s rdx
	SCZO = cond(rax)
	rax = rax + rbx
	SCZO = cond(rax)
	rbx = rax
	Mem0[r10 + r9 * 4<64>:word32] = eax
	r9 = r9 + 1<64>
	SCZO = cond(r9)
	rbx = rbx >>u 0x20<64>
	SCZO = cond(rbx)
	SCZO = cond(esi - r9d)
	branch Test(GT,SZO) l000000000041A120
	// succ:  l000000000041A13F l000000000041A120
l000000000041A13F:
	SZO = cond(rbx & rbx)
	C = false
	rax = rdi
	branch Test(EQ,Z) l000000000041A15C
	// succ:  l000000000041A147 l000000000041A15C
l000000000041A147:
	SCZO = cond(esi - Mem0[rdi + 0xC<64>:word32])
	branch Test(GE,SO) l000000000041A165
	// succ:  l000000000041A14C l000000000041A165
l000000000041A14C:
	rax = CONVERT(esi, word32, int64)
	esi = esi + 1<32>
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	Mem0[rdi + 0x18<64> + rax * 4<64>:word32] = ebx
	Mem0[rdi + 0x14<64>:word32] = esi
	rax = rdi
	// succ:  l000000000041A15C
l000000000041A15C:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041A100_exit
l000000000041A165:
	eax = Mem0[rdi + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = SLICE(rax + 1<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000419F80 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l000000000041A1AE
	// succ:  l000000000041A178 l000000000041A1AE
l000000000041A178:
	rcx = rax + 0x10<64>
	rax = CONVERT(Mem0[rdi + 0x14<64>:word32], word32, int64)
	rdx = rdi + 0x10<64>
	r8 = CONVERT(8<32> + rax * 4<64>, word32, word64)
	rax = memcpy(rcx, rdx, r8)
	rcx = rdi
	rdi = rbp
	call fn000000000041A090 (retsize: 8;)
	rax = CONVERT(esi, word32, int64)
	esi = esi + 1<32>
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	Mem0[rdi + 0x18<64> + rax * 4<64>:word32] = ebx
	Mem0[rdi + 0x14<64>:word32] = esi
	rax = rdi
	goto l000000000041A15C
	// succ:  l000000000041A15C
l000000000041A1AE:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041A15C
	// succ:  l000000000041A15C
fn000000000041A100_exit:


// fn000000000041A1C0
// Return size: 8
define fn000000000041A1C0
fn000000000041A1C0_entry:
	rsp = fp
	// succ:  l000000000041A1C0
l000000000041A1C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	ebx = ecx
	rbx = CONVERT(ebx, word32, uint64)
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000419F80 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041A1E0
	// succ:  l000000000041A1D6 l000000000041A1E0
l000000000041A1D6:
	Mem0[rax + 0x18<64>:word32] = ebx
	Mem0[rax + 0x14<64>:word32] = 1<32>
	// succ:  l000000000041A1E0
l000000000041A1E0:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041A1C0_exit
fn000000000041A1C0_exit:


// fn000000000041A1F0
// Return size: 8
define fn000000000041A1F0
fn000000000041A1F0_entry:
	rsp = fp
	// succ:  l000000000041A1F0
l000000000041A1F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r13 = CONVERT(Mem0[rcx + 0x14<64>:word32], word32, int64)
	rbx = CONVERT(Mem0[rdx + 0x14<64>:word32], word32, int64)
	r12 = rcx
	r14 = rdx
	SCZO = cond(r13d - ebx)
	branch Test(LT,SO) l000000000041A311
	// succ:  l000000000041A215 l000000000041A311
l000000000041A215:
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	rbx = CONVERT(r13d, word32, int64)
	r13 = CONVERT(eax, word32, int64)
	// succ:  l000000000041A21D
l000000000041A21D:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	esi = SLICE(rbx + r13, word32, 0)
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi - Mem0[r12 + 0xC<64>:word32])
	al = CONVERT(Test(GT,SZO), bool, int8)
	eax = eax + Mem0[r12 + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000419F80 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041A31C
	// succ:  l000000000041A240 l000000000041A31C
l000000000041A240:
	rdi = rax + 0x18<64>
	rdx = CONVERT(esi, word32, int64)
	rbp = rdi + rdx * 4<64>
	r8 = rdi
	SCZO = cond(rdi - rbp)
	branch Test(UGE,C) l000000000041A263
	// succ:  l000000000041A253 l000000000041A263
l000000000041A253:
	Mem0[r8:word32] = 0<32>
	r8 = r8 + 4<64>
	SCZO = cond(r8)
	SCZO = cond(rbp - r8)
	branch Test(UGT,CZ) l000000000041A253
	// succ:  l000000000041A263 l000000000041A253
l000000000041A263:
	rdx = r14 + 0x18<64>
	r12 = r12 + 0x18<64>
	SCZO = cond(r12)
	rbx = r12 + rbx * 4<64>
	r13 = rdx + r13 * 4<64>
	SCZO = cond(rdx - r13)
	branch Test(UGE,C) l000000000041A2D9
	// succ:  l000000000041A278 l000000000041A2D9
l000000000041A278:
	// succ:  l000000000041A280
l000000000041A280:
	rdx = rdx + 4<64>
	SCZO = cond(rdx)
	r11d = Mem0[rdx - 4<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d & r11d)
	C = false
	branch Test(EQ,Z) l000000000041A2D0
	// succ:  l000000000041A28D l000000000041A2D0
l000000000041A28D:
	r9 = rdi
	r8 = r12
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	goto l000000000041A2A3
	// succ:  l000000000041A2A3
l000000000041A2A0:
	r9 = r14
	// succ:  l000000000041A2A3
l000000000041A2A3:
	r8 = r8 + 4<64>
	SCZO = cond(r8)
	ecx = Mem0[r8 - 4<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	r14d = Mem0[r9:word32]
	r14 = CONVERT(r14d, word32, uint64)
	rcx = rcx *s r11
	SCZO = cond(rcx)
	rcx = rcx + r14
	SCZO = cond(rcx)
	r14 = r9 + 4<64>
	rcx = rcx + r10
	SCZO = cond(rcx)
	r10 = rcx
	Mem0[r14 - 4<64>:word32] = ecx
	r10 = r10 >>u 0x20<64>
	SCZO = cond(r10)
	SCZO = cond(rbx - r8)
	branch Test(UGT,CZ) l000000000041A2A0
	// succ:  l000000000041A2CC l000000000041A2A0
l000000000041A2CC:
	Mem0[r9 + 4<64>:word32] = r10d
	// succ:  l000000000041A2D0
l000000000041A2D0:
	rdi = rdi + 4<64>
	SCZO = cond(rdi)
	SCZO = cond(r13 - rdx)
	branch Test(UGT,CZ) l000000000041A280
	// succ:  l000000000041A2D9 l000000000041A280
l000000000041A2D9:
	SZO = cond(esi & esi)
	C = false
	branch Test(LE,SZO) l000000000041A2FF
	// succ:  l000000000041A2DD l000000000041A2FF
l000000000041A2DD:
	r8d = Mem0[rbp - 4<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp - 4<64>
	SZO = cond(r8d & r8d)
	C = false
	branch Test(EQ,Z) l000000000041A2FA
	// succ:  l000000000041A2EA l000000000041A2FA
l000000000041A2EA:
	goto l000000000041A2FF
	// succ:  l000000000041A2FF
l000000000041A2F0:
	rdx = rdx - 4<64>
	SCZO = cond(rdx)
	ecx = Mem0[rdx:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l000000000041A2FF
	// succ:  l000000000041A2FA l000000000041A2FF
l000000000041A2FA:
	esi = esi - 1<32>
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	branch Test(NE,Z) l000000000041A2F0
	// succ:  l000000000041A2FF l000000000041A2F0
l000000000041A2FF:
	Mem0[rax + 0x14<64>:word32] = esi
	// succ:  l000000000041A302
l000000000041A302:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041A1F0_exit
l000000000041A311:
	r12 = rdx
	r14 = rcx
	goto l000000000041A21D
	// succ:  l000000000041A21D
l000000000041A31C:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041A302
	// succ:  l000000000041A302
fn000000000041A1F0_exit:


// fn000000000041A320
// Return size: 8
define fn000000000041A320
fn000000000041A320_entry:
	rsp = fp
	// succ:  l000000000041A320
l000000000041A320:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	rbp = rcx
	ebx = edx
	rbx = CONVERT(ebx, word32, uint64)
	eax = eax & 3<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	branch Test(NE,Z) l000000000041A3C0
	// succ:  l000000000041A338 l000000000041A3C0
l000000000041A338:
	ebx = ebx >> 2<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	rax = rbp
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l000000000041A38C
	// succ:  l000000000041A342 l000000000041A38C
l000000000041A342:
	rdi = Mem0[0x00000000004ADA80<p64>:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(NE,Z) l000000000041A362
	// succ:  l000000000041A34E l000000000041A362
l000000000041A34E:
	goto l000000000041A40D
	// succ:  l000000000041A40D
l000000000041A353:
	ebx = ebx >> 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	branch Test(EQ,Z) l000000000041A389
	// succ:  l000000000041A357 l000000000041A389
l000000000041A357:
	rsi = Mem0[rdi:word64]
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000041A395
	// succ:  l000000000041A35F l000000000041A395
l000000000041A35F:
	rdi = rsi
	// succ:  l000000000041A362
l000000000041A362:
	SZO = cond(bl & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000041A353
	// succ:  l000000000041A367 l000000000041A353
l000000000041A367:
	rdx = rdi
	rcx = rbp
	call fn000000000041A1F0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rsi = rax
	branch Test(EQ,Z) l000000000041A3E3
	// succ:  l000000000041A37A l000000000041A3E3
l000000000041A37A:
	rcx = rbp
	rbp = rsi
	call fn000000000041A090 (retsize: 8;)
	ebx = ebx >> 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	branch Test(NE,Z) l000000000041A357
	// succ:  l000000000041A389 l000000000041A357
l000000000041A389:
	rax = rbp
	// succ:  l000000000041A38C
l000000000041A38C:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041A320_exit
l000000000041A395:
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000419E60 (retsize: 8;)
	rsi = Mem0[rdi:word64]
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000041A3EE
	// succ:  l000000000041A3A7 l000000000041A3EE
l000000000041A3A7:
	SCZO = cond(Mem0[0x00000000004AE410<p64>:word32] - 2<32>)
	branch Test(NE,Z) l000000000041A35F
	// succ:  l000000000041A3B0 l000000000041A35F
l000000000041A3B0:
	rcx = 0x00000000004AE468<p64>
	LeaveCriticalSection(rcx)
	goto l000000000041A35F
	// succ:  l000000000041A35F
l000000000041A3C0:
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rdx = 0x0000000000490F80<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rax = CONVERT(eax, int32, int64)
	edx = Mem0[rdx + rax * 4<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041A100 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(NE,Z) l000000000041A338
	// succ:  l000000000041A3E3 l000000000041A338
l000000000041A3E3:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000041A3E5
l000000000041A3E5:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041A320_exit
l000000000041A3EE:
	rdx = rdi
	rcx = rdi
	call fn000000000041A1F0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rsi = rax
	Mem0[rdi:word64] = rax
	branch Test(EQ,Z) l000000000041A3E3
	// succ:  l000000000041A404 l000000000041A3E3
l000000000041A404:
	Mem0[rax:word64] = 0<64>
	goto l000000000041A3A7
	// succ:  l000000000041A3A7
l000000000041A40D:
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000419E60 (retsize: 8;)
	rdi = Mem0[0x00000000004ADA80<p64>:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000041A442
	// succ:  l000000000041A423 l000000000041A442
l000000000041A423:
	SCZO = cond(Mem0[0x00000000004AE410<p64>:word32] - 2<32>)
	branch Test(NE,Z) l000000000041A362
	// succ:  l000000000041A430 l000000000041A362
l000000000041A430:
	rcx = 0x00000000004AE468<p64>
	LeaveCriticalSection(rcx)
	goto l000000000041A362
	// succ:  l000000000041A362
l000000000041A442:
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000419F80 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rdi = rax
	branch Test(EQ,Z) l000000000041A472
	// succ:  l000000000041A454 l000000000041A472
l000000000041A454:
	Mem0[rax + 0x18<64>:word32] = 0x271<32>
	Mem0[rax + 0x14<64>:word32] = 1<32>
	Mem0[0x00000000004ADA80<p64>:word64] = rax
	Mem0[rax:word64] = 0<64>
	goto l000000000041A423
	// succ:  l000000000041A423
l000000000041A472:
	Mem0[0x00000000004ADA80<p64>:word64] = 0<64>
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041A3E5
	// succ:  l000000000041A3E5
fn000000000041A320_exit:


// fn000000000041A490
// Return size: 8
define fn000000000041A490
fn000000000041A490_entry:
	rsp = fp
	// succ:  l000000000041A490
l000000000041A490:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdi = rcx
	ebp = edx
	rbp = CONVERT(ebp, word32, uint64)
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	r12d = Mem0[rdi + 0x14<64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	ebp = ebp >> 5<32>
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	eax = Mem0[rdi + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = Mem0[rcx + 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	r12d = r12d + ebp
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	ebx = SLICE(r12 + 1<64>, word32, 0)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx - eax)
	branch Test(LE,SZO) l000000000041A4C9
	// succ:  l000000000041A4BC l000000000041A4C9
l000000000041A4BC:
	// succ:  l000000000041A4C0
l000000000041A4C0:
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	SCZO = cond(ebx - eax)
	branch Test(GT,SZO) l000000000041A4C0
	// succ:  l000000000041A4C9 l000000000041A4C0
l000000000041A4C9:
	call fn0000000000419F80 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r13 = rax
	branch Test(EQ,Z) l000000000041A59F
	// succ:  l000000000041A4DA l000000000041A59F
l000000000041A4DA:
	SZO = cond(ebp & ebp)
	C = false
	r8 = rax + 0x18<64>
	branch Test(LE,SZO) l000000000041A597
	// succ:  l000000000041A4E6 l000000000041A597
l000000000041A4E6:
	ebp = ebp - 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	r9 = r8 + 4<64> + rbp * 4<64>
	// succ:  l000000000041A4F0
l000000000041A4F0:
	r8 = r8 + 4<64>
	SCZO = cond(r8)
	Mem0[r8 - 4<64>:word32] = 0<32>
	SCZO = cond(r8 - r9)
	branch Test(NE,Z) l000000000041A4F0
	// succ:  l000000000041A501 l000000000041A4F0
l000000000041A501:
	rax = CONVERT(Mem0[rdi + 0x14<64>:word32], word32, int64)
	r8 = rdi + 0x18<64>
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0x1F<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rbp = r8 + rax * 4<64>
	branch Test(EQ,Z) l000000000041A580
	// succ:  l000000000041A514 l000000000041A580
l000000000041A514:
	eax = 0x20<32>
	rax = CONVERT(eax, word32, uint64)
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	eax = eax - edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	goto l000000000041A523
	// succ:  l000000000041A523
l000000000041A520:
	r9 = rsi
	// succ:  l000000000041A523
l000000000041A523:
	r10d = Mem0[r8:word32]
	r10 = CONVERT(r10d, word32, uint64)
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	rsi = r9 + 4<64>
	r8 = r8 + 4<64>
	SCZO = cond(r8)
	r10d = r10d << cl
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	r10d = r10d | r11d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	Mem0[rsi - 4<64>:word32] = r10d
	r11d = Mem0[r8 - 4<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	r11d = r11d >>u cl
	r11 = CONVERT(r11d, word32, uint64)
	SCZO = cond(r11d)
	SCZO = cond(rbp - r8)
	branch Test(UGT,CZ) l000000000041A520
	// succ:  l000000000041A548 l000000000041A520
l000000000041A548:
	r12d = r12d + 2<32>
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	SZO = cond(r11d & r11d)
	C = false
	Mem0[r9 + 4<64>:word32] = r11d
	branch Test(EQ,Z) l000000000041A557
	// succ:  l000000000041A553_1 l000000000041A557
l000000000041A553_1:
	ebx = r12d
	// succ:  l000000000041A557
l000000000041A557:
	ebx = ebx - 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	rcx = rdi
	Mem0[r13 + 0x14<64>:word32] = ebx
	call fn000000000041A090 (retsize: 8;)
	rax = r13
	// succ:  l000000000041A569
l000000000041A569:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041A490_exit
l000000000041A580:
	r8 = r8 + 4<64>
	SCZO = cond(r8)
	edx = Mem0[r8 - 4<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r9 = r9 + 4<64>
	SCZO = cond(r9)
	SCZO = cond(rbp - r8)
	Mem0[r9 - 4<64>:word32] = edx
	branch Test(UGT,CZ) l000000000041A580
	// succ:  l000000000041A595 l000000000041A580
l000000000041A595:
	goto l000000000041A557
	// succ:  l000000000041A557
l000000000041A597:
	r9 = r8
	goto l000000000041A501
	// succ:  l000000000041A501
l000000000041A59F:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041A569
	// succ:  l000000000041A569
fn000000000041A490_exit:


// fn000000000041A5B0
// Return size: 8
define fn000000000041A5B0
fn000000000041A5B0_entry:
	rsp = fp
	// succ:  l000000000041A5B0
l000000000041A5B0:
	r8 = CONVERT(Mem0[rdx + 0x14<64>:word32], word32, int64)
	eax = Mem0[rcx + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - r8d
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000041A5F2
	// succ:  l000000000041A5BE l000000000041A5F2
l000000000041A5BE:
	r8 = r8 << 2<64>
	SCZO = cond(r8)
	rcx = rcx + 0x18<64>
	SCZO = cond(rcx)
	rax = rcx + r8
	rdx = rdx + 0x18<64> + r8
	goto l000000000041A5D6
	// succ:  l000000000041A5D6
l000000000041A5D1:
	SCZO = cond(rcx - rax)
	branch Test(UGE,C) l000000000041A5F0
	// succ:  l000000000041A5D6 l000000000041A5F0
l000000000041A5D6:
	rdx = rdx - 4<64>
	SCZO = cond(rdx)
	rax = rax - 4<64>
	SCZO = cond(rax)
	r9d = Mem0[rdx:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(Mem0[rax:word32] - r9d)
	branch Test(EQ,Z) l000000000041A5D1
	// succ:  l000000000041A5E6 l000000000041A5D1
l000000000041A5E6:
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax | 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000041A5B0_exit
l000000000041A5F0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000041A5F2
l000000000041A5F2:
	return
	// succ:  fn000000000041A5B0_exit
fn000000000041A5B0_exit:


// fn000000000041A600
// Return size: 8
define fn000000000041A600
fn000000000041A600_entry:
	rsp = fp
	// succ:  l000000000041A600
l000000000041A600:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx
	rdi = rdx
	call fn000000000041A5B0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041A700
	// succ:  l000000000041A61A l000000000041A700
l000000000041A61A:
	ebx = 0<32>
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(SG,S) l000000000041A722
	// succ:  l000000000041A625 l000000000041A722
l000000000041A625:
	ecx = Mem0[rsi + 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000419F80 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041A732
	// succ:  l000000000041A636 l000000000041A732
l000000000041A636:
	rdx = CONVERT(Mem0[rsi + 0x14<64>:word32], word32, int64)
	rcx = rsi + 0x18<64>
	Mem0[rax + 0x10<64>:word32] = ebx
	r10 = rdi + 0x18<64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rbx = rdx
	rsi = rcx + rdx * 4<64>
	rdx = CONVERT(Mem0[rdi + 0x14<64>:word32], word32, int64)
	rdi = r10 + rdx * 4<64>
	rdx = rax + 0x18<64>
	// succ:  l000000000041A660
l000000000041A660:
	rcx = rcx + 4<64>
	SCZO = cond(rcx)
	r10 = r10 + 4<64>
	SCZO = cond(r10)
	r11d = Mem0[r10 - 4<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	r8d = Mem0[rcx - 4<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rdx + 4<64>
	SCZO = cond(rdx)
	r8 = r8 - r11
	SCZO = cond(r8)
	r8 = r8 - r9
	SCZO = cond(r8)
	r9 = r8
	r11d = r8d
	r11 = CONVERT(r11d, word32, uint64)
	Mem0[rdx - 4<64>:word32] = r8d
	r9 = r9 >>u 0x20<64>
	SCZO = cond(r9)
	r9d = r9d & 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	SCZO = cond(rdi - r10)
	branch Test(UGT,CZ) l000000000041A660
	// succ:  l000000000041A691 l000000000041A660
l000000000041A691:
	SCZO = cond(rsi - rcx)
	rdi = rdx
	r10 = rcx
	branch Test(ULE,CZ) l000000000041A6D6
	// succ:  l000000000041A69C l000000000041A6D6
l000000000041A69C:
	// succ:  l000000000041A6A0
l000000000041A6A0:
	rcx = rcx + 4<64>
	SCZO = cond(rcx)
	r8d = Mem0[rcx - 4<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rdx + 4<64>
	SCZO = cond(rdx)
	r8 = r8 - r9
	SCZO = cond(r8)
	r9 = r8
	r11d = r8d
	r11 = CONVERT(r11d, word32, uint64)
	Mem0[rdx - 4<64>:word32] = r8d
	r9 = r9 >>u 0x20<64>
	SCZO = cond(r9)
	r9d = r9d & 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	SCZO = cond(rsi - rcx)
	branch Test(UGT,CZ) l000000000041A6A0
	// succ:  l000000000041A6C6 l000000000041A6A0
l000000000041A6C6:
	r10 = ~r10
	rdx = r10 + rsi
	rdx = rdx >>u 2<64>
	SCZO = cond(rdx)
	rdx = rdi + 4<64> + rdx * 4<64>
	// succ:  l000000000041A6D6
l000000000041A6D6:
	rdx = rdx - 4<64>
	SCZO = cond(rdx)
	SZO = cond(r11d & r11d)
	C = false
	branch Test(NE,Z) l000000000041A6ED
	// succ:  l000000000041A6DF l000000000041A6ED
l000000000041A6DF:
	// succ:  l000000000041A6E0
l000000000041A6E0:
	rdx = rdx - 4<64>
	SCZO = cond(rdx)
	ecx = Mem0[rdx:word32]
	rcx = CONVERT(ecx, word32, uint64)
	ebx = ebx - 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l000000000041A6E0
	// succ:  l000000000041A6ED l000000000041A6E0
l000000000041A6ED:
	Mem0[rax + 0x14<64>:word32] = ebx
	// succ:  l000000000041A6F0
l000000000041A6F0:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041A600_exit
l000000000041A700:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call fn0000000000419F80 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041A732
	// succ:  l000000000041A70C l000000000041A732
l000000000041A70C:
	Mem0[rax + 0x14<64>:word32] = 1<32>
	Mem0[rax + 0x18<64>:word32] = 0<32>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041A600_exit
l000000000041A722:
	rax = rsi
	bl = 1<8>
	rsi = rdi
	rdi = rax
	goto l000000000041A625
	// succ:  l000000000041A625
l000000000041A732:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041A6F0
	// succ:  l000000000041A6F0
fn000000000041A600_exit:


// fn000000000041A740
// Return size: 8
define fn000000000041A740
fn000000000041A740_entry:
	rsp = fp
	// succ:  l000000000041A740
l000000000041A740:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x18<64>
	SCZO = cond(rsp)
	rax = CONVERT(Mem0[rcx + 0x14<64>:word32], word32, int64)
	r10 = rcx + 0x18<64>
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	r9 = r10 + rax * 4<64>
	eax = Mem0[r9 - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rbx = r9 - 4<64>
	Z = eax == 0<32>
	r8d = __bsr(eax)
	r8d = r8d ^ 0x1F<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	ecx = ecx - r8d
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	SCZO = cond(r8d - 0xA<32>)
	Mem0[rdx:word32] = ecx
	branch Test(GT,SZO) l000000000041A7C0
	// succ:  l000000000041A772 l000000000041A7C0
l000000000041A772:
	ecx = 0xB<32>
	rcx = CONVERT(ecx, word32, uint64)
	r11d = eax
	r11 = CONVERT(r11d, word32, uint64)
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ecx = ecx - r8d
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r11d = r11d >>u cl
	r11 = CONVERT(r11d, word32, uint64)
	SCZO = cond(r11d)
	r11d = r11d | 0x3FF00000<32>
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	r11 = r11 << 0x20<64>
	SCZO = cond(r11)
	SCZO = cond(r10 - rbx)
	branch Test(UGE,C) l000000000041A798
	// succ:  l000000000041A792 l000000000041A798
l000000000041A792:
	esi = Mem0[r9 - 8<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	esi = esi >>u cl
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	// succ:  l000000000041A798
l000000000041A798:
	ecx = SLICE(r8 + 0x15<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	eax = eax << cl
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	eax = eax | edx
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rax = rax | r11
	SZO = cond(rax)
	C = false
	// succ:  l000000000041A7A7
l000000000041A7A7:
	Mem0[rsp + 8<64>:word64] = rax
	xmm0 = SEQ(0<64>, Mem0[rsp + 8<64>:real64])
	rsp = rsp + 0x18<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041A740_exit
l000000000041A7C0:
	SCZO = cond(r10 - rbx)
	branch Test(UGE,C) l000000000041A820
	// succ:  l000000000041A7C5 l000000000041A820
l000000000041A7C5:
	r11d = r8d
	r11 = CONVERT(r11d, word32, uint64)
	rsi = r9 - 8<64>
	edx = Mem0[r9 - 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r11d = r11d - 0xB<32>
	r11 = CONVERT(r11d, word32, uint64)
	SCZO = cond(r11d)
	branch Test(EQ,Z) l000000000041A842
	// succ:  l000000000041A7D6 l000000000041A842
l000000000041A7D6:
	ebx = 0x2B<32>
	rbx = CONVERT(ebx, word32, uint64)
	ecx = r11d
	rcx = CONVERT(ecx, word32, uint64)
	ebx = ebx - r8d
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	eax = eax << cl
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	r8d = edx
	r8 = CONVERT(r8d, word32, uint64)
	ecx = ebx
	rcx = CONVERT(ecx, word32, uint64)
	r8d = r8d >>u cl
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	eax = eax | r8d
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	eax = eax | 0x3FF00000<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rax = rax << 0x20<64>
	SCZO = cond(rax)
	SCZO = cond(r10 - rsi)
	branch Test(UGE,C) l000000000041A806
	// succ:  l000000000041A7FF l000000000041A806
l000000000041A7FF:
	r8d = Mem0[r9 - 0xC<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d >>u cl
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	// succ:  l000000000041A806
l000000000041A806:
	ecx = r11d
	rcx = CONVERT(ecx, word32, uint64)
	edx = edx << cl
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r8d = r8d | edx
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = 0xFFFFFFFF00000000<64>
	rax = rax & rdx
	SZO = cond(rax)
	C = false
	rax = rax | r8
	SZO = cond(rax)
	C = false
	goto l000000000041A7A7
	// succ:  l000000000041A7A7
l000000000041A820:
	r11d = r8d
	r11 = CONVERT(r11d, word32, uint64)
	r11d = r11d - 0xB<32>
	r11 = CONVERT(r11d, word32, uint64)
	SCZO = cond(r11d)
	branch Test(EQ,Z) l000000000041A840
	// succ:  l000000000041A829 l000000000041A840
l000000000041A829:
	ecx = r11d
	rcx = CONVERT(ecx, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = eax << cl
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax | 0x3FF00000<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rax = rax << 0x20<64>
	SCZO = cond(rax)
	goto l000000000041A806
	// succ:  l000000000041A806
l000000000041A840:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l000000000041A842
l000000000041A842:
	eax = eax | 0x3FF00000<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rax = rax << 0x20<64>
	SCZO = cond(rax)
	rax = rax | rdx
	SZO = cond(rax)
	C = false
	goto l000000000041A7A7
	// succ:  l000000000041A7A7
fn000000000041A740_exit:


// fn000000000041A860
// Return size: 8
define fn000000000041A860
fn000000000041A860_entry:
	rsp = fp
	// succ:  l000000000041A860
l000000000041A860:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	rbx = xmm0
	rdi = rdx
	rsi = r8
	call fn0000000000419F80 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041A965
	// succ:  l000000000041A885 l000000000041A965
l000000000041A885:
	r9 = rbx
	r9 = r9 >>u 0x20<64>
	SCZO = cond(r9)
	r10d = r9d
	r10 = CONVERT(r10d, word32, uint64)
	r9d = r9d & 0x7FFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r10d = r10d & 0xFFFFF<32>
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	r9d = r9d >>u 0x14<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	edx = r10d
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 0x100000<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SZO = cond(r9d & r9d)
	C = false
	branch Test(EQ,Z) l000000000041A8B1
	// succ:  l000000000041A8AD_1 l000000000041A8B1
l000000000041A8AD_1:
	r10d = edx
	// succ:  l000000000041A8B1
l000000000041A8B1:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(NE,Z) l000000000041A8F4
	// succ:  l000000000041A8B5 l000000000041A8F4
l000000000041A8B5:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	Mem0[rax + 0x14<64>:word32] = 1<32>
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = __tzcnt(r10d)
	r10d = r10d >>u cl
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	SZO = cond(r9d & r9d)
	C = false
	r11d = SLICE(rcx + 0x20<64>, word32, 0)
	r11 = CONVERT(r11d, word32, uint64)
	Mem0[rax + 0x18<64>:word32] = r10d
	branch Test(EQ,Z) l000000000041A933
	// succ:  l000000000041A8D8 l000000000041A933
l000000000041A8D8:
	edx = SLICE(r11 - 0x433<64> + r9, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rdi:word32] = edx
	edx = 0x35<32>
	rdx = CONVERT(edx, word32, uint64)
	edx = edx - r11d
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	Mem0[rsi:word32] = edx
	// succ:  l000000000041A8EC
l000000000041A8EC:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041A860_exit
l000000000041A8F4:
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	r11d = __tzcnt(ebx)
	ecx = r11d
	rcx = CONVERT(ecx, word32, uint64)
	ebx = ebx >>u cl
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SZO = cond(r11d & r11d)
	C = false
	branch Test(EQ,Z) l000000000041A960
	// succ:  l000000000041A906 l000000000041A960
l000000000041A906:
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	edx = r10d
	rdx = CONVERT(edx, word32, uint64)
	ecx = ecx - r11d
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	edx = edx << cl
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	ecx = r11d
	rcx = CONVERT(ecx, word32, uint64)
	ebx = ebx | edx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r10d = r10d >>u cl
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	Mem0[rax + 0x18<64>:word32] = ebx
	// succ:  l000000000041A91E
l000000000041A91E:
	SCZO = cond(r10d - 1<32>)
	Mem0[rax + 0x1C<64>:word32] = r10d
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx + 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SZO = cond(r9d & r9d)
	C = false
	Mem0[rax + 0x14<64>:word32] = edx
	branch Test(NE,Z) l000000000041A8D8
	// succ:  l000000000041A933 l000000000041A8D8
l000000000041A933:
	rcx = CONVERT(edx, word32, int64)
	edx = edx << 5<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r11d = r11d - 0x432<32>
	r11 = CONVERT(r11d, word32, uint64)
	SCZO = cond(r11d)
	Z = Mem0[rax + 0x14<64> + rcx * 4<64>:word32] == 0<32>
	ecx = __bsr(Mem0[rax + 0x14<64> + rcx * 4<64>:word32])
	Mem0[rdi:word32] = r11d
	ecx = ecx ^ 0x1F<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx - ecx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	Mem0[rsi:word32] = edx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041A860_exit
l000000000041A960:
	Mem0[rax + 0x18<64>:word32] = ebx
	goto l000000000041A91E
	// succ:  l000000000041A91E
l000000000041A965:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041A8EC
	// succ:  l000000000041A8EC
fn000000000041A860_exit:


// fn000000000041A970
// Return size: 8
define fn000000000041A970
fn000000000041A970_entry:
	rsp = fp
	// succ:  l000000000041A970
l000000000041A970:
	rax = rcx
	rcx = rdx + 1<64>
	edx = CONVERT(Mem0[rdx:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(dl & dl)
	C = false
	Mem0[rax:byte] = dl
	branch Test(EQ,Z) l000000000041A992
	// succ:  l000000000041A980 l000000000041A992
l000000000041A980:
	rcx = rcx + 1<64>
	SCZO = cond(rcx)
	edx = CONVERT(Mem0[rcx - 1<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = rax + 1<64>
	SCZO = cond(rax)
	SZO = cond(dl & dl)
	C = false
	Mem0[rax:byte] = dl
	branch Test(NE,Z) l000000000041A980
	// succ:  l000000000041A992 l000000000041A980
l000000000041A992:
	return
	// succ:  fn000000000041A970_exit
fn000000000041A970_exit:


// fn000000000041A9A0
// Return size: 8
define fn000000000041A9A0
fn000000000041A9A0_entry:
	rsp = fp
	// succ:  l000000000041A9A0
l000000000041A9A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx
	ecx = SLICE(r8 + 8<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	ebp = edx
	rbp = CONVERT(ebp, word32, uint64)
	edx = 0x38E38E39<32>
	rdx = CONVERT(edx, word32, uint64)
	edi = r8d
	rdi = CONVERT(edi, word32, uint64)
	ebx = r9d
	rbx = CONVERT(ebx, word32, uint64)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx >> 0x1F<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	edx_eax = edx *s eax
	SCZO = cond(edx_eax)
	edx = edx >> 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx - ecx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(edx - 1<32>)
	branch Test(LE,SZO) l000000000041AA94
	// succ:  l000000000041A9D4 l000000000041AA94
l000000000041A9D4:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	// succ:  l000000000041A9E0
l000000000041A9E0:
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	SCZO = cond(edx - eax)
	branch Test(GT,SZO) l000000000041A9E0
	// succ:  l000000000041A9E9 l000000000041A9E0
l000000000041A9E9:
	call fn0000000000419F80 (retsize: 8;)
	SCZO = cond(ebp - 9<32>)
	Mem0[rax + 0x18<64>:word32] = ebx
	Mem0[rax + 0x14<64>:word32] = 1<32>
	branch Test(LE,SZO) l000000000041AA80
	// succ:  l000000000041AA01 l000000000041AA80
l000000000041AA01:
	rbx = rsi + 9<64>
	r12d = SLICE(rbp - 0xA<64>, word32, 0)
	r12 = CONVERT(r12d, word32, uint64)
	r13 = rsi + 0xA<64>
	rsi = rbx
	// succ:  l000000000041AA11
l000000000041AA11:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	r8d = CONVERT(Mem0[rsi - 1<64>:byte], byte, int32)
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	r8d = r8d - 0x30<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	call fn000000000041A100 (retsize: 8;)
	SCZO = cond(rsi - r13)
	branch Test(NE,Z) l000000000041AA11
	// succ:  l000000000041AA30 l000000000041AA11
l000000000041AA30:
	rdx = CONVERT(Mem0[rsp + 0x80<64>:word32], word32, int64)
	r9 = r12 + 1<64> + rdx
	rbx = rbx + r9
	SCZO = cond(rbx)
	// succ:  l000000000041AA40
l000000000041AA40:
	SCZO = cond(edi - ebp)
	branch Test(LE,SZO) l000000000041AA6F
	// succ:  l000000000041AA44 l000000000041AA6F
l000000000041AA44:
	edi = edi - 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	edi = edi - ebp
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	rsi = rbx + 1<64> + rdi
	// succ:  l000000000041AA50
l000000000041AA50:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	r8d = CONVERT(Mem0[rbx - 1<64>:byte], byte, int32)
	edx = 0xA<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	r8d = r8d - 0x30<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	call fn000000000041A100 (retsize: 8;)
	SCZO = cond(rbx - rsi)
	branch Test(NE,Z) l000000000041AA50
	// succ:  l000000000041AA6F l000000000041AA50
l000000000041AA6F:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041A9A0_exit
l000000000041AA80:
	rdx = CONVERT(Mem0[rsp + 0x80<64>:word32], word32, int64)
	ebp = 9<32>
	rbp = CONVERT(ebp, word32, uint64)
	rbx = rsi + 9<64> + rdx
	goto l000000000041AA40
	// succ:  l000000000041AA40
l000000000041AA94:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	goto l000000000041A9E9
	// succ:  l000000000041A9E9
fn000000000041A9A0_exit:


// fn000000000041AAA0
// Return size: 8
define fn000000000041AAA0
fn000000000041AAA0_entry:
	rsp = fp
	// succ:  l000000000041AAA0
l000000000041AAA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x50<64>
	SCZO = cond(rsp)
	Mem0[rsp + 0x40<64>:word128] = xmm6
	rsi = rdx
	rdx = rsp + 0x38<64>
	rdi = rcx
	call fn000000000041A740 (retsize: 8;)
	rdx = rsp + 0x3C<64>
	rcx = rsi
	rbx = xmm0
	xmm6 = xmm0
	call fn000000000041A740 (retsize: 8;)
	eax = Mem0[rsp + 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - Mem0[rsp + 0x3C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rcx = xmm0
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	eax = Mem0[rdi + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - Mem0[rsi + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax << 5<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax + r8d
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000041AB30
	// succ:  l000000000041AAF2 l000000000041AB30
l000000000041AAF2:
	rdx = xmm6
	eax = eax << 0x14<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ebx = ebx
	rbx = CONVERT(ebx, word32, uint64)
	rdx = rdx >>u 0x20<64>
	SCZO = cond(rdx)
	eax = eax + edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rax = rax << 0x20<64>
	SCZO = cond(rax)
	rax = rax | rbx
	SZO = cond(rax)
	C = false
	Mem0[rsp + 0x28<64>:word64] = rax
	xmm6 = SEQ(0<64>, Mem0[rsp + 0x28<64>:real64])
	// succ:  l000000000041AB14
l000000000041AB14:
	v19 = SLICE(xmm6, real64, 0) / SLICE(xmm0, real64, 0)
	v20 = SLICE(xmm6, word64, 64)
	xmm6 = SEQ(v20, v19)
	xmm0 = xmm6
	xmm6 = Mem0[rsp + 0x40<64>:word128]
	rsp = rsp + 0x50<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041AAA0_exit
l000000000041AB30:
	rdx = xmm0
	eax = eax << 0x14<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rdx = rdx >>u 0x20<64>
	SCZO = cond(rdx)
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	esi = esi - eax
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	rax = rsi
	rax = rax << 0x20<64>
	SCZO = cond(rax)
	rdx = rax
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	rax = rax | rdx
	SZO = cond(rax)
	C = false
	Mem0[rsp + 0x28<64>:word64] = rax
	xmm0 = SEQ(0<64>, Mem0[rsp + 0x28<64>:real64])
	goto l000000000041AB14
	// succ:  l000000000041AB14
fn000000000041AAA0_exit:


// fn000000000041AB60
// Return size: 8
define fn000000000041AB60
fn000000000041AB60_entry:
	rsp = fp
	// succ:  l000000000041AB60
l000000000041AB60:
	r8 = Mem0[rcx:word64]
	goto l000000000041AB7E
	// succ:  l000000000041AB7E
l000000000041AB65:
	eax = CONVERT(Mem0[r8:byte], byte, int32)
	r11d = SLICE(rax - 0x41<64>, word32, 0)
	r11 = CONVERT(r11d, word32, uint64)
	r10d = SLICE(rax + 0x20<64>, word32, 0)
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r11d - 0x19<32>)
	branch Test(UGT,CZ) l000000000041AB79
	// succ:  l000000000041AB75_1 l000000000041AB79
l000000000041AB75_1:
	eax = r10d
	// succ:  l000000000041AB79
l000000000041AB79:
	SCZO = cond(eax - r9d)
	branch Test(NE,Z) l000000000041ABA0
	// succ:  l000000000041AB7E l000000000041ABA0
l000000000041AB7E:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	r9d = CONVERT(Mem0[rdx - 1<64>:byte], byte, int32)
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NE,Z) l000000000041AB65
	// succ:  l000000000041AB90 l000000000041AB65
l000000000041AB90:
	Mem0[rcx:word64] = r8
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000041AB60_exit
l000000000041ABA0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000041AB60_exit
fn000000000041AB60_exit:


// fn000000000041ABB0
// Return size: 8
define fn000000000041ABB0
fn000000000041ABB0_entry:
	rsp = fp
	// succ:  l000000000041ABB0
l000000000041ABB0:
	edx = edx - 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rax = r8 + 0x18<64>
	edx = edx >> 5<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rdx = CONVERT(edx, word32, int64)
	r11 = rcx + 4<64> + rdx * 4<64>
	rdx = CONVERT(Mem0[r8 + 0x14<64>:word32], word32, int64)
	r10 = rax + rdx * 4<64>
	SCZO = cond(rax - r10)
	branch Test(UGE,C) l000000000041AC0B
	// succ:  l000000000041ABCF l000000000041AC0B
l000000000041ABCF:
	rdx = rcx
	// succ:  l000000000041ABD2
l000000000041ABD2:
	rax = rax + 4<64>
	SCZO = cond(rax)
	r9d = Mem0[rax - 4<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	rdx = rdx + 4<64>
	SCZO = cond(rdx)
	SCZO = cond(r10 - rax)
	Mem0[rdx - 4<64>:word32] = r9d
	branch Test(UGT,CZ) l000000000041ABD2
	// succ:  l000000000041ABE7 l000000000041ABD2
l000000000041ABE7:
	r10 = r10 - r8
	SCZO = cond(r10)
	rax = r10 - 0x19<64>
	rax = rax >>u 2<64>
	SCZO = cond(rax)
	rcx = rcx + 4<64> + rax * 4<64>
	SCZO = cond(r11 - rcx)
	branch Test(ULE,CZ) l000000000041AC10
	// succ:  l000000000041ABFC l000000000041AC10
l000000000041ABFC:
	// succ:  l000000000041AC00
l000000000041AC00:
	rcx = rcx + 4<64>
	SCZO = cond(rcx)
	Mem0[rcx - 4<64>:word32] = 0<32>
	// succ:  l000000000041AC0B
l000000000041AC0B:
	SCZO = cond(r11 - rcx)
	branch Test(UGT,CZ) l000000000041AC00
	// succ:  l000000000041AC10 l000000000041AC00
l000000000041AC10:
	return
	// succ:  fn000000000041ABB0_exit
fn000000000041ABB0_exit:


// fn000000000041AC20
// Return size: 8
define fn000000000041AC20
fn000000000041AC20_entry:
	rsp = fp
	// succ:  l000000000041AC20
l000000000041AC20:
	rax = CONVERT(Mem0[rcx + 0x14<64>:word32], word32, int64)
	r9d = edx
	r9 = CONVERT(r9d, word32, uint64)
	r8 = rcx + 0x18<64>
	r9d = r9d >> 5<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	SCZO = cond(eax - r9d)
	branch Test(GE,SO) l000000000041AC61
	// succ:  l000000000041AC34 l000000000041AC61
l000000000041AC34:
	r9 = r8 + rax * 4<64>
	// succ:  l000000000041AC38
l000000000041AC38:
	SCZO = cond(r8 - r9)
	branch Test(UGE,C) l000000000041ACA6
	// succ:  l000000000041AC3D l000000000041ACA6
l000000000041AC3D:
	eax = Mem0[r9 - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = r9 - 4<64>
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041AC5A
	// succ:  l000000000041AC49 l000000000041AC5A
l000000000041AC49:
	goto l000000000041ACA0
	// succ:  l000000000041ACA0
l000000000041AC50:
	rdx = rdx - 4<64>
	SCZO = cond(rdx)
	ecx = Mem0[rdx:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l000000000041ACA0
	// succ:  l000000000041AC5A l000000000041ACA0
l000000000041AC5A:
	SCZO = cond(r8 - rdx)
	branch Test(ULT,C) l000000000041AC50
	// succ:  l000000000041AC5F l000000000041AC50
l000000000041AC5F:
	return
	// succ:  fn000000000041AC20_exit
l000000000041AC61:
	branch Test(LE,SZO) l000000000041AC90
	// succ:  l000000000041AC63 l000000000041AC90
l000000000041AC63:
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	r9 = CONVERT(r9d, word32, int64)
	ecx = ecx & 0x1F<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r9 = r8 + r9 * 4<64>
	branch Test(EQ,Z) l000000000041AC38
	// succ:  l000000000041AC71 l000000000041AC38
l000000000041AC71:
	r10d = Mem0[r9:word32]
	r10 = CONVERT(r10d, word32, uint64)
	eax = r10d
	rax = CONVERT(eax, word32, uint64)
	eax = eax >>u cl
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax << cl
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(edx - r10d)
	branch Test(EQ,Z) l000000000041AC38
	// succ:  l000000000041AC87 l000000000041AC38
l000000000041AC87:
	return
	// succ:  fn000000000041AC20_exit
l000000000041AC90:
	r9 = CONVERT(r9d, word32, int64)
	r9 = r8 + r9 * 4<64>
	goto l000000000041AC38
	// succ:  l000000000041AC38
l000000000041ACA0:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000041AC20_exit
l000000000041ACA6:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000041AC20_exit
fn000000000041AC20_exit:


// fn000000000041ACB0
// Return size: 8
define fn000000000041ACB0
fn000000000041ACB0_entry:
	rsp = fp
	// succ:  l000000000041ACB0
l000000000041ACB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsi = rcx
	r10 = rcx + 0x18<64>
	rcx = CONVERT(Mem0[rcx + 0x14<64>:word32], word32, int64)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	eax = eax >> 5<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - ecx)
	branch Test(GE,SO) l000000000041AD50
	// succ:  l000000000041ACCC l000000000041AD50
l000000000041ACCC:
	rax = CONVERT(eax, int32, int64)
	edx = edx & 0x1F<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rbx = r10 + rcx * 4<64>
	rdi = r10 + rax * 4<64>
	branch Test(EQ,Z) l000000000041AD63
	// succ:  l000000000041ACDF l000000000041AD63
l000000000041ACDF:
	r9d = Mem0[rdi:word32]
	r9 = CONVERT(r9d, word32, uint64)
	r8 = rdi + 4<64>
	ebp = 0x20<32>
	rbp = CONVERT(ebp, word32, uint64)
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	ebp = ebp - edx
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	r9d = r9d >>u cl
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	SCZO = cond(rbx - r8)
	branch Test(ULE,CZ) l000000000041ADA8
	// succ:  l000000000041ACFB l000000000041ADA8
l000000000041ACFB:
	r11 = r10
	// succ:  l000000000041AD00
l000000000041AD00:
	eax = Mem0[r8:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = ebp
	rcx = CONVERT(ecx, word32, uint64)
	r11 = r11 + 4<64>
	SCZO = cond(r11)
	r8 = r8 + 4<64>
	SCZO = cond(r8)
	eax = eax << cl
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	eax = eax | r9d
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[r11 - 4<64>:word32] = eax
	r9d = Mem0[r8 - 4<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	r9d = r9d >>u cl
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	SCZO = cond(rbx - r8)
	branch Test(UGT,CZ) l000000000041AD00
	// succ:  l000000000041AD24 l000000000041AD00
l000000000041AD24:
	rbx = rbx - rdi
	SCZO = cond(rbx)
	rax = rbx - 5<64>
	rax = rax >>u 2<64>
	SCZO = cond(rax)
	rax = r10 + 4<64> + rax * 4<64>
	// succ:  l000000000041AD34
l000000000041AD34:
	SZO = cond(r9d & r9d)
	C = false
	Mem0[rax:word32] = r9d
	branch Test(EQ,Z) l000000000041AD40
	// succ:  l000000000041AD3C l000000000041AD40
l000000000041AD3C:
	rax = rax + 4<64>
	SCZO = cond(rax)
	// succ:  l000000000041AD40
l000000000041AD40:
	rax = rax - r10
	SCZO = cond(rax)
	rax = rax >>u 2<64>
	SCZO = cond(rax)
	goto l000000000041AD9C
	// succ:  l000000000041AD9C
l000000000041AD50:
	Mem0[rsi + 0x14<64>:word32] = 0<32>
	// succ:  l000000000041AD57
l000000000041AD57:
	Mem0[rsi + 0x18<64>:word32] = 0<32>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041ACB0_exit
l000000000041AD63:
	SCZO = cond(rbx - rdi)
	rdx = r10
	rax = rdi
	branch Test(ULE,CZ) l000000000041AD50
	// succ:  l000000000041AD6E l000000000041AD50
l000000000041AD6E:
	// succ:  l000000000041AD70
l000000000041AD70:
	rax = rax + 4<64>
	SCZO = cond(rax)
	r8d = Mem0[rax - 4<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rdx + 4<64>
	SCZO = cond(rdx)
	SCZO = cond(rbx - rax)
	Mem0[rdx - 4<64>:word32] = r8d
	branch Test(UGT,CZ) l000000000041AD70
	// succ:  l000000000041AD85 l000000000041AD70
l000000000041AD85:
	rdi = ~rdi
	rax = rdi + rbx
	rax = rax >>u 2<64>
	SCZO = cond(rax)
	rax = CONVERT(4<32> + rax * 4<64>, word32, word64)
	rax = rax >>u 2<64>
	SCZO = cond(rax)
	// succ:  l000000000041AD9C
l000000000041AD9C:
	SZO = cond(eax & eax)
	C = false
	Mem0[rsi + 0x14<64>:word32] = eax
	branch Test(EQ,Z) l000000000041AD57
	// succ:  l000000000041ADA3 l000000000041AD57
l000000000041ADA3:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041ACB0_exit
l000000000041ADA8:
	rax = r10
	goto l000000000041AD34
	// succ:  l000000000041AD34
fn000000000041ACB0_exit:


// fn000000000041ADB0
// Return size: 8
define fn000000000041ADB0
fn000000000041ADB0_entry:
	rsp = fp
	// succ:  l000000000041ADB0
l000000000041ADB0:
	rax = CONVERT(Mem0[rcx + 0x14<64>:word32], word32, int64)
	rdx = rcx + 0x18<64>
	r8 = rdx + rax * 4<64>
	SCZO = cond(rdx - r8)
	branch Test(UGE,C) l000000000041ADEB
	// succ:  l000000000041ADC1 l000000000041ADEB
l000000000041ADC1:
	ecx = Mem0[rcx + 0x18<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l000000000041ADD6
	// succ:  l000000000041ADCA l000000000041ADD6
l000000000041ADCA:
	goto l000000000041ADE4
	// succ:  l000000000041ADE4
l000000000041ADD0:
	ecx = Mem0[rdx:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l000000000041ADE4
	// succ:  l000000000041ADD6 l000000000041ADE4
l000000000041ADD6:
	rdx = rdx + 4<64>
	SCZO = cond(rdx)
	eax = eax + 0x20<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(r8 - rdx)
	branch Test(UGT,CZ) l000000000041ADD0
	// succ:  l000000000041ADE2 l000000000041ADD0
l000000000041ADE2:
	return
	// succ:  fn000000000041ADB0_exit
l000000000041ADE4:
	ecx = __tzcnt(ecx)
	eax = eax + ecx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	return
	// succ:  fn000000000041ADB0_exit
l000000000041ADEB:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000041ADB0_exit
fn000000000041ADB0_exit:


// fn000000000041ADF0
// Return size: 8
define fn000000000041ADF0
fn000000000041ADF0_entry:
	rsp = fp
	// succ:  l000000000041ADF0
l000000000041ADF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = Mem0[rdx + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[rcx + 0x14<64>:word32] - eax)
	rsi = rcx
	rdi = rdx
	branch Test(GE,SO) l000000000041AE10
	// succ:  l000000000041AE0A l000000000041AE10
l000000000041AE0A:
	rsi = rdx
	rdi = rcx
	// succ:  l000000000041AE10
l000000000041AE10:
	ecx = Mem0[rsi + 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	call fn0000000000419F80 (retsize: 8;)
	rcx = CONVERT(Mem0[rsi + 0x14<64>:word32], word32, int64)
	rbx = rax
	r11 = rdi + 0x18<64>
	r8 = rbx + 0x18<64>
	Mem0[rax + 0x14<64>:word32] = ecx
	rdx = CONVERT(Mem0[rdi + 0x14<64>:word32], word32, int64)
	rax = rsi + 0x18<64>
	rdi = r8 + rdx * 4<64>
	rbp = rdx
	// succ:  l000000000041AE40
l000000000041AE40:
	r10d = Mem0[rax:word32]
	r10 = CONVERT(r10d, word32, uint64)
	r9d = Mem0[r11:word32]
	r9 = CONVERT(r9d, word32, uint64)
	r8 = r8 + 4<64>
	SCZO = cond(r8)
	rax = rax + 4<64>
	SCZO = cond(rax)
	r11 = r11 + 4<64>
	SCZO = cond(r11)
	r13d = CONVERT(r9w, word16, word32)
	r13 = CONVERT(r13d, word32, uint64)
	edx = CONVERT(r10w, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r9d = r9d >>u 0x10<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	edx = edx + r13d
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r10d = r10d >>u 0x10<32>
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	edx = edx + r12d
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r10d = r10d + r9d
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	r9d = edx
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[r8 - 4<64>:word16] = dx
	r9d = r9d & 0x10000<32>
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r9d = r9d >>u 0x10<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	r9d = r9d + r10d
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	r12d = r9d
	r12 = CONVERT(r12d, word32, uint64)
	Mem0[r8 - 2<64>:word16] = r9w
	r12d = r12d & 0x10000<32>
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	r12d = r12d >>u 0x10<32>
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	SCZO = cond(rdi - r8)
	branch Test(UGT,CZ) l000000000041AE40
	// succ:  l000000000041AE99 l000000000041AE40
l000000000041AE99:
	edx = Mem0[rsi + 0x14<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx - ebp
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rdx = CONVERT(edx, word32, int64)
	r11 = rdi + rdx * 4<64>
	SCZO = cond(r11 - r8)
	branch Test(ULE,CZ) l000000000041AEEB
	// succ:  l000000000041AEAA l000000000041AEEB
l000000000041AEAA:
	// succ:  l000000000041AEB0
l000000000041AEB0:
	r9d = Mem0[rax:word32]
	r9 = CONVERT(r9d, word32, uint64)
	r8 = r8 + 4<64>
	SCZO = cond(r8)
	rax = rax + 4<64>
	SCZO = cond(rax)
	r10d = CONVERT(r9w, word16, word32)
	r10 = CONVERT(r10d, word32, uint64)
	r9d = r9d >>u 0x10<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	r10d = r10d + r12d
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	edx = r10d
	rdx = CONVERT(edx, word32, uint64)
	Mem0[r8 - 4<64>:word16] = r10w
	edx = edx & 0x10000<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx >>u 0x10<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx + r9d
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	Mem0[r8 - 2<64>:word16] = dx
	r12d = edx
	r12 = CONVERT(r12d, word32, uint64)
	r12d = r12d >>u 0x10<32>
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	SCZO = cond(r11 - r8)
	branch Test(UGT,CZ) l000000000041AEB0
	// succ:  l000000000041AEEB l000000000041AEB0
l000000000041AEEB:
	SZO = cond(r12d & r12d)
	C = false
	branch Test(EQ,Z) l000000000041AF03
	// succ:  l000000000041AEF0 l000000000041AF03
l000000000041AEF0:
	SCZO = cond(ecx - Mem0[rbx + 0xC<64>:word32])
	branch Test(EQ,Z) l000000000041AF13
	// succ:  l000000000041AEF5 l000000000041AF13
l000000000041AEF5:
	eax = SLICE(rcx + 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 0x14<64>:word32] = eax
	Mem0[rbx + 0x18<64> + rcx * 4<64>:word32] = 1<32>
	// succ:  l000000000041AF03
l000000000041AF03:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041ADF0_exit
l000000000041AF13:
	eax = Mem0[rbx + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = SLICE(rax + 1<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000419F80 (retsize: 8;)
	rsi = rax
	rcx = rax + 0x10<64>
	rax = CONVERT(Mem0[rbx + 0x14<64>:word32], word32, int64)
	rdx = rbx + 0x10<64>
	r8 = CONVERT(8<32> + rax * 4<64>, word32, word64)
	rax = memcpy(rcx, rdx, r8)
	rcx = rbx
	rbx = rsi
	call fn000000000041A090 (retsize: 8;)
	rcx = CONVERT(Mem0[rsi + 0x14<64>:word32], word32, int64)
	goto l000000000041AEF5
	// succ:  l000000000041AEF5
fn000000000041ADF0_exit:


// fn000000000041AF50
// Return size: 8
define fn000000000041AF50
fn000000000041AF50_entry:
	rsp = fp
	// succ:  l000000000041AF50
l000000000041AF50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r14 = rcx
	r13 = rdx
	Mem0[rsp + 0x80<64>:word64] = r8
	Mem0[rsp + 0x88<64>:word64] = r9
	call msvcrt.dll!localeconv (retsize: 8;)
	rdi = Mem0[0x0000000000491ED0<p64>:word64]
	rsi = Mem0[rax:word64]
	SCZO = cond(Mem0[rdi + 0x30<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000041B3B0
	// succ:  l000000000041AF8F l000000000041B3B0
l000000000041AF8F:
	rax = Mem0[rsp + 0x88<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	Mem0[rax:word64] = 0<64>
	rbx = Mem0[r14:word64]
	edx = CONVERT(Mem0[rbx + 2<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbx + 3<64>
	rbx = rbx + 2<64>
	SCZO = cond(rbx)
	SCZO = cond(dl - 0x30<8>)
	branch Test(NE,Z) l000000000041AFC9
	// succ:  l000000000041AFB5 l000000000041AFC9
l000000000041AFB5:
	rbx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	edx = CONVERT(Mem0[rax - 1<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8d = r8d + 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	SCZO = cond(dl - 0x30<8>)
	branch Test(EQ,Z) l000000000041AFB5
	// succ:  l000000000041AFC9 l000000000041AFB5
l000000000041AFC9:
	SCZO = cond(Mem0[rdi + rdx:byte] - 0<8>)
	branch Test(NE,Z) l000000000041B120
	// succ:  l000000000041AFD3 l000000000041B120
l000000000041AFD3:
	r9d = CONVERT(Mem0[rsi:byte], byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9b & r9b)
	C = false
	branch Test(EQ,Z) l000000000041B61A
	// succ:  l000000000041AFE0 l000000000041B61A
l000000000041AFE0:
	edx = CONVERT(Mem0[rbx:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(r9b - dl)
	branch Test(NE,Z) l000000000041B3C3
	// succ:  l000000000041AFEC l000000000041B3C3
l000000000041AFEC:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000041B001
	// succ:  l000000000041B001
l000000000041AFF3:
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(dl - Mem0[(rbx - 1<64>) + rax:byte])
	branch Test(NE,Z) l000000000041B3C0
	// succ:  l000000000041B001 l000000000041B3C0
l000000000041B001:
	edx = CONVERT(Mem0[rsi + rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l000000000041AFF3
	// succ:  l000000000041B009 l000000000041AFF3
l000000000041B009:
	rax = rax + rbx
	SCZO = cond(rax)
	ecx = CONVERT(Mem0[rax:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	r10d = CONVERT(Mem0[rdi + rcx:byte], byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	rdx = rcx
	SZO = cond(r10b & r10b)
	C = false
	branch Test(NE,Z) l000000000041B4A0
	// succ:  l000000000041B020 l000000000041B4A0
l000000000041B020:
	SCZO = cond(dl - 0x50<8>)
	branch Test(EQ,Z) l000000000041B2D0
	// succ:  l000000000041B029 l000000000041B2D0
l000000000041B029:
	SCZO = cond(dl - 0x70<8>)
	branch Test(EQ,Z) l000000000041B2D0
	// succ:  l000000000041B032 l000000000041B2D0
l000000000041B032:
	rbp = rax
	r11d = 1<32>
	r11 = CONVERT(r11d, word32, uint64)
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	// succ:  l000000000041B044
l000000000041B044:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NE,Z) l000000000041B04D
	// succ:  l000000000041B049 l000000000041B04D
l000000000041B049:
	rax = rbx - 1<64>
	// succ:  l000000000041B04D
l000000000041B04D:
	SZO = cond(r11d & r11d)
	C = false
	Mem0[r14:word64] = rax
	branch Test(NE,Z) l000000000041B380
	// succ:  l000000000041B059 l000000000041B380
l000000000041B059:
	SZO = cond(r10d & r10d)
	C = false
	branch Test(EQ,Z) l000000000041B190
	// succ:  l000000000041B062 l000000000041B190
l000000000041B062:
	SZO = cond(r15d & r15d)
	C = false
	eax = Mem0[r13 + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l000000000041B410
	// succ:  l000000000041B06F l000000000041B410
l000000000041B06F:
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000041B6B8
	// succ:  l000000000041B078 l000000000041B6B8
l000000000041B078:
	SCZO = cond(eax - 3<32>)
	branch Test(EQ,Z) l000000000041B6A2
	// succ:  l000000000041B081 l000000000041B6A2
l000000000041B081:
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000041B488
	// succ:  l000000000041B08A l000000000041B488
l000000000041B08A:
	esi = Mem0[r13 + 0<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	ebx = esi
	rbx = CONVERT(ebx, word32, uint64)
	esi = esi & 0x1F<32>
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebx = ebx >> 5<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SCZO = cond(esi - 1<32>)
	edi = ebx
	rdi = CONVERT(edi, word32, uint64)
	edi = edi - 0xFFFFFFFF<32> - C
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	eax = edi
	rax = CONVERT(eax, word32, uint64)
	eax = eax >> 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	branch Test(EQ,Z) l000000000041B0B7
	// succ:  l000000000041B0A6 l000000000041B0B7
l000000000041B0A6:
	// succ:  l000000000041B0B0
l000000000041B0B0:
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	eax = eax >> 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	branch Test(NE,Z) l000000000041B0B0
	// succ:  l000000000041B0B7 l000000000041B0B0
l000000000041B0B7:
	call fn0000000000419F80 (retsize: 8;)
	rcx = Mem0[rsp + 0x88<64>:word64]
	SZO = cond(ebx & ebx)
	C = false
	Mem0[rcx:word64] = rax
	Mem0[rax + 0x14<64>:word32] = edi
	branch Test(LE,SZO) l000000000041B7D8
	// succ:  l000000000041B0D2 l000000000041B7D8
l000000000041B0D2:
	ecx = SLICE(rbx - 1<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	rdx = rax + 0x18<64>
	rcx = rax + 0x1C<64> + rcx * 4<64>
	// succ:  l000000000041B0E0
l000000000041B0E0:
	Mem0[rdx:word32] = 0xFFFFFFFF<32>
	rdx = rdx + 4<64>
	SCZO = cond(rdx)
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l000000000041B0E0
	// succ:  l000000000041B0EF l000000000041B0E0
l000000000041B0EF:
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041B0F1
l000000000041B0F1:
	SCZO = cond(edi - ebx)
	branch Test(LE,SZO) l000000000041B108
	// succ:  l000000000041B0F5 l000000000041B108
l000000000041B0F5:
	r8 = CONVERT(edx, word32, int64)
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx - esi
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	edx = edx >> cl
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	Mem0[rax + 0x18<64> + r8 * 4<64>:word32] = edx
	// succ:  l000000000041B108
l000000000041B108:
	eax = Mem0[r13 + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdi = Mem0[rsp + 0x80<64>:word64]
	Mem0[rdi:word32] = eax
	eax = 0x11<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000041B382
	// succ:  l000000000041B382
l000000000041B120:
	eax = CONVERT(Mem0[rbx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	r9d = CONVERT(Mem0[rsi:byte], byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	r8d = r8d + 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	r10d = CONVERT(Mem0[rdi + rax:byte], byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	rdx = rax
	// succ:  l000000000041B139
l000000000041B139:
	SZO = cond(r10b & r10b)
	C = false
	rax = rbx
	branch Test(EQ,Z) l000000000041B151
	// succ:  l000000000041B141 l000000000041B151
l000000000041B141:
	rax = rax + 1<64>
	SCZO = cond(rax)
	ecx = CONVERT(Mem0[rax:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(Mem0[rdi + rcx:byte] - 0<8>)
	rdx = rcx
	branch Test(NE,Z) l000000000041B141
	// succ:  l000000000041B151 l000000000041B141
l000000000041B151:
	SCZO = cond(dl - r9b)
	branch Test(EQ,Z) l000000000041B3D0
	// succ:  l000000000041B15A l000000000041B3D0
l000000000041B15A:
	SZO = cond(r12 & r12)
	C = false
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	branch Test(EQ,Z) l000000000041B169
	// succ:  l000000000041B162 l000000000041B169
l000000000041B162:
	r12d = r12d - eax
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	r12d = r12d << 2<32>
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	// succ:  l000000000041B169
l000000000041B169:
	SCZO = cond(dl - 0x50<8>)
	branch Test(EQ,Z) l000000000041B2D9
	// succ:  l000000000041B172 l000000000041B2D9
l000000000041B172:
	SCZO = cond(dl - 0x70<8>)
	branch Test(EQ,Z) l000000000041B2D9
	// succ:  l000000000041B17B l000000000041B2D9
l000000000041B17B:
	SZO = cond(r11d & r11d)
	C = false
	Mem0[r14:word64] = rax
	rbp = rax
	branch Test(NE,Z) l000000000041B380
	// succ:  l000000000041B18A l000000000041B380
l000000000041B18A:
	// succ:  l000000000041B190
l000000000041B190:
	rax = rbp
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rax = rax - rbx
	SCZO = cond(rax)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - 7<32>)
	branch Test(LE,SZO) l000000000041B1AA
	// succ:  l000000000041B1A0 l000000000041B1AA
l000000000041B1A0:
	eax = eax >> 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	SCZO = cond(eax - 7<32>)
	branch Test(GT,SZO) l000000000041B1A0
	// succ:  l000000000041B1AA l000000000041B1A0
l000000000041B1AA:
	call fn0000000000419F80 (retsize: 8;)
	SCZO = cond(Mem0[rsi + 1<64>:byte] - 0<8>)
	r14 = rax
	r15 = rax + 0x18<64>
	branch Test(EQ,Z) l000000000041B6CE
	// succ:  l000000000041B1C0 l000000000041B6CE
l000000000041B1C0:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000041B1D3
	// succ:  l000000000041B1D3
l000000000041B1D0:
	rdx = rax
	// succ:  l000000000041B1D3
l000000000041B1D3:
	SCZO = cond(Mem0[rsi + 1<64> + rdx:byte] - 0<8>)
	rax = rdx + 1<64>
	branch Test(NE,Z) l000000000041B1D0
	// succ:  l000000000041B1DE l000000000041B1D0
l000000000041B1DE:
	SCZO = cond(rbx - rbp)
	branch Test(UGE,C) l000000000041B6D5
	// succ:  l000000000041B1E7 l000000000041B6D5
l000000000041B1E7:
	rsi = rsi + rdx
	SCZO = cond(rsi)
	rax = r15
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	goto l000000000041B221
	// succ:  l000000000041B221
l000000000041B1F5:
	SCZO = cond(r8d - 0x20<32>)
	branch Test(EQ,Z) l000000000041B393
	// succ:  l000000000041B1FF l000000000041B393
l000000000041B1FF:
	r10d = CONVERT(cl, byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	ecx = r8d
	rcx = CONVERT(ecx, word32, uint64)
	r8d = r8d + 4<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	// succ:  l000000000041B20A
l000000000041B20A:
	r10d = CONVERT(Mem0[rdi + r10:byte], byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	rbp = r11
	r10d = r10d & 0xF<32>
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	r10d = r10d << cl
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	r9d = r9d | r10d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	SCZO = cond(rbx - rbp)
	branch Test(UGE,C) l000000000041B238
	// succ:  l000000000041B221 l000000000041B238
l000000000041B221:
	ecx = CONVERT(Mem0[rbp - 1<64>:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	r11 = rbp - 1<64>
	SCZO = cond(cl - Mem0[rsi:byte])
	branch Test(NE,Z) l000000000041B1F5
	// succ:  l000000000041B22D l000000000041B1F5
l000000000041B22D:
	r11 = r11 - rdx
	SCZO = cond(r11)
	rbp = r11
	SCZO = cond(rbx - rbp)
	branch Test(ULT,C) l000000000041B221
	// succ:  l000000000041B238 l000000000041B221
l000000000041B238:
	Z = r9d == 0<32>
	edx = __bsr(r9d)
	edx = edx ^ 0x1F<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l000000000041B23F
l000000000041B23F:
	Mem0[rax:word32] = r9d
	rax = rax + 4<64>
	SCZO = cond(rax)
	esi = Mem0[r13 + 0<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	rax = rax - r15
	SCZO = cond(rax)
	rax = rax >> 2<64>
	SCZO = cond(rax)
	Mem0[r14 + 0x14<64>:word32] = eax
	eax = eax << 5<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax - edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - esi)
	branch Test(GT,SZO) l000000000041B508
	// succ:  l000000000041B262 l000000000041B508
l000000000041B262:
	edi = 0<32>
	rdi = CONVERT(edi, word32, uint64)
	branch Test(LT,SO) l000000000041B4DE
	// succ:  l000000000041B26D l000000000041B4DE
l000000000041B26D:
	SCZO = cond(r12d - Mem0[r13 + 8<64>:word32])
	branch Test(GT,SZO) l000000000041B480
	// succ:  l000000000041B277 l000000000041B480
l000000000041B277:
	eax = Mem0[r13 + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r12d - eax)
	branch Test(GE,SO) l000000000041B569
	// succ:  l000000000041B284 l000000000041B569
l000000000041B284:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	ebx = ebx - r12d
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SCZO = cond(esi - ebx)
	branch Test(GT,SZO) l000000000041B5C7
	// succ:  l000000000041B291 l000000000041B5C7
l000000000041B291:
	edx = Mem0[r13 + 0xC<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - 2<32>)
	branch Test(EQ,Z) l000000000041B7A2
	// succ:  l000000000041B29E l000000000041B7A2
l000000000041B29E:
	SCZO = cond(edx - 3<32>)
	branch Test(EQ,Z) l000000000041B77F
	// succ:  l000000000041B2A7 l000000000041B77F
l000000000041B2A7:
	SCZO = cond(edx - 1<32>)
	branch Test(EQ,Z) l000000000041B7B2
	// succ:  l000000000041B2B0 l000000000041B7B2
l000000000041B2B0:
	rcx = r14
	call fn000000000041A090 (retsize: 8;)
	// succ:  l000000000041B2B8
l000000000041B2B8:
	eax = _errno()
	Mem0[rax:word32] = 0x22<32>
	eax = 0x50<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000041B382
	// succ:  l000000000041B382
l000000000041B2D0:
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	r11d = 1<32>
	r11 = CONVERT(r11d, word32, uint64)
	// succ:  l000000000041B2D9
l000000000041B2D9:
	edx = CONVERT(Mem0[rax + 1<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x2B<8>)
	branch Test(EQ,Z) l000000000041B500
	// succ:  l000000000041B2E6 l000000000041B500
l000000000041B2E6:
	SCZO = cond(dl - 0x2D<8>)
	branch Test(EQ,Z) l000000000041B3E1
	// succ:  l000000000041B2EF l000000000041B3E1
l000000000041B2EF:
	edx = CONVERT(Mem0[rdi + rdx:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	r9 = rax + 1<64>
	ecx = SLICE(rdx - 1<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 0x18<8>)
	branch Test(UGT,CZ) l000000000041B3FF
	// succ:  l000000000041B306 l000000000041B3FF
l000000000041B306:
	rcx = r9 + 1<64>
	r9d = CONVERT(Mem0[r9 + 1<64>:byte], byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	edx = edx - 0x10<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	ebp = CONVERT(Mem0[rdi + r9:byte], byte, word32)
	rbp = CONVERT(ebp, word32, uint64)
	r9d = ebp
	r9 = CONVERT(r9d, word32, uint64)
	r9d = r9d - 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	SCZO = cond(r9b - 0x18<8>)
	branch Test(UGT,CZ) l000000000041B361
	// succ:  l000000000041B327 l000000000041B361
l000000000041B327:
	// succ:  l000000000041B330
l000000000041B330:
	SZO = cond(edx & 0xF8000000<32>)
	C = false
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	edx = SLICE(rdx + rdx * 4<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	branch Test(EQ,Z) l000000000041B343
	// succ:  l000000000041B33F_1 l000000000041B343
l000000000041B33F_1:
	r10d = r9d
	// succ:  l000000000041B343
l000000000041B343:
	rcx = rcx + 1<64>
	SCZO = cond(rcx)
	r9d = CONVERT(Mem0[rcx:byte], byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	edx = SLICE(rbp - 0x10<64> + rdx * 2<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	ebp = CONVERT(Mem0[rdi + r9:byte], byte, word32)
	rbp = CONVERT(ebp, word32, uint64)
	r9d = ebp
	r9 = CONVERT(r9d, word32, uint64)
	r9d = r9d - 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	SCZO = cond(r9b - 0x18<8>)
	branch Test(ULE,CZ) l000000000041B330
	// succ:  l000000000041B361 l000000000041B330
l000000000041B361:
	r9d = r15d
	r9 = CONVERT(r9d, word32, uint64)
	rbp = rax
	rax = rcx
	r9d = -r9d
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	C = r9d == 0<32>
	edx = edx ^ r9d
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + r15d
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r12d = r12d + edx
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	goto l000000000041B044
	// succ:  l000000000041B044
l000000000041B380:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000041B382
l000000000041B382:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041AF50_exit
l000000000041B393:
	Mem0[rax:word32] = r9d
	r8d = 4<32>
	r8 = CONVERT(r8d, word32, uint64)
	r10d = CONVERT(Mem0[rbp - 1<64>:byte], byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	rax = rax + 4<64>
	SCZO = cond(rax)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	goto l000000000041B20A
	// succ:  l000000000041B20A
l000000000041B3B0:
	call fn000000000041BBE0 (retsize: 8;)
	goto l000000000041AF8F
	// succ:  l000000000041AF8F
l000000000041B3C0:
	edx = r9d
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041B3C3
l000000000041B3C3:
	rax = rbx
	goto l000000000041B020
	// succ:  l000000000041B020
l000000000041B3D0:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l000000000041B6E5
	// succ:  l000000000041B3D9 l000000000041B6E5
l000000000041B3D9:
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000041B162
	// succ:  l000000000041B162
l000000000041B3E1:
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	// succ:  l000000000041B3E7
l000000000041B3E7:
	edx = CONVERT(Mem0[rax + 2<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	r9 = rax + 2<64>
	edx = CONVERT(Mem0[rdi + rdx:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	ecx = SLICE(rdx - 1<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 0x18<8>)
	branch Test(ULE,CZ) l000000000041B306
	// succ:  l000000000041B3FF l000000000041B306
l000000000041B3FF:
	rbp = rax
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	goto l000000000041B044
	// succ:  l000000000041B044
l000000000041B410:
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000041B5B1
	// succ:  l000000000041B419 l000000000041B5B1
l000000000041B419:
	SCZO = cond(eax - 3<32>)
	branch Test(NE,Z) l000000000041B2B8
	// succ:  l000000000041B422 l000000000041B2B8
l000000000041B422:
	r10d = Mem0[rsp + 0x90<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d & r10d)
	C = false
	branch Test(EQ,Z) l000000000041B2B8
	// succ:  l000000000041B433 l000000000041B2B8
l000000000041B433:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call fn0000000000419F80 (retsize: 8;)
	r14 = rax
	Mem0[rax + 0x14<64>:word32] = 1<32>
	Mem0[rax + 0x18<64>:word32] = 1<32>
	eax = Mem0[r13 + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000041B44F
l000000000041B44F:
	rdi = Mem0[rsp + 0x88<64>:word64]
	Mem0[rdi:word64] = r14
	rdi = Mem0[rsp + 0x80<64>:word64]
	Mem0[rdi:word32] = eax
	eax = _errno()
	Mem0[rax:word32] = 0x22<32>
	eax = 0x62<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000041B382
	// succ:  l000000000041B382
l000000000041B480:
	rcx = r14
	call fn000000000041A090 (retsize: 8;)
	// succ:  l000000000041B488
l000000000041B488:
	eax = _errno()
	Mem0[rax:word32] = 0x22<32>
	eax = 0xA3<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000041B382
	// succ:  l000000000041B382
l000000000041B4A0:
	SCZO = cond(cl - 0x30<8>)
	rbx = rax
	branch Test(NE,Z) l000000000041B4C6
	// succ:  l000000000041B4A8 l000000000041B4C6
l000000000041B4A8:
	// succ:  l000000000041B4B0
l000000000041B4B0:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	ecx = CONVERT(Mem0[rbx:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 0x30<8>)
	branch Test(EQ,Z) l000000000041B4B0
	// succ:  l000000000041B4BC l000000000041B4B0
l000000000041B4BC:
	edx = CONVERT(cl, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	r10d = CONVERT(Mem0[rdi + rdx:byte], byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	edx = ecx
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041B4C6
l000000000041B4C6:
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	SZO = cond(r10b & r10b)
	C = false
	r12 = rax
	r11b = CONVERT(Test(EQ,Z), bool, int8)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	goto l000000000041B139
	// succ:  l000000000041B139
l000000000041B4DE:
	ebx = esi
	rbx = CONVERT(ebx, word32, uint64)
	rcx = r14
	ebx = ebx - eax
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	r12d = r12d - ebx
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	call fn000000000041A490 (retsize: 8;)
	r14 = rax
	r15 = rax + 0x18<64>
	goto l000000000041B26D
	// succ:  l000000000041B26D
l000000000041B500:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	goto l000000000041B3E7
	// succ:  l000000000041B3E7
l000000000041B508:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	rcx = r14
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	ebx = ebx - esi
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000041AC20 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041B557
	// succ:  l000000000041B51C l000000000041B557
l000000000041B51C:
	ecx = SLICE(rbx - 1<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	dil = 1<8>
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	r8d = r8d << cl
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	eax = eax >> 5<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rax = CONVERT(eax, int32, int64)
	SZO = cond(Mem0[r15 + rax * 4<64>:word32] & r8d)
	C = false
	branch Test(EQ,Z) l000000000041B557
	// succ:  l000000000041B538 l000000000041B557
l000000000041B538:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(LE,SZO) l000000000041B74F
	// succ:  l000000000041B540 l000000000041B74F
l000000000041B540:
	edx = ecx
	rdx = CONVERT(edx, word32, uint64)
	rcx = r14
	call fn000000000041AC20 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041B74F
	// succ:  l000000000041B552 l000000000041B74F
l000000000041B552:
	edi = 3<32>
	rdi = CONVERT(edi, word32, uint64)
	// succ:  l000000000041B557
l000000000041B557:
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	rcx = r14
	r12d = r12d + ebx
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	call fn000000000041ACB0 (retsize: 8;)
	goto l000000000041B26D
	// succ:  l000000000041B26D
l000000000041B569:
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l000000000041B56E
l000000000041B56E:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000041B594
	// succ:  l000000000041B572 l000000000041B594
l000000000041B572:
	eax = Mem0[r13 + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000041B621
	// succ:  l000000000041B57F l000000000041B621
l000000000041B57F:
	SCZO = cond(eax - 3<32>)
	branch Test(EQ,Z) l000000000041B634
	// succ:  l000000000041B588 l000000000041B634
l000000000041B588:
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000041B759
	// succ:  l000000000041B591 l000000000041B759
l000000000041B591:
	ebx = ebx | 0x10<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	// succ:  l000000000041B594
l000000000041B594:
	rax = Mem0[rsp + 0x88<64>:word64]
	Mem0[rax:word64] = r14
	rax = Mem0[rsp + 0x80<64>:word64]
	Mem0[rax:word32] = r12d
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	goto l000000000041B382
	// succ:  l000000000041B382
l000000000041B5B1:
	r11d = Mem0[rsp + 0x90<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d & r11d)
	C = false
	branch Test(NE,Z) l000000000041B2B8
	// succ:  l000000000041B5C2 l000000000041B2B8
l000000000041B5C2:
	goto l000000000041B433
	// succ:  l000000000041B433
l000000000041B5C7:
	SZO = cond(edi & edi)
	C = false
	ebp = SLICE(rbx - 1<64>, word32, 0)
	rbp = CONVERT(ebp, word32, uint64)
	branch Test(NE,Z) l000000000041B745
	// succ:  l000000000041B5D2 l000000000041B745
l000000000041B5D2:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(LE,SZO) l000000000041B5E2
	// succ:  l000000000041B5D6 l000000000041B5E2
l000000000041B5D6:
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	rcx = r14
	call fn000000000041AC20 (retsize: 8;)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	// succ:  l000000000041B5E2
l000000000041B5E2:
	eax = ebp
	rax = CONVERT(eax, word32, uint64)
	ecx = ebp
	rcx = CONVERT(ecx, word32, uint64)
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	eax = eax >> 5<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	edx = edx | 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rax = CONVERT(eax, int32, int64)
	r8d = r8d << cl
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	rcx = r14
	SZO = cond(Mem0[r15 + rax * 4<64>:word32] & r8d)
	C = false
	branch Test(EQ,Z) l000000000041B603
	// succ:  l000000000041B600_1 l000000000041B603
l000000000041B600_1:
	edi = edx
	// succ:  l000000000041B603
l000000000041B603:
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	esi = esi - ebx
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	call fn000000000041ACB0 (retsize: 8;)
	ebx = 2<32>
	rbx = CONVERT(ebx, word32, uint64)
	r12d = Mem0[r13 + 4<64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	goto l000000000041B56E
	// succ:  l000000000041B56E
l000000000041B61A:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041B009
	// succ:  l000000000041B009
l000000000041B621:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	eax = eax - Mem0[rsp + 0x90<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rsp + 0x90<64>:word32] = eax
	// succ:  l000000000041B634
l000000000041B634:
	eax = Mem0[rsp + 0x90<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041B591
	// succ:  l000000000041B643 l000000000041B591
l000000000041B643:
	rcx = r14
	rdi = CONVERT(Mem0[r14 + 0x14<64>:word32], word32, int64)
	call fn0000000000415400 (retsize: 8;)
	SCZO = cond(ebx - 2<32>)
	r14 = rax
	r8 = rax + 0x18<64>
	branch Test(EQ,Z) l000000000041B7DF
	// succ:  l000000000041B65F l000000000041B7DF
l000000000041B65F:
	SCZO = cond(edi - Mem0[rax + 0x14<64>:word32])
	branch Test(LT,SO) l000000000041B67D
	// succ:  l000000000041B664 l000000000041B67D
l000000000041B664:
	esi = esi & 0x1F<32>
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	branch Test(EQ,Z) l000000000041B698
	// succ:  l000000000041B669 l000000000041B698
l000000000041B669:
	Z = Mem0[r8 - 4<64> + rdi * 4<64>:word32] == 0<32>
	eax = __bsr(Mem0[r8 - 4<64> + rdi * 4<64>:word32])
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	edx = edx - esi
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = eax ^ 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(edx - eax)
	branch Test(LE,SZO) l000000000041B698
	// succ:  l000000000041B67D l000000000041B698
l000000000041B67D:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r14
	r12d = r12d + 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	call fn000000000041ACB0 (retsize: 8;)
	SCZO = cond(r12d - Mem0[r13 + 8<64>:word32])
	branch Test(GT,SZO) l000000000041B480
	// succ:  l000000000041B698 l000000000041B480
l000000000041B698:
	ebx = 0x21<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000041B594
	// succ:  l000000000041B594
l000000000041B6A2:
	r8d = Mem0[rsp + 0x90<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NE,Z) l000000000041B488
	// succ:  l000000000041B6B3 l000000000041B488
l000000000041B6B3:
	goto l000000000041B08A
	// succ:  l000000000041B08A
l000000000041B6B8:
	r9d = Mem0[rsp + 0x90<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(EQ,Z) l000000000041B488
	// succ:  l000000000041B6C9 l000000000041B488
l000000000041B6C9:
	goto l000000000041B08A
	// succ:  l000000000041B08A
l000000000041B6CE:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l000000000041B1DE
	// succ:  l000000000041B1DE
l000000000041B6D5:
	rax = r15
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	goto l000000000041B23F
	// succ:  l000000000041B23F
l000000000041B6E5:
	edx = CONVERT(Mem0[rsi + 1<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l000000000041B814
	// succ:  l000000000041B6F1 l000000000041B814
l000000000041B6F1:
	SCZO = cond(dl - Mem0[rax + 1<64>:byte])
	branch Test(NE,Z) l000000000041B774
	// succ:  l000000000041B6F6 l000000000041B774
l000000000041B6F6:
	r12d = 2<32>
	r12 = CONVERT(r12d, word32, uint64)
	goto l000000000041B70B
	// succ:  l000000000041B70B
l000000000041B700:
	r12 = r12 + 1<64>
	SCZO = cond(r12)
	SCZO = cond(dl - Mem0[rax - 1<64>:byte])
	branch Test(NE,Z) l000000000041B774
	// succ:  l000000000041B70B l000000000041B774
l000000000041B70B:
	edx = CONVERT(Mem0[rsi:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l000000000041B700
	// succ:  l000000000041B714 l000000000041B700
l000000000041B714:
	r12 = r12 + rax
	SCZO = cond(r12)
	eax = CONVERT(Mem0[r12:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[rdi + rax:byte] - 0<8>)
	rdx = rax
	rax = r12
	branch Test(EQ,Z) l000000000041B162
	// succ:  l000000000041B72C l000000000041B162
l000000000041B72C:
	// succ:  l000000000041B730
l000000000041B730:
	rax = rax + 1<64>
	SCZO = cond(rax)
	ecx = CONVERT(Mem0[rax:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(Mem0[rdi + rcx:byte] - 0<8>)
	rdx = rcx
	branch Test(NE,Z) l000000000041B730
	// succ:  l000000000041B740 l000000000041B730
l000000000041B740:
	goto l000000000041B162
	// succ:  l000000000041B162
l000000000041B745:
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	goto l000000000041B5E2
	// succ:  l000000000041B5E2
l000000000041B74F:
	edi = 2<32>
	rdi = CONVERT(edi, word32, uint64)
	goto l000000000041B557
	// succ:  l000000000041B557
l000000000041B759:
	SZO = cond(dil & 2<8>)
	C = false
	branch Test(EQ,Z) l000000000041B591
	// succ:  l000000000041B763 l000000000041B591
l000000000041B763:
	edi = edi | Mem0[r15:word32]
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	edi = edi & 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	branch Test(NE,Z) l000000000041B643
	// succ:  l000000000041B76F l000000000041B643
l000000000041B76F:
	goto l000000000041B591
	// succ:  l000000000041B591
l000000000041B774:
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	goto l000000000041B169
	// succ:  l000000000041B169
l000000000041B77F:
	edx = Mem0[rsp + 0x90<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l000000000041B2B0
	// succ:  l000000000041B78E l000000000041B2B0
l000000000041B78E:
	Mem0[r14 + 0x14<64>:word32] = 1<32>
	Mem0[r15:word32] = 1<32>
	goto l000000000041B44F
	// succ:  l000000000041B44F
l000000000041B7A2:
	ecx = Mem0[rsp + 0x90<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l000000000041B78E
	// succ:  l000000000041B7AD l000000000041B78E
l000000000041B7AD:
	goto l000000000041B2B0
	// succ:  l000000000041B2B0
l000000000041B7B2:
	SCZO = cond(ebx - esi)
	branch Test(NE,Z) l000000000041B2B0
	// succ:  l000000000041B7BA l000000000041B2B0
l000000000041B7BA:
	SCZO = cond(esi - 1<32>)
	branch Test(LE,SZO) l000000000041B78E
	// succ:  l000000000041B7BF l000000000041B78E
l000000000041B7BF:
	edx = SLICE(rsi - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rcx = r14
	call fn000000000041AC20 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041B2B0
	// succ:  l000000000041B7D2 l000000000041B2B0
l000000000041B7D2:
	eax = Mem0[r13 + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l000000000041B78E
	// succ:  l000000000041B78E
l000000000041B7D8:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l000000000041B0F1
	// succ:  l000000000041B0F1
l000000000041B7DF:
	eax = Mem0[r13 + 0<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	bl = 0x22<8>
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - esi)
	branch Test(NE,Z) l000000000041B594
	// succ:  l000000000041B7F0 l000000000041B594
l000000000041B7F0:
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	ecx = esi
	rcx = CONVERT(ecx, word32, uint64)
	edx = edx >> 5<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = eax << cl
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rdx = CONVERT(edx, word32, int64)
	eax = eax & Mem0[r8 + rdx * 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 1<32>)
	ebx = ebx - ebx - C
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	ebx = ~ebx
	rbx = CONVERT(ebx, word32, uint64)
	ebx = ebx + 0x22<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	goto l000000000041B594
	// succ:  l000000000041B594
l000000000041B814:
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	goto l000000000041B714
	// succ:  l000000000041B714
fn000000000041AF50_exit:


// fn000000000041B820
// Return size: 8
define fn000000000041B820
fn000000000041B820_entry:
	rsp = fp
	// succ:  l000000000041B820
l000000000041B820:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	r14 = Mem0[0x0000000000491ED0<p64>:word64]
	Mem0[rsp + 0x90<64>:word64] = rcx
	SCZO = cond(Mem0[r14 + 0x30<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000041BB16
	// succ:  l000000000041B84A l000000000041BB16
l000000000041B84A:
	eax = Mem0[rdx:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx >> 5<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = eax & 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rdx = CONVERT(edx, word32, int64)
	Mem0[rsp + 0x3C<64>:word32] = eax
	rax = Mem0[rsp + 0x90<64>:word64]
	rdi = r8 + rdx * 4<64>
	rdx = rdi + 4<64>
	rax = Mem0[rax:word64]
	branch Test(NE,Z) l000000000041B872
	// succ:  l000000000041B86E_1 l000000000041B872
l000000000041B86E_1:
	rdx = rdi
	// succ:  l000000000041B872
l000000000041B872:
	Mem0[rsp + 0x30<64>:word64] = rdx
	rsi = rdx - 4<64>
	Mem0[rdx - 4<64>:word32] = 0<32>
	goto l000000000041B888
	// succ:  l000000000041B888
l000000000041B884:
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l000000000041B888
l000000000041B888:
	edx = CONVERT(Mem0[rax + 1<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	edx = edx - 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(edx - 0x1F<32>)
	branch Test(ULE,CZ) l000000000041B884
	// succ:  l000000000041B896 l000000000041B884
l000000000041B896:
	SCZO = cond(cl - 0x30<8>)
	branch Test(EQ,Z) l000000000041BB34
	// succ:  l000000000041B89F l000000000041BB34
l000000000041B89F:
	edx = CONVERT(Mem0[rax + 1<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041B8A3
l000000000041B8A3:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	SZO = cond(edx & edx)
	C = false
	rbp = rsi
	r11 = rsi
	rbx = rax + 1<64>
	branch Test(EQ,Z) l000000000041B960
	// succ:  l000000000041B8BE l000000000041B960
l000000000041B8BE:
	// succ:  l000000000041B8C0
l000000000041B8C0:
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	ecx = CONVERT(Mem0[r14 + rcx:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l000000000041BA34
	// succ:  l000000000041B8CF l000000000041BA34
l000000000041B8CF:
	SCZO = cond(edx - 0x20<32>)
	branch Test(UGT,CZ) l000000000041BAE5
	// succ:  l000000000041B8D8 l000000000041BAE5
l000000000041B8D8:
	SCZO = cond(r12d - r15d)
	branch Test(LE,SZO) l000000000041BA75
	// succ:  l000000000041B8E1 l000000000041BA75
l000000000041B8E1:
	SCZO = cond(r9d - 7<32>)
	branch Test(GT,SZO) l000000000041B93A
	// succ:  l000000000041B8E7 l000000000041B93A
l000000000041B8E7:
	SCZO = cond(r11 - rbp)
	branch Test(UGE,C) l000000000041B93A
	// succ:  l000000000041B8EC l000000000041B93A
l000000000041B8EC:
	edi = 8<32>
	rdi = CONVERT(edi, word32, uint64)
	edx = Mem0[r11:word32]
	rdx = CONVERT(edx, word32, uint64)
	r13d = 0x20<32>
	r13 = CONVERT(r13d, word32, uint64)
	edi = edi - r9d
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	Mem0[rsp + 0x28<64>:word64] = rax
	r9 = r11
	edi = edi << 2<32>
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	r13d = r13d - edi
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	// succ:  l000000000041B910
l000000000041B910:
	r10d = Mem0[r9 + 4<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	ecx = r13d
	rcx = CONVERT(ecx, word32, uint64)
	r9 = r9 + 4<64>
	SCZO = cond(r9)
	eax = r10d
	rax = CONVERT(eax, word32, uint64)
	eax = eax << cl
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = edi
	rcx = CONVERT(ecx, word32, uint64)
	edx = edx | eax
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[r9 - 4<64>:word32] = edx
	edx = r10d
	rdx = CONVERT(edx, word32, uint64)
	edx = edx >>u cl
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	Mem0[r9:word32] = edx
	SCZO = cond(rbp - r9)
	branch Test(UGT,CZ) l000000000041B910
	// succ:  l000000000041B935 l000000000041B910
l000000000041B935:
	rax = Mem0[rsp + 0x28<64>:word64]
	// succ:  l000000000041B93A
l000000000041B93A:
	SCZO = cond(r11 - r8)
	branch Test(UGT,CZ) l000000000041BA60
	// succ:  l000000000041B943 l000000000041BA60
l000000000041B943:
	rax = rbx
	r9d = 8<32>
	r9 = CONVERT(r9d, word32, uint64)
	// succ:  l000000000041B950
l000000000041B950:
	edx = CONVERT(Mem0[rax + 1<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rbx = rax + 1<64>
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000041B8C0
	// succ:  l000000000041B960 l000000000041B8C0
l000000000041B960:
	SZO = cond(r12d & r12d)
	C = false
	eax = 4<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l000000000041BA23
	// succ:  l000000000041B96E l000000000041BA23
l000000000041B96E:
	r10 = r11
	// succ:  l000000000041B971
l000000000041B971:
	SCZO = cond(r9d - 7<32>)
	branch Test(GT,SZO) l000000000041B9C3
	// succ:  l000000000041B977 l000000000041B9C3
l000000000041B977:
	SCZO = cond(rbp - r11)
	branch Test(ULE,CZ) l000000000041B9C3
	// succ:  l000000000041B97C l000000000041B9C3
l000000000041B97C:
	edi = 8<32>
	rdi = CONVERT(edi, word32, uint64)
	eax = Mem0[r11:word32]
	rax = CONVERT(eax, word32, uint64)
	r12d = 0x20<32>
	r12 = CONVERT(r12d, word32, uint64)
	edi = edi - r9d
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	r9 = r11
	edi = edi << 2<32>
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	r12d = r12d - edi
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	// succ:  l000000000041B9A0
l000000000041B9A0:
	ebx = Mem0[r9 + 4<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	ecx = r12d
	rcx = CONVERT(ecx, word32, uint64)
	r9 = r9 + 4<64>
	SCZO = cond(r9)
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	edx = edx << cl
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	ecx = edi
	rcx = CONVERT(ecx, word32, uint64)
	eax = eax | edx
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[r9 - 4<64>:word32] = eax
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	eax = eax >>u cl
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[r9:word32] = eax
	SCZO = cond(rbp - r9)
	branch Test(UGT,CZ) l000000000041B9A0
	// succ:  l000000000041B9C3 l000000000041B9A0
l000000000041B9C3:
	SCZO = cond(r8 - r11)
	branch Test(UGE,C) l000000000041BB64
	// succ:  l000000000041B9CC l000000000041BB64
l000000000041B9CC:
	rax = r8
	// succ:  l000000000041B9D0
l000000000041B9D0:
	r10 = r10 + 4<64>
	SCZO = cond(r10)
	edx = Mem0[r10 - 4<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = rax + 4<64>
	SCZO = cond(rax)
	SCZO = cond(rsi - r10)
	Mem0[rax - 4<64>:word32] = edx
	branch Test(UGE,C) l000000000041B9D0
	// succ:  l000000000041B9E4 l000000000041B9D0
l000000000041B9E4:
	rax = rax + 4<64>
	SCZO = cond(rax)
	Mem0[rax - 4<64>:word32] = 0<32>
	SCZO = cond(rsi - rax)
	branch Test(UGE,C) l000000000041B9E4
	// succ:  l000000000041B9F4 l000000000041B9E4
l000000000041B9F4:
	rax = Mem0[rsp + 0x30<64>:word64]
	eax = Mem0[rax - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000041B9FC
l000000000041B9FC:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041BA13
	// succ:  l000000000041BA00 l000000000041BA13
l000000000041BA00:
	goto l000000000041BB5A
	// succ:  l000000000041BB5A
l000000000041BA05:
	rsi = rsi - 4<64>
	SCZO = cond(rsi)
	eax = Mem0[rsi:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000041BB5A
	// succ:  l000000000041BA13 l000000000041BB5A
l000000000041BA13:
	SCZO = cond(r8 - rsi)
	branch Test(NE,Z) l000000000041BA05
	// succ:  l000000000041BA18 l000000000041BA05
l000000000041BA18:
	Mem0[rsi:word32] = 1<32>
	eax = 5<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000041BA23
l000000000041BA23:
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041B820_exit
l000000000041BA34:
	r9d = r9d + 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	r12d = r12d + 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	SCZO = cond(r9d - 8<32>)
	branch Test(GT,SZO) l000000000041BAC0
	// succ:  l000000000041BA42 l000000000041BAC0
l000000000041BA42:
	eax = Mem0[r11:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax << 4<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	// succ:  l000000000041BA48
l000000000041BA48:
	ecx = ecx & 0xF<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	ecx = ecx | eax
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rax = rbx
	Mem0[r11:word32] = ecx
	goto l000000000041B950
	// succ:  l000000000041B950
l000000000041BA60:
	rbp = r11 - 4<64>
	Mem0[r11 - 4<64>:word32] = 0<32>
	r15d = r12d
	r15 = CONVERT(r15d, word32, uint64)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r11 = rbp
	// succ:  l000000000041BA75
l000000000041BA75:
	edx = CONVERT(Mem0[rax + 2<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbx
	SCZO = cond(dl - 0x20<8>)
	branch Test(UGT,CZ) l000000000041BA8E
	// succ:  l000000000041BA81 l000000000041BA8E
l000000000041BA81:
	rax = rax + 1<64>
	SCZO = cond(rax)
	edx = CONVERT(Mem0[rax + 1<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x20<8>)
	branch Test(ULE,CZ) l000000000041BA81
	// succ:  l000000000041BA8E l000000000041BA81
l000000000041BA8E:
	SCZO = cond(dl - 0x30<8>)
	branch Test(NE,Z) l000000000041B950
	// succ:  l000000000041BA97 l000000000041B950
l000000000041BA97:
	edx = CONVERT(Mem0[rax + 2<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xFFFFFFDF<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(dl - 0x58<8>)
	branch Test(NE,Z) l000000000041B950
	// succ:  l000000000041BAA7 l000000000041B950
l000000000041BAA7:
	SCZO = cond(Mem0[rax + 3<64>:byte] - 0x21<8>)
	rdx = rax + 2<64>
	branch Test(ULT,C) l000000000041BAB3
	// succ:  l000000000041BAAF_1 l000000000041BAB3
l000000000041BAAF_1:
	rax = rdx
	// succ:  l000000000041BAB3
l000000000041BAB3:
	goto l000000000041B950
	// succ:  l000000000041B950
l000000000041BAC0:
	SCZO = cond(r11 - r8)
	rax = rbx
	branch Test(ULE,CZ) l000000000041B950
	// succ:  l000000000041BACC l000000000041B950
l000000000041BACC:
	Mem0[r11 - 4<64>:word32] = 0<32>
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	r11 = r11 - 4<64>
	SCZO = cond(r11)
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	goto l000000000041BA48
	// succ:  l000000000041BA48
l000000000041BAE5:
	SCZO = cond(edx - 0x29<32>)
	rcx = rbx
	dl = CONVERT(Test(EQ,Z), bool, int8)
	SZO = cond(r12d & r12d)
	C = false
	branch Test(EQ,Z) l000000000041BB90
	// succ:  l000000000041BAF7 l000000000041BB90
l000000000041BAF7:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l000000000041BB94
	// succ:  l000000000041BAFF l000000000041BB94
l000000000041BAFF:
	rbx = Mem0[rsp + 0x90<64>:word64]
	rax = rax + 2<64>
	SCZO = cond(rax)
	r10 = r11
	Mem0[rbx:word64] = rax
	goto l000000000041B971
	// succ:  l000000000041B971
l000000000041BB16:
	Mem0[rsp + 0x30<64>:word64] = r8
	Mem0[rsp + 0x28<64>:word64] = rdx
	call fn000000000041BBE0 (retsize: 8;)
	r8 = Mem0[rsp + 0x30<64>:word64]
	rdx = Mem0[rsp + 0x28<64>:word64]
	goto l000000000041B84A
	// succ:  l000000000041B84A
l000000000041BB34:
	edx = CONVERT(Mem0[rax + 2<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xFFFFFFDF<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(dl - 0x58<8>)
	branch Test(NE,Z) l000000000041B89F
	// succ:  l000000000041BB44 l000000000041B89F
l000000000041BB44:
	edx = CONVERT(Mem0[rax + 3<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x20<8>)
	branch Test(ULE,CZ) l000000000041B89F
	// succ:  l000000000041BB51 l000000000041B89F
l000000000041BB51:
	rax = rax + 2<64>
	SCZO = cond(rax)
	goto l000000000041B8A3
	// succ:  l000000000041B8A3
l000000000041BB5A:
	eax = 5<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000041BA23
	// succ:  l000000000041BA23
l000000000041BB64:
	edx = Mem0[rsp + 0x3C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l000000000041B9F4
	// succ:  l000000000041BB70 l000000000041B9F4
l000000000041BB70:
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx - Mem0[rsp + 0x3C<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	rbx = Mem0[rsp + 0x30<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	eax = eax >>u cl
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & Mem0[rbx - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx - 4<64>:word32] = eax
	goto l000000000041B9FC
	// succ:  l000000000041B9FC
l000000000041BB90:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l000000000041BBB2
	// succ:  l000000000041BB94 l000000000041BBB2
l000000000041BB94:
	eax = CONVERT(Mem0[rbx + 1<64>:byte], byte, int32)
	rcx = rbx + 1<64>
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000041BBAD
	// succ:  l000000000041BBA0 l000000000041BBAD
l000000000041BBA0:
	goto l000000000041BBCB
	// succ:  l000000000041BBCB
l000000000041BBA2:
	rcx = rcx + 1<64>
	SCZO = cond(rcx)
	eax = CONVERT(Mem0[rcx:byte], byte, int32)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041BBCB
	// succ:  l000000000041BBAD l000000000041BBCB
l000000000041BBAD:
	SCZO = cond(eax - 0x29<32>)
	branch Test(NE,Z) l000000000041BBA2
	// succ:  l000000000041BBB2 l000000000041BBA2
l000000000041BBB2:
	rax = Mem0[rsp + 0x90<64>:word64]
	rcx = rcx + 1<64>
	SCZO = cond(rcx)
	Mem0[rax:word64] = rcx
	eax = 4<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000041BA23
	// succ:  l000000000041BA23
l000000000041BBCB:
	al = 4<8>
	goto l000000000041BA23
	// succ:  l000000000041BA23
fn000000000041B820_exit:


// fn000000000041BBE0
// Return size: 8
define fn000000000041BBE0
fn000000000041BBE0_entry:
	rsp = fp
	// succ:  l000000000041BBE0
l000000000041BBE0:
	r8 = 0x000000000049110E<p64>
	rdx = 0x00000000004AE640<p64>
	ecx = 0x10<32>
	rcx = CONVERT(ecx, word32, uint64)
	eax = 0x30<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000041BC00
l000000000041BC00:
	Mem0[rdx + rax:byte] = cl
	eax = CONVERT(Mem0[r8 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000041BC00
	// succ:  l000000000041BC13 l000000000041BC00
l000000000041BC13:
	r8 = 0x0000000000491107<p64>
	ecx = 0x1A<32>
	rcx = CONVERT(ecx, word32, uint64)
	eax = 0x61<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000041BC24
l000000000041BC24:
	Mem0[rdx + rax:byte] = cl
	eax = CONVERT(Mem0[r8 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000041BC24
	// succ:  l000000000041BC37 l000000000041BC24
l000000000041BC37:
	r8 = 0x0000000000491100<p64>
	ecx = 0x1A<32>
	rcx = CONVERT(ecx, word32, uint64)
	eax = 0x41<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000041BC50
l000000000041BC50:
	Mem0[rdx + rax:byte] = cl
	eax = CONVERT(Mem0[r8 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000041BC50
	// succ:  l000000000041BC63 l000000000041BC50
l000000000041BC63:
	return
	// succ:  fn000000000041BBE0_exit
fn000000000041BBE0_exit:


// fn000000000041BC90
// Return size: 8
define fn000000000041BC90
fn000000000041BC90_entry:
	rsp = fp
	// succ:  l000000000041BC90
l000000000041BC90:
	rax = Mem0[0x00000000004AE4C0<p64>:word64]
	return
	// succ:  fn000000000041BC90_exit
fn000000000041BC90_exit:


// fn000000000041BCA0
// Return size: 8
define fn000000000041BCA0
fn000000000041BCA0_entry:
	rsp = fp
	// succ:  l000000000041BCA0
l000000000041BCA0:
	rax = rcx
	v5 = Mem0[0x00000000004AE4C0<p64>:word64]
	Mem0[0x00000000004AE4C0<p64>:word64] = rax
	rax = v5
	return
	// succ:  fn000000000041BCA0_exit
fn000000000041BCA0_exit:


// fn000000000041BF30
// Return size: 8
define fn000000000041BF30
fn000000000041BF30_entry:
	rsp = fp
	// succ:  l000000000041BF30
l000000000041BF30:
	eax = Mem0[0x00000000004AE4D0<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000041BF30_exit
fn000000000041BF30_exit:


// fn000000000041BF40
// Return size: 8
define fn000000000041BF40
fn000000000041BF40_entry:
	rsp = fp
	// succ:  l000000000041BF40
l000000000041BF40:
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	v6 = Mem0[0x00000000004AE4D0<p64>:word32]
	Mem0[0x00000000004AE4D0<p64>:word32] = eax
	eax = v6
	return
	// succ:  fn000000000041BF40_exit
fn000000000041BF40_exit:


// fn000000000041BF50
// Return size: 0
define fn000000000041BF50
fn000000000041BF50_entry:
	rsp = fp
	// succ:  l000000000041BF50
l000000000041BF50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	ebx = ecx
	rbx = CONVERT(ebx, word32, uint64)
	rcx = 0x0000000000491120<p64>
	rax = GetModuleHandleW(rcx)
	rdx = 0x0000000000491136<p64>
	rcx = rax
	rax = GetProcAddress(rcx, rdx)
	rdx = 0x000000000041BF40<p64>
	SZO = cond(rax & rax)
	C = false
	ecx = ebx
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(NE,Z) l000000000041BF84
	// succ:  l000000000041BF80_1 l000000000041BF84
l000000000041BF80_1:
	rax = rdx
	// succ:  l000000000041BF84
l000000000041BF84:
	Mem0[0x00000000004770F8<p64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call rax (retsize: 0;)
	return
	// succ:  fn000000000041BF50_exit
fn000000000041BF50_exit:


// fn000000000041BFA0
// Return size: 0
define fn000000000041BFA0
fn000000000041BFA0_entry:
	rsp = fp
	// succ:  l000000000041BFA0
l000000000041BFA0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = 0x0000000000491120<p64>
	rax = GetModuleHandleW(rcx)
	rdx = 0x0000000000491149<p64>
	rcx = rax
	rax = GetProcAddress(rcx, rdx)
	rdx = 0x000000000041BF30<p64>
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000041BFCF
	// succ:  l000000000041BFCB_1 l000000000041BFCF
l000000000041BFCB_1:
	rax = rdx
	// succ:  l000000000041BFCF
l000000000041BFCF:
	Mem0[0x00000000004770F0<p64>:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	call rax (retsize: 0;)
	return
	// succ:  fn000000000041BFA0_exit
fn000000000041BFA0_exit:


// fn000000000041BFE0
// Return size: 0
define fn000000000041BFE0
fn000000000041BFE0_entry:
	rsp = fp
	// succ:  l000000000041BFE0
l000000000041BFE0:
	rax = Mem0[0x00000000004770F8<p64>:word64]
	call rax (retsize: 0;)
	return
	// succ:  fn000000000041BFE0_exit
fn000000000041BFE0_exit:


// fn000000000041BFF0
// Return size: 0
define fn000000000041BFF0
fn000000000041BFF0_entry:
	rsp = fp
	// succ:  l000000000041BFF0
l000000000041BFF0:
	rax = Mem0[0x00000000004770F0<p64>:word64]
	call rax (retsize: 0;)
	return
	// succ:  fn000000000041BFF0_exit
fn000000000041BFF0_exit:


// fn000000000041C000
// Return size: 8
define fn000000000041C000
fn000000000041C000_entry:
	rsp = fp
	// succ:  l000000000041C000
l000000000041C000:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rdi = Mem0[rcx:word64]
	rbx = rcx
	r13 = rdx
	SZO = cond(rdi & rdi)
	C = false
	branch Test(SG,S) l000000000041C0B4
	// succ:  l000000000041C01E l000000000041C0B4
l000000000041C01E:
	eax = Mem0[rcx + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x3B9AC9FF<32>)
	branch Test(UGT,CZ) l000000000041C0B4
	// succ:  l000000000041C02C l000000000041C0B4
l000000000041C02C:
	SZO = cond(rdx & rdx)
	C = false
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(EQ,Z) l000000000041C044
	// succ:  l000000000041C033 l000000000041C044
l000000000041C033:
	rcx = rsp + 0x20<64>
	GetSystemTimeAsFileTime(rcx)
	rdi = Mem0[rbx:word64]
	ecx = Mem0[rbx + 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	// succ:  l000000000041C044
l000000000041C044:
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	edx = 0x431BDE83<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = ecx >> 0x1F<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	edx_eax = edx *s eax
	SCZO = cond(edx_eax)
	esi = 0xFFFFFFFD<32>
	rsi = CONVERT(esi, word32, uint64)
	r12d = 0xFFFFFFFE<32>
	r12 = CONVERT(r12d, word32, uint64)
	rdi = rdi *s 0x3E8<64>
	SCZO = cond(rdi)
	ebp = 0xFFFFFFFE<32>
	rbp = CONVERT(ebp, word32, uint64)
	edx = edx >> 0x12<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx - ecx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rdx = CONVERT(edx, word32, int64)
	rdi = rdi + rdx
	SCZO = cond(rdi)
	SZO = cond(rdi & rdi)
	C = false
	rbx = rdi
	branch Test(NE,Z) l000000000041C085
	// succ:  l000000000041C07A l000000000041C085
l000000000041C07A:
	goto l000000000041C0A5
	// succ:  l000000000041C0A5
l000000000041C080:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000041C0A1
	// succ:  l000000000041C085 l000000000041C0A1
l000000000041C085:
	SCZO = cond(rbx - rsi)
	ecx = r12d
	rcx = CONVERT(ecx, word32, uint64)
	rax = rbp
	branch Test(UGT,CZ) l000000000041C091
	// succ:  l000000000041C08E_1 l000000000041C091
l000000000041C08E_1:
	ecx = ebx
	// succ:  l000000000041C091
l000000000041C091:
	branch Test(UGT,CZ) l000000000041C095
	// succ:  l000000000041C091_1 l000000000041C095
l000000000041C091_1:
	rax = rbx
	// succ:  l000000000041C095
l000000000041C095:
	rbx = rbx - rax
	SCZO = cond(rbx)
	call fn000000000041EF40 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041C080
	// succ:  l000000000041C0A1 l000000000041C080
l000000000041C0A1:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000041C0C7
	// succ:  l000000000041C0A5 l000000000041C0C7
l000000000041C0A5:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000041C0A7
l000000000041C0A7:
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041C000_exit
l000000000041C0B4:
	eax = _errno()
	Mem0[rax:word32] = 0x16<32>
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000041C0A7
	// succ:  l000000000041C0A7
l000000000041C0C7:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l000000000041C12D
	// succ:  l000000000041C0CC l000000000041C12D
l000000000041C0CC:
	rcx = rsp + 0x30<64>
	GetSystemTimeAsFileTime(rcx)
	rdx = Mem0[rsp + 0x30<64>:word64]
	rax = rdx
	rax = rax - Mem0[rsp + 0x20<64>:word64]
	SCZO = cond(rax)
	rdx = 0x346DC5D63886594B<64>
	rdx_rax = rdx *u rax
	SCZO = cond(rdx_rax)
	rdx = rdx >>u 0xB<64>
	SCZO = cond(rdx)
	SCZO = cond(rdi - rdx)
	branch Test(ULE,CZ) l000000000041C143
	// succ:  l000000000041C0FA l000000000041C143
l000000000041C0FA:
	rdi = rdi - rdx
	SCZO = cond(rdi)
	rdx = 0x20C49BA5E353F7CF<64>
	rax = rdi
	rax = rax >>u 3<64>
	SCZO = cond(rax)
	rdx_rax = rdx *u rax
	SCZO = cond(rdx_rax)
	rdx = rdx >>u 4<64>
	SCZO = cond(rdx)
	rax = rdx *s 0x3E8<64>
	SCZO = cond(rax)
	rdi = rdi - rax
	SCZO = cond(rdi)
	eax = edi *s 0xF4240<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	// succ:  l000000000041C125
l000000000041C125:
	Mem0[r13 + 0<64>:word64] = rdx
	Mem0[r13 + 8<64>:word32] = eax
	// succ:  l000000000041C12D
l000000000041C12D:
	eax = _errno()
	Mem0[rax:word32] = 4<32>
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000041C0A7
	// succ:  l000000000041C0A7
l000000000041C143:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l000000000041C125
	// succ:  l000000000041C125
fn000000000041C000_exit:


// fn000000000041C150
// Return size: 8
define fn000000000041C150
fn000000000041C150_entry:
	rsp = fp
	// succ:  l000000000041C150
l000000000041C150:
	Mem0[rcx:word32] = 0xFFFFFFFF<32>
	return
	// succ:  fn000000000041C150_exit
fn000000000041C150_exit:


// fn000000000041C160
// Return size: 8
define fn000000000041C160
fn000000000041C160_entry:
	rsp = fp
	// succ:  l000000000041C160
l000000000041C160:
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	return
	// succ:  fn000000000041C160_exit
fn000000000041C160_exit:


// fn000000000041C170
// Return size: 8
define fn000000000041C170
fn000000000041C170_entry:
	rsp = fp
	// succ:  l000000000041C170
l000000000041C170:
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFD<64>
	return
	// succ:  fn000000000041C170_exit
fn000000000041C170_exit:


// fn000000000041C180
// Return size: 8
define fn000000000041C180
fn000000000041C180_entry:
	rsp = fp
	// succ:  l000000000041C180
l000000000041C180:
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	return
	// succ:  fn000000000041C180_exit
fn000000000041C180_exit:


// fn000000000041C190
// Return size: 8
define fn000000000041C190
fn000000000041C190_entry:
	rsp = fp
	// succ:  l000000000041C190
l000000000041C190:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x00000000004AE508<p64>:word64]
	rbp = rcx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041C26A
	// succ:  l000000000041C1AB l000000000041C26A
l000000000041C1AB:
	SCZO = cond(Mem0[rax:word64] - 0<64>)
	branch Test(EQ,Z) l000000000041C212
	// succ:  l000000000041C1B1 l000000000041C212
l000000000041C1B1:
	rdi = Mem0[rax:word64]
	SCZO = cond(rdi - 1<64>)
	branch Test(EQ,Z) l000000000041C250
	// succ:  l000000000041C1BE l000000000041C250
l000000000041C1BE:
	rdi = rdi - 1<64>
	SCZO = cond(rdi)
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l000000000041C1DE
	// succ:  l000000000041C1DE
l000000000041C1D0:
	SCZO = cond(rbx - rsi)
	branch Test(EQ,Z) l000000000041C212
	// succ:  l000000000041C1D5 l000000000041C212
l000000000041C1D5:
	rdi = rbx - 1<64>
	SCZO = cond(rdi - rsi)
	branch Test(ULT,C) l000000000041C212
	// succ:  l000000000041C1DE l000000000041C212
l000000000041C1DE:
	rax = Mem0[0x00000000004AE510<p64>:word64]
	rbx = rsi + rdi
	rbx = rbx >>u 1<64>
	SCZO = cond(rbx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041C220
	// succ:  l000000000041C1F1 l000000000041C220
l000000000041C1F1:
	rax = Mem0[rax:word64]
	rdx = rbx
	rdx = rdx << 4<64>
	SCZO = cond(rdx)
	SCZO = cond(Mem0[rax + 8<64> + rdx:word64] - rbp)
	branch Test(EQ,Z) l000000000041C240
	// succ:  l000000000041C202 l000000000041C240
l000000000041C202:
	SCZO = cond(rbp - Mem0[(rax + 8<64>) + rdx:word64])
	branch Test(ULT,C) l000000000041C1D0
	// succ:  l000000000041C209 l000000000041C1D0
l000000000041C209:
	rsi = rbx + 1<64>
	SCZO = cond(rdi - rsi)
	branch Test(UGE,C) l000000000041C1DE
	// succ:  l000000000041C212 l000000000041C1DE
l000000000041C212:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000041C214
l000000000041C214:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041C190_exit
l000000000041C220:
	rcx = 0x0000000000491170<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE510<p64>:word64] = rax
	goto l000000000041C1F1
	// succ:  l000000000041C1F1
l000000000041C240:
	rax = Mem0[rax + rdx:word64]
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041C190_exit
l000000000041C250:
	rax = Mem0[0x00000000004AE510<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041C2B4
	// succ:  l000000000041C25C l000000000041C2B4
l000000000041C25C:
	rax = Mem0[rax:word64]
	SCZO = cond(Mem0[rax + 8<64>:word64] - rbp)
	branch Test(NE,Z) l000000000041C212
	// succ:  l000000000041C265 l000000000041C212
l000000000041C265:
	rax = Mem0[rax:word64]
	goto l000000000041C214
	// succ:  l000000000041C214
l000000000041C26A:
	rcx = 0x0000000000491160<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	SCZO = cond(Mem0[rax:word64] - 0<64>)
	Mem0[0x00000000004AE508<p64>:word64] = rax
	branch Test(EQ,Z) l000000000041C212
	// succ:  l000000000041C28B l000000000041C212
l000000000041C28B:
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000041C1B1
	// succ:  l000000000041C294 l000000000041C1B1
l000000000041C294:
	rcx = 0x0000000000491160<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE508<p64>:word64] = rax
	goto l000000000041C1B1
	// succ:  l000000000041C1B1
l000000000041C2B4:
	rcx = 0x0000000000491170<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE510<p64>:word64] = rax
	goto l000000000041C25C
	// succ:  l000000000041C25C
fn000000000041C190_exit:


// fn000000000041C2E0
// Return size: 8
define fn000000000041C2E0
fn000000000041C2E0_entry:
	rsp = fp
	// succ:  l000000000041C2E0
l000000000041C2E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdi = rcx
	rcx = Mem0[0x00000000004AE4E8<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041C3E5
	// succ:  l000000000041C2FA l000000000041C3E5
l000000000041C2FA:
	call fn0000000000422260 (retsize: 8;)
	rax = Mem0[0x00000000004AE4F0<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041C3C5
	// succ:  l000000000041C30F l000000000041C3C5
l000000000041C30F:
	rsi = Mem0[rax:word64]
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000041C40C
	// succ:  l000000000041C31B l000000000041C40C
l000000000041C31B:
	SCZO = cond(Mem0[rsi:word64] - rdi)
	branch Test(NE,Z) l000000000041C32A
	// succ:  l000000000041C320 l000000000041C32A
l000000000041C320:
	goto l000000000041C380
	// succ:  l000000000041C380
l000000000041C322:
	SCZO = cond(Mem0[rbx:word64] - rdi)
	rsi = rbx
	branch Test(EQ,Z) l000000000041C383
	// succ:  l000000000041C32A l000000000041C383
l000000000041C32A:
	rbx = Mem0[rsi + 0x18<64>:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l000000000041C322
	// succ:  l000000000041C333 l000000000041C322
l000000000041C333:
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = calloc(rcx, rdx)
	Mem0[rax:word64] = rdi
	Mem0[rax + 0x10<64>:word32] = 1<32>
	rbx = rax
	Mem0[rsi + 0x18<64>:word64] = rax
	// succ:  l000000000041C353
l000000000041C353:
	rcx = rbx + 8<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn0000000000420360 (retsize: 8;)
	rcx = Mem0[0x00000000004AE4E8<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041C393
	// succ:  l000000000041C36A l000000000041C393
l000000000041C36A:
	// succ:  l000000000041C370
l000000000041C370:
	call fn0000000000422310 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041C2E0_exit
l000000000041C380:
	rbx = rsi
	// succ:  l000000000041C383
l000000000041C383:
	rcx = Mem0[0x00000000004AE4E8<p64>:word64]
	v15 = Mem0[rbx + 0x10<64>:word32] + 1<32>
	Mem0[rbx + 0x10<64>:word32] = v15
	SCZO = cond(v15)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000041C370
	// succ:  l000000000041C393 l000000000041C370
l000000000041C393:
	r8 = 0x000000000041C180<p64>
	rcx = 0x000000000049117D<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE4E8<p64>:word64] = rax
	call fn0000000000422310 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041C2E0_exit
l000000000041C3C5:
	rcx = 0x000000000049118F<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE4F0<p64>:word64] = rax
	goto l000000000041C30F
	// succ:  l000000000041C30F
l000000000041C3E5:
	rcx = 0x000000000049117D<p64>
	r8 = 0x000000000041C180<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE4E8<p64>:word64] = rax
	goto l000000000041C2FA
	// succ:  l000000000041C2FA
l000000000041C40C:
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = calloc(rcx, rdx)
	rbx = rax
	Mem0[rax:word64] = rdi
	Mem0[rax + 0x10<64>:word32] = 1<32>
	rax = Mem0[0x00000000004AE4F0<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041C43C
	// succ:  l000000000041C434 l000000000041C43C
l000000000041C434:
	Mem0[rax:word64] = rbx
	goto l000000000041C353
	// succ:  l000000000041C353
l000000000041C43C:
	rcx = 0x000000000049118F<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE4F0<p64>:word64] = rax
	goto l000000000041C434
	// succ:  l000000000041C434
fn000000000041C2E0_exit:


// fn000000000041C460
// Return size: 8
define fn000000000041C460
fn000000000041C460_entry:
	rsp = fp
	// succ:  l000000000041C460
l000000000041C460:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041C514
	// succ:  l000000000041C46F l000000000041C514
l000000000041C46F:
	rsi = rcx
	rcx = Mem0[0x00000000004AE4E8<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041C546
	// succ:  l000000000041C482 l000000000041C546
l000000000041C482:
	call fn0000000000422260 (retsize: 8;)
	rax = Mem0[0x00000000004AE4F0<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041C56D
	// succ:  l000000000041C497 l000000000041C56D
l000000000041C497:
	rbx = Mem0[rax:word64]
	SCZO = cond(rsi - rbx)
	branch Test(EQ,Z) l000000000041C51B
	// succ:  l000000000041C49F l000000000041C51B
l000000000041C49F:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l000000000041C4B3
	// succ:  l000000000041C4A4 l000000000041C4B3
l000000000041C4A4:
	goto l000000000041C51B
	// succ:  l000000000041C51B
l000000000041C4B0:
	rbx = rax
	// succ:  l000000000041C4B3
l000000000041C4B3:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(rsi - rax)
	r9b = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(rax & rax)
	C = false
	dl = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(r9b & dl)
	C = false
	branch Test(NE,Z) l000000000041C4B0
	// succ:  l000000000041C4C9 l000000000041C4B0
l000000000041C4C9:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041C58D
	// succ:  l000000000041C4D2 l000000000041C58D
l000000000041C4D2:
	v13 = Mem0[rsi + 0x10<64>:word32] - 1<32>
	Mem0[rsi + 0x10<64>:word32] = v13
	SCZO = cond(v13)
	branch Test(EQ,Z) l000000000041C4F0
	// succ:  l000000000041C4D8 l000000000041C4F0
l000000000041C4D8:
	rcx = Mem0[0x00000000004AE4E8<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041C522
	// succ:  l000000000041C4E4 l000000000041C522
l000000000041C4E4:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000041C4EA_thunk_fn0000000000422310
l000000000041C4EA_thunk_fn0000000000422310:
	call fn0000000000422310 (retsize: 0;)
	return
	// succ:  fn000000000041C460_exit
l000000000041C4F0:
	rcx = rsi + 8<64>
	call fn0000000000420B50 (retsize: 8;)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000041C5AB
	// succ:  l000000000041C502 l000000000041C5AB
l000000000041C502:
	rax = Mem0[rsi + 0x18<64>:word64]
	Mem0[rbx + 0x18<64>:word64] = rax
	// succ:  l000000000041C50A
l000000000041C50A:
	rcx = rsi
	free(rcx)
	goto l000000000041C4D8
	// succ:  l000000000041C4D8
l000000000041C514:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041C460_exit
l000000000041C51B:
	rax = rbx
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l000000000041C4C9
	// succ:  l000000000041C4C9
l000000000041C522:
	rcx = 0x000000000049117D<p64>
	r8 = 0x000000000041C180<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE4E8<p64>:word64] = rax
	goto l000000000041C4E4
	// succ:  l000000000041C4E4
l000000000041C546:
	rcx = 0x000000000049117D<p64>
	r8 = 0x000000000041C180<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE4E8<p64>:word64] = rax
	goto l000000000041C482
	// succ:  l000000000041C482
l000000000041C56D:
	rcx = 0x000000000049118F<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE4F0<p64>:word64] = rax
	goto l000000000041C497
	// succ:  l000000000041C497
l000000000041C58D:
	call _iob_func (retsize: 8;)
	rdx = 0x000000000049119E<p64>
	rcx = rax + 0x60<64>
	r8 = rsi
	eax = fprintf(rcx, rdx, 0<32>)
	goto l000000000041C4D8
	// succ:  l000000000041C4D8
l000000000041C5AB:
	rax = Mem0[0x00000000004AE4F0<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041C5C3
	// succ:  l000000000041C5B7 l000000000041C5C3
l000000000041C5B7:
	rdx = Mem0[rsi + 0x18<64>:word64]
	Mem0[rax:word64] = rdx
	goto l000000000041C50A
	// succ:  l000000000041C50A
l000000000041C5C3:
	rcx = 0x000000000049118F<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE4F0<p64>:word64] = rax
	goto l000000000041C5B7
	// succ:  l000000000041C5B7
fn000000000041C460_exit:


// fn000000000041C5E0
// Return size: 8
define fn000000000041C5E0
fn000000000041C5E0_entry:
	rsp = fp
	// succ:  l000000000041C5E0
l000000000041C5E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rcx + 8<64>
	call fn00000000004202A0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000041C5F9_thunk_fn000000000041C460
l000000000041C5F9_thunk_fn000000000041C460:
	call fn000000000041C460 (retsize: 0;)
	return
	// succ:  fn000000000041C5E0_exit
fn000000000041C5E0_exit:


// fn000000000041C600
// Return size: 8
define fn000000000041C600
fn000000000041C600_entry:
	rsp = fp
	// succ:  l000000000041C600
l000000000041C600:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041C8B7
	// succ:  l000000000041C611 l000000000041C8B7
l000000000041C611:
	rax = Mem0[0x00000000004AE508<p64>:word64]
	rdi = rcx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041C91B
	// succ:  l000000000041C624 l000000000041C91B
l000000000041C624:
	rbx = Mem0[rax:word64]
	rax = Mem0[0x00000000004AE500<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041C93B
	// succ:  l000000000041C637 l000000000041C93B
l000000000041C637:
	SCZO = cond(rbx - Mem0[rax:word64])
	branch Test(ULT,C) l000000000041C6C3
	// succ:  l000000000041C640 l000000000041C6C3
l000000000041C640:
	rax = Mem0[0x00000000004AE508<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041CA1B
	// succ:  l000000000041C650 l000000000041CA1B
l000000000041C650:
	SCZO = cond(Mem0[rax:word64] - 0<64>)
	branch Test(EQ,Z) l000000000041C8C2
	// succ:  l000000000041C65A l000000000041C8C2
l000000000041C65A:
	rax = Mem0[0x00000000004AE500<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041CA67
	// succ:  l000000000041C66A l000000000041CA67
l000000000041C66A:
	rbx = Mem0[rax:word64]
	rax = Mem0[0x00000000004AE510<p64>:word64]
	rbx = rbx + 0x10<64>
	SCZO = cond(rbx)
	rbx = rbx << 4<64>
	SCZO = cond(rbx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041CA87
	// succ:  l000000000041C685 l000000000041CA87
l000000000041C685:
	rcx = Mem0[rax:word64]
	rdx = rbx
	rax = realloc(rcx, rdx)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000041C8B7
	// succ:  l000000000041C69C l000000000041C8B7
l000000000041C69C:
	rax = Mem0[0x00000000004AE500<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041CAA7
	// succ:  l000000000041C6AC l000000000041CAA7
l000000000041C6AC:
	v14 = Mem0[rax:word64] + 0x10<64>
	Mem0[rax:word64] = v14
	SCZO = cond(v14)
	rax = Mem0[0x00000000004AE510<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041C8FB
	// succ:  l000000000041C6C0 l000000000041C8FB
l000000000041C6C0:
	Mem0[rax:word64] = rbx
	// succ:  l000000000041C6C3
l000000000041C6C3:
	rbx = 0x4000000000000000<64>
	// succ:  l000000000041C6D0
l000000000041C6D0:
	rax = Mem0[0x00000000004AE4F8<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041C7B3
	// succ:  l000000000041C6E0 l000000000041C7B3
l000000000041C6E0:
	rsi = Mem0[rax:word64]
	rdx = rsi + 1<64>
	Mem0[rax:word64] = rdx
	// succ:  l000000000041C6EA
l000000000041C6EA:
	SZO = cond(rdx & rbx)
	C = false
	branch Test(EQ,Z) l000000000041C7A0
	// succ:  l000000000041C6F3 l000000000041C7A0
l000000000041C6F3:
	Mem0[rax:word64] = 1<64>
	// succ:  l000000000041C700
l000000000041C700:
	rcx = Mem0[rax:word64]
	call fn000000000041C190 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000041C6D0
	// succ:  l000000000041C70D l000000000041C6D0
l000000000041C70D:
	rax = Mem0[0x00000000004AE508<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041C9FB
	// succ:  l000000000041C71D l000000000041C9FB
l000000000041C71D:
	rbx = Mem0[rax:word64]
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l000000000041C7DD
	// succ:  l000000000041C72B l000000000041C7DD
l000000000041C72B:
	rax = Mem0[0x00000000004AE510<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041C95B
	// succ:  l000000000041C73B l000000000041C95B
l000000000041C73B:
	rbx = rsi
	rbx = rbx + Mem0[rax:word64]
	SCZO = cond(rbx)
	rax = Mem0[0x00000000004AE4F8<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041C97B
	// succ:  l000000000041C751 l000000000041C97B
l000000000041C751:
	rax = Mem0[rax:word64]
	Mem0[rbx + 8<64>:word64] = rax
	rax = Mem0[0x00000000004AE510<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041C99B
	// succ:  l000000000041C768 l000000000041C99B
l000000000041C768:
	rax = Mem0[rax:word64]
	Mem0[rax + rsi:word64] = rdi
	rax = Mem0[0x00000000004AE508<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041C9BB
	// succ:  l000000000041C77F l000000000041C9BB
l000000000041C77F:
	v21 = Mem0[rax:word64] + 1<64>
	Mem0[rax:word64] = v21
	SCZO = cond(v21)
	rax = Mem0[0x00000000004AE4F8<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041C9DB
	// succ:  l000000000041C793 l000000000041C9DB
l000000000041C793:
	rax = Mem0[rax:word64]
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041C600_exit
l000000000041C7A0:
	SCZO = cond(Mem0[rax:word64] - 0<64>)
	branch Test(NE,Z) l000000000041C700
	// succ:  l000000000041C7AA l000000000041C700
l000000000041C7AA:
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000041C6E0
	// succ:  l000000000041C7B3 l000000000041C6E0
l000000000041C7B3:
	rcx = 0x00000000004911C0<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000421EA0 (retsize: 8;)
	rcx = Mem0[rax:word64]
	Mem0[0x00000000004AE4F8<p64>:word64] = rax
	rdx = rcx + 1<64>
	Mem0[rax:word64] = rdx
	goto l000000000041C6EA
	// succ:  l000000000041C6EA
l000000000041C7DD:
	rsi = rbx
	rsi = rsi << 4<64>
	SCZO = cond(rsi)
	goto l000000000041C817
	// succ:  l000000000041C817
l000000000041C7F0:
	rax = Mem0[rax:word64]
	rbp = Mem0[rax - 8<64> + rsi:word64]
	rax = Mem0[0x00000000004AE4F8<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041C897
	// succ:  l000000000041C808 l000000000041C897
l000000000041C808:
	SCZO = cond(rbp - Mem0[rax:word64])
	branch Test(ULE,CZ) l000000000041C842
	// succ:  l000000000041C80D l000000000041C842
l000000000041C80D:
	rsi = rsi - 0x10<64>
	SCZO = cond(rsi)
	rbx = rbx - 1<64>
	SCZO = cond(rbx)
	branch Test(EQ,Z) l000000000041C840
	// succ:  l000000000041C817 l000000000041C840
l000000000041C817:
	rax = Mem0[0x00000000004AE510<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000041C7F0
	// succ:  l000000000041C823 l000000000041C7F0
l000000000041C823:
	rcx = 0x0000000000491170<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE510<p64>:word64] = rax
	goto l000000000041C7F0
	// succ:  l000000000041C7F0
l000000000041C840:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	// succ:  l000000000041C842
l000000000041C842:
	rax = Mem0[0x00000000004AE508<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041CA3B
	// succ:  l000000000041C852 l000000000041CA3B
l000000000041C852:
	rax = Mem0[rax:word64]
	SCZO = cond(rax - rbx)
	branch Test(EQ,Z) l000000000041C72B
	// succ:  l000000000041C85E l000000000041C72B
l000000000041C85E:
	rax = rax - rbx
	SCZO = cond(rax)
	rax = rax << 4<64>
	SCZO = cond(rax)
	rbp = rax
	rax = Mem0[0x00000000004AE510<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041CAE7
	// succ:  l000000000041C878 l000000000041CAE7
l000000000041C878:
	rcx = Mem0[rax:word64]
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	r8 = rbp
	rbx = rbx << 4<64>
	SCZO = cond(rbx)
	rdx = rcx + rsi
	rcx = rcx + rbx
	SCZO = cond(rcx)
	rax = memmove(rcx, rdx, r8)
	goto l000000000041C72B
	// succ:  l000000000041C72B
l000000000041C897:
	rcx = 0x00000000004911C0<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE4F8<p64>:word64] = rax
	goto l000000000041C808
	// succ:  l000000000041C808
l000000000041C8B7:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041C600_exit
l000000000041C8C2:
	ecx = 0x100<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = malloc(rcx)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000041C8B7
	// succ:  l000000000041C8D4 l000000000041C8B7
l000000000041C8D4:
	rax = Mem0[0x00000000004AE500<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041CAC7
	// succ:  l000000000041C8E4 l000000000041CAC7
l000000000041C8E4:
	Mem0[rax:word64] = 0x10<64>
	rax = Mem0[0x00000000004AE510<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000041C6C0
	// succ:  l000000000041C8FB l000000000041C6C0
l000000000041C8FB:
	rcx = 0x0000000000491170<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE510<p64>:word64] = rax
	goto l000000000041C6C0
	// succ:  l000000000041C6C0
l000000000041C91B:
	rcx = 0x0000000000491160<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE508<p64>:word64] = rax
	goto l000000000041C624
	// succ:  l000000000041C624
l000000000041C93B:
	rcx = 0x00000000004911B0<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE500<p64>:word64] = rax
	goto l000000000041C637
	// succ:  l000000000041C637
l000000000041C95B:
	rcx = 0x0000000000491170<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE510<p64>:word64] = rax
	goto l000000000041C73B
	// succ:  l000000000041C73B
l000000000041C97B:
	rcx = 0x00000000004911C0<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE4F8<p64>:word64] = rax
	goto l000000000041C751
	// succ:  l000000000041C751
l000000000041C99B:
	rcx = 0x0000000000491170<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE510<p64>:word64] = rax
	goto l000000000041C768
	// succ:  l000000000041C768
l000000000041C9BB:
	rcx = 0x0000000000491160<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE508<p64>:word64] = rax
	goto l000000000041C77F
	// succ:  l000000000041C77F
l000000000041C9DB:
	rcx = 0x00000000004911C0<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE4F8<p64>:word64] = rax
	goto l000000000041C793
	// succ:  l000000000041C793
l000000000041C9FB:
	rcx = 0x0000000000491160<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE508<p64>:word64] = rax
	goto l000000000041C71D
	// succ:  l000000000041C71D
l000000000041CA1B:
	rcx = 0x0000000000491160<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE508<p64>:word64] = rax
	goto l000000000041C650
	// succ:  l000000000041C650
l000000000041CA3B:
	rcx = 0x0000000000491160<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE508<p64>:word64] = rax
	rax = Mem0[rax:word64]
	SCZO = cond(rax - rbx)
	branch Test(NE,Z) l000000000041C85E
	// succ:  l000000000041CA62 l000000000041C85E
l000000000041CA62:
	goto l000000000041C72B
	// succ:  l000000000041C72B
l000000000041CA67:
	rcx = 0x00000000004911B0<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE500<p64>:word64] = rax
	goto l000000000041C66A
	// succ:  l000000000041C66A
l000000000041CA87:
	rcx = 0x0000000000491170<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE510<p64>:word64] = rax
	goto l000000000041C685
	// succ:  l000000000041C685
l000000000041CAA7:
	rcx = 0x00000000004911B0<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE500<p64>:word64] = rax
	goto l000000000041C6AC
	// succ:  l000000000041C6AC
l000000000041CAC7:
	rcx = 0x00000000004911B0<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE500<p64>:word64] = rax
	goto l000000000041C8E4
	// succ:  l000000000041C8E4
l000000000041CAE7:
	rcx = 0x0000000000491170<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE510<p64>:word64] = rax
	goto l000000000041C878
	// succ:  l000000000041C878
fn000000000041C600_exit:


// fn000000000041CB10
// Return size: 8
define fn000000000041CB10
fn000000000041CB10_entry:
	rsp = fp
	// succ:  l000000000041CB10
l000000000041CB10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041CC00
	// succ:  l000000000041CB25 l000000000041CC00
l000000000041CB25:
	call fn00000000004208F0 (retsize: 8;)
	rax = Mem0[0x00000000004AE528<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041CC30
	// succ:  l000000000041CB3A l000000000041CC30
l000000000041CB3A:
	rbx = Mem0[rax:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000041CBA4
	// succ:  l000000000041CB42 l000000000041CBA4
l000000000041CB42:
	rcx = rbx
	call fn000000000041C600 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	Mem0[rbx + 0x1C8<64>:word64] = rax
	branch Test(EQ,Z) l000000000041CBA0
	// succ:  l000000000041CB56 l000000000041CBA0
l000000000041CB56:
	rax = Mem0[0x00000000004AE528<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041CC80
	// succ:  l000000000041CB66 l000000000041CC80
l000000000041CB66:
	rdx = Mem0[rbx + 0x1C0<64>:word64]
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rax:word64] = rdx
	branch Test(EQ,Z) l000000000041CC50
	// succ:  l000000000041CB79 l000000000041CC50
l000000000041CB79:
	Mem0[rbx + 0x1C0<64>:word64] = 0<64>
	// succ:  l000000000041CB84
l000000000041CB84:
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041CBD5
	// succ:  l000000000041CB90 l000000000041CBD5
l000000000041CB90:
	call fn00000000004202A0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041CB10_exit
l000000000041CBA0:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l000000000041CB84
	// succ:  l000000000041CB84
l000000000041CBA4:
	edx = 0x1D0<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = calloc(rcx, rdx)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000041CB84
	// succ:  l000000000041CBBB l000000000041CB84
l000000000041CBBB:
	rcx = rax
	call fn000000000041C600 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041CC70
	// succ:  l000000000041CBCC l000000000041CC70
l000000000041CBCC:
	Mem0[rbx + 0x1C8<64>:word64] = rax
	goto l000000000041CB84
	// succ:  l000000000041CB84
l000000000041CBD5:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041CB90
	// succ:  l000000000041CB90
l000000000041CC00:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041CB25
	// succ:  l000000000041CB25
l000000000041CC30:
	rcx = 0x00000000004911E9<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE528<p64>:word64] = rax
	goto l000000000041CB3A
	// succ:  l000000000041CB3A
l000000000041CC50:
	rax = Mem0[0x00000000004AE520<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041CCA0
	// succ:  l000000000041CC5C l000000000041CCA0
l000000000041CC5C:
	Mem0[rax:word64] = 0<64>
	goto l000000000041CB79
	// succ:  l000000000041CB79
l000000000041CC70:
	rcx = rbx
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	free(rcx)
	goto l000000000041CB84
	// succ:  l000000000041CB84
l000000000041CC80:
	rcx = 0x00000000004911E9<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE528<p64>:word64] = rax
	goto l000000000041CB66
	// succ:  l000000000041CB66
l000000000041CCA0:
	rcx = 0x00000000004911F9<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	dl = 8<8>
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE520<p64>:word64] = rax
	goto l000000000041CC5C
	// succ:  l000000000041CC5C
fn000000000041CB10_exit:


// fn000000000041CCC0
// Return size: 8
define fn000000000041CCC0
fn000000000041CCC0_entry:
	rsp = fp
	// succ:  l000000000041CCC0
l000000000041CCC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[0x00000000004AE548<p64>:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000041CCF0
	// succ:  l000000000041CCD1 l000000000041CCF0
l000000000041CCD1:
	eax = TlsAlloc()
	Mem0[rbx:word32] = eax
	rax = Mem0[0x00000000004AE548<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041CD14
	// succ:  l000000000041CCE5 l000000000041CD14
l000000000041CCE5:
	SCZO = cond(Mem0[rax:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000041CD35
	// succ:  l000000000041CCEA l000000000041CD35
l000000000041CCEA:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041CCC0_exit
l000000000041CCF0:
	r8 = 0x000000000041C150<p64>
	rcx = 0x0000000000491209<p64>
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rbx = rax
	Mem0[0x00000000004AE548<p64>:word64] = rax
	goto l000000000041CCD1
	// succ:  l000000000041CCD1
l000000000041CD14:
	r8 = 0x000000000041C150<p64>
	rcx = 0x0000000000491209<p64>
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE548<p64>:word64] = rax
	goto l000000000041CCE5
	// succ:  l000000000041CCE5
l000000000041CD35:
	abort()
	// succ:  l000000000041CD3B_thunk_fn000000000041CD40
l000000000041CD3B_thunk_fn000000000041CD40:
	call fn000000000041CD40 (retsize: 0;)
	return
	// succ:  fn000000000041CCC0_exit
fn000000000041CCC0_exit:


// fn000000000041CD40
// Return size: 8
define fn000000000041CD40
fn000000000041CD40_entry:
	rsp = fp
	// succ:  l000000000041CD40
l000000000041CD40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbp = rcx
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041CFE0
	// succ:  l000000000041CD5D l000000000041CFE0
l000000000041CD5D:
	call fn00000000004208F0 (retsize: 8;)
	r12 = Mem0[rbp + 0x1C8<64>:word64]
	SZO = cond(r12 & r12)
	C = false
	branch Test(NE,Z) l000000000041CE01
	// succ:  l000000000041CD72 l000000000041CE01
l000000000041CD72:
	rcx = Mem0[rbp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041CD80
	// succ:  l000000000041CD7B l000000000041CD80
l000000000041CD7B:
	free(rcx)
	// succ:  l000000000041CD80
l000000000041CD80:
	rcx = Mem0[rbp + 0x58<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041CD8E
	// succ:  l000000000041CD89 l000000000041CD8E
l000000000041CD89:
	free(rcx)
	// succ:  l000000000041CD8E
l000000000041CD8E:
	rdi = rbp + 8<64>
	rdx = rbp
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbp + 0<64>:word64] = 0<64>
	Mem0[rbp + 0x1C8<64>:word64] = 0<64>
	rdi = rdi & 0xFFFFFFFFFFFFFFF8<64>
	SZO = cond(rdi)
	C = false
	rdx = rdx - rdi
	SCZO = cond(rdx)
	edx = edx + 0x1D0<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx >>u 3<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	// succ:  l000000000041CDBC
l000000000041CDBC:
	branch rcx == 0<64> l000000000041CDBF
	// succ:  l000000000041CDBC_1 l000000000041CDBF
l000000000041CDBC_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 8<i64>
	rcx = rcx - 1<64>
	goto l000000000041CDBC
	// succ:  l000000000041CDBC
l000000000041CDBF:
	rdx = Mem0[0x00000000004AE520<p64>:word64]
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l000000000041D010
	// succ:  l000000000041CDCF l000000000041D010
l000000000041CDCF:
	rax = Mem0[rdx:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041CE90
	// succ:  l000000000041CDDB l000000000041CE90
l000000000041CDDB:
	Mem0[rax + 0x1C0<64>:word64] = rbp
	// succ:  l000000000041CDE2
l000000000041CDE2:
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041CFB0
	// succ:  l000000000041CDF2 l000000000041CFB0
l000000000041CDF2:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000041CDFC_thunk_fn00000000004202A0
l000000000041CDFC_thunk_fn00000000004202A0:
	call fn00000000004202A0 (retsize: 0;)
	return
	// succ:  fn000000000041CD40_exit
l000000000041CE01:
	rax = Mem0[0x00000000004AE508<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041D070
	// succ:  l000000000041CE11 l000000000041D070
l000000000041CE11:
	rdi = Mem0[rax:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000041CD72
	// succ:  l000000000041CE1D l000000000041CD72
l000000000041CE1D:
	rdi = rdi - 1<64>
	SCZO = cond(rdi)
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l000000000041CE3B
	// succ:  l000000000041CE3B
l000000000041CE25:
	SCZO = cond(rsi - rbx)
	branch Test(EQ,Z) l000000000041CD72
	// succ:  l000000000041CE2E l000000000041CD72
l000000000041CE2E:
	rdi = rbx - 1<64>
	// succ:  l000000000041CE32
l000000000041CE32:
	SCZO = cond(rdi - rsi)
	branch Test(ULT,C) l000000000041CD72
	// succ:  l000000000041CE3B l000000000041CD72
l000000000041CE3B:
	rax = Mem0[0x00000000004AE510<p64>:word64]
	rbx = rsi + rdi
	rbx = rbx >>u 1<64>
	SCZO = cond(rbx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041CE70
	// succ:  l000000000041CE4E l000000000041CE70
l000000000041CE4E:
	rax = Mem0[rax:word64]
	rdx = rbx
	rdx = rdx << 4<64>
	SCZO = cond(rdx)
	SCZO = cond(r12 - Mem0[(rax + 8<64>) + rdx:word64])
	branch Test(EQ,Z) l000000000041CEB0
	// succ:  l000000000041CE5F l000000000041CEB0
l000000000041CE5F:
	branch Test(ULT,C) l000000000041CE25
	// succ:  l000000000041CE61 l000000000041CE25
l000000000041CE61:
	rsi = rbx + 1<64>
	goto l000000000041CE32
	// succ:  l000000000041CE32
l000000000041CE70:
	rcx = 0x0000000000491170<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE510<p64>:word64] = rax
	goto l000000000041CE4E
	// succ:  l000000000041CE4E
l000000000041CE90:
	rbx = Mem0[0x00000000004AE528<p64>:word64]
	rax = rdx
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000041D090
	// succ:  l000000000041CEA3 l000000000041D090
l000000000041CEA3:
	Mem0[rax:word64] = rbp
	Mem0[rbx:word64] = rbp
	goto l000000000041CDE2
	// succ:  l000000000041CDE2
l000000000041CEB0:
	rax = Mem0[0x00000000004AE508<p64>:word64]
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041CF21
	// succ:  l000000000041CEC0 l000000000041CF21
l000000000041CEC0:
	r8 = Mem0[rax:word64]
	SCZO = cond(r8 - rbx)
	branch Test(UGT,CZ) l000000000041CF44
	// succ:  l000000000041CEC8 l000000000041CF44
l000000000041CEC8:
	v23 = Mem0[rax:word64] - 1<64>
	Mem0[rax:word64] = v23
	SCZO = cond(v23)
	SCZO = cond(Mem0[rax:word64] - 0<64>)
	branch Test(NE,Z) l000000000041CD72
	// succ:  l000000000041CED6 l000000000041CD72
l000000000041CED6:
	rax = Mem0[0x00000000004AE510<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041D0B0
	// succ:  l000000000041CEE6 l000000000041D0B0
l000000000041CEE6:
	rcx = Mem0[rax:word64]
	free(rcx)
	rbx = Mem0[0x00000000004AE508<p64>:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000041D0F0
	// succ:  l000000000041CEFE l000000000041D0F0
l000000000041CEFE:
	rax = Mem0[0x00000000004AE500<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041D0D0
	// succ:  l000000000041CF0E l000000000041D0D0
l000000000041CF0E:
	Mem0[rax:word64] = 0<64>
	Mem0[rbx:word64] = 0<64>
	goto l000000000041CD72
	// succ:  l000000000041CD72
l000000000041CF21:
	rcx = 0x0000000000491160<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	r8 = Mem0[rax:word64]
	Mem0[0x00000000004AE508<p64>:word64] = rax
	SCZO = cond(rbx - r8)
	branch Test(UGE,C) l000000000041CEC8
	// succ:  l000000000041CF44 l000000000041CEC8
l000000000041CF44:
	rax = Mem0[0x00000000004AE510<p64>:word64]
	r8 = r8 - rbx
	SCZO = cond(r8)
	rsi = r8
	rsi = rsi << 4<64>
	SCZO = cond(rsi)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041D113
	// succ:  l000000000041CF5E l000000000041D113
l000000000041CF5E:
	rax = Mem0[rax:word64]
	rbx = rbx << 4<64>
	SCZO = cond(rbx)
	r8 = rsi
	rdx = rax + rbx
	rcx = rax - 0x10<64> + rbx
	rax = memmove(rcx, rdx, r8)
	rax = Mem0[0x00000000004AE508<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000041CEC8
	// succ:  l000000000041CF86 l000000000041CEC8
l000000000041CF86:
	rcx = 0x0000000000491160<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE508<p64>:word64] = rax
	goto l000000000041CEC8
	// succ:  l000000000041CEC8
l000000000041CFB0:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041CDF2
	// succ:  l000000000041CDF2
l000000000041CFE0:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041CD5D
	// succ:  l000000000041CD5D
l000000000041D010:
	rcx = 0x00000000004911F9<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	dl = 8<8>
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE520<p64>:word64] = rax
	rax = Mem0[rax:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000041CDDB
	// succ:  l000000000041D034 l000000000041CDDB
l000000000041D034:
	rbx = Mem0[0x00000000004AE528<p64>:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000041D090
	// succ:  l000000000041D040 l000000000041D090
l000000000041D040:
	rax = Mem0[0x00000000004AE520<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000041CEA3
	// succ:  l000000000041D050 l000000000041CEA3
l000000000041D050:
	rcx = 0x00000000004911F9<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE520<p64>:word64] = rax
	goto l000000000041CEA3
	// succ:  l000000000041CEA3
l000000000041D070:
	rcx = 0x0000000000491160<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE508<p64>:word64] = rax
	goto l000000000041CE11
	// succ:  l000000000041CE11
l000000000041D090:
	rcx = 0x00000000004911E9<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rbx = rax
	Mem0[0x00000000004AE528<p64>:word64] = rax
	goto l000000000041D040
	// succ:  l000000000041D040
l000000000041D0B0:
	rcx = 0x0000000000491170<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE510<p64>:word64] = rax
	goto l000000000041CEE6
	// succ:  l000000000041CEE6
l000000000041D0D0:
	rcx = 0x00000000004911B0<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE500<p64>:word64] = rax
	goto l000000000041CF0E
	// succ:  l000000000041CF0E
l000000000041D0F0:
	rcx = 0x0000000000491160<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rbx = rax
	Mem0[0x00000000004AE508<p64>:word64] = rax
	goto l000000000041CEFE
	// succ:  l000000000041CEFE
l000000000041D113:
	rcx = 0x0000000000491170<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE510<p64>:word64] = rax
	goto l000000000041CF5E
	// succ:  l000000000041CF5E
fn000000000041CD40_exit:


// fn000000000041D140
// Return size: 8
define fn000000000041D140
fn000000000041D140_entry:
	rsp = fp
	// succ:  l000000000041D140
l000000000041D140:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx:word32] - 1<32>)
	branch Test(EQ,Z) l000000000041D19B
	// succ:  l000000000041D14D l000000000041D19B
l000000000041D14D:
	rbx = rcx
	call fn000000000041C2E0 (retsize: 8;)
	rbp = rax + 8<64>
	rdi = rax
	rcx = rbp
	call fn00000000004208F0 (retsize: 8;)
	esi = Mem0[rbx:word32]
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l000000000041D1B0
	// succ:  l000000000041D16A l000000000041D1B0
l000000000041D16A:
	SCZO = cond(esi - 1<32>)
	branch Test(EQ,Z) l000000000041D18B
	// succ:  l000000000041D16F l000000000041D18B
l000000000041D16F:
	call _iob_func (retsize: 8;)
	rdx = 0x000000000049121C<p64>
	rcx = rax + 0x60<64>
	r9d = esi
	r9 = CONVERT(r9d, word32, uint64)
	r8 = rbx
	eax = fprintf(rcx, rdx, 0<32>)
	// succ:  l000000000041D18B
l000000000041D18B:
	rcx = rbp
	call fn00000000004202A0 (retsize: 8;)
	rcx = rdi
	call fn000000000041C460 (retsize: 8;)
	// succ:  l000000000041D19B
l000000000041D19B:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041D140_exit
l000000000041D1B0:
	call fn000000000041CCC0 (retsize: 8;)
	rcx = rbp
	Mem0[rbx:word32] = 1<32>
	call fn00000000004202A0 (retsize: 8;)
	rcx = rdi
	call fn000000000041C460 (retsize: 8;)
	goto l000000000041D19B
	// succ:  l000000000041D19B
fn000000000041D140_exit:


// fn000000000041D1D0
// Return size: 8
define fn000000000041D1D0
fn000000000041D1D0_entry:
	rsp = fp
	// succ:  l000000000041D1D0
l000000000041D1D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rcx = Mem0[0x00000000004AE550<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041D310
	// succ:  l000000000041D1E8 l000000000041D310
l000000000041D1E8:
	call fn000000000041D140 (retsize: 8;)
	rax = Mem0[0x00000000004AE548<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041D333
	// succ:  l000000000041D1FD l000000000041D333
l000000000041D1FD:
	ecx = Mem0[rax:word32]
	rcx = CONVERT(ecx, word32, uint64)
	rax = TlsGetValue(rcx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041D213
	// succ:  l000000000041D20A l000000000041D213
l000000000041D20A:
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041D1D0_exit
l000000000041D213:
	call fn000000000041CB10 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000041D37B
	// succ:  l000000000041D224 l000000000041D37B
l000000000041D224:
	SCZO = cond(Mem0[0x00000000004B1050<p64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000041D37B
	// succ:  l000000000041D232 l000000000041D37B
l000000000041D232:
	Mem0[rax + 0x44<64>:word32] = 1<32>
	eax = GetCurrentThreadId()
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0x68<64>:word32] = eax
	rax = CreateEventA(rcx, rdx, r8, r9)
	rsi = GetCurrentProcess
	Mem0[rbx + 0x30<64>:word64] = rax
	Mem0[rbx + 0x38<64>:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rbx + 0x60<64>:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rbx + 0xB0<64>:word32] = 0<32>
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	eax = GetCurrentProcess()
	rbp = rax
	eax = GetCurrentThread()
	rdi = rax
	eax = GetCurrentProcess()
	Mem0[rsp + 0x30<64>:word32] = 2<32>
	rcx = rax
	Mem0[rsp + 0x28<64>:word32] = 0<32>
	Mem0[rsp + 0x20<64>:word32] = 0<32>
	r9 = rbx + 0x28<64>
	r8 = rbp
	rdx = rdi
	eax = DuplicateHandle(rcx, rdx, r8, r9, Mem0[rsp + 32<i64>:DWORD], Mem0[rsp + 40<i64>:BOOL], Mem0[rsp + 48<i64>:DWORD])
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041D382
	// succ:  l000000000041D2C5 l000000000041D382
l000000000041D2C5:
	rcx = Mem0[rbx + 0x28<64>:word64]
	eax = GetThreadPriority(rcx)
	Mem0[rbx + 0xB8<64>:word32] = eax
	eax = CONVERT(Mem0[rbx + 0x40<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 0xB4<64>:word32] = 0<32>
	eax = eax & 0xFFFFFFCF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax | 0x10<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x40<64>:byte] = al
	rax = Mem0[0x00000000004AE548<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041D357
	// succ:  l000000000041D2F8 l000000000041D357
l000000000041D2F8:
	rdx = rbx
	ecx = Mem0[rax:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = TlsSetValue(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041D382
	// succ:  l000000000041D307 l000000000041D382
l000000000041D307:
	rax = rbx
	goto l000000000041D20A
	// succ:  l000000000041D20A
l000000000041D310:
	rcx = 0x000000000049122C<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE550<p64>:word64] = rax
	goto l000000000041D1E8
	// succ:  l000000000041D1E8
l000000000041D333:
	r8 = 0x000000000041C150<p64>
	rcx = 0x0000000000491209<p64>
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE548<p64>:word64] = rax
	goto l000000000041D1FD
	// succ:  l000000000041D1FD
l000000000041D357:
	r8 = 0x000000000041C150<p64>
	rcx = 0x0000000000491209<p64>
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE548<p64>:word64] = rax
	goto l000000000041D2F8
	// succ:  l000000000041D2F8
l000000000041D37B:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041D20A
	// succ:  l000000000041D20A
l000000000041D382:
	abort()
	// succ:  l000000000041D388_thunk_fn000000000041D390
l000000000041D388_thunk_fn000000000041D390:
	call fn000000000041D390 (retsize: 0;)
	return
	// succ:  fn000000000041D1D0_exit
fn000000000041D1D0_exit:


// fn000000000041D390
// Return size: 8
define fn000000000041D390
fn000000000041D390_entry:
	rsp = fp
	// succ:  l000000000041D390
l000000000041D390:
	rcx = 0x0000000000491244<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041D39F_thunk_fn0000000000421EA0
l000000000041D39F_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn000000000041D390_exit
fn000000000041D390_exit:


// fn000000000041D3B0
// Return size: 8
define fn000000000041D3B0
fn000000000041D3B0_entry:
	rsp = fp
	// succ:  l000000000041D3B0
l000000000041D3B0:
	rcx = 0x000000000049125C<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041D3BF_thunk_fn0000000000421EA0
l000000000041D3BF_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn000000000041D3B0_exit
fn000000000041D3B0_exit:


// fn000000000041D3D0
// Return size: 8
define fn000000000041D3D0
fn000000000041D3D0_entry:
	rsp = fp
	// succ:  l000000000041D3D0
l000000000041D3D0:
	rcx = 0x0000000000491276<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041D3DF_thunk_fn0000000000421EA0
l000000000041D3DF_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn000000000041D3D0_exit
fn000000000041D3D0_exit:


// fn000000000041D3F0
// Return size: 8
define fn000000000041D3F0
fn000000000041D3F0_entry:
	rsp = fp
	// succ:  l000000000041D3F0
l000000000041D3F0:
	rcx = 0x000000000049122C<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041D3FF_thunk_fn0000000000421EA0
l000000000041D3FF_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn000000000041D3F0_exit
fn000000000041D3F0_exit:


// fn000000000041D410
// Return size: 8
define fn000000000041D410
fn000000000041D410_entry:
	rsp = fp
	// succ:  l000000000041D410
l000000000041D410:
	r8 = 0x000000000041C150<p64>
	rcx = 0x0000000000491209<p64>
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041D423_thunk_fn0000000000421EA0
l000000000041D423_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn000000000041D410_exit
fn000000000041D410_exit:


// fn000000000041D430
// Return size: 8
define fn000000000041D430
fn000000000041D430_entry:
	rsp = fp
	// succ:  l000000000041D430
l000000000041D430:
	r8 = 0x000000000041C160<p64>
	rcx = 0x000000000049128C<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041D443_thunk_fn0000000000421EA0
l000000000041D443_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn000000000041D430_exit
fn000000000041D430_exit:


// fn000000000041D450
// Return size: 8
define fn000000000041D450
fn000000000041D450_entry:
	rsp = fp
	// succ:  l000000000041D450
l000000000041D450:
	rcx = 0x00000000004912A4<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041D45F_thunk_fn0000000000421EA0
l000000000041D45F_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn000000000041D450_exit
fn000000000041D450_exit:


// fn000000000041D470
// Return size: 8
define fn000000000041D470
fn000000000041D470_entry:
	rsp = fp
	// succ:  l000000000041D470
l000000000041D470:
	rcx = 0x00000000004912BB<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041D47F_thunk_fn0000000000421EA0
l000000000041D47F_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn000000000041D470_exit
fn000000000041D470_exit:


// fn000000000041D490
// Return size: 8
define fn000000000041D490
fn000000000041D490_entry:
	rsp = fp
	// succ:  l000000000041D490
l000000000041D490:
	rcx = 0x00000000004911E9<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041D49F_thunk_fn0000000000421EA0
l000000000041D49F_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn000000000041D490_exit
fn000000000041D490_exit:


// fn000000000041D4B0
// Return size: 8
define fn000000000041D4B0
fn000000000041D4B0_entry:
	rsp = fp
	// succ:  l000000000041D4B0
l000000000041D4B0:
	rcx = 0x00000000004911F9<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041D4BF_thunk_fn0000000000421EA0
l000000000041D4BF_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn000000000041D4B0_exit
fn000000000041D4B0_exit:


// fn000000000041D4D0
// Return size: 8
define fn000000000041D4D0
fn000000000041D4D0_entry:
	rsp = fp
	// succ:  l000000000041D4D0
l000000000041D4D0:
	r8 = 0x000000000041C170<p64>
	rcx = 0x00000000004911D3<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041D4E3_thunk_fn0000000000421EA0
l000000000041D4E3_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn000000000041D4D0_exit
fn000000000041D4D0_exit:


// fn000000000041D4F0
// Return size: 8
define fn000000000041D4F0
fn000000000041D4F0_entry:
	rsp = fp
	// succ:  l000000000041D4F0
l000000000041D4F0:
	rcx = 0x0000000000491170<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041D4FF_thunk_fn0000000000421EA0
l000000000041D4FF_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn000000000041D4F0_exit
fn000000000041D4F0_exit:


// fn000000000041D510
// Return size: 8
define fn000000000041D510
fn000000000041D510_entry:
	rsp = fp
	// succ:  l000000000041D510
l000000000041D510:
	rcx = 0x0000000000491160<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041D51F_thunk_fn0000000000421EA0
l000000000041D51F_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn000000000041D510_exit
fn000000000041D510_exit:


// fn000000000041D530
// Return size: 8
define fn000000000041D530
fn000000000041D530_entry:
	rsp = fp
	// succ:  l000000000041D530
l000000000041D530:
	rcx = 0x00000000004911B0<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041D53F_thunk_fn0000000000421EA0
l000000000041D53F_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn000000000041D530_exit
fn000000000041D530_exit:


// fn000000000041D550
// Return size: 8
define fn000000000041D550
fn000000000041D550_entry:
	rsp = fp
	// succ:  l000000000041D550
l000000000041D550:
	rcx = 0x00000000004911C0<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041D55F_thunk_fn0000000000421EA0
l000000000041D55F_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn000000000041D550_exit
fn000000000041D550_exit:


// fn000000000041D570
// Return size: 8
define fn000000000041D570
fn000000000041D570_entry:
	rsp = fp
	// succ:  l000000000041D570
l000000000041D570:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041D5B3
	// succ:  l000000000041D57A l000000000041D5B3
l000000000041D57A:
	rbx = rcx
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041D5C0
	// succ:  l000000000041D589 l000000000041D5C0
l000000000041D589:
	call fn00000000004208F0 (retsize: 8;)
	rcx = rbx
	call fn000000000041C190 (retsize: 8;)
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	rbx = rax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041D5E4
	// succ:  l000000000041D5A5 l000000000041D5E4
l000000000041D5A5:
	call fn00000000004202A0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041D570_exit
l000000000041D5B3:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041D570_exit
l000000000041D5C0:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041D589
	// succ:  l000000000041D589
l000000000041D5E4:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041D5A5
	// succ:  l000000000041D5A5
fn000000000041D570_exit:


// fn000000000041D610
// Return size: 8
define fn000000000041D610
fn000000000041D610_entry:
	rsp = fp
	// succ:  l000000000041D610
l000000000041D610:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	call fn000000000041D570 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rsi = rax
	branch Test(NE,Z) l000000000041D640
	// succ:  l000000000041D62B l000000000041D640
l000000000041D62B:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041D610_exit
l000000000041D640:
	rbp = rax + 0x60<64>
	r13d = 0x100<32>
	r13 = CONVERT(r13d, word32, uint64)
	// succ:  l000000000041D64A
l000000000041D64A:
	rcx = rbp
	call fn0000000000422260 (retsize: 8;)
	eax = Mem0[rsi + 0x48<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041D7D0
	// succ:  l000000000041D65D l000000000041D7D0
l000000000041D65D:
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	// succ:  l000000000041D662
l000000000041D662:
	rax = Mem0[rsi + 0x50<64>:word64]
	ebx = edi
	rbx = CONVERT(ebx, word32, uint64)
	r14 = Mem0[rax + rbx * 8<64>:word64]
	rax = Mem0[rsi + 0x58<64>:word64]
	SCZO = cond(Mem0[rax + rbx:byte] - 0<8>)
	branch Test(EQ,Z) l000000000041D701
	// succ:  l000000000041D67A l000000000041D701
l000000000041D67A:
	rcx = Mem0[0x00000000004AE540<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041D750
	// succ:  l000000000041D68A l000000000041D750
l000000000041D68A:
	call fn0000000000422BF0 (retsize: 8;)
	rax = Mem0[0x00000000004AE568<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041D730
	// succ:  l000000000041D69F l000000000041D730
l000000000041D69F:
	rax = Mem0[rax:word64]
	SCZO = cond(Mem0[rax + rbx * 8<64>:word64] - 1<64>)
	rax = Mem0[rsi + 0x50<64>:word64]
	Mem0[rax + rbx * 8<64>:word64] = 0<64>
	rax = Mem0[rsi + 0x58<64>:word64]
	Mem0[rax + rbx:byte] = 0<8>
	branch Test(ULE,CZ) l000000000041D6EC
	// succ:  l000000000041D6BD l000000000041D6EC
l000000000041D6BD:
	rcx = rbp
	call fn0000000000422310 (retsize: 8;)
	rax = Mem0[0x00000000004AE568<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041D7B0
	// succ:  l000000000041D6D5 l000000000041D7B0
l000000000041D6D5:
	rax = Mem0[rax:word64]
	rcx = r14
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	call Mem0[rax + rbx * 8<64>:word64] (retsize: 8;)
	rcx = rbp
	call fn0000000000422260 (retsize: 8;)
	// succ:  l000000000041D6EC
l000000000041D6EC:
	rcx = Mem0[0x00000000004AE540<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041D780
	// succ:  l000000000041D6FC l000000000041D780
l000000000041D6FC:
	call fn0000000000422EA0 (retsize: 8;)
	rsp = rsp + 8<64>
	// succ:  l000000000041D701
l000000000041D701:
	edi = edi + 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	SCZO = cond(edi - Mem0[rsi + 0x48<64>:word32])
	branch Test(ULT,C) l000000000041D662
	// succ:  l000000000041D70D l000000000041D662
l000000000041D70D:
	rcx = rbp
	call fn0000000000422310 (retsize: 8;)
	SZO = cond(r12d & r12d)
	C = false
	branch Test(EQ,Z) l000000000041D62B
	// succ:  l000000000041D71E l000000000041D62B
l000000000041D71E:
	r13d = r13d - 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	branch Test(NE,Z) l000000000041D64A
	// succ:  l000000000041D728 l000000000041D64A
l000000000041D728:
	goto l000000000041D62B
	// succ:  l000000000041D62B
l000000000041D730:
	rcx = 0x0000000000491244<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE568<p64>:word64] = rax
	goto l000000000041D69F
	// succ:  l000000000041D69F
l000000000041D750:
	rcx = 0x000000000049128C<p64>
	r8 = 0x000000000041C160<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE540<p64>:word64] = rax
	goto l000000000041D68A
	// succ:  l000000000041D68A
l000000000041D780:
	rcx = 0x000000000049128C<p64>
	r8 = 0x000000000041C160<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE540<p64>:word64] = rax
	goto l000000000041D6FC
	// succ:  l000000000041D6FC
l000000000041D7B0:
	rcx = 0x0000000000491244<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE568<p64>:word64] = rax
	goto l000000000041D6D5
	// succ:  l000000000041D6D5
l000000000041D7D0:
	rcx = rbp
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000041D7E1_thunk_fn0000000000422310
l000000000041D7E1_thunk_fn0000000000422310:
	call fn0000000000422310 (retsize: 0;)
	return
	// succ:  fn000000000041D610_exit
fn000000000041D610_exit:


// fn000000000041D7F0
// Return size: 8
define fn000000000041D7F0
fn000000000041D7F0_entry:
	rsp = fp
	// succ:  l000000000041D7F0
l000000000041D7F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(edx - 3<32>)
	branch Test(EQ,Z) l000000000041D810
	// succ:  l000000000041D7FB l000000000041D810
l000000000041D7FB:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041D7F0_exit
l000000000041D810:
	rax = Mem0[0x00000000004AE548<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041D970
	// succ:  l000000000041D820 l000000000041D970
l000000000041D820:
	ecx = Mem0[rax:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000041D7FB
	// succ:  l000000000041D827 l000000000041D7FB
l000000000041D827:
	rax = TlsGetValue(rcx)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000041D7FB
	// succ:  l000000000041D835 l000000000041D7FB
l000000000041D835:
	SZO = cond(Mem0[rax + 0x40<64>:byte] & 0x30<8>)
	C = false
	branch Test(EQ,Z) l000000000041D8C1
	// succ:  l000000000041D83F l000000000041D8C1
l000000000041D83F:
	rcx = Mem0[rax + 0x1C8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000041D960
	// succ:  l000000000041D84F l000000000041D960
l000000000041D84F:
	rcx = Mem0[rbx + 0x28<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041D87C
	// succ:  l000000000041D858 l000000000041D87C
l000000000041D858:
	rsi = CloseHandle
	eax = CloseHandle(rcx)
	rcx = Mem0[rbx + 0x30<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041D86C
	// succ:  l000000000041D86A l000000000041D86C
l000000000041D86A:
	eax = CloseHandle(rcx)
	// succ:  l000000000041D86C
l000000000041D86C:
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	// succ:  l000000000041D874
l000000000041D874:
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	// succ:  l000000000041D87C
l000000000041D87C:
	rcx = rbx + 0x38<64>
	call fn0000000000420B50 (retsize: 8;)
	SCZO = cond(Mem0[rbx + 0x1C0<64>:word64] - 0<64>)
	Mem0[rbx + 0x60<64>:word64] = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(EQ,Z) l000000000041D9B5
	// succ:  l000000000041D89B l000000000041D9B5
l000000000041D89B:
	rax = Mem0[0x00000000004AE548<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041D991
	// succ:  l000000000041D8AB l000000000041D991
l000000000041D8AB:
	ecx = Mem0[rax:word32]
	rcx = CONVERT(ecx, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = TlsSetValue(rcx, rdx)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041D7F0_exit
l000000000041D8C1:
	eax = Mem0[rax + 0xB4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = Mem0[rbx + 0x30<64>:word64]
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000041D920
	// succ:  l000000000041D8CF l000000000041D920
l000000000041D8CF:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041D8DA
	// succ:  l000000000041D8D4 l000000000041D8DA
l000000000041D8D4:
	eax = CloseHandle(rcx)
	// succ:  l000000000041D8DA
l000000000041D8DA:
	rcx = Mem0[rbx + 0x1C8<64>:word64]
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0xB4<64>:word32] = 1<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000041D950
	// succ:  l000000000041D8F8 l000000000041D950
l000000000041D8F8:
	SZO = cond(Mem0[rbx + 0x44<64>:byte] & 4<8>)
	C = false
	branch Test(EQ,Z) l000000000041D933
	// succ:  l000000000041D8FE l000000000041D933
l000000000041D8FE:
	rcx = Mem0[rbx + 0x28<64>:word64]
	Mem0[rbx:word32] = 0xDEADBEEF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041D874
	// succ:  l000000000041D911 l000000000041D874
l000000000041D911:
	eax = CloseHandle(rcx)
	goto l000000000041D874
	// succ:  l000000000041D874
l000000000041D920:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041D92B
	// succ:  l000000000041D925 l000000000041D92B
l000000000041D925:
	eax = CloseHandle(rcx)
	// succ:  l000000000041D92B
l000000000041D92B:
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	// succ:  l000000000041D933
l000000000041D933:
	rcx = rbx + 0x38<64>
	call fn0000000000420B50 (retsize: 8;)
	Mem0[rbx + 0x60<64>:word64] = 0xFFFFFFFFFFFFFFFF<64>
	goto l000000000041D7FB
	// succ:  l000000000041D7FB
l000000000041D950:
	call fn000000000041D610 (retsize: 8;)
	goto l000000000041D8F8
	// succ:  l000000000041D8F8
l000000000041D960:
	call fn000000000041D610 (retsize: 8;)
	goto l000000000041D84F
	// succ:  l000000000041D84F
l000000000041D970:
	r8 = 0x000000000041C150<p64>
	rcx = 0x0000000000491209<p64>
	dl = 4<8>
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE548<p64>:word64] = rax
	goto l000000000041D820
	// succ:  l000000000041D820
l000000000041D991:
	r8 = 0x000000000041C150<p64>
	rcx = 0x0000000000491209<p64>
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE548<p64>:word64] = rax
	goto l000000000041D8AB
	// succ:  l000000000041D8AB
l000000000041D9B5:
	rcx = rbx
	call fn000000000041CD40 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	goto l000000000041D89B
	// succ:  l000000000041D89B
fn000000000041D7F0_exit:


// fn000000000041D9D0
// Return size: 0
define fn000000000041D9D0
fn000000000041D9D0_entry:
	rsp = fp
	// succ:  l000000000041D9D0
l000000000041D9D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x30<64>:word64] = rcx
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041DB2D
	// succ:  l000000000041D9F1 l000000000041DB2D
l000000000041D9F1:
	call fn00000000004208F0 (retsize: 8;)
	rax = Mem0[rbp + 0x30<64>:word64]
	rbx = rax + 0x38<64>
	rcx = rbx
	call fn00000000004208F0 (retsize: 8;)
	rcx = Mem0[0x00000000004AE550<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041DBE7
	// succ:  l000000000041DA16 l000000000041DBE7
l000000000041DA16:
	call fn000000000041D140 (retsize: 8;)
	rax = Mem0[0x00000000004AE548<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041DBC3
	// succ:  l000000000041DA2B l000000000041DBC3
l000000000041DA2B:
	rdx = Mem0[rbp + 0x30<64>:word64]
	ecx = Mem0[rax:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = TlsSetValue(rcx, rdx)
	eax = GetCurrentThreadId()
	rsi = Mem0[rbp + 0x30<64>:word64]
	rcx = rbx
	Mem0[rsi + 0x68<64>:word32] = eax
	call fn00000000004202A0 (retsize: 8;)
	rax = Mem0[rbp + 0x30<64>:word64]
	rdx = rbp
	rcx = rax + 0xC0<64>
	call setjmp (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041DB54
	// succ:  l000000000041DA67 l000000000041DB54
l000000000041DA67:
	rax = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041DC0A
	// succ:  l000000000041DA77 l000000000041DC0A
l000000000041DA77:
	rcx = rax
	call fn00000000004208F0 (retsize: 8;)
	// succ:  l000000000041DA7F
l000000000041DA7F:
	rax = Mem0[rbp + 0x30<64>:word64]
	rbx = rax + 0x38<64>
	rcx = rbx
	call fn00000000004208F0 (retsize: 8;)
	rax = Mem0[rbp + 0x30<64>:word64]
	rcx = Mem0[rax + 0x30<64>:word64]
	rsi = Mem0[rax + 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041DAA6
	// succ:  l000000000041DAA0 l000000000041DAA6
l000000000041DAA0:
	eax = CloseHandle(rcx)
	// succ:  l000000000041DAA6
l000000000041DAA6:
	rax = Mem0[rbp + 0x30<64>:word64]
	SCZO = cond(Mem0[rax + 0x28<64>:word64] - 0<64>)
	Mem0[rax + 0x30<64>:word64] = 0<64>
	branch Test(EQ,Z) l000000000041DC5C
	// succ:  l000000000041DABD l000000000041DC5C
l000000000041DABD:
	rcx = rbx
	call fn00000000004202A0 (retsize: 8;)
	rcx = rbx
	call fn0000000000420B50 (retsize: 8;)
	rax = Mem0[rbp + 0x30<64>:word64]
	Mem0[rax + 0xB4<64>:word32] = 1<32>
	// succ:  l000000000041DADB
l000000000041DADB:
	r12 = 0x000000000041C170<p64>
	rdi = 0x00000000004911D3<p64>
	rbx = Sleep
	goto l000000000041DAF6
	// succ:  l000000000041DAF6
l000000000041DAF2:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call rbx (retsize: 8;)
	// succ:  l000000000041DAF6
l000000000041DAF6:
	rax = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000041DB19
	// succ:  l000000000041DB02 l000000000041DB19
l000000000041DB02:
	r8 = r12
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE518<p64>:word64] = rax
	// succ:  l000000000041DB19
l000000000041DB19:
	rcx = rax
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041DAF2
	// succ:  l000000000041DB25 l000000000041DAF2
l000000000041DB25:
	ecx = esi
	rcx = CONVERT(ecx, word32, uint64)
	call endthreadex (retsize: 8;)
	// succ:  l000000000041DB2D
l000000000041DB2D:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041D9F1
	// succ:  l000000000041D9F1
l000000000041DB54:
	rax = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041DC38
	// succ:  l000000000041DB64 l000000000041DC38
l000000000041DB64:
	rcx = rax
	call fn00000000004202A0 (retsize: 8;)
	rax = Mem0[rbp + 0x30<64>:word64]
	rax = Mem0[rax + 0x10<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041DC2E
	// succ:  l000000000041DB7D l000000000041DC2E
l000000000041DB7D:
	rdi = Mem0[rbp + 0x30<64>:word64]
	rcx = Mem0[rdi + 8<64>:word64]
	call rax (retsize: 8;)
	rbx = rax
	// succ:  l000000000041DB8A
l000000000041DB8A:
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041DCCD
	// succ:  l000000000041DB9C l000000000041DCCD
l000000000041DB9C:
	call fn00000000004208F0 (retsize: 8;)
	rax = Mem0[rbp + 0x30<64>:word64]
	rcx = Mem0[rax + 0x1C8<64>:word64]
	Mem0[rax + 8<64>:word64] = rbx
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041DA7F
	// succ:  l000000000041DBB9 l000000000041DA7F
l000000000041DBB9:
	call fn000000000041D610 (retsize: 8;)
	goto l000000000041DA7F
	// succ:  l000000000041DA7F
l000000000041DBC3:
	r8 = 0x000000000041C150<p64>
	rcx = 0x0000000000491209<p64>
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE548<p64>:word64] = rax
	goto l000000000041DA2B
	// succ:  l000000000041DA2B
l000000000041DBE7:
	rcx = 0x000000000049122C<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE550<p64>:word64] = rax
	goto l000000000041DA16
	// succ:  l000000000041DA16
l000000000041DC0A:
	r8 = 0x000000000041C170<p64>
	rcx = 0x00000000004911D3<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041DA77
	// succ:  l000000000041DA77
l000000000041DC2E:
	ebx = 0x80<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000041DB8A
	// succ:  l000000000041DB8A
l000000000041DC38:
	r8 = 0x000000000041C170<p64>
	rcx = 0x00000000004911D3<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041DB64
	// succ:  l000000000041DB64
l000000000041DC5C:
	rax = Mem0[rbp + 0x30<64>:word64]
	rcx = rbx
	Mem0[rax:word32] = 0xDEADBEEF<32>
	call fn00000000004202A0 (retsize: 8;)
	rcx = rbx
	call fn0000000000420B50 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x30<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000041DC93
	// succ:  l000000000041DC7D l000000000041DC93
l000000000041DC7D:
	rax = Mem0[rbp + 0x30<64>:word64]
	SCZO = cond(Mem0[rax + 0x1C0<64>:word64] - 0<64>)
	branch Test(NE,Z) l000000000041DC93
	// succ:  l000000000041DC8B l000000000041DC93
l000000000041DC8B:
	rcx = rax
	call fn000000000041CD40 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	// succ:  l000000000041DC93
l000000000041DC93:
	rax = Mem0[0x00000000004AE548<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000041DCBE
	// succ:  l000000000041DC9F l000000000041DCBE
l000000000041DC9F:
	r8 = 0x000000000041C150<p64>
	rcx = 0x0000000000491209<p64>
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE548<p64>:word64] = rax
	// succ:  l000000000041DCBE
l000000000041DCBE:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = Mem0[rax:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = TlsSetValue(rcx, rdx)
	goto l000000000041DADB
	// succ:  l000000000041DADB
l000000000041DCCD:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041DB9C
	// succ:  l000000000041DB9C
fn000000000041D9D0_exit:


// fn000000000041DD00
// Return size: 8
define fn000000000041DD00
fn000000000041DD00_entry:
	rsp = fp
	// succ:  l000000000041DD00
l000000000041DD00:
	Mem0[0x00000000004AE570<p64>:word32] = ecx
	return
	// succ:  fn000000000041DD00_exit
fn000000000041DD00_exit:


// fn000000000041DD10
// Return size: 8
define fn000000000041DD10
fn000000000041DD10_entry:
	rsp = fp
	// succ:  l000000000041DD10
l000000000041DD10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = Mem0[0x00000000004AE570<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x60<64>:word64] = rcx
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041DD80
	// succ:  l000000000041DD27 l000000000041DD80
l000000000041DD27:
	rax = Mem0[rsp + 0x60<64>:word64]
	rbx = rdx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041DD90
	// succ:  l000000000041DD34 l000000000041DD90
l000000000041DD34:
	rcx = Mem0[rsp + 0x60<64>:word64]
	call fn000000000041D570 (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	rbp = Mem0[rax + 0x28<64>:word64]
	call fn000000000041D570 (retsize: 8;)
	edi = Mem0[rax:word32]
	rdi = CONVERT(edi, word32, uint64)
	eax = GetCurrentThreadId()
	rcx = Mem0[rsp + 0x60<64>:word64]
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	call fn000000000041D570 (retsize: 8;)
	rcx = 0x00000000004912DD<p64>
	rdx = rax
	Mem0[rsp + 0x28<64>:word64] = rbx
	Mem0[rsp + 0x20<64>:word64] = rbp
	r9d = edi
	r9 = CONVERT(r9d, word32, uint64)
	r8d = esi
	r8 = CONVERT(r8d, word32, uint64)
	eax = printf(rcx, 0<32>)
	// succ:  l000000000041DD80
l000000000041DD80:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041DD10_exit
l000000000041DD90:
	eax = GetCurrentThreadId()
	rcx = 0x00000000004912D2<p64>
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	r9 = rbx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	eax = printf(rcx, 0<32>)
	return
	// succ:  fn000000000041DD10_exit
fn000000000041DD10_exit:


// fn000000000041DDC0
// Return size: 8
define fn000000000041DDC0
fn000000000041DDC0_entry:
	rsp = fp
	// succ:  l000000000041DDC0
l000000000041DDC0:
	rcx = 0x000000000049118F<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041DDCF_thunk_fn0000000000421EA0
l000000000041DDCF_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn000000000041DDC0_exit
fn000000000041DDC0_exit:


// fn000000000041DDE0
// Return size: 8
define fn000000000041DDE0
fn000000000041DDE0_entry:
	rsp = fp
	// succ:  l000000000041DDE0
l000000000041DDE0:
	r8 = 0x000000000041C180<p64>
	rcx = 0x000000000049117D<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041DDF3_thunk_fn0000000000421EA0
l000000000041DDF3_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn000000000041DDE0_exit
fn000000000041DDE0_exit:


// fn000000000041DE00
// Return size: 8
define fn000000000041DE00
fn000000000041DE00_entry:
	rsp = fp
	// succ:  l000000000041DE00
l000000000041DE00:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000041DE00_exit
fn000000000041DE00_exit:


// fn000000000041DE10
// Return size: 8
define fn000000000041DE10
fn000000000041DE10_entry:
	rsp = fp
	// succ:  l000000000041DE10
l000000000041DE10:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = GetCurrentProcess()
	rdx = rsp + 0x20<64>
	rcx = rax
	r8 = rsp + 0x28<64>
	eax = GetProcessAffinityMask(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(EQ,Z) l000000000041DE59
	// succ:  l000000000041DE36 l000000000041DE59
l000000000041DE36:
	rdx = Mem0[rsp + 0x20<64>:word64]
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l000000000041DE59
	// succ:  l000000000041DE40 l000000000041DE59
l000000000041DE40:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000041DE42
l000000000041DE42:
	rcx = rdx
	ecx = ecx & 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	eax = eax + ecx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rdx = rdx >>u 1<64>
	SCZO = cond(rdx)
	branch Test(NE,Z) l000000000041DE42
	// succ:  l000000000041DE4F l000000000041DE42
l000000000041DE4F:
	SZO = cond(eax & eax)
	C = false
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(EQ,Z) l000000000041DE59
	// succ:  l000000000041DE56_1 l000000000041DE59
l000000000041DE56_1:
	ecx = eax
	// succ:  l000000000041DE59
l000000000041DE59:
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000041DE10_exit
fn000000000041DE10_exit:


// fn000000000041DE60
// Return size: 8
define fn000000000041DE60
fn000000000041DE60_entry:
	rsp = fp
	// succ:  l000000000041DE60
l000000000041DE60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rbp = GetCurrentProcess
	SZO = cond(ecx & ecx)
	C = false
	edi = ecx
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l000000000041DE7B
	// succ:  l000000000041DE78_1 l000000000041DE7B
l000000000041DE78_1:
	edi = eax
	// succ:  l000000000041DE7B
l000000000041DE7B:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	call rbp (retsize: 8;)
	rdx = rsp + 0x20<64>
	r8 = rsp + 0x28<64>
	rcx = rax
	eax = GetProcessAffinityMask(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041DED2
	// succ:  l000000000041DE96 l000000000041DED2
l000000000041DE96:
	r8 = Mem0[rsp + 0x20<64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l000000000041DEC4
	// succ:  l000000000041DEA2 l000000000041DEC4
l000000000041DEA2:
	rbx = rbx + rbx
	SCZO = cond(rbx)
	SZO = cond(r8b & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000041DEB6
	// succ:  l000000000041DEAB l000000000041DEB6
l000000000041DEAB:
	SCZO = cond(esi - edi)
	branch Test(GE,SO) l000000000041DEB6
	// succ:  l000000000041DEAF l000000000041DEB6
l000000000041DEAF:
	rbx = rbx | 1<64>
	SZO = cond(rbx)
	C = false
	esi = esi + 1<32>
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	// succ:  l000000000041DEB6
l000000000041DEB6:
	r8 = r8 >>u 1<64>
	SCZO = cond(r8)
	branch Test(NE,Z) l000000000041DEA2
	// succ:  l000000000041DEBB l000000000041DEA2
l000000000041DEBB:
	Mem0[rsp + 0x20<64>:word64] = 0<64>
	// succ:  l000000000041DEC4
l000000000041DEC4:
	call rbp (retsize: 8;)
	rdx = rbx
	rcx = rax
	eax = SetProcessAffinityMask(rcx, rdx)
	// succ:  l000000000041DED2
l000000000041DED2:
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041DE60_exit
fn000000000041DE60_exit:


// fn000000000041DEE0
// Return size: 8
define fn000000000041DEE0
fn000000000041DEE0_entry:
	rsp = fp
	// succ:  l000000000041DEE0
l000000000041DEE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l000000000041DF61
	// succ:  l000000000041DEF1 l000000000041DF61
l000000000041DEF1:
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000041DF54
	// succ:  l000000000041DEF6 l000000000041DF54
l000000000041DEF6:
	rbx = rcx
	rsi = rdx
	call fn000000000041C2E0 (retsize: 8;)
	r12 = rax + 8<64>
	rdi = rax
	rcx = r12
	call fn00000000004208F0 (retsize: 8;)
	ebp = Mem0[rbx:word32]
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l000000000041DF71
	// succ:  l000000000041DF16 l000000000041DF71
l000000000041DF16:
	SCZO = cond(ebp - 1<32>)
	branch Test(EQ,Z) l000000000041DF37
	// succ:  l000000000041DF1B l000000000041DF37
l000000000041DF1B:
	call _iob_func (retsize: 8;)
	rdx = 0x000000000049121C<p64>
	rcx = rax + 0x60<64>
	r9d = ebp
	r9 = CONVERT(r9d, word32, uint64)
	r8 = rbx
	eax = fprintf(rcx, rdx, 0<32>)
	// succ:  l000000000041DF37
l000000000041DF37:
	rcx = r12
	call fn00000000004202A0 (retsize: 8;)
	rcx = rdi
	call fn000000000041C460 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041DEE0_exit
l000000000041DF54:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041DEE0_exit
l000000000041DF61:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041DEE0_exit
l000000000041DF71:
	rax = 0x000000000041C5E0<p64>
	Mem0[rsp + 0x28<64>:word64] = rdi
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn000000000041D1D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041DFD0
	// succ:  l000000000041DF8C l000000000041DFD0
l000000000041DF8C:
	rax = Mem0[rax + 0x18<64>:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	__mfence()
	call fn000000000041D1D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041DFF0
	// succ:  l000000000041DFA2 l000000000041DFF0
l000000000041DFA2:
	rdx = rsp + 0x20<64>
	Mem0[rax + 0x18<64>:word64] = rdx
	__mfence()
	call rsi (retsize: 8;)
	call fn000000000041D1D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041DFE0
	// succ:  l000000000041DFBA l000000000041DFE0
l000000000041DFBA:
	rdx = Mem0[rsp + 0x30<64>:word64]
	Mem0[rax + 0x18<64>:word64] = rdx
	Mem0[rbx:word32] = 1<32>
	goto l000000000041DF37
	// succ:  l000000000041DF37
l000000000041DFD0:
	rax = Mem0[null:word64]
l000000000041DFE0:
	rax = Mem0[rsp + 0x30<64>:word64]
	Mem0[null:word64] = rax
l000000000041DFF0:
	rax = rsp + 0x20<64>
	Mem0[null:word64] = rax
fn000000000041DEE0_exit:


// fn000000000041E000
// Return size: 8
define fn000000000041E000
fn000000000041E000_entry:
	rsp = fp
	// succ:  l000000000041E000
l000000000041E000:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041E225
	// succ:  l000000000041E016 l000000000041E225
l000000000041E016:
	rsi = rcx
	rcx = Mem0[0x00000000004AE540<p64>:word64]
	rdi = rdx
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041E2FA
	// succ:  l000000000041E02C l000000000041E2FA
l000000000041E02C:
	call fn0000000000422F40 (retsize: 8;)
	rax = Mem0[0x00000000004AE530<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E286
	// succ:  l000000000041E041 l000000000041E286
l000000000041E041:
	ebx = Mem0[rax:word32]
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000041E075
	// succ:  l000000000041E075
l000000000041E045:
	SCZO = cond(ebx - Mem0[rax:word32])
	branch Test(UGE,C) l000000000041E0A0
	// succ:  l000000000041E049 l000000000041E0A0
l000000000041E049:
	rax = Mem0[0x00000000004AE568<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E230
	// succ:  l000000000041E059 l000000000041E230
l000000000041E059:
	rax = Mem0[rax:word64]
	r8d = ebx
	r8 = CONVERT(r8d, word32, uint64)
	rbp = CONVERT(0<32> + r8 * 8<64>, word32, word64)
	SCZO = cond(Mem0[rax + r8 * 8<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000041E1F0
	// succ:  l000000000041E072 l000000000041E1F0
l000000000041E072:
	ebx = ebx + 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	// succ:  l000000000041E075
l000000000041E075:
	rax = Mem0[0x00000000004AE538<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000041E045
	// succ:  l000000000041E081 l000000000041E045
l000000000041E081:
	rcx = 0x00000000004912A4<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	SCZO = cond(ebx - Mem0[rax:word32])
	Mem0[0x00000000004AE538<p64>:word64] = rax
	branch Test(ULT,C) l000000000041E049
	// succ:  l000000000041E0A0 l000000000041E049
l000000000041E0A0:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l000000000041E0D3
	// succ:  l000000000041E0D3
l000000000041E0A4:
	SCZO = cond(ebx - Mem0[rax:word32])
	branch Test(UGE,C) l000000000041E100
	// succ:  l000000000041E0A8 l000000000041E100
l000000000041E0A8:
	rax = Mem0[0x00000000004AE568<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E250
	// succ:  l000000000041E0B8 l000000000041E250
l000000000041E0B8:
	rax = Mem0[rax:word64]
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	rbp = CONVERT(0<32> + rdx * 8<64>, word32, word64)
	SCZO = cond(Mem0[rax + rdx * 8<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000041E1F0
	// succ:  l000000000041E0D0 l000000000041E1F0
l000000000041E0D0:
	ebx = ebx + 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	// succ:  l000000000041E0D3
l000000000041E0D3:
	rax = Mem0[0x00000000004AE530<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000041E0A4
	// succ:  l000000000041E0DF l000000000041E0A4
l000000000041E0DF:
	rcx = 0x00000000004912BB<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	SCZO = cond(ebx - Mem0[rax:word32])
	Mem0[0x00000000004AE530<p64>:word64] = rax
	branch Test(ULT,C) l000000000041E0A8
	// succ:  l000000000041E0FE l000000000041E0A8
l000000000041E0FE:
	// succ:  l000000000041E100
l000000000041E100:
	rax = Mem0[0x00000000004AE538<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E341
	// succ:  l000000000041E110 l000000000041E341
l000000000041E110:
	SCZO = cond(Mem0[rax:word32] - 0x100000<32>)
	branch Test(EQ,Z) l000000000041E2B0
	// succ:  l000000000041E11C l000000000041E2B0
l000000000041E11C:
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx + edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	branch Test(NE,Z) l000000000041E127
	// succ:  l000000000041E124 l000000000041E127
l000000000041E124:
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041E127
l000000000041E127:
	SCZO = cond(edx - 0x100000<32>)
	ebp = 0x100000<32>
	rbp = CONVERT(ebp, word32, uint64)
	rax = Mem0[0x00000000004AE568<p64>:word64]
	branch Test(GT,SZO) l000000000041E13C
	// succ:  l000000000041E139_1 l000000000041E13C
l000000000041E139_1:
	ebp = edx
	// succ:  l000000000041E13C
l000000000041E13C:
	rbx = CONVERT(ebp, word32, int64)
	rbx = rbx << 3<64>
	SCZO = cond(rbx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E3D3
	// succ:  l000000000041E14C l000000000041E3D3
l000000000041E14C:
	rcx = Mem0[rax:word64]
	rdx = rbx
	rax = realloc(rcx, rdx)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000041E2B0
	// succ:  l000000000041E163 l000000000041E2B0
l000000000041E163:
	rax = Mem0[0x00000000004AE538<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E3F3
	// succ:  l000000000041E173 l000000000041E3F3
l000000000041E173:
	edx = Mem0[rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	r8d = ebp
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d - edx
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	rcx = rbx + rdx * 8<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = r8 << 3<64>
	SCZO = cond(r8)
	rax = memset(rcx, rdx, r8)
	rax = Mem0[0x00000000004AE568<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E456
	// succ:  l000000000041E19A l000000000041E456
l000000000041E19A:
	Mem0[rax:word64] = rbx
	rbx = Mem0[0x00000000004AE530<p64>:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000041E433
	// succ:  l000000000041E1AD l000000000041E433
l000000000041E1AD:
	rdx = Mem0[0x00000000004AE538<p64>:word64]
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l000000000041E4B6
	// succ:  l000000000041E1BD l000000000041E4B6
l000000000041E1BD:
	eax = Mem0[rdx:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = SLICE(rax + 1<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rbx:word32] = ecx
	eax = Mem0[rdx:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi:word32] = eax
	// succ:  l000000000041E1C8
l000000000041E1C8:
	SZO = cond(rdi & rdi)
	C = false
	Mem0[rdx:word32] = ebp
	rax = Mem0[0x00000000004AE568<p64>:word64]
	branch Test(EQ,Z) l000000000041E391
	// succ:  l000000000041E1DA l000000000041E391
l000000000041E1DA:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E476
	// succ:  l000000000041E1E3 l000000000041E476
l000000000041E1E3:
	edx = Mem0[rsi:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rax:word64]
	Mem0[rax + rdx * 8<64>:word64] = rdi
	goto l000000000041E20E
	// succ:  l000000000041E20E
l000000000041E1F0:
	SZO = cond(rdi & rdi)
	C = false
	Mem0[rsi:word32] = ebx
	rax = Mem0[0x00000000004AE568<p64>:word64]
	branch Test(EQ,Z) l000000000041E270
	// succ:  l000000000041E1FE l000000000041E270
l000000000041E1FE:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E321
	// succ:  l000000000041E207 l000000000041E321
l000000000041E207:
	rax = Mem0[rax:word64]
	Mem0[rax + rbp:word64] = rdi
	// succ:  l000000000041E20E
l000000000041E20E:
	rcx = Mem0[0x00000000004AE540<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041E2D3
	// succ:  l000000000041E21E l000000000041E2D3
l000000000041E21E:
	call fn0000000000422EA0 (retsize: 8;)
	rsp = rsp + 8<64>
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000041E225
l000000000041E225:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041E000_exit
l000000000041E230:
	rcx = 0x0000000000491244<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE568<p64>:word64] = rax
	goto l000000000041E059
	// succ:  l000000000041E059
l000000000041E250:
	rcx = 0x0000000000491244<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE568<p64>:word64] = rax
	goto l000000000041E0B8
	// succ:  l000000000041E0B8
l000000000041E270:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E413
	// succ:  l000000000041E279 l000000000041E413
l000000000041E279:
	rax = Mem0[rax:word64]
	Mem0[rax + rbp:word64] = 1<64>
	goto l000000000041E20E
	// succ:  l000000000041E20E
l000000000041E286:
	rcx = 0x00000000004912BB<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE530<p64>:word64] = rax
	goto l000000000041E041
	// succ:  l000000000041E041
l000000000041E2B0:
	rcx = Mem0[0x00000000004AE540<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041E3AC
	// succ:  l000000000041E2C0 l000000000041E3AC
l000000000041E2C0:
	call fn0000000000422EA0 (retsize: 8;)
	rsp = rsp + 8<64>
	eax = 0xC<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041E000_exit
l000000000041E2D3:
	rcx = 0x000000000049128C<p64>
	r8 = 0x000000000041C160<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE540<p64>:word64] = rax
	goto l000000000041E21E
	// succ:  l000000000041E21E
l000000000041E2FA:
	rcx = 0x000000000049128C<p64>
	r8 = 0x000000000041C160<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE540<p64>:word64] = rax
	goto l000000000041E02C
	// succ:  l000000000041E02C
l000000000041E321:
	rcx = 0x0000000000491244<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE568<p64>:word64] = rax
	goto l000000000041E207
	// succ:  l000000000041E207
l000000000041E341:
	rcx = 0x00000000004912A4<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	SCZO = cond(Mem0[rax:word32] - 0x100000<32>)
	Mem0[0x00000000004AE538<p64>:word64] = rax
	branch Test(EQ,Z) l000000000041E2B0
	// succ:  l000000000041E368 l000000000041E2B0
l000000000041E368:
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000041E11C
	// succ:  l000000000041E371 l000000000041E11C
l000000000041E371:
	rcx = 0x00000000004912A4<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE538<p64>:word64] = rax
	goto l000000000041E11C
	// succ:  l000000000041E11C
l000000000041E391:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E496
	// succ:  l000000000041E39A l000000000041E496
l000000000041E39A:
	edx = Mem0[rsi:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rax:word64]
	Mem0[rax + rdx * 8<64>:word64] = 1<64>
	goto l000000000041E20E
	// succ:  l000000000041E20E
l000000000041E3AC:
	rcx = 0x000000000049128C<p64>
	r8 = 0x000000000041C160<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE540<p64>:word64] = rax
	goto l000000000041E2C0
	// succ:  l000000000041E2C0
l000000000041E3D3:
	rcx = 0x0000000000491244<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE568<p64>:word64] = rax
	goto l000000000041E14C
	// succ:  l000000000041E14C
l000000000041E3F3:
	rcx = 0x00000000004912A4<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE538<p64>:word64] = rax
	goto l000000000041E173
	// succ:  l000000000041E173
l000000000041E413:
	rcx = 0x0000000000491244<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE568<p64>:word64] = rax
	goto l000000000041E279
	// succ:  l000000000041E279
l000000000041E433:
	rcx = 0x00000000004912BB<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rbx = rax
	Mem0[0x00000000004AE530<p64>:word64] = rax
	goto l000000000041E1AD
	// succ:  l000000000041E1AD
l000000000041E456:
	rcx = 0x0000000000491244<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE568<p64>:word64] = rax
	goto l000000000041E19A
	// succ:  l000000000041E19A
l000000000041E476:
	rcx = 0x0000000000491244<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE568<p64>:word64] = rax
	goto l000000000041E1E3
	// succ:  l000000000041E1E3
l000000000041E496:
	rcx = 0x0000000000491244<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE568<p64>:word64] = rax
	goto l000000000041E39A
	// succ:  l000000000041E39A
l000000000041E4B6:
	rcx = 0x00000000004912A4<p64>
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE538<p64>:word64] = rax
	rdx = rax
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx:word32] = eax
	eax = Mem0[rdx:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi:word32] = eax
	goto l000000000041E1C8
	// succ:  l000000000041E1C8
fn000000000041E000_exit:


// fn000000000041E4F0
// Return size: 8
define fn000000000041E4F0
fn000000000041E4F0_entry:
	rsp = fp
	// succ:  l000000000041E4F0
l000000000041E4F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[0x00000000004AE538<p64>:word64]
	ebp = ecx
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E6D0
	// succ:  l000000000041E50C l000000000041E6D0
l000000000041E50C:
	SCZO = cond(Mem0[rax:word32] - ebp)
	branch Test(UGT,CZ) l000000000041E520
	// succ:  l000000000041E510 l000000000041E520
l000000000041E510:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041E4F0_exit
l000000000041E520:
	rax = Mem0[0x00000000004AE568<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E737
	// succ:  l000000000041E530 l000000000041E737
l000000000041E530:
	SCZO = cond(Mem0[rax:word64] - 0<64>)
	branch Test(EQ,Z) l000000000041E510
	// succ:  l000000000041E536 l000000000041E510
l000000000041E536:
	rcx = Mem0[0x00000000004AE540<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041E7C5
	// succ:  l000000000041E546 l000000000041E7C5
l000000000041E546:
	call fn0000000000422F40 (retsize: 8;)
	rax = Mem0[0x00000000004AE568<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E7EC
	// succ:  l000000000041E55B l000000000041E7EC
l000000000041E55B:
	rax = Mem0[rax:word64]
	r12d = ebp
	r12 = CONVERT(r12d, word32, uint64)
	rdi = CONVERT(0<32>, word32, word64)
	Mem0[rax:word64] = 0<64>
	rax = Mem0[0x00000000004AE530<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E7A5
	// succ:  l000000000041E581 l000000000041E7A5
l000000000041E581:
	SCZO = cond(ebp - Mem0[rax:word32])
	branch Test(ULT,C) l000000000041E690
	// succ:  l000000000041E589 l000000000041E690
l000000000041E589:
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041E77E
	// succ:  l000000000041E599 l000000000041E77E
l000000000041E599:
	call fn00000000004208F0 (retsize: 8;)
	rax = Mem0[0x00000000004AE508<p64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E631
	// succ:  l000000000041E5B2 l000000000041E631
l000000000041E5B2:
	SCZO = cond(rsi - Mem0[rax:word64])
	branch Test(UGE,C) l000000000041E655
	// succ:  l000000000041E5BB l000000000041E655
l000000000041E5BB:
	rax = Mem0[0x00000000004AE510<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E6A0
	// succ:  l000000000041E5CB l000000000041E6A0
l000000000041E5CB:
	rax = Mem0[rax:word64]
	rax = Mem0[rax + rbx:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E61D
	// succ:  l000000000041E5D7 l000000000041E61D
l000000000041E5D7:
	SCZO = cond(Mem0[rax + 0x50<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000041E61D
	// succ:  l000000000041E5DE l000000000041E61D
l000000000041E5DE:
	rax = Mem0[0x00000000004AE510<p64>:word64]
	rax = Mem0[rax:word64]
	rax = Mem0[rax + rbx:word64]
	SCZO = cond(ebp - Mem0[rax + 0x48<64>:word32])
	branch Test(UGE,C) l000000000041E61D
	// succ:  l000000000041E5F1 l000000000041E61D
l000000000041E5F1:
	rax = Mem0[rax + 0x50<64>:word64]
	Mem0[rax + rdi:word64] = 0<64>
	rax = Mem0[0x00000000004AE510<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E6F0
	// succ:  l000000000041E60D l000000000041E6F0
l000000000041E60D:
	rax = Mem0[rax:word64]
	rax = Mem0[rax + rbx:word64]
	rax = Mem0[rax + 0x58<64>:word64]
	Mem0[rax:byte] = 0<8>
	// succ:  l000000000041E61D
l000000000041E61D:
	rax = Mem0[0x00000000004AE508<p64>:word64]
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	rbx = rbx + 0x10<64>
	SCZO = cond(rbx)
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000041E5B2
	// succ:  l000000000041E631 l000000000041E5B2
l000000000041E631:
	rcx = 0x0000000000491160<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	SCZO = cond(rsi - Mem0[rax:word64])
	Mem0[0x00000000004AE508<p64>:word64] = rax
	branch Test(ULT,C) l000000000041E5BB
	// succ:  l000000000041E655 l000000000041E5BB
l000000000041E655:
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041E710
	// succ:  l000000000041E665 l000000000041E710
l000000000041E665:
	call fn00000000004202A0 (retsize: 8;)
	rcx = Mem0[0x00000000004AE540<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041E757
	// succ:  l000000000041E67A l000000000041E757
l000000000041E67A:
	call fn0000000000422EA0 (retsize: 8;)
	rsp = rsp + 8<64>
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041E4F0_exit
l000000000041E690:
	Mem0[rax:word32] = ebp
	goto l000000000041E589
	// succ:  l000000000041E589
l000000000041E6A0:
	rcx = 0x0000000000491170<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE510<p64>:word64] = rax
	rax = Mem0[rax:word64]
	rax = Mem0[rax + rbx:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000041E5D7
	// succ:  l000000000041E6CB l000000000041E5D7
l000000000041E6CB:
	goto l000000000041E61D
	// succ:  l000000000041E61D
l000000000041E6D0:
	rcx = 0x00000000004912A4<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE538<p64>:word64] = rax
	goto l000000000041E50C
	// succ:  l000000000041E50C
l000000000041E6F0:
	rcx = 0x0000000000491170<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE510<p64>:word64] = rax
	goto l000000000041E60D
	// succ:  l000000000041E60D
l000000000041E710:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041E665
	// succ:  l000000000041E665
l000000000041E737:
	rcx = 0x0000000000491244<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE568<p64>:word64] = rax
	goto l000000000041E530
	// succ:  l000000000041E530
l000000000041E757:
	rcx = 0x000000000049128C<p64>
	r8 = 0x000000000041C160<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE540<p64>:word64] = rax
	goto l000000000041E67A
	// succ:  l000000000041E67A
l000000000041E77E:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041E599
	// succ:  l000000000041E599
l000000000041E7A5:
	rcx = 0x00000000004912BB<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE530<p64>:word64] = rax
	goto l000000000041E581
	// succ:  l000000000041E581
l000000000041E7C5:
	rcx = 0x000000000049128C<p64>
	r8 = 0x000000000041C160<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE540<p64>:word64] = rax
	goto l000000000041E546
	// succ:  l000000000041E546
l000000000041E7EC:
	rcx = 0x0000000000491244<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE568<p64>:word64] = rax
	goto l000000000041E55B
	// succ:  l000000000041E55B
fn000000000041E4F0_exit:


// fn000000000041E810
// Return size: 8
define fn000000000041E810
fn000000000041E810_entry:
	rsp = fp
	// succ:  l000000000041E810
l000000000041E810:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ebx = ecx
	rbx = CONVERT(ebx, word32, uint64)
	eax = GetLastError()
	ebp = eax
	rbp = CONVERT(ebp, word32, uint64)
	call fn000000000041D1D0 (retsize: 8;)
	rdi = rax + 0x60<64>
	rsi = rax
	rcx = rdi
	call fn0000000000422260 (retsize: 8;)
	SCZO = cond(Mem0[rsi + 0x48<64>:word32] - ebx)
	branch Test(ULE,CZ) l000000000041E870
	// succ:  l000000000041E83B l000000000041E870
l000000000041E83B:
	rax = Mem0[rsi + 0x58<64>:word64]
	SCZO = cond(Mem0[rax + rbx:byte] - 0<8>)
	branch Test(EQ,Z) l000000000041E870
	// succ:  l000000000041E845 l000000000041E870
l000000000041E845:
	rax = Mem0[rsi + 0x50<64>:word64]
	rbx = Mem0[rax + rbx * 8<64>:word64]
	// succ:  l000000000041E84D
l000000000041E84D:
	rcx = rdi
	call fn0000000000422310 (retsize: 8;)
	ecx = ebp
	rcx = CONVERT(ecx, word32, uint64)
	SetLastError(rcx)
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041E810_exit
l000000000041E870:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l000000000041E84D
	// succ:  l000000000041E84D
fn000000000041E810_exit:


// fn000000000041E880
// Return size: 8
define fn000000000041E880
fn000000000041E880_entry:
	rsp = fp
	// succ:  l000000000041E880
l000000000041E880:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	esi = ecx
	rsi = CONVERT(esi, word32, uint64)
	r13 = rdx
	eax = GetLastError()
	r12d = eax
	r12 = CONVERT(r12d, word32, uint64)
	call fn000000000041D1D0 (retsize: 8;)
	rbp = rax + 0x60<64>
	rbx = rax
	rcx = rbp
	call fn0000000000422260 (retsize: 8;)
	SCZO = cond(Mem0[rbx + 0x48<64>:word32] - esi)
	branch Test(ULE,CZ) l000000000041E8F0
	// succ:  l000000000041E8B7 l000000000041E8F0
l000000000041E8B7:
	rdi = Mem0[rbx + 0x50<64>:word64]
	// succ:  l000000000041E8BB
l000000000041E8BB:
	Mem0[rdi + rsi * 8<64>:word64] = r13
	rax = Mem0[rbx + 0x58<64>:word64]
	rcx = rbp
	Mem0[rax + rsi:byte] = 1<8>
	call fn0000000000422310 (retsize: 8;)
	ecx = r12d
	rcx = CONVERT(ecx, word32, uint64)
	SetLastError(rcx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000041E8DA
l000000000041E8DA:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041E880_exit
l000000000041E8F0:
	r14d = SLICE(rsi + 1<64>, word32, 0)
	r14 = CONVERT(r14d, word32, uint64)
	rcx = Mem0[rbx + 0x50<64>:word64]
	r15 = CONVERT(r14d, word32, int64)
	rdx = CONVERT(0<32> + r15 * 8<64>, word32, word64)
	rax = realloc(rcx, rdx)
	SZO = cond(rax & rax)
	C = false
	rdi = rax
	branch Test(EQ,Z) l000000000041E963
	// succ:  l000000000041E910 l000000000041E963
l000000000041E910:
	rcx = Mem0[rbx + 0x58<64>:word64]
	rdx = r15
	rax = realloc(rcx, rdx)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l000000000041E963
	// succ:  l000000000041E924 l000000000041E963
l000000000041E924:
	edx = Mem0[rbx + 0x48<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r8d = r14d
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rdi + rdx * 8<64>
	r8d = r8d - edx
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = r8 << 3<64>
	SCZO = cond(r8)
	rax = memset(rcx, rdx, r8)
	ecx = Mem0[rbx + 0x48<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	r8d = r14d
	r8 = CONVERT(r8d, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rax = rcx
	rcx = rcx + r15
	SCZO = cond(rcx)
	r8d = r8d - eax
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	rax = memset(rcx, rdx, r8)
	Mem0[rbx + 0x50<64>:word64] = rdi
	Mem0[rbx + 0x58<64>:word64] = r15
	Mem0[rbx + 0x48<64>:word32] = r14d
	goto l000000000041E8BB
	// succ:  l000000000041E8BB
l000000000041E963:
	rcx = rbp
	call fn0000000000422310 (retsize: 8;)
	eax = 0xC<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000041E8DA
	// succ:  l000000000041E8DA
fn000000000041E880_exit:


// fn000000000041E980
// Return size: 8
define fn000000000041E980
fn000000000041E980_entry:
	rsp = fp
	// succ:  l000000000041E980
l000000000041E980:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(rcx - rdx)
	al = CONVERT(Test(EQ,Z), bool, int8)
	return
	// succ:  fn000000000041E980_exit
fn000000000041E980_exit:


// fn000000000041E990
// Return size: 8
define fn000000000041E990
fn000000000041E990_entry:
	rsp = fp
	// succ:  l000000000041E990
l000000000041E990:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000041E9A0
	// succ:  l000000000041E995 l000000000041E9A0
l000000000041E995:
	return
	// succ:  fn000000000041E990_exit
l000000000041E9A0:
	// succ:  l000000000041E9A0_thunk_fn000000000041D610
l000000000041E9A0_thunk_fn000000000041D610:
	call fn000000000041D610 (retsize: 0;)
	return
	// succ:  fn000000000041E990_exit
fn000000000041E990_exit:


// fn000000000041E9B0
// Return size: 8
define fn000000000041E9B0
fn000000000041E9B0_entry:
	rsp = fp
	// succ:  l000000000041E9B0
l000000000041E9B0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	call fn000000000041D1D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041E9D0
	// succ:  l000000000041E9BE l000000000041E9D0
l000000000041E9BE:
	rax = Mem0[rax + 0x1C8<64>:word64]
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000041E9B0_exit
l000000000041E9D0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000041E9B0_exit
fn000000000041E9B0_exit:


// fn000000000041E9E0
// Return size: 8
define fn000000000041E9E0
fn000000000041E9E0_entry:
	rsp = fp
	// succ:  l000000000041E9E0
l000000000041E9E0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	call fn000000000041D1D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041EA00
	// succ:  l000000000041E9EE l000000000041EA00
l000000000041E9EE:
	rax = Mem0[rax + 0x30<64>:word64]
	// succ:  l000000000041E9F2
l000000000041E9F2:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000041E9E0_exit
l000000000041EA00:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041E9F2
	// succ:  l000000000041E9F2
fn000000000041E9E0_exit:


// fn000000000041EA10
// Return size: 8
define fn000000000041EA10
fn000000000041EA10_entry:
	rsp = fp
	// succ:  l000000000041EA10
l000000000041EA10:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	call fn000000000041D570 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041EA30
	// succ:  l000000000041EA1E l000000000041EA30
l000000000041EA1E:
	rax = Mem0[rax + 0x28<64>:word64]
	// succ:  l000000000041EA22
l000000000041EA22:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000041EA10_exit
l000000000041EA30:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041EA22
	// succ:  l000000000041EA22
fn000000000041EA10_exit:


// fn000000000041EA40
// Return size: 8
define fn000000000041EA40
fn000000000041EA40_entry:
	rsp = fp
	// succ:  l000000000041EA40
l000000000041EA40:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	call fn000000000041D1D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041EA60
	// succ:  l000000000041EA4E l000000000041EA60
l000000000041EA4E:
	rax = rax + 0x18<64>
	SCZO = cond(rax)
	// succ:  l000000000041EA52
l000000000041EA52:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000041EA40_exit
l000000000041EA60:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041EA52
	// succ:  l000000000041EA52
fn000000000041EA40_exit:


// fn000000000041EA70
// Return size: 8
define fn000000000041EA70
fn000000000041EA70_entry:
	rsp = fp
	// succ:  l000000000041EA70
l000000000041EA70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[0x00000000004AE558<p64>:word64]
	rbx = rcx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041EA90
	// succ:  l000000000041EA84 l000000000041EA90
l000000000041EA84:
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041EA70_exit
l000000000041EA90:
	rcx = 0x0000000000491276<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE558<p64>:word64] = rax
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041EA70_exit
fn000000000041EA70_exit:


// fn000000000041EAC0
// Return size: 8
define fn000000000041EAC0
fn000000000041EAC0_entry:
	rsp = fp
	// succ:  l000000000041EAC0
l000000000041EAC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[0x00000000004AE558<p64>:word64]
	ebx = ecx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041EAE0
	// succ:  l000000000041EAD3 l000000000041EAE0
l000000000041EAD3:
	Mem0[rax:word32] = ebx
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041EAC0_exit
l000000000041EAE0:
	rcx = 0x0000000000491276<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE558<p64>:word64] = rax
	Mem0[rax:word32] = ebx
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041EAC0_exit
fn000000000041EAC0_exit:


// fn000000000041EB10
// Return size: 0
define fn000000000041EB10
fn000000000041EB10_entry:
	rsp = fp
	// succ:  l000000000041EB10
l000000000041EB10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rsi = rcx
	call fn000000000041D1D0 (retsize: 8;)
	rcx = Mem0[rax + 0x1C8<64>:word64]
	Mem0[rax + 8<64>:word64] = rsi
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000041EB8D
	// succ:  l000000000041EB2E l000000000041EB8D
l000000000041EB2E:
	SZO = cond(Mem0[rax + 0x40<64>:byte] & 0x30<8>)
	C = false
	branch Test(EQ,Z) l000000000041EB9E
	// succ:  l000000000041EB34 l000000000041EB9E
l000000000041EB34:
	rax = Mem0[0x00000000004AE548<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041EC1D
	// succ:  l000000000041EB44 l000000000041EC1D
l000000000041EB44:
	ecx = Mem0[rax:word32]
	rcx = CONVERT(ecx, word32, uint64)
	rax = TlsGetValue(rcx)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000041EB85
	// succ:  l000000000041EB54 l000000000041EB85
l000000000041EB54:
	SCZO = cond(Mem0[rax + 0x28<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000041EBAF
	// succ:  l000000000041EB5B l000000000041EBAF
l000000000041EB5B:
	rcx = Mem0[rax + 0x30<64>:word64]
	esi = Mem0[rax + 8<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	Mem0[rax + 0xB4<64>:word32] = 1<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041EB77
	// succ:  l000000000041EB71 l000000000041EB77
l000000000041EB71:
	eax = CloseHandle(rcx)
	// succ:  l000000000041EB77
l000000000041EB77:
	SZO = cond(Mem0[rbx + 0x44<64>:byte] & 4<8>)
	C = false
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	branch Test(NE,Z) l000000000041EBF1
	// succ:  l000000000041EB85 l000000000041EBF1
l000000000041EB85:
	ecx = esi
	rcx = CONVERT(ecx, word32, uint64)
	call endthreadex (retsize: 8;)
	// succ:  l000000000041EB8D
l000000000041EB8D:
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn000000000041D610 (retsize: 8;)
	rax = Mem0[rsp + 0x28<64>:word64]
	goto l000000000041EB2E
	// succ:  l000000000041EB2E
l000000000041EB9E:
	rcx = rax + 0xC0<64>
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000423516 (retsize: 8;)
	// succ:  l000000000041EBAF
l000000000041EBAF:
	rcx = Mem0[rax + 0x30<64>:word64]
	Mem0[rax:word32] = 0xDEADBEEF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041EBC4
	// succ:  l000000000041EBBE l000000000041EBC4
l000000000041EBBE:
	eax = CloseHandle(rcx)
	// succ:  l000000000041EBC4
l000000000041EBC4:
	SCZO = cond(Mem0[rbx + 0x1C0<64>:word64] - 0<64>)
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	esi = Mem0[rbx + 8<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	branch Test(EQ,Z) l000000000041EC13
	// succ:  l000000000041EBD9 l000000000041EC13
l000000000041EBD9:
	rax = Mem0[0x00000000004AE548<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041EC41
	// succ:  l000000000041EBE5 l000000000041EC41
l000000000041EBE5:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = Mem0[rax:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = TlsSetValue(rcx, rdx)
	goto l000000000041EB85
	// succ:  l000000000041EB85
l000000000041EBF1:
	Mem0[rbx:word32] = 0xDEADBEEF<32>
	rcx = Mem0[rbx + 0x28<64>:word64]
	eax = CloseHandle(rcx)
	SCZO = cond(Mem0[rbx + 0x1C0<64>:word64] - 0<64>)
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	branch Test(NE,Z) l000000000041EBD9
	// succ:  l000000000041EC13 l000000000041EBD9
l000000000041EC13:
	rcx = rbx
	call fn000000000041CD40 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	goto l000000000041EBD9
	// succ:  l000000000041EBD9
l000000000041EC1D:
	r8 = 0x000000000041C150<p64>
	rcx = 0x0000000000491209<p64>
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE548<p64>:word64] = rax
	goto l000000000041EB44
	// succ:  l000000000041EB44
l000000000041EC41:
	r8 = 0x000000000041C150<p64>
	rcx = 0x0000000000491209<p64>
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE548<p64>:word64] = rax
	goto l000000000041EBE5
	// succ:  l000000000041EBE5
fn000000000041EB10_exit:


// fn000000000041EC70
// Return size: 8
define fn000000000041EC70
fn000000000041EC70_entry:
	rsp = fp
	// succ:  l000000000041EC70
l000000000041EC70:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x00000000004AE560<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041ECB4
	// succ:  l000000000041EC80 l000000000041ECB4
l000000000041EC80:
	r8d = Mem0[rax:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NE,Z) l000000000041EC90
	// succ:  l000000000041EC88 l000000000041EC90
l000000000041EC88:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000041EC8A
l000000000041EC8A:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000041EC70_exit
l000000000041EC90:
	call fn000000000041D1D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rdx = rax
	branch Test(EQ,Z) l000000000041EC88
	// succ:  l000000000041EC9D l000000000041EC88
l000000000041EC9D:
	ecx = Mem0[rdx + 0x20<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(ecx & ecx)
	C = false
	branch Test(GT,SZO) l000000000041EC8A
	// succ:  l000000000041ECA6 l000000000041EC8A
l000000000041ECA6:
	SZO = cond(Mem0[rdx + 0x40<64>:byte] & 3<8>)
	C = false
	branch Test(EQ,Z) l000000000041EC8A
	// succ:  l000000000041ECAC l000000000041EC8A
l000000000041ECAC:
	eax = Mem0[rdx + 0x44<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041EC8A
	// succ:  l000000000041EC8A
l000000000041ECB4:
	rcx = 0x000000000049125C<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE560<p64>:word64] = rax
	goto l000000000041EC80
	// succ:  l000000000041EC80
fn000000000041EC70_exit:


// fn000000000041ECE0
// Return size: 8
define fn000000000041ECE0
fn000000000041ECE0_entry:
	rsp = fp
	// succ:  l000000000041ECE0
l000000000041ECE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	ebx = ecx
	rbx = CONVERT(ebx, word32, uint64)
	call fn000000000041D1D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041ECFA
	// succ:  l000000000041ECF1 l000000000041ECFA
l000000000041ECF1:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(LE,SZO) l000000000041ED00
	// succ:  l000000000041ECF5 l000000000041ED00
l000000000041ECF5:
	__lock()
	v11 = Mem0[rax + 0x20<64>:word32] + 1<32>
	Mem0[rax + 0x20<64>:word32] = v11
	SCZO = cond(v11)
	// succ:  l000000000041ECFA
l000000000041ECFA:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041ECE0_exit
l000000000041ED00:
	__lock()
	v12 = Mem0[rax + 0x20<64>:word32] - 1<32>
	Mem0[rax + 0x20<64>:word32] = v12
	SCZO = cond(v12)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041ECE0_exit
fn000000000041ECE0_exit:


// fn000000000041ED10
// Return size: 0
define fn000000000041ED10
fn000000000041ED10_entry:
	rsp = fp
	// succ:  l000000000041ED10
l000000000041ED10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	call fn000000000041D1D0 (retsize: 8;)
	edx = CONVERT(Mem0[rax + 0x40<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	rbx = rax
	edx = edx & 0xFFFFFFF3<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rax + 0x40<64>:byte] = dl
	call fn000000000041ECE0 (retsize: 8;)
	rax = Mem0[0x00000000004AE560<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041ED70
	// succ:  l000000000041ED40 l000000000041ED70
l000000000041ED40:
	__lock()
	v14 = Mem0[rax:word32] - 1<32>
	Mem0[rax:word32] = v14
	SCZO = cond(v14)
	rbx = Mem0[rbx + 0x18<64>:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000041ED5F
	// succ:  l000000000041ED4D l000000000041ED5F
l000000000041ED4D:
	// succ:  l000000000041ED50
l000000000041ED50:
	rcx = Mem0[rbx + 8<64>:word64]
	call Mem0[rbx:word64] (retsize: 8;)
	rbx = Mem0[rbx + 0x10<64>:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l000000000041ED50
	// succ:  l000000000041ED5F l000000000041ED50
l000000000041ED5F:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call fn000000000041ECE0 (retsize: 8;)
	ecx = 0xDEADBEEF<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn000000000041EB10 (retsize: 8;)
	// succ:  l000000000041ED70
l000000000041ED70:
	rcx = 0x000000000049125C<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE560<p64>:word64] = rax
	goto l000000000041ED40
	// succ:  l000000000041ED40
fn000000000041ED10_exit:


// fn000000000041ED90
// Return size: 8
define fn000000000041ED90
fn000000000041ED90_entry:
	rsp = fp
	// succ:  l000000000041ED90
l000000000041ED90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	call fn000000000041D570 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000041EDBD
	// succ:  l000000000041EDA2 l000000000041EDBD
l000000000041EDA2:
	SZO = cond(Mem0[rax + 0x40<64>:byte] & 0xC<8>)
	C = false
	branch Test(NE,Z) l000000000041EDBD
	// succ:  l000000000041EDA8 l000000000041EDBD
l000000000041EDA8:
	eax = Mem0[rax + 0xB4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000041EDBD
	// succ:  l000000000041EDB2 l000000000041EDBD
l000000000041EDB2:
	eax = Mem0[rbx + 0x44<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 3<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 3<32>)
	branch Test(EQ,Z) l000000000041EDC3
	// succ:  l000000000041EDBD l000000000041EDC3
l000000000041EDBD:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041ED90_exit
l000000000041EDC3:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = Mem0[rbx + 0x30<64>:word64]
	eax = WaitForSingleObject(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000041EDBD
	// succ:  l000000000041EDD3 l000000000041EDBD
l000000000041EDD3:
	rcx = rbx + 0x38<64>
	call fn00000000004202A0 (retsize: 8;)
	call fn000000000041ED10 (retsize: 8;)
	// succ:  l000000000041EDE2_thunk_fn000000000041EDF0
l000000000041EDE2_thunk_fn000000000041EDF0:
	call fn000000000041EDF0 (retsize: 0;)
	return
	// succ:  fn000000000041ED90_exit
fn000000000041ED90_exit:


// fn000000000041EDF0
// Return size: 8
define fn000000000041EDF0
fn000000000041EDF0_entry:
	rsp = fp
	// succ:  l000000000041EDF0
l000000000041EDF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	call fn000000000041D1D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000041EE1D
	// succ:  l000000000041EE03 l000000000041EE1D
l000000000041EE03:
	SZO = cond(Mem0[rax + 0x40<64>:byte] & 0xC<8>)
	C = false
	branch Test(NE,Z) l000000000041EE1D
	// succ:  l000000000041EE09 l000000000041EE1D
l000000000041EE09:
	rax = Mem0[0x00000000004AE560<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041EE55
	// succ:  l000000000041EE15 l000000000041EE55
l000000000041EE15:
	r8d = Mem0[rax:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NE,Z) l000000000041EE24
	// succ:  l000000000041EE1D l000000000041EE24
l000000000041EE1D:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041EDF0_exit
l000000000041EE24:
	rsi = rbx + 0x38<64>
	rcx = rsi
	call fn00000000004208F0 (retsize: 8;)
	eax = CONVERT(Mem0[rbx + 0x40<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & 3<8>)
	C = false
	branch Test(EQ,Z) l000000000041EE47
	// succ:  l000000000041EE38 l000000000041EE47
l000000000041EE38:
	edx = Mem0[rbx + 0x44<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(dl & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000041EE47
	// succ:  l000000000041EE40 l000000000041EE47
l000000000041EE40:
	ecx = Mem0[rbx + 0x20<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(LE,SZO) l000000000041EE72
	// succ:  l000000000041EE47 l000000000041EE72
l000000000041EE47:
	rcx = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000041EE50_thunk_fn00000000004202A0
l000000000041EE50_thunk_fn00000000004202A0:
	call fn00000000004202A0 (retsize: 0;)
	return
	// succ:  fn000000000041EDF0_exit
l000000000041EE55:
	rcx = 0x000000000049125C<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE560<p64>:word64] = rax
	goto l000000000041EE15
	// succ:  l000000000041EE15
l000000000041EE72:
	rcx = Mem0[rbx + 0x30<64>:word64]
	eax = eax & 0xFFFFFFF3<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edx = edx & 0xFFFFFFFE<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = eax | 4<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x44<64>:word32] = edx
	Mem0[rbx + 0x40<64>:byte] = al
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041EE90
	// succ:  l000000000041EE8A l000000000041EE90
l000000000041EE8A:
	eax = ResetEvent(rcx)
	// succ:  l000000000041EE90
l000000000041EE90:
	rcx = rsi
	call fn00000000004202A0 (retsize: 8;)
	call fn000000000041ED10 (retsize: 8;)
	// succ:  l000000000041EE9E_thunk_fn000000000041EEA0
l000000000041EE9E_thunk_fn000000000041EEA0:
	call fn000000000041EEA0 (retsize: 0;)
	return
	// succ:  fn000000000041EDF0_exit
fn000000000041EDF0_exit:


// fn000000000041EEA0
// Return size: 8
define fn000000000041EEA0
fn000000000041EEA0_entry:
	rsp = fp
	// succ:  l000000000041EEA0
l000000000041EEA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041EF20
	// succ:  l000000000041EEAC l000000000041EF20
l000000000041EEAC:
	call fn0000000000423290 (retsize: 8;)
	rbx = rax
	eax = 0xFFFFFFFE<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(rbx - rax)
	branch Test(ULE,CZ) l000000000041EEF0
	// succ:  l000000000041EEBE l000000000041EEF0
l000000000041EEBE:
	call fn000000000041D1D0 (retsize: 8;)
	edi = 0xFFFFFFFF<32>
	rdi = CONVERT(edi, word32, uint64)
	rsi = rax
	// succ:  l000000000041EECB
l000000000041EECB:
	call fn000000000041EDF0 (retsize: 8;)
	rcx = Mem0[rsi + 0x30<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041EF30
	// succ:  l000000000041EED9 l000000000041EF30
l000000000041EED9:
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	eax = WaitForSingleObject(rcx, rdx)
	// succ:  l000000000041EEE1
l000000000041EEE1:
	call fn000000000041EDF0 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041EEA0_exit
l000000000041EEF0:
	call fn000000000041D1D0 (retsize: 8;)
	SZO = cond(rbx & rbx)
	C = false
	edi = ebx
	rdi = CONVERT(edi, word32, uint64)
	rsi = rax
	branch Test(NE,Z) l000000000041EECB
	// succ:  l000000000041EEFF l000000000041EECB
l000000000041EEFF:
	call fn000000000041EDF0 (retsize: 8;)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	Sleep(rcx)
	call fn000000000041EDF0 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041EEA0_exit
l000000000041EF20:
	call fn000000000041D1D0 (retsize: 8;)
	goto l000000000041EEFF
	// succ:  l000000000041EEFF
l000000000041EF30:
	ecx = edi
	rcx = CONVERT(ecx, word32, uint64)
	Sleep(rcx)
	goto l000000000041EEE1
	// succ:  l000000000041EEE1
fn000000000041EEA0_exit:


// fn000000000041EF40
// Return size: 8
define fn000000000041EF40
fn000000000041EF40_entry:
	rsp = fp
	// succ:  l000000000041EF40
l000000000041EF40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ebx = ecx
	rbx = CONVERT(ebx, word32, uint64)
	call fn000000000041D1D0 (retsize: 8;)
	SZO = cond(ebx & ebx)
	C = false
	rsi = rax
	branch Test(EQ,Z) l000000000041EF80
	// succ:  l000000000041EF54 l000000000041EF80
l000000000041EF54:
	call fn000000000041EDF0 (retsize: 8;)
	rcx = Mem0[rsi + 0x30<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041EFA0
	// succ:  l000000000041EF62 l000000000041EFA0
l000000000041EF62:
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	eax = WaitForSingleObject(rcx, rdx)
	// succ:  l000000000041EF6A
l000000000041EF6A:
	call fn000000000041EDF0 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041EF40_exit
l000000000041EF80:
	call fn000000000041EDF0 (retsize: 8;)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	Sleep(rcx)
	call fn000000000041EDF0 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041EF40_exit
l000000000041EFA0:
	ecx = ebx
	rcx = CONVERT(ecx, word32, uint64)
	Sleep(rcx)
	goto l000000000041EF6A
	// succ:  l000000000041EF6A
fn000000000041EF40_exit:


// fn000000000041EFB0
// Return size: 0
define fn000000000041EFB0
fn000000000041EFB0_entry:
	rsp = fp
	// succ:  l000000000041EFB0
l000000000041EFB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x4F8<64>
	SCZO = cond(rsp)
	rsi = rcx
	call fn000000000041D570 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000041EFD9
	// succ:  l000000000041EFCB l000000000041EFD9
l000000000041EFCB:
	rcx = Mem0[rax + 0x28<64>:word64]
	rax = rcx - 1<64>
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFD<64>)
	branch Test(ULE,CZ) l000000000041EFF0
	// succ:  l000000000041EFD9 l000000000041EFF0
l000000000041EFD9:
	eax = 3<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000041EFDE
l000000000041EFDE:
	rsp = rsp + 0x4F8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041EFB0_exit
l000000000041EFF0:
	rdi = rsp + 0x20<64>
	rdx = rdi
	eax = GetHandleInformation(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041EFD9
	// succ:  l000000000041F002 l000000000041EFD9
l000000000041F002:
	rbp = rbx + 0x38<64>
	rcx = rbp
	call fn00000000004208F0 (retsize: 8;)
	call fn000000000041D1D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041F195
	// succ:  l000000000041F01C l000000000041F195
l000000000041F01C:
	rax = Mem0[rax + 0x1C8<64>:word64]
	// succ:  l000000000041F023
l000000000041F023:
	SCZO = cond(rsi - rax)
	branch Test(EQ,Z) l000000000041F093
	// succ:  l000000000041F028 l000000000041F093
l000000000041F028:
	eax = Mem0[rbx + 0x44<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 3<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 3<32>)
	eax = CONVERT(Mem0[rbx + 0x40<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l000000000041F0F0
	// succ:  l000000000041F03B l000000000041F0F0
l000000000041F03B:
	SZO = cond(al & 3<8>)
	C = false
	branch Test(NE,Z) l000000000041F07A
	// succ:  l000000000041F03F l000000000041F07A
l000000000041F03F:
	eax = eax & 0xFFFFFFFC<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax | 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x40<64>:byte] = al
	rax = Mem0[0x00000000004AE560<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041F19C
	// succ:  l000000000041F058 l000000000041F19C
l000000000041F058:
	__lock()
	v17 = Mem0[rax:word32] + 1<32>
	Mem0[rax:word32] = v17
	SCZO = cond(v17)
	rcx = Mem0[rbx + 0x30<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041F06B
	// succ:  l000000000041F065 l000000000041F06B
l000000000041F065:
	eax = SetEvent(rcx)
	// succ:  l000000000041F06B
l000000000041F06B:
	rcx = rbp
	call fn00000000004202A0 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041EFDE
	// succ:  l000000000041EFDE
l000000000041F07A:
	rcx = rbp
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(Mem0[rbx + 0x40<64>:byte] & 0xC<8>)
	C = false
	branch Test(NE,Z) l000000000041EFD9
	// succ:  l000000000041F08C l000000000041EFD9
l000000000041F08C:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041EFDE
	// succ:  l000000000041EFDE
l000000000041F093:
	eax = CONVERT(Mem0[rbx + 0x40<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & 3<8>)
	C = false
	branch Test(NE,Z) l000000000041F07A
	// succ:  l000000000041F09B l000000000041F07A
l000000000041F09B:
	eax = eax & 0xFFFFFFFC<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax | 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x40<64>:byte] = al
	rax = Mem0[0x00000000004AE560<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041F1BC
	// succ:  l000000000041F0B4 l000000000041F1BC
l000000000041F0B4:
	__lock()
	v22 = Mem0[rax:word32] + 1<32>
	Mem0[rax:word32] = v22
	SCZO = cond(v22)
	rcx = Mem0[rbx + 0x30<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041F0C7
	// succ:  l000000000041F0C1 l000000000041F0C7
l000000000041F0C1:
	eax = SetEvent(rcx)
	// succ:  l000000000041F0C7
l000000000041F0C7:
	eax = Mem0[rbx + 0x44<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 3<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 3<32>)
	branch Test(NE,Z) l000000000041F06B
	// succ:  l000000000041F0D2 l000000000041F06B
l000000000041F0D2:
	eax = CONVERT(Mem0[rbx + 0x40<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	v23 = Mem0[rbx + 0x44<64>:word32] & 0xFFFFFFFE<32>
	Mem0[rbx + 0x44<64>:word32] = v23
	SZO = cond(Mem0[rbx + 0x44<64>:word32])
	C = false
	rcx = rbp
	eax = eax & 0xFFFFFFF3<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax | 4<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x40<64>:byte] = al
	call fn00000000004202A0 (retsize: 8;)
	call fn000000000041ED10 (retsize: 8;)
	// succ:  l000000000041F0F0
l000000000041F0F0:
	SZO = cond(al & 0xC<8>)
	C = false
	branch Test(NE,Z) l000000000041F07A
	// succ:  l000000000041F0F4 l000000000041F07A
l000000000041F0F4:
	SZO = cond(al & 0xF<8>)
	C = false
	branch Test(NE,Z) l000000000041EFD9
	// succ:  l000000000041F0FC l000000000041EFD9
l000000000041F0FC:
	rcx = Mem0[rbx + 0x28<64>:word64]
	Mem0[rsp + 0x50<64>:word32] = 0x100001<32>
	eax = SuspendThread(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = Mem0[rbx + 0x28<64>:word64]
	eax = WaitForSingleObject(rcx, rdx)
	SCZO = cond(eax - 0x102<32>)
	branch Test(NE,Z) l000000000041F06B
	// succ:  l000000000041F125 l000000000041F06B
l000000000041F125:
	rcx = Mem0[rbx + 0x28<64>:word64]
	rdx = rdi
	eax = GetThreadContext(rcx, rdx)
	rax = 0x000000000041ED10<p64>
	rcx = Mem0[rbx + 0x28<64>:word64]
	rdx = rdi
	Mem0[rsp + 0x118<64>:word64] = rax
	eax = SetThreadContext(rcx, rdx)
	eax = CONVERT(Mem0[rbx + 0x40<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	v21 = Mem0[rbx + 0x44<64>:word32] & 0xFFFFFFFE<32>
	Mem0[rbx + 0x44<64>:word32] = v21
	SZO = cond(Mem0[rbx + 0x44<64>:word32])
	C = false
	eax = eax & 0xFFFFFFF0<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax | 5<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x40<64>:byte] = al
	rax = Mem0[0x00000000004AE560<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041F1DC
	// succ:  l000000000041F16B l000000000041F1DC
l000000000041F16B:
	__lock()
	v22 = Mem0[rax:word32] + 1<32>
	Mem0[rax:word32] = v22
	SCZO = cond(v22)
	rcx = Mem0[rbx + 0x30<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041F17E
	// succ:  l000000000041F178 l000000000041F17E
l000000000041F178:
	eax = SetEvent(rcx)
	// succ:  l000000000041F17E
l000000000041F17E:
	rcx = rbp
	call fn00000000004202A0 (retsize: 8;)
	rcx = Mem0[rbx + 0x28<64>:word64]
	eax = ResumeThread(rcx)
	goto l000000000041F06B
	// succ:  l000000000041F06B
l000000000041F195:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041F023
	// succ:  l000000000041F023
l000000000041F19C:
	rcx = 0x000000000049125C<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE560<p64>:word64] = rax
	goto l000000000041F058
	// succ:  l000000000041F058
l000000000041F1BC:
	rcx = 0x000000000049125C<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE560<p64>:word64] = rax
	goto l000000000041F0B4
	// succ:  l000000000041F0B4
l000000000041F1DC:
	rcx = 0x000000000049125C<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE560<p64>:word64] = rax
	goto l000000000041F16B
	// succ:  l000000000041F16B
fn000000000041EFB0_exit:


// fn000000000041F200
// Return size: 8
define fn000000000041F200
fn000000000041F200_entry:
	rsp = fp
	// succ:  l000000000041F200
l000000000041F200:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041F2E0
	// succ:  l000000000041F21C l000000000041F2E0
l000000000041F21C:
	call fn00000000004208F0 (retsize: 8;)
	rcx = rbx
	call fn000000000041C190 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041F23A
	// succ:  l000000000041F22E l000000000041F23A
l000000000041F22E:
	rsi = Mem0[rax + 0x1C8<64>:word64]
	SCZO = cond(rsi - rbx)
	branch Test(EQ,Z) l000000000041F260
	// succ:  l000000000041F23A l000000000041F260
l000000000041F23A:
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041F2B0
	// succ:  l000000000041F246 l000000000041F2B0
l000000000041F246:
	ebx = 3<32>
	rbx = CONVERT(ebx, word32, uint64)
	call fn00000000004202A0 (retsize: 8;)
	// succ:  l000000000041F250
l000000000041F250:
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041F200_exit
l000000000041F260:
	SZO = cond(Mem0[rax + 0x40<64>:byte] & 0xC<8>)
	C = false
	branch Test(NE,Z) l000000000041F23A
	// succ:  l000000000041F266 l000000000041F23A
l000000000041F266:
	ebx = Mem0[rax + 0xB4<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx & ebx)
	C = false
	branch Test(NE,Z) l000000000041F23A
	// succ:  l000000000041F270 l000000000041F23A
l000000000041F270:
	rax = Mem0[rax + 0x28<64>:word64]
	rax = rax - 1<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFD<64>)
	branch Test(UGT,CZ) l000000000041F23A
	// succ:  l000000000041F27E l000000000041F23A
l000000000041F27E:
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041F307
	// succ:  l000000000041F28A l000000000041F307
l000000000041F28A:
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000041F250
	// succ:  l000000000041F293 l000000000041F250
l000000000041F293:
	edi = edi - 2<32>
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	ebx = 0x16<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(edi - 0x15<32>)
	branch Test(UGT,CZ) l000000000041F250
	// succ:  l000000000041F2A0 l000000000041F250
l000000000041F2A0:
	rcx = rsi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000041F2AA_thunk_fn000000000041EFB0
l000000000041F2AA_thunk_fn000000000041EFB0:
	call fn000000000041EFB0 (retsize: 0;)
	return
	// succ:  fn000000000041F200_exit
l000000000041F2B0:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041F246
	// succ:  l000000000041F246
l000000000041F2E0:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041F21C
	// succ:  l000000000041F21C
l000000000041F307:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041F28A
	// succ:  l000000000041F28A
fn000000000041F200_exit:


// fn000000000041F330
// Return size: 8
define fn000000000041F330
fn000000000041F330_entry:
	rsp = fp
	// succ:  l000000000041F330
l000000000041F330:
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & edx
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000041F330_exit
fn000000000041F330_exit:


// fn000000000041F340
// Return size: 8
define fn000000000041F340
fn000000000041F340_entry:
	rsp = fp
	// succ:  l000000000041F340
l000000000041F340:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	edx = ~edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & r8d)
	C = false
	branch Test(EQ,Z) l000000000041F350
	// succ:  l000000000041F34C l000000000041F350
l000000000041F34C:
	return
	// succ:  fn000000000041F340_exit
l000000000041F350:
	edx = edx & Mem0[rcx:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	al = al ^ al
	SZO = cond(al)
	C = false
	edx = edx | r8d
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx:word32] = edx
	return
	// succ:  fn000000000041F340_exit
fn000000000041F340_exit:


// fn000000000041F360
// Return size: 8
define fn000000000041F360
fn000000000041F360_entry:
	rsp = fp
	// succ:  l000000000041F360
l000000000041F360:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	Mem0[rcx:word32] = 1<32>
	Mem0[rcx + 8<64>:word64] = 0<64>
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	return
	// succ:  fn000000000041F360_exit
fn000000000041F360_exit:


// fn000000000041F390
// Return size: 8
define fn000000000041F390
fn000000000041F390_entry:
	rsp = fp
	// succ:  l000000000041F390
l000000000041F390:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx:word64] = 0<64>
	Mem0[rcx + 8<64>:word64] = 0<64>
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	return
	// succ:  fn000000000041F390_exit
fn000000000041F390_exit:


// fn000000000041F3C0
// Return size: 8
define fn000000000041F3C0
fn000000000041F3C0_entry:
	rsp = fp
	// succ:  l000000000041F3C0
l000000000041F3C0:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(edx & 0xFFFFFFFB<32>)
	C = false
	branch Test(EQ,Z) l000000000041F3D0
	// succ:  l000000000041F3CD l000000000041F3D0
l000000000041F3CD:
	return
	// succ:  fn000000000041F3C0_exit
l000000000041F3D0:
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0xFFFFFFFB<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edx = edx | eax
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx:word32] = edx
	return
	// succ:  fn000000000041F3C0_exit
fn000000000041F3C0_exit:


// fn000000000041F3E0
// Return size: 8
define fn000000000041F3E0
fn000000000041F3E0_entry:
	rsp = fp
	// succ:  l000000000041F3E0
l000000000041F3E0:
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 4<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rdx:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000041F3E0_exit
fn000000000041F3E0_exit:


// fn000000000041F3F0
// Return size: 8
define fn000000000041F3F0
fn000000000041F3F0_entry:
	rsp = fp
	// succ:  l000000000041F3F0
l000000000041F3F0:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041F406
	// succ:  l000000000041F3FA l000000000041F406
l000000000041F3FA:
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0xFFFFFFF7<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l000000000041F410
	// succ:  l000000000041F401 l000000000041F410
l000000000041F401:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000041F406
l000000000041F406:
	return
	// succ:  fn000000000041F3F0_exit
l000000000041F410:
	r8d = Mem0[rcx:word32]
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d & 0xFFFFFFF7<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx | r8d
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx:word32] = edx
	return
	// succ:  fn000000000041F3F0_exit
fn000000000041F3F0_exit:


// fn000000000041F420
// Return size: 8
define fn000000000041F420
fn000000000041F420_entry:
	rsp = fp
	// succ:  l000000000041F420
l000000000041F420:
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 8<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rdx:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000041F420_exit
fn000000000041F420_exit:


// fn000000000041F430
// Return size: 8
define fn000000000041F430
fn000000000041F430_entry:
	rsp = fp
	// succ:  l000000000041F430
l000000000041F430:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(edx & 0xFFFFFFEF<32>)
	C = false
	branch Test(EQ,Z) l000000000041F440
	// succ:  l000000000041F43D l000000000041F440
l000000000041F43D:
	return
	// succ:  fn000000000041F430_exit
l000000000041F440:
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0xFFFFFFEF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edx = edx | eax
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx:word32] = edx
	return
	// succ:  fn000000000041F430_exit
fn000000000041F430_exit:


// fn000000000041F450
// Return size: 8
define fn000000000041F450
fn000000000041F450_entry:
	rsp = fp
	// succ:  l000000000041F450
l000000000041F450:
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0x10<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rdx:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000041F450_exit
fn000000000041F450_exit:


// fn000000000041F460
// Return size: 8
define fn000000000041F460
fn000000000041F460_entry:
	rsp = fp
	// succ:  l000000000041F460
l000000000041F460:
	rax = Mem0[rcx + 8<64>:word64]
	Mem0[rdx:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000041F460_exit
fn000000000041F460_exit:


// fn000000000041F470
// Return size: 8
define fn000000000041F470
fn000000000041F470_entry:
	rsp = fp
	// succ:  l000000000041F470
l000000000041F470:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx + 8<64>:word64] = rdx
	return
	// succ:  fn000000000041F470_exit
fn000000000041F470_exit:


// fn000000000041F480
// Return size: 8
define fn000000000041F480
fn000000000041F480_entry:
	rsp = fp
	// succ:  l000000000041F480
l000000000041F480:
	rax = Mem0[rcx + 0x10<64>:word64]
	Mem0[rdx:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000041F480_exit
fn000000000041F480_exit:


// fn000000000041F490
// Return size: 8
define fn000000000041F490
fn000000000041F490_entry:
	rsp = fp
	// succ:  l000000000041F490
l000000000041F490:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx + 0x10<64>:word64] = rdx
	return
	// succ:  fn000000000041F490_exit
fn000000000041F490_exit:


// fn000000000041F4A0
// Return size: 8
define fn000000000041F4A0
fn000000000041F4A0_entry:
	rsp = fp
	// succ:  l000000000041F4A0
l000000000041F4A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ebx = ecx
	rbx = CONVERT(ebx, word32, uint64)
	rbp = rdx
	call fn000000000041D1D0 (retsize: 8;)
	rsi = rax
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000041F4C8
	// succ:  l000000000041F4BF l000000000041F4C8
l000000000041F4BF:
	edi = ebx
	rdi = CONVERT(edi, word32, uint64)
	edi = edi & 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SCZO = cond(edi - ebx)
	branch Test(EQ,Z) l000000000041F4D1
	// succ:  l000000000041F4C8 l000000000041F4D1
l000000000041F4C8:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041F4A0_exit
l000000000041F4D1:
	rbx = rsi + 0x38<64>
	rcx = rbx
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000041F4EB
	// succ:  l000000000041F4E2 l000000000041F4EB
l000000000041F4E2:
	eax = Mem0[rsi + 0x44<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbp + 0<64>:word32] = eax
	// succ:  l000000000041F4EB
l000000000041F4EB:
	eax = Mem0[rsi + 0x44<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = Mem0[rsi + 0x1C8<64>:word64]
	eax = eax & 0xFFFFFFFE<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edi = edi | eax
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	Mem0[rsi + 0x44<64>:word32] = edi
	call fn000000000041ED90 (retsize: 8;)
	rcx = rbx
	call fn00000000004202A0 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041F4C8
	// succ:  l000000000041F4C8
fn000000000041F4A0_exit:


// fn000000000041F510
// Return size: 8
define fn000000000041F510
fn000000000041F510_entry:
	rsp = fp
	// succ:  l000000000041F510
l000000000041F510:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ebx = ecx
	rbx = CONVERT(ebx, word32, uint64)
	rbp = rdx
	call fn000000000041D1D0 (retsize: 8;)
	rsi = rax
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000041F538
	// succ:  l000000000041F52F l000000000041F538
l000000000041F52F:
	edi = ebx
	rdi = CONVERT(edi, word32, uint64)
	edi = edi & 2<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SCZO = cond(edi - ebx)
	branch Test(EQ,Z) l000000000041F541
	// succ:  l000000000041F538 l000000000041F541
l000000000041F538:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041F510_exit
l000000000041F541:
	rbx = rsi + 0x38<64>
	rcx = rbx
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000041F55B
	// succ:  l000000000041F552 l000000000041F55B
l000000000041F552:
	eax = Mem0[rsi + 0x44<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 2<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbp + 0<64>:word32] = eax
	// succ:  l000000000041F55B
l000000000041F55B:
	eax = Mem0[rsi + 0x44<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = Mem0[rsi + 0x1C8<64>:word64]
	eax = eax & 0xFFFFFFFD<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edi = edi | eax
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	Mem0[rsi + 0x44<64>:word32] = edi
	call fn000000000041ED90 (retsize: 8;)
	rcx = rbx
	call fn00000000004202A0 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041F538
	// succ:  l000000000041F538
fn000000000041F510_exit:


// fn000000000041F580
// Return size: 8
define fn000000000041F580
fn000000000041F580_entry:
	rsp = fp
	// succ:  l000000000041F580
l000000000041F580:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	r14 = rcx
	r12 = rdx
	rsi = r8
	rdi = r9
	call fn000000000041CB10 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000041F731
	// succ:  l000000000041F5AB l000000000041F731
l000000000041F5AB:
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l000000000041F5BA
	// succ:  l000000000041F5B0 l000000000041F5BA
l000000000041F5B0:
	rax = Mem0[rax + 0x1C8<64>:word64]
	Mem0[r14:word64] = rax
	// succ:  l000000000041F5BA
l000000000041F5BA:
	r13 = Sleep
	Mem0[rbx + 8<64>:word64] = rdi
	rdi = CreateEventA
	Mem0[rbx + 0x10<64>:word64] = rsi
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	Mem0[rbx + 0xB4<64>:word32] = 0<32>
	Mem0[rbx + 0x44<64>:word32] = 1<32>
	Mem0[rbx + 0x28<64>:word64] = 0xFFFFFFFFFFFFFFFF<64>
	rbp = r13
	// succ:  l000000000041F5F1
l000000000041F5F1:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rax = CreateEventA(rcx, rdx, r8, r9)
	SZO = cond(rax & rax)
	C = false
	Mem0[rbx + 0x30<64>:word64] = rax
	branch Test(NE,Z) l000000000041F7E0
	// succ:  l000000000041F60D l000000000041F7E0
l000000000041F60D:
	SCZO = cond(esi - 1<32>)
	branch Test(NE,Z) l000000000041F620
	// succ:  l000000000041F612 l000000000041F620
l000000000041F612:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	Sleep(rcx)
	// succ:  l000000000041F617
l000000000041F617:
	esi = esi + 1<32>
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	goto l000000000041F5F1
	// succ:  l000000000041F5F1
l000000000041F620:
	ecx = 0x14<32>
	rcx = CONVERT(ecx, word32, uint64)
	call rbp (retsize: 8;)
	SCZO = cond(esi - 5<32>)
	branch Test(NE,Z) l000000000041F617
	// succ:  l000000000041F62C l000000000041F617
l000000000041F62C:
	rax = Mem0[rbx + 0x30<64>:word64]
	Mem0[rbx + 0x38<64>:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rbx + 0x60<64>:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rbx:word32] = 0xBAB1F00D<32>
	Mem0[rbx + 0xB8<64>:word32] = 0<32>
	Mem0[rbx + 0xB0<64>:word32] = 0<32>
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041F717
	// succ:  l000000000041F663 l000000000041F717
l000000000041F663:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l000000000041F820
	// succ:  l000000000041F66C l000000000041F820
l000000000041F66C:
	eax = Mem0[r12:word32]
	rax = CONVERT(eax, word32, uint64)
	rsi = Mem0[r12 + 0x10<64>:word64]
	SZO = cond(al & 8<8>)
	C = false
	Mem0[rbx + 0x44<64>:word32] = eax
	branch Test(NE,Z) l000000000041F7B0
	// succ:  l000000000041F680 l000000000041F7B0
l000000000041F680:
	eax = Mem0[r12 + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xB8<64>:word32] = eax
	// succ:  l000000000041F68D
l000000000041F68D:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	Mem0[rsp + 0x28<64>:word64] = 0<64>
	Mem0[rsp + 0x20<64>:word32] = 4<32>
	r9 = rbx
	r8 = 0x000000000041D9D0<p64>
	call beginthreadex (retsize: 8;)
	rsi = rax
	rax = rax - 1<64>
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFD<64>)
	branch Test(UGT,CZ) l000000000041F6E7
	// succ:  l000000000041F6BD l000000000041F6E7
l000000000041F6BD:
	edx = Mem0[rbx + 0xB8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - 0xFFFFFFF2<32>)
	branch Test(LT,SO) l000000000041F745
	// succ:  l000000000041F6C8 l000000000041F745
l000000000041F6C8:
	SCZO = cond(edx - 0xFFFFFFFF<32>)
	branch Test(LT,SO) l000000000041F7D0
	// succ:  l000000000041F6D1 l000000000041F7D0
l000000000041F6D1:
	SCZO = cond(edx - 0xE<32>)
	branch Test(GT,SZO) l000000000041F810
	// succ:  l000000000041F6DA l000000000041F810
l000000000041F6DA:
	SCZO = cond(edx - 2<32>)
	eax = 2<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(LT,SO) l000000000041F6E5
	// succ:  l000000000041F6E2_1 l000000000041F6E5
l000000000041F6E2_1:
	edx = eax
	// succ:  l000000000041F6E5
l000000000041F6E5:
	goto l000000000041F74A
	// succ:  l000000000041F74A
l000000000041F6E7:
	rcx = Mem0[rbx + 0x30<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041F6F6
	// succ:  l000000000041F6F0 l000000000041F6F6
l000000000041F6F0:
	eax = CloseHandle(rcx)
	// succ:  l000000000041F6F6
l000000000041F6F6:
	rcx = rbx + 0x38<64>
	call fn0000000000420B50 (retsize: 8;)
	Mem0[rbx + 0x60<64>:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	// succ:  l000000000041F717
l000000000041F717:
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l000000000041F723
	// succ:  l000000000041F71C l000000000041F723
l000000000041F71C:
	Mem0[r14:word64] = 0<64>
	// succ:  l000000000041F723
l000000000041F723:
	SCZO = cond(Mem0[rbx + 0x1C0<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000041F827
	// succ:  l000000000041F731 l000000000041F827
l000000000041F731:
	eax = 0xB<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041F580_exit
l000000000041F745:
	edx = 0xFFFFFFF1<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041F74A
l000000000041F74A:
	rcx = rsi
	eax = SetThreadPriority(rcx, rdx)
	rcx = Mem0[rbx + 0x30<64>:word64]
	eax = ResetEvent(rcx)
	SZO = cond(Mem0[rbx + 0x44<64>:byte] & 4<8>)
	C = false
	branch Test(EQ,Z) l000000000041F7A0
	// succ:  l000000000041F763 l000000000041F7A0
l000000000041F763:
	rcx = rsi
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	eax = ResumeThread(rcx)
	rcx = rsi
	eax = CloseHandle(rcx)
	// succ:  l000000000041F77D
l000000000041F77D:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	Sleep(rcx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041F580_exit
l000000000041F7A0:
	Mem0[rbx + 0x28<64>:word64] = rsi
	rcx = rsi
	eax = ResumeThread(rcx)
	goto l000000000041F77D
	// succ:  l000000000041F77D
l000000000041F7B0:
	call fn000000000041D1D0 (retsize: 8;)
	eax = Mem0[rax + 0xB8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xB8<64>:word32] = eax
	goto l000000000041F68D
	// succ:  l000000000041F68D
l000000000041F7D0:
	edx = 0xFFFFFFFE<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000041F74A
	// succ:  l000000000041F74A
l000000000041F7E0:
	Mem0[rbx + 0x38<64>:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rbx + 0x60<64>:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rbx:word32] = 0xBAB1F00D<32>
	Mem0[rbx + 0xB8<64>:word32] = 0<32>
	Mem0[rbx + 0xB0<64>:word32] = 0<32>
	goto l000000000041F663
	// succ:  l000000000041F663
l000000000041F810:
	edx = 0xF<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000041F74A
	// succ:  l000000000041F74A
l000000000041F820:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l000000000041F68D
	// succ:  l000000000041F68D
l000000000041F827:
	rcx = rbx
	call fn000000000041CD40 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	goto l000000000041F731
	// succ:  l000000000041F731
fn000000000041F580_exit:


// fn000000000041F840
// Return size: 8
define fn000000000041F840
fn000000000041F840_entry:
	rsp = fp
	// succ:  l000000000041F840
l000000000041F840:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rsi = rcx
	rdi = rdx
	call fn000000000041D570 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000041F872
	// succ:  l000000000041F85A l000000000041F872
l000000000041F85A:
	rcx = Mem0[rax + 0x28<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041F872
	// succ:  l000000000041F863 l000000000041F872
l000000000041F863:
	rdx = rsp + 0x3C<64>
	eax = GetHandleInformation(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000041F880
	// succ:  l000000000041F872 l000000000041F880
l000000000041F872:
	eax = 3<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000041F877
l000000000041F877:
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041F840_exit
l000000000041F880:
	SZO = cond(Mem0[rbx + 0x44<64>:byte] & 4<8>)
	C = false
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l000000000041F877
	// succ:  l000000000041F88B l000000000041F877
l000000000041F88B:
	call fn000000000041D1D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041F92F
	// succ:  l000000000041F899 l000000000041F92F
l000000000041F899:
	rdx = Mem0[rax + 0x1C8<64>:word64]
	// succ:  l000000000041F8A0
l000000000041F8A0:
	SCZO = cond(rsi - rdx)
	eax = 0x24<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l000000000041F877
	// succ:  l000000000041F8AA l000000000041F877
l000000000041F8AA:
	eax = Mem0[rbx + 0xB4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = Mem0[rbx + 0x28<64>:word64]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041F8C2
	// succ:  l000000000041F8B8 l000000000041F8C2
l000000000041F8B8:
	rax = rcx - 1<64>
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFD<64>)
	branch Test(UGT,CZ) l000000000041F8D1
	// succ:  l000000000041F8C2 l000000000041F8D1
l000000000041F8C2:
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = WaitForSingleObject(rcx, rdx)
	rcx = Mem0[rbx + 0x28<64>:word64]
	// succ:  l000000000041F8D1
l000000000041F8D1:
	rsi = CloseHandle
	eax = CloseHandle(rcx)
	rcx = Mem0[rbx + 0x30<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041F8E5
	// succ:  l000000000041F8E3 l000000000041F8E5
l000000000041F8E3:
	eax = CloseHandle(rcx)
	// succ:  l000000000041F8E5
l000000000041F8E5:
	SZO = cond(rdi & rdi)
	C = false
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	branch Test(EQ,Z) l000000000041F8F9
	// succ:  l000000000041F8F2 l000000000041F8F9
l000000000041F8F2:
	rax = Mem0[rbx + 8<64>:word64]
	Mem0[rdi:word64] = rax
	// succ:  l000000000041F8F9
l000000000041F8F9:
	rcx = rbx + 0x38<64>
	call fn0000000000420B50 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbx + 0x1C0<64>:word64] - 0<64>)
	Mem0[rbx + 0x60<64>:word64] = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(NE,Z) l000000000041F877
	// succ:  l000000000041F91A l000000000041F877
l000000000041F91A:
	rcx = rbx
	Mem0[rsp + 0x2C<64>:word32] = eax
	call fn000000000041CD40 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	eax = Mem0[rsp + 0x2C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l000000000041F877
	// succ:  l000000000041F877
l000000000041F92F:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l000000000041F8A0
	// succ:  l000000000041F8A0
fn000000000041F840_exit:


// fn000000000041F940
// Return size: 8
define fn000000000041F940
fn000000000041F940_entry:
	rsp = fp
	// succ:  l000000000041F940
l000000000041F940:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	rdi = rdx
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041FA04
	// succ:  l000000000041F95D l000000000041FA04
l000000000041F95D:
	call fn00000000004208F0 (retsize: 8;)
	rcx = rsi
	call fn000000000041C190 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000041F98A
	// succ:  l000000000041F972 l000000000041F98A
l000000000041F972:
	rcx = Mem0[rax + 0x28<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041F98A
	// succ:  l000000000041F97B l000000000041F98A
l000000000041F97B:
	rdx = rsp + 0x2C<64>
	eax = GetHandleInformation(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000041F9B0
	// succ:  l000000000041F98A l000000000041F9B0
l000000000041F98A:
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041F9E0
	// succ:  l000000000041F996 l000000000041F9E0
l000000000041F996:
	call fn00000000004202A0 (retsize: 8;)
	eax = 3<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000041F9A0
l000000000041F9A0:
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041F940_exit
l000000000041F9B0:
	SZO = cond(Mem0[rbx + 0x44<64>:byte] & 4<8>)
	C = false
	branch Test(EQ,Z) l000000000041FA30
	// succ:  l000000000041F9B6 l000000000041FA30
l000000000041F9B6:
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041FA83
	// succ:  l000000000041F9C6 l000000000041FA83
l000000000041F9C6:
	call fn00000000004202A0 (retsize: 8;)
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041F940_exit
l000000000041F9E0:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041F996
	// succ:  l000000000041F996
l000000000041FA04:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041F95D
	// succ:  l000000000041F95D
l000000000041FA30:
	call fn000000000041D1D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041FB24
	// succ:  l000000000041FA3E l000000000041FB24
l000000000041FA3E:
	rax = Mem0[rax + 0x1C8<64>:word64]
	// succ:  l000000000041FA45
l000000000041FA45:
	SCZO = cond(rsi - rax)
	branch Test(EQ,Z) l000000000041FAAA
	// succ:  l000000000041FA4A l000000000041FAAA
l000000000041FA4A:
	eax = Mem0[rbx + 0xB4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000041FAC5
	// succ:  l000000000041FA54 l000000000041FAC5
l000000000041FA54:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = Mem0[rbx + 0x28<64>:word64]
	eax = WaitForSingleObject(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041FAC5
	// succ:  l000000000041FA64 l000000000041FAC5
l000000000041FA64:
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041FB80
	// succ:  l000000000041FA74 l000000000041FB80
l000000000041FA74:
	call fn00000000004202A0 (retsize: 8;)
	eax = 0x10<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000041F9A0
	// succ:  l000000000041F9A0
l000000000041FA83:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041F9C6
	// succ:  l000000000041F9C6
l000000000041FAAA:
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041FB2B
	// succ:  l000000000041FAB6 l000000000041FB2B
l000000000041FAB6:
	call fn00000000004202A0 (retsize: 8;)
	eax = 0x24<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000041F9A0
	// succ:  l000000000041F9A0
l000000000041FAC5:
	rcx = Mem0[rbx + 0x28<64>:word64]
	rsi = CloseHandle
	eax = CloseHandle(rcx)
	rcx = Mem0[rbx + 0x30<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041FADD
	// succ:  l000000000041FADB l000000000041FADD
l000000000041FADB:
	eax = CloseHandle(rcx)
	// succ:  l000000000041FADD
l000000000041FADD:
	SZO = cond(rdi & rdi)
	C = false
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	branch Test(EQ,Z) l000000000041FAF1
	// succ:  l000000000041FAEA l000000000041FAF1
l000000000041FAEA:
	rax = Mem0[rbx + 8<64>:word64]
	Mem0[rdi:word64] = rax
	// succ:  l000000000041FAF1
l000000000041FAF1:
	rcx = rbx + 0x38<64>
	call fn0000000000420B50 (retsize: 8;)
	SCZO = cond(Mem0[rbx + 0x1C0<64>:word64] - 0<64>)
	Mem0[rbx + 0x60<64>:word64] = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(EQ,Z) l000000000041FB76
	// succ:  l000000000041FB0C l000000000041FB76
l000000000041FB0C:
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041FB52
	// succ:  l000000000041FB18 l000000000041FB52
l000000000041FB18:
	call fn00000000004202A0 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041F9A0
	// succ:  l000000000041F9A0
l000000000041FB24:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041FA45
	// succ:  l000000000041FA45
l000000000041FB2B:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041FAB6
	// succ:  l000000000041FAB6
l000000000041FB52:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041FB18
	// succ:  l000000000041FB18
l000000000041FB76:
	rcx = rbx
	call fn000000000041CD40 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	goto l000000000041FB0C
	// succ:  l000000000041FB0C
l000000000041FB80:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041FA74
	// succ:  l000000000041FA74
fn000000000041F940_exit:


// fn000000000041FBB0
// Return size: 8
define fn000000000041FBB0
fn000000000041FBB0_entry:
	rsp = fp
	// succ:  l000000000041FBB0
l000000000041FBB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	call fn000000000041D570 (retsize: 8;)
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	rbx = rax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041FC60
	// succ:  l000000000041FBCE l000000000041FC60
l000000000041FBCE:
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000041FBF0
	// succ:  l000000000041FBD8 l000000000041FBF0
l000000000041FBD8:
	rcx = Mem0[rbx + 0x28<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041FBF0
	// succ:  l000000000041FBE1 l000000000041FBF0
l000000000041FBE1:
	rdx = rsp + 0x2C<64>
	eax = GetHandleInformation(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000041FC10
	// succ:  l000000000041FBF0 l000000000041FC10
l000000000041FBF0:
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041FC33
	// succ:  l000000000041FBFC l000000000041FC33
l000000000041FBFC:
	call fn00000000004202A0 (retsize: 8;)
	eax = 3<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000041FC06
l000000000041FC06:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041FBB0_exit
l000000000041FC10:
	eax = Mem0[rbx + 0x44<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & 4<8>)
	C = false
	branch Test(EQ,Z) l000000000041FC90
	// succ:  l000000000041FC17 l000000000041FC90
l000000000041FC17:
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041FD00
	// succ:  l000000000041FC27 l000000000041FD00
l000000000041FC27:
	call fn00000000004202A0 (retsize: 8;)
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000041FC06
	// succ:  l000000000041FC06
l000000000041FC33:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041FBFC
	// succ:  l000000000041FBFC
l000000000041FC60:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041FBCE
	// succ:  l000000000041FBCE
l000000000041FC90:
	eax = eax | 4<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rcx = Mem0[rbx + 0x28<64>:word64]
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x44<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041FCE8
	// succ:  l000000000041FCA7 l000000000041FCE8
l000000000041FCA7:
	rsi = CloseHandle
	eax = CloseHandle(rcx)
	eax = Mem0[rbx + 0xB4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041FCE8
	// succ:  l000000000041FCBA l000000000041FCE8
l000000000041FCBA:
	rcx = Mem0[rbx + 0x30<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041FCC5
	// succ:  l000000000041FCC3 l000000000041FCC5
l000000000041FCC3:
	eax = CloseHandle(rcx)
	// succ:  l000000000041FCC5
l000000000041FCC5:
	rcx = rbx + 0x38<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	call fn0000000000420B50 (retsize: 8;)
	SCZO = cond(Mem0[rbx + 0x1C0<64>:word64] - 0<64>)
	Mem0[rbx + 0x60<64>:word64] = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(EQ,Z) l000000000041FD4B
	// succ:  l000000000041FCE8 l000000000041FD4B
l000000000041FCE8:
	rcx = Mem0[0x00000000004AE518<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041FD27
	// succ:  l000000000041FCF4 l000000000041FD27
l000000000041FCF4:
	call fn00000000004202A0 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000041FC06
	// succ:  l000000000041FC06
l000000000041FD00:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041FC27
	// succ:  l000000000041FC27
l000000000041FD27:
	rcx = 0x00000000004911D3<p64>
	r8 = 0x000000000041C170<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE518<p64>:word64] = rax
	goto l000000000041FCF4
	// succ:  l000000000041FCF4
l000000000041FD4B:
	rcx = rbx
	call fn000000000041CD40 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	goto l000000000041FCE8
	// succ:  l000000000041FCE8
fn000000000041FBB0_exit:


// fn000000000041FD60
// Return size: 8
define fn000000000041FD60
fn000000000041FD60_entry:
	rsp = fp
	// succ:  l000000000041FD60
l000000000041FD60:
	rcx = 0x00000000004912F3<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000041FD6F_thunk_fn0000000000421EA0
l000000000041FD6F_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn000000000041FD60_exit
fn000000000041FD60_exit:


// fn000000000041FD80
// Return size: 8
define fn000000000041FD80
fn000000000041FD80_entry:
	rsp = fp
	// succ:  l000000000041FD80
l000000000041FD80:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x00000000004AE4E0<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041FDA0
	// succ:  l000000000041FD90 l000000000041FDA0
l000000000041FD90:
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000041FD80_exit
l000000000041FDA0:
	rcx = 0x00000000004912F3<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE4E0<p64>:word64] = rax
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000041FD80_exit
fn000000000041FD80_exit:


// fn000000000041FDD0
// Return size: 8
define fn000000000041FDD0
fn000000000041FDD0_entry:
	rsp = fp
	// succ:  l000000000041FDD0
l000000000041FDD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[0x00000000004AE4E0<p64>:word64]
	ebx = ecx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041FDF0
	// succ:  l000000000041FDE3 l000000000041FDF0
l000000000041FDE3:
	Mem0[rax:word32] = ebx
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041FDD0_exit
l000000000041FDF0:
	rcx = 0x00000000004912F3<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE4E0<p64>:word64] = rax
	Mem0[rax:word32] = ebx
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041FDD0_exit
fn000000000041FDD0_exit:


// fn000000000041FE20
// Return size: 8
define fn000000000041FE20
fn000000000041FE20_entry:
	rsp = fp
	// succ:  l000000000041FE20
l000000000041FE20:
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	return
	// succ:  fn000000000041FE20_exit
fn000000000041FE20_exit:


// fn000000000041FE30
// Return size: 8
define fn000000000041FE30
fn000000000041FE30_entry:
	rsp = fp
	// succ:  l000000000041FE30
l000000000041FE30:
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	return
	// succ:  fn000000000041FE30_exit
fn000000000041FE30_exit:


// fn000000000041FE40
// Return size: 8
define fn000000000041FE40
fn000000000041FE40_entry:
	rsp = fp
	// succ:  l000000000041FE40
l000000000041FE40:
	Mem0[rcx:word32] = 2<32>
	return
	// succ:  fn000000000041FE40_exit
fn000000000041FE40_exit:


// fn000000000041FE50
// Return size: 8
define fn000000000041FE50
fn000000000041FE50_entry:
	rsp = fp
	// succ:  l000000000041FE50
l000000000041FE50:
	Mem0[rcx:word32] = 1<32>
	return
	// succ:  fn000000000041FE50_exit
fn000000000041FE50_exit:


// fn000000000041FE60
// Return size: 8
define fn000000000041FE60
fn000000000041FE60_entry:
	rsp = fp
	// succ:  l000000000041FE60
l000000000041FE60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = Mem0[rcx:word64]
	rbx = rcx
	rcx = Mem0[0x00000000004AE598<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041FF00
	// succ:  l000000000041FE7C l000000000041FF00
l000000000041FE7C:
	call fn0000000000422260 (retsize: 8;)
	rdx = Mem0[rbx:word64]
	ebx = 0x16<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l000000000041FE96
	// succ:  l000000000041FE8E l000000000041FE96
l000000000041FE8E:
	SCZO = cond(Mem0[rdx:word32] - 0xBAB1F00D<32>)
	branch Test(EQ,Z) l000000000041FEB0
	// succ:  l000000000041FE96 l000000000041FEB0
l000000000041FE96:
	rcx = Mem0[0x00000000004AE598<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041FED0
	// succ:  l000000000041FEA2 l000000000041FED0
l000000000041FEA2:
	call fn0000000000422310 (retsize: 8;)
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041FE60_exit
l000000000041FEB0:
	rax = rdx + 3<64>
	bl = 1<8>
	SCZO = cond(rax - 2<64>)
	branch Test(ULE,CZ) l000000000041FE96
	// succ:  l000000000041FEBC l000000000041FE96
l000000000041FEBC:
	eax = Mem0[rsi + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041FE96
	// succ:  l000000000041FEC3 l000000000041FE96
l000000000041FEC3:
	eax = Mem0[rdx + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	bl = bl ^ bl
	SZO = cond(bl)
	C = false
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rdx + 4<64>:word32] = eax
	goto l000000000041FE96
	// succ:  l000000000041FE96
l000000000041FED0:
	r8 = 0x000000000041FE20<p64>
	rcx = 0x0000000000491320<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE598<p64>:word64] = rax
	call fn0000000000422310 (retsize: 8;)
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041FE60_exit
l000000000041FF00:
	rcx = 0x0000000000491320<p64>
	r8 = 0x000000000041FE20<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE598<p64>:word64] = rax
	goto l000000000041FE7C
	// succ:  l000000000041FE7C
fn000000000041FE60_exit:


// fn000000000041FF30
// Return size: 8
define fn000000000041FF30
fn000000000041FF30_entry:
	rsp = fp
	// succ:  l000000000041FF30
l000000000041FF30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[0x00000000004AE598<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041FF80
	// succ:  l000000000041FF44 l000000000041FF80
l000000000041FF44:
	call fn0000000000422260 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000041FF60
	// succ:  l000000000041FF50 l000000000041FF60
l000000000041FF50:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041FF30_exit
l000000000041FF60:
	rcx = Mem0[0x00000000004AE598<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000041FFA4
	// succ:  l000000000041FF6C l000000000041FFA4
l000000000041FF6C:
	call fn0000000000422310 (retsize: 8;)
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041FF30_exit
l000000000041FF80:
	rcx = 0x0000000000491320<p64>
	r8 = 0x000000000041FE20<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE598<p64>:word64] = rax
	goto l000000000041FF44
	// succ:  l000000000041FF44
l000000000041FFA4:
	rcx = 0x0000000000491320<p64>
	r8 = 0x000000000041FE20<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE598<p64>:word64] = rax
	goto l000000000041FF6C
	// succ:  l000000000041FF6C
fn000000000041FF30_exit:


// fn000000000041FFD0
// Return size: 8
define fn000000000041FFD0
fn000000000041FFD0_entry:
	rsp = fp
	// succ:  l000000000041FFD0
l000000000041FFD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = Mem0[rcx + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rbx = rcx
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000420020
	// succ:  l000000000041FFE0 l0000000000420020
l000000000041FFE0:
	esi = Mem0[rcx + 0x14<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l0000000000420035
	// succ:  l000000000041FFE7 l0000000000420035
l000000000041FFE7:
	rcx = Mem0[rbx + 0x18<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421240 (retsize: 8;)
	SCZO = cond(eax - 0x8A<32>)
	branch Test(EQ,Z) l0000000000420027
	// succ:  l000000000041FFFF l0000000000420027
l000000000041FFFF:
	SZO = cond(eax & eax)
	C = false
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	branch Test(NE,Z) l000000000042002C
	// succ:  l0000000000420005 l000000000042002C
l0000000000420005:
	Mem0[rbx + 0xC<64>:word32] = 1<32>
	eax = GetCurrentThreadId()
	Mem0[rbx + 0x14<64>:word32] = eax
	goto l000000000042002C
	// succ:  l000000000042002C
l0000000000420020:
	eax = Mem0[rcx + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041FFE7
	// succ:  l0000000000420027 l000000000041FFE7
l0000000000420027:
	esi = 0x10<32>
	rsi = CONVERT(esi, word32, uint64)
	// succ:  l000000000042002C
l000000000042002C:
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000041FFD0_exit
l0000000000420035:
	SCZO = cond(eax - 2<32>)
	branch Test(NE,Z) l0000000000420027
	// succ:  l000000000042003A l0000000000420027
l000000000042003A:
	eax = GetCurrentThreadId()
	SCZO = cond(esi - eax)
	branch Test(NE,Z) l0000000000420027
	// succ:  l0000000000420044 l0000000000420027
l0000000000420044:
	__lock()
	v17 = Mem0[rbx + 0xC<64>:word32] + 1<32>
	Mem0[rbx + 0xC<64>:word32] = v17
	SCZO = cond(v17)
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l000000000042002C
	// succ:  l000000000042002C
fn000000000041FFD0_exit:


// fn0000000000420050
// Return size: 8
define fn0000000000420050
fn0000000000420050_entry:
	rsp = fp
	// succ:  l0000000000420050
l0000000000420050:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[0x00000000004AE598<p64>:word64]
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004200E0
	// succ:  l0000000000420067 l00000000004200E0
l0000000000420067:
	call fn0000000000422260 (retsize: 8;)
	SCZO = cond(Mem0[rbx:word32] - 0xBAB1F00D<32>)
	branch Test(NE,Z) l0000000000420107
	// succ:  l0000000000420078 l0000000000420107
l0000000000420078:
	eax = Mem0[rbx + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000420107
	// succ:  l0000000000420083 l0000000000420107
l0000000000420083:
	eax = Mem0[rbx + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000420093
	// succ:  l000000000042008A l0000000000420093
l000000000042008A:
	eax = Mem0[rbx + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx + 4<64>:word32] = eax
	// succ:  l0000000000420093
l0000000000420093:
	rcx = Mem0[0x00000000004AE598<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004200B0
	// succ:  l000000000042009F l00000000004200B0
l000000000042009F:
	call fn0000000000422310 (retsize: 8;)
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420050_exit
l00000000004200B0:
	r8 = 0x000000000041FE20<p64>
	rcx = 0x0000000000491320<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE598<p64>:word64] = rax
	call fn0000000000422310 (retsize: 8;)
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420050_exit
l00000000004200E0:
	rcx = 0x0000000000491320<p64>
	r8 = 0x000000000041FE20<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE598<p64>:word64] = rax
	goto l0000000000420067
	// succ:  l0000000000420067
l0000000000420107:
	call _iob_func (retsize: 8;)
	r9 = 0x0000000000491338<p64>
	rcx = rax + 0x60<64>
	r8 = 0x0000000000491370<p64>
	rdx = 0x00000000004913A0<p64>
	Mem0[rsp + 0x20<64>:word32] = 0x39<32>
	eax = fprintf(rcx, rdx, 0<32>)
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	exit(rcx)
fn0000000000420050_exit:


// fn0000000000420140
// Return size: 8
define fn0000000000420140
fn0000000000420140_entry:
	rsp = fp
	// succ:  l0000000000420140
l0000000000420140:
	r8 = 0x000000000041FE20<p64>
	rcx = 0x0000000000491320<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000420153_thunk_fn0000000000421EA0
l0000000000420153_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn0000000000420140_exit
fn0000000000420140_exit:


// fn0000000000420160
// Return size: 8
define fn0000000000420160
fn0000000000420160_entry:
	rsp = fp
	// succ:  l0000000000420160
l0000000000420160:
	r8 = 0x000000000041FE30<p64>
	rcx = 0x00000000004913CA<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000420173_thunk_fn0000000000421EA0
l0000000000420173_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn0000000000420160_exit
fn0000000000420160_exit:


// fn0000000000420180
// Return size: 8
define fn0000000000420180
fn0000000000420180_entry:
	rsp = fp
	// succ:  l0000000000420180
l0000000000420180:
	Mem0[0x0000000000477100<p64>:word32] = ecx
	return
	// succ:  fn0000000000420180_exit
fn0000000000420180_exit:


// fn0000000000420190
// Return size: 8
define fn0000000000420190
fn0000000000420190_entry:
	rsp = fp
	// succ:  l0000000000420190
l0000000000420190:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x78<64>
	SCZO = cond(rsp)
	eax = Mem0[0x0000000000477100<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000420217
	// succ:  l00000000004201AA l0000000000420217
l00000000004201AA:
	rax = Mem0[rcx:word64]
	rsi = rdx
	rbx = rcx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000420230
	// succ:  l00000000004201B8 l0000000000420230
l00000000004201B8:
	r9d = Mem0[rax:word32]
	r9 = CONVERT(r9d, word32, uint64)
	r15d = Mem0[rax + 0xC<64>:word32]
	r15 = CONVERT(r15d, word32, uint64)
	rdi = Mem0[rax + 0x18<64>:word64]
	r14d = Mem0[rax + 0xC<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	r13d = Mem0[rax + 0x14<64>:word32]
	r13 = CONVERT(r13d, word32, uint64)
	r12d = Mem0[rax + 8<64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	ebp = Mem0[rax + 4<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	Mem0[rsp + 0x6C<64>:word32] = r9d
	eax = GetCurrentThreadId()
	rdx = Mem0[rbx:word64]
	r9d = Mem0[rsp + 0x6C<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	rcx = 0x00000000004913F0<p64>
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x50<64>:word64] = rsi
	Mem0[rsp + 0x48<64>:word64] = rdi
	Mem0[rsp + 0x40<64>:word32] = r15d
	Mem0[rsp + 0x38<64>:word32] = r14d
	Mem0[rsp + 0x30<64>:word32] = r13d
	Mem0[rsp + 0x28<64>:word32] = r12d
	Mem0[rsp + 0x20<64>:word32] = ebp
	eax = printf(rcx, 0<32>)
	// succ:  l0000000000420217
l0000000000420217:
	rsp = rsp + 0x78<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420190_exit
l0000000000420230:
	eax = GetCurrentThreadId()
	rdx = Mem0[rbx:word64]
	rcx = 0x00000000004913E4<p64>
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	r9 = rsi
	rsp = rsp + 0x78<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	eax = printf(rcx, 0<32>)
	return
	// succ:  fn0000000000420190_exit
fn0000000000420190_exit:


// fn0000000000420260
// Return size: 8
define fn0000000000420260
fn0000000000420260_entry:
	rsp = fp
	// succ:  l0000000000420260
l0000000000420260:
	r8 = 0x000000000041FE40<p64>
	rcx = 0x000000000049141F<p64>
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000420273_thunk_fn0000000000421EA0
l0000000000420273_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn0000000000420260_exit
fn0000000000420260_exit:


// fn0000000000420280
// Return size: 8
define fn0000000000420280
fn0000000000420280_entry:
	rsp = fp
	// succ:  l0000000000420280
l0000000000420280:
	r8 = 0x000000000041FE50<p64>
	rcx = 0x0000000000491436<p64>
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000420293_thunk_fn0000000000421EA0
l0000000000420293_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn0000000000420280_exit
fn0000000000420280_exit:


// fn00000000004202A0
// Return size: 8
define fn00000000004202A0
fn00000000004202A0_entry:
	rsp = fp
	// succ:  l00000000004202A0
l00000000004202A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx
	call fn000000000041FE60 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000420325
	// succ:  l00000000004202B3 l0000000000420325
l00000000004202B3:
	rbx = Mem0[rsi:word64]
	edx = Mem0[rbx + 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000420300
	// succ:  l00000000004202BD l0000000000420300
l00000000004202BD:
	eax = Mem0[rbx + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000000004202F3
	// succ:  l00000000004202CC l00000000004202F3
l00000000004202CC:
	rcx = Mem0[rbx + 0x18<64>:word64]
	Mem0[rbx + 0x14<64>:word32] = 0<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004202EE
	// succ:  l00000000004202DC l00000000004202EE
l00000000004202DC:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = ReleaseSemaphore(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000420335
	// succ:  l00000000004202EE l0000000000420335
l00000000004202EE:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l00000000004202F0
l00000000004202F0:
	rcx = Mem0[rsi:word64]
	// succ:  l00000000004202F3
l00000000004202F3:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004202FA_thunk_fn0000000000420050
l00000000004202FA_thunk_fn0000000000420050:
	call fn0000000000420050 (retsize: 0;)
	return
	// succ:  fn00000000004202A0_exit
l0000000000420300:
	edi = Mem0[rbx + 0x14<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l0000000000420330
	// succ:  l0000000000420307 l0000000000420330
l0000000000420307:
	eax = GetCurrentThreadId()
	SCZO = cond(edi - eax)
	branch Test(EQ,Z) l0000000000420345
	// succ:  l0000000000420311 l0000000000420345
l0000000000420311:
	rcx = Mem0[rsi:word64]
	// succ:  l0000000000420314
l0000000000420314:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000420320_thunk_fn0000000000420050
l0000000000420320_thunk_fn0000000000420050:
	call fn0000000000420050 (retsize: 0;)
	return
	// succ:  fn00000000004202A0_exit
l0000000000420325:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004202A0_exit
l0000000000420330:
	rcx = rbx
	goto l0000000000420314
	// succ:  l0000000000420314
l0000000000420335:
	eax = GetCurrentThreadId()
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0x14<64>:word32] = eax
	goto l00000000004202F0
	// succ:  l00000000004202F0
l0000000000420345:
	SCZO = cond(Mem0[rbx + 8<64>:word32] - 2<32>)
	branch Test(NE,Z) l00000000004202CC
	// succ:  l000000000042034B l00000000004202CC
l000000000042034B:
	__lock()
	v18 = Mem0[rbx + 0xC<64>:word32] - 1<32>
	Mem0[rbx + 0xC<64>:word32] = v18
	SCZO = cond(v18)
	branch Test(EQ,Z) l00000000004202CC
	// succ:  l0000000000420356 l00000000004202CC
l0000000000420356:
	goto l00000000004202EE
	// succ:  l00000000004202EE
fn00000000004202A0_exit:


// fn0000000000420360
// Return size: 8
define fn0000000000420360
fn0000000000420360_entry:
	rsp = fp
	// succ:  l0000000000420360
l0000000000420360:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdi = rcx
	rbx = rdx
	call fn000000000041FF30 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000420380
	// succ:  l0000000000420376 l0000000000420380
l0000000000420376:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420360_exit
l0000000000420380:
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = calloc(rcx, rdx)
	SZO = cond(rax & rax)
	C = false
	rsi = rax
	branch Test(EQ,Z) l0000000000420440
	// succ:  l000000000042039B l0000000000420440
l000000000042039B:
	SZO = cond(rbx & rbx)
	C = false
	Mem0[rax + 0xC<64>:word32] = 0<32>
	Mem0[rax + 8<64>:word32] = 0<32>
	Mem0[rax + 4<64>:word32] = 0<32>
	branch Test(EQ,Z) l00000000004203C3
	// succ:  l00000000004203B5 l00000000004203C3
l00000000004203B5:
	eax = Mem0[rbx:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 3<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SZO = cond(al & 4<8>)
	C = false
	Mem0[rsi + 8<64>:word32] = edx
	branch Test(NE,Z) l0000000000420410
	// succ:  l00000000004203C3 l0000000000420410
l00000000004203C3:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8d = 0x7FFFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rax = CreateSemaphoreA(rcx, rdx, r8, r9)
	SZO = cond(rax & rax)
	C = false
	Mem0[rsi + 0x18<64>:word64] = rax
	branch Test(EQ,Z) l00000000004204E0
	// succ:  l00000000004203E6 l00000000004204E0
l00000000004203E6:
	Mem0[rdi:word64] = rsi
	rcx = Mem0[0x00000000004AE598<p64>:word64]
	Mem0[rsi:word32] = 0xBAB1F00D<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042045E
	// succ:  l00000000004203FB l000000000042045E
l00000000004203FB:
	call fn0000000000422310 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420360_exit
l0000000000420410:
	ebx = 0x28<32>
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000420415
l0000000000420415:
	rcx = rsi
	free(rcx)
	Mem0[rdi:word64] = 0<64>
	rcx = Mem0[0x00000000004AE598<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004204B0
	// succ:  l0000000000420434 l00000000004204B0
l0000000000420434:
	call fn0000000000422310 (retsize: 8;)
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000420376
	// succ:  l0000000000420376
l0000000000420440:
	rcx = Mem0[0x00000000004AE598<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000420485
	// succ:  l000000000042044C l0000000000420485
l000000000042044C:
	call fn0000000000422310 (retsize: 8;)
	eax = 0xC<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420360_exit
l000000000042045E:
	rcx = 0x0000000000491320<p64>
	r8 = 0x000000000041FE20<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE598<p64>:word64] = rax
	goto l00000000004203FB
	// succ:  l00000000004203FB
l0000000000420485:
	rcx = 0x0000000000491320<p64>
	r8 = 0x000000000041FE20<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE598<p64>:word64] = rax
	goto l000000000042044C
	// succ:  l000000000042044C
l00000000004204B0:
	rcx = 0x0000000000491320<p64>
	r8 = 0x000000000041FE20<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE598<p64>:word64] = rax
	goto l0000000000420434
	// succ:  l0000000000420434
l00000000004204E0:
	eax = GetLastError()
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(eax - 5<32>)
	eax = 0xC<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l00000000004204F6
	// succ:  l00000000004204F3_1 l00000000004204F6
l00000000004204F3_1:
	eax = edx
	// succ:  l00000000004204F6
l00000000004204F6:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000420415
	// succ:  l0000000000420415
fn0000000000420360_exit:


// fn0000000000420500
// Return size: 8
define fn0000000000420500
fn0000000000420500_entry:
	rsp = fp
	// succ:  l0000000000420500
l0000000000420500:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = Mem0[0x00000000004AE590<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004205D0
	// succ:  l0000000000420519 l00000000004205D0
l0000000000420519:
	call fn0000000000422260 (retsize: 8;)
	rdx = Mem0[rsi:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	rax = rdx + 3<64>
	SCZO = cond(rax - 2<64>)
	branch Test(UGT,CZ) l0000000000420554
	// succ:  l000000000042052D l0000000000420554
l000000000042052D:
	SCZO = cond(rdx - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l0000000000420548
	// succ:  l0000000000420533 l0000000000420548
l0000000000420533:
	SCZO = cond(rdx - 0xFFFFFFFFFFFFFFFD<64>)
	branch Test(EQ,Z) l00000000004205B1
	// succ:  l0000000000420539 l00000000004205B1
l0000000000420539:
	SCZO = cond(rdx - 0xFFFFFFFFFFFFFFFE<64>)
	branch Test(EQ,Z) l0000000000420600
	// succ:  l0000000000420543 l0000000000420600
l0000000000420543:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l0000000000420570
	// succ:  l0000000000420548 l0000000000420570
l0000000000420548:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rsi
	call fn0000000000420360 (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000420554
l0000000000420554:
	rcx = Mem0[0x00000000004AE590<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000420581
	// succ:  l0000000000420560 l0000000000420581
l0000000000420560:
	call fn0000000000422310 (retsize: 8;)
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420500_exit
l0000000000420570:
	rcx = Mem0[0x00000000004AE590<p64>:word64]
	ebx = 0x16<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000420560
	// succ:  l0000000000420581 l0000000000420560
l0000000000420581:
	r8 = 0x000000000041FE30<p64>
	rcx = 0x00000000004913CA<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE590<p64>:word64] = rax
	call fn0000000000422310 (retsize: 8;)
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420500_exit
l00000000004205B1:
	rdx = Mem0[0x00000000004AE588<p64>:word64]
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l000000000042062D
	// succ:  l00000000004205BD l000000000042062D
l00000000004205BD:
	rcx = rsi
	call fn0000000000420360 (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000420554
	// succ:  l0000000000420554
l00000000004205D0:
	rcx = 0x00000000004913CA<p64>
	r8 = 0x000000000041FE30<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE590<p64>:word64] = rax
	goto l0000000000420519
	// succ:  l0000000000420519
l0000000000420600:
	rdx = Mem0[0x00000000004AE580<p64>:word64]
	SZO = cond(rdx & rdx)
	C = false
	branch Test(NE,Z) l00000000004205BD
	// succ:  l000000000042060C l00000000004205BD
l000000000042060C:
	r8 = 0x000000000041FE50<p64>
	rcx = 0x0000000000491436<p64>
	dl = 4<8>
	call fn0000000000421EA0 (retsize: 8;)
	rdx = rax
	Mem0[0x00000000004AE580<p64>:word64] = rax
	goto l00000000004205BD
	// succ:  l00000000004205BD
l000000000042062D:
	r8 = 0x000000000041FE40<p64>
	rcx = 0x000000000049141F<p64>
	dl = 4<8>
	call fn0000000000421EA0 (retsize: 8;)
	rdx = rax
	Mem0[0x00000000004AE588<p64>:word64] = rax
	goto l00000000004205BD
	// succ:  l00000000004205BD
fn0000000000420500_exit:


// fn0000000000420660
// Return size: 8
define fn0000000000420660
fn0000000000420660_entry:
	rsp = fp
	// succ:  l0000000000420660
l0000000000420660:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = Mem0[0x00000000004AE598<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000420750
	// succ:  l0000000000420679 l0000000000420750
l0000000000420679:
	call fn0000000000422260 (retsize: 8;)
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000420720
	// succ:  l0000000000420687 l0000000000420720
l0000000000420687:
	rax = Mem0[rsi:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000420720
	// succ:  l0000000000420693 l0000000000420720
l0000000000420693:
	rdx = rax + 3<64>
	SCZO = cond(rdx - 2<64>)
	branch Test(ULE,CZ) l00000000004206D0
	// succ:  l000000000042069D l00000000004206D0
l000000000042069D:
	SCZO = cond(Mem0[rax:word32] - 0xBAB1F00D<32>)
	branch Test(EQ,Z) l0000000000420740
	// succ:  l00000000004206A9 l0000000000420740
l00000000004206A9:
	ebx = 0x16<32>
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l00000000004206AE
l00000000004206AE:
	rcx = Mem0[0x00000000004AE598<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004207A4
	// succ:  l00000000004206BE l00000000004207A4
l00000000004206BE:
	call fn0000000000422310 (retsize: 8;)
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420660_exit
l00000000004206D0:
	rcx = Mem0[0x00000000004AE598<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004207D0
	// succ:  l00000000004206E0 l00000000004207D0
l00000000004206E0:
	call fn0000000000422310 (retsize: 8;)
	rcx = rsi
	call fn0000000000420500 (retsize: 8;)
	rcx = Mem0[0x00000000004AE598<p64>:word64]
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000420800
	// succ:  l00000000004206FF l0000000000420800
l00000000004206FF:
	call fn0000000000422260 (retsize: 8;)
	SZO = cond(ebx & 0xFFFFFFEF<32>)
	C = false
	branch Test(NE,Z) l00000000004206AE
	// succ:  l000000000042070C l00000000004206AE
l000000000042070C:
	rax = Mem0[rsi:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004206A9
	// succ:  l0000000000420714 l00000000004206A9
l0000000000420714:
	goto l000000000042069D
	// succ:  l000000000042069D
l0000000000420720:
	rcx = Mem0[0x00000000004AE598<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000420780
	// succ:  l000000000042072C l0000000000420780
l000000000042072C:
	call fn0000000000422310 (retsize: 8;)
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420660_exit
l0000000000420740:
	edx = Mem0[rax + 4<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	Mem0[rax + 4<64>:word32] = edx
	goto l00000000004206AE
	// succ:  l00000000004206AE
l0000000000420750:
	rcx = 0x0000000000491320<p64>
	r8 = 0x000000000041FE20<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE598<p64>:word64] = rax
	goto l0000000000420679
	// succ:  l0000000000420679
l0000000000420780:
	rcx = 0x0000000000491320<p64>
	r8 = 0x000000000041FE20<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE598<p64>:word64] = rax
	goto l000000000042072C
	// succ:  l000000000042072C
l00000000004207A4:
	rcx = 0x0000000000491320<p64>
	r8 = 0x000000000041FE20<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE598<p64>:word64] = rax
	goto l00000000004206BE
	// succ:  l00000000004206BE
l00000000004207D0:
	rcx = 0x0000000000491320<p64>
	r8 = 0x000000000041FE20<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE598<p64>:word64] = rax
	goto l00000000004206E0
	// succ:  l00000000004206E0
l0000000000420800:
	rcx = 0x0000000000491320<p64>
	r8 = 0x000000000041FE20<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE598<p64>:word64] = rax
	goto l00000000004206FF
	// succ:  l00000000004206FF
fn0000000000420660_exit:


// fn0000000000420830
// Return size: 0
define fn0000000000420830
fn0000000000420830_entry:
	rsp = fp
	// succ:  l0000000000420830
l0000000000420830:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	call fn0000000000420660 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000420885
	// succ:  l0000000000420846 l0000000000420885
l0000000000420846:
	rbx = Mem0[rsi:word64]
	eax = Mem0[rbx + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000420890
	// succ:  l0000000000420850 l0000000000420890
l0000000000420850:
	ebp = Mem0[rbx + 0x14<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	rcx = rbx
	SZO = cond(ebp & ebp)
	C = false
	branch Test(NE,Z) l00000000004208C0
	// succ:  l000000000042085A l00000000004208C0
l000000000042085A:
	rbp = Mem0[rbx + 0x18<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn0000000000420050 (retsize: 8;)
	r8d = edi
	r8 = CONVERT(r8d, word32, uint64)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbp
	call fn0000000000421240 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000420885
	// succ:  l0000000000420879 l0000000000420885
l0000000000420879:
	rcx = rsi
	call fn0000000000420660 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000420895
	// succ:  l0000000000420885 l0000000000420895
l0000000000420885:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420830_exit
l0000000000420890:
	rcx = rbx
	goto l000000000042085A
	// succ:  l000000000042085A
l0000000000420895:
	Mem0[rbx + 0xC<64>:word32] = 1<32>
	eax = GetCurrentThreadId()
	Mem0[rbx + 0x14<64>:word32] = eax
	// succ:  l00000000004208A5
l00000000004208A5:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l00000000004208A7
l00000000004208A7:
	rcx = Mem0[rsi:word64]
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004208B2_thunk_fn0000000000420050
l00000000004208B2_thunk_fn0000000000420050:
	call fn0000000000420050 (retsize: 0;)
	return
	// succ:  fn0000000000420830_exit
l00000000004208C0:
	eax = GetCurrentThreadId()
	SCZO = cond(ebp - eax)
	branch Test(EQ,Z) l00000000004208D0
	// succ:  l00000000004208CA l00000000004208D0
l00000000004208CA:
	rcx = Mem0[rsi:word64]
	goto l000000000042085A
	// succ:  l000000000042085A
l00000000004208D0:
	SCZO = cond(Mem0[rbx + 8<64>:word32] - 2<32>)
	edx = 0x24<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l00000000004208A7
	// succ:  l00000000004208DB l00000000004208A7
l00000000004208DB:
	__lock()
	v20 = Mem0[rbx + 0xC<64>:word32] + 1<32>
	Mem0[rbx + 0xC<64>:word32] = v20
	SCZO = cond(v20)
	goto l00000000004208A5
	// succ:  l00000000004208A5
fn0000000000420830_exit:


// fn00000000004208F0
// Return size: 8
define fn00000000004208F0
fn00000000004208F0_entry:
	rsp = fp
	// succ:  l00000000004208F0
l00000000004208F0:
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l00000000004208F5_thunk_fn0000000000420830
l00000000004208F5_thunk_fn0000000000420830:
	call fn0000000000420830 (retsize: 0;)
	return
	// succ:  fn00000000004208F0_exit
fn00000000004208F0_exit:


// fn0000000000420900
// Return size: 8
define fn0000000000420900
fn0000000000420900_entry:
	rsp = fp
	// succ:  l0000000000420900
l0000000000420900:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l00000000004209B0
	// succ:  l0000000000420910 l00000000004209B0
l0000000000420910:
	rsi = rdx
	rbx = rcx
	call fn0000000000420660 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000420930
	// succ:  l000000000042091F l0000000000420930
l000000000042091F:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420900_exit
l0000000000420930:
	rcx = Mem0[rbx:word64]
	call fn000000000041FFD0 (retsize: 8;)
	SCZO = cond(eax - 0x10<32>)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l00000000004209A0
	// succ:  l000000000042093F l00000000004209A0
l000000000042093F:
	rax = Mem0[rbx:word64]
	edx = Mem0[rax + 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000420950
	// succ:  l0000000000420949 l0000000000420950
l0000000000420949:
	edi = Mem0[rax + 0x14<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l0000000000420990
	// succ:  l0000000000420950 l0000000000420990
l0000000000420950:
	call fn0000000000423260 (retsize: 8;)
	rcx = rsi
	rdi = rax
	call fn0000000000423290 (retsize: 8;)
	rcx = Mem0[rbx:word64]
	rsi = rax
	edx = 0x10<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000420050 (retsize: 8;)
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	rcx = rbx
	edx = edx - edi
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(rdi - rsi)
	branch Test(ULE,CZ) l0000000000420982
	// succ:  l000000000042097F_1 l0000000000420982
l000000000042097F_1:
	edx = eax
	// succ:  l0000000000420982
l0000000000420982:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000420989_thunk_fn0000000000420830
l0000000000420989_thunk_fn0000000000420830:
	call fn0000000000420830 (retsize: 0;)
	return
	// succ:  fn0000000000420900_exit
l0000000000420990:
	eax = GetCurrentThreadId()
	SCZO = cond(edi - eax)
	branch Test(NE,Z) l0000000000420950
	// succ:  l000000000042099A l0000000000420950
l000000000042099A:
	edx = 0x24<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l00000000004209A0
l00000000004209A0:
	rcx = Mem0[rbx:word64]
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004209AA_thunk_fn0000000000420050
l00000000004209AA_thunk_fn0000000000420050:
	call fn0000000000420050 (retsize: 0;)
	return
	// succ:  fn0000000000420900_exit
l00000000004209B0:
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004209BC_thunk_fn0000000000420830
l00000000004209BC_thunk_fn0000000000420830:
	call fn0000000000420830 (retsize: 0;)
	return
	// succ:  fn0000000000420900_exit
fn0000000000420900_exit:


// fn00000000004209D0
// Return size: 8
define fn00000000004209D0
fn00000000004209D0_entry:
	rsp = fp
	// succ:  l00000000004209D0
l00000000004209D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000420660 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000000004209F0
	// succ:  l00000000004209E1 l00000000004209F0
l00000000004209E1:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004209D0_exit
l00000000004209F0:
	rcx = Mem0[rbx:word64]
	call fn000000000041FFD0 (retsize: 8;)
	rcx = Mem0[rbx:word64]
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000420A02_thunk_fn0000000000420050
l0000000000420A02_thunk_fn0000000000420050:
	call fn0000000000420050 (retsize: 0;)
	return
	// succ:  fn00000000004209D0_exit
fn00000000004209D0_exit:


// fn0000000000420A10
// Return size: 8
define fn0000000000420A10
fn0000000000420A10_entry:
	rsp = fp
	// succ:  l0000000000420A10
l0000000000420A10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000420AA1
	// succ:  l0000000000420A22 l0000000000420AA1
l0000000000420A22:
	SCZO = cond(Mem0[rcx:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000420AA1
	// succ:  l0000000000420A28 l0000000000420AA1
l0000000000420A28:
	Mem0[rdx:word64] = 0<64>
	rbp = rsp + 0x28<64>
	rax = Mem0[rcx:word64]
	rbx = rcx
	rdi = rdx
	rcx = rbp
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn00000000004209D0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000420AA1
	// succ:  l0000000000420A4E l0000000000420AA1
l0000000000420A4E:
	rcx = Mem0[0x00000000004AE598<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000420AE0
	// succ:  l0000000000420A5E l0000000000420AE0
l0000000000420A5E:
	call fn0000000000422260 (retsize: 8;)
	rax = Mem0[rbx:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000420AD2
	// succ:  l0000000000420A6B l0000000000420AD2
l0000000000420A6B:
	rdx = rax + 3<64>
	SCZO = cond(rdx - 2<64>)
	branch Test(ULE,CZ) l0000000000420AC0
	// succ:  l0000000000420A75 l0000000000420AC0
l0000000000420A75:
	SCZO = cond(Mem0[rax:word32] - 0xBAB1F00D<32>)
	esi = 0x16<32>
	rsi = CONVERT(esi, word32, uint64)
	branch Test(EQ,Z) l0000000000420AB0
	// succ:  l0000000000420A82 l0000000000420AB0
l0000000000420A82:
	rcx = Mem0[0x00000000004AE598<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000420B1A
	// succ:  l0000000000420A92 l0000000000420B1A
l0000000000420A92:
	call fn0000000000422310 (retsize: 8;)
	rcx = rbp
	call fn00000000004202A0 (retsize: 8;)
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000420AA1
l0000000000420AA1:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420A10_exit
l0000000000420AB0:
	edx = Mem0[rax + 4<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000420B10
	// succ:  l0000000000420AB7 l0000000000420B10
l0000000000420AB7:
	Mem0[rdi:word64] = rax
	// succ:  l0000000000420AC0
l0000000000420AC0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx:word64] = 0<64>
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420A10_exit
l0000000000420AD2:
	esi = 0x16<32>
	rsi = CONVERT(esi, word32, uint64)
	goto l0000000000420A82
	// succ:  l0000000000420A82
l0000000000420AE0:
	rcx = 0x0000000000491320<p64>
	r8 = 0x000000000041FE20<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE598<p64>:word64] = rax
	goto l0000000000420A5E
	// succ:  l0000000000420A5E
l0000000000420B10:
	esi = 0xBEEF<32>
	rsi = CONVERT(esi, word32, uint64)
	goto l0000000000420A82
	// succ:  l0000000000420A82
l0000000000420B1A:
	rcx = 0x0000000000491320<p64>
	r8 = 0x000000000041FE20<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE598<p64>:word64] = rax
	goto l0000000000420A92
	// succ:  l0000000000420A92
fn0000000000420A10_exit:


// fn0000000000420B50
// Return size: 8
define fn0000000000420B50
fn0000000000420B50_entry:
	rsp = fp
	// succ:  l0000000000420B50
l0000000000420B50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rdi = Sleep
	rbx = rcx
	rsi = rsp + 0x28<64>
	goto l0000000000420B74
	// succ:  l0000000000420B74
l0000000000420B70:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	Sleep(rcx)
	// succ:  l0000000000420B74
l0000000000420B74:
	rdx = rsi
	rcx = rbx
	call fn0000000000420A10 (retsize: 8;)
	SCZO = cond(eax - 0xBEEF<32>)
	branch Test(EQ,Z) l0000000000420B70
	// succ:  l0000000000420B86 l0000000000420B70
l0000000000420B86:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000420BDD
	// succ:  l0000000000420B8A l0000000000420BDD
l0000000000420B8A:
	rsi = Mem0[rsp + 0x28<64>:word64]
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000420BCA
	// succ:  l0000000000420B94 l0000000000420BCA
l0000000000420B94:
	rcx = Mem0[rsi + 0x18<64>:word64]
	eax = CloseHandle(rcx)
	rcx = Mem0[rsp + 0x28<64>:word64]
	Mem0[rsi + 0xC<64>:word32] = 0<32>
	Mem0[rsi:word32] = 0xDEADBEEF<32>
	Mem0[rsi + 8<64>:word32] = 0<32>
	Mem0[rsi + 4<64>:word32] = 0<32>
	free(rcx)
	Mem0[rbx:word64] = 0<64>
	// succ:  l0000000000420BCA
l0000000000420BCA:
	rcx = Mem0[0x00000000004AE598<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000420BE5
	// succ:  l0000000000420BD6 l0000000000420BE5
l0000000000420BD6:
	call fn0000000000422310 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000420BDD
l0000000000420BDD:
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420B50_exit
l0000000000420BE5:
	rcx = 0x0000000000491320<p64>
	r8 = 0x000000000041FE20<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE598<p64>:word64] = rax
	goto l0000000000420BD6
	// succ:  l0000000000420BD6
fn0000000000420B50_exit:


// fn0000000000420C10
// Return size: 8
define fn0000000000420C10
fn0000000000420C10_entry:
	rsp = fp
	// succ:  l0000000000420C10
l0000000000420C10:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx:word32] = 0<32>
	return
	// succ:  fn0000000000420C10_exit
fn0000000000420C10_exit:


// fn0000000000420C20
// Return size: 8
define fn0000000000420C20
fn0000000000420C20_entry:
	rsp = fp
	// succ:  l0000000000420C20
l0000000000420C20:
	SCZO = cond(rcx - 1<64>)
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000420C20_exit
fn0000000000420C20_exit:


// fn0000000000420C30
// Return size: 8
define fn0000000000420C30
fn0000000000420C30_entry:
	rsp = fp
	// succ:  l0000000000420C30
l0000000000420C30:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000420C3A
	// succ:  l0000000000420C35 l0000000000420C3A
l0000000000420C35:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(NE,Z) l0000000000420C40
	// succ:  l0000000000420C3A l0000000000420C40
l0000000000420C3A:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000420C30_exit
l0000000000420C40:
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 3<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rdx:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000420C30_exit
fn0000000000420C30_exit:


// fn0000000000420C50
// Return size: 8
define fn0000000000420C50
fn0000000000420C50_entry:
	rsp = fp
	// succ:  l0000000000420C50
l0000000000420C50:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000420C5F
	// succ:  l0000000000420C5A l0000000000420C5F
l0000000000420C5A:
	SCZO = cond(edx - 2<32>)
	branch Test(ULE,CZ) l0000000000420C61
	// succ:  l0000000000420C5F l0000000000420C61
l0000000000420C5F:
	return
	// succ:  fn0000000000420C50_exit
l0000000000420C61:
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0xFFFFFFFC<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edx = edx | eax
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx:word32] = edx
	return
	// succ:  fn0000000000420C50_exit
fn0000000000420C50_exit:


// fn0000000000420C70
// Return size: 8
define fn0000000000420C70
fn0000000000420C70_entry:
	rsp = fp
	// succ:  l0000000000420C70
l0000000000420C70:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000420C7A
	// succ:  l0000000000420C75 l0000000000420C7A
l0000000000420C75:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(NE,Z) l0000000000420C80
	// succ:  l0000000000420C7A l0000000000420C80
l0000000000420C7A:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000420C70_exit
l0000000000420C80:
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax >>u 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rdx:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000420C70_exit
fn0000000000420C70_exit:


// fn0000000000420C90
// Return size: 8
define fn0000000000420C90
fn0000000000420C90_entry:
	rsp = fp
	// succ:  l0000000000420C90
l0000000000420C90:
	SCZO = cond(edx - 1<32>)
	branch Test(UGT,CZ) l0000000000420C9A
	// succ:  l0000000000420C95 l0000000000420C9A
l0000000000420C95:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000420CA0
	// succ:  l0000000000420C9A l0000000000420CA0
l0000000000420C9A:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000420C90_exit
l0000000000420CA0:
	SCZO = cond(edx - 1<32>)
	eax = 0x28<32>
	rax = CONVERT(eax, word32, uint64)
	edx = 0<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(EQ,Z) l0000000000420CB0
	// succ:  l0000000000420CAD_1 l0000000000420CB0
l0000000000420CAD_1:
	eax = edx
	// succ:  l0000000000420CB0
l0000000000420CB0:
	v13 = Mem0[rcx:word32] & 0xFFFFFFFB<32>
	Mem0[rcx:word32] = v13
	SZO = cond(Mem0[rcx:word32])
	C = false
	return
	// succ:  fn0000000000420C90_exit
fn0000000000420C90_exit:


// fn0000000000420CC0
// Return size: 8
define fn0000000000420CC0
fn0000000000420CC0_entry:
	rsp = fp
	// succ:  l0000000000420CC0
l0000000000420CC0:
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0x18<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rdx:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000420CC0_exit
fn0000000000420CC0_exit:


// fn0000000000420CD0
// Return size: 8
define fn0000000000420CD0
fn0000000000420CD0_entry:
	rsp = fp
	// succ:  l0000000000420CD0
l0000000000420CD0:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	r8d = edx
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d & 0x18<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(r8d - 0x18<32>)
	branch Test(EQ,Z) l0000000000420CE4
	// succ:  l0000000000420CE2 l0000000000420CE4
l0000000000420CE2:
	return
	// succ:  fn0000000000420CD0_exit
l0000000000420CE4:
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0xFFFFFFE7<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edx = edx | eax
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx:word32] = edx
	return
	// succ:  fn0000000000420CD0_exit
fn0000000000420CD0_exit:


// fn0000000000420CF0
// Return size: 8
define fn0000000000420CF0
fn0000000000420CF0_entry:
	rsp = fp
	// succ:  l0000000000420CF0
l0000000000420CF0:
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax >>u 5<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rdx:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000420CF0_exit
fn0000000000420CF0_exit:


// fn0000000000420D00
// Return size: 8
define fn0000000000420D00
fn0000000000420D00_entry:
	rsp = fp
	// succ:  l0000000000420D00
l0000000000420D00:
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = edx << 5<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = eax & 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edx = edx + eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx:word32] = edx
	return
	// succ:  fn0000000000420D00_exit
fn0000000000420D00_exit:


// fn0000000000420D10
// Return size: 8
define fn0000000000420D10
fn0000000000420D10_entry:
	rsp = fp
	// succ:  l0000000000420D10
l0000000000420D10:
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	return
	// succ:  fn0000000000420D10_exit
fn0000000000420D10_exit:


// fn0000000000420D20
// Return size: 0
define fn0000000000420D20
fn0000000000420D20_entry:
	rsp = fp
	// succ:  l0000000000420D20
l0000000000420D20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbp = r9
	ebx = edx
	rbx = CONVERT(ebx, word32, uint64)
	rdi = rcx
	rsi = r8
	rcx = r8
	EnterCriticalSection(rcx)
	rdx = CONVERT(Mem0[rbp + 0<64>:word32], word32, int64)
	r10 = CONVERT(ebx, word32, int64)
	r10 = r10 + rdx
	SCZO = cond(r10)
	rax = rdx
	SCZO = cond(r10 - 0x7FFFFFFF<64>)
	branch Test(LE,SZO) l0000000000420D70
	// succ:  l0000000000420D52 l0000000000420D70
l0000000000420D52:
	rcx = rsi
	LeaveCriticalSection(rcx)
	eax = 0x22<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420D20_exit
l0000000000420D70:
	eax = -eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	C = eax == 0<32>
	__lock()
	v19 = Mem0[rbp + 0<64>:word32] + ebx
	Mem0[rbp + 0<64>:word32] = v19
	SCZO = cond(v19)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000420D91
	// succ:  l0000000000420D7A l0000000000420D91
l0000000000420D7A:
	SCZO = cond(eax - ebx)
	rcx = rdi
	branch Test(LE,SZO) l0000000000420D82
	// succ:  l0000000000420D7F_1 l0000000000420D82
l0000000000420D7F_1:
	eax = ebx
	// succ:  l0000000000420D82
l0000000000420D82:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	eax = ReleaseSemaphore(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000420DA5
	// succ:  l0000000000420D91 l0000000000420DA5
l0000000000420D91:
	rcx = rsi
	LeaveCriticalSection(rcx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420D20_exit
l0000000000420DA5:
	ebx = -ebx
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	C = ebx == 0<32>
	__lock()
	v22 = Mem0[rbp + 0<64>:word32] + ebx
	Mem0[rbp + 0<64>:word32] = v22
	SCZO = cond(v22)
	rcx = rsi
	LeaveCriticalSection(rcx)
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420D20_exit
fn0000000000420D20_exit:


// fn0000000000420DD0
// Return size: 8
define fn0000000000420DD0
fn0000000000420DD0_entry:
	rsp = fp
	// succ:  l0000000000420DD0
l0000000000420DD0:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l0000000000420DF0
	// succ:  l0000000000420DD9 l0000000000420DF0
l0000000000420DD9:
	Mem0[0x00000000004AE5A8<p64>:word64] = rdx
	// succ:  l0000000000420DE0
l0000000000420DE0:
	Mem0[0x00000000004AE5B0<p64>:word32] = ecx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000420DD0_exit
l0000000000420DF0:
	SCZO = cond(Mem0[0x00000000004AE5A8<p64>:word64] - 0<64>)
	branch Test(NE,Z) l0000000000420DE0
	// succ:  l0000000000420DFA l0000000000420DE0
l0000000000420DFA:
	Mem0[rsp + 0x2C<64>:word32] = ecx
	call _iob_func (retsize: 8;)
	ecx = Mem0[rsp + 0x2C<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	rax = rax + 0x30<64>
	SCZO = cond(rax)
	Mem0[0x00000000004AE5A8<p64>:word64] = rax
	Mem0[0x00000000004AE5B0<p64>:word32] = ecx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000420DD0_exit
fn0000000000420DD0_exit:


// fn0000000000420E20
// Return size: 8
define fn0000000000420E20
fn0000000000420E20_entry:
	rsp = fp
	// succ:  l0000000000420E20
l0000000000420E20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	eax = Mem0[0x00000000004AE5B0<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000420E72
	// succ:  l0000000000420E32 l0000000000420E72
l0000000000420E32:
	rax = Mem0[rcx:word64]
	rsi = rdx
	rbx = rcx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000420E80
	// succ:  l0000000000420E40 l0000000000420E80
l0000000000420E40:
	ebp = Mem0[rax + 8<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	edi = Mem0[rax:word32]
	rdi = CONVERT(edi, word32, uint64)
	eax = GetCurrentThreadId()
	r8 = Mem0[rbx:word64]
	rcx = Mem0[0x00000000004AE5A8<p64>:word64]
	rdx = 0x000000000049145B<p64>
	r9d = eax
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x30<64>:word64] = rsi
	Mem0[rsp + 0x28<64>:word32] = ebp
	Mem0[rsp + 0x20<64>:word32] = edi
	eax = fprintf(rcx, rdx, 0<32>)
	// succ:  l0000000000420E72
l0000000000420E72:
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420E20_exit
l0000000000420E80:
	eax = GetCurrentThreadId()
	r8 = Mem0[rbx:word64]
	rcx = Mem0[0x00000000004AE5A8<p64>:word64]
	rdx = 0x0000000000491450<p64>
	r9d = eax
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x20<64>:word64] = rsi
	eax = fprintf(rcx, rdx, 0<32>)
	goto l0000000000420E72
	// succ:  l0000000000420E72
fn0000000000420E20_exit:


// fn0000000000420EB0
// Return size: 8
define fn0000000000420EB0
fn0000000000420EB0_entry:
	rsp = fp
	// succ:  l0000000000420EB0
l0000000000420EB0:
	r8 = 0x0000000000420D10<p64>
	rcx = 0x0000000000491472<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000420EC3_thunk_fn0000000000421EA0
l0000000000420EC3_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn0000000000420EB0_exit
fn0000000000420EB0_exit:


// fn0000000000420ED0
// Return size: 8
define fn0000000000420ED0
fn0000000000420ED0_entry:
	rsp = fp
	// succ:  l0000000000420ED0
l0000000000420ED0:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000420EE2
	// succ:  l0000000000420EDA l0000000000420EE2
l0000000000420EDA:
	Mem0[rcx:word32] = 0<32>
	al = al ^ al
	SZO = cond(al)
	C = false
	// succ:  l0000000000420EE2
l0000000000420EE2:
	return
	// succ:  fn0000000000420ED0_exit
fn0000000000420ED0_exit:


// fn0000000000420EF0
// Return size: 8
define fn0000000000420EF0
fn0000000000420EF0_entry:
	rsp = fp
	// succ:  l0000000000420EF0
l0000000000420EF0:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000420F02
	// succ:  l0000000000420EFA l0000000000420F02
l0000000000420EFA:
	Mem0[rcx:word32] = 0<32>
	al = al ^ al
	SZO = cond(al)
	C = false
	// succ:  l0000000000420F02
l0000000000420F02:
	return
	// succ:  fn0000000000420EF0_exit
fn0000000000420EF0_exit:


// fn0000000000420F10
// Return size: 8
define fn0000000000420F10
fn0000000000420F10_entry:
	rsp = fp
	// succ:  l0000000000420F10
l0000000000420F10:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000420F1A
	// succ:  l0000000000420F15 l0000000000420F1A
l0000000000420F15:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(NE,Z) l0000000000420F20
	// succ:  l0000000000420F1A l0000000000420F20
l0000000000420F1A:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000420F10_exit
l0000000000420F20:
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdx:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000420F10_exit
fn0000000000420F10_exit:


// fn0000000000420F30
// Return size: 8
define fn0000000000420F30
fn0000000000420F30_entry:
	rsp = fp
	// succ:  l0000000000420F30
l0000000000420F30:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000420F3A
	// succ:  l0000000000420F35 l0000000000420F3A
l0000000000420F35:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(NE,Z) l0000000000420F40
	// succ:  l0000000000420F3A l0000000000420F40
l0000000000420F3A:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000420F30_exit
l0000000000420F40:
	Mem0[rdx:word32] = 0<32>
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000420F30_exit
fn0000000000420F30_exit:


// fn0000000000420F50
// Return size: 8
define fn0000000000420F50
fn0000000000420F50_entry:
	rsp = fp
	// succ:  l0000000000420F50
l0000000000420F50:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000420F59
	// succ:  l0000000000420F55 l0000000000420F59
l0000000000420F55:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000420F60
	// succ:  l0000000000420F59 l0000000000420F60
l0000000000420F59:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000420F50_exit
l0000000000420F60:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000420F50_exit
fn0000000000420F50_exit:


// fn0000000000420F70
// Return size: 8
define fn0000000000420F70
fn0000000000420F70_entry:
	rsp = fp
	// succ:  l0000000000420F70
l0000000000420F70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ecx - 2<32>)
	branch Test(ULE,CZ) l0000000000420F90
	// succ:  l0000000000420F84 l0000000000420F90
l0000000000420F84:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420F70_exit
l0000000000420F90:
	edx = edx & 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r12 = r9
	rcx = r8
	branch Test(NE,Z) l0000000000421000
	// succ:  l0000000000420F9B l0000000000421000
l0000000000420F9B:
	call fn0000000000423290 (retsize: 8;)
	rbx = rax
	// succ:  l0000000000420FA3
l0000000000420FA3:
	ebp = 0x1869F<32>
	rbp = CONVERT(ebp, word32, uint64)
	goto l0000000000420FB5
	// succ:  l0000000000420FB5
l0000000000420FB0:
	rbx = rbx - rax
	SCZO = cond(rbx)
	branch Test(EQ,Z) l0000000000420FDD
	// succ:  l0000000000420FB5 l0000000000420FDD
l0000000000420FB5:
	SCZO = cond(rbx - 0x1869E<64>)
	edi = ebp
	rdi = CONVERT(edi, word32, uint64)
	branch Test(UGT,CZ) l0000000000420FC1
	// succ:  l0000000000420FBE_1 l0000000000420FC1
l0000000000420FBE_1:
	edi = ebx
	// succ:  l0000000000420FC1
l0000000000420FC1:
	call fn0000000000423260 (retsize: 8;)
	ecx = edi
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rax
	call fn000000000041EF40 (retsize: 8;)
	call fn0000000000423260 (retsize: 8;)
	rax = rax - rsi
	SCZO = cond(rax)
	SCZO = cond(rbx - rax)
	branch Test(UGT,CZ) l0000000000420FB0
	// succ:  l0000000000420FDD l0000000000420FB0
l0000000000420FDD:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l0000000000420F84
	// succ:  l0000000000420FE4 l0000000000420F84
l0000000000420FE4:
	Mem0[r12:word64] = 0<64>
	Mem0[r12 + 8<64>:word64] = 0<64>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000420F70_exit
l0000000000421000:
	call fn00000000004232C0 (retsize: 8;)
	rbx = rax
	goto l0000000000420FA3
	// succ:  l0000000000420FA3
fn0000000000420F70_exit:


