// fn00000000004313A0
// Return size: 8
define fn00000000004313A0
fn00000000004313A0_entry:
	rsp = fp
	// succ:  l00000000004313A0
l00000000004313A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004313A0_exit
fn00000000004313A0_exit:


// fn0000000000431410
// Return size: 8
define fn0000000000431410
fn0000000000431410_entry:
	rsp = fp
	// succ:  l0000000000431410
l0000000000431410:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000431410_exit
fn0000000000431410_exit:


// fn0000000000431480
// Return size: 8
define fn0000000000431480
fn0000000000431480_entry:
	rsp = fp
	// succ:  l0000000000431480
l0000000000431480:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000431480_exit
fn0000000000431480_exit:


// fn00000000004314F0
// Return size: 8
define fn00000000004314F0
fn00000000004314F0_entry:
	rsp = fp
	// succ:  l00000000004314F0
l00000000004314F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x58<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004314F0_exit
fn00000000004314F0_exit:


// fn0000000000431560
// Return size: 8
define fn0000000000431560
fn0000000000431560_entry:
	rsp = fp
	// succ:  l0000000000431560
l0000000000431560:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000431560_exit
fn0000000000431560_exit:


// fn00000000004315D0
// Return size: 8
define fn00000000004315D0
fn00000000004315D0_entry:
	rsp = fp
	// succ:  l00000000004315D0
l00000000004315D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x00000000004324B0<p64>
	xmm3 = Mem0[r8:word128]
	rbx = rcx
	r8 = Mem0[rsp + 0x98<64>:word64]
	rcx = Mem0[rsp + 0x90<64>:word64]
	rax = Mem0[rax + 0x28<64>:word64]
	xmm1 = Mem0[r9:word128]
	r9 = Mem0[rsp + 0xA0<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = r8
	r8 = rsp + 0x50<64>
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	Mem0[rsp + 0x50<64>:word128] = xmm3
	Mem0[rsp + 0x30<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x40<64>:word128] = xmm1
	branch Test(NE,Z) l0000000000431641
	// succ:  l0000000000431633 l0000000000431641
l0000000000431633:
	call fn000000000042CD70 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004315D0_exit
l0000000000431641:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004315D0_exit
fn00000000004315D0_exit:


// fn0000000000431650
// Return size: 8
define fn0000000000431650
fn0000000000431650_entry:
	rsp = fp
	// succ:  l0000000000431650
l0000000000431650:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x0000000000432520<p64>
	xmm3 = Mem0[r8:word128]
	rbx = rcx
	r8 = Mem0[rsp + 0x98<64>:word64]
	rcx = Mem0[rsp + 0x90<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	xmm1 = Mem0[r9:word128]
	r9 = Mem0[rsp + 0xA0<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = r8
	r8 = rsp + 0x50<64>
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	Mem0[rsp + 0x50<64>:word128] = xmm3
	Mem0[rsp + 0x30<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x40<64>:word128] = xmm1
	branch Test(NE,Z) l00000000004316C1
	// succ:  l00000000004316B3 l00000000004316C1
l00000000004316B3:
	call fn000000000042D710 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000431650_exit
l00000000004316C1:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000431650_exit
fn0000000000431650_exit:


// fn00000000004316D0
// Return size: 8
define fn00000000004316D0
fn00000000004316D0_entry:
	rsp = fp
	// succ:  l00000000004316D0
l00000000004316D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x0000000000432590<p64>
	xmm3 = Mem0[r8:word128]
	rbx = rcx
	r8 = Mem0[rsp + 0x98<64>:word64]
	rcx = Mem0[rsp + 0x90<64>:word64]
	rax = Mem0[rax + 0x30<64>:word64]
	xmm1 = Mem0[r9:word128]
	r9 = Mem0[rsp + 0xA0<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = r8
	r8 = rsp + 0x50<64>
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	Mem0[rsp + 0x50<64>:word128] = xmm3
	Mem0[rsp + 0x30<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x40<64>:word128] = xmm1
	branch Test(NE,Z) l0000000000431741
	// succ:  l0000000000431733 l0000000000431741
l0000000000431733:
	call fn000000000042E0D0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004316D0_exit
l0000000000431741:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004316D0_exit
fn00000000004316D0_exit:


// fn0000000000431750
// Return size: 8
define fn0000000000431750
fn0000000000431750_entry:
	rsp = fp
	// succ:  l0000000000431750
l0000000000431750:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x0000000000432600<p64>
	xmm3 = Mem0[r8:word128]
	rbx = rcx
	r8 = Mem0[rsp + 0x98<64>:word64]
	rcx = Mem0[rsp + 0x90<64>:word64]
	rax = Mem0[rax + 0x20<64>:word64]
	xmm1 = Mem0[r9:word128]
	r9 = Mem0[rsp + 0xA0<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = r8
	r8 = rsp + 0x50<64>
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	Mem0[rsp + 0x50<64>:word128] = xmm3
	Mem0[rsp + 0x30<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x40<64>:word128] = xmm1
	branch Test(NE,Z) l00000000004317C1
	// succ:  l00000000004317B3 l00000000004317C1
l00000000004317B3:
	call fn000000000042EA70 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000431750_exit
l00000000004317C1:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000431750_exit
fn0000000000431750_exit:


// fn00000000004317D0
// Return size: 8
define fn00000000004317D0
fn00000000004317D0_entry:
	rsp = fp
	// succ:  l00000000004317D0
l00000000004317D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x0000000000432670<p64>
	xmm3 = Mem0[r8:word128]
	rbx = rcx
	r8 = Mem0[rsp + 0x98<64>:word64]
	rcx = Mem0[rsp + 0x90<64>:word64]
	rax = Mem0[rax + 0x38<64>:word64]
	xmm1 = Mem0[r9:word128]
	r9 = Mem0[rsp + 0xA0<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = r8
	r8 = rsp + 0x50<64>
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	Mem0[rsp + 0x50<64>:word128] = xmm3
	Mem0[rsp + 0x30<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x40<64>:word128] = xmm1
	branch Test(NE,Z) l0000000000431841
	// succ:  l0000000000431833 l0000000000431841
l0000000000431833:
	call fn000000000042F430 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004317D0_exit
l0000000000431841:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004317D0_exit
fn00000000004317D0_exit:


// fn0000000000431850
// Return size: 8
define fn0000000000431850
fn0000000000431850_entry:
	rsp = fp
	// succ:  l0000000000431850
l0000000000431850:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x00000000004326E0<p64>
	xmm3 = Mem0[r8:word128]
	rbx = rcx
	r8 = Mem0[rsp + 0x98<64>:word64]
	rcx = Mem0[rsp + 0x90<64>:word64]
	rax = Mem0[rax + 0x40<64>:word64]
	xmm1 = Mem0[r9:word128]
	r9 = Mem0[rsp + 0xA0<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = r8
	r8 = rsp + 0x50<64>
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	Mem0[rsp + 0x50<64>:word128] = xmm3
	Mem0[rsp + 0x30<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x40<64>:word128] = xmm1
	branch Test(NE,Z) l00000000004318C1
	// succ:  l00000000004318B3 l00000000004318C1
l00000000004318B3:
	call fn000000000042FE30 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000431850_exit
l00000000004318C1:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000431850_exit
fn0000000000431850_exit:


// fn00000000004318D0
// Return size: 8
define fn00000000004318D0
fn00000000004318D0_entry:
	rsp = fp
	// succ:  l00000000004318D0
l00000000004318D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp + 0xD0<64>:word64]
	rax = Mem0[r8:word64]
	rsi = rcx
	rbp = Mem0[r8 + 8<64>:word64]
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	r8 = rsp + 0x50<64>
	edi = Mem0[rbx + 0x18<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	ecx = edi
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx & 0xFFFFFFB5<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	ecx = ecx | 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	Mem0[rbx + 0x18<64>:word32] = ecx
	Mem0[rsp + 0x50<64>:word64] = rax
	rax = rsp + 0x78<64>
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0xD8<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rbx
	Mem0[rsp + 0x58<64>:word64] = rbp
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn000000000042FE30 (retsize: 8;)
	rax = Mem0[rsp + 0x60<64>:word64]
	edx = Mem0[rsp + 0x68<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r8 = Mem0[rsp + 0x78<64>:word64]
	Mem0[rbx + 0x18<64>:word32] = edi
	rcx = rax
	rax = 0xFFFFFFFF00000000<64>
	rax = rax & rbp
	SZO = cond(rax)
	C = false
	Mem0[rsi:word64] = rcx
	rax = rax | rdx
	SZO = cond(rax)
	C = false
	rdx = Mem0[rsp + 0xE0<64>:word64]
	Mem0[rsi + 8<64>:word64] = rax
	rax = rsi
	Mem0[rdx:word64] = r8
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004318D0_exit
fn00000000004318D0_exit:


// fn0000000000431990
// Return size: 8
define fn0000000000431990
fn0000000000431990_entry:
	rsp = fp
	// succ:  l0000000000431990
l0000000000431990:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xB8<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0x120<64>:word64]
	r10 = Mem0[r9 + 8<64>:word64]
	r13 = Mem0[r8:word64]
	r14 = Mem0[r8 + 8<64>:word64]
	rdi = rcx
	r9 = Mem0[r9:word64]
	rbp = Mem0[rsp + 0x128<64>:word64]
	SZO = cond(Mem0[rax + 0x18<64>:byte] & 1<8>)
	C = false
	Mem0[rsp + 0x88<64>:word64] = r10
	Mem0[rsp + 0x90<64>:word64] = r13
	Mem0[rsp + 0x98<64>:word64] = r14
	Mem0[rsp + 0x80<64>:word64] = r9
	branch Test(NE,Z) l0000000000431AA0
	// succ:  l00000000004319EE l0000000000431AA0
l00000000004319EE:
	r8 = rsp + 0xAC<64>
	Mem0[rsp + 0x50<64>:word64] = r9
	rcx = rsp + 0x70<64>
	r9 = rsp + 0x50<64>
	Mem0[rsp + 0x20<64>:word64] = rax
	Mem0[rsp + 0x28<64>:word64] = rbp
	Mem0[rsp + 0x30<64>:word64] = r8
	r8 = rsp + 0x60<64>
	Mem0[rsp + 0xAC<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rsp + 0x60<64>:word64] = r13
	Mem0[rsp + 0x68<64>:word64] = r14
	Mem0[rsp + 0x58<64>:word64] = r10
	call fn000000000042D710 (retsize: 8;)
	rax = Mem0[rsp + 0x70<64>:word64]
	Mem0[rsp + 0x90<64>:word64] = rax
	eax = Mem0[rsp + 0x78<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x98<64>:word32] = eax
	eax = Mem0[rsp + 0xAC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(ULE,CZ) l0000000000431D32
	// succ:  l0000000000431A60 l0000000000431D32
l0000000000431A60:
	rax = Mem0[rsp + 0x130<64>:word64]
	rdx = rsp + 0x80<64>
	rcx = rsp + 0x90<64>
	Mem0[rax:byte] = 1<8>
	Mem0[rbp + 0<64>:word32] = 4<32>
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000431D3F
	// succ:  l0000000000431A8F l0000000000431D3F
l0000000000431A8F:
	v24 = Mem0[rbp + 0<64>:word32] | 2<32>
	Mem0[rbp + 0<64>:word32] = v24
	SZO = cond(Mem0[rbp + 0<64>:word32])
	C = false
	goto l0000000000431D3F
	// succ:  l0000000000431D3F
l0000000000431AA0:
	rdx = rax + 0xD0<64>
	rcx = rsp + 0xAC<64>
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	call fn000000000042A360 (retsize: 8;)
	SCZO = cond(Mem0[rax + 0x40<64>:word64] - 0<64>)
	r12 = rax
	sil = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(Mem0[rax + 0x30<64>:word64] - 0<64>)
	bl = CONVERT(Test(EQ,Z), bool, int8)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	// succ:  l0000000000431AE0
l0000000000431AE0:
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(sil - al)
	branch Test(UGT,CZ) l0000000000431C06
	// succ:  l0000000000431AEE l0000000000431C06
l0000000000431AEE:
	rcx = Mem0[rsp + 0x90<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000431D17
	// succ:  l0000000000431AFF l0000000000431D17
l0000000000431AFF:
	SCZO = cond(Mem0[rsp + 0x98<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000431CB0
	// succ:  l0000000000431B0D l0000000000431CB0
l0000000000431B0D:
	rcx = Mem0[rsp + 0x80<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000431E37
	// succ:  l0000000000431B1E l0000000000431E37
l0000000000431B1E:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l0000000000431B20
l0000000000431B20:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x88<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000431C42
	// succ:  l0000000000431B30 l0000000000431C42
l0000000000431B30:
	SCZO = cond(al - dl)
	branch Test(EQ,Z) l0000000000431C64
	// succ:  l0000000000431B38 l0000000000431C64
l0000000000431B38:
	rcx = Mem0[rsp + 0x90<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000431E43
	// succ:  l0000000000431B49 l0000000000431E43
l0000000000431B49:
	edx = Mem0[rsp + 0x98<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000431CE0
	// succ:  l0000000000431B59 l0000000000431CE0
l0000000000431B59:
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000431B6B
	// succ:  l0000000000431B5E l0000000000431B6B
l0000000000431B5E:
	rax = Mem0[r12 + 0x38<64>:word64]
	SCZO = cond(Mem0[rax + r13:byte] - dl)
	r14b = CONVERT(Test(EQ,Z), bool, int8)
	// succ:  l0000000000431B6B
l0000000000431B6B:
	SCZO = cond(r14b - bl)
	branch Test(ULT,C) l0000000000431C06
	// succ:  l0000000000431B74 l0000000000431C06
l0000000000431B74:
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l0000000000431B85
	// succ:  l0000000000431B78 l0000000000431B85
l0000000000431B78:
	rax = Mem0[r12 + 0x28<64>:word64]
	SCZO = cond(Mem0[rax + r13:byte] - dl)
	r15b = CONVERT(Test(EQ,Z), bool, int8)
	// succ:  l0000000000431B85
l0000000000431B85:
	SCZO = cond(r15b - sil)
	branch Test(ULT,C) l0000000000431DA0
	// succ:  l0000000000431B8E l0000000000431DA0
l0000000000431B8E:
	eax = r14d
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r15b - al)
	branch Test(ULT,C) l0000000000431DA0
	// succ:  l0000000000431B9D l0000000000431DA0
l0000000000431B9D:
	rcx = Mem0[rsp + 0x90<64>:word64]
	r13 = r13 + 1<64>
	SCZO = cond(r13)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000431BCF
	// succ:  l0000000000431BAE l0000000000431BCF
l0000000000431BAE:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000431D70
	// succ:  l0000000000431BBC l0000000000431D70
l0000000000431BBC:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l0000000000431BC4
l0000000000431BC4:
	Mem0[rsp + 0x98<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l0000000000431BCF
l0000000000431BCF:
	SZO = cond(r14b & r14b)
	C = false
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	branch Test(EQ,Z) l0000000000431BE2
	// succ:  l0000000000431BD9 l0000000000431BE2
l0000000000431BD9:
	SCZO = cond(r13 - Mem0[r12 + 0x40<64>:word64])
	sil = CONVERT(Test(UGE,C), bool, int8)
	// succ:  l0000000000431BE2
l0000000000431BE2:
	SZO = cond(r15b & r15b)
	C = false
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(EQ,Z) l0000000000431AE0
	// succ:  l0000000000431BF0 l0000000000431AE0
l0000000000431BF0:
	SCZO = cond(r13 - Mem0[r12 + 0x30<64>:word64])
	bl = CONVERT(Test(UGE,C), bool, int8)
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(sil - al)
	branch Test(ULE,CZ) l0000000000431AEE
	// succ:  l0000000000431C06 l0000000000431AEE
l0000000000431C06:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r14b & r14b)
	C = false
	branch Test(EQ,Z) l0000000000431C70
	// succ:  l0000000000431C0D l0000000000431C70
l0000000000431C0D:
	SCZO = cond(Mem0[r12 + 0x40<64>:word64] - r13)
	branch Test(NE,Z) l0000000000431C70
	// succ:  l0000000000431C14 l0000000000431C70
l0000000000431C14:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000431C70
	// succ:  l0000000000431C19 l0000000000431C70
l0000000000431C19:
	rsi = Mem0[rsp + 0x130<64>:word64]
	SZO = cond(r15b & r15b)
	C = false
	Mem0[rsi:byte] = 0<8>
	branch Test(EQ,Z) l0000000000431C34
	// succ:  l0000000000431C29 l0000000000431C34
l0000000000431C29:
	SCZO = cond(Mem0[r12 + 0x30<64>:word64] - r13)
	branch Test(EQ,Z) l0000000000431DBC
	// succ:  l0000000000431C34 l0000000000431DBC
l0000000000431C34:
	eax = eax << 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax >> 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & 2<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000431E2F
	// succ:  l0000000000431E2F
l0000000000431C42:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000431DD0
	// succ:  l0000000000431C50 l0000000000431DD0
l0000000000431C50:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000431C53
l0000000000431C53:
	Mem0[rsp + 0x88<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - dl)
	branch Test(NE,Z) l0000000000431B38
	// succ:  l0000000000431C64 l0000000000431B38
l0000000000431C64:
	SZO = cond(r14b & r14b)
	C = false
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l0000000000431C0D
	// succ:  l0000000000431C6E l0000000000431C0D
l0000000000431C6E:
	// succ:  l0000000000431C70
l0000000000431C70:
	SZO = cond(r15b & r15b)
	C = false
	branch Test(EQ,Z) l0000000000431D80
	// succ:  l0000000000431C79 l0000000000431D80
l0000000000431C79:
	SCZO = cond(Mem0[r12 + 0x30<64>:word64] - r13)
	branch Test(NE,Z) l0000000000431D80
	// succ:  l0000000000431C84 l0000000000431D80
l0000000000431C84:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000431D80
	// succ:  l0000000000431C8D l0000000000431D80
l0000000000431C8D:
	rsi = Mem0[rsp + 0x130<64>:word64]
	eax = eax << 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax >> 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & 2<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsi:byte] = 1<8>
	Mem0[rbp + 0<64>:word32] = eax
	goto l0000000000431D3F
	// succ:  l0000000000431D3F
l0000000000431CB0:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000431D00
	// succ:  l0000000000431CBA l0000000000431D00
l0000000000431CBA:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000431CBD
l0000000000431CBD:
	rcx = Mem0[rsp + 0x80<64>:word64]
	Mem0[rsp + 0x98<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000431B1E
	// succ:  l0000000000431CD5 l0000000000431B1E
l0000000000431CD5:
	goto l0000000000431B38
	// succ:  l0000000000431B38
l0000000000431CE0:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000431E00
	// succ:  l0000000000431CEE l0000000000431E00
l0000000000431CEE:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000431CF1
l0000000000431CF1:
	Mem0[rsp + 0x98<64>:word32] = eax
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000431B59
	// succ:  l0000000000431B59
l0000000000431D00:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000431CBD
	// succ:  l0000000000431D0B l0000000000431CBD
l0000000000431D0B:
	Mem0[rsp + 0x90<64>:word64] = 0<64>
	// succ:  l0000000000431D17
l0000000000431D17:
	rcx = Mem0[rsp + 0x80<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000431C64
	// succ:  l0000000000431D28 l0000000000431C64
l0000000000431D28:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000431B20
	// succ:  l0000000000431B20
l0000000000431D32:
	rsi = Mem0[rsp + 0x130<64>:word64]
	Mem0[rsi:byte] = al
	v36 = Mem0[rsi:byte] & 1<8>
	Mem0[rsi:byte] = v36
	SZO = cond(Mem0[rsi:byte])
	C = false
	// succ:  l0000000000431D3F
l0000000000431D3F:
	rax = Mem0[rsp + 0x90<64>:word64]
	rdx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rdi:word64] = rax
	rax = rdi
	Mem0[rdi + 8<64>:word64] = rdx
	rsp = rsp + 0xB8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000431990_exit
l0000000000431D70:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l0000000000431BC4
	// succ:  l0000000000431BC4
l0000000000431D80:
	rbx = Mem0[rsp + 0x130<64>:word64]
	SZO = cond(al & al)
	C = false
	Mem0[rbx:byte] = 0<8>
	branch Test(EQ,Z) l0000000000431DBC
	// succ:  l0000000000431D8F l0000000000431DBC
l0000000000431D8F:
	Mem0[rbp + 0<64>:word32] = 6<32>
	goto l0000000000431D3F
	// succ:  l0000000000431D3F
l0000000000431DA0:
	SZO = cond(r14b & r14b)
	C = false
	branch Test(EQ,Z) l0000000000431DB1
	// succ:  l0000000000431DA5 l0000000000431DB1
l0000000000431DA5:
	SCZO = cond(r13 - Mem0[r12 + 0x40<64>:word64])
	branch Test(NE,Z) l0000000000431DB1
	// succ:  l0000000000431DAC l0000000000431DB1
l0000000000431DAC:
	SZO = cond(r13 & r13)
	C = false
	branch Test(NE,Z) l0000000000431E22
	// succ:  l0000000000431DB1 l0000000000431E22
l0000000000431DB1:
	rax = Mem0[rsp + 0x130<64>:word64]
	Mem0[rax:byte] = 0<8>
	// succ:  l0000000000431DBC
l0000000000431DBC:
	Mem0[rbp + 0<64>:word32] = 4<32>
	goto l0000000000431D3F
	// succ:  l0000000000431D3F
l0000000000431DD0:
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x4F<64>:byte] = dl
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	edx = CONVERT(Mem0[rsp + 0x4F<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l0000000000431C53
	// succ:  l0000000000431DE8 l0000000000431C53
l0000000000431DE8:
	Mem0[rsp + 0x80<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000431B30
	// succ:  l0000000000431B30
l0000000000431E00:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000431CF1
	// succ:  l0000000000431E0F l0000000000431CF1
l0000000000431E0F:
	Mem0[rsp + 0x90<64>:word64] = 0<64>
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000431B59
	// succ:  l0000000000431B59
l0000000000431E22:
	rax = Mem0[rsp + 0x130<64>:word64]
	Mem0[rax:byte] = 0<8>
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000431E2F
l0000000000431E2F:
	Mem0[rbp + 0<64>:word32] = eax
	goto l0000000000431D3F
	// succ:  l0000000000431D3F
l0000000000431E37:
	edx = Mem0[rsp + 0x98<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000431B59
	// succ:  l0000000000431B59
l0000000000431E43:
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000431B59
	// succ:  l0000000000431B59
fn0000000000431990_exit:


// fn0000000000431E50
// Return size: 8
define fn0000000000431E50
fn0000000000431E50_entry:
	rsp = fp
	// succ:  l0000000000431E50
l0000000000431E50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x98<64>
	SCZO = cond(rsp)
	rsi = Mem0[r8:word64]
	r15 = Mem0[r8 + 8<64>:word64]
	r13 = rsp + 0x88<64>
	rbx = rsp + 0x80<64>
	rbp = rcx
	rdi = rdx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = r13
	r12 = Mem0[r9:word64]
	r14 = Mem0[r9 + 8<64>:word64]
	call fn00000000004505D0 (retsize: 8;)
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rsp + 0x80<64>:word64] = rax
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rsp + 0x108<64>:word64]
	rcx = rsp + 0x70<64>
	r9 = rsp + 0x50<64>
	r8 = rsp + 0x60<64>
	Mem0[rsp + 0x30<64>:word64] = rbx
	rdx = rdi
	Mem0[rsp + 0x60<64>:word64] = rsi
	Mem0[rsp + 0x68<64>:word64] = r15
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0x100<64>:word64]
	Mem0[rsp + 0x50<64>:word64] = r12
	Mem0[rsp + 0x58<64>:word64] = r14
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000430800 (retsize: 8;)
	rsi = Mem0[rsp + 0x78<64>:word64]
	rdi = Mem0[rsp + 0x70<64>:word64]
	rax = 0xFFFFFFFF00000000<64>
	r15 = r15 & rax
	SZO = cond(r15)
	C = false
	ebx = esi
	rbx = CONVERT(ebx, word32, uint64)
	r15 = r15 | rbx
	SZO = cond(r15)
	C = false
	ebx = esi
	rbx = CONVERT(ebx, word32, uint64)
	Mem0[rsp + 0x48<64>:word64] = r15
	r15 = rdi
	call fn000000000046AC50 (retsize: 8;)
	r8 = Mem0[rsp + 0x108<64>:word64]
	rdx = Mem0[rsp + 0x110<64>:word64]
	r9 = r13
	rcx = Mem0[rsp + 0x80<64>:word64]
	Mem0[rsp + 0x88<64>:word64] = rax
	call fn000000000046FAC0 (retsize: 8;)
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000432010
	// succ:  l0000000000431F4E l0000000000432010
l0000000000431F4E:
	SCZO = cond(esi - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000431FC0
	// succ:  l0000000000431F53 l0000000000431FC0
l0000000000431F53:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l0000000000431F72
	// succ:  l0000000000431F58 l0000000000431F72
l0000000000431F58:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	// succ:  l0000000000431F5A
l0000000000431F5A:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r14d - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000431FD0
	// succ:  l0000000000431F62 l0000000000431FD0
l0000000000431F62:
	SCZO = cond(sil - al)
	branch Test(NE,Z) l0000000000431F72
	// succ:  l0000000000431F67 l0000000000431F72
l0000000000431F67:
	rax = Mem0[rsp + 0x108<64>:word64]
	v28 = Mem0[rax:word32] | 2<32>
	Mem0[rax:word32] = v28
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l0000000000431F72
l0000000000431F72:
	rax = 0xFFFFFFFF00000000<64>
	rax = rax & Mem0[rsp + 0x48<64>:word64]
	SZO = cond(rax)
	C = false
	rcx = Mem0[rsp + 0x80<64>:word64]
	Mem0[rbp + 0<64>:word64] = r15
	rbx = rbx | rax
	SZO = cond(rbx)
	C = false
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 8<64>:word64] = rbx
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000431FE0
	// succ:  l0000000000431FA2 l0000000000431FE0
l0000000000431FA2:
	rax = rbp
	rsp = rsp + 0x98<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000431E50_exit
l0000000000431FC0:
	rax = Mem0[rdi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rdi + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000432030
	// succ:  l0000000000431FCA l0000000000432030
l0000000000431FCA:
	ebx = CONVERT(Mem0[rax:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000431F53
	// succ:  l0000000000431F53
l0000000000431FD0:
	rax = Mem0[r12 + 0x18<64>:word64]
	SCZO = cond(Mem0[r12 + 0x10<64>:word64] - rax)
	branch Test(UGE,C) l0000000000431FF0
	// succ:  l0000000000431FDC l0000000000431FF0
l0000000000431FDC:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000431F62
	// succ:  l0000000000431F62
l0000000000431FE0:
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	rdx = r13
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000431FA2
	// succ:  l0000000000431FA2
l0000000000431FF0:
	rax = Mem0[r12:word64]
	rcx = r12
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000431FDC
	// succ:  l0000000000431FFF l0000000000431FDC
l0000000000431FFF:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000431F62
	// succ:  l0000000000431F62
l0000000000432010:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l0000000000431F67
	// succ:  l000000000043201C l0000000000431F67
l000000000043201C:
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	goto l0000000000431F5A
	// succ:  l0000000000431F5A
l0000000000432030:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000432010
	// succ:  l000000000043203E l0000000000432010
l000000000043203E:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000431F53
	// succ:  l0000000000431F53
fn0000000000431E50_exit:


// fn0000000000432070
// Return size: 8
define fn0000000000432070
fn0000000000432070_entry:
	rsp = fp
	// succ:  l0000000000432070
l0000000000432070:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x98<64>
	SCZO = cond(rsp)
	rsi = Mem0[r8:word64]
	r15 = Mem0[r8 + 8<64>:word64]
	r13 = rsp + 0x88<64>
	rbx = rsp + 0x80<64>
	rbp = rcx
	rdi = rdx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = r13
	r12 = Mem0[r9:word64]
	r14 = Mem0[r9 + 8<64>:word64]
	call fn00000000004505D0 (retsize: 8;)
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rsp + 0x80<64>:word64] = rax
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rsp + 0x108<64>:word64]
	rcx = rsp + 0x70<64>
	r9 = rsp + 0x50<64>
	r8 = rsp + 0x60<64>
	Mem0[rsp + 0x30<64>:word64] = rbx
	rdx = rdi
	Mem0[rsp + 0x60<64>:word64] = rsi
	Mem0[rsp + 0x68<64>:word64] = r15
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0x100<64>:word64]
	Mem0[rsp + 0x50<64>:word64] = r12
	Mem0[rsp + 0x58<64>:word64] = r14
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000430800 (retsize: 8;)
	rsi = Mem0[rsp + 0x78<64>:word64]
	rdi = Mem0[rsp + 0x70<64>:word64]
	rax = 0xFFFFFFFF00000000<64>
	r15 = r15 & rax
	SZO = cond(r15)
	C = false
	ebx = esi
	rbx = CONVERT(ebx, word32, uint64)
	r15 = r15 | rbx
	SZO = cond(r15)
	C = false
	ebx = esi
	rbx = CONVERT(ebx, word32, uint64)
	Mem0[rsp + 0x48<64>:word64] = r15
	r15 = rdi
	call fn000000000046AC50 (retsize: 8;)
	r8 = Mem0[rsp + 0x108<64>:word64]
	rdx = Mem0[rsp + 0x110<64>:word64]
	r9 = r13
	rcx = Mem0[rsp + 0x80<64>:word64]
	Mem0[rsp + 0x88<64>:word64] = rax
	call fn000000000046FBE0 (retsize: 8;)
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000432230
	// succ:  l000000000043216E l0000000000432230
l000000000043216E:
	SCZO = cond(esi - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l00000000004321E0
	// succ:  l0000000000432173 l00000000004321E0
l0000000000432173:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l0000000000432192
	// succ:  l0000000000432178 l0000000000432192
l0000000000432178:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	// succ:  l000000000043217A
l000000000043217A:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r14d - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l00000000004321F0
	// succ:  l0000000000432182 l00000000004321F0
l0000000000432182:
	SCZO = cond(sil - al)
	branch Test(NE,Z) l0000000000432192
	// succ:  l0000000000432187 l0000000000432192
l0000000000432187:
	rax = Mem0[rsp + 0x108<64>:word64]
	v28 = Mem0[rax:word32] | 2<32>
	Mem0[rax:word32] = v28
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l0000000000432192
l0000000000432192:
	rax = 0xFFFFFFFF00000000<64>
	rax = rax & Mem0[rsp + 0x48<64>:word64]
	SZO = cond(rax)
	C = false
	rcx = Mem0[rsp + 0x80<64>:word64]
	Mem0[rbp + 0<64>:word64] = r15
	rbx = rbx | rax
	SZO = cond(rbx)
	C = false
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 8<64>:word64] = rbx
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000432200
	// succ:  l00000000004321C2 l0000000000432200
l00000000004321C2:
	rax = rbp
	rsp = rsp + 0x98<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000432070_exit
l00000000004321E0:
	rax = Mem0[rdi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rdi + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000432250
	// succ:  l00000000004321EA l0000000000432250
l00000000004321EA:
	ebx = CONVERT(Mem0[rax:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000432173
	// succ:  l0000000000432173
l00000000004321F0:
	rax = Mem0[r12 + 0x18<64>:word64]
	SCZO = cond(Mem0[r12 + 0x10<64>:word64] - rax)
	branch Test(UGE,C) l0000000000432210
	// succ:  l00000000004321FC l0000000000432210
l00000000004321FC:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000432182
	// succ:  l0000000000432182
l0000000000432200:
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	rdx = r13
	call fn0000000000450A50 (retsize: 8;)
	goto l00000000004321C2
	// succ:  l00000000004321C2
l0000000000432210:
	rax = Mem0[r12:word64]
	rcx = r12
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l00000000004321FC
	// succ:  l000000000043221F l00000000004321FC
l000000000043221F:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000432182
	// succ:  l0000000000432182
l0000000000432230:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l0000000000432187
	// succ:  l000000000043223C l0000000000432187
l000000000043223C:
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	goto l000000000043217A
	// succ:  l000000000043217A
l0000000000432250:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000432230
	// succ:  l000000000043225E l0000000000432230
l000000000043225E:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000432173
	// succ:  l0000000000432173
fn0000000000432070_exit:


// fn0000000000432290
// Return size: 8
define fn0000000000432290
fn0000000000432290_entry:
	rsp = fp
	// succ:  l0000000000432290
l0000000000432290:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x98<64>
	SCZO = cond(rsp)
	rsi = Mem0[r8:word64]
	r15 = Mem0[r8 + 8<64>:word64]
	r13 = rsp + 0x88<64>
	rbx = rsp + 0x80<64>
	rbp = rcx
	rdi = rdx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = r13
	r12 = Mem0[r9:word64]
	r14 = Mem0[r9 + 8<64>:word64]
	call fn00000000004505D0 (retsize: 8;)
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rsp + 0x80<64>:word64] = rax
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rsp + 0x108<64>:word64]
	rcx = rsp + 0x70<64>
	r9 = rsp + 0x50<64>
	r8 = rsp + 0x60<64>
	Mem0[rsp + 0x30<64>:word64] = rbx
	rdx = rdi
	Mem0[rsp + 0x60<64>:word64] = rsi
	Mem0[rsp + 0x68<64>:word64] = r15
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0x100<64>:word64]
	Mem0[rsp + 0x50<64>:word64] = r12
	Mem0[rsp + 0x58<64>:word64] = r14
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000430800 (retsize: 8;)
	rsi = Mem0[rsp + 0x78<64>:word64]
	rdi = Mem0[rsp + 0x70<64>:word64]
	rax = 0xFFFFFFFF00000000<64>
	r15 = r15 & rax
	SZO = cond(r15)
	C = false
	ebx = esi
	rbx = CONVERT(ebx, word32, uint64)
	r15 = r15 | rbx
	SZO = cond(r15)
	C = false
	ebx = esi
	rbx = CONVERT(ebx, word32, uint64)
	Mem0[rsp + 0x48<64>:word64] = r15
	r15 = rdi
	call fn000000000046AC50 (retsize: 8;)
	r8 = Mem0[rsp + 0x108<64>:word64]
	rdx = Mem0[rsp + 0x110<64>:word64]
	r9 = r13
	rcx = Mem0[rsp + 0x80<64>:word64]
	Mem0[rsp + 0x88<64>:word64] = rax
	call fn000000000046FD00 (retsize: 8;)
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000432450
	// succ:  l000000000043238E l0000000000432450
l000000000043238E:
	SCZO = cond(esi - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000432400
	// succ:  l0000000000432393 l0000000000432400
l0000000000432393:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l00000000004323B2
	// succ:  l0000000000432398 l00000000004323B2
l0000000000432398:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	// succ:  l000000000043239A
l000000000043239A:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r14d - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000432410
	// succ:  l00000000004323A2 l0000000000432410
l00000000004323A2:
	SCZO = cond(sil - al)
	branch Test(NE,Z) l00000000004323B2
	// succ:  l00000000004323A7 l00000000004323B2
l00000000004323A7:
	rax = Mem0[rsp + 0x108<64>:word64]
	v28 = Mem0[rax:word32] | 2<32>
	Mem0[rax:word32] = v28
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l00000000004323B2
l00000000004323B2:
	rax = 0xFFFFFFFF00000000<64>
	rax = rax & Mem0[rsp + 0x48<64>:word64]
	SZO = cond(rax)
	C = false
	rcx = Mem0[rsp + 0x80<64>:word64]
	Mem0[rbp + 0<64>:word64] = r15
	rbx = rbx | rax
	SZO = cond(rbx)
	C = false
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 8<64>:word64] = rbx
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000432420
	// succ:  l00000000004323E2 l0000000000432420
l00000000004323E2:
	rax = rbp
	rsp = rsp + 0x98<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000432290_exit
l0000000000432400:
	rax = Mem0[rdi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rdi + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000432470
	// succ:  l000000000043240A l0000000000432470
l000000000043240A:
	ebx = CONVERT(Mem0[rax:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000432393
	// succ:  l0000000000432393
l0000000000432410:
	rax = Mem0[r12 + 0x18<64>:word64]
	SCZO = cond(Mem0[r12 + 0x10<64>:word64] - rax)
	branch Test(UGE,C) l0000000000432430
	// succ:  l000000000043241C l0000000000432430
l000000000043241C:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004323A2
	// succ:  l00000000004323A2
l0000000000432420:
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	rdx = r13
	call fn0000000000450A50 (retsize: 8;)
	goto l00000000004323E2
	// succ:  l00000000004323E2
l0000000000432430:
	rax = Mem0[r12:word64]
	rcx = r12
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000043241C
	// succ:  l000000000043243F l000000000043241C
l000000000043243F:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000004323A2
	// succ:  l00000000004323A2
l0000000000432450:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l00000000004323A7
	// succ:  l000000000043245C l00000000004323A7
l000000000043245C:
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	goto l000000000043239A
	// succ:  l000000000043239A
l0000000000432470:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000432450
	// succ:  l000000000043247E l0000000000432450
l000000000043247E:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000432393
	// succ:  l0000000000432393
fn0000000000432290_exit:


// fn00000000004324B0
// Return size: 8
define fn00000000004324B0
fn00000000004324B0_entry:
	rsp = fp
	// succ:  l00000000004324B0
l00000000004324B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0xA0<64>:word64]
	r10 = Mem0[r9 + 8<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	rbx = rcx
	r9 = Mem0[r9:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn000000000042CD70 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004324B0_exit
fn00000000004324B0_exit:


// fn0000000000432520
// Return size: 8
define fn0000000000432520
fn0000000000432520_entry:
	rsp = fp
	// succ:  l0000000000432520
l0000000000432520:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0xA0<64>:word64]
	r10 = Mem0[r9 + 8<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	rbx = rcx
	r9 = Mem0[r9:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn000000000042D710 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000432520_exit
fn0000000000432520_exit:


// fn0000000000432590
// Return size: 8
define fn0000000000432590
fn0000000000432590_entry:
	rsp = fp
	// succ:  l0000000000432590
l0000000000432590:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0xA0<64>:word64]
	r10 = Mem0[r9 + 8<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	rbx = rcx
	r9 = Mem0[r9:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn000000000042E0D0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000432590_exit
fn0000000000432590_exit:


// fn0000000000432600
// Return size: 8
define fn0000000000432600
fn0000000000432600_entry:
	rsp = fp
	// succ:  l0000000000432600
l0000000000432600:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0xA0<64>:word64]
	r10 = Mem0[r9 + 8<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	rbx = rcx
	r9 = Mem0[r9:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn000000000042EA70 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000432600_exit
fn0000000000432600_exit:


// fn0000000000432670
// Return size: 8
define fn0000000000432670
fn0000000000432670_entry:
	rsp = fp
	// succ:  l0000000000432670
l0000000000432670:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0xA0<64>:word64]
	r10 = Mem0[r9 + 8<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	rbx = rcx
	r9 = Mem0[r9:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn000000000042F430 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000432670_exit
fn0000000000432670_exit:


// fn00000000004326E0
// Return size: 8
define fn00000000004326E0
fn00000000004326E0_entry:
	rsp = fp
	// succ:  l00000000004326E0
l00000000004326E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0xA0<64>:word64]
	r10 = Mem0[r9 + 8<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	rbx = rcx
	r9 = Mem0[r9:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn000000000042FE30 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004326E0_exit
fn00000000004326E0_exit:


// fn0000000000432750
// Return size: 8
define fn0000000000432750
fn0000000000432750_entry:
	rsp = fp
	// succ:  l0000000000432750
l0000000000432750:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	rdx = Mem0[r8 + 8<64>:word64]
	rax = Mem0[r8:word64]
	rbx = Mem0[rsp + 0xF0<64>:word64]
	Mem0[rsp + 0xD0<64>:word64] = rcx
	rcx = rsp + 0x6E<64>
	Mem0[rsp + 0x58<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0x50<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0x48<64>:word64] = rdx
	rdx = rbx + 0xD0<64>
	Mem0[rsp + 0x40<64>:word64] = rax
	call fn000000000042A460 (retsize: 8;)
	edi = Mem0[rbx + 0x18<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	r12 = rax
	Mem0[rsp + 0x24<64>:word32] = 8<32>
	edi = edi & 0x4A<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SCZO = cond(edi - 0x40<32>)
	branch Test(EQ,Z) l00000000004327D0
	// succ:  l00000000004327BC l00000000004327D0
l00000000004327BC:
	SCZO = cond(edi - 8<32>)
	eax = 0xA<32>
	rax = CONVERT(eax, word32, uint64)
	edx = 0x10<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l00000000004327CC
	// succ:  l00000000004327C9_1 l00000000004327CC
l00000000004327C9_1:
	eax = edx
	// succ:  l00000000004327CC
l00000000004327CC:
	Mem0[rsp + 0x24<64>:word32] = eax
	// succ:  l00000000004327D0
l00000000004327D0:
	rbp = rsp + 0x40<64>
	rsi = rsp + 0x50<64>
	rdx = rbp
	rcx = rsi
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(NE,Z) l000000000043300C
	// succ:  l00000000004327F0 l000000000043300C
l00000000004327F0:
	rcx = rsi
	call fn000000000042B1B0 (retsize: 8;)
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - Mem0[r12 + 0x94<64>:word16])
	Mem0[rsp + 0x37<64>:byte] = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(NE,Z) l0000000000432DF1
	// succ:  l000000000043280F l0000000000432DF1
l000000000043280F:
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000432EC6
	// succ:  l000000000043281D l0000000000432EC6
l000000000043281D:
	SCZO = cond(bx - Mem0[r12 + 0x48<64>:word16])
	branch Test(EQ,Z) l0000000000432E06
	// succ:  l0000000000432829 l0000000000432E06
l0000000000432829:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000432844
	// succ:  l0000000000432833 l0000000000432844
l0000000000432833:
	call fn0000000000462DD0 (retsize: 8;)
	r11d = 0xFFFFFFFF<32>
	r11 = CONVERT(r11d, word32, uint64)
	Mem0[rsp + 0x58<64>:word16] = r11w
	// succ:  l0000000000432844
l0000000000432844:
	rdx = rbp
	rcx = rsi
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000432FC0
	// succ:  l0000000000432857 l0000000000432FC0
l0000000000432857:
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	Mem0[rsp + 0x35<64>:byte] = 0<8>
	// succ:  l0000000000432865
l0000000000432865:
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 0x10<32>)
	edi = 0x16<32>
	rdi = CONVERT(edi, word32, uint64)
	branch Test(EQ,Z) l0000000000432876
	// succ:  l0000000000432871 l0000000000432876
l0000000000432871:
	rdi = CONVERT(Mem0[rsp + 0x24<64>:word32], word32, int64)
	// succ:  l0000000000432876
l0000000000432876:
	rax = rsp + 0x6F<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x38<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(Mem0[r12 + 0x20<64>:byte] - 0<8>)
	Mem0[rsp + 0x70<64>:word64] = rax
	branch Test(NE,Z) l0000000000432F96
	// succ:  l000000000043289D l0000000000432F96
l000000000043289D:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	r15 = r12 + 0x9C<64>
	v39 = edx_eax
	edx = CONVERT(v39 % Mem0[rsp + 0x24<64>:word32], word64, uint32)
	eax = CONVERT(v39 /u Mem0[rsp + 0x24<64>:word32], word32, uint32)
	SCZO = cond(eax)
	Mem0[rsp + 0x30<64>:word32] = eax
	eax = CONVERT(Mem0[r12 + 0xC8<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	Mem0[rsp + 0x36<64>:byte] = al
	branch Test(NE,Z) l0000000000432B8A
	// succ:  l00000000004328C9 l0000000000432B8A
l00000000004328C9:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	SZO = cond(r14b & r14b)
	C = false
	branch Test(NE,Z) l0000000000432BD2
	// succ:  l00000000004328D6 l0000000000432BD2
l00000000004328D6:
	r15d = SLICE(rdi + 0x30<64>, word32, 0)
	r15 = CONVERT(r15d, word32, uint64)
	// succ:  l00000000004328DA
l00000000004328DA:
	SCZO = cond(rdi - 0xA<64>)
	branch Test(UGT,CZ) l0000000000432AA0
	// succ:  l00000000004328E4 l0000000000432AA0
l00000000004328E4:
	SCZO = cond(bx - 0x2F<16>)
	branch Test(ULE,CZ) l0000000000432BD2
	// succ:  l00000000004328EE l0000000000432BD2
l00000000004328EE:
	SCZO = cond(r15w - bx)
	branch Test(ULE,CZ) l0000000000432BD2
	// succ:  l00000000004328F8 l0000000000432BD2
l00000000004328F8:
	ebx = ebx - 0x30<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	// succ:  l00000000004328FB
l00000000004328FB:
	SCZO = cond(Mem0[rsp + 0x30<64>:word32] - esi)
	branch Test(UGE,C) l0000000000432AD4
	// succ:  l0000000000432905 l0000000000432AD4
l0000000000432905:
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000432AF8
	// succ:  l0000000000432918 l0000000000432AF8
l0000000000432918:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000432C13
	// succ:  l0000000000432926 l0000000000432C13
l0000000000432926:
	rax = rax + 2<64>
	SCZO = cond(rax)
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rax
	Mem0[rsp + 0x58<64>:word16] = r9w
	// succ:  l000000000043293A
l000000000043293A:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000432F80
	// succ:  l0000000000432948 l0000000000432F80
l0000000000432948:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043294B
l000000000043294B:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000432BF0
	// succ:  l0000000000432955 l0000000000432BF0
l0000000000432955:
	rcx = Mem0[rsp + 0x40<64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x58<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000432B43
	// succ:  l000000000043296A l0000000000432B43
l000000000043296A:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000432B19
	// succ:  l0000000000432978 l0000000000432B19
l0000000000432978:
	SCZO = cond(al - bl)
	branch Test(NE,Z) l0000000000432B43
	// succ:  l0000000000432980 l0000000000432B43
l0000000000432980:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	// succ:  l0000000000432988
l0000000000432988:
	rax = Mem0[rsp + 0x70<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(NE,Z) l0000000000432A1B
	// succ:  l0000000000432998 l0000000000432A1B
l0000000000432998:
	SZO = cond(r13d & r13d)
	C = false
	dl = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(dl - Mem0[rsp + 0x35<64>:byte])
	branch Test(ULE,CZ) l0000000000432A6C
	// succ:  l00000000004329A8 l0000000000432A6C
l00000000004329A8:
	rdx = Mem0[rsp + 0x100<64>:word64]
	Mem0[rdx:word32] = 0<32>
	rdx = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rdx:word32] = 4<32>
	// succ:  l00000000004329C4
l00000000004329C4:
	SZO = cond(r14b & r14b)
	C = false
	branch Test(EQ,Z) l00000000004329D4
	// succ:  l00000000004329C9 l00000000004329D4
l00000000004329C9:
	rdx = Mem0[rsp + 0xF8<64>:word64]
	v49 = Mem0[rdx:word32] | 2<32>
	Mem0[rdx:word32] = v49
	SZO = cond(Mem0[rdx:word32])
	C = false
	// succ:  l00000000004329D4
l00000000004329D4:
	rdx = Mem0[rsp + 0xD0<64>:word64]
	rcx = Mem0[rsp + 0x50<64>:word64]
	rbx = Mem0[rsp + 0x58<64>:word64]
	Mem0[rdx:word64] = rcx
	Mem0[rdx + 8<64>:word64] = rbx
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[rax - 8<64>:word32] = __xadd(Mem0[rax - 8<64>:word32], edx)
	SCZO = cond(Mem0[rax - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l0000000000432FD6
	// succ:  l00000000004329FF l0000000000432FD6
l00000000004329FF:
	rax = Mem0[rsp + 0xD0<64>:word64]
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000432750_exit
l0000000000432A1B:
	rdi = rsp + 0x70<64>
	edx = CONVERT(r13b, byte, int32)
	rcx = rdi
	call fn0000000000451E10 (retsize: 8;)
	rdx = Mem0[r12 + 0x18<64>:word64]
	rcx = Mem0[r12 + 0x10<64>:word64]
	r8 = rdi
	call fn00000000004708F0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000432A50
	// succ:  l0000000000432A42 l0000000000432A50
l0000000000432A42:
	rax = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rax:word32] = 4<32>
	// succ:  l0000000000432A50
l0000000000432A50:
	SZO = cond(r13d & r13d)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - Mem0[rsp + 0x35<64>:byte])
	rax = Mem0[rsp + 0x70<64>:word64]
	branch Test(ULE,CZ) l0000000000432A6C
	// succ:  l0000000000432A61 l0000000000432A6C
l0000000000432A61:
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l00000000004329A8
	// succ:  l0000000000432A6C l00000000004329A8
l0000000000432A6C:
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l00000000004329A8
	// succ:  l0000000000432A74 l00000000004329A8
l0000000000432A74:
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l0000000000432EEA
	// succ:  l0000000000432A7D l0000000000432EEA
l0000000000432A7D:
	rdx = Mem0[rsp + 0x100<64>:word64]
	Mem0[rdx:word32] = 0xFFFFFFFF<32>
	rdx = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rdx:word32] = 4<32>
	goto l00000000004329C4
	// succ:  l00000000004329C4
l0000000000432AA0:
	eax = SLICE(rbx - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 9<16>)
	branch Test(ULE,CZ) l00000000004328F8
	// succ:  l0000000000432AAD l00000000004328F8
l0000000000432AAD:
	eax = SLICE(rbx - 0x61<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 5<16>)
	branch Test(ULE,CZ) l0000000000432BE0
	// succ:  l0000000000432ABA l0000000000432BE0
l0000000000432ABA:
	eax = SLICE(rbx - 0x41<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 5<16>)
	branch Test(UGT,CZ) l0000000000432BD2
	// succ:  l0000000000432AC7 l0000000000432BD2
l0000000000432AC7:
	ebx = ebx - 0x37<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SCZO = cond(Mem0[rsp + 0x30<64>:word32] - esi)
	branch Test(ULT,C) l0000000000432905
	// succ:  l0000000000432AD4 l0000000000432905
l0000000000432AD4:
	esi = esi *s Mem0[rsp + 0x24<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	rcx = Mem0[rsp + 0x50<64>:word64]
	eax = ~eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - esi)
	al = CONVERT(Test(ULT,C), bool, int8)
	esi = esi + ebx
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	ebp = ebp | eax
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000432918
	// succ:  l0000000000432AF8 l0000000000432918
l0000000000432AF8:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000432980
	// succ:  l0000000000432B06 l0000000000432980
l0000000000432B06:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l0000000000432978
	// succ:  l0000000000432B19 l0000000000432978
l0000000000432B19:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000432F8B
	// succ:  l0000000000432B27 l0000000000432F8B
l0000000000432B27:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000432B2A
l0000000000432B2A:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000432C00
	// succ:  l0000000000432B34 l0000000000432C00
l0000000000432B34:
	Mem0[rsp + 0x48<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l0000000000432980
	// succ:  l0000000000432B43 l0000000000432980
l0000000000432B43:
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebx = 0xFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004328DA
	// succ:  l0000000000432B56 l00000000004328DA
l0000000000432B56:
	ebx = CONVERT(Mem0[rsp + 0x58<64>:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(NE,Z) l00000000004328DA
	// succ:  l0000000000432B65 l00000000004328DA
l0000000000432B65:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000432FFE
	// succ:  l0000000000432B73 l0000000000432FFE
l0000000000432B73:
	ebx = CONVERT(Mem0[rax:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000432B76
l0000000000432B76:
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000432F6C
	// succ:  l0000000000432B80 l0000000000432F6C
l0000000000432B80:
	Mem0[rsp + 0x58<64>:word16] = bx
	goto l00000000004328DA
	// succ:  l00000000004328DA
l0000000000432B8A:
	SZO = cond(r14b & r14b)
	C = false
	branch Test(NE,Z) l0000000000433039
	// succ:  l0000000000432B93 l0000000000433039
l0000000000432B93:
	rax = rsp + 0x70<64>
	rdi = r15 + rdi * 2<64>
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	Mem0[rsp + 0x28<64>:word64] = rax
	// succ:  l0000000000432BA5
l0000000000432BA5:
	SCZO = cond(Mem0[r12 + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000432BB9
	// succ:  l0000000000432BAD l0000000000432BB9
l0000000000432BAD:
	SCZO = cond(bx - Mem0[r12 + 0x4A<64>:word16])
	branch Test(EQ,Z) l0000000000432D84
	// succ:  l0000000000432BB9 l0000000000432D84
l0000000000432BB9:
	SCZO = cond(bx - Mem0[r12 + 0x48<64>:word16])
	branch Test(EQ,Z) l0000000000432BD2
	// succ:  l0000000000432BC1 l0000000000432BD2
l0000000000432BC1:
	rax = r15
	// succ:  l0000000000432BC4
l0000000000432BC4:
	SCZO = cond(bx - Mem0[rax:word16])
	branch Test(EQ,Z) l0000000000432C40
	// succ:  l0000000000432BC9 l0000000000432C40
l0000000000432BC9:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(rax - rdi)
	branch Test(NE,Z) l0000000000432BC4
	// succ:  l0000000000432BD2 l0000000000432BC4
l0000000000432BD2:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l0000000000432988
	// succ:  l0000000000432988
l0000000000432BE0:
	ebx = ebx - 0x57<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	goto l00000000004328FB
	// succ:  l00000000004328FB
l0000000000432BF0:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l0000000000432AF8
	// succ:  l0000000000432AF8
l0000000000432C00:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000432978
	// succ:  l0000000000432978
l0000000000432C13:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	r8d = 0xFFFFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x58<64>:word16] = r8w
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000432AF8
	// succ:  l0000000000432C33 l0000000000432AF8
l0000000000432C33:
	goto l000000000043293A
	// succ:  l000000000043293A
l0000000000432C40:
	rax = rax - r15
	SCZO = cond(rax)
	rax = rax >> 1<64>
	SCZO = cond(rax)
	edx = SLICE(rax - 6<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(eax - 0x10<32>)
	branch Test(LT,SO) l0000000000432C4F
	// succ:  l0000000000432C4C_1 l0000000000432C4F
l0000000000432C4C_1:
	eax = edx
	// succ:  l0000000000432C4F
l0000000000432C4F:
	SCZO = cond(Mem0[rsp + 0x30<64>:word32] - esi)
	branch Test(UGE,C) l0000000000432D15
	// succ:  l0000000000432C59 l0000000000432D15
l0000000000432C59:
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	// succ:  l0000000000432C5E
l0000000000432C5E:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000432D40
	// succ:  l0000000000432C6C l0000000000432D40
l0000000000432C6C:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000432DCE
	// succ:  l0000000000432C7A l0000000000432DCE
l0000000000432C7A:
	rax = rax + 2<64>
	SCZO = cond(rax)
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rax
	Mem0[rsp + 0x58<64>:word16] = dx
	// succ:  l0000000000432C8C
l0000000000432C8C:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000432FB5
	// succ:  l0000000000432C9A l0000000000432FB5
l0000000000432C9A:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000432C9D
l0000000000432C9D:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000432DC0
	// succ:  l0000000000432CA7 l0000000000432DC0
l0000000000432CA7:
	rcx = Mem0[rsp + 0x40<64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x58<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000432CCE
	// succ:  l0000000000432CB8 l0000000000432CCE
l0000000000432CB8:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000432D61
	// succ:  l0000000000432CC6 l0000000000432D61
l0000000000432CC6:
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l0000000000432980
	// succ:  l0000000000432CCE l0000000000432980
l0000000000432CCE:
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000432BA5
	// succ:  l0000000000432CE1 l0000000000432BA5
l0000000000432CE1:
	ebx = CONVERT(Mem0[rsp + 0x58<64>:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(NE,Z) l0000000000432BA5
	// succ:  l0000000000432CF0 l0000000000432BA5
l0000000000432CF0:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000433018
	// succ:  l0000000000432CFE l0000000000433018
l0000000000432CFE:
	ebx = CONVERT(Mem0[rax:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000432D01
l0000000000432D01:
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000432EDC
	// succ:  l0000000000432D0B l0000000000432EDC
l0000000000432D0B:
	Mem0[rsp + 0x58<64>:word16] = bx
	goto l0000000000432BA5
	// succ:  l0000000000432BA5
l0000000000432D15:
	esi = esi *s Mem0[rsp + 0x24<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[rsp + 0x50<64>:word64]
	edx = ~edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - esi)
	dl = CONVERT(Test(ULT,C), bool, int8)
	esi = esi + eax
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	ebp = ebp | edx
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000432C6C
	// succ:  l0000000000432D39 l0000000000432C6C
l0000000000432D39:
	// succ:  l0000000000432D40
l0000000000432D40:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000432980
	// succ:  l0000000000432D4E l0000000000432980
l0000000000432D4E:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	ebx = CONVERT(Mem0[rsp + 0x36<64>:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l0000000000432CC6
	// succ:  l0000000000432D61 l0000000000432CC6
l0000000000432D61:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000432FAA
	// succ:  l0000000000432D6F l0000000000432FAA
l0000000000432D6F:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000432D72
l0000000000432D72:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000432DA3
	// succ:  l0000000000432D78 l0000000000432DA3
l0000000000432D78:
	Mem0[rsp + 0x48<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000432CC6
	// succ:  l0000000000432CC6
l0000000000432D84:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000043302F
	// succ:  l0000000000432D8D l000000000043302F
l0000000000432D8D:
	rcx = Mem0[rsp + 0x28<64>:word64]
	edx = CONVERT(r13b, byte, int32)
	call fn0000000000451E10 (retsize: 8;)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	goto l0000000000432C5E
	// succ:  l0000000000432C5E
l0000000000432DA3:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = CONVERT(Mem0[rsp + 0x36<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000432CC6
	// succ:  l0000000000432CC6
l0000000000432DC0:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l0000000000432D40
	// succ:  l0000000000432D40
l0000000000432DCE:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x58<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000432D40
	// succ:  l0000000000432DEC l0000000000432D40
l0000000000432DEC:
	goto l0000000000432C8C
	// succ:  l0000000000432C8C
l0000000000432DF1:
	SCZO = cond(bx - Mem0[r12 + 0x96<64>:word16])
	branch Test(EQ,Z) l000000000043280F
	// succ:  l0000000000432E00 l000000000043280F
l0000000000432E00:
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000432E06
l0000000000432E06:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	// succ:  l0000000000432E0C
l0000000000432E0C:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000432E1C
	// succ:  l0000000000432E10 l0000000000432E1C
l0000000000432E10:
	SCZO = cond(Mem0[r12 + 0x4A<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000432FE9
	// succ:  l0000000000432E1C l0000000000432FE9
l0000000000432E1C:
	SCZO = cond(Mem0[r12 + 0x48<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000432FE9
	// succ:  l0000000000432E28 l0000000000432FE9
l0000000000432E28:
	SCZO = cond(Mem0[r12 + 0x9C<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000432F10
	// succ:  l0000000000432E37 l0000000000432F10
l0000000000432E37:
	SZO = cond(r15b & r15b)
	C = false
	branch Test(EQ,Z) l0000000000432FE9
	// succ:  l0000000000432E40 l0000000000432FE9
l0000000000432E40:
	SCZO = cond(Mem0[r12 + 0x98<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000432E5A
	// succ:  l0000000000432E4B l0000000000432E5A
l0000000000432E4B:
	SCZO = cond(Mem0[r12 + 0x9A<64>:word16] - bx)
	branch Test(NE,Z) l0000000000432F43
	// succ:  l0000000000432E5A l0000000000432F43
l0000000000432E5A:
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 0x10<32>)
	branch Test(EQ,Z) l0000000000432E69
	// succ:  l0000000000432E61 l0000000000432E69
l0000000000432E61:
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l0000000000433025
	// succ:  l0000000000432E69 l0000000000433025
l0000000000432E69:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	Mem0[rsp + 0x24<64>:word32] = 0x10<32>
	// succ:  l0000000000432E77
l0000000000432E77:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000432EA3
	// succ:  l0000000000432E81 l0000000000432EA3
l0000000000432E81:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000432FF3
	// succ:  l0000000000432E8F l0000000000432FF3
l0000000000432E8F:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l0000000000432E97
l0000000000432E97:
	r10d = 0xFFFFFFFF<32>
	r10 = CONVERT(r10d, word32, uint64)
	Mem0[rsp + 0x58<64>:word16] = r10w
	// succ:  l0000000000432EA3
l0000000000432EA3:
	rdx = rbp
	rcx = rsi
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000432F4D
	// succ:  l0000000000432EB6 l0000000000432F4D
l0000000000432EB6:
	Mem0[rsp + 0x35<64>:byte] = r15b
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	goto l0000000000432865
	// succ:  l0000000000432865
l0000000000432EC6:
	SCZO = cond(bx - Mem0[r12 + 0x4A<64>:word16])
	branch Test(NE,Z) l000000000043281D
	// succ:  l0000000000432ED2 l000000000043281D
l0000000000432ED2:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000432E06
	// succ:  l0000000000432E06
l0000000000432EDC:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l0000000000432BA5
	// succ:  l0000000000432BA5
l0000000000432EEA:
	edx = CONVERT(Mem0[rsp + 0x37<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	ecx = -ecx
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	C = ecx == 0<32>
	esi = esi ^ ecx
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edx = edx + esi
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rsi = Mem0[rsp + 0x100<64>:word64]
	Mem0[rsi:word32] = edx
	goto l00000000004329C4
	// succ:  l00000000004329C4
l0000000000432F10:
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 0xA<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - r15b)
	branch Test(ULT,C) l0000000000432E40
	// succ:  l0000000000432F21 l0000000000432E40
l0000000000432F21:
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 8<32>)
	branch Test(EQ,Z) l0000000000433044
	// succ:  l0000000000432F30 l0000000000433044
l0000000000432F30:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l0000000000433044
	// succ:  l0000000000432F38 l0000000000433044
l0000000000432F38:
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l0000000000432E77
	// succ:  l0000000000432E77
l0000000000432F43:
	Mem0[rsp + 0x35<64>:byte] = 1<8>
	goto l0000000000432865
	// succ:  l0000000000432865
l0000000000432F4D:
	rcx = rsi
	call fn000000000042B1B0 (retsize: 8;)
	SZO = cond(r15b & r15b)
	C = false
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(EQ,Z) l0000000000432FE9
	// succ:  l0000000000432F61 l0000000000432FE9
l0000000000432F61:
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000432E0C
	// succ:  l0000000000432E0C
l0000000000432F6C:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l00000000004328DA
	// succ:  l00000000004328DA
l0000000000432F80:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000043294B
	// succ:  l000000000043294B
l0000000000432F8B:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000432B2A
	// succ:  l0000000000432B2A
l0000000000432F96:
	rcx = rsp + 0x70<64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000451BE0 (retsize: 8;)
	goto l000000000043289D
	// succ:  l000000000043289D
l0000000000432FAA:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000432D72
	// succ:  l0000000000432D72
l0000000000432FB5:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000432C9D
	// succ:  l0000000000432C9D
l0000000000432FC0:
	rcx = rsi
	call fn000000000042B1B0 (retsize: 8;)
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000432E06
	// succ:  l0000000000432E06
l0000000000432FD6:
	rdx = Mem0[rsp + 0x38<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A50 (retsize: 8;)
	goto l00000000004329FF
	// succ:  l00000000004329FF
l0000000000432FE9:
	Mem0[rsp + 0x35<64>:byte] = r15b
	goto l0000000000432865
	// succ:  l0000000000432865
l0000000000432FF3:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l0000000000432E97
	// succ:  l0000000000432E97
l0000000000432FFE:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000432B76
	// succ:  l0000000000432B76
l000000000043300C:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x37<64>:byte] = 0<8>
	goto l0000000000432857
	// succ:  l0000000000432857
l0000000000433018:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000432D01
	// succ:  l0000000000432D01
l0000000000433025:
	Mem0[rsp + 0x35<64>:byte] = 1<8>
	goto l0000000000432871
	// succ:  l0000000000432871
l000000000043302F:
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000432988
	// succ:  l0000000000432988
l0000000000433039:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l0000000000432988
	// succ:  l0000000000432988
l0000000000433044:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	Mem0[rsp + 0x24<64>:word32] = 8<32>
	goto l0000000000432E77
	// succ:  l0000000000432E77
fn0000000000432750_exit:


// fn0000000000433080
// Return size: 8
define fn0000000000433080
fn0000000000433080_entry:
	rsp = fp
	// succ:  l0000000000433080
l0000000000433080:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	rdx = Mem0[r8 + 8<64>:word64]
	rax = Mem0[r8:word64]
	rbx = Mem0[rsp + 0xF0<64>:word64]
	Mem0[rsp + 0xD0<64>:word64] = rcx
	rcx = rsp + 0x6E<64>
	Mem0[rsp + 0x58<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0x50<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0x48<64>:word64] = rdx
	rdx = rbx + 0xD0<64>
	Mem0[rsp + 0x40<64>:word64] = rax
	call fn000000000042A460 (retsize: 8;)
	edi = Mem0[rbx + 0x18<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	r12 = rax
	Mem0[rsp + 0x20<64>:word32] = 8<32>
	edi = edi & 0x4A<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SCZO = cond(edi - 0x40<32>)
	branch Test(EQ,Z) l0000000000433100
	// succ:  l00000000004330EC l0000000000433100
l00000000004330EC:
	SCZO = cond(edi - 8<32>)
	eax = 0xA<32>
	rax = CONVERT(eax, word32, uint64)
	edx = 0x10<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l00000000004330FC
	// succ:  l00000000004330F9_1 l00000000004330FC
l00000000004330F9_1:
	eax = edx
	// succ:  l00000000004330FC
l00000000004330FC:
	Mem0[rsp + 0x20<64>:word32] = eax
	// succ:  l0000000000433100
l0000000000433100:
	rbp = rsp + 0x40<64>
	rsi = rsp + 0x50<64>
	rdx = rbp
	rcx = rsi
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(NE,Z) l0000000000433953
	// succ:  l0000000000433120 l0000000000433953
l0000000000433120:
	rcx = rsi
	call fn000000000042B1B0 (retsize: 8;)
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - Mem0[r12 + 0x94<64>:word16])
	Mem0[rsp + 0x37<64>:byte] = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(NE,Z) l0000000000433741
	// succ:  l000000000043313F l0000000000433741
l000000000043313F:
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000433816
	// succ:  l000000000043314D l0000000000433816
l000000000043314D:
	SCZO = cond(bx - Mem0[r12 + 0x48<64>:word16])
	branch Test(EQ,Z) l0000000000433756
	// succ:  l0000000000433159 l0000000000433756
l0000000000433159:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000433174
	// succ:  l0000000000433163 l0000000000433174
l0000000000433163:
	call fn0000000000462DD0 (retsize: 8;)
	r11d = 0xFFFFFFFF<32>
	r11 = CONVERT(r11d, word32, uint64)
	Mem0[rsp + 0x58<64>:word16] = r11w
	// succ:  l0000000000433174
l0000000000433174:
	rdx = rbp
	rcx = rsi
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000433907
	// succ:  l0000000000433187 l0000000000433907
l0000000000433187:
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	Mem0[rsp + 0x35<64>:byte] = 0<8>
	// succ:  l0000000000433195
l0000000000433195:
	SCZO = cond(Mem0[rsp + 0x20<64>:word32] - 0x10<32>)
	edi = 0x16<32>
	rdi = CONVERT(edi, word32, uint64)
	branch Test(EQ,Z) l00000000004331A6
	// succ:  l00000000004331A1 l00000000004331A6
l00000000004331A1:
	rdi = CONVERT(Mem0[rsp + 0x20<64>:word32], word32, int64)
	// succ:  l00000000004331A6
l00000000004331A6:
	rax = rsp + 0x6F<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x38<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(Mem0[r12 + 0x20<64>:byte] - 0<8>)
	Mem0[rsp + 0x70<64>:word64] = rax
	branch Test(NE,Z) l00000000004338DD
	// succ:  l00000000004331CD l00000000004338DD
l00000000004331CD:
	SCZO = cond(Mem0[rsp + 0x37<64>:byte] - 1<8>)
	r15 = r12 + 0x9C<64>
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = eax + 0x80000000<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rsp + 0x30<64>:word32] = eax
	v39 = edx_eax
	edx = CONVERT(v39 % Mem0[rsp + 0x20<64>:word32], word64, uint32)
	eax = CONVERT(v39 /u Mem0[rsp + 0x20<64>:word32], word32, uint32)
	SCZO = cond(eax)
	Mem0[rsp + 0x24<64>:word32] = eax
	eax = CONVERT(Mem0[r12 + 0xC8<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	Mem0[rsp + 0x36<64>:byte] = al
	branch Test(NE,Z) l00000000004334D8
	// succ:  l0000000000433204 l00000000004334D8
l0000000000433204:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	SZO = cond(r14b & r14b)
	C = false
	branch Test(NE,Z) l0000000000433520
	// succ:  l0000000000433211 l0000000000433520
l0000000000433211:
	r15d = SLICE(rdi + 0x30<64>, word32, 0)
	r15 = CONVERT(r15d, word32, uint64)
	// succ:  l0000000000433215
l0000000000433215:
	SCZO = cond(rdi - 0xA<64>)
	branch Test(UGT,CZ) l00000000004333E2
	// succ:  l000000000043321F l00000000004333E2
l000000000043321F:
	SCZO = cond(bx - 0x2F<16>)
	branch Test(ULE,CZ) l0000000000433520
	// succ:  l0000000000433229 l0000000000433520
l0000000000433229:
	SCZO = cond(r15w - bx)
	branch Test(ULE,CZ) l0000000000433520
	// succ:  l0000000000433233 l0000000000433520
l0000000000433233:
	ebx = ebx - 0x30<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	// succ:  l0000000000433236
l0000000000433236:
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - esi)
	branch Test(UGE,C) l0000000000433420
	// succ:  l0000000000433240 l0000000000433420
l0000000000433240:
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000433446
	// succ:  l0000000000433253 l0000000000433446
l0000000000433253:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000433563
	// succ:  l0000000000433261 l0000000000433563
l0000000000433261:
	rax = rax + 2<64>
	SCZO = cond(rax)
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rax
	Mem0[rsp + 0x58<64>:word16] = r9w
	// succ:  l0000000000433275
l0000000000433275:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004338D2
	// succ:  l0000000000433283 l00000000004338D2
l0000000000433283:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000433286
l0000000000433286:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000433540
	// succ:  l0000000000433290 l0000000000433540
l0000000000433290:
	rcx = Mem0[rsp + 0x40<64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x58<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000433491
	// succ:  l00000000004332A5 l0000000000433491
l00000000004332A5:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000433467
	// succ:  l00000000004332B3 l0000000000433467
l00000000004332B3:
	SCZO = cond(al - bl)
	branch Test(NE,Z) l0000000000433491
	// succ:  l00000000004332BB l0000000000433491
l00000000004332BB:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	// succ:  l00000000004332C3
l00000000004332C3:
	rax = Mem0[rsp + 0x70<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(NE,Z) l0000000000433356
	// succ:  l00000000004332D3 l0000000000433356
l00000000004332D3:
	SZO = cond(r13d & r13d)
	C = false
	dl = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(dl - Mem0[rsp + 0x35<64>:byte])
	branch Test(ULE,CZ) l00000000004333A7
	// succ:  l00000000004332E3 l00000000004333A7
l00000000004332E3:
	rdx = Mem0[rsp + 0x100<64>:word64]
	Mem0[rdx:word32] = 0<32>
	rdx = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rdx:word32] = 4<32>
	// succ:  l00000000004332FF
l00000000004332FF:
	SZO = cond(r14b & r14b)
	C = false
	branch Test(EQ,Z) l000000000043330F
	// succ:  l0000000000433304 l000000000043330F
l0000000000433304:
	rdx = Mem0[rsp + 0xF8<64>:word64]
	v49 = Mem0[rdx:word32] | 2<32>
	Mem0[rdx:word32] = v49
	SZO = cond(Mem0[rdx:word32])
	C = false
	// succ:  l000000000043330F
l000000000043330F:
	rdx = Mem0[rsp + 0xD0<64>:word64]
	rcx = Mem0[rsp + 0x50<64>:word64]
	rbx = Mem0[rsp + 0x58<64>:word64]
	Mem0[rdx:word64] = rcx
	Mem0[rdx + 8<64>:word64] = rbx
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[rax - 8<64>:word32] = __xadd(Mem0[rax - 8<64>:word32], edx)
	SCZO = cond(Mem0[rax - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l000000000043391D
	// succ:  l000000000043333A l000000000043391D
l000000000043333A:
	rax = Mem0[rsp + 0xD0<64>:word64]
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000433080_exit
l0000000000433356:
	rdi = rsp + 0x70<64>
	edx = CONVERT(r13b, byte, int32)
	rcx = rdi
	call fn0000000000451E10 (retsize: 8;)
	rdx = Mem0[r12 + 0x18<64>:word64]
	rcx = Mem0[r12 + 0x10<64>:word64]
	r8 = rdi
	call fn00000000004708F0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000043338B
	// succ:  l000000000043337D l000000000043338B
l000000000043337D:
	rax = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rax:word32] = 4<32>
	// succ:  l000000000043338B
l000000000043338B:
	SZO = cond(r13d & r13d)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - Mem0[rsp + 0x35<64>:byte])
	rax = Mem0[rsp + 0x70<64>:word64]
	branch Test(ULE,CZ) l00000000004333A7
	// succ:  l000000000043339C l00000000004333A7
l000000000043339C:
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l00000000004332E3
	// succ:  l00000000004333A7 l00000000004332E3
l00000000004333A7:
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l00000000004332E3
	// succ:  l00000000004333AF l00000000004332E3
l00000000004333AF:
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l000000000043383A
	// succ:  l00000000004333B8 l000000000043383A
l00000000004333B8:
	SCZO = cond(Mem0[rsp + 0x37<64>:byte] - 1<8>)
	rsi = Mem0[rsp + 0x100<64>:word64]
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx + 0x80000000<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	Mem0[rsi:word32] = edx
	rdx = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rdx:word32] = 4<32>
	goto l00000000004332FF
	// succ:  l00000000004332FF
l00000000004333E2:
	eax = SLICE(rbx - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 9<16>)
	branch Test(ULE,CZ) l0000000000433233
	// succ:  l00000000004333EF l0000000000433233
l00000000004333EF:
	eax = SLICE(rbx - 0x61<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 5<16>)
	branch Test(ULE,CZ) l0000000000433530
	// succ:  l00000000004333FC l0000000000433530
l00000000004333FC:
	eax = SLICE(rbx - 0x41<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 5<16>)
	branch Test(UGT,CZ) l0000000000433520
	// succ:  l0000000000433409 l0000000000433520
l0000000000433409:
	ebx = ebx - 0x37<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - esi)
	branch Test(ULT,C) l0000000000433240
	// succ:  l0000000000433416 l0000000000433240
l0000000000433416:
	// succ:  l0000000000433420
l0000000000433420:
	esi = esi *s Mem0[rsp + 0x20<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	eax = Mem0[rsp + 0x30<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = Mem0[rsp + 0x50<64>:word64]
	eax = eax - ebx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - esi)
	al = CONVERT(Test(ULT,C), bool, int8)
	esi = esi + ebx
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	ebp = ebp | eax
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000433253
	// succ:  l0000000000433446 l0000000000433253
l0000000000433446:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004332BB
	// succ:  l0000000000433454 l00000000004332BB
l0000000000433454:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l00000000004332B3
	// succ:  l0000000000433467 l00000000004332B3
l0000000000433467:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004338C7
	// succ:  l0000000000433475 l00000000004338C7
l0000000000433475:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000433478
l0000000000433478:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000433550
	// succ:  l0000000000433482 l0000000000433550
l0000000000433482:
	Mem0[rsp + 0x48<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l00000000004332BB
	// succ:  l0000000000433491 l00000000004332BB
l0000000000433491:
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebx = 0xFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000433215
	// succ:  l00000000004334A4 l0000000000433215
l00000000004334A4:
	ebx = CONVERT(Mem0[rsp + 0x58<64>:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(NE,Z) l0000000000433215
	// succ:  l00000000004334B3 l0000000000433215
l00000000004334B3:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000433945
	// succ:  l00000000004334C1 l0000000000433945
l00000000004334C1:
	ebx = CONVERT(Mem0[rax:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l00000000004334C4
l00000000004334C4:
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(EQ,Z) l00000000004338B9
	// succ:  l00000000004334CE l00000000004338B9
l00000000004334CE:
	Mem0[rsp + 0x58<64>:word16] = bx
	goto l0000000000433215
	// succ:  l0000000000433215
l00000000004334D8:
	SZO = cond(r14b & r14b)
	C = false
	branch Test(NE,Z) l0000000000433980
	// succ:  l00000000004334E1 l0000000000433980
l00000000004334E1:
	rax = rsp + 0x70<64>
	rdi = r15 + rdi * 2<64>
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	Mem0[rsp + 0x28<64>:word64] = rax
	// succ:  l00000000004334F3
l00000000004334F3:
	SCZO = cond(Mem0[r12 + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000433507
	// succ:  l00000000004334FB l0000000000433507
l00000000004334FB:
	SCZO = cond(bx - Mem0[r12 + 0x4A<64>:word16])
	branch Test(EQ,Z) l00000000004336D4
	// succ:  l0000000000433507 l00000000004336D4
l0000000000433507:
	SCZO = cond(bx - Mem0[r12 + 0x48<64>:word16])
	branch Test(EQ,Z) l0000000000433520
	// succ:  l000000000043350F l0000000000433520
l000000000043350F:
	rax = r15
	// succ:  l0000000000433512
l0000000000433512:
	SCZO = cond(bx - Mem0[rax:word16])
	branch Test(EQ,Z) l0000000000433590
	// succ:  l0000000000433517 l0000000000433590
l0000000000433517:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(rax - rdi)
	branch Test(NE,Z) l0000000000433512
	// succ:  l0000000000433520 l0000000000433512
l0000000000433520:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l00000000004332C3
	// succ:  l00000000004332C3
l0000000000433530:
	ebx = ebx - 0x57<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	goto l0000000000433236
	// succ:  l0000000000433236
l0000000000433540:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l0000000000433446
	// succ:  l0000000000433446
l0000000000433550:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000004332B3
	// succ:  l00000000004332B3
l0000000000433563:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	r8d = 0xFFFFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x58<64>:word16] = r8w
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000433446
	// succ:  l0000000000433583 l0000000000433446
l0000000000433583:
	goto l0000000000433275
	// succ:  l0000000000433275
l0000000000433590:
	rax = rax - r15
	SCZO = cond(rax)
	rax = rax >> 1<64>
	SCZO = cond(rax)
	edx = SLICE(rax - 6<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(eax - 0x10<32>)
	branch Test(LT,SO) l000000000043359F
	// succ:  l000000000043359C_1 l000000000043359F
l000000000043359C_1:
	eax = edx
	// succ:  l000000000043359F
l000000000043359F:
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - esi)
	branch Test(UGE,C) l0000000000433665
	// succ:  l00000000004335A9 l0000000000433665
l00000000004335A9:
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	// succ:  l00000000004335AE
l00000000004335AE:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000433690
	// succ:  l00000000004335BC l0000000000433690
l00000000004335BC:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043371E
	// succ:  l00000000004335CA l000000000043371E
l00000000004335CA:
	rax = rax + 2<64>
	SCZO = cond(rax)
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rax
	Mem0[rsp + 0x58<64>:word16] = dx
	// succ:  l00000000004335DC
l00000000004335DC:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004338F1
	// succ:  l00000000004335EA l00000000004338F1
l00000000004335EA:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004335ED
l00000000004335ED:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000433710
	// succ:  l00000000004335F7 l0000000000433710
l00000000004335F7:
	rcx = Mem0[rsp + 0x40<64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x58<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043361E
	// succ:  l0000000000433608 l000000000043361E
l0000000000433608:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l00000000004336B1
	// succ:  l0000000000433616 l00000000004336B1
l0000000000433616:
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l00000000004332BB
	// succ:  l000000000043361E l00000000004332BB
l000000000043361E:
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004334F3
	// succ:  l0000000000433631 l00000000004334F3
l0000000000433631:
	ebx = CONVERT(Mem0[rsp + 0x58<64>:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(NE,Z) l00000000004334F3
	// succ:  l0000000000433640 l00000000004334F3
l0000000000433640:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043395F
	// succ:  l000000000043364E l000000000043395F
l000000000043364E:
	ebx = CONVERT(Mem0[rax:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000433651
l0000000000433651:
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043382C
	// succ:  l000000000043365B l000000000043382C
l000000000043365B:
	Mem0[rsp + 0x58<64>:word16] = bx
	goto l00000000004334F3
	// succ:  l00000000004334F3
l0000000000433665:
	esi = esi *s Mem0[rsp + 0x20<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	edx = Mem0[rsp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[rsp + 0x50<64>:word64]
	edx = edx - eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(edx - esi)
	dl = CONVERT(Test(ULT,C), bool, int8)
	esi = esi + eax
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	ebp = ebp | edx
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l00000000004335BC
	// succ:  l000000000043368B l00000000004335BC
l000000000043368B:
	// succ:  l0000000000433690
l0000000000433690:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004332BB
	// succ:  l000000000043369E l00000000004332BB
l000000000043369E:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	ebx = CONVERT(Mem0[rsp + 0x36<64>:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l0000000000433616
	// succ:  l00000000004336B1 l0000000000433616
l00000000004336B1:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004338FC
	// succ:  l00000000004336BF l00000000004338FC
l00000000004336BF:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004336C2
l00000000004336C2:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l00000000004336F3
	// succ:  l00000000004336C8 l00000000004336F3
l00000000004336C8:
	Mem0[rsp + 0x48<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000433616
	// succ:  l0000000000433616
l00000000004336D4:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l0000000000433976
	// succ:  l00000000004336DD l0000000000433976
l00000000004336DD:
	rcx = Mem0[rsp + 0x28<64>:word64]
	edx = CONVERT(r13b, byte, int32)
	call fn0000000000451E10 (retsize: 8;)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	goto l00000000004335AE
	// succ:  l00000000004335AE
l00000000004336F3:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = CONVERT(Mem0[rsp + 0x36<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000433616
	// succ:  l0000000000433616
l0000000000433710:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l0000000000433690
	// succ:  l0000000000433690
l000000000043371E:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x58<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000433690
	// succ:  l000000000043373C l0000000000433690
l000000000043373C:
	goto l00000000004335DC
	// succ:  l00000000004335DC
l0000000000433741:
	SCZO = cond(bx - Mem0[r12 + 0x96<64>:word16])
	branch Test(EQ,Z) l000000000043313F
	// succ:  l0000000000433750 l000000000043313F
l0000000000433750:
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000433756
l0000000000433756:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	// succ:  l000000000043375C
l000000000043375C:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000043376C
	// succ:  l0000000000433760 l000000000043376C
l0000000000433760:
	SCZO = cond(Mem0[r12 + 0x4A<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000433930
	// succ:  l000000000043376C l0000000000433930
l000000000043376C:
	SCZO = cond(Mem0[r12 + 0x48<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000433930
	// succ:  l0000000000433778 l0000000000433930
l0000000000433778:
	SCZO = cond(Mem0[r12 + 0x9C<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000433855
	// succ:  l0000000000433787 l0000000000433855
l0000000000433787:
	SZO = cond(r15b & r15b)
	C = false
	branch Test(EQ,Z) l0000000000433930
	// succ:  l0000000000433790 l0000000000433930
l0000000000433790:
	SCZO = cond(Mem0[r12 + 0x98<64>:word16] - bx)
	branch Test(EQ,Z) l00000000004337AA
	// succ:  l000000000043379B l00000000004337AA
l000000000043379B:
	SCZO = cond(Mem0[r12 + 0x9A<64>:word16] - bx)
	branch Test(NE,Z) l0000000000433890
	// succ:  l00000000004337AA l0000000000433890
l00000000004337AA:
	SCZO = cond(Mem0[rsp + 0x20<64>:word32] - 0x10<32>)
	branch Test(EQ,Z) l00000000004337B9
	// succ:  l00000000004337B1 l00000000004337B9
l00000000004337B1:
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l000000000043396C
	// succ:  l00000000004337B9 l000000000043396C
l00000000004337B9:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	Mem0[rsp + 0x20<64>:word32] = 0x10<32>
	// succ:  l00000000004337C7
l00000000004337C7:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004337F3
	// succ:  l00000000004337D1 l00000000004337F3
l00000000004337D1:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043393A
	// succ:  l00000000004337DF l000000000043393A
l00000000004337DF:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l00000000004337E7
l00000000004337E7:
	r10d = 0xFFFFFFFF<32>
	r10 = CONVERT(r10d, word32, uint64)
	Mem0[rsp + 0x58<64>:word16] = r10w
	// succ:  l00000000004337F3
l00000000004337F3:
	rdx = rbp
	rcx = rsi
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000043389A
	// succ:  l0000000000433806 l000000000043389A
l0000000000433806:
	Mem0[rsp + 0x35<64>:byte] = r15b
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	goto l0000000000433195
	// succ:  l0000000000433195
l0000000000433816:
	SCZO = cond(bx - Mem0[r12 + 0x4A<64>:word16])
	branch Test(NE,Z) l000000000043314D
	// succ:  l0000000000433822 l000000000043314D
l0000000000433822:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000433756
	// succ:  l0000000000433756
l000000000043382C:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l00000000004334F3
	// succ:  l00000000004334F3
l000000000043383A:
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	edx = -edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	C = edx == 0<32>
	SCZO = cond(Mem0[rsp + 0x37<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000433846
	// succ:  l0000000000433843_1 l0000000000433846
l0000000000433843_1:
	esi = edx
	// succ:  l0000000000433846
l0000000000433846:
	rdx = Mem0[rsp + 0x100<64>:word64]
	Mem0[rdx:word32] = esi
	goto l00000000004332FF
	// succ:  l00000000004332FF
l0000000000433855:
	SCZO = cond(Mem0[rsp + 0x20<64>:word32] - 0xA<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - r15b)
	branch Test(ULT,C) l0000000000433790
	// succ:  l0000000000433866 l0000000000433790
l0000000000433866:
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	SCZO = cond(Mem0[rsp + 0x20<64>:word32] - 8<32>)
	branch Test(EQ,Z) l000000000043398B
	// succ:  l0000000000433875 l000000000043398B
l0000000000433875:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000043398B
	// succ:  l000000000043387D l000000000043398B
l000000000043387D:
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l00000000004337C7
	// succ:  l00000000004337C7
l0000000000433890:
	Mem0[rsp + 0x35<64>:byte] = 1<8>
	goto l0000000000433195
	// succ:  l0000000000433195
l000000000043389A:
	rcx = rsi
	call fn000000000042B1B0 (retsize: 8;)
	SZO = cond(r15b & r15b)
	C = false
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(EQ,Z) l0000000000433930
	// succ:  l00000000004338AE l0000000000433930
l00000000004338AE:
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043375C
	// succ:  l000000000043375C
l00000000004338B9:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l0000000000433215
	// succ:  l0000000000433215
l00000000004338C7:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000433478
	// succ:  l0000000000433478
l00000000004338D2:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000433286
	// succ:  l0000000000433286
l00000000004338DD:
	rcx = rsp + 0x70<64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000451BE0 (retsize: 8;)
	goto l00000000004331CD
	// succ:  l00000000004331CD
l00000000004338F1:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l00000000004335ED
	// succ:  l00000000004335ED
l00000000004338FC:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l00000000004336C2
	// succ:  l00000000004336C2
l0000000000433907:
	rcx = rsi
	call fn000000000042B1B0 (retsize: 8;)
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000433756
	// succ:  l0000000000433756
l000000000043391D:
	rdx = Mem0[rsp + 0x38<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A50 (retsize: 8;)
	goto l000000000043333A
	// succ:  l000000000043333A
l0000000000433930:
	Mem0[rsp + 0x35<64>:byte] = r15b
	goto l0000000000433195
	// succ:  l0000000000433195
l000000000043393A:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l00000000004337E7
	// succ:  l00000000004337E7
l0000000000433945:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	goto l00000000004334C4
	// succ:  l00000000004334C4
l0000000000433953:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x37<64>:byte] = 0<8>
	goto l0000000000433187
	// succ:  l0000000000433187
l000000000043395F:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000433651
	// succ:  l0000000000433651
l000000000043396C:
	Mem0[rsp + 0x35<64>:byte] = 1<8>
	goto l00000000004331A1
	// succ:  l00000000004331A1
l0000000000433976:
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l00000000004332C3
	// succ:  l00000000004332C3
l0000000000433980:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l00000000004332C3
	// succ:  l00000000004332C3
l000000000043398B:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = 8<32>
	goto l00000000004337C7
	// succ:  l00000000004337C7
fn0000000000433080_exit:


// fn00000000004339C0
// Return size: 8
define fn00000000004339C0
fn00000000004339C0_entry:
	rsp = fp
	// succ:  l00000000004339C0
l00000000004339C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	rdx = Mem0[r8 + 8<64>:word64]
	rax = Mem0[r8:word64]
	rbx = Mem0[rsp + 0xF0<64>:word64]
	Mem0[rsp + 0xD0<64>:word64] = rcx
	rcx = rsp + 0x6E<64>
	Mem0[rsp + 0x58<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0x50<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0x48<64>:word64] = rdx
	rdx = rbx + 0xD0<64>
	Mem0[rsp + 0x40<64>:word64] = rax
	call fn000000000042A460 (retsize: 8;)
	esi = Mem0[rbx + 0x18<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	r12 = rax
	Mem0[rsp + 0x24<64>:word32] = 8<32>
	esi = esi & 0x4A<32>
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SCZO = cond(esi - 0x40<32>)
	branch Test(EQ,Z) l0000000000433A40
	// succ:  l0000000000433A2C l0000000000433A40
l0000000000433A2C:
	SCZO = cond(esi - 8<32>)
	eax = 0xA<32>
	rax = CONVERT(eax, word32, uint64)
	edx = 0x10<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l0000000000433A3C
	// succ:  l0000000000433A39_1 l0000000000433A3C
l0000000000433A39_1:
	eax = edx
	// succ:  l0000000000433A3C
l0000000000433A3C:
	Mem0[rsp + 0x24<64>:word32] = eax
	// succ:  l0000000000433A40
l0000000000433A40:
	rbp = rsp + 0x40<64>
	rdi = rsp + 0x50<64>
	rdx = rbp
	rcx = rdi
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(NE,Z) l000000000043433B
	// succ:  l0000000000433A60 l000000000043433B
l0000000000433A60:
	rcx = rdi
	call fn000000000042B1B0 (retsize: 8;)
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - Mem0[r12 + 0x94<64>:word16])
	Mem0[rsp + 0x37<64>:byte] = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(NE,Z) l0000000000434061
	// succ:  l0000000000433A7F l0000000000434061
l0000000000433A7F:
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000434165
	// succ:  l0000000000433A8D l0000000000434165
l0000000000433A8D:
	SCZO = cond(bx - Mem0[r12 + 0x48<64>:word16])
	branch Test(EQ,Z) l0000000000434076
	// succ:  l0000000000433A99 l0000000000434076
l0000000000433A99:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000433AB4
	// succ:  l0000000000433AA3 l0000000000433AB4
l0000000000433AA3:
	r13d = 0xFFFFFFFF<32>
	r13 = CONVERT(r13d, word32, uint64)
	call fn0000000000462DD0 (retsize: 8;)
	Mem0[rsp + 0x58<64>:word16] = r13w
	// succ:  l0000000000433AB4
l0000000000433AB4:
	rdx = rbp
	rcx = rdi
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004342A0
	// succ:  l0000000000433AC7 l00000000004342A0
l0000000000433AC7:
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	Mem0[rsp + 0x35<64>:byte] = 0<8>
	// succ:  l0000000000433AD5
l0000000000433AD5:
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 0x10<32>)
	edi = 0x16<32>
	rdi = CONVERT(edi, word32, uint64)
	branch Test(EQ,Z) l0000000000433AE6
	// succ:  l0000000000433AE1 l0000000000433AE6
l0000000000433AE1:
	rdi = CONVERT(Mem0[rsp + 0x24<64>:word32], word32, int64)
	// succ:  l0000000000433AE6
l0000000000433AE6:
	rax = rsp + 0x6F<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x38<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(Mem0[r12 + 0x20<64>:byte] - 0<8>)
	Mem0[rsp + 0x70<64>:word64] = rax
	branch Test(NE,Z) l0000000000434276
	// succ:  l0000000000433B0D l0000000000434276
l0000000000433B0D:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	r15 = r12 + 0x9C<64>
	v40 = edx_eax
	edx = CONVERT(v40 % Mem0[rsp + 0x24<64>:word32], word64, uint32)
	eax = CONVERT(v40 /u Mem0[rsp + 0x24<64>:word32], word32, uint32)
	SCZO = cond(eax)
	Mem0[rsp + 0x30<64>:word32] = eax
	eax = CONVERT(Mem0[r12 + 0xC8<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	Mem0[rsp + 0x36<64>:byte] = al
	branch Test(NE,Z) l0000000000433DFA
	// succ:  l0000000000433B39 l0000000000433DFA
l0000000000433B39:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	SZO = cond(r14b & r14b)
	C = false
	branch Test(NE,Z) l0000000000433E42
	// succ:  l0000000000433B46 l0000000000433E42
l0000000000433B46:
	r15d = SLICE(rdi + 0x30<64>, word32, 0)
	r15 = CONVERT(r15d, word32, uint64)
	// succ:  l0000000000433B4A
l0000000000433B4A:
	SCZO = cond(rdi - 0xA<64>)
	branch Test(UGT,CZ) l0000000000433D10
	// succ:  l0000000000433B54 l0000000000433D10
l0000000000433B54:
	SCZO = cond(bx - 0x2F<16>)
	branch Test(ULE,CZ) l0000000000433E42
	// succ:  l0000000000433B5E l0000000000433E42
l0000000000433B5E:
	SCZO = cond(r15w - bx)
	branch Test(ULE,CZ) l0000000000433E42
	// succ:  l0000000000433B68 l0000000000433E42
l0000000000433B68:
	ebx = ebx - 0x30<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	// succ:  l0000000000433B6B
l0000000000433B6B:
	SCZO = cond(Mem0[rsp + 0x30<64>:word32] - esi)
	branch Test(UGE,C) l0000000000433D44
	// succ:  l0000000000433B75 l0000000000433D44
l0000000000433B75:
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000433D68
	// succ:  l0000000000433B88 l0000000000433D68
l0000000000433B88:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000433E83
	// succ:  l0000000000433B96 l0000000000433E83
l0000000000433B96:
	rax = rax + 2<64>
	SCZO = cond(rax)
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rax
	Mem0[rsp + 0x58<64>:word16] = r9w
	// succ:  l0000000000433BAA
l0000000000433BAA:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000434260
	// succ:  l0000000000433BB8 l0000000000434260
l0000000000433BB8:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000433BBB
l0000000000433BBB:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000433E60
	// succ:  l0000000000433BC5 l0000000000433E60
l0000000000433BC5:
	rcx = Mem0[rsp + 0x40<64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x58<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000433DB3
	// succ:  l0000000000433BDA l0000000000433DB3
l0000000000433BDA:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000433D89
	// succ:  l0000000000433BE8 l0000000000433D89
l0000000000433BE8:
	SCZO = cond(bl - al)
	branch Test(NE,Z) l0000000000433DB3
	// succ:  l0000000000433BF0 l0000000000433DB3
l0000000000433BF0:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	// succ:  l0000000000433BF8
l0000000000433BF8:
	rax = Mem0[rsp + 0x70<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(NE,Z) l0000000000433C8B
	// succ:  l0000000000433C08 l0000000000433C8B
l0000000000433C08:
	SZO = cond(r13d & r13d)
	C = false
	dl = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(Mem0[rsp + 0x35<64>:byte] - dl)
	branch Test(UGE,C) l0000000000433CDC
	// succ:  l0000000000433C18 l0000000000433CDC
l0000000000433C18:
	rdx = Mem0[rsp + 0x100<64>:word64]
	Mem0[rdx:word32] = 0<32>
	rdx = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rdx:word32] = 4<32>
	// succ:  l0000000000433C34
l0000000000433C34:
	SZO = cond(r14b & r14b)
	C = false
	branch Test(EQ,Z) l0000000000433C44
	// succ:  l0000000000433C39 l0000000000433C44
l0000000000433C39:
	rdx = Mem0[rsp + 0xF8<64>:word64]
	v48 = Mem0[rdx:word32] | 2<32>
	Mem0[rdx:word32] = v48
	SZO = cond(Mem0[rdx:word32])
	C = false
	// succ:  l0000000000433C44
l0000000000433C44:
	rdx = Mem0[rsp + 0xD0<64>:word64]
	rcx = Mem0[rsp + 0x50<64>:word64]
	rbx = Mem0[rsp + 0x58<64>:word64]
	Mem0[rdx:word64] = rcx
	Mem0[rdx + 8<64>:word64] = rbx
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[rax - 8<64>:word32] = __xadd(Mem0[rax - 8<64>:word32], edx)
	SCZO = cond(Mem0[rax - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l00000000004342D7
	// succ:  l0000000000433C6F l00000000004342D7
l0000000000433C6F:
	rax = Mem0[rsp + 0xD0<64>:word64]
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004339C0_exit
l0000000000433C8B:
	rdi = rsp + 0x70<64>
	edx = CONVERT(r13b, byte, int32)
	rcx = rdi
	call fn0000000000451E10 (retsize: 8;)
	rdx = Mem0[r12 + 0x18<64>:word64]
	rcx = Mem0[r12 + 0x10<64>:word64]
	r8 = rdi
	call fn00000000004708F0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000433CC0
	// succ:  l0000000000433CB2 l0000000000433CC0
l0000000000433CB2:
	rax = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rax:word32] = 4<32>
	// succ:  l0000000000433CC0
l0000000000433CC0:
	SZO = cond(r13d & r13d)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(Mem0[rsp + 0x35<64>:byte] - al)
	rax = Mem0[rsp + 0x70<64>:word64]
	branch Test(UGE,C) l0000000000433CDC
	// succ:  l0000000000433CD1 l0000000000433CDC
l0000000000433CD1:
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000433C18
	// succ:  l0000000000433CDC l0000000000433C18
l0000000000433CDC:
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l0000000000433C18
	// succ:  l0000000000433CE4 l0000000000433C18
l0000000000433CE4:
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l0000000000434189
	// succ:  l0000000000433CED l0000000000434189
l0000000000433CED:
	rdx = Mem0[rsp + 0x100<64>:word64]
	Mem0[rdx:word32] = 0xFFFFFFFF<32>
	rdx = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rdx:word32] = 4<32>
	goto l0000000000433C34
	// succ:  l0000000000433C34
l0000000000433D10:
	eax = SLICE(rbx - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 9<16>)
	branch Test(ULE,CZ) l0000000000433B68
	// succ:  l0000000000433D1D l0000000000433B68
l0000000000433D1D:
	eax = SLICE(rbx - 0x61<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 5<16>)
	branch Test(ULE,CZ) l0000000000433E50
	// succ:  l0000000000433D2A l0000000000433E50
l0000000000433D2A:
	eax = SLICE(rbx - 0x41<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 5<16>)
	branch Test(UGT,CZ) l0000000000433E42
	// succ:  l0000000000433D37 l0000000000433E42
l0000000000433D37:
	ebx = ebx - 0x37<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SCZO = cond(Mem0[rsp + 0x30<64>:word32] - esi)
	branch Test(ULT,C) l0000000000433B75
	// succ:  l0000000000433D44 l0000000000433B75
l0000000000433D44:
	esi = esi *s Mem0[rsp + 0x24<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	rcx = Mem0[rsp + 0x50<64>:word64]
	eax = ~eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - esi)
	al = CONVERT(Test(ULT,C), bool, int8)
	esi = esi + ebx
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	ebp = ebp | eax
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000433B88
	// succ:  l0000000000433D68 l0000000000433B88
l0000000000433D68:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000433BF0
	// succ:  l0000000000433D76 l0000000000433BF0
l0000000000433D76:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l0000000000433BE8
	// succ:  l0000000000433D89 l0000000000433BE8
l0000000000433D89:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043426B
	// succ:  l0000000000433D97 l000000000043426B
l0000000000433D97:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000433D9A
l0000000000433D9A:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000433E70
	// succ:  l0000000000433DA4 l0000000000433E70
l0000000000433DA4:
	Mem0[rsp + 0x48<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(bl - al)
	branch Test(EQ,Z) l0000000000433BF0
	// succ:  l0000000000433DB3 l0000000000433BF0
l0000000000433DB3:
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebx = 0xFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000433B4A
	// succ:  l0000000000433DC6 l0000000000433B4A
l0000000000433DC6:
	ebx = CONVERT(Mem0[rsp + 0x58<64>:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(NE,Z) l0000000000433B4A
	// succ:  l0000000000433DD5 l0000000000433B4A
l0000000000433DD5:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043432D
	// succ:  l0000000000433DE3 l000000000043432D
l0000000000433DE3:
	ebx = CONVERT(Mem0[rax:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000433DE6
l0000000000433DE6:
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043424F
	// succ:  l0000000000433DF0 l000000000043424F
l0000000000433DF0:
	Mem0[rsp + 0x58<64>:word16] = bx
	goto l0000000000433B4A
	// succ:  l0000000000433B4A
l0000000000433DFA:
	SZO = cond(r14b & r14b)
	C = false
	branch Test(NE,Z) l0000000000434373
	// succ:  l0000000000433E03 l0000000000434373
l0000000000433E03:
	rax = rsp + 0x70<64>
	rdi = r15 + rdi * 2<64>
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	Mem0[rsp + 0x28<64>:word64] = rax
	// succ:  l0000000000433E15
l0000000000433E15:
	SCZO = cond(Mem0[r12 + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000433E29
	// succ:  l0000000000433E1D l0000000000433E29
l0000000000433E1D:
	SCZO = cond(bx - Mem0[r12 + 0x4A<64>:word16])
	branch Test(EQ,Z) l0000000000433FF4
	// succ:  l0000000000433E29 l0000000000433FF4
l0000000000433E29:
	SCZO = cond(bx - Mem0[r12 + 0x48<64>:word16])
	branch Test(EQ,Z) l0000000000433E42
	// succ:  l0000000000433E31 l0000000000433E42
l0000000000433E31:
	rax = r15
	// succ:  l0000000000433E34
l0000000000433E34:
	SCZO = cond(bx - Mem0[rax:word16])
	branch Test(EQ,Z) l0000000000433EB0
	// succ:  l0000000000433E39 l0000000000433EB0
l0000000000433E39:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(rax - rdi)
	branch Test(NE,Z) l0000000000433E34
	// succ:  l0000000000433E42 l0000000000433E34
l0000000000433E42:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l0000000000433BF8
	// succ:  l0000000000433BF8
l0000000000433E50:
	ebx = ebx - 0x57<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	goto l0000000000433B6B
	// succ:  l0000000000433B6B
l0000000000433E60:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l0000000000433D68
	// succ:  l0000000000433D68
l0000000000433E70:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000433BE8
	// succ:  l0000000000433BE8
l0000000000433E83:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	r8d = 0xFFFFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x58<64>:word16] = r8w
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000433D68
	// succ:  l0000000000433EA3 l0000000000433D68
l0000000000433EA3:
	goto l0000000000433BAA
	// succ:  l0000000000433BAA
l0000000000433EB0:
	rax = rax - r15
	SCZO = cond(rax)
	rax = rax >> 1<64>
	SCZO = cond(rax)
	edx = SLICE(rax - 6<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(eax - 0x10<32>)
	branch Test(LT,SO) l0000000000433EBF
	// succ:  l0000000000433EBC_1 l0000000000433EBF
l0000000000433EBC_1:
	eax = edx
	// succ:  l0000000000433EBF
l0000000000433EBF:
	SCZO = cond(Mem0[rsp + 0x30<64>:word32] - esi)
	branch Test(UGE,C) l0000000000433F85
	// succ:  l0000000000433EC9 l0000000000433F85
l0000000000433EC9:
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	// succ:  l0000000000433ECE
l0000000000433ECE:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000433FB0
	// succ:  l0000000000433EDC l0000000000433FB0
l0000000000433EDC:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043403E
	// succ:  l0000000000433EEA l000000000043403E
l0000000000433EEA:
	rax = rax + 2<64>
	SCZO = cond(rax)
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rax
	Mem0[rsp + 0x58<64>:word16] = dx
	// succ:  l0000000000433EFC
l0000000000433EFC:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000434295
	// succ:  l0000000000433F0A l0000000000434295
l0000000000433F0A:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000433F0D
l0000000000433F0D:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000434030
	// succ:  l0000000000433F17 l0000000000434030
l0000000000433F17:
	rcx = Mem0[rsp + 0x40<64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x58<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000433F3E
	// succ:  l0000000000433F28 l0000000000433F3E
l0000000000433F28:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000433FD1
	// succ:  l0000000000433F36 l0000000000433FD1
l0000000000433F36:
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l0000000000433BF0
	// succ:  l0000000000433F3E l0000000000433BF0
l0000000000433F3E:
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000433E15
	// succ:  l0000000000433F51 l0000000000433E15
l0000000000433F51:
	ebx = CONVERT(Mem0[rsp + 0x58<64>:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(NE,Z) l0000000000433E15
	// succ:  l0000000000433F60 l0000000000433E15
l0000000000433F60:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000434347
	// succ:  l0000000000433F6E l0000000000434347
l0000000000433F6E:
	ebx = CONVERT(Mem0[rax:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000433F71
l0000000000433F71:
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043417B
	// succ:  l0000000000433F7B l000000000043417B
l0000000000433F7B:
	Mem0[rsp + 0x58<64>:word16] = bx
	goto l0000000000433E15
	// succ:  l0000000000433E15
l0000000000433F85:
	esi = esi *s Mem0[rsp + 0x24<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[rsp + 0x50<64>:word64]
	edx = ~edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - esi)
	dl = CONVERT(Test(ULT,C), bool, int8)
	esi = esi + eax
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	ebp = ebp | edx
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000433EDC
	// succ:  l0000000000433FA9 l0000000000433EDC
l0000000000433FA9:
	// succ:  l0000000000433FB0
l0000000000433FB0:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000433BF0
	// succ:  l0000000000433FBE l0000000000433BF0
l0000000000433FBE:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	ebx = CONVERT(Mem0[rsp + 0x36<64>:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l0000000000433F36
	// succ:  l0000000000433FD1 l0000000000433F36
l0000000000433FD1:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043428A
	// succ:  l0000000000433FDF l000000000043428A
l0000000000433FDF:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000433FE2
l0000000000433FE2:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000434013
	// succ:  l0000000000433FE8 l0000000000434013
l0000000000433FE8:
	Mem0[rsp + 0x48<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000433F36
	// succ:  l0000000000433F36
l0000000000433FF4:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l0000000000434369
	// succ:  l0000000000433FFD l0000000000434369
l0000000000433FFD:
	rcx = Mem0[rsp + 0x28<64>:word64]
	edx = CONVERT(r13b, byte, int32)
	call fn0000000000451E10 (retsize: 8;)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	goto l0000000000433ECE
	// succ:  l0000000000433ECE
l0000000000434013:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = CONVERT(Mem0[rsp + 0x36<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000433F36
	// succ:  l0000000000433F36
l0000000000434030:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l0000000000433FB0
	// succ:  l0000000000433FB0
l000000000043403E:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x58<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000433FB0
	// succ:  l000000000043405C l0000000000433FB0
l000000000043405C:
	goto l0000000000433EFC
	// succ:  l0000000000433EFC
l0000000000434061:
	SCZO = cond(bx - Mem0[r12 + 0x96<64>:word16])
	branch Test(EQ,Z) l0000000000433A7F
	// succ:  l0000000000434070 l0000000000433A7F
l0000000000434070:
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000434076
l0000000000434076:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	// succ:  l000000000043407B
l000000000043407B:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000043408B
	// succ:  l000000000043407F l000000000043408B
l000000000043407F:
	SCZO = cond(Mem0[r12 + 0x4A<64>:word16] - bx)
	branch Test(EQ,Z) l00000000004342EA
	// succ:  l000000000043408B l00000000004342EA
l000000000043408B:
	SCZO = cond(Mem0[r12 + 0x48<64>:word16] - bx)
	branch Test(EQ,Z) l00000000004342EA
	// succ:  l0000000000434097 l00000000004342EA
l0000000000434097:
	SCZO = cond(Mem0[r12 + 0x9C<64>:word16] - bx)
	branch Test(EQ,Z) l00000000004341C4
	// succ:  l00000000004340A6 l00000000004341C4
l00000000004340A6:
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l00000000004342EA
	// succ:  l00000000004340AF l00000000004342EA
l00000000004340AF:
	SCZO = cond(Mem0[r12 + 0x98<64>:word16] - bx)
	branch Test(EQ,Z) l00000000004340C9
	// succ:  l00000000004340BA l00000000004340C9
l00000000004340BA:
	SCZO = cond(Mem0[r12 + 0x9A<64>:word16] - bx)
	branch Test(NE,Z) l0000000000434245
	// succ:  l00000000004340C9 l0000000000434245
l00000000004340C9:
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 0x10<32>)
	branch Test(EQ,Z) l00000000004340D8
	// succ:  l00000000004340D0 l00000000004340D8
l00000000004340D0:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l000000000043435F
	// succ:  l00000000004340D8 l000000000043435F
l00000000004340D8:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	Mem0[rsp + 0x24<64>:word32] = 0x10<32>
	// succ:  l00000000004340E5
l00000000004340E5:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000434200
	// succ:  l00000000004340F3 l0000000000434200
l00000000004340F3:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004342F4
	// succ:  l0000000000434101 l00000000004342F4
l0000000000434101:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	r11d = 0xFFFFFFFF<32>
	r11 = CONVERT(r11d, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rdx
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	Mem0[rsp + 0x58<64>:word16] = r11w
	branch Test(UGE,C) l0000000000434322
	// succ:  l0000000000434123 l0000000000434322
l0000000000434123:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000434126
l0000000000434126:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l00000000004342C9
	// succ:  l0000000000434130 l00000000004342C9
l0000000000434130:
	rcx = Mem0[rsp + 0x40<64>:word64]
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	Mem0[rsp + 0x58<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004341A5
	// succ:  l0000000000434142 l00000000004341A5
l0000000000434142:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000434222
	// succ:  l0000000000434150 l0000000000434222
l0000000000434150:
	SCZO = cond(r15b - al)
	branch Test(NE,Z) l00000000004341A5
	// succ:  l0000000000434155 l00000000004341A5
l0000000000434155:
	Mem0[rsp + 0x35<64>:byte] = bpl
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	goto l0000000000433AD5
	// succ:  l0000000000433AD5
l0000000000434165:
	SCZO = cond(bx - Mem0[r12 + 0x4A<64>:word16])
	branch Test(NE,Z) l0000000000433A8D
	// succ:  l0000000000434171 l0000000000433A8D
l0000000000434171:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000434076
	// succ:  l0000000000434076
l000000000043417B:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l0000000000433E15
	// succ:  l0000000000433E15
l0000000000434189:
	edx = CONVERT(Mem0[rsp + 0x37<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	ecx = -ecx
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	C = ecx == 0<32>
	esi = esi ^ ecx
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edx = edx + esi
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rsi = Mem0[rsp + 0x100<64>:word64]
	Mem0[rsi:word32] = edx
	goto l0000000000433C34
	// succ:  l0000000000433C34
l00000000004341A5:
	rcx = rdi
	call fn000000000042B1B0 (retsize: 8;)
	SZO = cond(bpl & bpl)
	C = false
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(EQ,Z) l00000000004342EA
	// succ:  l00000000004341B9 l00000000004342EA
l00000000004341B9:
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043407B
	// succ:  l000000000043407B
l00000000004341C4:
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 0xA<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - bpl)
	branch Test(ULT,C) l00000000004340AF
	// succ:  l00000000004341D5 l00000000004340AF
l00000000004341D5:
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 8<32>)
	branch Test(EQ,Z) l000000000043439C
	// succ:  l00000000004341E4 l000000000043439C
l00000000004341E4:
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l000000000043439C
	// succ:  l00000000004341EC l000000000043439C
l00000000004341EC:
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l00000000004340F3
	// succ:  l00000000004341FF l00000000004340F3
l00000000004341FF:
	// succ:  l0000000000434200
l0000000000434200:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000434155
	// succ:  l000000000043420E l0000000000434155
l000000000043420E:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	branch Test(NE,Z) l0000000000434150
	// succ:  l0000000000434222 l0000000000434150
l0000000000434222:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000434354
	// succ:  l0000000000434230 l0000000000434354
l0000000000434230:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000434233
l0000000000434233:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l00000000004342B6
	// succ:  l0000000000434239 l00000000004342B6
l0000000000434239:
	Mem0[rsp + 0x48<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000434150
	// succ:  l0000000000434150
l0000000000434245:
	Mem0[rsp + 0x35<64>:byte] = 1<8>
	goto l0000000000433AD5
	// succ:  l0000000000433AD5
l000000000043424F:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l0000000000433B4A
	// succ:  l0000000000433B4A
l0000000000434260:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000433BBB
	// succ:  l0000000000433BBB
l000000000043426B:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000433D9A
	// succ:  l0000000000433D9A
l0000000000434276:
	rcx = rsp + 0x70<64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000451BE0 (retsize: 8;)
	goto l0000000000433B0D
	// succ:  l0000000000433B0D
l000000000043428A:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000433FE2
	// succ:  l0000000000433FE2
l0000000000434295:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000433F0D
	// succ:  l0000000000433F0D
l00000000004342A0:
	rcx = rdi
	call fn000000000042B1B0 (retsize: 8;)
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000434076
	// succ:  l0000000000434076
l00000000004342B6:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000434150
	// succ:  l0000000000434150
l00000000004342C9:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l0000000000434200
	// succ:  l0000000000434200
l00000000004342D7:
	rdx = Mem0[rsp + 0x38<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000433C6F
	// succ:  l0000000000433C6F
l00000000004342EA:
	Mem0[rsp + 0x35<64>:byte] = bpl
	goto l0000000000433AD5
	// succ:  l0000000000433AD5
l00000000004342F4:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	r10d = 0xFFFFFFFF<32>
	r10 = CONVERT(r10d, word32, uint64)
	Mem0[rsp + 0x58<64>:word16] = r10w
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000434200
	// succ:  l0000000000434314 l0000000000434200
l0000000000434314:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l0000000000434123
	// succ:  l0000000000434322 l0000000000434123
l0000000000434322:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000434126
	// succ:  l0000000000434126
l000000000043432D:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000433DE6
	// succ:  l0000000000433DE6
l000000000043433B:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x37<64>:byte] = 0<8>
	goto l0000000000433AC7
	// succ:  l0000000000433AC7
l0000000000434347:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000433F71
	// succ:  l0000000000433F71
l0000000000434354:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000434233
	// succ:  l0000000000434233
l000000000043435F:
	Mem0[rsp + 0x35<64>:byte] = 1<8>
	goto l0000000000433AE1
	// succ:  l0000000000433AE1
l0000000000434369:
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000433BF8
	// succ:  l0000000000433BF8
l0000000000434373:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l0000000000433BF8
	// succ:  l0000000000433BF8
l000000000043439C:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	Mem0[rsp + 0x24<64>:word32] = 8<32>
	goto l00000000004340E5
	// succ:  l00000000004340E5
fn00000000004339C0_exit:


// fn00000000004343C0
// Return size: 8
define fn00000000004343C0
fn00000000004343C0_entry:
	rsp = fp
	// succ:  l00000000004343C0
l00000000004343C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	rdx = Mem0[r8 + 8<64>:word64]
	rax = Mem0[r8:word64]
	rbx = Mem0[rsp + 0xF0<64>:word64]
	Mem0[rsp + 0xD0<64>:word64] = rcx
	rcx = rsp + 0x6E<64>
	Mem0[rsp + 0x58<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0x50<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0x48<64>:word64] = rdx
	rdx = rbx + 0xD0<64>
	Mem0[rsp + 0x40<64>:word64] = rax
	call fn000000000042A460 (retsize: 8;)
	esi = Mem0[rbx + 0x18<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	rbp = rax
	Mem0[rsp + 0x20<64>:word32] = 8<32>
	esi = esi & 0x4A<32>
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SCZO = cond(esi - 0x40<32>)
	branch Test(EQ,Z) l0000000000434440
	// succ:  l000000000043442C l0000000000434440
l000000000043442C:
	SCZO = cond(esi - 8<32>)
	eax = 0xA<32>
	rax = CONVERT(eax, word32, uint64)
	edx = 0x10<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l000000000043443C
	// succ:  l0000000000434439_1 l000000000043443C
l0000000000434439_1:
	eax = edx
	// succ:  l000000000043443C
l000000000043443C:
	Mem0[rsp + 0x20<64>:word32] = eax
	// succ:  l0000000000434440
l0000000000434440:
	r12 = rsp + 0x40<64>
	rdi = rsp + 0x50<64>
	rdx = r12
	rcx = rdi
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	r13d = eax
	r13 = CONVERT(r13d, word32, uint64)
	branch Test(NE,Z) l0000000000434D77
	// succ:  l0000000000434460 l0000000000434D77
l0000000000434460:
	rcx = rdi
	call fn000000000042B1B0 (retsize: 8;)
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - Mem0[rbp + 0x94<64>:word16])
	Mem0[rsp + 0x37<64>:byte] = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(NE,Z) l0000000000434AA0
	// succ:  l000000000043447D l0000000000434AA0
l000000000043447D:
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000434BA0
	// succ:  l0000000000434489 l0000000000434BA0
l0000000000434489:
	SCZO = cond(bx - Mem0[rbp + 0x48<64>:word16])
	branch Test(EQ,Z) l0000000000434AB1
	// succ:  l0000000000434493 l0000000000434AB1
l0000000000434493:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004344AC
	// succ:  l000000000043449D l00000000004344AC
l000000000043449D:
	call fn0000000000462DD0 (retsize: 8;)
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x58<64>:word16] = ax
	// succ:  l00000000004344AC
l00000000004344AC:
	rdx = r12
	rcx = rdi
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000434CE0
	// succ:  l00000000004344BF l0000000000434CE0
l00000000004344BF:
	r13d = 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	Mem0[rsp + 0x24<64>:word32] = 0<32>
	Mem0[rsp + 0x35<64>:byte] = 0<8>
	// succ:  l00000000004344D2
l00000000004344D2:
	SCZO = cond(Mem0[rsp + 0x20<64>:word32] - 0x10<32>)
	r12d = 0x16<32>
	r12 = CONVERT(r12d, word32, uint64)
	branch Test(EQ,Z) l00000000004344E4
	// succ:  l00000000004344DF l00000000004344E4
l00000000004344DF:
	r12 = CONVERT(Mem0[rsp + 0x20<64>:word32], word32, int64)
	// succ:  l00000000004344E4
l00000000004344E4:
	rax = rsp + 0x6F<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x38<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x20<64>:byte] - 0<8>)
	Mem0[rsp + 0x70<64>:word64] = rax
	branch Test(NE,Z) l0000000000434CB6
	// succ:  l0000000000434509 l0000000000434CB6
l0000000000434509:
	eax = 0xFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	r14 = rbp + 0x9C<64>
	edx_eax = CONVERT(eax, int32, int64)
	v34 = edx_eax
	edx = CONVERT(v34 % Mem0[rsp + 0x20<64>:word32], int64, int32)
	eax = CONVERT(v34 / Mem0[rsp + 0x20<64>:word32], word32, int32)
	SCZO = cond(eax)
	Mem0[rsp + 0x32<64>:word16] = ax
	eax = CONVERT(Mem0[rbp + 0xC8<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	Mem0[rsp + 0x36<64>:byte] = al
	branch Test(NE,Z) l0000000000434817
	// succ:  l0000000000434532 l0000000000434817
l0000000000434532:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(r13b & r13b)
	C = false
	branch Test(NE,Z) l000000000043485F
	// succ:  l000000000043453F l000000000043485F
l000000000043453F:
	r15d = SLICE(r12 + 0x30<64>, word32, 0)
	r15 = CONVERT(r15d, word32, uint64)
	r14d = 0xFFFF<32>
	r14 = CONVERT(r14d, word32, uint64)
	// succ:  l000000000043454A
l000000000043454A:
	SCZO = cond(r12 - 0xA<64>)
	branch Test(UGT,CZ) l0000000000434720
	// succ:  l0000000000434554 l0000000000434720
l0000000000434554:
	SCZO = cond(bx - 0x2F<16>)
	branch Test(ULE,CZ) l000000000043485F
	// succ:  l000000000043455E l000000000043485F
l000000000043455E:
	SCZO = cond(r15w - bx)
	branch Test(ULE,CZ) l000000000043485F
	// succ:  l0000000000434568 l000000000043485F
l0000000000434568:
	ebx = ebx - 0x30<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	// succ:  l000000000043456B
l000000000043456B:
	SCZO = cond(Mem0[rsp + 0x32<64>:word16] - si)
	branch Test(UGE,C) l0000000000434755
	// succ:  l0000000000434576 l0000000000434755
l0000000000434576:
	rcx = Mem0[rsp + 0x50<64>:word64]
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043477F
	// succ:  l0000000000434589 l000000000043477F
l0000000000434589:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004348A3
	// succ:  l0000000000434597 l00000000004348A3
l0000000000434597:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x58<64>:word16] = ax
	// succ:  l00000000004345A9
l00000000004345A9:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000434CA0
	// succ:  l00000000004345B7 l0000000000434CA0
l00000000004345B7:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004345BA
l00000000004345BA:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000434880
	// succ:  l00000000004345C4 l0000000000434880
l00000000004345C4:
	rcx = Mem0[rsp + 0x40<64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x58<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004347D0
	// succ:  l00000000004345D9 l00000000004347D0
l00000000004345D9:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l00000000004347A0
	// succ:  l00000000004345E7 l00000000004347A0
l00000000004345E7:
	SCZO = cond(bl - al)
	branch Test(NE,Z) l00000000004347D0
	// succ:  l00000000004345EF l00000000004347D0
l00000000004345EF:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r13d = 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	// succ:  l00000000004345F7
l00000000004345F7:
	rax = Mem0[rsp + 0x70<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(NE,Z) l000000000043468C
	// succ:  l0000000000434607 l000000000043468C
l0000000000434607:
	edx = Mem0[rsp + 0x24<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	dl = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(Mem0[rsp + 0x35<64>:byte] - dl)
	branch Test(UGE,C) l00000000004346E1
	// succ:  l000000000043461A l00000000004346E1
l000000000043461A:
	rdi = Mem0[rsp + 0x100<64>:word64]
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	Mem0[rdi:word16] = cx
	rdi = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rdi:word32] = 4<32>
	// succ:  l0000000000434635
l0000000000434635:
	SZO = cond(r13b & r13b)
	C = false
	branch Test(EQ,Z) l0000000000434645
	// succ:  l000000000043463A l0000000000434645
l000000000043463A:
	rdi = Mem0[rsp + 0xF8<64>:word64]
	v44 = Mem0[rdi:word32] | 2<32>
	Mem0[rdi:word32] = v44
	SZO = cond(Mem0[rdi:word32])
	C = false
	// succ:  l0000000000434645
l0000000000434645:
	rdi = Mem0[rsp + 0xD0<64>:word64]
	rcx = Mem0[rsp + 0x50<64>:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rbx = Mem0[rsp + 0x58<64>:word64]
	Mem0[rdi:word64] = rcx
	Mem0[rdi + 8<64>:word64] = rbx
	__lock()
	Mem0[rax - 8<64>:word32] = __xadd(Mem0[rax - 8<64>:word32], edx)
	SCZO = cond(Mem0[rax - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l0000000000434D15
	// succ:  l0000000000434670 l0000000000434D15
l0000000000434670:
	rax = Mem0[rsp + 0xD0<64>:word64]
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004343C0_exit
l000000000043468C:
	edx = CONVERT(Mem0[rsp + 0x24<64>:byte], byte, int32)
	r12 = rsp + 0x70<64>
	rcx = r12
	call fn0000000000451E10 (retsize: 8;)
	rdx = Mem0[rbp + 0x18<64>:word64]
	rcx = Mem0[rbp + 0x10<64>:word64]
	r8 = r12
	call fn00000000004708F0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004346C0
	// succ:  l00000000004346B2 l00000000004346C0
l00000000004346B2:
	rax = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rax:word32] = 4<32>
	// succ:  l00000000004346C0
l00000000004346C0:
	r9d = Mem0[rsp + 0x24<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(Mem0[rsp + 0x35<64>:byte] - al)
	rax = Mem0[rsp + 0x70<64>:word64]
	branch Test(UGE,C) l00000000004346E1
	// succ:  l00000000004346D6 l00000000004346E1
l00000000004346D6:
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000043461A
	// succ:  l00000000004346E1 l000000000043461A
l00000000004346E1:
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l000000000043461A
	// succ:  l00000000004346E9 l000000000043461A
l00000000004346E9:
	SZO = cond(dil & dil)
	C = false
	branch Test(EQ,Z) l0000000000434BC2
	// succ:  l00000000004346F2 l0000000000434BC2
l00000000004346F2:
	rdi = Mem0[rsp + 0x100<64>:word64]
	r8d = 0xFFFFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rdi:word16] = r8w
	rdi = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rdi:word32] = 4<32>
	goto l0000000000434635
	// succ:  l0000000000434635
l0000000000434720:
	eax = SLICE(rbx - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 9<16>)
	branch Test(ULE,CZ) l0000000000434568
	// succ:  l000000000043472D l0000000000434568
l000000000043472D:
	eax = SLICE(rbx - 0x61<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 5<16>)
	branch Test(ULE,CZ) l0000000000434870
	// succ:  l000000000043473A l0000000000434870
l000000000043473A:
	eax = SLICE(rbx - 0x41<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 5<16>)
	branch Test(UGT,CZ) l000000000043485F
	// succ:  l0000000000434747 l000000000043485F
l0000000000434747:
	ebx = ebx - 0x37<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SCZO = cond(Mem0[rsp + 0x32<64>:word16] - si)
	branch Test(ULT,C) l0000000000434576
	// succ:  l0000000000434755 l0000000000434576
l0000000000434755:
	si = si *s Mem0[rsp + 0x20<64>:word16]
	SCZO = cond(si)
	eax = r14d
	rax = CONVERT(eax, word32, uint64)
	rcx = Mem0[rsp + 0x50<64>:word64]
	eax = eax - ebx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = CONVERT(si, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - eax)
	al = CONVERT(Test(GT,SZO), bool, int8)
	esi = esi + ebx
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	v50 = Mem0[rsp + 0x24<64>:word32] + 1<32>
	Mem0[rsp + 0x24<64>:word32] = v50
	SCZO = cond(v50)
	edi = edi | eax
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000434589
	// succ:  l000000000043477F l0000000000434589
l000000000043477F:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004345EF
	// succ:  l000000000043478D l00000000004345EF
l000000000043478D:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l00000000004345E7
	// succ:  l00000000004347A0 l00000000004345E7
l00000000004347A0:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000434CAB
	// succ:  l00000000004347AE l0000000000434CAB
l00000000004347AE:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004347B1
l00000000004347B1:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000434890
	// succ:  l00000000004347BB l0000000000434890
l00000000004347BB:
	Mem0[rsp + 0x48<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(bl - al)
	branch Test(EQ,Z) l00000000004345EF
	// succ:  l00000000004347CA l00000000004345EF
l00000000004347CA:
	// succ:  l00000000004347D0
l00000000004347D0:
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebx = 0xFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043454A
	// succ:  l00000000004347E3 l000000000043454A
l00000000004347E3:
	ebx = CONVERT(Mem0[rsp + 0x58<64>:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(NE,Z) l000000000043454A
	// succ:  l00000000004347F2 l000000000043454A
l00000000004347F2:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000434D69
	// succ:  l0000000000434800 l0000000000434D69
l0000000000434800:
	ebx = CONVERT(Mem0[rax:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000434803
l0000000000434803:
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000434C8F
	// succ:  l000000000043480D l0000000000434C8F
l000000000043480D:
	Mem0[rsp + 0x58<64>:word16] = bx
	goto l000000000043454A
	// succ:  l000000000043454A
l0000000000434817:
	SZO = cond(r13b & r13b)
	C = false
	branch Test(NE,Z) l0000000000434DAF
	// succ:  l0000000000434820 l0000000000434DAF
l0000000000434820:
	rax = rsp + 0x70<64>
	r12 = r14
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	r15d = 0xFFFF<32>
	r15 = CONVERT(r15d, word32, uint64)
	Mem0[rsp + 0x28<64>:word64] = rax
	// succ:  l0000000000434838
l0000000000434838:
	SCZO = cond(Mem0[rbp + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000434848
	// succ:  l000000000043483E l0000000000434848
l000000000043483E:
	SCZO = cond(bx - Mem0[rbp + 0x4A<64>:word16])
	branch Test(EQ,Z) l0000000000434A24
	// succ:  l0000000000434848 l0000000000434A24
l0000000000434848:
	SCZO = cond(bx - Mem0[rbp + 0x48<64>:word16])
	branch Test(EQ,Z) l000000000043485F
	// succ:  l000000000043484E l000000000043485F
l000000000043484E:
	rax = r14
	// succ:  l0000000000434851
l0000000000434851:
	SCZO = cond(bx - Mem0[rax:word16])
	branch Test(EQ,Z) l00000000004348D0
	// succ:  l0000000000434856 l00000000004348D0
l0000000000434856:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(rax - r12)
	branch Test(NE,Z) l0000000000434851
	// succ:  l000000000043485F l0000000000434851
l000000000043485F:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l00000000004345F7
	// succ:  l00000000004345F7
l0000000000434870:
	ebx = ebx - 0x57<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	goto l000000000043456B
	// succ:  l000000000043456B
l0000000000434880:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l000000000043477F
	// succ:  l000000000043477F
l0000000000434890:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000004345E7
	// succ:  l00000000004345E7
l00000000004348A3:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	Mem0[rsp + 0x58<64>:word16] = bx
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043477F
	// succ:  l00000000004348C1 l000000000043477F
l00000000004348C1:
	goto l00000000004345A9
	// succ:  l00000000004345A9
l00000000004348D0:
	rax = rax - r14
	SCZO = cond(rax)
	rax = rax >> 1<64>
	SCZO = cond(rax)
	edx = SLICE(rax - 6<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(eax - 0x10<32>)
	branch Test(LT,SO) l00000000004348DF
	// succ:  l00000000004348DC_1 l00000000004348DF
l00000000004348DC_1:
	eax = edx
	// succ:  l00000000004348DF
l00000000004348DF:
	SCZO = cond(Mem0[rsp + 0x32<64>:word16] - si)
	branch Test(UGE,C) l00000000004349B0
	// succ:  l00000000004348EA l00000000004349B0
l00000000004348EA:
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	// succ:  l00000000004348EF
l00000000004348EF:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004349E0
	// succ:  l00000000004348FD l00000000004349E0
l00000000004348FD:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000434A71
	// succ:  l000000000043490B l0000000000434A71
l000000000043490B:
	rax = rax + 2<64>
	SCZO = cond(rax)
	r11d = 0xFFFFFFFF<32>
	r11 = CONVERT(r11d, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rax
	Mem0[rsp + 0x58<64>:word16] = r11w
	// succ:  l000000000043491F
l000000000043491F:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000434CD5
	// succ:  l000000000043492D l0000000000434CD5
l000000000043492D:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000434930
l0000000000434930:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000434A63
	// succ:  l000000000043493A l0000000000434A63
l000000000043493A:
	rcx = Mem0[rsp + 0x40<64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x58<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000434961
	// succ:  l000000000043494B l0000000000434961
l000000000043494B:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000434A01
	// succ:  l0000000000434959 l0000000000434A01
l0000000000434959:
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l00000000004345EF
	// succ:  l0000000000434961 l00000000004345EF
l0000000000434961:
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000434838
	// succ:  l0000000000434974 l0000000000434838
l0000000000434974:
	ebx = CONVERT(Mem0[rsp + 0x58<64>:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(NE,Z) l0000000000434838
	// succ:  l0000000000434983 l0000000000434838
l0000000000434983:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000434D83
	// succ:  l0000000000434991 l0000000000434D83
l0000000000434991:
	ebx = CONVERT(Mem0[rax:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000434994
l0000000000434994:
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000434BB4
	// succ:  l000000000043499E l0000000000434BB4
l000000000043499E:
	Mem0[rsp + 0x58<64>:word16] = bx
	goto l0000000000434838
	// succ:  l0000000000434838
l00000000004349B0:
	si = si *s Mem0[rsp + 0x20<64>:word16]
	SCZO = cond(si)
	edx = r15d
	rdx = CONVERT(edx, word32, uint64)
	edx = edx - eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	ecx = CONVERT(si, word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx - edx)
	rcx = Mem0[rsp + 0x50<64>:word64]
	dl = CONVERT(Test(GT,SZO), bool, int8)
	esi = esi + eax
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	v55 = Mem0[rsp + 0x24<64>:word32] + 1<32>
	Mem0[rsp + 0x24<64>:word32] = v55
	SCZO = cond(v55)
	edi = edi | edx
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l00000000004348FD
	// succ:  l00000000004349DA l00000000004348FD
l00000000004349DA:
	// succ:  l00000000004349E0
l00000000004349E0:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004345EF
	// succ:  l00000000004349EE l00000000004345EF
l00000000004349EE:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	ebx = CONVERT(Mem0[rsp + 0x36<64>:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l0000000000434959
	// succ:  l0000000000434A01 l0000000000434959
l0000000000434A01:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000434CCA
	// succ:  l0000000000434A0F l0000000000434CCA
l0000000000434A0F:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000434A12
l0000000000434A12:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000434A50
	// succ:  l0000000000434A18 l0000000000434A50
l0000000000434A18:
	Mem0[rsp + 0x48<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000434959
	// succ:  l0000000000434959
l0000000000434A24:
	eax = Mem0[rsp + 0x24<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000434DA5
	// succ:  l0000000000434A30 l0000000000434DA5
l0000000000434A30:
	rcx = Mem0[rsp + 0x28<64>:word64]
	edx = CONVERT(al, byte, int32)
	call fn0000000000451E10 (retsize: 8;)
	Mem0[rsp + 0x24<64>:word32] = 0<32>
	goto l00000000004348EF
	// succ:  l00000000004348EF
l0000000000434A50:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = CONVERT(Mem0[rsp + 0x36<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000434959
	// succ:  l0000000000434959
l0000000000434A63:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l00000000004349E0
	// succ:  l00000000004349E0
l0000000000434A71:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	r10d = 0xFFFFFFFF<32>
	r10 = CONVERT(r10d, word32, uint64)
	Mem0[rsp + 0x58<64>:word16] = r10w
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004349E0
	// succ:  l0000000000434A91 l00000000004349E0
l0000000000434A91:
	goto l000000000043491F
	// succ:  l000000000043491F
l0000000000434AA0:
	SCZO = cond(bx - Mem0[rbp + 0x96<64>:word16])
	branch Test(EQ,Z) l000000000043447D
	// succ:  l0000000000434AAD l000000000043447D
l0000000000434AAD:
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000434AB1
l0000000000434AB1:
	Mem0[rsp + 0x24<64>:word32] = 0<32>
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	// succ:  l0000000000434ABC
l0000000000434ABC:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000434ACA
	// succ:  l0000000000434AC0 l0000000000434ACA
l0000000000434AC0:
	SCZO = cond(Mem0[rbp + 0x4A<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000434D28
	// succ:  l0000000000434ACA l0000000000434D28
l0000000000434ACA:
	SCZO = cond(Mem0[rbp + 0x48<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000434D28
	// succ:  l0000000000434AD4 l0000000000434D28
l0000000000434AD4:
	SCZO = cond(Mem0[rbp + 0x9C<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000434C00
	// succ:  l0000000000434AE1 l0000000000434C00
l0000000000434AE1:
	SZO = cond(r12b & r12b)
	C = false
	branch Test(EQ,Z) l0000000000434D28
	// succ:  l0000000000434AEA l0000000000434D28
l0000000000434AEA:
	SCZO = cond(Mem0[rbp + 0x98<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000434B00
	// succ:  l0000000000434AF3 l0000000000434B00
l0000000000434AF3:
	SCZO = cond(Mem0[rbp + 0x9A<64>:word16] - bx)
	branch Test(NE,Z) l0000000000434C85
	// succ:  l0000000000434B00 l0000000000434C85
l0000000000434B00:
	SCZO = cond(Mem0[rsp + 0x20<64>:word32] - 0x10<32>)
	branch Test(EQ,Z) l0000000000434B0F
	// succ:  l0000000000434B07 l0000000000434B0F
l0000000000434B07:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l0000000000434D9B
	// succ:  l0000000000434B0F l0000000000434D9B
l0000000000434B0F:
	Mem0[rsp + 0x24<64>:word32] = 0<32>
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	Mem0[rsp + 0x20<64>:word32] = 0x10<32>
	// succ:  l0000000000434B22
l0000000000434B22:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000434C40
	// succ:  l0000000000434B30 l0000000000434C40
l0000000000434B30:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000434D32
	// succ:  l0000000000434B3E l0000000000434D32
l0000000000434B3E:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rdx
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	Mem0[rsp + 0x58<64>:word16] = ax
	branch Test(UGE,C) l0000000000434D5E
	// succ:  l0000000000434B5E l0000000000434D5E
l0000000000434B5E:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000434B61
l0000000000434B61:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000434D07
	// succ:  l0000000000434B6B l0000000000434D07
l0000000000434B6B:
	rcx = Mem0[rsp + 0x40<64>:word64]
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	Mem0[rsp + 0x58<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000434BDF
	// succ:  l0000000000434B7D l0000000000434BDF
l0000000000434B7D:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000434C62
	// succ:  l0000000000434B8B l0000000000434C62
l0000000000434B8B:
	SCZO = cond(r14b - al)
	branch Test(NE,Z) l0000000000434BDF
	// succ:  l0000000000434B90 l0000000000434BDF
l0000000000434B90:
	Mem0[rsp + 0x35<64>:byte] = r12b
	r13d = 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	goto l00000000004344D2
	// succ:  l00000000004344D2
l0000000000434BA0:
	SCZO = cond(bx - Mem0[rbp + 0x4A<64>:word16])
	branch Test(NE,Z) l0000000000434489
	// succ:  l0000000000434BAA l0000000000434489
l0000000000434BAA:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000434AB1
	// succ:  l0000000000434AB1
l0000000000434BB4:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l0000000000434838
	// succ:  l0000000000434838
l0000000000434BC2:
	edx = CONVERT(Mem0[rsp + 0x37<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rdi = Mem0[rsp + 0x100<64>:word64]
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	ecx = -ecx
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	C = ecx == 0<32>
	esi = esi ^ ecx
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edx = edx + esi
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	Mem0[rdi:word16] = dx
	goto l0000000000434635
	// succ:  l0000000000434635
l0000000000434BDF:
	rcx = rdi
	call fn000000000042B1B0 (retsize: 8;)
	SZO = cond(r12b & r12b)
	C = false
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(EQ,Z) l0000000000434D28
	// succ:  l0000000000434BF3 l0000000000434D28
l0000000000434BF3:
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000434ABC
	// succ:  l0000000000434ABC
l0000000000434C00:
	SCZO = cond(Mem0[rsp + 0x20<64>:word32] - 0xA<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - r12b)
	branch Test(ULT,C) l0000000000434AEA
	// succ:  l0000000000434C11 l0000000000434AEA
l0000000000434C11:
	v59 = Mem0[rsp + 0x24<64>:word32] + 1<32>
	Mem0[rsp + 0x24<64>:word32] = v59
	SCZO = cond(v59)
	SCZO = cond(Mem0[rsp + 0x20<64>:word32] - 8<32>)
	branch Test(EQ,Z) l0000000000434DD8
	// succ:  l0000000000434C21 l0000000000434DD8
l0000000000434C21:
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l0000000000434DD8
	// succ:  l0000000000434C29 l0000000000434DD8
l0000000000434C29:
	rcx = Mem0[rsp + 0x50<64>:word64]
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000434B30
	// succ:  l0000000000434C3D l0000000000434B30
l0000000000434C3D:
	// succ:  l0000000000434C40
l0000000000434C40:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000434B90
	// succ:  l0000000000434C4E l0000000000434B90
l0000000000434C4E:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word16] - 0xFFFF<16>)
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(NE,Z) l0000000000434B8B
	// succ:  l0000000000434C62 l0000000000434B8B
l0000000000434C62:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000434D90
	// succ:  l0000000000434C70 l0000000000434D90
l0000000000434C70:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000434C73
l0000000000434C73:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000434CF4
	// succ:  l0000000000434C79 l0000000000434CF4
l0000000000434C79:
	Mem0[rsp + 0x48<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000434B8B
	// succ:  l0000000000434B8B
l0000000000434C85:
	Mem0[rsp + 0x35<64>:byte] = 1<8>
	goto l00000000004344D2
	// succ:  l00000000004344D2
l0000000000434C8F:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l000000000043454A
	// succ:  l000000000043454A
l0000000000434CA0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l00000000004345BA
	// succ:  l00000000004345BA
l0000000000434CAB:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l00000000004347B1
	// succ:  l00000000004347B1
l0000000000434CB6:
	rcx = rsp + 0x70<64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000451BE0 (retsize: 8;)
	goto l0000000000434509
	// succ:  l0000000000434509
l0000000000434CCA:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000434A12
	// succ:  l0000000000434A12
l0000000000434CD5:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000434930
	// succ:  l0000000000434930
l0000000000434CE0:
	rcx = rdi
	call fn000000000042B1B0 (retsize: 8;)
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000434AB1
	// succ:  l0000000000434AB1
l0000000000434CF4:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000434B8B
	// succ:  l0000000000434B8B
l0000000000434D07:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l0000000000434C40
	// succ:  l0000000000434C40
l0000000000434D15:
	rdx = Mem0[rsp + 0x38<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000434670
	// succ:  l0000000000434670
l0000000000434D28:
	Mem0[rsp + 0x35<64>:byte] = r12b
	goto l00000000004344D2
	// succ:  l00000000004344D2
l0000000000434D32:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x58<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000434C40
	// succ:  l0000000000434D50 l0000000000434C40
l0000000000434D50:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l0000000000434B5E
	// succ:  l0000000000434D5E l0000000000434B5E
l0000000000434D5E:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000434B61
	// succ:  l0000000000434B61
l0000000000434D69:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000434803
	// succ:  l0000000000434803
l0000000000434D77:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x37<64>:byte] = 0<8>
	goto l00000000004344BF
	// succ:  l00000000004344BF
l0000000000434D83:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000434994
	// succ:  l0000000000434994
l0000000000434D90:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000434C73
	// succ:  l0000000000434C73
l0000000000434D9B:
	Mem0[rsp + 0x35<64>:byte] = 1<8>
	goto l00000000004344DF
	// succ:  l00000000004344DF
l0000000000434DA5:
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l00000000004345F7
	// succ:  l00000000004345F7
l0000000000434DAF:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l00000000004345F7
	// succ:  l00000000004345F7
l0000000000434DD8:
	Mem0[rsp + 0x24<64>:word32] = 0<32>
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = 8<32>
	goto l0000000000434B22
	// succ:  l0000000000434B22
fn00000000004343C0_exit:


// fn0000000000434E00
// Return size: 8
define fn0000000000434E00
fn0000000000434E00_entry:
	rsp = fp
	// succ:  l0000000000434E00
l0000000000434E00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x98<64>
	SCZO = cond(rsp)
	rdx = Mem0[r8 + 8<64>:word64]
	rax = Mem0[r8:word64]
	esi = 8<32>
	rsi = CONVERT(esi, word32, uint64)
	rbx = Mem0[rsp + 0x100<64>:word64]
	Mem0[rsp + 0xE0<64>:word64] = rcx
	rcx = rsp + 0x7E<64>
	Mem0[rsp + 0x68<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0x60<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0x58<64>:word64] = rdx
	rdx = rbx + 0xD0<64>
	Mem0[rsp + 0x50<64>:word64] = rax
	call fn000000000042A460 (retsize: 8;)
	ebp = Mem0[rbx + 0x18<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	r12 = rax
	ebp = ebp & 0x4A<32>
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	SCZO = cond(ebp - 0x40<32>)
	branch Test(EQ,Z) l0000000000434E77
	// succ:  l0000000000434E69 l0000000000434E77
l0000000000434E69:
	SCZO = cond(ebp - 8<32>)
	eax = 0xA<32>
	rax = CONVERT(eax, word32, uint64)
	sil = 0x10<8>
	branch Test(EQ,Z) l0000000000434E77
	// succ:  l0000000000434E74_1 l0000000000434E77
l0000000000434E74_1:
	esi = eax
	// succ:  l0000000000434E77
l0000000000434E77:
	r15 = rsp + 0x50<64>
	rdi = rsp + 0x60<64>
	rdx = r15
	rcx = rdi
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(NE,Z) l0000000000435729
	// succ:  l0000000000434E97 l0000000000435729
l0000000000434E97:
	rcx = rdi
	call fn000000000042B1B0 (retsize: 8;)
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - Mem0[r12 + 0x94<64>:word16])
	Mem0[rsp + 0x47<64>:byte] = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(NE,Z) l0000000000435511
	// succ:  l0000000000434EB6 l0000000000435511
l0000000000434EB6:
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004355EE
	// succ:  l0000000000434EC4 l00000000004355EE
l0000000000434EC4:
	SCZO = cond(bx - Mem0[r12 + 0x48<64>:word16])
	branch Test(EQ,Z) l0000000000435526
	// succ:  l0000000000434ED0 l0000000000435526
l0000000000434ED0:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000434EEB
	// succ:  l0000000000434EDA l0000000000434EEB
l0000000000434EDA:
	r13d = 0xFFFFFFFF<32>
	r13 = CONVERT(r13d, word32, uint64)
	call fn0000000000462DD0 (retsize: 8;)
	Mem0[rsp + 0x68<64>:word16] = r13w
	// succ:  l0000000000434EEB
l0000000000434EEB:
	rdx = r15
	rcx = rdi
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004356DD
	// succ:  l0000000000434EFE l00000000004356DD
l0000000000434EFE:
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	Mem0[rsp + 0x45<64>:byte] = 0<8>
	// succ:  l0000000000434F0C
l0000000000434F0C:
	SCZO = cond(esi - 0x10<32>)
	edi = 0x16<32>
	rdi = CONVERT(edi, word32, uint64)
	branch Test(EQ,Z) l0000000000434F19
	// succ:  l0000000000434F16 l0000000000434F19
l0000000000434F16:
	rdi = CONVERT(esi, word32, int64)
	// succ:  l0000000000434F19
l0000000000434F19:
	rax = rsp + 0x7F<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x48<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(Mem0[r12 + 0x20<64>:byte] - 0<8>)
	Mem0[rsp + 0x80<64>:word64] = rax
	branch Test(NE,Z) l00000000004356B0
	// succ:  l0000000000434F43 l00000000004356B0
l0000000000434F43:
	SCZO = cond(Mem0[rsp + 0x47<64>:byte] - 0<8>)
	rdx = 0x7FFFFFFFFFFFFFFF<64>
	rax = 0x8000000000000000<64>
	r15 = r12 + 0x9C<64>
	branch Test(NE,Z) l0000000000434F68
	// succ:  l0000000000434F64_1 l0000000000434F68
l0000000000434F64_1:
	rax = rdx
	// succ:  l0000000000434F68
l0000000000434F68:
	rdx = CONVERT(esi, word32, int64)
	rsi = rdx
	Mem0[rsp + 0x30<64>:word64] = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x28<64>:word64] = rax
	v41 = rdx_rax
	rdx = CONVERT(v41 % rsi, word128, uint64)
	rax = CONVERT(v41 /u rsi, word64, uint64)
	SCZO = cond(rax)
	Mem0[rsp + 0x20<64>:word64] = rax
	eax = CONVERT(Mem0[r12 + 0xC8<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	Mem0[rsp + 0x46<64>:byte] = al
	branch Test(NE,Z) l0000000000435297
	// succ:  l0000000000434F97 l0000000000435297
l0000000000434F97:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	SZO = cond(r14b & r14b)
	C = false
	branch Test(NE,Z) l00000000004352E2
	// succ:  l0000000000434FA4 l00000000004352E2
l0000000000434FA4:
	r15d = SLICE(rdi + 0x30<64>, word32, 0)
	r15 = CONVERT(r15d, word32, uint64)
	// succ:  l0000000000434FA8
l0000000000434FA8:
	SCZO = cond(rdi - 0xA<64>)
	branch Test(UGT,CZ) l0000000000435191
	// succ:  l0000000000434FB2 l0000000000435191
l0000000000434FB2:
	SCZO = cond(bx - 0x2F<16>)
	branch Test(ULE,CZ) l00000000004352E2
	// succ:  l0000000000434FBC l00000000004352E2
l0000000000434FBC:
	SCZO = cond(r15w - bx)
	branch Test(ULE,CZ) l00000000004352E2
	// succ:  l0000000000434FC6 l00000000004352E2
l0000000000434FC6:
	ebx = ebx - 0x30<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	// succ:  l0000000000434FC9
l0000000000434FC9:
	SCZO = cond(Mem0[rsp + 0x20<64>:word64] - rsi)
	branch Test(UGE,C) l00000000004351D0
	// succ:  l0000000000434FD4 l00000000004351D0
l0000000000434FD4:
	rcx = Mem0[rsp + 0x60<64>:word64]
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004351FE
	// succ:  l0000000000434FE7 l00000000004351FE
l0000000000434FE7:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000435323
	// succ:  l0000000000434FF5 l0000000000435323
l0000000000434FF5:
	rax = rax + 2<64>
	SCZO = cond(rax)
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rax
	Mem0[rsp + 0x68<64>:word16] = r9w
	// succ:  l0000000000435009
l0000000000435009:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004356A5
	// succ:  l0000000000435017 l00000000004356A5
l0000000000435017:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043501A
l000000000043501A:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000435300
	// succ:  l0000000000435024 l0000000000435300
l0000000000435024:
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x68<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000435250
	// succ:  l0000000000435039 l0000000000435250
l0000000000435039:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043521F
	// succ:  l0000000000435047 l000000000043521F
l0000000000435047:
	SCZO = cond(al - bl)
	branch Test(NE,Z) l0000000000435250
	// succ:  l000000000043504F l0000000000435250
l000000000043504F:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	// succ:  l0000000000435057
l0000000000435057:
	rax = Mem0[rsp + 0x80<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(NE,Z) l00000000004350EE
	// succ:  l000000000043506A l00000000004350EE
l000000000043506A:
	SZO = cond(r13d & r13d)
	C = false
	dl = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(dl - Mem0[rsp + 0x45<64>:byte])
	branch Test(ULE,CZ) l0000000000435145
	// succ:  l000000000043507A l0000000000435145
l000000000043507A:
	rdx = Mem0[rsp + 0x110<64>:word64]
	Mem0[rdx:word64] = 0<64>
	rdx = Mem0[rsp + 0x108<64>:word64]
	Mem0[rdx:word32] = 4<32>
	// succ:  l0000000000435097
l0000000000435097:
	SZO = cond(r14b & r14b)
	C = false
	branch Test(EQ,Z) l00000000004350A7
	// succ:  l000000000043509C l00000000004350A7
l000000000043509C:
	rdx = Mem0[rsp + 0x108<64>:word64]
	v50 = Mem0[rdx:word32] | 2<32>
	Mem0[rdx:word32] = v50
	SZO = cond(Mem0[rdx:word32])
	C = false
	// succ:  l00000000004350A7
l00000000004350A7:
	rdx = Mem0[rsp + 0xE0<64>:word64]
	rcx = Mem0[rsp + 0x60<64>:word64]
	rbx = Mem0[rsp + 0x68<64>:word64]
	Mem0[rdx:word64] = rcx
	Mem0[rdx + 8<64>:word64] = rbx
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[rax - 8<64>:word32] = __xadd(Mem0[rax - 8<64>:word32], edx)
	SCZO = cond(Mem0[rax - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l00000000004356F3
	// succ:  l00000000004350D2 l00000000004356F3
l00000000004350D2:
	rax = Mem0[rsp + 0xE0<64>:word64]
	rsp = rsp + 0x98<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000434E00_exit
l00000000004350EE:
	rdi = rsp + 0x80<64>
	edx = CONVERT(r13b, byte, int32)
	rcx = rdi
	call fn0000000000451E10 (retsize: 8;)
	rdx = Mem0[r12 + 0x18<64>:word64]
	rcx = Mem0[r12 + 0x10<64>:word64]
	r8 = rdi
	call fn00000000004708F0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000435126
	// succ:  l0000000000435118 l0000000000435126
l0000000000435118:
	rax = Mem0[rsp + 0x108<64>:word64]
	Mem0[rax:word32] = 4<32>
	// succ:  l0000000000435126
l0000000000435126:
	SZO = cond(r13d & r13d)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - Mem0[rsp + 0x45<64>:byte])
	rax = Mem0[rsp + 0x80<64>:word64]
	branch Test(ULE,CZ) l0000000000435145
	// succ:  l000000000043513A l0000000000435145
l000000000043513A:
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000043507A
	// succ:  l0000000000435145 l000000000043507A
l0000000000435145:
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l000000000043507A
	// succ:  l000000000043514D l000000000043507A
l000000000043514D:
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l0000000000435612
	// succ:  l0000000000435156 l0000000000435612
l0000000000435156:
	SCZO = cond(Mem0[rsp + 0x47<64>:byte] - 0<8>)
	rsi = Mem0[rsp + 0x110<64>:word64]
	rcx = 0x8000000000000000<64>
	rdx = 0x7FFFFFFFFFFFFFFF<64>
	branch Test(EQ,Z) l000000000043517B
	// succ:  l0000000000435177_1 l000000000043517B
l0000000000435177_1:
	rdx = rcx
	// succ:  l000000000043517B
l000000000043517B:
	Mem0[rsi:word64] = rdx
	rdx = Mem0[rsp + 0x108<64>:word64]
	Mem0[rdx:word32] = 4<32>
	goto l0000000000435097
	// succ:  l0000000000435097
l0000000000435191:
	eax = SLICE(rbx - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 9<16>)
	branch Test(ULE,CZ) l0000000000434FC6
	// succ:  l000000000043519E l0000000000434FC6
l000000000043519E:
	eax = SLICE(rbx - 0x61<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 5<16>)
	branch Test(ULE,CZ) l00000000004352F0
	// succ:  l00000000004351AB l00000000004352F0
l00000000004351AB:
	eax = SLICE(rbx - 0x41<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 5<16>)
	branch Test(UGT,CZ) l00000000004352E2
	// succ:  l00000000004351B8 l00000000004352E2
l00000000004351B8:
	ebx = ebx - 0x37<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SCZO = cond(Mem0[rsp + 0x20<64>:word64] - rsi)
	branch Test(ULT,C) l0000000000434FD4
	// succ:  l00000000004351C6 l0000000000434FD4
l00000000004351C6:
	// succ:  l00000000004351D0
l00000000004351D0:
	rsi = rsi *s Mem0[rsp + 0x30<64>:word64]
	SCZO = cond(rsi)
	rax = Mem0[rsp + 0x28<64>:word64]
	rbx = CONVERT(ebx, word32, int64)
	rcx = Mem0[rsp + 0x60<64>:word64]
	rax = rax - rbx
	SCZO = cond(rax)
	SCZO = cond(rax - rsi)
	al = CONVERT(Test(ULT,C), bool, int8)
	rsi = rsi + rbx
	SCZO = cond(rsi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	ebp = ebp | eax
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000434FE7
	// succ:  l00000000004351FE l0000000000434FE7
l00000000004351FE:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043504F
	// succ:  l000000000043520C l000000000043504F
l000000000043520C:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word16] - 0xFFFF<16>)
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l0000000000435047
	// succ:  l000000000043521F l0000000000435047
l000000000043521F:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043569A
	// succ:  l000000000043522D l000000000043569A
l000000000043522D:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000435230
l0000000000435230:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000435310
	// succ:  l000000000043523A l0000000000435310
l000000000043523A:
	Mem0[rsp + 0x58<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l000000000043504F
	// succ:  l0000000000435249 l000000000043504F
l0000000000435249:
	// succ:  l0000000000435250
l0000000000435250:
	rcx = Mem0[rsp + 0x60<64>:word64]
	ebx = 0xFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000434FA8
	// succ:  l0000000000435263 l0000000000434FA8
l0000000000435263:
	ebx = CONVERT(Mem0[rsp + 0x68<64>:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(NE,Z) l0000000000434FA8
	// succ:  l0000000000435272 l0000000000434FA8
l0000000000435272:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043571B
	// succ:  l0000000000435280 l000000000043571B
l0000000000435280:
	ebx = CONVERT(Mem0[rax:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000435283
l0000000000435283:
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043568C
	// succ:  l000000000043528D l000000000043568C
l000000000043528D:
	Mem0[rsp + 0x68<64>:word16] = bx
	goto l0000000000434FA8
	// succ:  l0000000000434FA8
l0000000000435297:
	SZO = cond(r14b & r14b)
	C = false
	branch Test(NE,Z) l0000000000435756
	// succ:  l00000000004352A0 l0000000000435756
l00000000004352A0:
	rax = rsp + 0x80<64>
	rdi = r15 + rdi * 2<64>
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	Mem0[rsp + 0x38<64>:word64] = rax
	// succ:  l00000000004352B5
l00000000004352B5:
	SCZO = cond(Mem0[r12 + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l00000000004352C9
	// succ:  l00000000004352BD l00000000004352C9
l00000000004352BD:
	SCZO = cond(bx - Mem0[r12 + 0x4A<64>:word16])
	branch Test(EQ,Z) l00000000004354A4
	// succ:  l00000000004352C9 l00000000004354A4
l00000000004352C9:
	SCZO = cond(bx - Mem0[r12 + 0x48<64>:word16])
	branch Test(EQ,Z) l00000000004352E2
	// succ:  l00000000004352D1 l00000000004352E2
l00000000004352D1:
	rax = r15
	// succ:  l00000000004352D4
l00000000004352D4:
	SCZO = cond(bx - Mem0[rax:word16])
	branch Test(EQ,Z) l0000000000435350
	// succ:  l00000000004352D9 l0000000000435350
l00000000004352D9:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(rax - rdi)
	branch Test(NE,Z) l00000000004352D4
	// succ:  l00000000004352E2 l00000000004352D4
l00000000004352E2:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l0000000000435057
	// succ:  l0000000000435057
l00000000004352F0:
	ebx = ebx - 0x57<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	goto l0000000000434FC9
	// succ:  l0000000000434FC9
l0000000000435300:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l00000000004351FE
	// succ:  l00000000004351FE
l0000000000435310:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000435047
	// succ:  l0000000000435047
l0000000000435323:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	r8d = 0xFFFFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x68<64>:word16] = r8w
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004351FE
	// succ:  l0000000000435343 l00000000004351FE
l0000000000435343:
	goto l0000000000435009
	// succ:  l0000000000435009
l0000000000435350:
	rax = rax - r15
	SCZO = cond(rax)
	rax = rax >> 1<64>
	SCZO = cond(rax)
	edx = SLICE(rax - 6<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(eax - 0x10<32>)
	branch Test(LT,SO) l000000000043535F
	// succ:  l000000000043535C_1 l000000000043535F
l000000000043535C_1:
	eax = edx
	// succ:  l000000000043535F
l000000000043535F:
	SCZO = cond(Mem0[rsp + 0x20<64>:word64] - rsi)
	branch Test(UGE,C) l0000000000435430
	// succ:  l000000000043536A l0000000000435430
l000000000043536A:
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	// succ:  l000000000043536F
l000000000043536F:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000435460
	// succ:  l000000000043537D l0000000000435460
l000000000043537D:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004354EE
	// succ:  l000000000043538B l00000000004354EE
l000000000043538B:
	rax = rax + 2<64>
	SCZO = cond(rax)
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rax
	Mem0[rsp + 0x68<64>:word16] = dx
	// succ:  l000000000043539D
l000000000043539D:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004356C7
	// succ:  l00000000004353AB l00000000004356C7
l00000000004353AB:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004353AE
l00000000004353AE:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l00000000004354E0
	// succ:  l00000000004353B8 l00000000004354E0
l00000000004353B8:
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x68<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004353DF
	// succ:  l00000000004353C9 l00000000004353DF
l00000000004353C9:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000435481
	// succ:  l00000000004353D7 l0000000000435481
l00000000004353D7:
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l000000000043504F
	// succ:  l00000000004353DF l000000000043504F
l00000000004353DF:
	rcx = Mem0[rsp + 0x60<64>:word64]
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004352B5
	// succ:  l00000000004353F2 l00000000004352B5
l00000000004353F2:
	ebx = CONVERT(Mem0[rsp + 0x68<64>:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(NE,Z) l00000000004352B5
	// succ:  l0000000000435401 l00000000004352B5
l0000000000435401:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000435735
	// succ:  l000000000043540F l0000000000435735
l000000000043540F:
	ebx = CONVERT(Mem0[rax:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000435412
l0000000000435412:
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000435604
	// succ:  l000000000043541C l0000000000435604
l000000000043541C:
	Mem0[rsp + 0x68<64>:word16] = bx
	goto l00000000004352B5
	// succ:  l00000000004352B5
l0000000000435430:
	rsi = rsi *s Mem0[rsp + 0x30<64>:word64]
	SCZO = cond(rsi)
	rdx = Mem0[rsp + 0x28<64>:word64]
	rax = CONVERT(eax, int32, int64)
	rcx = Mem0[rsp + 0x60<64>:word64]
	rdx = rdx - rax
	SCZO = cond(rdx)
	SCZO = cond(rdx - rsi)
	dl = CONVERT(Test(ULT,C), bool, int8)
	rsi = rsi + rax
	SCZO = cond(rsi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	ebp = ebp | edx
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000043537D
	// succ:  l000000000043545D l000000000043537D
l000000000043545D:
	// succ:  l0000000000435460
l0000000000435460:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043504F
	// succ:  l000000000043546E l000000000043504F
l000000000043546E:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word16] - 0xFFFF<16>)
	ebx = CONVERT(Mem0[rsp + 0x46<64>:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l00000000004353D7
	// succ:  l0000000000435481 l00000000004353D7
l0000000000435481:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004356D2
	// succ:  l000000000043548F l00000000004356D2
l000000000043548F:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000435492
l0000000000435492:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l00000000004354C3
	// succ:  l0000000000435498 l00000000004354C3
l0000000000435498:
	Mem0[rsp + 0x58<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004353D7
	// succ:  l00000000004353D7
l00000000004354A4:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000043574C
	// succ:  l00000000004354AD l000000000043574C
l00000000004354AD:
	rcx = Mem0[rsp + 0x38<64>:word64]
	edx = CONVERT(r13b, byte, int32)
	call fn0000000000451E10 (retsize: 8;)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	goto l000000000043536F
	// succ:  l000000000043536F
l00000000004354C3:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	eax = CONVERT(Mem0[rsp + 0x46<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l00000000004353D7
	// succ:  l00000000004353D7
l00000000004354E0:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l0000000000435460
	// succ:  l0000000000435460
l00000000004354EE:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x68<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000435460
	// succ:  l000000000043550C l0000000000435460
l000000000043550C:
	goto l000000000043539D
	// succ:  l000000000043539D
l0000000000435511:
	SCZO = cond(bx - Mem0[r12 + 0x96<64>:word16])
	branch Test(EQ,Z) l0000000000434EB6
	// succ:  l0000000000435520 l0000000000434EB6
l0000000000435520:
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000435526
l0000000000435526:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x20<64>:word32] = ebp
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	rbp = rdi
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	// succ:  l0000000000435534
l0000000000435534:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000435544
	// succ:  l0000000000435538 l0000000000435544
l0000000000435538:
	SCZO = cond(Mem0[r12 + 0x4A<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000435706
	// succ:  l0000000000435544 l0000000000435706
l0000000000435544:
	SCZO = cond(Mem0[r12 + 0x48<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000435706
	// succ:  l0000000000435550 l0000000000435706
l0000000000435550:
	SCZO = cond(Mem0[r12 + 0x9C<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000435631
	// succ:  l000000000043555F l0000000000435631
l000000000043555F:
	SZO = cond(dil & dil)
	C = false
	branch Test(EQ,Z) l0000000000435706
	// succ:  l0000000000435568 l0000000000435706
l0000000000435568:
	SCZO = cond(Mem0[r12 + 0x98<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000435582
	// succ:  l0000000000435573 l0000000000435582
l0000000000435573:
	SCZO = cond(Mem0[r12 + 0x9A<64>:word16] - bx)
	branch Test(NE,Z) l0000000000435663
	// succ:  l0000000000435582 l0000000000435663
l0000000000435582:
	SCZO = cond(esi - 0x10<32>)
	branch Test(EQ,Z) l0000000000435595
	// succ:  l0000000000435587 l0000000000435595
l0000000000435587:
	r11d = Mem0[rsp + 0x20<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d & r11d)
	C = false
	branch Test(NE,Z) l0000000000435742
	// succ:  l0000000000435595 l0000000000435742
l0000000000435595:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	esi = 0x10<32>
	rsi = CONVERT(esi, word32, uint64)
	// succ:  l000000000043559F
l000000000043559F:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004355CB
	// succ:  l00000000004355A9 l00000000004355CB
l00000000004355A9:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000435710
	// succ:  l00000000004355B7 l0000000000435710
l00000000004355B7:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l00000000004355BF
l00000000004355BF:
	r10d = 0xFFFFFFFF<32>
	r10 = CONVERT(r10d, word32, uint64)
	Mem0[rsp + 0x68<64>:word16] = r10w
	// succ:  l00000000004355CB
l00000000004355CB:
	rdx = r15
	rcx = rbp
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000043566D
	// succ:  l00000000004355DE l000000000043566D
l00000000004355DE:
	Mem0[rsp + 0x45<64>:byte] = dil
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	goto l0000000000434F0C
	// succ:  l0000000000434F0C
l00000000004355EE:
	SCZO = cond(bx - Mem0[r12 + 0x4A<64>:word16])
	branch Test(NE,Z) l0000000000434EC4
	// succ:  l00000000004355FA l0000000000434EC4
l00000000004355FA:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000435526
	// succ:  l0000000000435526
l0000000000435604:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l00000000004352B5
	// succ:  l00000000004352B5
l0000000000435612:
	rdx = rsi
	rdx = -rdx
	SCZO = cond(rdx)
	C = rdx == 0<64>
	SCZO = cond(Mem0[rsp + 0x47<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000435621
	// succ:  l000000000043561D_1 l0000000000435621
l000000000043561D_1:
	rsi = rdx
	// succ:  l0000000000435621
l0000000000435621:
	rdx = Mem0[rsp + 0x110<64>:word64]
	Mem0[rdx:word64] = rsi
	goto l0000000000435097
	// succ:  l0000000000435097
l0000000000435631:
	SCZO = cond(esi - 0xA<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - dil)
	branch Test(ULT,C) l0000000000435568
	// succ:  l0000000000435640 l0000000000435568
l0000000000435640:
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	SCZO = cond(esi - 8<32>)
	branch Test(EQ,Z) l0000000000435761
	// succ:  l000000000043564D l0000000000435761
l000000000043564D:
	edi = Mem0[rsp + 0x20<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l0000000000435761
	// succ:  l0000000000435659 l0000000000435761
l0000000000435659:
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	goto l000000000043559F
	// succ:  l000000000043559F
l0000000000435663:
	Mem0[rsp + 0x45<64>:byte] = 1<8>
	goto l0000000000434F0C
	// succ:  l0000000000434F0C
l000000000043566D:
	rcx = rbp
	call fn000000000042B1B0 (retsize: 8;)
	SZO = cond(dil & dil)
	C = false
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(EQ,Z) l0000000000435706
	// succ:  l0000000000435681 l0000000000435706
l0000000000435681:
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000435534
	// succ:  l0000000000435534
l000000000043568C:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l0000000000434FA8
	// succ:  l0000000000434FA8
l000000000043569A:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000435230
	// succ:  l0000000000435230
l00000000004356A5:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000043501A
	// succ:  l000000000043501A
l00000000004356B0:
	rcx = rsp + 0x80<64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000451BE0 (retsize: 8;)
	goto l0000000000434F43
	// succ:  l0000000000434F43
l00000000004356C7:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l00000000004353AE
	// succ:  l00000000004353AE
l00000000004356D2:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000435492
	// succ:  l0000000000435492
l00000000004356DD:
	rcx = rdi
	call fn000000000042B1B0 (retsize: 8;)
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000435526
	// succ:  l0000000000435526
l00000000004356F3:
	rdx = Mem0[rsp + 0x48<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A50 (retsize: 8;)
	goto l00000000004350D2
	// succ:  l00000000004350D2
l0000000000435706:
	Mem0[rsp + 0x45<64>:byte] = dil
	goto l0000000000434F0C
	// succ:  l0000000000434F0C
l0000000000435710:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l00000000004355BF
	// succ:  l00000000004355BF
l000000000043571B:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000435283
	// succ:  l0000000000435283
l0000000000435729:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x47<64>:byte] = 0<8>
	goto l0000000000434EFE
	// succ:  l0000000000434EFE
l0000000000435735:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000435412
	// succ:  l0000000000435412
l0000000000435742:
	Mem0[rsp + 0x45<64>:byte] = 1<8>
	goto l0000000000434F16
	// succ:  l0000000000434F16
l000000000043574C:
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000435057
	// succ:  l0000000000435057
l0000000000435756:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l0000000000435057
	// succ:  l0000000000435057
l0000000000435761:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	esi = 8<32>
	rsi = CONVERT(esi, word32, uint64)
	goto l000000000043559F
	// succ:  l000000000043559F
fn0000000000434E00_exit:


// fn00000000004357A0
// Return size: 8
define fn00000000004357A0
fn00000000004357A0_entry:
	rsp = fp
	// succ:  l00000000004357A0
l00000000004357A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x98<64>
	SCZO = cond(rsp)
	rdx = Mem0[r8 + 8<64>:word64]
	rax = Mem0[r8:word64]
	esi = 8<32>
	rsi = CONVERT(esi, word32, uint64)
	rbx = Mem0[rsp + 0x100<64>:word64]
	Mem0[rsp + 0xE0<64>:word64] = rcx
	rcx = rsp + 0x7E<64>
	Mem0[rsp + 0x68<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0x60<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0x58<64>:word64] = rdx
	rdx = rbx + 0xD0<64>
	Mem0[rsp + 0x50<64>:word64] = rax
	call fn000000000042A460 (retsize: 8;)
	edi = Mem0[rbx + 0x18<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	r12 = rax
	edi = edi & 0x4A<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SCZO = cond(edi - 0x40<32>)
	branch Test(EQ,Z) l0000000000435817
	// succ:  l0000000000435809 l0000000000435817
l0000000000435809:
	SCZO = cond(edi - 8<32>)
	eax = 0xA<32>
	rax = CONVERT(eax, word32, uint64)
	sil = 0x10<8>
	branch Test(EQ,Z) l0000000000435817
	// succ:  l0000000000435814_1 l0000000000435817
l0000000000435814_1:
	esi = eax
	// succ:  l0000000000435817
l0000000000435817:
	r13 = rsp + 0x50<64>
	rbp = rsp + 0x60<64>
	rdx = r13
	rcx = rbp
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(NE,Z) l0000000000436189
	// succ:  l0000000000435837 l0000000000436189
l0000000000435837:
	rcx = rbp
	call fn000000000042B1B0 (retsize: 8;)
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - Mem0[r12 + 0x94<64>:word16])
	Mem0[rsp + 0x47<64>:byte] = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(NE,Z) l0000000000435E91
	// succ:  l0000000000435856 l0000000000435E91
l0000000000435856:
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000435F90
	// succ:  l0000000000435864 l0000000000435F90
l0000000000435864:
	SCZO = cond(bx - Mem0[r12 + 0x48<64>:word16])
	branch Test(EQ,Z) l0000000000435EA6
	// succ:  l0000000000435870 l0000000000435EA6
l0000000000435870:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043589C
	// succ:  l000000000043587A l000000000043589C
l000000000043587A:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043611A
	// succ:  l0000000000435888 l000000000043611A
l0000000000435888:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l0000000000435890
l0000000000435890:
	r15d = 0xFFFFFFFF<32>
	r15 = CONVERT(r15d, word32, uint64)
	Mem0[rsp + 0x68<64>:word16] = r15w
	// succ:  l000000000043589C
l000000000043589C:
	rdx = r13
	rcx = rbp
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004360E3
	// succ:  l00000000004358AF l00000000004360E3
l00000000004358AF:
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	Mem0[rsp + 0x45<64>:byte] = 0<8>
	// succ:  l00000000004358C0
l00000000004358C0:
	SCZO = cond(esi - 0x10<32>)
	edi = 0x16<32>
	rdi = CONVERT(edi, word32, uint64)
	branch Test(EQ,Z) l00000000004358CD
	// succ:  l00000000004358CA l00000000004358CD
l00000000004358CA:
	rdi = CONVERT(esi, word32, int64)
	// succ:  l00000000004358CD
l00000000004358CD:
	rax = rsp + 0x7F<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x48<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(Mem0[r12 + 0x20<64>:byte] - 0<8>)
	Mem0[rsp + 0x80<64>:word64] = rax
	branch Test(NE,Z) l00000000004360B6
	// succ:  l00000000004358F7 l00000000004360B6
l00000000004358F7:
	rax = CONVERT(esi, word32, int64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r15 = r12 + 0x9C<64>
	rsi = rax
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = 0xFFFFFFFFFFFFFFFF<64>
	v40 = rdx_rax
	rdx = CONVERT(v40 % rsi, word128, uint64)
	rax = CONVERT(v40 /u rsi, word64, uint64)
	SCZO = cond(rax)
	Mem0[rsp + 0x28<64>:word64] = rax
	eax = CONVERT(Mem0[r12 + 0xC8<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	Mem0[rsp + 0x46<64>:byte] = al
	branch Test(NE,Z) l0000000000435C17
	// succ:  l0000000000435930 l0000000000435C17
l0000000000435930:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	SZO = cond(r14b & r14b)
	C = false
	branch Test(NE,Z) l0000000000435C62
	// succ:  l000000000043593D l0000000000435C62
l000000000043593D:
	r15d = SLICE(rdi + 0x30<64>, word32, 0)
	r15 = CONVERT(r15d, word32, uint64)
	// succ:  l0000000000435941
l0000000000435941:
	SCZO = cond(rdi - 0xA<64>)
	branch Test(UGT,CZ) l0000000000435B11
	// succ:  l000000000043594B l0000000000435B11
l000000000043594B:
	SCZO = cond(bx - 0x2F<16>)
	branch Test(ULE,CZ) l0000000000435C62
	// succ:  l0000000000435955 l0000000000435C62
l0000000000435955:
	SCZO = cond(r15w - bx)
	branch Test(ULE,CZ) l0000000000435C62
	// succ:  l000000000043595F l0000000000435C62
l000000000043595F:
	ebx = ebx - 0x30<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	// succ:  l0000000000435962
l0000000000435962:
	SCZO = cond(Mem0[rsp + 0x28<64>:word64] - rsi)
	branch Test(UGE,C) l0000000000435B50
	// succ:  l000000000043596D l0000000000435B50
l000000000043596D:
	rcx = Mem0[rsp + 0x60<64>:word64]
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000435B7C
	// succ:  l0000000000435980 l0000000000435B7C
l0000000000435980:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000435CA3
	// succ:  l000000000043598E l0000000000435CA3
l000000000043598E:
	rax = rax + 2<64>
	SCZO = cond(rax)
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rax
	Mem0[rsp + 0x68<64>:word16] = r9w
	// succ:  l00000000004359A2
l00000000004359A2:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004360A0
	// succ:  l00000000004359B0 l00000000004360A0
l00000000004359B0:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004359B3
l00000000004359B3:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000435C80
	// succ:  l00000000004359BD l0000000000435C80
l00000000004359BD:
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x68<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000435BD0
	// succ:  l00000000004359D2 l0000000000435BD0
l00000000004359D2:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000435B9D
	// succ:  l00000000004359E0 l0000000000435B9D
l00000000004359E0:
	SCZO = cond(bl - al)
	branch Test(NE,Z) l0000000000435BD0
	// succ:  l00000000004359E8 l0000000000435BD0
l00000000004359E8:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	// succ:  l00000000004359F0
l00000000004359F0:
	rax = Mem0[rsp + 0x80<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(NE,Z) l0000000000435A87
	// succ:  l0000000000435A03 l0000000000435A87
l0000000000435A03:
	SZO = cond(r13d & r13d)
	C = false
	dl = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(dl - Mem0[rsp + 0x45<64>:byte])
	branch Test(ULE,CZ) l0000000000435ADE
	// succ:  l0000000000435A13 l0000000000435ADE
l0000000000435A13:
	rdx = Mem0[rsp + 0x110<64>:word64]
	Mem0[rdx:word64] = 0<64>
	rdx = Mem0[rsp + 0x108<64>:word64]
	Mem0[rdx:word32] = 4<32>
	// succ:  l0000000000435A30
l0000000000435A30:
	SZO = cond(r14b & r14b)
	C = false
	branch Test(EQ,Z) l0000000000435A40
	// succ:  l0000000000435A35 l0000000000435A40
l0000000000435A35:
	rdx = Mem0[rsp + 0x108<64>:word64]
	v47 = Mem0[rdx:word32] | 2<32>
	Mem0[rdx:word32] = v47
	SZO = cond(Mem0[rdx:word32])
	C = false
	// succ:  l0000000000435A40
l0000000000435A40:
	rdx = Mem0[rsp + 0xE0<64>:word64]
	rcx = Mem0[rsp + 0x60<64>:word64]
	rbx = Mem0[rsp + 0x68<64>:word64]
	Mem0[rdx:word64] = rcx
	Mem0[rdx + 8<64>:word64] = rbx
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[rax - 8<64>:word32] = __xadd(Mem0[rax - 8<64>:word32], edx)
	SCZO = cond(Mem0[rax - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l0000000000436125
	// succ:  l0000000000435A6B l0000000000436125
l0000000000435A6B:
	rax = Mem0[rsp + 0xE0<64>:word64]
	rsp = rsp + 0x98<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004357A0_exit
l0000000000435A87:
	rdi = rsp + 0x80<64>
	edx = CONVERT(r13b, byte, int32)
	rcx = rdi
	call fn0000000000451E10 (retsize: 8;)
	rdx = Mem0[r12 + 0x18<64>:word64]
	rcx = Mem0[r12 + 0x10<64>:word64]
	r8 = rdi
	call fn00000000004708F0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000435ABF
	// succ:  l0000000000435AB1 l0000000000435ABF
l0000000000435AB1:
	rax = Mem0[rsp + 0x108<64>:word64]
	Mem0[rax:word32] = 4<32>
	// succ:  l0000000000435ABF
l0000000000435ABF:
	SZO = cond(r13d & r13d)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - Mem0[rsp + 0x45<64>:byte])
	rax = Mem0[rsp + 0x80<64>:word64]
	branch Test(ULE,CZ) l0000000000435ADE
	// succ:  l0000000000435AD3 l0000000000435ADE
l0000000000435AD3:
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000435A13
	// succ:  l0000000000435ADE l0000000000435A13
l0000000000435ADE:
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l0000000000435A13
	// succ:  l0000000000435AE6 l0000000000435A13
l0000000000435AE6:
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l0000000000435FB4
	// succ:  l0000000000435AEF l0000000000435FB4
l0000000000435AEF:
	rdx = Mem0[rsp + 0x110<64>:word64]
	Mem0[rdx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	rdx = Mem0[rsp + 0x108<64>:word64]
	Mem0[rdx:word32] = 4<32>
	goto l0000000000435A30
	// succ:  l0000000000435A30
l0000000000435B11:
	eax = SLICE(rbx - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 9<16>)
	branch Test(ULE,CZ) l000000000043595F
	// succ:  l0000000000435B1E l000000000043595F
l0000000000435B1E:
	eax = SLICE(rbx - 0x61<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 5<16>)
	branch Test(ULE,CZ) l0000000000435C70
	// succ:  l0000000000435B2B l0000000000435C70
l0000000000435B2B:
	eax = SLICE(rbx - 0x41<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 5<16>)
	branch Test(UGT,CZ) l0000000000435C62
	// succ:  l0000000000435B38 l0000000000435C62
l0000000000435B38:
	ebx = ebx - 0x37<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SCZO = cond(Mem0[rsp + 0x28<64>:word64] - rsi)
	branch Test(ULT,C) l000000000043596D
	// succ:  l0000000000435B46 l000000000043596D
l0000000000435B46:
	// succ:  l0000000000435B50
l0000000000435B50:
	rsi = rsi *s Mem0[rsp + 0x30<64>:word64]
	SCZO = cond(rsi)
	rbx = CONVERT(ebx, word32, int64)
	rcx = Mem0[rsp + 0x60<64>:word64]
	rax = rbx
	rax = ~rax
	SCZO = cond(rax - rsi)
	al = CONVERT(Test(ULT,C), bool, int8)
	rsi = rsi + rbx
	SCZO = cond(rsi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	ebp = ebp | eax
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000435980
	// succ:  l0000000000435B7C l0000000000435980
l0000000000435B7C:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004359E8
	// succ:  l0000000000435B8A l00000000004359E8
l0000000000435B8A:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word16] - 0xFFFF<16>)
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l00000000004359E0
	// succ:  l0000000000435B9D l00000000004359E0
l0000000000435B9D:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004360AB
	// succ:  l0000000000435BAB l00000000004360AB
l0000000000435BAB:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000435BAE
l0000000000435BAE:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000435C90
	// succ:  l0000000000435BB8 l0000000000435C90
l0000000000435BB8:
	Mem0[rsp + 0x58<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(bl - al)
	branch Test(EQ,Z) l00000000004359E8
	// succ:  l0000000000435BC7 l00000000004359E8
l0000000000435BC7:
	// succ:  l0000000000435BD0
l0000000000435BD0:
	rcx = Mem0[rsp + 0x60<64>:word64]
	ebx = 0xFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000435941
	// succ:  l0000000000435BE3 l0000000000435941
l0000000000435BE3:
	ebx = CONVERT(Mem0[rsp + 0x68<64>:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(NE,Z) l0000000000435941
	// succ:  l0000000000435BF2 l0000000000435941
l0000000000435BF2:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043617B
	// succ:  l0000000000435C00 l000000000043617B
l0000000000435C00:
	ebx = CONVERT(Mem0[rax:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000435C03
l0000000000435C03:
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043608A
	// succ:  l0000000000435C0D l000000000043608A
l0000000000435C0D:
	Mem0[rsp + 0x68<64>:word16] = bx
	goto l0000000000435941
	// succ:  l0000000000435941
l0000000000435C17:
	SZO = cond(r14b & r14b)
	C = false
	branch Test(NE,Z) l00000000004361CA
	// succ:  l0000000000435C20 l00000000004361CA
l0000000000435C20:
	rax = rsp + 0x80<64>
	rdi = r15 + rdi * 2<64>
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	Mem0[rsp + 0x38<64>:word64] = rax
	// succ:  l0000000000435C35
l0000000000435C35:
	SCZO = cond(Mem0[r12 + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000435C49
	// succ:  l0000000000435C3D l0000000000435C49
l0000000000435C3D:
	SCZO = cond(bx - Mem0[r12 + 0x4A<64>:word16])
	branch Test(EQ,Z) l0000000000435E24
	// succ:  l0000000000435C49 l0000000000435E24
l0000000000435C49:
	SCZO = cond(bx - Mem0[r12 + 0x48<64>:word16])
	branch Test(EQ,Z) l0000000000435C62
	// succ:  l0000000000435C51 l0000000000435C62
l0000000000435C51:
	rax = r15
	// succ:  l0000000000435C54
l0000000000435C54:
	SCZO = cond(bx - Mem0[rax:word16])
	branch Test(EQ,Z) l0000000000435CD0
	// succ:  l0000000000435C59 l0000000000435CD0
l0000000000435C59:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(rax - rdi)
	branch Test(NE,Z) l0000000000435C54
	// succ:  l0000000000435C62 l0000000000435C54
l0000000000435C62:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l00000000004359F0
	// succ:  l00000000004359F0
l0000000000435C70:
	ebx = ebx - 0x57<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	goto l0000000000435962
	// succ:  l0000000000435962
l0000000000435C80:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l0000000000435B7C
	// succ:  l0000000000435B7C
l0000000000435C90:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000004359E0
	// succ:  l00000000004359E0
l0000000000435CA3:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	r8d = 0xFFFFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x68<64>:word16] = r8w
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000435B7C
	// succ:  l0000000000435CC3 l0000000000435B7C
l0000000000435CC3:
	goto l00000000004359A2
	// succ:  l00000000004359A2
l0000000000435CD0:
	rax = rax - r15
	SCZO = cond(rax)
	rax = rax >> 1<64>
	SCZO = cond(rax)
	edx = SLICE(rax - 6<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(eax - 0x10<32>)
	branch Test(LT,SO) l0000000000435CDF
	// succ:  l0000000000435CDC_1 l0000000000435CDF
l0000000000435CDC_1:
	eax = edx
	// succ:  l0000000000435CDF
l0000000000435CDF:
	SCZO = cond(Mem0[rsp + 0x28<64>:word64] - rsi)
	branch Test(UGE,C) l0000000000435DB0
	// succ:  l0000000000435CEA l0000000000435DB0
l0000000000435CEA:
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	// succ:  l0000000000435CEF
l0000000000435CEF:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000435DE0
	// succ:  l0000000000435CFD l0000000000435DE0
l0000000000435CFD:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000435E6E
	// succ:  l0000000000435D0B l0000000000435E6E
l0000000000435D0B:
	rax = rax + 2<64>
	SCZO = cond(rax)
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rax
	Mem0[rsp + 0x68<64>:word16] = dx
	// succ:  l0000000000435D1D
l0000000000435D1D:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004360D8
	// succ:  l0000000000435D2B l00000000004360D8
l0000000000435D2B:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000435D2E
l0000000000435D2E:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000435E60
	// succ:  l0000000000435D38 l0000000000435E60
l0000000000435D38:
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x68<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000435D5F
	// succ:  l0000000000435D49 l0000000000435D5F
l0000000000435D49:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000435E01
	// succ:  l0000000000435D57 l0000000000435E01
l0000000000435D57:
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l00000000004359E8
	// succ:  l0000000000435D5F l00000000004359E8
l0000000000435D5F:
	rcx = Mem0[rsp + 0x60<64>:word64]
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000435C35
	// succ:  l0000000000435D72 l0000000000435C35
l0000000000435D72:
	ebx = CONVERT(Mem0[rsp + 0x68<64>:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(NE,Z) l0000000000435C35
	// succ:  l0000000000435D81 l0000000000435C35
l0000000000435D81:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000436195
	// succ:  l0000000000435D8F l0000000000436195
l0000000000435D8F:
	ebx = CONVERT(Mem0[rax:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000435D92
l0000000000435D92:
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000435FA6
	// succ:  l0000000000435D9C l0000000000435FA6
l0000000000435D9C:
	Mem0[rsp + 0x68<64>:word16] = bx
	goto l0000000000435C35
	// succ:  l0000000000435C35
l0000000000435DB0:
	rsi = rsi *s Mem0[rsp + 0x30<64>:word64]
	SCZO = cond(rsi)
	rax = CONVERT(eax, int32, int64)
	rcx = Mem0[rsp + 0x60<64>:word64]
	rdx = rax
	rdx = ~rdx
	SCZO = cond(rdx - rsi)
	dl = CONVERT(Test(ULT,C), bool, int8)
	rsi = rsi + rax
	SCZO = cond(rsi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	ebp = ebp | edx
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000435CFD
	// succ:  l0000000000435DDB l0000000000435CFD
l0000000000435DDB:
	// succ:  l0000000000435DE0
l0000000000435DE0:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004359E8
	// succ:  l0000000000435DEE l00000000004359E8
l0000000000435DEE:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word16] - 0xFFFF<16>)
	ebx = CONVERT(Mem0[rsp + 0x46<64>:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l0000000000435D57
	// succ:  l0000000000435E01 l0000000000435D57
l0000000000435E01:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004360CD
	// succ:  l0000000000435E0F l00000000004360CD
l0000000000435E0F:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000435E12
l0000000000435E12:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000435E43
	// succ:  l0000000000435E18 l0000000000435E43
l0000000000435E18:
	Mem0[rsp + 0x58<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000435D57
	// succ:  l0000000000435D57
l0000000000435E24:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l00000000004361C0
	// succ:  l0000000000435E2D l00000000004361C0
l0000000000435E2D:
	rcx = Mem0[rsp + 0x38<64>:word64]
	edx = CONVERT(r13b, byte, int32)
	call fn0000000000451E10 (retsize: 8;)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	goto l0000000000435CEF
	// succ:  l0000000000435CEF
l0000000000435E43:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	eax = CONVERT(Mem0[rsp + 0x46<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000435D57
	// succ:  l0000000000435D57
l0000000000435E60:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l0000000000435DE0
	// succ:  l0000000000435DE0
l0000000000435E6E:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x68<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000435DE0
	// succ:  l0000000000435E8C l0000000000435DE0
l0000000000435E8C:
	goto l0000000000435D1D
	// succ:  l0000000000435D1D
l0000000000435E91:
	SCZO = cond(bx - Mem0[r12 + 0x96<64>:word16])
	branch Test(EQ,Z) l0000000000435856
	// succ:  l0000000000435EA0 l0000000000435856
l0000000000435EA0:
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000435EA6
l0000000000435EA6:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	// succ:  l0000000000435EAC
l0000000000435EAC:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000435EBC
	// succ:  l0000000000435EB0 l0000000000435EBC
l0000000000435EB0:
	SCZO = cond(Mem0[r12 + 0x4A<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000436138
	// succ:  l0000000000435EBC l0000000000436138
l0000000000435EBC:
	SCZO = cond(Mem0[r12 + 0x48<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000436138
	// succ:  l0000000000435EC8 l0000000000436138
l0000000000435EC8:
	SCZO = cond(Mem0[r12 + 0x9C<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000435FF4
	// succ:  l0000000000435ED7 l0000000000435FF4
l0000000000435ED7:
	SZO = cond(r15b & r15b)
	C = false
	branch Test(EQ,Z) l0000000000436138
	// succ:  l0000000000435EE0 l0000000000436138
l0000000000435EE0:
	SCZO = cond(Mem0[r12 + 0x98<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000435EFA
	// succ:  l0000000000435EEB l0000000000435EFA
l0000000000435EEB:
	SCZO = cond(Mem0[r12 + 0x9A<64>:word16] - bx)
	branch Test(NE,Z) l0000000000436080
	// succ:  l0000000000435EFA l0000000000436080
l0000000000435EFA:
	SCZO = cond(esi - 0x10<32>)
	branch Test(EQ,Z) l0000000000435F07
	// succ:  l0000000000435EFF l0000000000435F07
l0000000000435EFF:
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l00000000004361B6
	// succ:  l0000000000435F07 l00000000004361B6
l0000000000435F07:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	esi = 0x10<32>
	rsi = CONVERT(esi, word32, uint64)
	// succ:  l0000000000435F12
l0000000000435F12:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000436030
	// succ:  l0000000000435F20 l0000000000436030
l0000000000435F20:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000436142
	// succ:  l0000000000435F2E l0000000000436142
l0000000000435F2E:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	r11d = 0xFFFFFFFF<32>
	r11 = CONVERT(r11d, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rdx
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	Mem0[rsp + 0x68<64>:word16] = r11w
	branch Test(UGE,C) l0000000000436170
	// succ:  l0000000000435F50 l0000000000436170
l0000000000435F50:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000435F53
l0000000000435F53:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043610C
	// succ:  l0000000000435F5D l000000000043610C
l0000000000435F5D:
	rcx = Mem0[rsp + 0x50<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x68<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000435FD5
	// succ:  l0000000000435F6E l0000000000435FD5
l0000000000435F6E:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000436051
	// succ:  l0000000000435F7C l0000000000436051
l0000000000435F7C:
	SCZO = cond(dl - al)
	branch Test(NE,Z) l0000000000435FD5
	// succ:  l0000000000435F80 l0000000000435FD5
l0000000000435F80:
	Mem0[rsp + 0x45<64>:byte] = r15b
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	goto l00000000004358C0
	// succ:  l00000000004358C0
l0000000000435F90:
	SCZO = cond(bx - Mem0[r12 + 0x4A<64>:word16])
	branch Test(NE,Z) l0000000000435864
	// succ:  l0000000000435F9C l0000000000435864
l0000000000435F9C:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000435EA6
	// succ:  l0000000000435EA6
l0000000000435FA6:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l0000000000435C35
	// succ:  l0000000000435C35
l0000000000435FB4:
	edx = CONVERT(Mem0[rsp + 0x47<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdx
	rcx = -rcx
	SCZO = cond(rcx)
	C = rcx == 0<64>
	rsi = rsi ^ rcx
	SZO = cond(rsi)
	C = false
	rdx = rdx + rsi
	SCZO = cond(rdx)
	rsi = Mem0[rsp + 0x110<64>:word64]
	Mem0[rsi:word64] = rdx
	goto l0000000000435A30
	// succ:  l0000000000435A30
l0000000000435FD5:
	rcx = rbp
	call fn000000000042B1B0 (retsize: 8;)
	SZO = cond(r15b & r15b)
	C = false
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(EQ,Z) l0000000000436138
	// succ:  l0000000000435FE9 l0000000000436138
l0000000000435FE9:
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000435EAC
	// succ:  l0000000000435EAC
l0000000000435FF4:
	SCZO = cond(esi - 0xA<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - r15b)
	branch Test(ULT,C) l0000000000435EE0
	// succ:  l0000000000436003 l0000000000435EE0
l0000000000436003:
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	SCZO = cond(esi - 8<32>)
	branch Test(EQ,Z) l00000000004361F6
	// succ:  l0000000000436010 l00000000004361F6
l0000000000436010:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l00000000004361F6
	// succ:  l0000000000436018 l00000000004361F6
l0000000000436018:
	rcx = Mem0[rsp + 0x60<64>:word64]
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000435F20
	// succ:  l000000000043602C l0000000000435F20
l000000000043602C:
	// succ:  l0000000000436030
l0000000000436030:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000435F80
	// succ:  l000000000043603E l0000000000435F80
l000000000043603E:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word16] - 0xFFFF<16>)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l0000000000435F7C
	// succ:  l0000000000436051 l0000000000435F7C
l0000000000436051:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004361A2
	// succ:  l000000000043605F l00000000004361A2
l000000000043605F:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000436062
l0000000000436062:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l00000000004360F9
	// succ:  l000000000043606C l00000000004360F9
l000000000043606C:
	Mem0[rsp + 0x58<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000435F7C
	// succ:  l0000000000435F7C
l0000000000436080:
	Mem0[rsp + 0x45<64>:byte] = 1<8>
	goto l00000000004358C0
	// succ:  l00000000004358C0
l000000000043608A:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l0000000000435941
	// succ:  l0000000000435941
l00000000004360A0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l00000000004359B3
	// succ:  l00000000004359B3
l00000000004360AB:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000435BAE
	// succ:  l0000000000435BAE
l00000000004360B6:
	rcx = rsp + 0x80<64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000451BE0 (retsize: 8;)
	goto l00000000004358F7
	// succ:  l00000000004358F7
l00000000004360CD:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000435E12
	// succ:  l0000000000435E12
l00000000004360D8:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000435D2E
	// succ:  l0000000000435D2E
l00000000004360E3:
	rcx = rbp
	call fn000000000042B1B0 (retsize: 8;)
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	eax = CONVERT(Mem0[r12 + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000435EA6
	// succ:  l0000000000435EA6
l00000000004360F9:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000435F7C
	// succ:  l0000000000435F7C
l000000000043610C:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l0000000000436030
	// succ:  l0000000000436030
l000000000043611A:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l0000000000435890
	// succ:  l0000000000435890
l0000000000436125:
	rdx = Mem0[rsp + 0x48<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000435A6B
	// succ:  l0000000000435A6B
l0000000000436138:
	Mem0[rsp + 0x45<64>:byte] = r15b
	goto l00000000004358C0
	// succ:  l00000000004358C0
l0000000000436142:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	r10d = 0xFFFFFFFF<32>
	r10 = CONVERT(r10d, word32, uint64)
	Mem0[rsp + 0x68<64>:word16] = r10w
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000436030
	// succ:  l0000000000436162 l0000000000436030
l0000000000436162:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l0000000000435F50
	// succ:  l0000000000436170 l0000000000435F50
l0000000000436170:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000435F53
	// succ:  l0000000000435F53
l000000000043617B:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	ebx = CONVERT(ax, word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000435C03
	// succ:  l0000000000435C03
l0000000000436189:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x47<64>:byte] = 0<8>
	goto l00000000004358AF
	// succ:  l00000000004358AF
l0000000000436195:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000435D92
	// succ:  l0000000000435D92
l00000000004361A2:
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x28<64>:byte] = dl
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	edx = CONVERT(Mem0[rsp + 0x28<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000436062
	// succ:  l0000000000436062
l00000000004361B6:
	Mem0[rsp + 0x45<64>:byte] = 1<8>
	goto l00000000004358CA
	// succ:  l00000000004358CA
l00000000004361C0:
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l00000000004359F0
	// succ:  l00000000004359F0
l00000000004361CA:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l00000000004359F0
	// succ:  l00000000004359F0
l00000000004361F6:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	esi = 8<32>
	rsi = CONVERT(esi, word32, uint64)
	goto l0000000000435F12
	// succ:  l0000000000435F12
fn00000000004357A0_exit:


// fn0000000000436210
// Return size: 8
define fn0000000000436210
fn0000000000436210_entry:
	rsp = fp
	// succ:  l0000000000436210
l0000000000436210:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x98<64>
	SCZO = cond(rsp)
	rax = Mem0[r8:word64]
	rdx = Mem0[r8 + 8<64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0xE0<64>:word64] = rcx
	rcx = rsp + 0x7E<64>
	rdi = Mem0[rsp + 0x110<64>:word64]
	Mem0[rsp + 0x60<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0x68<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0x50<64>:word64] = rax
	rax = Mem0[rsp + 0x100<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = rdx
	rdx = rax + 0xD0<64>
	call fn000000000042A460 (retsize: 8;)
	rdx = rsp + 0x60<64>
	rsi = rax
	rax = rsp + 0x50<64>
	rcx = rdx
	Mem0[rsp + 0x20<64>:word64] = rdx
	rdx = rax
	Mem0[rsp + 0x40<64>:word64] = rax
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	r13d = eax
	r13 = CONVERT(r13d, word32, uint64)
	branch Test(EQ,Z) l0000000000436AC5
	// succ:  l000000000043629D l0000000000436AC5
l000000000043629D:
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	r13d = 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	// succ:  l00000000004362B0
l00000000004362B0:
	rax = rsp + 0x7F<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x48<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(Mem0[rsi + 0x20<64>:byte] - 0<8>)
	Mem0[rsp + 0x80<64>:word64] = rax
	branch Test(NE,Z) l0000000000436AAB
	// succ:  l00000000004362D8 l0000000000436AAB
l00000000004362D8:
	eax = CONVERT(Mem0[rsi + 0xC8<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	Mem0[rsp + 0x37<64>:byte] = al
	branch Test(NE,Z) l0000000000436450
	// succ:  l00000000004362EB l0000000000436450
l00000000004362EB:
	SZO = cond(r13b & r13b)
	C = false
	branch Test(NE,Z) l0000000000436BD6
	// succ:  l00000000004362F4 l0000000000436BD6
l00000000004362F4:
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	// succ:  l00000000004362F7
l00000000004362F7:
	eax = SLICE(rbx - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 9<16>)
	branch Test(UGT,CZ) l0000000000436599
	// succ:  l0000000000436304 l0000000000436599
l0000000000436304:
	rax = Mem0[rdi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	r12 = rdx + 1<64>
	SCZO = cond(r12 - Mem0[rax - 0x10<64>:word64])
	branch Test(UGT,CZ) l000000000043631E
	// succ:  l0000000000436315 l000000000043631E
l0000000000436315:
	r15d = Mem0[rax - 8<64>:word32]
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d & r15d)
	C = false
	branch Test(LE,SZO) l0000000000436330
	// succ:  l000000000043631E l0000000000436330
l000000000043631E:
	rdx = r12
	rcx = rdi
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rdi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	// succ:  l0000000000436330
l0000000000436330:
	Mem0[rax + rdx:byte] = bl
	rax = Mem0[rdi:word64]
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = r12
	Mem0[rax:byte] = 0<8>
	// succ:  l000000000043634C
l000000000043634C:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004366D3
	// succ:  l000000000043635A l00000000004366D3
l000000000043635A:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000436A31
	// succ:  l0000000000436368 l0000000000436A31
l0000000000436368:
	rax = rax + 2<64>
	SCZO = cond(rax)
	r10d = 0xFFFFFFFF<32>
	r10 = CONVERT(r10d, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rax
	Mem0[rsp + 0x68<64>:word16] = r10w
	// succ:  l000000000043637C
l000000000043637C:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000436BC0
	// succ:  l000000000043638A l0000000000436BC0
l000000000043638A:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043638D
l000000000043638D:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000436933
	// succ:  l0000000000436397 l0000000000436933
l0000000000436397:
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x68<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000436580
	// succ:  l00000000004363AC l0000000000436580
l00000000004363AC:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l00000000004366F4
	// succ:  l00000000004363BA l00000000004366F4
l00000000004363BA:
	SCZO = cond(al - bl)
	branch Test(NE,Z) l0000000000436580
	// succ:  l00000000004363C2 l0000000000436580
l00000000004363C2:
	rbx = Mem0[rsp + 0x80<64>:word64]
	SCZO = cond(Mem0[rbx - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000436408
	// succ:  l00000000004363D1 l0000000000436408
l00000000004363D1:
	r13d = r13d ^ 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r12 = rsp + 0x80<64>
	SCZO = cond(r14b - r13b)
	branch Test(ULT,C) l0000000000436BE9
	// succ:  l00000000004363E6 l0000000000436BE9
l00000000004363E6:
	rdx = Mem0[rsi + 0x18<64>:word64]
	rcx = Mem0[rsi + 0x10<64>:word64]
	r8 = r12
	call fn00000000004708F0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000436408
	// succ:  l00000000004363FA l0000000000436408
l00000000004363FA:
	rax = Mem0[rsp + 0x108<64>:word64]
	Mem0[rax:word32] = 4<32>
	// succ:  l0000000000436408
l0000000000436408:
	rax = Mem0[rsp + 0x60<64>:word64]
	rdi = Mem0[rsp + 0xE0<64>:word64]
	rdx = Mem0[rsp + 0x68<64>:word64]
	Mem0[rdi:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdi + 8<64>:word64] = rdx
	__lock()
	Mem0[rbx - 8<64>:word32] = __xadd(Mem0[rbx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rbx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000436E00
	// succ:  l0000000000436433 l0000000000436E00
l0000000000436433:
	rax = Mem0[rsp + 0xE0<64>:word64]
	rsp = rsp + 0x98<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000436210_exit
l0000000000436450:
	SZO = cond(r13b & r13b)
	C = false
	branch Test(NE,Z) l0000000000436BD6
	// succ:  l0000000000436459 l0000000000436BD6
l0000000000436459:
	rax = rsi + 0x9C<64>
	rdx = rsp + 0x80<64>
	r12 = rsi + 0xB0<64>
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	Mem0[rsp + 0x28<64>:word64] = rax
	eax = CONVERT(Mem0[rsi + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x38<64>:word64] = rdx
	// succ:  l0000000000436483
l0000000000436483:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000436491
	// succ:  l0000000000436487 l0000000000436491
l0000000000436487:
	SCZO = cond(bx - Mem0[rsi + 0x4A<64>:word16])
	branch Test(EQ,Z) l00000000004368A0
	// succ:  l0000000000436491 l00000000004368A0
l0000000000436491:
	SCZO = cond(bx - Mem0[rsi + 0x48<64>:word16])
	rax = Mem0[rsp + 0x28<64>:word64]
	branch Test(EQ,Z) l0000000000436720
	// succ:  l00000000004364A0 l0000000000436720
l00000000004364A0:
	SCZO = cond(bx - Mem0[rax:word16])
	branch Test(EQ,Z) l0000000000436840
	// succ:  l00000000004364A9 l0000000000436840
l00000000004364A9:
	rax = rax + 2<64>
	SCZO = cond(rax)
	SCZO = cond(rax - r12)
	branch Test(NE,Z) l00000000004364A0
	// succ:  l00000000004364B2 l00000000004364A0
l00000000004364B2:
	SCZO = cond(bx - Mem0[rsi + 0xB8<64>:word16])
	branch Test(EQ,Z) l00000000004364C8
	// succ:  l00000000004364BB l00000000004364C8
l00000000004364BB:
	SCZO = cond(bx - Mem0[rsi + 0xC4<64>:word16])
	branch Test(NE,Z) l00000000004363C2
	// succ:  l00000000004364C8 l00000000004363C2
l00000000004364C8:
	SCZO = cond(r15b - r13b)
	branch Test(ULE,CZ) l00000000004363C2
	// succ:  l00000000004364D1 l00000000004363C2
l00000000004364D1:
	SZO = cond(r14b & r14b)
	C = false
	branch Test(NE,Z) l00000000004364F3
	// succ:  l00000000004364D6 l00000000004364F3
l00000000004364D6:
	rax = Mem0[rsp + 0x80<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l00000000004364F3
	// succ:  l00000000004364E5 l00000000004364F3
l00000000004364E5:
	rcx = Mem0[rsp + 0x38<64>:word64]
	edx = CONVERT(bpl, byte, int32)
	call fn0000000000451E10 (retsize: 8;)
	// succ:  l00000000004364F3
l00000000004364F3:
	edx = 0x65<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call fn0000000000451E10 (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043652A
	// succ:  l000000000043650A l000000000043652A
l000000000043650A:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000436E13
	// succ:  l0000000000436518 l0000000000436E13
l0000000000436518:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l0000000000436520
l0000000000436520:
	ecx = 0xFFFFFFFF<32>
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x68<64>:word16] = cx
	// succ:  l000000000043652A
l000000000043652A:
	rbx = Mem0[rsp + 0x20<64>:word64]
	rdx = Mem0[rsp + 0x40<64>:word64]
	rcx = rbx
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004369C5
	// succ:  l0000000000436544 l00000000004369C5
l0000000000436544:
	rcx = rbx
	call fn000000000042B1B0 (retsize: 8;)
	SCZO = cond(ax - Mem0[rsi + 0x96<64>:word16])
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	dl = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(EQ,Z) l00000000004368D0
	// succ:  l000000000043655E l00000000004368D0
l000000000043655E:
	SCZO = cond(ax - Mem0[rsi + 0x94<64>:word16])
	branch Test(EQ,Z) l00000000004368D0
	// succ:  l000000000043656B l00000000004368D0
l000000000043656B:
	eax = CONVERT(Mem0[rsi + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043656F
l000000000043656F:
	r13d = 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	goto l0000000000436483
	// succ:  l0000000000436483
l0000000000436580:
	rcx = Mem0[rsp + 0x20<64>:word64]
	call fn000000000042B1B0 (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	eax = SLICE(rbx - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 9<16>)
	branch Test(ULE,CZ) l0000000000436304
	// succ:  l0000000000436599 l0000000000436304
l0000000000436599:
	SCZO = cond(Mem0[rsi + 0x48<64>:word16] - bx)
	branch Test(EQ,Z) l00000000004369E5
	// succ:  l00000000004365A3 l00000000004369E5
l00000000004365A3:
	SCZO = cond(Mem0[rsi + 0xB8<64>:word16] - bx)
	branch Test(EQ,Z) l00000000004365B9
	// succ:  l00000000004365AC l00000000004365B9
l00000000004365AC:
	SCZO = cond(Mem0[rsi + 0xC4<64>:word16] - bx)
	branch Test(NE,Z) l00000000004363C2
	// succ:  l00000000004365B9 l00000000004363C2
l00000000004365B9:
	SCZO = cond(r15b - r13b)
	branch Test(ULE,CZ) l00000000004363C2
	// succ:  l00000000004365C2 l00000000004363C2
l00000000004365C2:
	rax = Mem0[rdi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	rbx = rdx + 1<64>
	SCZO = cond(rbx - Mem0[rax - 0x10<64>:word64])
	branch Test(UGT,CZ) l00000000004365DC
	// succ:  l00000000004365D3 l00000000004365DC
l00000000004365D3:
	r12d = Mem0[rax - 8<64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d & r12d)
	C = false
	branch Test(LE,SZO) l00000000004365EE
	// succ:  l00000000004365DC l00000000004365EE
l00000000004365DC:
	rdx = rbx
	rcx = rdi
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rdi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	// succ:  l00000000004365EE
l00000000004365EE:
	Mem0[rax + rdx:byte] = 0x65<8>
	rax = Mem0[rdi:word64]
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = rbx
	Mem0[rax + rbx:byte] = 0<8>
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043697E
	// succ:  l0000000000436612 l000000000043697E
l0000000000436612:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043695E
	// succ:  l0000000000436620 l000000000043695E
l0000000000436620:
	rax = rax + 2<64>
	SCZO = cond(rax)
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rax
	Mem0[rsp + 0x68<64>:word16] = bx
	// succ:  l0000000000436632
l0000000000436632:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000436E29
	// succ:  l0000000000436640 l0000000000436E29
l0000000000436640:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000436643
l0000000000436643:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000436A60
	// succ:  l000000000043664D l0000000000436A60
l000000000043664D:
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x68<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000436674
	// succ:  l000000000043665E l0000000000436674
l000000000043665E:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043699B
	// succ:  l000000000043666C l000000000043699B
l000000000043666C:
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l00000000004369C5
	// succ:  l0000000000436674 l00000000004369C5
l0000000000436674:
	rcx = Mem0[rsp + 0x60<64>:word64]
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000436692
	// succ:  l0000000000436683 l0000000000436692
l0000000000436683:
	ebx = CONVERT(Mem0[rsp + 0x68<64>:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000436A10
	// succ:  l0000000000436692 l0000000000436A10
l0000000000436692:
	SCZO = cond(Mem0[rsi + 0x96<64>:word16] - bx)
	branch Test(EQ,Z) l0000000000436954
	// succ:  l000000000043669F l0000000000436954
l000000000043669F:
	SCZO = cond(Mem0[rsi + 0x94<64>:word16] - bx)
	r13d = 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	edx = 0x2D<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l00000000004362F7
	// succ:  l00000000004366B7 l00000000004362F7
l00000000004366B7:
	rcx = rdi
	call fn0000000000451E10 (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	r13d = 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000043635A
	// succ:  l00000000004366D3 l000000000043635A
l00000000004366D3:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004363C2
	// succ:  l00000000004366E1 l00000000004363C2
l00000000004366E1:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word16] - 0xFFFF<16>)
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l00000000004363BA
	// succ:  l00000000004366F4 l00000000004363BA
l00000000004366F4:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000436BCB
	// succ:  l0000000000436702 l0000000000436BCB
l0000000000436702:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000436705
l0000000000436705:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000436941
	// succ:  l000000000043670F l0000000000436941
l000000000043670F:
	Mem0[rsp + 0x58<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004363BA
	// succ:  l00000000004363BA
l0000000000436720:
	eax = r13d
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - r14b)
	branch Test(ULE,CZ) l00000000004369C5
	// succ:  l000000000043672F l00000000004369C5
l000000000043672F:
	rax = Mem0[rsp + 0x80<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000043674C
	// succ:  l000000000043673E l000000000043674C
l000000000043673E:
	rcx = Mem0[rsp + 0x38<64>:word64]
	edx = CONVERT(bpl, byte, int32)
	call fn0000000000451E10 (retsize: 8;)
	// succ:  l000000000043674C
l000000000043674C:
	edx = 0x2E<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call fn0000000000451E10 (retsize: 8;)
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	// succ:  l000000000043675F
l000000000043675F:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004367FA
	// succ:  l000000000043676D l00000000004367FA
l000000000043676D:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004367E0
	// succ:  l0000000000436777 l00000000004367E0
l0000000000436777:
	rax = rax + 2<64>
	SCZO = cond(rax)
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rax
	Mem0[rsp + 0x68<64>:word16] = dx
	// succ:  l0000000000436789
l0000000000436789:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000436AA0
	// succ:  l0000000000436797 l0000000000436AA0
l0000000000436797:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043679A
l000000000043679A:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000436910
	// succ:  l00000000004367A4 l0000000000436910
l00000000004367A4:
	rcx = Mem0[rsp + 0x50<64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x68<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004367C7
	// succ:  l00000000004367B5 l00000000004367C7
l00000000004367B5:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000436817
	// succ:  l00000000004367BF l0000000000436817
l00000000004367BF:
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l00000000004363C2
	// succ:  l00000000004367C7 l00000000004363C2
l00000000004367C7:
	rcx = Mem0[rsp + 0x20<64>:word64]
	call fn000000000042B1B0 (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	eax = CONVERT(Mem0[rsi + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000436483
	// succ:  l0000000000436483
l00000000004367E0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x68<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000436789
	// succ:  l00000000004367FA l0000000000436789
l00000000004367FA:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004363C2
	// succ:  l0000000000436808 l00000000004363C2
l0000000000436808:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word16] - 0xFFFF<16>)
	ebx = CONVERT(Mem0[rsp + 0x37<64>:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l00000000004367BF
	// succ:  l0000000000436817 l00000000004367BF
l0000000000436817:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000436A91
	// succ:  l0000000000436825 l0000000000436A91
l0000000000436825:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000436828
l0000000000436828:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000436920
	// succ:  l0000000000436832 l0000000000436920
l0000000000436832:
	Mem0[rsp + 0x58<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004367BF
	// succ:  l00000000004367BF
l0000000000436840:
	rax = rax - Mem0[rsp + 0x28<64>:word64]
	SCZO = cond(rax)
	rax = rax >> 1<64>
	SCZO = cond(rax)
	ebx = SLICE(rax + 0x30<64>, word32, 0)
	rbx = CONVERT(ebx, word32, uint64)
	rax = Mem0[rdi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	r15 = rdx + 1<64>
	SCZO = cond(r15 - Mem0[rax - 0x10<64>:word64])
	branch Test(UGT,CZ) l0000000000436865
	// succ:  l000000000043685C l0000000000436865
l000000000043685C:
	r8d = Mem0[rax - 8<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d & r8d)
	C = false
	branch Test(LE,SZO) l0000000000436877
	// succ:  l0000000000436865 l0000000000436877
l0000000000436865:
	rdx = r15
	rcx = rdi
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rdi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	// succ:  l0000000000436877
l0000000000436877:
	Mem0[rax + rdx:byte] = bl
	rax = Mem0[rdi:word64]
	ebp = ebp + 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	Mem0[rax - 0x18<64>:word64] = r15
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax + r15:byte] = 0<8>
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l000000000043675F
	// succ:  l000000000043675F
l00000000004368A0:
	eax = r13d
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - r14b)
	branch Test(ULE,CZ) l00000000004369C5
	// succ:  l00000000004368AF l00000000004369C5
l00000000004368AF:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l0000000000436E4C
	// succ:  l00000000004368B7 l0000000000436E4C
l00000000004368B7:
	rcx = Mem0[rsp + 0x38<64>:word64]
	edx = CONVERT(bpl, byte, int32)
	call fn0000000000451E10 (retsize: 8;)
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	goto l000000000043675F
	// succ:  l000000000043675F
l00000000004368D0:
	eax = CONVERT(Mem0[rsi + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004368E2
	// succ:  l00000000004368D8 l00000000004368E2
l00000000004368D8:
	SCZO = cond(bx - Mem0[rsi + 0x4A<64>:word16])
	branch Test(EQ,Z) l0000000000436C0A
	// succ:  l00000000004368E2 l0000000000436C0A
l00000000004368E2:
	SCZO = cond(bx - Mem0[rsi + 0x48<64>:word16])
	branch Test(EQ,Z) l000000000043656F
	// succ:  l00000000004368EC l000000000043656F
l00000000004368EC:
	SCZO = cond(dl - 1<8>)
	rcx = rdi
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx & 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 0x2B<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	call fn0000000000451E10 (retsize: 8;)
	r13d = 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	goto l000000000043675F
	// succ:  l000000000043675F
l0000000000436910:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l00000000004367FA
	// succ:  l00000000004367FA
l0000000000436920:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	eax = CONVERT(Mem0[rsp + 0x37<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l00000000004367BF
	// succ:  l00000000004367BF
l0000000000436933:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l00000000004366D3
	// succ:  l00000000004366D3
l0000000000436941:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000004363BA
	// succ:  l00000000004363BA
l0000000000436954:
	edx = 0x2B<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l00000000004366B7
	// succ:  l00000000004366B7
l000000000043695E:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	r11d = 0xFFFFFFFF<32>
	r11 = CONVERT(r11d, word32, uint64)
	Mem0[rsp + 0x68<64>:word16] = r11w
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000436632
	// succ:  l000000000043697E l0000000000436632
l000000000043697E:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004369C5
	// succ:  l0000000000436988 l00000000004369C5
l0000000000436988:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word16] - 0xFFFF<16>)
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l000000000043666C
	// succ:  l000000000043699B l000000000043666C
l000000000043699B:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000436E1E
	// succ:  l00000000004369A9 l0000000000436E1E
l00000000004369A9:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004369AC
l00000000004369AC:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000436A70
	// succ:  l00000000004369B6 l0000000000436A70
l00000000004369B6:
	Mem0[rsp + 0x58<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - bl)
	branch Test(NE,Z) l0000000000436674
	// succ:  l00000000004369C5 l0000000000436674
l00000000004369C5:
	rbx = Mem0[rsp + 0x80<64>:word64]
	r12 = rsp + 0x80<64>
	SCZO = cond(Mem0[rbx - 0x18<64>:word64] - 0<64>)
	branch Test(NE,Z) l00000000004363E6
	// succ:  l00000000004369E0 l00000000004363E6
l00000000004369E0:
	goto l0000000000436408
	// succ:  l0000000000436408
l00000000004369E5:
	eax = r13d
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - r14b)
	branch Test(ULE,CZ) l00000000004365A3
	// succ:  l00000000004369F4 l00000000004365A3
l00000000004369F4:
	edx = 0x2E<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call fn0000000000451E10 (retsize: 8;)
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	goto l000000000043634C
	// succ:  l000000000043634C
l0000000000436A10:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000436E34
	// succ:  l0000000000436A1E l0000000000436E34
l0000000000436A1E:
	ebx = CONVERT(Mem0[rax:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000436A21
l0000000000436A21:
	SCZO = cond(bx - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000436A83
	// succ:  l0000000000436A27 l0000000000436A83
l0000000000436A27:
	Mem0[rsp + 0x68<64>:word16] = bx
	goto l0000000000436692
	// succ:  l0000000000436692
l0000000000436A31:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x68<64>:word16] = r9w
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004366D3
	// succ:  l0000000000436A51 l00000000004366D3
l0000000000436A51:
	goto l000000000043637C
	// succ:  l000000000043637C
l0000000000436A60:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l000000000043697E
	// succ:  l000000000043697E
l0000000000436A70:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043666C
	// succ:  l000000000043666C
l0000000000436A83:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l0000000000436692
	// succ:  l0000000000436692
l0000000000436A91:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000436828
	// succ:  l0000000000436828
l0000000000436AA0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000043679A
	// succ:  l000000000043679A
l0000000000436AAB:
	r12 = rsp + 0x80<64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r12
	call fn0000000000451BE0 (retsize: 8;)
	goto l00000000004362D8
	// succ:  l00000000004362D8
l0000000000436AC5:
	rcx = Mem0[rsp + 0x20<64>:word64]
	call fn000000000042B1B0 (retsize: 8;)
	SCZO = cond(ax - Mem0[rsi + 0x96<64>:word16])
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(EQ,Z) l0000000000436C14
	// succ:  l0000000000436AE1 l0000000000436C14
l0000000000436AE1:
	SCZO = cond(ax - Mem0[rsi + 0x94<64>:word16])
	branch Test(EQ,Z) l0000000000436C14
	// succ:  l0000000000436AEE l0000000000436C14
l0000000000436AEE:
	edx = CONVERT(Mem0[rsi + 0x20<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000436AF2
l0000000000436AF2:
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	// succ:  l0000000000436B00
l0000000000436B00:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l0000000000436B0E
	// succ:  l0000000000436B04 l0000000000436B0E
l0000000000436B04:
	SCZO = cond(Mem0[rsi + 0x4A<64>:word16] - ax)
	branch Test(EQ,Z) l0000000000436DE0
	// succ:  l0000000000436B0E l0000000000436DE0
l0000000000436B0E:
	SCZO = cond(Mem0[rsi + 0x48<64>:word16] - ax)
	branch Test(EQ,Z) l0000000000436DE0
	// succ:  l0000000000436B18 l0000000000436DE0
l0000000000436B18:
	ebx = CONVERT(Mem0[rsi + 0x9C<64>:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bx - ax)
	branch Test(NE,Z) l0000000000436DE0
	// succ:  l0000000000436B28 l0000000000436DE0
l0000000000436B28:
	SZO = cond(r15b & r15b)
	C = false
	branch Test(EQ,Z) l0000000000436D20
	// succ:  l0000000000436B31 l0000000000436D20
l0000000000436B31:
	rcx = Mem0[rsp + 0x60<64>:word64]
	ebp = ebp + 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000436C99
	// succ:  l0000000000436B42 l0000000000436C99
l0000000000436B42:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000436DA4
	// succ:  l0000000000436B50 l0000000000436DA4
l0000000000436B50:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rdx
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	Mem0[rsp + 0x68<64>:word16] = ax
	branch Test(UGE,C) l0000000000436DD0
	// succ:  l0000000000436B70 l0000000000436DD0
l0000000000436B70:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000436B73
l0000000000436B73:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000436C90
	// succ:  l0000000000436B7D l0000000000436C90
l0000000000436B7D:
	rcx = Mem0[rsp + 0x50<64>:word64]
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	Mem0[rsp + 0x68<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000436CF0
	// succ:  l0000000000436B93 l0000000000436CF0
l0000000000436B93:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000436CBB
	// succ:  l0000000000436BA1 l0000000000436CBB
l0000000000436BA1:
	SCZO = cond(al - r12b)
	branch Test(NE,Z) l0000000000436CF0
	// succ:  l0000000000436BAA l0000000000436CF0
l0000000000436BAA:
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	r13d = 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	goto l00000000004362B0
	// succ:  l00000000004362B0
l0000000000436BC0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000043638D
	// succ:  l000000000043638D
l0000000000436BCB:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000436705
	// succ:  l0000000000436705
l0000000000436BD6:
	rbx = Mem0[rsp + 0x80<64>:word64]
	SCZO = cond(Mem0[rbx - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000436408
	// succ:  l0000000000436BE9 l0000000000436408
l0000000000436BE9:
	r12 = rsp + 0x80<64>
	edx = CONVERT(bpl, byte, int32)
	rcx = r12
	call fn0000000000451E10 (retsize: 8;)
	rbx = Mem0[rsp + 0x80<64>:word64]
	goto l00000000004363E6
	// succ:  l00000000004363E6
l0000000000436C0A:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043656F
	// succ:  l000000000043656F
l0000000000436C14:
	edx = CONVERT(Mem0[rsi + 0x20<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l0000000000436C29
	// succ:  l0000000000436C1C l0000000000436C29
l0000000000436C1C:
	eax = CONVERT(Mem0[rsi + 0x4A<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(bx - ax)
	branch Test(EQ,Z) l0000000000436E68
	// succ:  l0000000000436C29 l0000000000436E68
l0000000000436C29:
	eax = CONVERT(Mem0[rsi + 0x48<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(bx - ax)
	branch Test(EQ,Z) l0000000000436AF2
	// succ:  l0000000000436C36 l0000000000436AF2
l0000000000436C36:
	SCZO = cond(cl - 1<8>)
	rcx = rdi
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx & 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 0x2B<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	call fn0000000000451E10 (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000436C64
	// succ:  l0000000000436C53 l0000000000436C64
l0000000000436C53:
	call fn0000000000462DD0 (retsize: 8;)
	r8d = 0xFFFFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x68<64>:word16] = r8w
	// succ:  l0000000000436C64
l0000000000436C64:
	rdx = Mem0[rsp + 0x40<64>:word64]
	rcx = Mem0[rsp + 0x20<64>:word64]
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000043629D
	// succ:  l0000000000436C7B l000000000043629D
l0000000000436C7B:
	rcx = Mem0[rsp + 0x20<64>:word64]
	call fn000000000042B1B0 (retsize: 8;)
	edx = CONVERT(Mem0[rsi + 0x20<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000436AF2
	// succ:  l0000000000436AF2
l0000000000436C90:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	// succ:  l0000000000436C99
l0000000000436C99:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000436BAA
	// succ:  l0000000000436CA7 l0000000000436BAA
l0000000000436CA7:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word16] - 0xFFFF<16>)
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	branch Test(NE,Z) l0000000000436BA1
	// succ:  l0000000000436CBB l0000000000436BA1
l0000000000436CBB:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000436DF5
	// succ:  l0000000000436CC9 l0000000000436DF5
l0000000000436CC9:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000436CCC
l0000000000436CCC:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000436D70
	// succ:  l0000000000436CD6 l0000000000436D70
l0000000000436CD6:
	Mem0[rsp + 0x58<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - r12b)
	branch Test(EQ,Z) l0000000000436BAA
	// succ:  l0000000000436CE6 l0000000000436BAA
l0000000000436CE6:
	// succ:  l0000000000436CF0
l0000000000436CF0:
	rcx = Mem0[rsp + 0x60<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000436D0A
	// succ:  l0000000000436CFF l0000000000436D0A
l0000000000436CFF:
	eax = CONVERT(Mem0[rsp + 0x68<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000436D83
	// succ:  l0000000000436D0A l0000000000436D83
l0000000000436D0A:
	edx = CONVERT(Mem0[rsi + 0x20<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l0000000000436B00
	// succ:  l0000000000436B00
l0000000000436D20:
	rax = Mem0[rdi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	r12 = rdx + 1<64>
	SCZO = cond(r12 - Mem0[rax - 0x10<64>:word64])
	branch Test(UGT,CZ) l0000000000436D38
	// succ:  l0000000000436D31 l0000000000436D38
l0000000000436D31:
	ecx = Mem0[rax - 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(LE,SZO) l0000000000436D4A
	// succ:  l0000000000436D38 l0000000000436D4A
l0000000000436D38:
	rdx = r12
	rcx = rdi
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rdi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	// succ:  l0000000000436D4A
l0000000000436D4A:
	Mem0[rax + rdx:byte] = 0x30<8>
	rax = Mem0[rdi:word64]
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = r12
	Mem0[rax:byte] = 0<8>
	goto l0000000000436B31
	// succ:  l0000000000436B31
l0000000000436D70:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000436BA1
	// succ:  l0000000000436BA1
l0000000000436D83:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000436E41
	// succ:  l0000000000436D91 l0000000000436E41
l0000000000436D91:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000436D94
l0000000000436D94:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000436DE7
	// succ:  l0000000000436D9A l0000000000436DE7
l0000000000436D9A:
	Mem0[rsp + 0x68<64>:word16] = ax
	goto l0000000000436D0A
	// succ:  l0000000000436D0A
l0000000000436DA4:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x68<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000436C99
	// succ:  l0000000000436DC2 l0000000000436C99
l0000000000436DC2:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l0000000000436B70
	// succ:  l0000000000436DD0 l0000000000436B70
l0000000000436DD0:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000436B73
	// succ:  l0000000000436B73
l0000000000436DE0:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l00000000004362B0
	// succ:  l00000000004362B0
l0000000000436DE7:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l0000000000436D0A
	// succ:  l0000000000436D0A
l0000000000436DF5:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000436CCC
	// succ:  l0000000000436CCC
l0000000000436E00:
	rdx = Mem0[rsp + 0x48<64>:word64]
	rcx = rbx - 0x18<64>
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000436433
	// succ:  l0000000000436433
l0000000000436E13:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l0000000000436520
	// succ:  l0000000000436520
l0000000000436E1E:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l00000000004369AC
	// succ:  l00000000004369AC
l0000000000436E29:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000436643
	// succ:  l0000000000436643
l0000000000436E34:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000436A21
	// succ:  l0000000000436A21
l0000000000436E41:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000436D94
	// succ:  l0000000000436D94
l0000000000436E4C:
	rax = Mem0[rdi:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rdi
	r8 = Mem0[rax - 0x18<64>:word64]
	call fn0000000000451CC0 (retsize: 8;)
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	goto l00000000004363C2
	// succ:  l00000000004363C2
l0000000000436E68:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000436AF2
	// succ:  l0000000000436AF2
fn0000000000436210_exit:


// fn0000000000436EA0
// Return size: 8
define fn0000000000436EA0
fn0000000000436EA0_entry:
	rsp = fp
	// succ:  l0000000000436EA0
l0000000000436EA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000436EA0_exit
fn0000000000436EA0_exit:


// fn0000000000436F10
// Return size: 8
define fn0000000000436F10
fn0000000000436F10_entry:
	rsp = fp
	// succ:  l0000000000436F10
l0000000000436F10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000436F10_exit
fn0000000000436F10_exit:


// fn0000000000436F80
// Return size: 8
define fn0000000000436F80
fn0000000000436F80_entry:
	rsp = fp
	// succ:  l0000000000436F80
l0000000000436F80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000436F80_exit
fn0000000000436F80_exit:


// fn0000000000436FF0
// Return size: 8
define fn0000000000436FF0
fn0000000000436FF0_entry:
	rsp = fp
	// succ:  l0000000000436FF0
l0000000000436FF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x58<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000436FF0_exit
fn0000000000436FF0_exit:


// fn0000000000437060
// Return size: 8
define fn0000000000437060
fn0000000000437060_entry:
	rsp = fp
	// succ:  l0000000000437060
l0000000000437060:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000437060_exit
fn0000000000437060_exit:


// fn00000000004370D0
// Return size: 8
define fn00000000004370D0
fn00000000004370D0_entry:
	rsp = fp
	// succ:  l00000000004370D0
l00000000004370D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x0000000000437FB0<p64>
	xmm3 = Mem0[r8:word128]
	rbx = rcx
	r8 = Mem0[rsp + 0x98<64>:word64]
	rcx = Mem0[rsp + 0x90<64>:word64]
	rax = Mem0[rax + 0x28<64>:word64]
	xmm1 = Mem0[r9:word128]
	r9 = Mem0[rsp + 0xA0<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = r8
	r8 = rsp + 0x50<64>
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	Mem0[rsp + 0x50<64>:word128] = xmm3
	Mem0[rsp + 0x30<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x40<64>:word128] = xmm1
	branch Test(NE,Z) l0000000000437141
	// succ:  l0000000000437133 l0000000000437141
l0000000000437133:
	call fn0000000000432750 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004370D0_exit
l0000000000437141:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004370D0_exit
fn00000000004370D0_exit:


// fn0000000000437150
// Return size: 8
define fn0000000000437150
fn0000000000437150_entry:
	rsp = fp
	// succ:  l0000000000437150
l0000000000437150:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x0000000000438020<p64>
	xmm3 = Mem0[r8:word128]
	rbx = rcx
	r8 = Mem0[rsp + 0x98<64>:word64]
	rcx = Mem0[rsp + 0x90<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	xmm1 = Mem0[r9:word128]
	r9 = Mem0[rsp + 0xA0<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = r8
	r8 = rsp + 0x50<64>
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	Mem0[rsp + 0x50<64>:word128] = xmm3
	Mem0[rsp + 0x30<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x40<64>:word128] = xmm1
	branch Test(NE,Z) l00000000004371C1
	// succ:  l00000000004371B3 l00000000004371C1
l00000000004371B3:
	call fn0000000000433080 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000437150_exit
l00000000004371C1:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000437150_exit
fn0000000000437150_exit:


// fn00000000004371D0
// Return size: 8
define fn00000000004371D0
fn00000000004371D0_entry:
	rsp = fp
	// succ:  l00000000004371D0
l00000000004371D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x0000000000438090<p64>
	xmm3 = Mem0[r8:word128]
	rbx = rcx
	r8 = Mem0[rsp + 0x98<64>:word64]
	rcx = Mem0[rsp + 0x90<64>:word64]
	rax = Mem0[rax + 0x30<64>:word64]
	xmm1 = Mem0[r9:word128]
	r9 = Mem0[rsp + 0xA0<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = r8
	r8 = rsp + 0x50<64>
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	Mem0[rsp + 0x50<64>:word128] = xmm3
	Mem0[rsp + 0x30<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x40<64>:word128] = xmm1
	branch Test(NE,Z) l0000000000437241
	// succ:  l0000000000437233 l0000000000437241
l0000000000437233:
	call fn00000000004339C0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004371D0_exit
l0000000000437241:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004371D0_exit
fn00000000004371D0_exit:


// fn0000000000437250
// Return size: 8
define fn0000000000437250
fn0000000000437250_entry:
	rsp = fp
	// succ:  l0000000000437250
l0000000000437250:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x0000000000438100<p64>
	xmm3 = Mem0[r8:word128]
	rbx = rcx
	r8 = Mem0[rsp + 0x98<64>:word64]
	rcx = Mem0[rsp + 0x90<64>:word64]
	rax = Mem0[rax + 0x20<64>:word64]
	xmm1 = Mem0[r9:word128]
	r9 = Mem0[rsp + 0xA0<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = r8
	r8 = rsp + 0x50<64>
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	Mem0[rsp + 0x50<64>:word128] = xmm3
	Mem0[rsp + 0x30<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x40<64>:word128] = xmm1
	branch Test(NE,Z) l00000000004372C1
	// succ:  l00000000004372B3 l00000000004372C1
l00000000004372B3:
	call fn00000000004343C0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000437250_exit
l00000000004372C1:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000437250_exit
fn0000000000437250_exit:


// fn00000000004372D0
// Return size: 8
define fn00000000004372D0
fn00000000004372D0_entry:
	rsp = fp
	// succ:  l00000000004372D0
l00000000004372D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x0000000000438170<p64>
	xmm3 = Mem0[r8:word128]
	rbx = rcx
	r8 = Mem0[rsp + 0x98<64>:word64]
	rcx = Mem0[rsp + 0x90<64>:word64]
	rax = Mem0[rax + 0x38<64>:word64]
	xmm1 = Mem0[r9:word128]
	r9 = Mem0[rsp + 0xA0<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = r8
	r8 = rsp + 0x50<64>
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	Mem0[rsp + 0x50<64>:word128] = xmm3
	Mem0[rsp + 0x30<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x40<64>:word128] = xmm1
	branch Test(NE,Z) l0000000000437341
	// succ:  l0000000000437333 l0000000000437341
l0000000000437333:
	call fn0000000000434E00 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004372D0_exit
l0000000000437341:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004372D0_exit
fn00000000004372D0_exit:


// fn0000000000437350
// Return size: 8
define fn0000000000437350
fn0000000000437350_entry:
	rsp = fp
	// succ:  l0000000000437350
l0000000000437350:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x00000000004381E0<p64>
	xmm3 = Mem0[r8:word128]
	rbx = rcx
	r8 = Mem0[rsp + 0x98<64>:word64]
	rcx = Mem0[rsp + 0x90<64>:word64]
	rax = Mem0[rax + 0x40<64>:word64]
	xmm1 = Mem0[r9:word128]
	r9 = Mem0[rsp + 0xA0<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = r8
	r8 = rsp + 0x50<64>
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	Mem0[rsp + 0x50<64>:word128] = xmm3
	Mem0[rsp + 0x30<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x40<64>:word128] = xmm1
	branch Test(NE,Z) l00000000004373C1
	// succ:  l00000000004373B3 l00000000004373C1
l00000000004373B3:
	call fn00000000004357A0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000437350_exit
l00000000004373C1:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000437350_exit
fn0000000000437350_exit:


// fn00000000004373D0
// Return size: 8
define fn00000000004373D0
fn00000000004373D0_entry:
	rsp = fp
	// succ:  l00000000004373D0
l00000000004373D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp + 0xD0<64>:word64]
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	r11 = Mem0[r8:word64]
	rdi = rcx
	rsi = Mem0[r8 + 8<64>:word64]
	rcx = rsp + 0x60<64>
	r8 = rsp + 0x50<64>
	ebp = Mem0[rbx + 0x18<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	eax = ebp
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0xFFFFFFB5<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax | 8<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x18<64>:word32] = eax
	rax = rsp + 0x78<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x20<64>:word64] = rbx
	Mem0[rsp + 0x58<64>:word64] = rsi
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0xD8<64>:word64]
	si = si ^ si
	SZO = cond(si)
	C = false
	Mem0[rsp + 0x50<64>:word64] = r11
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn00000000004357A0 (retsize: 8;)
	rax = Mem0[rsp + 0x60<64>:word64]
	rcx = Mem0[rsp + 0x78<64>:word64]
	rdx = rax
	eax = CONVERT(Mem0[rsp + 0x68<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 0x18<64>:word32] = ebp
	Mem0[rdi:word64] = rdx
	rsi = rsi | rax
	SZO = cond(rsi)
	C = false
	rax = Mem0[rsp + 0xE0<64>:word64]
	Mem0[rdi + 8<64>:word64] = rsi
	Mem0[rax:word64] = rcx
	rax = rdi
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004373D0_exit
fn00000000004373D0_exit:


// fn0000000000437490
// Return size: 8
define fn0000000000437490
fn0000000000437490_entry:
	rsp = fp
	// succ:  l0000000000437490
l0000000000437490:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xB8<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0x120<64>:word64]
	r10 = Mem0[r9 + 8<64>:word64]
	rsi = Mem0[r8:word64]
	rdi = Mem0[r8 + 8<64>:word64]
	r12 = rcx
	r9 = Mem0[r9:word64]
	r13 = Mem0[rsp + 0x128<64>:word64]
	SZO = cond(Mem0[rax + 0x18<64>:byte] & 1<8>)
	C = false
	Mem0[rsp + 0x88<64>:word64] = r10
	Mem0[rsp + 0x90<64>:word64] = rsi
	Mem0[rsp + 0x98<64>:word64] = rdi
	Mem0[rsp + 0x80<64>:word64] = r9
	branch Test(NE,Z) l00000000004375A0
	// succ:  l00000000004374EE l00000000004375A0
l00000000004374EE:
	r8 = rsp + 0xAC<64>
	Mem0[rsp + 0x50<64>:word64] = r9
	rcx = rsp + 0x70<64>
	r9 = rsp + 0x50<64>
	Mem0[rsp + 0x20<64>:word64] = rax
	Mem0[rsp + 0x28<64>:word64] = r13
	Mem0[rsp + 0x30<64>:word64] = r8
	r8 = rsp + 0x60<64>
	Mem0[rsp + 0xAC<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rsp + 0x60<64>:word64] = rsi
	Mem0[rsp + 0x68<64>:word64] = rdi
	Mem0[rsp + 0x58<64>:word64] = r10
	call fn0000000000433080 (retsize: 8;)
	rax = Mem0[rsp + 0x70<64>:word64]
	Mem0[rsp + 0x90<64>:word64] = rax
	eax = CONVERT(Mem0[rsp + 0x78<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x98<64>:word16] = ax
	eax = Mem0[rsp + 0xAC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(ULE,CZ) l0000000000437891
	// succ:  l0000000000437562 l0000000000437891
l0000000000437562:
	rax = Mem0[rsp + 0x130<64>:word64]
	rdx = rsp + 0x80<64>
	rcx = rsp + 0x90<64>
	Mem0[rax:byte] = 1<8>
	Mem0[r13 + 0<64>:word32] = 4<32>
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000043789E
	// succ:  l0000000000437592 l000000000043789E
l0000000000437592:
	v25 = Mem0[r13 + 0<64>:word32] | 2<32>
	Mem0[r13 + 0<64>:word32] = v25
	SZO = cond(Mem0[r13 + 0<64>:word32])
	C = false
	goto l000000000043789E
	// succ:  l000000000043789E
l00000000004375A0:
	rdx = rax + 0xD0<64>
	rcx = rsp + 0xAC<64>
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	call fn000000000042A460 (retsize: 8;)
	SCZO = cond(Mem0[rax + 0x40<64>:word64] - 0<64>)
	r14 = rax
	sil = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(Mem0[rax + 0x30<64>:word64] - 0<64>)
	bl = CONVERT(Test(EQ,Z), bool, int8)
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	// succ:  l00000000004375D5
l00000000004375D5:
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(sil - al)
	branch Test(UGT,CZ) l0000000000437701
	// succ:  l00000000004375E3 l0000000000437701
l00000000004375E3:
	rcx = Mem0[rsp + 0x90<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043775C
	// succ:  l00000000004375F4 l000000000043775C
l00000000004375F4:
	SCZO = cond(Mem0[rsp + 0x98<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000437800
	// succ:  l0000000000437603 l0000000000437800
l0000000000437603:
	rcx = Mem0[rsp + 0x80<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = CONVERT(Mem0[rsp + 0x98<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000437657
	// succ:  l000000000043761A l0000000000437657
l000000000043761A:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x88<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043777F
	// succ:  l000000000043762B l000000000043777F
l000000000043762B:
	SCZO = cond(dl - al)
	branch Test(EQ,Z) l00000000004377B0
	// succ:  l0000000000437633 l00000000004377B0
l0000000000437633:
	rcx = Mem0[rsp + 0x90<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000437657
	// succ:  l0000000000437645 l0000000000437657
l0000000000437645:
	eax = CONVERT(Mem0[rsp + 0x98<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000437840
	// succ:  l0000000000437657 l0000000000437840
l0000000000437657:
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000437668
	// succ:  l000000000043765C l0000000000437668
l000000000043765C:
	rdx = Mem0[r14 + 0x38<64>:word64]
	SCZO = cond(Mem0[rdx + rdi * 2<64>:word16] - ax)
	bpl = CONVERT(Test(EQ,Z), bool, int8)
	// succ:  l0000000000437668
l0000000000437668:
	SCZO = cond(bpl - bl)
	branch Test(ULT,C) l0000000000437701
	// succ:  l0000000000437671 l0000000000437701
l0000000000437671:
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l0000000000437681
	// succ:  l0000000000437675 l0000000000437681
l0000000000437675:
	rdx = Mem0[r14 + 0x28<64>:word64]
	SCZO = cond(Mem0[rdx + rdi * 2<64>:word16] - ax)
	r15b = CONVERT(Test(EQ,Z), bool, int8)
	// succ:  l0000000000437681
l0000000000437681:
	SCZO = cond(r15b - sil)
	branch Test(ULT,C) l0000000000437900
	// succ:  l000000000043768A l0000000000437900
l000000000043768A:
	eax = ebp
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r15b - al)
	branch Test(ULT,C) l0000000000437900
	// succ:  l0000000000437698 l0000000000437900
l0000000000437698:
	rdx = Mem0[rsp + 0x90<64>:word64]
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l00000000004376CC
	// succ:  l00000000004376A9 l00000000004376CC
l00000000004376A9:
	rcx = Mem0[rdx + 0x10<64>:word64]
	SCZO = cond(rcx - Mem0[rdx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004378F0
	// succ:  l00000000004376B7 l00000000004378F0
l00000000004376B7:
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	Mem0[rdx + 0x10<64>:word64] = rcx
	// succ:  l00000000004376BF
l00000000004376BF:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x98<64>:word16] = ax
	// succ:  l00000000004376CC
l00000000004376CC:
	SZO = cond(bpl & bpl)
	C = false
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	branch Test(EQ,Z) l00000000004376DE
	// succ:  l00000000004376D6 l00000000004376DE
l00000000004376D6:
	SCZO = cond(rdi - Mem0[r14 + 0x40<64>:word64])
	sil = CONVERT(Test(UGE,C), bool, int8)
	// succ:  l00000000004376DE
l00000000004376DE:
	SZO = cond(r15b & r15b)
	C = false
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(EQ,Z) l00000000004375D5
	// succ:  l00000000004376EC l00000000004375D5
l00000000004376EC:
	SCZO = cond(rdi - Mem0[r14 + 0x30<64>:word64])
	bl = CONVERT(Test(UGE,C), bool, int8)
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(sil - al)
	branch Test(ULE,CZ) l00000000004375E3
	// succ:  l0000000000437701 l00000000004375E3
l0000000000437701:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(bpl & bpl)
	C = false
	branch Test(NE,Z) l00000000004377BE
	// succ:  l000000000043770C l00000000004377BE
l000000000043770C:
	// succ:  l0000000000437710
l0000000000437710:
	SZO = cond(r15b & r15b)
	C = false
	branch Test(EQ,Z) l00000000004378D0
	// succ:  l0000000000437719 l00000000004378D0
l0000000000437719:
	SCZO = cond(Mem0[r14 + 0x30<64>:word64] - rdi)
	branch Test(NE,Z) l00000000004378D0
	// succ:  l0000000000437723 l00000000004378D0
l0000000000437723:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l00000000004378D0
	// succ:  l000000000043772C l00000000004378D0
l000000000043772C:
	rdi = Mem0[rsp + 0x130<64>:word64]
	eax = eax << 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax >> 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & 2<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rdi:byte] = 1<8>
	Mem0[r13 + 0<64>:word32] = eax
	goto l000000000043789E
	// succ:  l000000000043789E
l0000000000437750:
	Mem0[rsp + 0x90<64>:word64] = 0<64>
	// succ:  l000000000043775C
l000000000043775C:
	rcx = Mem0[rsp + 0x80<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004377B0
	// succ:  l0000000000437769 l00000000004377B0
l0000000000437769:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x88<64>:word16] - 0xFFFF<16>)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l000000000043762B
	// succ:  l000000000043777F l000000000043762B
l000000000043777F:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000437940
	// succ:  l000000000043778D l0000000000437940
l000000000043778D:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000437790
l0000000000437790:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000437864
	// succ:  l000000000043779A l0000000000437864
l000000000043779A:
	Mem0[rsp + 0x88<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(dl - al)
	branch Test(NE,Z) l0000000000437633
	// succ:  l00000000004377AC l0000000000437633
l00000000004377AC:
	// succ:  l00000000004377B0
l00000000004377B0:
	SZO = cond(bpl & bpl)
	C = false
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l0000000000437710
	// succ:  l00000000004377BE l0000000000437710
l00000000004377BE:
	SCZO = cond(rdi - Mem0[r14 + 0x40<64>:word64])
	branch Test(NE,Z) l0000000000437710
	// succ:  l00000000004377C8 l0000000000437710
l00000000004377C8:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000437710
	// succ:  l00000000004377D1 l0000000000437710
l00000000004377D1:
	rbx = Mem0[rsp + 0x130<64>:word64]
	SZO = cond(r15b & r15b)
	C = false
	Mem0[rbx:byte] = 0<8>
	branch Test(EQ,Z) l00000000004377EB
	// succ:  l00000000004377E1 l00000000004377EB
l00000000004377E1:
	SCZO = cond(rdi - Mem0[r14 + 0x30<64>:word64])
	branch Test(EQ,Z) l000000000043791B
	// succ:  l00000000004377EB l000000000043791B
l00000000004377EB:
	eax = eax << 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax >> 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & 2<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000043796C
	// succ:  l000000000043796C
l0000000000437800:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000437930
	// succ:  l000000000043780E l0000000000437930
l000000000043780E:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000437811
l0000000000437811:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000437750
	// succ:  l000000000043781B l0000000000437750
l000000000043781B:
	rcx = Mem0[rsp + 0x80<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x98<64>:word16] = ax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000043761A
	// succ:  l0000000000437836 l000000000043761A
l0000000000437836:
	goto l0000000000437633
	// succ:  l0000000000437633
l0000000000437840:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000437954
	// succ:  l000000000043784E l0000000000437954
l000000000043784E:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000437851
l0000000000437851:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000437880
	// succ:  l0000000000437857 l0000000000437880
l0000000000437857:
	Mem0[rsp + 0x98<64>:word16] = ax
	goto l0000000000437657
	// succ:  l0000000000437657
l0000000000437864:
	Mem0[rsp + 0x80<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043762B
	// succ:  l000000000043762B
l0000000000437880:
	Mem0[rsp + 0x90<64>:word64] = 0<64>
	goto l0000000000437657
	// succ:  l0000000000437657
l0000000000437891:
	rdi = Mem0[rsp + 0x130<64>:word64]
	Mem0[rdi:byte] = al
	v37 = Mem0[rdi:byte] & 1<8>
	Mem0[rdi:byte] = v37
	SZO = cond(Mem0[rdi:byte])
	C = false
	// succ:  l000000000043789E
l000000000043789E:
	rax = Mem0[rsp + 0x90<64>:word64]
	rdx = Mem0[rsp + 0x98<64>:word64]
	Mem0[r12:word64] = rax
	rax = r12
	Mem0[r12 + 8<64>:word64] = rdx
	rsp = rsp + 0xB8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000437490_exit
l00000000004378D0:
	rdi = Mem0[rsp + 0x130<64>:word64]
	SZO = cond(al & al)
	C = false
	Mem0[rdi:byte] = 0<8>
	branch Test(EQ,Z) l000000000043791B
	// succ:  l00000000004378DF l000000000043791B
l00000000004378DF:
	Mem0[r13 + 0<64>:word32] = 6<32>
	goto l000000000043789E
	// succ:  l000000000043789E
l00000000004378F0:
	rax = Mem0[rdx:word64]
	rcx = rdx
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l00000000004376BF
	// succ:  l00000000004376BF
l0000000000437900:
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l0000000000437910
	// succ:  l0000000000437905 l0000000000437910
l0000000000437905:
	SCZO = cond(Mem0[r14 + 0x40<64>:word64] - rdi)
	branch Test(NE,Z) l0000000000437910
	// succ:  l000000000043790B l0000000000437910
l000000000043790B:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(NE,Z) l000000000043795F
	// succ:  l0000000000437910 l000000000043795F
l0000000000437910:
	rax = Mem0[rsp + 0x130<64>:word64]
	Mem0[rax:byte] = 0<8>
	// succ:  l000000000043791B
l000000000043791B:
	Mem0[r13 + 0<64>:word32] = 4<32>
	goto l000000000043789E
	// succ:  l000000000043789E
l0000000000437930:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000437811
	// succ:  l0000000000437811
l0000000000437940:
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x4F<64>:byte] = dl
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	edx = CONVERT(Mem0[rsp + 0x4F<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000437790
	// succ:  l0000000000437790
l0000000000437954:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000437851
	// succ:  l0000000000437851
l000000000043795F:
	rax = Mem0[rsp + 0x130<64>:word64]
	Mem0[rax:byte] = 0<8>
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000043796C
l000000000043796C:
	Mem0[r13 + 0<64>:word32] = eax
	goto l000000000043789E
	// succ:  l000000000043789E
fn0000000000437490_exit:


// fn0000000000437980
// Return size: 8
define fn0000000000437980
fn0000000000437980_entry:
	rsp = fp
	// succ:  l0000000000437980
l0000000000437980:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x98<64>
	SCZO = cond(rsp)
	rdi = Mem0[r8:word64]
	rbx = Mem0[r8 + 8<64>:word64]
	r14 = rsp + 0x88<64>
	rsi = rsp + 0x80<64>
	rbp = rcx
	r15 = rdx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = r14
	r12 = Mem0[r9:word64]
	r13 = Mem0[r9 + 8<64>:word64]
	call fn00000000004505D0 (retsize: 8;)
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	Mem0[rsp + 0x80<64>:word64] = rax
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rsp + 0x108<64>:word64]
	rcx = rsp + 0x70<64>
	r9 = rsp + 0x50<64>
	r8 = rsp + 0x60<64>
	Mem0[rsp + 0x30<64>:word64] = rsi
	rdx = r15
	Mem0[rsp + 0x60<64>:word64] = rdi
	Mem0[rsp + 0x68<64>:word64] = rbx
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0x100<64>:word64]
	Mem0[rsp + 0x50<64>:word64] = r12
	Mem0[rsp + 0x58<64>:word64] = r13
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000436210 (retsize: 8;)
	rsi = Mem0[rsp + 0x78<64>:word64]
	rdi = Mem0[rsp + 0x70<64>:word64]
	bx = si
	r15 = rdi
	Mem0[rsp + 0x4E<64>:word16] = si
	call fn000000000046AC50 (retsize: 8;)
	r8 = Mem0[rsp + 0x108<64>:word64]
	rdx = Mem0[rsp + 0x110<64>:word64]
	r9 = r14
	rcx = Mem0[rsp + 0x80<64>:word64]
	Mem0[rsp + 0x88<64>:word64] = rax
	call fn000000000046FAC0 (retsize: 8;)
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000437B20
	// succ:  l0000000000437A6D l0000000000437B20
l0000000000437A6D:
	SCZO = cond(si - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000437AF1
	// succ:  l0000000000437A73 l0000000000437AF1
l0000000000437A73:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l0000000000437A9B
	// succ:  l0000000000437A7A l0000000000437A9B
l0000000000437A7A:
	SCZO = cond(r13w - 0xFFFF<16>)
	eax = r13d
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l0000000000437AE0
	// succ:  l0000000000437A84 l0000000000437AE0
l0000000000437A84:
	SCZO = cond(ax - 0xFFFF<16>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(sil - al)
	branch Test(NE,Z) l0000000000437A9B
	// succ:  l0000000000437A90 l0000000000437A9B
l0000000000437A90:
	rax = Mem0[rsp + 0x108<64>:word64]
	v31 = Mem0[rax:word32] | 2<32>
	Mem0[rax:word32] = v31
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l0000000000437A9B
l0000000000437A9B:
	bx = Mem0[rsp + 0x4E<64>:word16]
	rcx = Mem0[rsp + 0x80<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0<64>:word64] = r15
	Mem0[rbp + 8<64>:word64] = rbx
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000437B41
	// succ:  l0000000000437AC2 l0000000000437B41
l0000000000437AC2:
	rax = rbp
	rsp = rsp + 0x98<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000437980_exit
l0000000000437AE0:
	rax = Mem0[r12 + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[r12 + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000437B60
	// succ:  l0000000000437AEC l0000000000437B60
l0000000000437AEC:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000437A84
	// succ:  l0000000000437A84
l0000000000437AF1:
	rax = Mem0[rdi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rdi + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000437B52
	// succ:  l0000000000437AFB l0000000000437B52
l0000000000437AFB:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000437AFE
l0000000000437AFE:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000437B20
	// succ:  l0000000000437B04 l0000000000437B20
l0000000000437B04:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(r12 & r12)
	C = false
	Mem0[rsp + 0x4E<64>:word16] = ax
	branch Test(NE,Z) l0000000000437A7A
	// succ:  l0000000000437B14 l0000000000437A7A
l0000000000437B14:
	goto l0000000000437A9B
	// succ:  l0000000000437A9B
l0000000000437B20:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(r12 & r12)
	C = false
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	branch Test(EQ,Z) l0000000000437A90
	// succ:  l0000000000437B31 l0000000000437A90
l0000000000437B31:
	SCZO = cond(r13w - 0xFFFF<16>)
	eax = r13d
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l0000000000437A84
	// succ:  l0000000000437B3F l0000000000437A84
l0000000000437B3F:
	goto l0000000000437AE0
	// succ:  l0000000000437AE0
l0000000000437B41:
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	rdx = r14
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000437AC2
	// succ:  l0000000000437AC2
l0000000000437B52:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000437AFE
	// succ:  l0000000000437AFE
l0000000000437B60:
	rax = Mem0[r12:word64]
	rcx = r12
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000437A84
	// succ:  l0000000000437A84
fn0000000000437980_exit:


// fn0000000000437B90
// Return size: 8
define fn0000000000437B90
fn0000000000437B90_entry:
	rsp = fp
	// succ:  l0000000000437B90
l0000000000437B90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x98<64>
	SCZO = cond(rsp)
	rdi = Mem0[r8:word64]
	rbx = Mem0[r8 + 8<64>:word64]
	r14 = rsp + 0x88<64>
	rsi = rsp + 0x80<64>
	rbp = rcx
	r15 = rdx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = r14
	r12 = Mem0[r9:word64]
	r13 = Mem0[r9 + 8<64>:word64]
	call fn00000000004505D0 (retsize: 8;)
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	Mem0[rsp + 0x80<64>:word64] = rax
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rsp + 0x108<64>:word64]
	rcx = rsp + 0x70<64>
	r9 = rsp + 0x50<64>
	r8 = rsp + 0x60<64>
	Mem0[rsp + 0x30<64>:word64] = rsi
	rdx = r15
	Mem0[rsp + 0x60<64>:word64] = rdi
	Mem0[rsp + 0x68<64>:word64] = rbx
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0x100<64>:word64]
	Mem0[rsp + 0x50<64>:word64] = r12
	Mem0[rsp + 0x58<64>:word64] = r13
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000436210 (retsize: 8;)
	rsi = Mem0[rsp + 0x78<64>:word64]
	rdi = Mem0[rsp + 0x70<64>:word64]
	bx = si
	r15 = rdi
	Mem0[rsp + 0x4E<64>:word16] = si
	call fn000000000046AC50 (retsize: 8;)
	r8 = Mem0[rsp + 0x108<64>:word64]
	rdx = Mem0[rsp + 0x110<64>:word64]
	r9 = r14
	rcx = Mem0[rsp + 0x80<64>:word64]
	Mem0[rsp + 0x88<64>:word64] = rax
	call fn000000000046FBE0 (retsize: 8;)
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000437D30
	// succ:  l0000000000437C7D l0000000000437D30
l0000000000437C7D:
	SCZO = cond(si - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000437D01
	// succ:  l0000000000437C83 l0000000000437D01
l0000000000437C83:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l0000000000437CAB
	// succ:  l0000000000437C8A l0000000000437CAB
l0000000000437C8A:
	SCZO = cond(r13w - 0xFFFF<16>)
	eax = r13d
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l0000000000437CF0
	// succ:  l0000000000437C94 l0000000000437CF0
l0000000000437C94:
	SCZO = cond(ax - 0xFFFF<16>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(sil - al)
	branch Test(NE,Z) l0000000000437CAB
	// succ:  l0000000000437CA0 l0000000000437CAB
l0000000000437CA0:
	rax = Mem0[rsp + 0x108<64>:word64]
	v31 = Mem0[rax:word32] | 2<32>
	Mem0[rax:word32] = v31
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l0000000000437CAB
l0000000000437CAB:
	bx = Mem0[rsp + 0x4E<64>:word16]
	rcx = Mem0[rsp + 0x80<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0<64>:word64] = r15
	Mem0[rbp + 8<64>:word64] = rbx
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000437D51
	// succ:  l0000000000437CD2 l0000000000437D51
l0000000000437CD2:
	rax = rbp
	rsp = rsp + 0x98<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000437B90_exit
l0000000000437CF0:
	rax = Mem0[r12 + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[r12 + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000437D70
	// succ:  l0000000000437CFC l0000000000437D70
l0000000000437CFC:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000437C94
	// succ:  l0000000000437C94
l0000000000437D01:
	rax = Mem0[rdi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rdi + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000437D62
	// succ:  l0000000000437D0B l0000000000437D62
l0000000000437D0B:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000437D0E
l0000000000437D0E:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000437D30
	// succ:  l0000000000437D14 l0000000000437D30
l0000000000437D14:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(r12 & r12)
	C = false
	Mem0[rsp + 0x4E<64>:word16] = ax
	branch Test(NE,Z) l0000000000437C8A
	// succ:  l0000000000437D24 l0000000000437C8A
l0000000000437D24:
	goto l0000000000437CAB
	// succ:  l0000000000437CAB
l0000000000437D30:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(r12 & r12)
	C = false
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	branch Test(EQ,Z) l0000000000437CA0
	// succ:  l0000000000437D41 l0000000000437CA0
l0000000000437D41:
	SCZO = cond(r13w - 0xFFFF<16>)
	eax = r13d
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l0000000000437C94
	// succ:  l0000000000437D4F l0000000000437C94
l0000000000437D4F:
	goto l0000000000437CF0
	// succ:  l0000000000437CF0
l0000000000437D51:
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	rdx = r14
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000437CD2
	// succ:  l0000000000437CD2
l0000000000437D62:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000437D0E
	// succ:  l0000000000437D0E
l0000000000437D70:
	rax = Mem0[r12:word64]
	rcx = r12
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000437C94
	// succ:  l0000000000437C94
fn0000000000437B90_exit:


// fn0000000000437DA0
// Return size: 8
define fn0000000000437DA0
fn0000000000437DA0_entry:
	rsp = fp
	// succ:  l0000000000437DA0
l0000000000437DA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x98<64>
	SCZO = cond(rsp)
	rdi = Mem0[r8:word64]
	rbx = Mem0[r8 + 8<64>:word64]
	r14 = rsp + 0x88<64>
	rsi = rsp + 0x80<64>
	rbp = rcx
	r15 = rdx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = r14
	r12 = Mem0[r9:word64]
	r13 = Mem0[r9 + 8<64>:word64]
	call fn00000000004505D0 (retsize: 8;)
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	Mem0[rsp + 0x80<64>:word64] = rax
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rsp + 0x108<64>:word64]
	rcx = rsp + 0x70<64>
	r9 = rsp + 0x50<64>
	r8 = rsp + 0x60<64>
	Mem0[rsp + 0x30<64>:word64] = rsi
	rdx = r15
	Mem0[rsp + 0x60<64>:word64] = rdi
	Mem0[rsp + 0x68<64>:word64] = rbx
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0x100<64>:word64]
	Mem0[rsp + 0x50<64>:word64] = r12
	Mem0[rsp + 0x58<64>:word64] = r13
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000436210 (retsize: 8;)
	rsi = Mem0[rsp + 0x78<64>:word64]
	rdi = Mem0[rsp + 0x70<64>:word64]
	bx = si
	r15 = rdi
	Mem0[rsp + 0x4E<64>:word16] = si
	call fn000000000046AC50 (retsize: 8;)
	r8 = Mem0[rsp + 0x108<64>:word64]
	rdx = Mem0[rsp + 0x110<64>:word64]
	r9 = r14
	rcx = Mem0[rsp + 0x80<64>:word64]
	Mem0[rsp + 0x88<64>:word64] = rax
	call fn000000000046FD00 (retsize: 8;)
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000437F40
	// succ:  l0000000000437E8D l0000000000437F40
l0000000000437E8D:
	SCZO = cond(si - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000437F11
	// succ:  l0000000000437E93 l0000000000437F11
l0000000000437E93:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l0000000000437EBB
	// succ:  l0000000000437E9A l0000000000437EBB
l0000000000437E9A:
	SCZO = cond(r13w - 0xFFFF<16>)
	eax = r13d
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l0000000000437F00
	// succ:  l0000000000437EA4 l0000000000437F00
l0000000000437EA4:
	SCZO = cond(ax - 0xFFFF<16>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(sil - al)
	branch Test(NE,Z) l0000000000437EBB
	// succ:  l0000000000437EB0 l0000000000437EBB
l0000000000437EB0:
	rax = Mem0[rsp + 0x108<64>:word64]
	v31 = Mem0[rax:word32] | 2<32>
	Mem0[rax:word32] = v31
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l0000000000437EBB
l0000000000437EBB:
	bx = Mem0[rsp + 0x4E<64>:word16]
	rcx = Mem0[rsp + 0x80<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0<64>:word64] = r15
	Mem0[rbp + 8<64>:word64] = rbx
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000437F61
	// succ:  l0000000000437EE2 l0000000000437F61
l0000000000437EE2:
	rax = rbp
	rsp = rsp + 0x98<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000437DA0_exit
l0000000000437F00:
	rax = Mem0[r12 + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[r12 + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000437F80
	// succ:  l0000000000437F0C l0000000000437F80
l0000000000437F0C:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000437EA4
	// succ:  l0000000000437EA4
l0000000000437F11:
	rax = Mem0[rdi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rdi + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000437F72
	// succ:  l0000000000437F1B l0000000000437F72
l0000000000437F1B:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000437F1E
l0000000000437F1E:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000437F40
	// succ:  l0000000000437F24 l0000000000437F40
l0000000000437F24:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(r12 & r12)
	C = false
	Mem0[rsp + 0x4E<64>:word16] = ax
	branch Test(NE,Z) l0000000000437E9A
	// succ:  l0000000000437F34 l0000000000437E9A
l0000000000437F34:
	goto l0000000000437EBB
	// succ:  l0000000000437EBB
l0000000000437F40:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(r12 & r12)
	C = false
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	branch Test(EQ,Z) l0000000000437EB0
	// succ:  l0000000000437F51 l0000000000437EB0
l0000000000437F51:
	SCZO = cond(r13w - 0xFFFF<16>)
	eax = r13d
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l0000000000437EA4
	// succ:  l0000000000437F5F l0000000000437EA4
l0000000000437F5F:
	goto l0000000000437F00
	// succ:  l0000000000437F00
l0000000000437F61:
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	rdx = r14
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000437EE2
	// succ:  l0000000000437EE2
l0000000000437F72:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000437F1E
	// succ:  l0000000000437F1E
l0000000000437F80:
	rax = Mem0[r12:word64]
	rcx = r12
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000437EA4
	// succ:  l0000000000437EA4
fn0000000000437DA0_exit:


// fn0000000000437FB0
// Return size: 8
define fn0000000000437FB0
fn0000000000437FB0_entry:
	rsp = fp
	// succ:  l0000000000437FB0
l0000000000437FB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0xA0<64>:word64]
	r10 = Mem0[r9 + 8<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	rbx = rcx
	r9 = Mem0[r9:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000432750 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000437FB0_exit
fn0000000000437FB0_exit:


// fn0000000000438020
// Return size: 8
define fn0000000000438020
fn0000000000438020_entry:
	rsp = fp
	// succ:  l0000000000438020
l0000000000438020:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0xA0<64>:word64]
	r10 = Mem0[r9 + 8<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	rbx = rcx
	r9 = Mem0[r9:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000433080 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000438020_exit
fn0000000000438020_exit:


// fn0000000000438090
// Return size: 8
define fn0000000000438090
fn0000000000438090_entry:
	rsp = fp
	// succ:  l0000000000438090
l0000000000438090:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0xA0<64>:word64]
	r10 = Mem0[r9 + 8<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	rbx = rcx
	r9 = Mem0[r9:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn00000000004339C0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000438090_exit
fn0000000000438090_exit:


// fn0000000000438100
// Return size: 8
define fn0000000000438100
fn0000000000438100_entry:
	rsp = fp
	// succ:  l0000000000438100
l0000000000438100:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0xA0<64>:word64]
	r10 = Mem0[r9 + 8<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	rbx = rcx
	r9 = Mem0[r9:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn00000000004343C0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000438100_exit
fn0000000000438100_exit:


// fn0000000000438170
// Return size: 8
define fn0000000000438170
fn0000000000438170_entry:
	rsp = fp
	// succ:  l0000000000438170
l0000000000438170:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0xA0<64>:word64]
	r10 = Mem0[r9 + 8<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	rbx = rcx
	r9 = Mem0[r9:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000434E00 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000438170_exit
fn0000000000438170_exit:


// fn00000000004381E0
// Return size: 8
define fn00000000004381E0
fn00000000004381E0_entry:
	rsp = fp
	// succ:  l00000000004381E0
l00000000004381E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0xA0<64>:word64]
	r10 = Mem0[r9 + 8<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	rbx = rcx
	r9 = Mem0[r9:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn00000000004357A0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004381E0_exit
fn00000000004381E0_exit:


// fn0000000000438250
// Return size: 8
define fn0000000000438250
fn0000000000438250_entry:
	rsp = fp
	// succ:  l0000000000438250
l0000000000438250:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp + 0x88<64>:word64]
	rcx = Mem0[rsp + 0x80<64>:word64]
	rsi = Mem0[rsp + 0x78<64>:word64]
	r10 = rdx
	edx = CONVERT(r9b, byte, int32)
	r9 = r8
	r8 = r10
	rax = CONVERT(Mem0[rbx:word32], word32, int64)
	Mem0[rsp + 0x20<64>:word64] = rcx
	rax = rax + rcx
	SCZO = cond(rax)
	rcx = rsi
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn000000000046F7F0 (retsize: 8;)
	rax = rax - rsi
	SCZO = cond(rax)
	Mem0[rbx:word32] = eax
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000438250_exit
fn0000000000438250_exit:


// fn00000000004382A0
// Return size: 8
define fn00000000004382A0
fn00000000004382A0_entry:
	rsp = fp
	// succ:  l00000000004382A0
l00000000004382A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	eax = Mem0[rbp + 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdi = Mem0[r8:word64]
	rsi = rcx
	rcx = 0x000000000048B580<p64>
	rbx = r9
	r12 = Mem0[r8 + 8<64>:word64]
	Mem0[rbp - 0x3C<64>:word32] = eax
	call fn000000000042BB80 (retsize: 8;)
	r14 = rax
	rax = Mem0[rbx + 0xD0<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	r13 = rax + r14 * 8<64>
	r15 = Mem0[r13 + 0<64>:word64]
	SZO = cond(r15 & r15)
	C = false
	branch Test(EQ,Z) l00000000004384F4
	// succ:  l00000000004382F6 l00000000004384F4
l00000000004382F6:
	r14d = Mem0[rbx + 0x18<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	rax = r15 + 0x4A<64>
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	ecx = Mem0[rbp + 0x48<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	edx = Mem0[rbp + 0x48<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r10 = rsp + 0x30<64>
	r8 = rax
	Mem0[rbp - 0x48<64>:word64] = rax
	eax = r14d
	rax = CONVERT(eax, word32, uint64)
	r9d = r14d
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rbp - 0x38<64>:word64] = r10
	eax = eax & 0x4A<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 8<32>)
	Mem0[rbp - 0x40<64>:word32] = eax
	r13b = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(eax - 0x40<32>)
	al = CONVERT(Test(NE,Z), bool, int8)
	r13d = r13d & eax
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	SZO = cond(ecx & ecx)
	C = false
	rcx = rsp + 0x44<64>
	al = CONVERT(Test(GT,SZO), bool, int8)
	edx = -edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	C = edx == 0<32>
	SCZO = cond(r13b - al)
	branch Test(UGT,CZ) l0000000000438347
	// succ:  l0000000000438343_1 l0000000000438347
l0000000000438343_1:
	edx = Mem0[rbp + 0x48<64>:word32]
	// succ:  l0000000000438347
l0000000000438347:
	eax = CONVERT(r13b, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn000000000046F460 (retsize: 8;)
	r9d = 0x14<32>
	r9 = CONVERT(r9d, word32, uint64)
	rcx = CONVERT(eax, word32, int64)
	r10 = Mem0[rbp - 0x38<64>:word64]
	r9d = r9d - ecx
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	r9 = CONVERT(r9d, word32, int64)
	r9 = r9 + r10
	SCZO = cond(r9)
	SCZO = cond(Mem0[r15 + 0x20<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000438434
	// succ:  l0000000000438375 l0000000000438434
l0000000000438375:
	SZO = cond(r13b & r13b)
	C = false
	branch Test(EQ,Z) l000000000043848D
	// succ:  l000000000043837E l000000000043848D
l000000000043837E:
	edx = Mem0[rbp + 0x48<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l00000000004384E0
	// succ:  l0000000000438389 l00000000004384E0
l0000000000438389:
	r14d = r14d & 0x800<32>
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	branch Test(NE,Z) l0000000000438420
	// succ:  l0000000000438396 l0000000000438420
l0000000000438396:
	r14 = Mem0[rbx + 0x10<64>:word64]
	r13 = CONVERT(ecx, word32, int64)
	SCZO = cond(r14 - r13)
	branch Test(LE,SZO) l00000000004383D6
	// succ:  l00000000004383A2 l00000000004383D6
l00000000004383A2:
	rax = r14 + 0x1E<64>
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	edx = CONVERT(Mem0[rbp - 0x3C<64>:byte], byte, int32)
	rsp = rsp - rax
	SCZO = cond(rsp)
	rcx = rbx
	r15 = rsp + 0x30<64>
	Mem0[rsp + 0x28<64>:word64] = r13
	Mem0[rsp + 0x20<64>:word64] = r14
	r13 = CONVERT(r14d, word32, int64)
	r8 = r15
	call fn00000000004688D0 (retsize: 8;)
	r9 = r15
	// succ:  l00000000004383D6
l00000000004383D6:
	SZO = cond(r12b & r12b)
	C = false
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	ebx = r12d
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l0000000000438400
	// succ:  l00000000004383E6 l0000000000438400
l00000000004383E6:
	rax = Mem0[rdi:word64]
	r8 = r13
	rdx = r9
	rcx = rdi
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rax - r13)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l0000000000438400
	// succ:  l00000000004383FD_1 l0000000000438400
l00000000004383FD_1:
	ebx = eax
	// succ:  l0000000000438400
l0000000000438400:
	rax = rsi
	Mem0[rsi:word64] = rdi
	Mem0[rsi + 8<64>:byte] = bl
	rsp = rbp - 0x28<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004382A0_exit
l0000000000438420:
	eax = CONVERT(Mem0[r15 + 0x4B<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 1<64>
	SCZO = cond(r9)
	Mem0[r9:byte] = al
	goto l0000000000438396
	// succ:  l0000000000438396
l0000000000438434:
	eax = SLICE(rcx + 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rax = rax + 0x1E<64> + rax
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	r10 = Mem0[r15 + 0x18<64>:word64]
	edx = CONVERT(Mem0[r15 + 0x49<64>:byte], byte, int32)
	rsp = rsp - rax
	SCZO = cond(rsp)
	r8 = Mem0[r15 + 0x10<64>:word64]
	rcx = rcx + r9
	SCZO = cond(rcx)
	r11 = rsp + 0x32<64>
	Mem0[rsp + 0x28<64>:word64] = rcx
	Mem0[rsp + 0x20<64>:word64] = r9
	r9 = r10
	rcx = r11
	Mem0[rbp - 0x38<64>:word64] = r11
	call fn000000000046F7F0 (retsize: 8;)
	r11 = Mem0[rbp - 0x38<64>:word64]
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx - r11d
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	SZO = cond(r13b & r13b)
	C = false
	r9 = r11
	branch Test(NE,Z) l000000000043837E
	// succ:  l000000000043848D l000000000043837E
l000000000043848D:
	SZO = cond(r14d & 0x200<32>)
	C = false
	branch Test(EQ,Z) l0000000000438396
	// succ:  l000000000043849A l0000000000438396
l000000000043849A:
	eax = Mem0[rbp + 0x48<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000438396
	// succ:  l00000000004384A5 l0000000000438396
l00000000004384A5:
	SCZO = cond(Mem0[rbp - 0x40<64>:word32] - 0x40<32>)
	branch Test(EQ,Z) l0000000000438583
	// succ:  l00000000004384AF l0000000000438583
l00000000004384AF:
	rdx = Mem0[rbp - 0x48<64>:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	r14d = r14d & 0x4000<32>
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	ecx = ecx + 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 2<64>
	SCZO = cond(r9)
	eax = CONVERT(Mem0[rdx + 2<64> + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9 + 1<64>:byte] = al
	eax = CONVERT(Mem0[r15 + 0x4E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9:byte] = al
	goto l0000000000438396
	// succ:  l0000000000438396
l00000000004384E0:
	eax = CONVERT(Mem0[r15 + 0x4A<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 1<64>
	SCZO = cond(r9)
	Mem0[r9:byte] = al
	goto l0000000000438396
	// succ:  l0000000000438396
l00000000004384F4:
	ecx = 0x90<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	r15 = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = 0x0000000000497350<p64>
	rdx = rbx + 0xD0<64>
	Mem0[r15 + 0x10<64>:word64] = 0<64>
	Mem0[r15 + 0x18<64>:word64] = 0<64>
	Mem0[r15:word64] = rax
	Mem0[r15 + 0x20<64>:byte] = 0<8>
	rcx = r15
	Mem0[r15 + 0x28<64>:word64] = 0<64>
	Mem0[r15 + 0x30<64>:word64] = 0<64>
	Mem0[r15 + 0x38<64>:word64] = 0<64>
	Mem0[r15 + 0x40<64>:word64] = 0<64>
	Mem0[r15 + 0x48<64>:byte] = 0<8>
	Mem0[r15 + 0x49<64>:byte] = 0<8>
	Mem0[r15 + 0x88<64>:byte] = 0<8>
	call fn0000000000463E50 (retsize: 8;)
	rcx = Mem0[rbx + 0xD0<64>:word64]
	rdx = r15
	r8 = r14
	call fn0000000000469430 (retsize: 8;)
	r15 = Mem0[r13 + 0<64>:word64]
	goto l00000000004382F6
	// succ:  l00000000004382F6
l0000000000438583:
	eax = CONVERT(Mem0[r15 + 0x4E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 1<64>
	SCZO = cond(r9)
	Mem0[r9:byte] = al
	goto l0000000000438396
	// succ:  l0000000000438396
fn00000000004382A0_exit:


// fn00000000004385D0
// Return size: 8
define fn00000000004385D0
fn00000000004385D0_entry:
	rsp = fp
	// succ:  l00000000004385D0
l00000000004385D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	eax = Mem0[rbp + 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r13 = Mem0[r8:word64]
	r12 = rcx
	rcx = 0x000000000048B580<p64>
	rbx = r9
	r15 = Mem0[r8 + 8<64>:word64]
	Mem0[rbp - 0x3C<64>:word32] = eax
	call fn000000000042BB80 (retsize: 8;)
	r14 = rax
	rax = Mem0[rbx + 0xD0<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	rdi = rax + r14 * 8<64>
	rsi = Mem0[rdi:word64]
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l00000000004387D0
	// succ:  l0000000000438625 l00000000004387D0
l0000000000438625:
	r14d = Mem0[rbx + 0x18<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	rax = rsi + 0x4A<64>
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	edx = Mem0[rbp + 0x48<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r11 = rsp + 0x30<64>
	rcx = rsp + 0x44<64>
	r8 = rax
	Mem0[rbp - 0x48<64>:word64] = rax
	eax = r14d
	rax = CONVERT(eax, word32, uint64)
	r9d = r14d
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rbp - 0x38<64>:word64] = r11
	eax = eax & 0x4A<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 8<32>)
	Mem0[rbp - 0x40<64>:word32] = eax
	dil = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(eax - 0x40<32>)
	al = CONVERT(Test(NE,Z), bool, int8)
	edi = edi & eax
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	eax = CONVERT(dil, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn000000000046F460 (retsize: 8;)
	r9d = 0x14<32>
	r9 = CONVERT(r9d, word32, uint64)
	rcx = CONVERT(eax, word32, int64)
	r11 = Mem0[rbp - 0x38<64>:word64]
	r9d = r9d - ecx
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	r9 = CONVERT(r9d, word32, int64)
	r9 = r9 + r11
	SCZO = cond(r9)
	SCZO = cond(Mem0[rsi + 0x20<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000438722
	// succ:  l0000000000438691 l0000000000438722
l0000000000438691:
	SZO = cond(dil & dil)
	C = false
	branch Test(EQ,Z) l000000000043877A
	// succ:  l000000000043869A l000000000043877A
l000000000043869A:
	rdi = Mem0[rbx + 0x10<64>:word64]
	rsi = CONVERT(ecx, word32, int64)
	SCZO = cond(rdi - rsi)
	branch Test(LE,SZO) l00000000004386DA
	// succ:  l00000000004386A6 l00000000004386DA
l00000000004386A6:
	rax = rdi + 0x1E<64>
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	edx = CONVERT(Mem0[rbp - 0x3C<64>:byte], byte, int32)
	rsp = rsp - rax
	SCZO = cond(rsp)
	rcx = rbx
	r14 = rsp + 0x30<64>
	Mem0[rsp + 0x28<64>:word64] = rsi
	Mem0[rsp + 0x20<64>:word64] = rdi
	rsi = CONVERT(edi, word32, int64)
	r8 = r14
	call fn00000000004688D0 (retsize: 8;)
	r9 = r14
	// succ:  l00000000004386DA
l00000000004386DA:
	SZO = cond(r15b & r15b)
	C = false
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	ebx = r15d
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l0000000000438705
	// succ:  l00000000004386EA l0000000000438705
l00000000004386EA:
	rax = Mem0[r13 + 0<64>:word64]
	r8 = rsi
	rdx = r9
	rcx = r13
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rax - rsi)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l0000000000438705
	// succ:  l0000000000438702_1 l0000000000438705
l0000000000438702_1:
	ebx = eax
	// succ:  l0000000000438705
l0000000000438705:
	rax = r12
	Mem0[r12:word64] = r13
	Mem0[r12 + 8<64>:byte] = bl
	rsp = rbp - 0x28<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004385D0_exit
l0000000000438722:
	eax = SLICE(rcx + 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rax = rax + 0x1E<64> + rax
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	edx = CONVERT(Mem0[rsi + 0x49<64>:byte], byte, int32)
	r8 = Mem0[rsi + 0x10<64>:word64]
	rsp = rsp - rax
	SCZO = cond(rsp)
	rax = Mem0[rsi + 0x18<64>:word64]
	rcx = rcx + r9
	SCZO = cond(rcx)
	r11 = rsp + 0x32<64>
	Mem0[rsp + 0x28<64>:word64] = rcx
	Mem0[rsp + 0x20<64>:word64] = r9
	rcx = r11
	r9 = rax
	Mem0[rbp - 0x38<64>:word64] = r11
	call fn000000000046F7F0 (retsize: 8;)
	r11 = Mem0[rbp - 0x38<64>:word64]
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx - r11d
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	SZO = cond(dil & dil)
	C = false
	r9 = r11
	branch Test(NE,Z) l000000000043869A
	// succ:  l000000000043877A l000000000043869A
l000000000043877A:
	eax = Mem0[rbp + 0x48<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000043869A
	// succ:  l0000000000438785 l000000000043869A
l0000000000438785:
	SZO = cond(r14d & 0x200<32>)
	C = false
	branch Test(EQ,Z) l000000000043869A
	// succ:  l0000000000438792 l000000000043869A
l0000000000438792:
	SCZO = cond(Mem0[rbp - 0x40<64>:word32] - 0x40<32>)
	branch Test(EQ,Z) l000000000043885A
	// succ:  l000000000043879C l000000000043885A
l000000000043879C:
	rdx = Mem0[rbp - 0x48<64>:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	r14d = r14d & 0x4000<32>
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	ecx = ecx + 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 2<64>
	SCZO = cond(r9)
	eax = CONVERT(Mem0[rdx + 2<64> + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9 + 1<64>:byte] = al
	eax = CONVERT(Mem0[rsi + 0x4E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9:byte] = al
	goto l000000000043869A
	// succ:  l000000000043869A
l00000000004387D0:
	ecx = 0x90<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rsi = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = 0x0000000000497350<p64>
	rdx = rbx + 0xD0<64>
	Mem0[rsi + 0x10<64>:word64] = 0<64>
	Mem0[rsi + 0x18<64>:word64] = 0<64>
	Mem0[rsi:word64] = rax
	Mem0[rsi + 0x20<64>:byte] = 0<8>
	rcx = rsi
	Mem0[rsi + 0x28<64>:word64] = 0<64>
	Mem0[rsi + 0x30<64>:word64] = 0<64>
	Mem0[rsi + 0x38<64>:word64] = 0<64>
	Mem0[rsi + 0x40<64>:word64] = 0<64>
	Mem0[rsi + 0x48<64>:byte] = 0<8>
	Mem0[rsi + 0x49<64>:byte] = 0<8>
	Mem0[rsi + 0x88<64>:byte] = 0<8>
	call fn0000000000463E50 (retsize: 8;)
	rcx = Mem0[rbx + 0xD0<64>:word64]
	rdx = rsi
	r8 = r14
	call fn0000000000469430 (retsize: 8;)
	rsi = Mem0[rdi:word64]
	goto l0000000000438625
	// succ:  l0000000000438625
l000000000043885A:
	eax = CONVERT(Mem0[rsi + 0x4E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 1<64>
	SCZO = cond(r9)
	Mem0[r9:byte] = al
	goto l000000000043869A
	// succ:  l000000000043869A
fn00000000004385D0_exit:


// fn00000000004388A0
// Return size: 8
define fn00000000004388A0
fn00000000004388A0_entry:
	rsp = fp
	// succ:  l00000000004388A0
l00000000004388A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	eax = Mem0[rbp + 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdi = Mem0[r8:word64]
	rsi = rcx
	rcx = 0x000000000048B580<p64>
	rbx = r9
	r12 = Mem0[r8 + 8<64>:word64]
	Mem0[rbp - 0x3C<64>:word32] = eax
	call fn000000000042BB80 (retsize: 8;)
	r14 = rax
	rax = Mem0[rbx + 0xD0<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	r13 = rax + r14 * 8<64>
	r15 = Mem0[r13 + 0<64>:word64]
	SZO = cond(r15 & r15)
	C = false
	branch Test(EQ,Z) l0000000000438AF4
	// succ:  l00000000004388F6 l0000000000438AF4
l00000000004388F6:
	r14d = Mem0[rbx + 0x18<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	rax = r15 + 0x4A<64>
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rdx = Mem0[rbp + 0x48<64>:word64]
	r10 = rsp + 0x30<64>
	rcx = rsp + 0x58<64>
	r8 = rax
	Mem0[rbp - 0x48<64>:word64] = rax
	eax = r14d
	rax = CONVERT(eax, word32, uint64)
	r9d = r14d
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rbp - 0x38<64>:word64] = r10
	eax = eax & 0x4A<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 8<32>)
	Mem0[rbp - 0x40<64>:word32] = eax
	r13b = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(eax - 0x40<32>)
	al = CONVERT(Test(NE,Z), bool, int8)
	r13d = r13d & eax
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	SCZO = cond(Mem0[rbp + 0x48<64>:word64] - 0<64>)
	al = CONVERT(Test(GT,SZO), bool, int8)
	rdx = -rdx
	SCZO = cond(rdx)
	C = rdx == 0<64>
	SCZO = cond(r13b - al)
	branch Test(UGT,CZ) l000000000043894A
	// succ:  l0000000000438945_1 l000000000043894A
l0000000000438945_1:
	rdx = Mem0[rbp + 0x48<64>:word64]
	// succ:  l000000000043894A
l000000000043894A:
	eax = CONVERT(r13b, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn000000000046F510 (retsize: 8;)
	r9d = 0x28<32>
	r9 = CONVERT(r9d, word32, uint64)
	rcx = CONVERT(eax, word32, int64)
	r10 = Mem0[rbp - 0x38<64>:word64]
	r9d = r9d - ecx
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	r9 = CONVERT(r9d, word32, int64)
	r9 = r9 + r10
	SCZO = cond(r9)
	SCZO = cond(Mem0[r15 + 0x20<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000438A34
	// succ:  l0000000000438978 l0000000000438A34
l0000000000438978:
	SZO = cond(r13b & r13b)
	C = false
	branch Test(EQ,Z) l0000000000438A8D
	// succ:  l0000000000438981 l0000000000438A8D
l0000000000438981:
	SCZO = cond(Mem0[rbp + 0x48<64>:word64] - 0<64>)
	branch Test(SG,S) l0000000000438AE0
	// succ:  l000000000043898C l0000000000438AE0
l000000000043898C:
	r14d = r14d & 0x800<32>
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	branch Test(NE,Z) l0000000000438A20
	// succ:  l0000000000438999 l0000000000438A20
l0000000000438999:
	r14 = Mem0[rbx + 0x10<64>:word64]
	r13 = CONVERT(ecx, word32, int64)
	SCZO = cond(r14 - r13)
	branch Test(LE,SZO) l00000000004389D9
	// succ:  l00000000004389A5 l00000000004389D9
l00000000004389A5:
	rax = r14 + 0x1E<64>
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	edx = CONVERT(Mem0[rbp - 0x3C<64>:byte], byte, int32)
	rsp = rsp - rax
	SCZO = cond(rsp)
	rcx = rbx
	r15 = rsp + 0x30<64>
	Mem0[rsp + 0x28<64>:word64] = r13
	Mem0[rsp + 0x20<64>:word64] = r14
	r13 = CONVERT(r14d, word32, int64)
	r8 = r15
	call fn00000000004688D0 (retsize: 8;)
	r9 = r15
	// succ:  l00000000004389D9
l00000000004389D9:
	SZO = cond(r12b & r12b)
	C = false
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	ebx = r12d
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l0000000000438A03
	// succ:  l00000000004389E9 l0000000000438A03
l00000000004389E9:
	rax = Mem0[rdi:word64]
	r8 = r13
	rdx = r9
	rcx = rdi
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rax - r13)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l0000000000438A03
	// succ:  l0000000000438A00_1 l0000000000438A03
l0000000000438A00_1:
	ebx = eax
	// succ:  l0000000000438A03
l0000000000438A03:
	rax = rsi
	Mem0[rsi:word64] = rdi
	Mem0[rsi + 8<64>:byte] = bl
	rsp = rbp - 0x28<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004388A0_exit
l0000000000438A20:
	eax = CONVERT(Mem0[r15 + 0x4B<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 1<64>
	SCZO = cond(r9)
	Mem0[r9:byte] = al
	goto l0000000000438999
	// succ:  l0000000000438999
l0000000000438A34:
	eax = SLICE(rcx + 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rax = rax + 0x1E<64> + rax
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	r10 = Mem0[r15 + 0x18<64>:word64]
	edx = CONVERT(Mem0[r15 + 0x49<64>:byte], byte, int32)
	rsp = rsp - rax
	SCZO = cond(rsp)
	r8 = Mem0[r15 + 0x10<64>:word64]
	rcx = rcx + r9
	SCZO = cond(rcx)
	r11 = rsp + 0x32<64>
	Mem0[rsp + 0x28<64>:word64] = rcx
	Mem0[rsp + 0x20<64>:word64] = r9
	r9 = r10
	rcx = r11
	Mem0[rbp - 0x38<64>:word64] = r11
	call fn000000000046F7F0 (retsize: 8;)
	r11 = Mem0[rbp - 0x38<64>:word64]
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx - r11d
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	SZO = cond(r13b & r13b)
	C = false
	r9 = r11
	branch Test(NE,Z) l0000000000438981
	// succ:  l0000000000438A8D l0000000000438981
l0000000000438A8D:
	SZO = cond(r14d & 0x200<32>)
	C = false
	branch Test(EQ,Z) l0000000000438999
	// succ:  l0000000000438A9A l0000000000438999
l0000000000438A9A:
	SCZO = cond(Mem0[rbp + 0x48<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000438999
	// succ:  l0000000000438AA5 l0000000000438999
l0000000000438AA5:
	SCZO = cond(Mem0[rbp - 0x40<64>:word32] - 0x40<32>)
	branch Test(EQ,Z) l0000000000438B83
	// succ:  l0000000000438AAF l0000000000438B83
l0000000000438AAF:
	rdx = Mem0[rbp - 0x48<64>:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	r14d = r14d & 0x4000<32>
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	ecx = ecx + 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 2<64>
	SCZO = cond(r9)
	eax = CONVERT(Mem0[rdx + 2<64> + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9 + 1<64>:byte] = al
	eax = CONVERT(Mem0[r15 + 0x4E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9:byte] = al
	goto l0000000000438999
	// succ:  l0000000000438999
l0000000000438AE0:
	eax = CONVERT(Mem0[r15 + 0x4A<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 1<64>
	SCZO = cond(r9)
	Mem0[r9:byte] = al
	goto l0000000000438999
	// succ:  l0000000000438999
l0000000000438AF4:
	ecx = 0x90<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	r15 = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = 0x0000000000497350<p64>
	rdx = rbx + 0xD0<64>
	Mem0[r15 + 0x10<64>:word64] = 0<64>
	Mem0[r15 + 0x18<64>:word64] = 0<64>
	Mem0[r15:word64] = rax
	Mem0[r15 + 0x20<64>:byte] = 0<8>
	rcx = r15
	Mem0[r15 + 0x28<64>:word64] = 0<64>
	Mem0[r15 + 0x30<64>:word64] = 0<64>
	Mem0[r15 + 0x38<64>:word64] = 0<64>
	Mem0[r15 + 0x40<64>:word64] = 0<64>
	Mem0[r15 + 0x48<64>:byte] = 0<8>
	Mem0[r15 + 0x49<64>:byte] = 0<8>
	Mem0[r15 + 0x88<64>:byte] = 0<8>
	call fn0000000000463E50 (retsize: 8;)
	rcx = Mem0[rbx + 0xD0<64>:word64]
	rdx = r15
	r8 = r14
	call fn0000000000469430 (retsize: 8;)
	r15 = Mem0[r13 + 0<64>:word64]
	goto l00000000004388F6
	// succ:  l00000000004388F6
l0000000000438B83:
	eax = CONVERT(Mem0[r15 + 0x4E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 1<64>
	SCZO = cond(r9)
	Mem0[r9:byte] = al
	goto l0000000000438999
	// succ:  l0000000000438999
fn00000000004388A0_exit:


// fn0000000000438BD0
// Return size: 8
define fn0000000000438BD0
fn0000000000438BD0_entry:
	rsp = fp
	// succ:  l0000000000438BD0
l0000000000438BD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	eax = Mem0[rbp + 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r13 = Mem0[r8:word64]
	r12 = rcx
	rcx = 0x000000000048B580<p64>
	rbx = r9
	r15 = Mem0[r8 + 8<64>:word64]
	Mem0[rbp - 0x3C<64>:word32] = eax
	call fn000000000042BB80 (retsize: 8;)
	r14 = rax
	rax = Mem0[rbx + 0xD0<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	rdi = rax + r14 * 8<64>
	rsi = Mem0[rdi:word64]
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000438DD0
	// succ:  l0000000000438C25 l0000000000438DD0
l0000000000438C25:
	r14d = Mem0[rbx + 0x18<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	rax = rsi + 0x4A<64>
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rdx = Mem0[rbp + 0x48<64>:word64]
	r11 = rsp + 0x30<64>
	rcx = rsp + 0x58<64>
	r8 = rax
	Mem0[rbp - 0x48<64>:word64] = rax
	eax = r14d
	rax = CONVERT(eax, word32, uint64)
	r9d = r14d
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rbp - 0x38<64>:word64] = r11
	eax = eax & 0x4A<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 8<32>)
	Mem0[rbp - 0x40<64>:word32] = eax
	dil = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(eax - 0x40<32>)
	al = CONVERT(Test(NE,Z), bool, int8)
	edi = edi & eax
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	eax = CONVERT(dil, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn000000000046F510 (retsize: 8;)
	r9d = 0x28<32>
	r9 = CONVERT(r9d, word32, uint64)
	rcx = CONVERT(eax, word32, int64)
	r11 = Mem0[rbp - 0x38<64>:word64]
	r9d = r9d - ecx
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	r9 = CONVERT(r9d, word32, int64)
	r9 = r9 + r11
	SCZO = cond(r9)
	SCZO = cond(Mem0[rsi + 0x20<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000438D23
	// succ:  l0000000000438C92 l0000000000438D23
l0000000000438C92:
	SZO = cond(dil & dil)
	C = false
	branch Test(EQ,Z) l0000000000438D7B
	// succ:  l0000000000438C9B l0000000000438D7B
l0000000000438C9B:
	rdi = Mem0[rbx + 0x10<64>:word64]
	rsi = CONVERT(ecx, word32, int64)
	SCZO = cond(rdi - rsi)
	branch Test(LE,SZO) l0000000000438CDB
	// succ:  l0000000000438CA7 l0000000000438CDB
l0000000000438CA7:
	rax = rdi + 0x1E<64>
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	edx = CONVERT(Mem0[rbp - 0x3C<64>:byte], byte, int32)
	rsp = rsp - rax
	SCZO = cond(rsp)
	rcx = rbx
	r14 = rsp + 0x30<64>
	Mem0[rsp + 0x28<64>:word64] = rsi
	Mem0[rsp + 0x20<64>:word64] = rdi
	rsi = CONVERT(edi, word32, int64)
	r8 = r14
	call fn00000000004688D0 (retsize: 8;)
	r9 = r14
	// succ:  l0000000000438CDB
l0000000000438CDB:
	SZO = cond(r15b & r15b)
	C = false
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	ebx = r15d
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l0000000000438D06
	// succ:  l0000000000438CEB l0000000000438D06
l0000000000438CEB:
	rax = Mem0[r13 + 0<64>:word64]
	r8 = rsi
	rdx = r9
	rcx = r13
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rax - rsi)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l0000000000438D06
	// succ:  l0000000000438D03_1 l0000000000438D06
l0000000000438D03_1:
	ebx = eax
	// succ:  l0000000000438D06
l0000000000438D06:
	rax = r12
	Mem0[r12:word64] = r13
	Mem0[r12 + 8<64>:byte] = bl
	rsp = rbp - 0x28<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000438BD0_exit
l0000000000438D23:
	eax = SLICE(rcx + 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rax = rax + 0x1E<64> + rax
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	edx = CONVERT(Mem0[rsi + 0x49<64>:byte], byte, int32)
	r8 = Mem0[rsi + 0x10<64>:word64]
	rsp = rsp - rax
	SCZO = cond(rsp)
	rax = Mem0[rsi + 0x18<64>:word64]
	rcx = rcx + r9
	SCZO = cond(rcx)
	r11 = rsp + 0x32<64>
	Mem0[rsp + 0x28<64>:word64] = rcx
	Mem0[rsp + 0x20<64>:word64] = r9
	rcx = r11
	r9 = rax
	Mem0[rbp - 0x38<64>:word64] = r11
	call fn000000000046F7F0 (retsize: 8;)
	r11 = Mem0[rbp - 0x38<64>:word64]
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx - r11d
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	SZO = cond(dil & dil)
	C = false
	r9 = r11
	branch Test(NE,Z) l0000000000438C9B
	// succ:  l0000000000438D7B l0000000000438C9B
l0000000000438D7B:
	SCZO = cond(Mem0[rbp + 0x48<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000438C9B
	// succ:  l0000000000438D86 l0000000000438C9B
l0000000000438D86:
	SZO = cond(r14d & 0x200<32>)
	C = false
	branch Test(EQ,Z) l0000000000438C9B
	// succ:  l0000000000438D93 l0000000000438C9B
l0000000000438D93:
	SCZO = cond(Mem0[rbp - 0x40<64>:word32] - 0x40<32>)
	branch Test(EQ,Z) l0000000000438E5A
	// succ:  l0000000000438D9D l0000000000438E5A
l0000000000438D9D:
	rdx = Mem0[rbp - 0x48<64>:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	r14d = r14d & 0x4000<32>
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	ecx = ecx + 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 2<64>
	SCZO = cond(r9)
	eax = CONVERT(Mem0[rdx + 2<64> + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9 + 1<64>:byte] = al
	eax = CONVERT(Mem0[rsi + 0x4E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9:byte] = al
	goto l0000000000438C9B
	// succ:  l0000000000438C9B
l0000000000438DD0:
	ecx = 0x90<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rsi = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = 0x0000000000497350<p64>
	rdx = rbx + 0xD0<64>
	Mem0[rsi + 0x10<64>:word64] = 0<64>
	Mem0[rsi + 0x18<64>:word64] = 0<64>
	Mem0[rsi:word64] = rax
	Mem0[rsi + 0x20<64>:byte] = 0<8>
	rcx = rsi
	Mem0[rsi + 0x28<64>:word64] = 0<64>
	Mem0[rsi + 0x30<64>:word64] = 0<64>
	Mem0[rsi + 0x38<64>:word64] = 0<64>
	Mem0[rsi + 0x40<64>:word64] = 0<64>
	Mem0[rsi + 0x48<64>:byte] = 0<8>
	Mem0[rsi + 0x49<64>:byte] = 0<8>
	Mem0[rsi + 0x88<64>:byte] = 0<8>
	call fn0000000000463E50 (retsize: 8;)
	rcx = Mem0[rbx + 0xD0<64>:word64]
	rdx = rsi
	r8 = r14
	call fn0000000000469430 (retsize: 8;)
	rsi = Mem0[rdi:word64]
	goto l0000000000438C25
	// succ:  l0000000000438C25
l0000000000438E5A:
	eax = CONVERT(Mem0[rsi + 0x4E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 1<64>
	SCZO = cond(r9)
	Mem0[r9:byte] = al
	goto l0000000000438C9B
	// succ:  l0000000000438C9B
fn0000000000438BD0_exit:


// fn0000000000438EA0
// Return size: 8
define fn0000000000438EA0
fn0000000000438EA0_entry:
	rsp = fp
	// succ:  l0000000000438EA0
l0000000000438EA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rdi = Mem0[rsp + 0x80<64>:word64]
	rbx = Mem0[rsp + 0x88<64>:word64]
	r10 = Mem0[rsp + 0x90<64>:word64]
	rsi = Mem0[rsp + 0x98<64>:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000438F25
	// succ:  l0000000000438ECD l0000000000438F25
l0000000000438ECD:
	rbp = rdi
	eax = CONVERT(r9b, byte, int32)
	Mem0[rsp + 0x20<64>:word64] = r10
	rbp = rbp - r10
	SCZO = cond(rbp)
	r9 = r8
	r8 = rdx
	rcx = CONVERT(ebp, word32, int64)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rcx = rcx + r10
	SCZO = cond(rcx)
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = rbx
	call fn000000000046F7F0 (retsize: 8;)
	r8d = Mem0[rsi:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rax
	rcx = rax
	rdx = rdx - rbx
	SCZO = cond(rdx)
	rbx = rdx
	rdx = rdi
	r8d = r8d - ebp
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	r8 = CONVERT(r8d, word32, int64)
	rax = memcpy(rcx, rdx, r8)
	eax = Mem0[rsi:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - ebp
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax + ebx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rsi:word32] = eax
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000438EA0_exit
l0000000000438F25:
	rcx = CONVERT(Mem0[rsi:word32], word32, int64)
	eax = CONVERT(r9b, byte, int32)
	Mem0[rsp + 0x20<64>:word64] = r10
	r9 = r8
	r8 = rdx
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rcx = rcx + r10
	SCZO = cond(rcx)
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = rbx
	call fn000000000046F7F0 (retsize: 8;)
	eax = eax - ebx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rsi:word32] = eax
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000438EA0_exit
fn0000000000438EA0_exit:


// fn0000000000438F60
// Return size: 8
define fn0000000000438F60
fn0000000000438F60_entry:
	rsp = fp
	// succ:  l0000000000438F60
l0000000000438F60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x98<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp + 0<64>:word128] = xmm6
	r15 = r9 + 0xD0<64>
	r13 = rcx
	rcx = rbp - 0x1D<64>
	rax = Mem0[r8 + 8<64>:word64]
	rbx = r9
	Mem0[rbp + 0x68<64>:word64] = rdx
	rdx = r15
	esi = Mem0[rbp + 0x88<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	r14 = Mem0[r8:word64]
	xmm6 = SEQ(0<64>, Mem0[rbp + 0x90<64>:real64])
	rdi = rbp - 0x10<64>
	Mem0[rbp - 0x30<64>:word64] = rax
	eax = Mem0[rbp + 0x80<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp - 0x3C<64>:word32] = eax
	call fn000000000042A360 (retsize: 8;)
	r12 = rax
	rax = Mem0[rbx + 8<64>:word64]
	edx = 6<32>
	rdx = CONVERT(edx, word32, uint64)
	r8d = CONVERT(sil, byte, int32)
	rcx = rbx
	SZO = cond(rax & rax)
	C = false
	branch Test(SG,S) l0000000000438FDC
	// succ:  l0000000000438FD8_1 l0000000000438FDC
l0000000000438FD8_1:
	rdx = rax
	// succ:  l0000000000438FDC
l0000000000438FDC:
	Mem0[rbp - 0x28<64>:word64] = rdx
	rdx = rdi
	call fn0000000000452660 (retsize: 8;)
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	call fn000000000046AC50 (retsize: 8;)
	rdx = Mem0[rbp - 0x28<64>:word64]
	Mem0[rbp - 0x18<64>:word64] = rax
	rsi = rsp + 0x40<64>
	rax = rbp - 0x18<64>
	Mem0[rsp + 0x28<64>:real64] = SLICE(xmm6, real64, 0)
	r9 = rdi
	r8d = 0x2D<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x20<64>:word64] = rdx
	rcx = rax
	rdx = rsi
	Mem0[rbp - 0x38<64>:word64] = rax
	call fn000000000046FF90 (retsize: 8;)
	SCZO = cond(eax - 0x2C<32>)
	Mem0[rbp - 0x1C<64>:word32] = eax
	branch Test(GT,SZO) l0000000000439220
	// succ:  l0000000000439031 l0000000000439220
l0000000000439031:
	rcx = r15
	call fn0000000000472FC0 (retsize: 8;)
	r15 = CONVERT(Mem0[rbp - 0x1C<64>:word32], word32, int64)
	r11 = rax
	rax = r15 + 0x1E<64>
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	eax = CONVERT(Mem0[r11 + 0x38<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rdi = rsp + 0x40<64>
	Mem0[rbp - 0x28<64>:word64] = rdi
	SCZO = cond(al - 1<8>)
	branch Test(EQ,Z) l00000000004392D0
	// succ:  l0000000000439066 l00000000004392D0
l0000000000439066:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000439273
	// succ:  l000000000043906E l0000000000439273
l000000000043906E:
	rax = Mem0[r11:word64]
	rdx = 0x000000000042B5D0<p64>
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000004392B0
	// succ:  l0000000000439085 l00000000004392B0
l0000000000439085:
	r8 = r15
	rdx = rsi
	rcx = rdi
	rax = memcpy(rcx, rdx, r8)
	r15 = CONVERT(Mem0[rbp - 0x1C<64>:word32], word32, int64)
	r9 = r15
	// succ:  l000000000043909A
l000000000043909A:
	r8 = r15
	edx = 0x2E<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	Mem0[rbp - 0x38<64>:word32] = r9d
	rax = memchr(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	r9d = Mem0[rbp - 0x38<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	branch Test(EQ,Z) l0000000000439170
	// succ:  l00000000004390BB l0000000000439170
l00000000004390BB:
	rax = rax - rsi
	SCZO = cond(rax)
	rcx = rdi + rax
	eax = CONVERT(Mem0[r12 + 0x48<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:byte] = al
	SCZO = cond(Mem0[r12 + 0x20<64>:byte] - 0<8>)
	branch Test(NE,Z) l00000000004391A8
	// succ:  l00000000004390D6 l00000000004391A8
l00000000004390D6:
	rdi = Mem0[rbx + 0x10<64>:word64]
	rsi = r15
	SCZO = cond(rdi - r15)
	branch Test(LE,SZO) l000000000043911E
	// succ:  l00000000004390E2 l000000000043911E
l00000000004390E2:
	rax = rdi + 0x1E<64>
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	edx = CONVERT(Mem0[rbp - 0x3C<64>:byte], byte, int32)
	r9 = Mem0[rbp - 0x28<64>:word64]
	rsp = rsp - rax
	SCZO = cond(rsp)
	rcx = rbx
	rsi = CONVERT(edi, word32, int64)
	r12 = rsp + 0x40<64>
	Mem0[rsp + 0x28<64>:word64] = r15
	Mem0[rsp + 0x20<64>:word64] = rdi
	r8 = r12
	call fn00000000004688D0 (retsize: 8;)
	Mem0[rbp - 0x1C<64>:word32] = edi
	Mem0[rbp - 0x28<64>:word64] = r12
	// succ:  l000000000043911E
l000000000043911E:
	rax = Mem0[rbp - 0x30<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	SZO = cond(al & al)
	C = false
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l000000000043914B
	// succ:  l0000000000439130 l000000000043914B
l0000000000439130:
	rax = Mem0[r14:word64]
	r8 = rsi
	rdx = Mem0[rbp - 0x28<64>:word64]
	rcx = r14
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rax - rsi)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l000000000043914B
	// succ:  l0000000000439148_1 l000000000043914B
l0000000000439148_1:
	ebx = eax
	// succ:  l000000000043914B
l000000000043914B:
	xmm6 = Mem0[rbp + 0<64>:word128]
	rax = r13
	Mem0[r13 + 0<64>:word64] = r14
	Mem0[r13 + 8<64>:byte] = bl
	rsp = rbp + 0x18<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000438F60_exit
l0000000000439170:
	SCZO = cond(Mem0[r12 + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l00000000004390D6
	// succ:  l000000000043917C l00000000004390D6
l000000000043917C:
	SCZO = cond(r9d - 2<32>)
	branch Test(LE,SZO) l00000000004391A6
	// succ:  l0000000000439182 l00000000004391A6
l0000000000439182:
	eax = CONVERT(Mem0[rsi + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x39<8>)
	branch Test(GT,SZO) l00000000004390D6
	// succ:  l000000000043918E l00000000004390D6
l000000000043918E:
	ecx = CONVERT(Mem0[rsi + 2<64>:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	edx = SLICE(rcx - 0x30<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 9<8>)
	branch Test(UGT,CZ) l00000000004390D6
	// succ:  l000000000043919E l00000000004390D6
l000000000043919E:
	SCZO = cond(al - 0x2F<8>)
	branch Test(LE,SZO) l00000000004390D6
	// succ:  l00000000004391A6 l00000000004390D6
l00000000004391A6:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	// succ:  l00000000004391A8
l00000000004391A8:
	rax = r15 + 0x1E<64> + r15
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	eax = CONVERT(Mem0[rsi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	r15 = rsp + 0x40<64>
	eax = eax - 0x2B<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(al & 0xFD<8>)
	C = false
	branch Test(EQ,Z) l0000000000439290
	// succ:  l00000000004391CC l0000000000439290
l00000000004391CC:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l00000000004391D0
l00000000004391D0:
	r9d = CONVERT(Mem0[r12 + 0x49<64>:byte], byte, int32)
	r8 = Mem0[r12 + 0x18<64>:word64]
	r10 = rbp - 0x1C<64>
	rdx = Mem0[r12 + 0x10<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rdi = rdi + rax
	SCZO = cond(rdi)
	rcx = Mem0[rbp + 0x68<64>:word64]
	rax = rax + r15
	SCZO = cond(rax)
	Mem0[rsp + 0x38<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rdi
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn0000000000438EA0 (retsize: 8;)
	esi = esi + Mem0[rbp - 0x1C<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	Mem0[rbp - 0x28<64>:word64] = r15
	Mem0[rbp - 0x1C<64>:word32] = esi
	r15 = CONVERT(esi, word32, int64)
	goto l00000000004390D6
	// succ:  l00000000004390D6
l0000000000439220:
	r8d = SLICE(rax + 1<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	rax = CONVERT(r8d, word32, int64)
	Mem0[rbp - 0x40<64>:word32] = r8d
	rax = rax + 0x1E<64>
	SCZO = cond(rax)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rbp - 0x18<64>:word64] = rax
	rax = Mem0[rbp - 0x28<64>:word64]
	rsi = rsp + 0x40<64>
	r8d = Mem0[rbp - 0x40<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rcx = Mem0[rbp - 0x38<64>:word64]
	Mem0[rsp + 0x28<64>:real64] = SLICE(xmm6, real64, 0)
	r9 = rdi
	rdx = rsi
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn000000000046FF90 (retsize: 8;)
	Mem0[rbp - 0x1C<64>:word32] = eax
	goto l0000000000439031
	// succ:  l0000000000439031
l0000000000439273:
	rcx = r11
	Mem0[rbp - 0x38<64>:word64] = r11
	call fn000000000042B320 (retsize: 8;)
	r11 = Mem0[rbp - 0x38<64>:word64]
	goto l000000000043906E
	// succ:  l000000000043906E
l0000000000439290:
	eax = CONVERT(Mem0[rdi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	esi = SLICE(r9 - 1<64>, word32, 0)
	rsi = CONVERT(esi, word32, uint64)
	Mem0[rbp - 0x1C<64>:word32] = esi
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	Mem0[r15:byte] = al
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000004391D0
	// succ:  l00000000004391D0
l00000000004392B0:
	r9 = rdi
	r8 = rsi + r15
	rdx = rsi
	rcx = r11
	call rax (retsize: 8;)
	r15 = CONVERT(Mem0[rbp - 0x1C<64>:word32], word32, int64)
	r9 = r15
	goto l000000000043909A
	// succ:  l000000000043909A
l00000000004392D0:
	r8 = r15
	rdx = rsi
	rcx = rdi
	Mem0[rbp - 0x38<64>:word32] = r15d
	rax = memcpy(rcx, rdx, r8)
	r9d = Mem0[rbp - 0x38<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	goto l000000000043909A
	// succ:  l000000000043909A
fn0000000000438F60_exit:


// fn00000000004392F0
// Return size: 8
define fn00000000004392F0
fn00000000004392F0_entry:
	rsp = fp
	// succ:  l00000000004392F0
l00000000004392F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xB8<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	rax = Mem0[r8 + 8<64>:word64]
	esi = Mem0[rbp + 0xA8<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	r15 = r9 + 0xD0<64>
	r13 = rcx
	rcx = rbp + 0x13<64>
	rbx = r9
	Mem0[rbp + 0x88<64>:word64] = rdx
	r14 = Mem0[r8:word64]
	Mem0[rbp - 0x10<64>:word64] = rax
	eax = Mem0[rbp + 0xA0<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = r15
	rdi = rbp + 0x20<64>
	Mem0[rbp - 0x24<64>:word32] = eax
	rax = Mem0[rbp + 0xB0<64>:word64]
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rax:real80], real80, real64)
	Mem0[rbp - 0x20<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call fn000000000042A360 (retsize: 8;)
	r12 = rax
	edx = 6<32>
	rdx = CONVERT(edx, word32, uint64)
	r8d = CONVERT(sil, byte, int32)
	rax = Mem0[rbx + 8<64>:word64]
	rcx = rbx
	SZO = cond(rax & rax)
	C = false
	branch Test(SG,S) l000000000043936F
	// succ:  l000000000043936B_1 l000000000043936F
l000000000043936B_1:
	rdx = rax
	// succ:  l000000000043936F
l000000000043936F:
	Mem0[rbp - 8<64>:word64] = rdx
	rdx = rdi
	call fn0000000000452660 (retsize: 8;)
	rsp = rsp - 0x50<64>
	SCZO = cond(rsp)
	call fn000000000046AC50 (retsize: 8;)
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rbp - 0x20<64>:real80], real80, real64)
	rdx = Mem0[rbp - 8<64>:word64]
	Mem0[rbp + 0x18<64>:word64] = rax
	rsi = rsp + 0x40<64>
	rax = rbp + 0x18<64>
	Mem0[rsp + 0x28<64>:word64] = rbp
	r9 = rdi
	r8d = 0x36<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rbp - 0x38<64>:word64] = rbp
	Mem0[rsp + 0x20<64>:word64] = rdx
	rcx = rax
	rdx = rsi
	Mem0[rbp - 0x30<64>:word64] = rax
	Mem0[rbp + 0<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call fn000000000046FF90 (retsize: 8;)
	SCZO = cond(eax - 0x35<32>)
	Mem0[rbp + 0x14<64>:word32] = eax
	branch Test(GT,SZO) l00000000004395B0
	// succ:  l00000000004393CD l00000000004395B0
l00000000004393CD:
	rcx = r15
	call fn0000000000472FC0 (retsize: 8;)
	r15 = CONVERT(Mem0[rbp + 0x14<64>:word32], word32, int64)
	r11 = rax
	rax = r15 + 0x1E<64>
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	eax = CONVERT(Mem0[r11 + 0x38<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rdi = rsp + 0x40<64>
	Mem0[rbp - 8<64>:word64] = rdi
	SCZO = cond(al - 1<8>)
	branch Test(EQ,Z) l0000000000439660
	// succ:  l0000000000439402 l0000000000439660
l0000000000439402:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000439610
	// succ:  l000000000043940A l0000000000439610
l000000000043940A:
	rax = Mem0[r11:word64]
	rdx = 0x000000000042B5D0<p64>
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000439641
	// succ:  l0000000000439421 l0000000000439641
l0000000000439421:
	r8 = r15
	rdx = rsi
	rcx = rdi
	rax = memcpy(rcx, rdx, r8)
	r15 = CONVERT(Mem0[rbp + 0x14<64>:word32], word32, int64)
	r9 = r15
	// succ:  l0000000000439436
l0000000000439436:
	r8 = r15
	edx = 0x2E<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	Mem0[rbp - 0x20<64>:word32] = r9d
	rax = memchr(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	r9d = Mem0[rbp - 0x20<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	branch Test(EQ,Z) l0000000000439503
	// succ:  l0000000000439457 l0000000000439503
l0000000000439457:
	rax = rax - rsi
	SCZO = cond(rax)
	rcx = rdi + rax
	eax = CONVERT(Mem0[r12 + 0x48<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:byte] = al
	SCZO = cond(Mem0[r12 + 0x20<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000043953B
	// succ:  l0000000000439472 l000000000043953B
l0000000000439472:
	rdi = Mem0[rbx + 0x10<64>:word64]
	rsi = r15
	SCZO = cond(rdi - r15)
	branch Test(LE,SZO) l00000000004394BA
	// succ:  l000000000043947E l00000000004394BA
l000000000043947E:
	rax = rdi + 0x1E<64>
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	edx = CONVERT(Mem0[rbp - 0x24<64>:byte], byte, int32)
	r9 = Mem0[rbp - 8<64>:word64]
	rsp = rsp - rax
	SCZO = cond(rsp)
	rcx = rbx
	rsi = CONVERT(edi, word32, int64)
	r12 = rsp + 0x40<64>
	Mem0[rsp + 0x28<64>:word64] = r15
	Mem0[rsp + 0x20<64>:word64] = rdi
	r8 = r12
	call fn00000000004688D0 (retsize: 8;)
	Mem0[rbp + 0x14<64>:word32] = edi
	Mem0[rbp - 8<64>:word64] = r12
	// succ:  l00000000004394BA
l00000000004394BA:
	rax = Mem0[rbp - 0x10<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	SZO = cond(al & al)
	C = false
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l00000000004394E7
	// succ:  l00000000004394CC l00000000004394E7
l00000000004394CC:
	rax = Mem0[r14:word64]
	r8 = rsi
	rdx = Mem0[rbp - 8<64>:word64]
	rcx = r14
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rax - rsi)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l00000000004394E7
	// succ:  l00000000004394E4_1 l00000000004394E7
l00000000004394E4_1:
	ebx = eax
	// succ:  l00000000004394E7
l00000000004394E7:
	rax = r13
	Mem0[r13 + 0<64>:word64] = r14
	Mem0[r13 + 8<64>:byte] = bl
	rsp = rbp + 0x38<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004392F0_exit
l0000000000439503:
	SCZO = cond(Mem0[r12 + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000439472
	// succ:  l000000000043950F l0000000000439472
l000000000043950F:
	SCZO = cond(r9d - 2<32>)
	branch Test(LE,SZO) l0000000000439539
	// succ:  l0000000000439515 l0000000000439539
l0000000000439515:
	eax = CONVERT(Mem0[rsi + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x39<8>)
	branch Test(GT,SZO) l0000000000439472
	// succ:  l0000000000439521 l0000000000439472
l0000000000439521:
	edx = CONVERT(Mem0[rsi + 2<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	edx = edx - 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(dl - 9<8>)
	branch Test(UGT,CZ) l0000000000439472
	// succ:  l0000000000439531 l0000000000439472
l0000000000439531:
	SCZO = cond(al - 0x2F<8>)
	branch Test(LE,SZO) l0000000000439472
	// succ:  l0000000000439539 l0000000000439472
l0000000000439539:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	// succ:  l000000000043953B
l000000000043953B:
	rax = r15 + 0x1E<64> + r15
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	eax = CONVERT(Mem0[rsi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	r15 = rsp + 0x40<64>
	eax = eax - 0x2B<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(al & 0xFD<8>)
	C = false
	branch Test(EQ,Z) l0000000000439625
	// succ:  l000000000043955F l0000000000439625
l000000000043955F:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000439563
l0000000000439563:
	r9d = CONVERT(Mem0[r12 + 0x49<64>:byte], byte, int32)
	r8 = Mem0[r12 + 0x18<64>:word64]
	r10 = rbp + 0x14<64>
	rdx = Mem0[r12 + 0x10<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rdi = rdi + rax
	SCZO = cond(rdi)
	rcx = Mem0[rbp + 0x88<64>:word64]
	rax = rax + r15
	SCZO = cond(rax)
	Mem0[rsp + 0x38<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rdi
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn0000000000438EA0 (retsize: 8;)
	esi = esi + Mem0[rbp + 0x14<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	Mem0[rbp - 8<64>:word64] = r15
	Mem0[rbp + 0x14<64>:word32] = esi
	r15 = CONVERT(esi, word32, int64)
	goto l0000000000439472
	// succ:  l0000000000439472
l00000000004395B0:
	r8d = SLICE(rax + 1<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	rax = CONVERT(r8d, word32, int64)
	Mem0[rbp - 0x28<64>:word32] = r8d
	rax = rax + 0x1E<64>
	SCZO = cond(rax)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	call fn000000000046AC50 (retsize: 8;)
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rbp - 0x20<64>:real80], real80, real64)
	Mem0[rbp + 0x18<64>:word64] = rax
	rax = Mem0[rbp - 0x38<64>:word64]
	rsi = rsp + 0x40<64>
	r8d = Mem0[rbp - 0x28<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rcx = Mem0[rbp - 0x30<64>:word64]
	r9 = rdi
	rdx = rsi
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rbp - 8<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	Mem0[rbp + 0<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call fn000000000046FF90 (retsize: 8;)
	Mem0[rbp + 0x14<64>:word32] = eax
	goto l00000000004393CD
	// succ:  l00000000004393CD
l0000000000439610:
	rcx = r11
	Mem0[rbp - 0x20<64>:word64] = r11
	call fn000000000042B320 (retsize: 8;)
	r11 = Mem0[rbp - 0x20<64>:word64]
	goto l000000000043940A
	// succ:  l000000000043940A
l0000000000439625:
	eax = CONVERT(Mem0[rdi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	esi = SLICE(r9 - 1<64>, word32, 0)
	rsi = CONVERT(esi, word32, uint64)
	Mem0[rbp + 0x14<64>:word32] = esi
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	Mem0[r15:byte] = al
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000439563
	// succ:  l0000000000439563
l0000000000439641:
	r9 = rdi
	r8 = rsi + r15
	rdx = rsi
	rcx = r11
	call rax (retsize: 8;)
	r15 = CONVERT(Mem0[rbp + 0x14<64>:word32], word32, int64)
	r9 = r15
	goto l0000000000439436
	// succ:  l0000000000439436
l0000000000439660:
	r8 = r15
	rdx = rsi
	rcx = rdi
	Mem0[rbp - 0x20<64>:word32] = r15d
	rax = memcpy(rcx, rdx, r8)
	r9d = Mem0[rbp - 0x20<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	goto l0000000000439436
	// succ:  l0000000000439436
fn00000000004392F0_exit:


// fn0000000000439680
// Return size: 8
define fn0000000000439680
fn0000000000439680_entry:
	rsp = fp
	// succ:  l0000000000439680
l0000000000439680:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0x78<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x30<64>
	Mem0[rsp + 0x28<64>:word64] = rcx
	ecx = CONVERT(Mem0[rsp + 0x70<64>:byte], byte, int32)
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439680_exit
fn0000000000439680_exit:


// fn00000000004396C0
// Return size: 8
define fn00000000004396C0
fn00000000004396C0_entry:
	rsp = fp
	// succ:  l00000000004396C0
l00000000004396C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	ecx = CONVERT(Mem0[rsp + 0x78<64>:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x30<64>
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word32] = ecx
	ecx = CONVERT(Mem0[rsp + 0x70<64>:byte], byte, int32)
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004396C0_exit
fn00000000004396C0_exit:


// fn0000000000439700
// Return size: 8
define fn0000000000439700
fn0000000000439700_entry:
	rsp = fp
	// succ:  l0000000000439700
l0000000000439700:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x50<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = 0x0000000000439D70<p64>
	rbx = rcx
	ecx = CONVERT(Mem0[rsp + 0x80<64>:byte], byte, int32)
	rax = Mem0[rax + 0x38<64>:word64]
	xmm0 = SEQ(0<64>, Mem0[rsp + 0x88<64>:real64])
	Mem0[rsp + 0x40<64>:word128] = xmm1
	SCZO = cond(rax - r8)
	branch Test(NE,Z) l0000000000439760
	// succ:  l0000000000439736 l0000000000439760
l0000000000439736:
	Mem0[rsp + 0x30<64>:real64] = SLICE(xmm0, real64, 0)
	r8 = rsp + 0x40<64>
	Mem0[rsp + 0x20<64>:word32] = ecx
	Mem0[rsp + 0x28<64>:word32] = 0<32>
	rcx = rbx
	call fn0000000000438F60 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x50<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439700_exit
l0000000000439760:
	r8 = rsp + 0x40<64>
	Mem0[rsp + 0x20<64>:word32] = ecx
	Mem0[rsp + 0x28<64>:real64] = SLICE(xmm0, real64, 0)
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x50<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439700_exit
fn0000000000439700_exit:


// fn0000000000439780
// Return size: 8
define fn0000000000439780
fn0000000000439780_entry:
	rsp = fp
	// succ:  l0000000000439780
l0000000000439780:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0x98<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = 0x0000000000439DC0<p64>
	rbx = rcx
	ecx = CONVERT(Mem0[rsp + 0x90<64>:byte], byte, int32)
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rax:real80], real80, real64)
	rax = Mem0[rdx:word64]
	rax = Mem0[rax + 0x40<64>:word64]
	SCZO = cond(rax - r8)
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x40<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	branch Test(NE,Z) l00000000004397F0
	// succ:  l00000000004397BB l00000000004397F0
l00000000004397BB:
	rax = rsp + 0x40<64>
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x20<64>:word32] = ecx
	Mem0[rsp + 0x28<64>:word32] = 0x4C<32>
	rcx = rbx
	Mem0[rsp + 0x30<64>:word64] = rax
	call fn00000000004392F0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439780_exit
l00000000004397F0:
	r8 = rsp + 0x40<64>
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	Mem0[rsp + 0x28<64>:word64] = r8
	r8 = rsp + 0x50<64>
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439780_exit
fn0000000000439780_exit:


// fn0000000000439820
// Return size: 8
define fn0000000000439820
fn0000000000439820_entry:
	rsp = fp
	// succ:  l0000000000439820
l0000000000439820:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x0000000000439E20<p64>
	rbx = rcx
	ecx = CONVERT(Mem0[rsp + 0x70<64>:byte], byte, int32)
	xmm1 = Mem0[r8:word128]
	rax = Mem0[rax + 0x18<64>:word64]
	r8d = Mem0[rsp + 0x78<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x28<64>:word32] = r8d
	r8 = rsp + 0x30<64>
	branch Test(NE,Z) l0000000000439870
	// succ:  l0000000000439860 l0000000000439870
l0000000000439860:
	call fn00000000004382A0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439820_exit
l0000000000439870:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439820_exit
fn0000000000439820_exit:


// fn0000000000439880
// Return size: 8
define fn0000000000439880
fn0000000000439880_entry:
	rsp = fp
	// succ:  l0000000000439880
l0000000000439880:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x0000000000439E60<p64>
	rbx = rcx
	ecx = CONVERT(Mem0[rsp + 0x70<64>:byte], byte, int32)
	xmm1 = Mem0[r8:word128]
	rax = Mem0[rax + 0x20<64>:word64]
	r8d = Mem0[rsp + 0x78<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x28<64>:word32] = r8d
	r8 = rsp + 0x30<64>
	branch Test(NE,Z) l00000000004398D0
	// succ:  l00000000004398C0 l00000000004398D0
l00000000004398C0:
	call fn00000000004385D0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439880_exit
l00000000004398D0:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439880_exit
fn0000000000439880_exit:


// fn00000000004398E0
// Return size: 8
define fn00000000004398E0
fn00000000004398E0_entry:
	rsp = fp
	// succ:  l00000000004398E0
l00000000004398E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x0000000000439EA0<p64>
	rbx = rcx
	ecx = CONVERT(Mem0[rsp + 0x70<64>:byte], byte, int32)
	xmm1 = Mem0[r8:word128]
	rax = Mem0[rax + 0x28<64>:word64]
	r8 = Mem0[rsp + 0x78<64>:word64]
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x28<64>:word64] = r8
	r8 = rsp + 0x30<64>
	branch Test(NE,Z) l0000000000439930
	// succ:  l0000000000439920 l0000000000439930
l0000000000439920:
	call fn00000000004388A0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004398E0_exit
l0000000000439930:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004398E0_exit
fn00000000004398E0_exit:


// fn0000000000439940
// Return size: 8
define fn0000000000439940
fn0000000000439940_entry:
	rsp = fp
	// succ:  l0000000000439940
l0000000000439940:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x0000000000439EE0<p64>
	rbx = rcx
	ecx = CONVERT(Mem0[rsp + 0x70<64>:byte], byte, int32)
	xmm1 = Mem0[r8:word128]
	rax = Mem0[rax + 0x30<64>:word64]
	r8 = Mem0[rsp + 0x78<64>:word64]
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x28<64>:word64] = r8
	r8 = rsp + 0x30<64>
	branch Test(NE,Z) l0000000000439990
	// succ:  l0000000000439980 l0000000000439990
l0000000000439980:
	call fn0000000000438BD0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439940_exit
l0000000000439990:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439940_exit
fn0000000000439940_exit:


// fn00000000004399A0
// Return size: 8
define fn00000000004399A0
fn00000000004399A0_entry:
	rsp = fp
	// succ:  l00000000004399A0
l00000000004399A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp + 0x80<64>:word64]
	rsi = r8
	rcx = r9
	r9 = Mem0[rsp + 0x78<64>:word64]
	edx = CONVERT(dl, byte, int32)
	rax = CONVERT(Mem0[rbx:word32], word32, int64)
	Mem0[rsp + 0x20<64>:word64] = r8
	r8 = Mem0[rsp + 0x70<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn00000000004688D0 (retsize: 8;)
	Mem0[rbx:word32] = esi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004399A0_exit
fn00000000004399A0_exit:


// fn00000000004399E0
// Return size: 8
define fn00000000004399E0
fn00000000004399E0_entry:
	rsp = fp
	// succ:  l00000000004399E0
l00000000004399E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	ebp = Mem0[r9 + 0x18<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	r10 = Mem0[r8:word64]
	rsi = Mem0[r8 + 8<64>:word64]
	rdi = rcx
	r8 = rsp + 0x30<64>
	rcx = rsp + 0x40<64>
	rbx = r9
	eax = ebp
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x30<64>:word64] = r10
	eax = eax & 0xFFFFBFB5<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x38<64>:word64] = rsi
	sil = sil & 0<8>
	SZO = cond(sil)
	C = false
	eax = eax | 0x208<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[r9 + 0x18<64>:word32] = eax
	rax = Mem0[rsp + 0xA8<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rax
	eax = CONVERT(Mem0[rsp + 0xA0<64>:byte], byte, int32)
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn0000000000438BD0 (retsize: 8;)
	rax = Mem0[rsp + 0x40<64>:word64]
	Mem0[rbx + 0x18<64>:word32] = ebp
	rdx = rax
	eax = CONVERT(Mem0[rsp + 0x48<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdi:word64] = rdx
	rsi = rsi | rax
	SZO = cond(rsi)
	C = false
	rax = rdi
	Mem0[rdi + 8<64>:word64] = rsi
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004399E0_exit
fn00000000004399E0_exit:


// fn0000000000439A70
// Return size: 8
define fn0000000000439A70
fn0000000000439A70_entry:
	rsp = fp
	// succ:  l0000000000439A70
l0000000000439A70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	eax = Mem0[rbp + 0x70<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r15d = Mem0[r9 + 0x18<64>:word32]
	r15 = CONVERT(r15d, word32, uint64)
	r12 = Mem0[r8:word64]
	rbx = Mem0[r8 + 8<64>:word64]
	rdi = rcx
	rsi = r9
	Mem0[rbp - 0x30<64>:word32] = eax
	eax = Mem0[rbp + 0x78<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(r15b & 1<8>)
	C = false
	r14 = r12
	r13d = ebx
	r13 = CONVERT(r13d, word32, uint64)
	Mem0[rbp - 0x28<64>:word32] = eax
	branch Test(NE,Z) l0000000000439B00
	// succ:  l0000000000439AB4 l0000000000439B00
l0000000000439AB4:
	eax = CONVERT(Mem0[rbp - 0x28<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rcx = rbp - 0x10<64>
	r8 = rbp - 0x20<64>
	Mem0[rbp - 0x20<64>:word64] = r12
	Mem0[rbp - 0x18<64>:word64] = rbx
	Mem0[rsp + 0x28<64>:word32] = eax
	eax = CONVERT(Mem0[rbp - 0x30<64>:byte], byte, int32)
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn00000000004382A0 (retsize: 8;)
	r13d = CONVERT(Mem0[rbp - 8<64>:byte], byte, word32)
	r13 = CONVERT(r13d, word32, uint64)
	r14 = Mem0[rbp - 0x10<64>:word64]
	// succ:  l0000000000439AE2
l0000000000439AE2:
	bl = r13b
	Mem0[rdi:word64] = r14
	Mem0[rdi + 8<64>:word64] = rbx
	// succ:  l0000000000439AEC
l0000000000439AEC:
	rax = rdi
	rsp = rbp + 8<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439A70_exit
l0000000000439B00:
	rcx = 0x000000000048B580<p64>
	call fn000000000042BB80 (retsize: 8;)
	rcx = rax
	Mem0[rbp - 0x38<64>:word64] = rax
	rax = Mem0[rsi + 0xD0<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	rax = rax + rcx * 8<64>
	Mem0[rbp - 0x40<64>:word64] = rax
	rax = Mem0[rax:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000439CA2
	// succ:  l0000000000439B32 l0000000000439CA2
l0000000000439B32:
	SCZO = cond(Mem0[rbp - 0x28<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000439C10
	// succ:  l0000000000439B3C l0000000000439C10
l0000000000439B3C:
	r9 = CONVERT(Mem0[rax + 0x40<64>:word32], word32, int64)
	r10 = Mem0[rsi + 0x10<64>:word64]
	r11 = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(r10 - r9)
	branch Test(LE,SZO) l0000000000439C25
	// succ:  l0000000000439B51 l0000000000439C25
l0000000000439B51:
	r10 = r10 - r9
	SCZO = cond(r10)
	Mem0[rbp - 0x38<64>:word64] = r11
	Mem0[rbp - 0x28<64>:word64] = r9
	rax = r10 + 0x1E<64>
	r14 = r10
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	edx = CONVERT(Mem0[rbp - 0x30<64>:byte], byte, int32)
	rsp = rsp - rax
	SCZO = cond(rsp)
	r8 = r10
	r15d = r15d & 0xB0<32>
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	rax = rsp + 0x30<64>
	rcx = rax
	Mem0[rbp - 0x40<64>:word64] = rax
	rax = memset(rcx, rdx, r8)
	SCZO = cond(r15d - 0x20<32>)
	Mem0[rsi + 0x10<64>:word64] = 0<64>
	r9 = Mem0[rbp - 0x28<64>:word64]
	r11 = Mem0[rbp - 0x38<64>:word64]
	branch Test(EQ,Z) l0000000000439C60
	// succ:  l0000000000439BA8 l0000000000439C60
l0000000000439BA8:
	SZO = cond(r13b & r13b)
	C = false
	Mem0[rbp - 0x30<64>:word64] = r9
	Mem0[rbp - 0x28<64>:word64] = r11
	rsi = CONVERT(r14d, word32, int64)
	branch Test(NE,Z) l0000000000439BF9
	// succ:  l0000000000439BB8 l0000000000439BF9
l0000000000439BB8:
	rax = Mem0[r12:word64]
	r8 = rsi
	rdx = Mem0[rbp - 0x40<64>:word64]
	rcx = r12
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rsi - rax)
	r11 = Mem0[rbp - 0x28<64>:word64]
	r9 = Mem0[rbp - 0x30<64>:word64]
	branch Test(NE,Z) l0000000000439D33
	// succ:  l0000000000439BDA l0000000000439D33
l0000000000439BDA:
	rax = Mem0[r12:word64]
	r8 = r9
	Mem0[rbp - 0x28<64>:word64] = r9
	rdx = r11
	rcx = r12
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	r9 = Mem0[rbp - 0x28<64>:word64]
	SCZO = cond(r9 - rax)
	r13b = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l0000000000439BF9
l0000000000439BF9:
	bl = r13b
	Mem0[rdi:word64] = r12
	Mem0[rdi + 8<64>:word64] = rbx
	goto l0000000000439AEC
	// succ:  l0000000000439AEC
l0000000000439C10:
	r9 = CONVERT(Mem0[rax + 0x30<64>:word32], word32, int64)
	r10 = Mem0[rsi + 0x10<64>:word64]
	r11 = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(r10 - r9)
	branch Test(GT,SZO) l0000000000439B51
	// succ:  l0000000000439C25 l0000000000439B51
l0000000000439C25:
	SZO = cond(r13b & r13b)
	C = false
	Mem0[rsi + 0x10<64>:word64] = 0<64>
	branch Test(NE,Z) l0000000000439AE2
	// succ:  l0000000000439C36 l0000000000439AE2
l0000000000439C36:
	rax = Mem0[r12:word64]
	r8 = r9
	Mem0[rbp - 0x28<64>:word64] = r9
	rdx = r11
	rcx = r12
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	r9 = Mem0[rbp - 0x28<64>:word64]
	SCZO = cond(r9 - rax)
	r13b = CONVERT(Test(NE,Z), bool, int8)
	goto l0000000000439AE2
	// succ:  l0000000000439AE2
l0000000000439C60:
	SZO = cond(r13b & r13b)
	C = false
	branch Test(NE,Z) l0000000000439BF9
	// succ:  l0000000000439C65 l0000000000439BF9
l0000000000439C65:
	rax = Mem0[r12:word64]
	r8 = r9
	rdx = r11
	rcx = r12
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	r9 = Mem0[rbp - 0x28<64>:word64]
	SCZO = cond(r9 - rax)
	branch Test(NE,Z) l0000000000439D33
	// succ:  l0000000000439C82 l0000000000439D33
l0000000000439C82:
	rax = Mem0[r12:word64]
	rsi = CONVERT(r14d, word32, int64)
	rdx = Mem0[rbp - 0x40<64>:word64]
	r8 = rsi
	rcx = r12
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rsi - rax)
	r13b = CONVERT(Test(NE,Z), bool, int8)
	goto l0000000000439BF9
	// succ:  l0000000000439BF9
l0000000000439CA2:
	ecx = 0x90<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rdx = 0x0000000000497350<p64>
	Mem0[rax + 8<64>:word32] = 0<32>
	Mem0[rax + 0x10<64>:word64] = 0<64>
	Mem0[rax + 0x18<64>:word64] = 0<64>
	Mem0[rax + 0x20<64>:byte] = 0<8>
	rcx = rax
	Mem0[rax:word64] = rdx
	rdx = rsi + 0xD0<64>
	Mem0[rax + 0x28<64>:word64] = 0<64>
	Mem0[rax + 0x30<64>:word64] = 0<64>
	Mem0[rax + 0x38<64>:word64] = 0<64>
	Mem0[rax + 0x40<64>:word64] = 0<64>
	Mem0[rax + 0x48<64>:byte] = 0<8>
	Mem0[rax + 0x49<64>:byte] = 0<8>
	Mem0[rax + 0x88<64>:byte] = 0<8>
	Mem0[rbp - 0x48<64>:word64] = rax
	call fn0000000000463E50 (retsize: 8;)
	rcx = Mem0[rsi + 0xD0<64>:word64]
	r8 = Mem0[rbp - 0x38<64>:word64]
	rdx = Mem0[rbp - 0x48<64>:word64]
	call fn0000000000469430 (retsize: 8;)
	rax = Mem0[rbp - 0x40<64>:word64]
	rax = Mem0[rax:word64]
	goto l0000000000439B32
	// succ:  l0000000000439B32
l0000000000439D33:
	r13d = 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	goto l0000000000439BF9
	// succ:  l0000000000439BF9
fn0000000000439A70_exit:


// fn0000000000439D70
// Return size: 8
define fn0000000000439D70
fn0000000000439D70_entry:
	rsp = fp
	// succ:  l0000000000439D70
l0000000000439D70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x50<64>
	SCZO = cond(rsp)
	eax = CONVERT(Mem0[rsp + 0x80<64>:byte], byte, int32)
	xmm0 = SEQ(0<64>, Mem0[rsp + 0x88<64>:real64])
	rbx = rcx
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x40<64>
	Mem0[rsp + 0x28<64>:word32] = 0<32>
	Mem0[rsp + 0x30<64>:real64] = SLICE(xmm0, real64, 0)
	Mem0[rsp + 0x20<64>:word32] = eax
	Mem0[rsp + 0x40<64>:word128] = xmm1
	call fn0000000000438F60 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x50<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439D70_exit
fn0000000000439D70_exit:


// fn0000000000439DC0
// Return size: 8
define fn0000000000439DC0
fn0000000000439DC0_entry:
	rsp = fp
	// succ:  l0000000000439DC0
l0000000000439DC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0x98<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	rbx = rcx
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rax:real80], real80, real64)
	rax = rsp + 0x40<64>
	Mem0[rsp + 0x28<64>:word32] = 0x4C<32>
	Mem0[rsp + 0x30<64>:word64] = rax
	eax = CONVERT(Mem0[rsp + 0x90<64>:byte], byte, int32)
	Mem0[rsp + 0x20<64>:word32] = eax
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x40<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call fn00000000004392F0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439DC0_exit
fn0000000000439DC0_exit:


// fn0000000000439E20
// Return size: 8
define fn0000000000439E20
fn0000000000439E20_entry:
	rsp = fp
	// succ:  l0000000000439E20
l0000000000439E20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	eax = Mem0[rsp + 0x78<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x30<64>
	rbx = rcx
	Mem0[rsp + 0x28<64>:word32] = eax
	eax = CONVERT(Mem0[rsp + 0x70<64>:byte], byte, int32)
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn00000000004382A0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439E20_exit
fn0000000000439E20_exit:


// fn0000000000439E60
// Return size: 8
define fn0000000000439E60
fn0000000000439E60_entry:
	rsp = fp
	// succ:  l0000000000439E60
l0000000000439E60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	eax = Mem0[rsp + 0x78<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x30<64>
	rbx = rcx
	Mem0[rsp + 0x28<64>:word32] = eax
	eax = CONVERT(Mem0[rsp + 0x70<64>:byte], byte, int32)
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn00000000004385D0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439E60_exit
fn0000000000439E60_exit:


// fn0000000000439EA0
// Return size: 8
define fn0000000000439EA0
fn0000000000439EA0_entry:
	rsp = fp
	// succ:  l0000000000439EA0
l0000000000439EA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0x78<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x30<64>
	rbx = rcx
	Mem0[rsp + 0x28<64>:word64] = rax
	eax = CONVERT(Mem0[rsp + 0x70<64>:byte], byte, int32)
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn00000000004388A0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439EA0_exit
fn0000000000439EA0_exit:


// fn0000000000439EE0
// Return size: 8
define fn0000000000439EE0
fn0000000000439EE0_entry:
	rsp = fp
	// succ:  l0000000000439EE0
l0000000000439EE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0x78<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x30<64>
	rbx = rcx
	Mem0[rsp + 0x28<64>:word64] = rax
	eax = CONVERT(Mem0[rsp + 0x70<64>:byte], byte, int32)
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn0000000000438BD0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439EE0_exit
fn0000000000439EE0_exit:


// fn0000000000439F20
// Return size: 8
define fn0000000000439F20
fn0000000000439F20_entry:
	rsp = fp
	// succ:  l0000000000439F20
l0000000000439F20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp + 0x88<64>:word64]
	rax = Mem0[rsp + 0x80<64>:word64]
	rcx = rdx
	edx = CONVERT(r9w, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	rsi = Mem0[rsp + 0x78<64>:word64]
	r9 = CONVERT(Mem0[rbx:word32], word32, int64)
	Mem0[rsp + 0x20<64>:word64] = rax
	r9 = rax + r9 * 2<64>
	Mem0[rsp + 0x28<64>:word64] = r9
	r9 = r8
	r8 = rcx
	rcx = rsi
	call fn000000000046F950 (retsize: 8;)
	rax = rax - rsi
	SCZO = cond(rax)
	rax = rax >> 1<64>
	SCZO = cond(rax)
	Mem0[rbx:word32] = eax
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439F20_exit
fn0000000000439F20_exit:


// fn0000000000439F70
// Return size: 8
define fn0000000000439F70
fn0000000000439F70_entry:
	rsp = fp
	// succ:  l0000000000439F70
l0000000000439F70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	eax = Mem0[rbp + 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdi = Mem0[r8:word64]
	rsi = rcx
	rcx = 0x000000000048B590<p64>
	rbx = r9
	r12 = Mem0[r8 + 8<64>:word64]
	Mem0[rbp - 0x3C<64>:word32] = eax
	call fn000000000042BB80 (retsize: 8;)
	r14 = rax
	rax = Mem0[rbx + 0xD0<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	r13 = rax + r14 * 8<64>
	r15 = Mem0[r13 + 0<64>:word64]
	SZO = cond(r15 & r15)
	C = false
	branch Test(EQ,Z) l000000000043A1D5
	// succ:  l0000000000439FC6 l000000000043A1D5
l0000000000439FC6:
	r14d = Mem0[rbx + 0x18<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	rax = r15 + 0x4C<64>
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	ecx = Mem0[rbp + 0x48<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	edx = Mem0[rbp + 0x48<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r10 = rsp + 0x30<64>
	r8 = rax
	Mem0[rbp - 0x48<64>:word64] = rax
	eax = r14d
	rax = CONVERT(eax, word32, uint64)
	r9d = r14d
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rbp - 0x38<64>:word64] = r10
	eax = eax & 0x4A<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 8<32>)
	Mem0[rbp - 0x40<64>:word32] = eax
	r13b = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(eax - 0x40<32>)
	al = CONVERT(Test(NE,Z), bool, int8)
	r13d = r13d & eax
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	SZO = cond(ecx & ecx)
	C = false
	rcx = rsp + 0x58<64>
	al = CONVERT(Test(GT,SZO), bool, int8)
	edx = -edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	C = edx == 0<32>
	SCZO = cond(r13b - al)
	branch Test(UGT,CZ) l000000000043A017
	// succ:  l000000000043A013_1 l000000000043A017
l000000000043A013_1:
	edx = Mem0[rbp + 0x48<64>:word32]
	// succ:  l000000000043A017
l000000000043A017:
	eax = CONVERT(r13b, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn000000000046F5D0 (retsize: 8;)
	rcx = CONVERT(eax, word32, int64)
	eax = 0x14<32>
	rax = CONVERT(eax, word32, uint64)
	r10 = Mem0[rbp - 0x38<64>:word64]
	eax = eax - ecx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(Mem0[r15 + 0x20<64>:byte] - 0<8>)
	rax = CONVERT(eax, int32, int64)
	r9 = r10 + rax * 2<64>
	branch Test(NE,Z) l000000000043A105
	// succ:  l000000000043A043 l000000000043A105
l000000000043A043:
	SZO = cond(r13b & r13b)
	C = false
	branch Test(EQ,Z) l000000000043A166
	// succ:  l000000000043A04C l000000000043A166
l000000000043A04C:
	edx = Mem0[rbp + 0x48<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(SG,S) l000000000043A1C0
	// succ:  l000000000043A057 l000000000043A1C0
l000000000043A057:
	r14d = r14d & 0x800<32>
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	branch Test(NE,Z) l000000000043A0F0
	// succ:  l000000000043A064 l000000000043A0F0
l000000000043A064:
	r14 = Mem0[rbx + 0x10<64>:word64]
	r13 = CONVERT(ecx, word32, int64)
	SCZO = cond(r14 - r13)
	branch Test(LE,SZO) l000000000043A0A5
	// succ:  l000000000043A070 l000000000043A0A5
l000000000043A070:
	rax = r14 + 0x1E<64> + r14
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	edx = CONVERT(Mem0[rbp - 0x3C<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	rsp = rsp - rax
	SCZO = cond(rsp)
	rcx = rbx
	r15 = rsp + 0x30<64>
	Mem0[rsp + 0x28<64>:word64] = r13
	Mem0[rsp + 0x20<64>:word64] = r14
	r13 = CONVERT(r14d, word32, int64)
	r8 = r15
	call fn0000000000468AD0 (retsize: 8;)
	r9 = r15
	// succ:  l000000000043A0A5
l000000000043A0A5:
	SZO = cond(r12b & r12b)
	C = false
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	ebx = r12d
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l000000000043A0CF
	// succ:  l000000000043A0B5 l000000000043A0CF
l000000000043A0B5:
	rax = Mem0[rdi:word64]
	r8 = r13
	rdx = r9
	rcx = rdi
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rax - r13)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l000000000043A0CF
	// succ:  l000000000043A0CC_1 l000000000043A0CF
l000000000043A0CC_1:
	ebx = eax
	// succ:  l000000000043A0CF
l000000000043A0CF:
	rax = rsi
	Mem0[rsi:word64] = rdi
	Mem0[rsi + 8<64>:byte] = bl
	rsp = rbp - 0x28<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000439F70_exit
l000000000043A0F0:
	eax = CONVERT(Mem0[r15 + 0x4E<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 2<64>
	SCZO = cond(r9)
	Mem0[r9:word16] = ax
	goto l000000000043A064
	// succ:  l000000000043A064
l000000000043A105:
	eax = SLICE(rcx + 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rax = CONVERT(0x1E<32> + rax * 4<64>, word32, word64)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	r11 = Mem0[r15 + 0x18<64>:word64]
	edx = CONVERT(Mem0[r15 + 0x4A<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	rsp = rsp - rax
	SCZO = cond(rsp)
	r8 = Mem0[r15 + 0x10<64>:word64]
	rax = r9 + rcx * 2<64>
	r10 = rsp + 0x34<64>
	Mem0[rsp + 0x20<64>:word64] = r9
	Mem0[rsp + 0x28<64>:word64] = rax
	r9 = r11
	rcx = r10
	Mem0[rbp - 0x38<64>:word64] = r10
	call fn000000000046F950 (retsize: 8;)
	r10 = Mem0[rbp - 0x38<64>:word64]
	rax = rax - r10
	SCZO = cond(rax)
	r9 = r10
	rcx = rax
	rcx = rcx >>u 1<64>
	SCZO = cond(rcx)
	SZO = cond(r13b & r13b)
	C = false
	branch Test(NE,Z) l000000000043A04C
	// succ:  l000000000043A166 l000000000043A04C
l000000000043A166:
	SZO = cond(r14d & 0x200<32>)
	C = false
	branch Test(EQ,Z) l000000000043A064
	// succ:  l000000000043A173 l000000000043A064
l000000000043A173:
	eax = Mem0[rbp + 0x48<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000043A064
	// succ:  l000000000043A17E l000000000043A064
l000000000043A17E:
	SCZO = cond(Mem0[rbp - 0x40<64>:word32] - 0x40<32>)
	branch Test(EQ,Z) l000000000043A26A
	// succ:  l000000000043A188 l000000000043A26A
l000000000043A188:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rdx = Mem0[rbp - 0x48<64>:word64]
	r14d = r14d & 0x4000<32>
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	ecx = ecx + 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 4<64>
	SCZO = cond(r9)
	rax = rax + 2<64>
	SCZO = cond(rax)
	eax = CONVERT(Mem0[rdx + rax * 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9 + 2<64>:word16] = ax
	eax = CONVERT(Mem0[r15 + 0x54<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9:word16] = ax
	goto l000000000043A064
	// succ:  l000000000043A064
l000000000043A1C0:
	eax = CONVERT(Mem0[r15 + 0x4C<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 2<64>
	SCZO = cond(r9)
	Mem0[r9:word16] = ax
	goto l000000000043A064
	// succ:  l000000000043A064
l000000000043A1D5:
	ecx = 0xD0<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	r15 = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = 0x0000000000497370<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rdx = rbx + 0xD0<64>
	Mem0[r15:word64] = rax
	Mem0[r15 + 0x10<64>:word64] = 0<64>
	rcx = r15
	Mem0[r15 + 0x18<64>:word64] = 0<64>
	Mem0[r15 + 0x20<64>:byte] = 0<8>
	Mem0[r15 + 0x28<64>:word64] = 0<64>
	Mem0[r15 + 0x30<64>:word64] = 0<64>
	Mem0[r15 + 0x38<64>:word64] = 0<64>
	Mem0[r15 + 0x40<64>:word64] = 0<64>
	Mem0[r15 + 0x48<64>:word16] = r8w
	Mem0[r15 + 0x4A<64>:word16] = r9w
	Mem0[r15 + 0xC8<64>:byte] = 0<8>
	call fn00000000004645D0 (retsize: 8;)
	rcx = Mem0[rbx + 0xD0<64>:word64]
	rdx = r15
	r8 = r14
	call fn0000000000469430 (retsize: 8;)
	r15 = Mem0[r13 + 0<64>:word64]
	goto l0000000000439FC6
	// succ:  l0000000000439FC6
l000000000043A26A:
	eax = CONVERT(Mem0[r15 + 0x54<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 2<64>
	SCZO = cond(r9)
	Mem0[r9:word16] = ax
	goto l000000000043A064
	// succ:  l000000000043A064
fn0000000000439F70_exit:


// fn000000000043A2B0
// Return size: 8
define fn000000000043A2B0
fn000000000043A2B0_entry:
	rsp = fp
	// succ:  l000000000043A2B0
l000000000043A2B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	eax = Mem0[rbp + 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r13 = Mem0[r8:word64]
	r12 = rcx
	rcx = 0x000000000048B590<p64>
	rbx = r9
	r15 = Mem0[r8 + 8<64>:word64]
	Mem0[rbp - 0x3C<64>:word32] = eax
	call fn000000000042BB80 (retsize: 8;)
	r14 = rax
	rax = Mem0[rbx + 0xD0<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	rdi = rax + r14 * 8<64>
	rsi = Mem0[rdi:word64]
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000043A4B5
	// succ:  l000000000043A305 l000000000043A4B5
l000000000043A305:
	r14d = Mem0[rbx + 0x18<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	rax = rsi + 0x4C<64>
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	edx = Mem0[rbp + 0x48<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r11 = rsp + 0x30<64>
	rcx = rsp + 0x58<64>
	r8 = rax
	Mem0[rbp - 0x48<64>:word64] = rax
	eax = r14d
	rax = CONVERT(eax, word32, uint64)
	r9d = r14d
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rbp - 0x38<64>:word64] = r11
	eax = eax & 0x4A<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 8<32>)
	Mem0[rbp - 0x40<64>:word32] = eax
	dil = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(eax - 0x40<32>)
	al = CONVERT(Test(NE,Z), bool, int8)
	edi = edi & eax
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	eax = CONVERT(dil, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn000000000046F5D0 (retsize: 8;)
	edx = 0x14<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = CONVERT(eax, word32, int64)
	r11 = Mem0[rbp - 0x38<64>:word64]
	edx = edx - ecx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(Mem0[rsi + 0x20<64>:byte] - 0<8>)
	rdx = CONVERT(edx, word32, int64)
	r9 = r11 + rdx * 2<64>
	branch Test(NE,Z) l000000000043A402
	// succ:  l000000000043A370 l000000000043A402
l000000000043A370:
	SZO = cond(dil & dil)
	C = false
	branch Test(EQ,Z) l000000000043A462
	// succ:  l000000000043A379 l000000000043A462
l000000000043A379:
	rdi = Mem0[rbx + 0x10<64>:word64]
	rsi = CONVERT(ecx, word32, int64)
	SCZO = cond(rdi - rsi)
	branch Test(LE,SZO) l000000000043A3BA
	// succ:  l000000000043A385 l000000000043A3BA
l000000000043A385:
	rax = rdi + 0x1E<64> + rdi
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	edx = CONVERT(Mem0[rbp - 0x3C<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	rsp = rsp - rax
	SCZO = cond(rsp)
	rcx = rbx
	r14 = rsp + 0x30<64>
	Mem0[rsp + 0x28<64>:word64] = rsi
	Mem0[rsp + 0x20<64>:word64] = rdi
	rsi = CONVERT(edi, word32, int64)
	r8 = r14
	call fn0000000000468AD0 (retsize: 8;)
	r9 = r14
	// succ:  l000000000043A3BA
l000000000043A3BA:
	SZO = cond(r15b & r15b)
	C = false
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	ebx = r15d
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l000000000043A3E5
	// succ:  l000000000043A3CA l000000000043A3E5
l000000000043A3CA:
	rax = Mem0[r13 + 0<64>:word64]
	r8 = rsi
	rdx = r9
	rcx = r13
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rsi - rax)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l000000000043A3E5
	// succ:  l000000000043A3E2_1 l000000000043A3E5
l000000000043A3E2_1:
	ebx = eax
	// succ:  l000000000043A3E5
l000000000043A3E5:
	rax = r12
	Mem0[r12:word64] = r13
	Mem0[r12 + 8<64>:byte] = bl
	rsp = rbp - 0x28<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043A2B0_exit
l000000000043A402:
	eax = SLICE(rcx + 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rax = CONVERT(0x1E<32> + rax * 4<64>, word32, word64)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	edx = CONVERT(Mem0[rsi + 0x4A<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8 = Mem0[rsi + 0x10<64>:word64]
	rsp = rsp - rax
	SCZO = cond(rsp)
	rax = Mem0[rsi + 0x18<64>:word64]
	rcx = r9 + rcx * 2<64>
	r11 = rsp + 0x34<64>
	Mem0[rsp + 0x20<64>:word64] = r9
	Mem0[rsp + 0x28<64>:word64] = rcx
	r9 = rax
	rcx = r11
	Mem0[rbp - 0x38<64>:word64] = r11
	call fn000000000046F950 (retsize: 8;)
	r11 = Mem0[rbp - 0x38<64>:word64]
	rax = rax - r11
	SCZO = cond(rax)
	r9 = r11
	rcx = rax
	rcx = rcx >>u 1<64>
	SCZO = cond(rcx)
	SZO = cond(dil & dil)
	C = false
	branch Test(NE,Z) l000000000043A379
	// succ:  l000000000043A462 l000000000043A379
l000000000043A462:
	eax = Mem0[rbp + 0x48<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000043A379
	// succ:  l000000000043A46D l000000000043A379
l000000000043A46D:
	SZO = cond(r14d & 0x200<32>)
	C = false
	branch Test(EQ,Z) l000000000043A379
	// succ:  l000000000043A47A l000000000043A379
l000000000043A47A:
	SCZO = cond(Mem0[rbp - 0x40<64>:word32] - 0x40<32>)
	branch Test(EQ,Z) l000000000043A543
	// succ:  l000000000043A484 l000000000043A543
l000000000043A484:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rdi = Mem0[rbp - 0x48<64>:word64]
	r14d = r14d & 0x4000<32>
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	ecx = ecx + 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 4<64>
	SCZO = cond(r9)
	rax = rax + 2<64>
	SCZO = cond(rax)
	eax = CONVERT(Mem0[rdi + rax * 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9 + 2<64>:word16] = ax
	eax = CONVERT(Mem0[rsi + 0x54<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9:word16] = ax
	goto l000000000043A379
	// succ:  l000000000043A379
l000000000043A4B5:
	ecx = 0xD0<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rsi = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rax = 0x0000000000497370<p64>
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	Mem0[rsi + 0x48<64>:word16] = dx
	rdx = rbx + 0xD0<64>
	Mem0[rsi + 0x4A<64>:word16] = cx
	Mem0[rsi + 0x10<64>:word64] = 0<64>
	Mem0[rsi:word64] = rax
	Mem0[rsi + 0x18<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rsi + 0x20<64>:byte] = 0<8>
	Mem0[rsi + 0x28<64>:word64] = 0<64>
	Mem0[rsi + 0x30<64>:word64] = 0<64>
	Mem0[rsi + 0x38<64>:word64] = 0<64>
	Mem0[rsi + 0x40<64>:word64] = 0<64>
	Mem0[rsi + 0xC8<64>:byte] = 0<8>
	call fn00000000004645D0 (retsize: 8;)
	rcx = Mem0[rbx + 0xD0<64>:word64]
	rdx = rsi
	r8 = r14
	call fn0000000000469430 (retsize: 8;)
	rsi = Mem0[rdi:word64]
	goto l000000000043A305
	// succ:  l000000000043A305
l000000000043A543:
	eax = CONVERT(Mem0[rsi + 0x54<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 2<64>
	SCZO = cond(r9)
	Mem0[r9:word16] = ax
	goto l000000000043A379
	// succ:  l000000000043A379
fn000000000043A2B0_exit:


// fn000000000043A590
// Return size: 8
define fn000000000043A590
fn000000000043A590_entry:
	rsp = fp
	// succ:  l000000000043A590
l000000000043A590:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	eax = Mem0[rbp + 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdi = Mem0[r8:word64]
	rsi = rcx
	rcx = 0x000000000048B590<p64>
	rbx = r9
	r12 = Mem0[r8 + 8<64>:word64]
	Mem0[rbp - 0x3C<64>:word32] = eax
	call fn000000000042BB80 (retsize: 8;)
	r14 = rax
	rax = Mem0[rbx + 0xD0<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	r13 = rax + r14 * 8<64>
	r15 = Mem0[r13 + 0<64>:word64]
	SZO = cond(r15 & r15)
	C = false
	branch Test(EQ,Z) l000000000043A7F5
	// succ:  l000000000043A5E6 l000000000043A7F5
l000000000043A5E6:
	r14d = Mem0[rbx + 0x18<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	rax = r15 + 0x4C<64>
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rdx = Mem0[rbp + 0x48<64>:word64]
	r10 = rsp + 0x30<64>
	rcx = rsp + 0x80<64>
	r8 = rax
	Mem0[rbp - 0x48<64>:word64] = rax
	eax = r14d
	rax = CONVERT(eax, word32, uint64)
	r9d = r14d
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rbp - 0x38<64>:word64] = r10
	eax = eax & 0x4A<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 8<32>)
	Mem0[rbp - 0x40<64>:word32] = eax
	r13b = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(eax - 0x40<32>)
	al = CONVERT(Test(NE,Z), bool, int8)
	r13d = r13d & eax
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	SCZO = cond(Mem0[rbp + 0x48<64>:word64] - 0<64>)
	al = CONVERT(Test(GT,SZO), bool, int8)
	rdx = -rdx
	SCZO = cond(rdx)
	C = rdx == 0<64>
	SCZO = cond(r13b - al)
	branch Test(UGT,CZ) l000000000043A63D
	// succ:  l000000000043A638_1 l000000000043A63D
l000000000043A638_1:
	rdx = Mem0[rbp + 0x48<64>:word64]
	// succ:  l000000000043A63D
l000000000043A63D:
	eax = CONVERT(r13b, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn000000000046F690 (retsize: 8;)
	rcx = CONVERT(eax, word32, int64)
	eax = 0x28<32>
	rax = CONVERT(eax, word32, uint64)
	r10 = Mem0[rbp - 0x38<64>:word64]
	eax = eax - ecx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(Mem0[r15 + 0x20<64>:byte] - 0<8>)
	rax = CONVERT(eax, int32, int64)
	r9 = r10 + rax * 2<64>
	branch Test(NE,Z) l000000000043A725
	// succ:  l000000000043A669 l000000000043A725
l000000000043A669:
	SZO = cond(r13b & r13b)
	C = false
	branch Test(EQ,Z) l000000000043A786
	// succ:  l000000000043A672 l000000000043A786
l000000000043A672:
	SCZO = cond(Mem0[rbp + 0x48<64>:word64] - 0<64>)
	branch Test(SG,S) l000000000043A7E0
	// succ:  l000000000043A67D l000000000043A7E0
l000000000043A67D:
	r14d = r14d & 0x800<32>
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	branch Test(NE,Z) l000000000043A710
	// succ:  l000000000043A68A l000000000043A710
l000000000043A68A:
	r14 = Mem0[rbx + 0x10<64>:word64]
	r13 = CONVERT(ecx, word32, int64)
	SCZO = cond(r14 - r13)
	branch Test(LE,SZO) l000000000043A6CB
	// succ:  l000000000043A696 l000000000043A6CB
l000000000043A696:
	rax = r14 + 0x1E<64> + r14
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	edx = CONVERT(Mem0[rbp - 0x3C<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	rsp = rsp - rax
	SCZO = cond(rsp)
	rcx = rbx
	r15 = rsp + 0x30<64>
	Mem0[rsp + 0x28<64>:word64] = r13
	Mem0[rsp + 0x20<64>:word64] = r14
	r13 = CONVERT(r14d, word32, int64)
	r8 = r15
	call fn0000000000468AD0 (retsize: 8;)
	r9 = r15
	// succ:  l000000000043A6CB
l000000000043A6CB:
	SZO = cond(r12b & r12b)
	C = false
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	ebx = r12d
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l000000000043A6F5
	// succ:  l000000000043A6DB l000000000043A6F5
l000000000043A6DB:
	rax = Mem0[rdi:word64]
	r8 = r13
	rdx = r9
	rcx = rdi
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rax - r13)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l000000000043A6F5
	// succ:  l000000000043A6F2_1 l000000000043A6F5
l000000000043A6F2_1:
	ebx = eax
	// succ:  l000000000043A6F5
l000000000043A6F5:
	rax = rsi
	Mem0[rsi:word64] = rdi
	Mem0[rsi + 8<64>:byte] = bl
	rsp = rbp - 0x28<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043A590_exit
l000000000043A710:
	eax = CONVERT(Mem0[r15 + 0x4E<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 2<64>
	SCZO = cond(r9)
	Mem0[r9:word16] = ax
	goto l000000000043A68A
	// succ:  l000000000043A68A
l000000000043A725:
	eax = SLICE(rcx + 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rax = CONVERT(0x1E<32> + rax * 4<64>, word32, word64)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	r11 = Mem0[r15 + 0x18<64>:word64]
	edx = CONVERT(Mem0[r15 + 0x4A<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	rsp = rsp - rax
	SCZO = cond(rsp)
	r8 = Mem0[r15 + 0x10<64>:word64]
	rax = r9 + rcx * 2<64>
	r10 = rsp + 0x34<64>
	Mem0[rsp + 0x20<64>:word64] = r9
	Mem0[rsp + 0x28<64>:word64] = rax
	r9 = r11
	rcx = r10
	Mem0[rbp - 0x38<64>:word64] = r10
	call fn000000000046F950 (retsize: 8;)
	r10 = Mem0[rbp - 0x38<64>:word64]
	rax = rax - r10
	SCZO = cond(rax)
	r9 = r10
	rcx = rax
	rcx = rcx >>u 1<64>
	SCZO = cond(rcx)
	SZO = cond(r13b & r13b)
	C = false
	branch Test(NE,Z) l000000000043A672
	// succ:  l000000000043A786 l000000000043A672
l000000000043A786:
	SZO = cond(r14d & 0x200<32>)
	C = false
	branch Test(EQ,Z) l000000000043A68A
	// succ:  l000000000043A793 l000000000043A68A
l000000000043A793:
	SCZO = cond(Mem0[rbp + 0x48<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000043A68A
	// succ:  l000000000043A79E l000000000043A68A
l000000000043A79E:
	SCZO = cond(Mem0[rbp - 0x40<64>:word32] - 0x40<32>)
	branch Test(EQ,Z) l000000000043A888
	// succ:  l000000000043A7A8 l000000000043A888
l000000000043A7A8:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rdx = Mem0[rbp - 0x48<64>:word64]
	r14d = r14d & 0x4000<32>
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	ecx = ecx + 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 4<64>
	SCZO = cond(r9)
	rax = rax + 2<64>
	SCZO = cond(rax)
	eax = CONVERT(Mem0[rdx + rax * 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9 + 2<64>:word16] = ax
	eax = CONVERT(Mem0[r15 + 0x54<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9:word16] = ax
	goto l000000000043A68A
	// succ:  l000000000043A68A
l000000000043A7E0:
	eax = CONVERT(Mem0[r15 + 0x4C<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 2<64>
	SCZO = cond(r9)
	Mem0[r9:word16] = ax
	goto l000000000043A68A
	// succ:  l000000000043A68A
l000000000043A7F5:
	ecx = 0xD0<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	r15 = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = 0x0000000000497370<p64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[r15 + 0x10<64>:word64] = 0<64>
	Mem0[r15 + 0x18<64>:word64] = 0<64>
	Mem0[r15:word64] = rax
	Mem0[r15 + 0x4A<64>:word16] = dx
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rdx = rbx + 0xD0<64>
	Mem0[r15 + 0x20<64>:byte] = 0<8>
	Mem0[r15 + 0x28<64>:word64] = 0<64>
	Mem0[r15 + 0x30<64>:word64] = 0<64>
	Mem0[r15 + 0x38<64>:word64] = 0<64>
	rcx = r15
	Mem0[r15 + 0x40<64>:word64] = 0<64>
	Mem0[r15 + 0x48<64>:word16] = ax
	Mem0[r15 + 0xC8<64>:byte] = 0<8>
	call fn00000000004645D0 (retsize: 8;)
	rcx = Mem0[rbx + 0xD0<64>:word64]
	rdx = r15
	r8 = r14
	call fn0000000000469430 (retsize: 8;)
	r15 = Mem0[r13 + 0<64>:word64]
	goto l000000000043A5E6
	// succ:  l000000000043A5E6
l000000000043A888:
	eax = CONVERT(Mem0[r15 + 0x54<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 2<64>
	SCZO = cond(r9)
	Mem0[r9:word16] = ax
	goto l000000000043A68A
	// succ:  l000000000043A68A
fn000000000043A590_exit:


// fn000000000043A8D0
// Return size: 8
define fn000000000043A8D0
fn000000000043A8D0_entry:
	rsp = fp
	// succ:  l000000000043A8D0
l000000000043A8D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	eax = Mem0[rbp + 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r13 = Mem0[r8:word64]
	r12 = rcx
	rcx = 0x000000000048B590<p64>
	rbx = r9
	r15 = Mem0[r8 + 8<64>:word64]
	Mem0[rbp - 0x3C<64>:word32] = eax
	call fn000000000042BB80 (retsize: 8;)
	r14 = rax
	rax = Mem0[rbx + 0xD0<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	rdi = rax + r14 * 8<64>
	rsi = Mem0[rdi:word64]
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000043AAE3
	// succ:  l000000000043A925 l000000000043AAE3
l000000000043A925:
	r14d = Mem0[rbx + 0x18<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	rax = rsi + 0x4C<64>
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rdx = Mem0[rbp + 0x48<64>:word64]
	r11 = rsp + 0x30<64>
	rcx = rsp + 0x80<64>
	r8 = rax
	Mem0[rbp - 0x48<64>:word64] = rax
	eax = r14d
	rax = CONVERT(eax, word32, uint64)
	r9d = r14d
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rbp - 0x38<64>:word64] = r11
	eax = eax & 0x4A<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 8<32>)
	Mem0[rbp - 0x40<64>:word32] = eax
	dil = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(eax - 0x40<32>)
	al = CONVERT(Test(NE,Z), bool, int8)
	edi = edi & eax
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	eax = CONVERT(dil, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn000000000046F690 (retsize: 8;)
	edx = 0x28<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = CONVERT(eax, word32, int64)
	r11 = Mem0[rbp - 0x38<64>:word64]
	edx = edx - ecx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(Mem0[rsi + 0x20<64>:byte] - 0<8>)
	rdx = CONVERT(edx, word32, int64)
	r9 = r11 + rdx * 2<64>
	branch Test(NE,Z) l000000000043AA30
	// succ:  l000000000043A994 l000000000043AA30
l000000000043A994:
	SZO = cond(dil & dil)
	C = false
	branch Test(EQ,Z) l000000000043AA90
	// succ:  l000000000043A99D l000000000043AA90
l000000000043A99D:
	rdi = Mem0[rbx + 0x10<64>:word64]
	rsi = CONVERT(ecx, word32, int64)
	SCZO = cond(rdi - rsi)
	branch Test(LE,SZO) l000000000043A9DE
	// succ:  l000000000043A9A9 l000000000043A9DE
l000000000043A9A9:
	rax = rdi + 0x1E<64> + rdi
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	edx = CONVERT(Mem0[rbp - 0x3C<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	rsp = rsp - rax
	SCZO = cond(rsp)
	rcx = rbx
	r14 = rsp + 0x30<64>
	Mem0[rsp + 0x28<64>:word64] = rsi
	Mem0[rsp + 0x20<64>:word64] = rdi
	rsi = CONVERT(edi, word32, int64)
	r8 = r14
	call fn0000000000468AD0 (retsize: 8;)
	r9 = r14
	// succ:  l000000000043A9DE
l000000000043A9DE:
	SZO = cond(r15b & r15b)
	C = false
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	ebx = r15d
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l000000000043AA09
	// succ:  l000000000043A9EE l000000000043AA09
l000000000043A9EE:
	rax = Mem0[r13 + 0<64>:word64]
	r8 = rsi
	rdx = r9
	rcx = r13
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(rsi - rax)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l000000000043AA09
	// succ:  l000000000043AA06_1 l000000000043AA09
l000000000043AA06_1:
	ebx = eax
	// succ:  l000000000043AA09
l000000000043AA09:
	rax = r12
	Mem0[r12:word64] = r13
	Mem0[r12 + 8<64>:byte] = bl
	rsp = rbp - 0x28<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043A8D0_exit
l000000000043AA30:
	eax = SLICE(rcx + 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rax = CONVERT(0x1E<32> + rax * 4<64>, word32, word64)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	edx = CONVERT(Mem0[rsi + 0x4A<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8 = Mem0[rsi + 0x10<64>:word64]
	rsp = rsp - rax
	SCZO = cond(rsp)
	rax = Mem0[rsi + 0x18<64>:word64]
	rcx = r9 + rcx * 2<64>
	r11 = rsp + 0x34<64>
	Mem0[rsp + 0x20<64>:word64] = r9
	Mem0[rsp + 0x28<64>:word64] = rcx
	r9 = rax
	rcx = r11
	Mem0[rbp - 0x38<64>:word64] = r11
	call fn000000000046F950 (retsize: 8;)
	r11 = Mem0[rbp - 0x38<64>:word64]
	rax = rax - r11
	SCZO = cond(rax)
	r9 = r11
	rcx = rax
	rcx = rcx >>u 1<64>
	SCZO = cond(rcx)
	SZO = cond(dil & dil)
	C = false
	branch Test(NE,Z) l000000000043A99D
	// succ:  l000000000043AA90 l000000000043A99D
l000000000043AA90:
	SCZO = cond(Mem0[rbp + 0x48<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000043A99D
	// succ:  l000000000043AA9B l000000000043A99D
l000000000043AA9B:
	SZO = cond(r14d & 0x200<32>)
	C = false
	branch Test(EQ,Z) l000000000043A99D
	// succ:  l000000000043AAA8 l000000000043A99D
l000000000043AAA8:
	SCZO = cond(Mem0[rbp - 0x40<64>:word32] - 0x40<32>)
	branch Test(EQ,Z) l000000000043AB71
	// succ:  l000000000043AAB2 l000000000043AB71
l000000000043AAB2:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rdi = Mem0[rbp - 0x48<64>:word64]
	r14d = r14d & 0x4000<32>
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	ecx = ecx + 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 4<64>
	SCZO = cond(r9)
	rax = rax + 2<64>
	SCZO = cond(rax)
	eax = CONVERT(Mem0[rdi + rax * 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9 + 2<64>:word16] = ax
	eax = CONVERT(Mem0[rsi + 0x54<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r9:word16] = ax
	goto l000000000043A99D
	// succ:  l000000000043A99D
l000000000043AAE3:
	ecx = 0xD0<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rsi = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = 0x0000000000497370<p64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsi + 0x10<64>:word64] = 0<64>
	Mem0[rsi + 0x18<64>:word64] = 0<64>
	Mem0[rsi:word64] = rax
	Mem0[rsi + 0x4A<64>:word16] = dx
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rdx = rbx + 0xD0<64>
	Mem0[rsi + 0x20<64>:byte] = 0<8>
	Mem0[rsi + 0x28<64>:word64] = 0<64>
	Mem0[rsi + 0x30<64>:word64] = 0<64>
	Mem0[rsi + 0x38<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rsi + 0x40<64>:word64] = 0<64>
	Mem0[rsi + 0x48<64>:word16] = ax
	Mem0[rsi + 0xC8<64>:byte] = 0<8>
	call fn00000000004645D0 (retsize: 8;)
	rcx = Mem0[rbx + 0xD0<64>:word64]
	rdx = rsi
	r8 = r14
	call fn0000000000469430 (retsize: 8;)
	rsi = Mem0[rdi:word64]
	goto l000000000043A925
	// succ:  l000000000043A925
l000000000043AB71:
	eax = CONVERT(Mem0[rsi + 0x54<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 - 2<64>
	SCZO = cond(r9)
	Mem0[r9:word16] = ax
	goto l000000000043A99D
	// succ:  l000000000043A99D
fn000000000043A8D0_exit:


// fn000000000043ABC0
// Return size: 8
define fn000000000043ABC0
fn000000000043ABC0_entry:
	rsp = fp
	// succ:  l000000000043ABC0
l000000000043ABC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp + 0x80<64>:word64]
	rbx = Mem0[rsp + 0x88<64>:word64]
	rcx = Mem0[rsp + 0x90<64>:word64]
	rdi = Mem0[rsp + 0x98<64>:word64]
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000043AC50
	// succ:  l000000000043ABED l000000000043AC50
l000000000043ABED:
	rsi = rbp
	eax = CONVERT(r9w, word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x20<64>:word64] = rcx
	rsi = rsi - rcx
	SCZO = cond(rsi)
	rsi = rsi >> 1<64>
	SCZO = cond(rsi)
	r9 = CONVERT(esi, word32, int64)
	r9 = rcx + r9 * 2<64>
	rcx = rbx
	Mem0[rsp + 0x28<64>:word64] = r9
	r9 = r8
	r8 = rdx
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000046F950 (retsize: 8;)
	r8d = Mem0[rdi:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rax
	rcx = rax
	rdx = rdx - rbx
	SCZO = cond(rdx)
	rbx = rdx
	rdx = rbp
	r8d = r8d - esi
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	rbx = rbx >> 1<64>
	SCZO = cond(rbx)
	r8 = CONVERT(r8d, word32, int64)
	r8 = r8 + r8
	SCZO = cond(r8)
	rax = memcpy(rcx, rdx, r8)
	eax = Mem0[rdi:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - esi
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax + ebx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rdi:word32] = eax
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043ABC0_exit
l000000000043AC50:
	eax = CONVERT(r9w, word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r9 = CONVERT(Mem0[rdi:word32], word32, int64)
	Mem0[rsp + 0x20<64>:word64] = rcx
	r9 = rcx + r9 * 2<64>
	rcx = rbx
	Mem0[rsp + 0x28<64>:word64] = r9
	r9 = r8
	r8 = rdx
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000046F950 (retsize: 8;)
	rax = rax - rbx
	SCZO = cond(rax)
	rax = rax >>u 1<64>
	SCZO = cond(rax)
	Mem0[rdi:word32] = eax
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043ABC0_exit
fn000000000043ABC0_exit:


// fn000000000043AC90
// Return size: 8
define fn000000000043AC90
fn000000000043AC90_entry:
	rsp = fp
	// succ:  l000000000043AC90
l000000000043AC90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x98<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp + 0<64>:word128] = xmm6
	rbx = r9
	rax = Mem0[r8 + 8<64>:word64]
	Mem0[rbp + 0x60<64>:word64] = rcx
	rcx = 0x000000000048B590<p64>
	Mem0[rbp + 0x68<64>:word64] = rdx
	rdi = Mem0[r8:word64]
	r14d = Mem0[rbp + 0x88<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	xmm6 = SEQ(0<64>, Mem0[rbp + 0x90<64>:real64])
	Mem0[rbp - 0x30<64>:word64] = rax
	eax = Mem0[rbp + 0x80<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp - 0x34<64>:word32] = eax
	rax = r9 + 0xD0<64>
	Mem0[rbp - 0x28<64>:word64] = rax
	call fn000000000042BB80 (retsize: 8;)
	r13 = rax
	rax = Mem0[rbx + 0xD0<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	r12 = rax + r13 * 8<64>
	rsi = Mem0[r12:word64]
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000043AFA1
	// succ:  l000000000043AD13 l000000000043AFA1
l000000000043AD13:
	rax = Mem0[rbx + 8<64>:word64]
	r13 = rbp - 0x10<64>
	r8d = CONVERT(r14b, byte, int32)
	rcx = rbx
	r12d = 6<32>
	r12 = CONVERT(r12d, word32, uint64)
	r15 = rbp - 0x18<64>
	rdx = r13
	SZO = cond(rax & rax)
	C = false
	branch Test(SG,S) l000000000043AD36
	// succ:  l000000000043AD32_1 l000000000043AD36
l000000000043AD32_1:
	r12 = rax
	// succ:  l000000000043AD36
l000000000043AD36:
	call fn0000000000452660 (retsize: 8;)
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	r14 = rsp + 0x40<64>
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rsp + 0x28<64>:real64] = SLICE(xmm6, real64, 0)
	Mem0[rsp + 0x20<64>:word64] = r12
	r9 = r13
	r8d = 0x2D<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = r14
	rcx = r15
	Mem0[rbp - 0x18<64>:word64] = rax
	call fn000000000046FF90 (retsize: 8;)
	SCZO = cond(eax - 0x2C<32>)
	Mem0[rbp - 0x1C<64>:word32] = eax
	branch Test(GT,SZO) l000000000043AF30
	// succ:  l000000000043AD78 l000000000043AF30
l000000000043AD78:
	rcx = Mem0[rbp - 0x28<64>:word64]
	call fn0000000000473020 (retsize: 8;)
	rdx = CONVERT(Mem0[rbp - 0x1C<64>:word32], word32, int64)
	rcx = rax
	rax = rdx + 0x1E<64> + rdx
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r8 = r14 + rdx
	r13 = rsp + 0x40<64>
	rdx = r14
	r9 = r13
	r15 = r13
	call Mem0[rax + 0x58<64>:word64] (retsize: 8;)
	r12 = CONVERT(Mem0[rbp - 0x1C<64>:word32], word32, int64)
	edx = 0x2E<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r14
	r8 = r12
	Mem0[rbp - 0x28<64>:word32] = r12d
	rax = memchr(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	r9d = Mem0[rbp - 0x28<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	branch Test(EQ,Z) l000000000043AE80
	// succ:  l000000000043ADD6 l000000000043AE80
l000000000043ADD6:
	rax = rax - r14
	SCZO = cond(rax)
	SCZO = cond(Mem0[rsi + 0x20<64>:byte] - 0<8>)
	rcx = r13 + 0<64> + rax * 2<64>
	eax = CONVERT(Mem0[rsi + 0x48<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:word16] = ax
	branch Test(NE,Z) l000000000043AEB8
	// succ:  l000000000043ADEF l000000000043AEB8
l000000000043ADEF:
	r13 = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(r13 - r12)
	branch Test(LE,SZO) l000000000043AE34
	// succ:  l000000000043ADF8 l000000000043AE34
l000000000043ADF8:
	rax = r13 + 0x1E<64> + r13
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	edx = CONVERT(Mem0[rbp - 0x34<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	rsp = rsp - rax
	SCZO = cond(rsp)
	r9 = r15
	rcx = rbx
	r14 = rsp + 0x40<64>
	Mem0[rsp + 0x28<64>:word64] = r12
	Mem0[rsp + 0x20<64>:word64] = r13
	r12 = CONVERT(r13d, word32, int64)
	r8 = r14
	r15 = r14
	call fn0000000000468AD0 (retsize: 8;)
	Mem0[rbp - 0x1C<64>:word32] = r13d
	// succ:  l000000000043AE34
l000000000043AE34:
	rax = Mem0[rbp - 0x30<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	SZO = cond(al & al)
	C = false
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l000000000043AE60
	// succ:  l000000000043AE46 l000000000043AE60
l000000000043AE46:
	rax = Mem0[rdi:word64]
	r8 = r12
	rdx = r15
	rcx = rdi
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(r12 - rax)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l000000000043AE60
	// succ:  l000000000043AE5D_1 l000000000043AE60
l000000000043AE5D_1:
	ebx = eax
	// succ:  l000000000043AE60
l000000000043AE60:
	rax = Mem0[rbp + 0x60<64>:word64]
	Mem0[rax:word64] = rdi
	Mem0[rax + 8<64>:byte] = bl
	xmm6 = Mem0[rbp + 0<64>:word128]
	rsp = rbp + 0x18<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043AC90_exit
l000000000043AE80:
	SCZO = cond(Mem0[rsi + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000043ADEF
	// succ:  l000000000043AE8A l000000000043ADEF
l000000000043AE8A:
	SCZO = cond(r9d - 2<32>)
	branch Test(LE,SZO) l000000000043AEB6
	// succ:  l000000000043AE90 l000000000043AEB6
l000000000043AE90:
	eax = CONVERT(Mem0[r14 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x39<8>)
	branch Test(GT,SZO) l000000000043ADEF
	// succ:  l000000000043AE9D l000000000043ADEF
l000000000043AE9D:
	edx = CONVERT(Mem0[r14 + 2<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	edx = edx - 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(dl - 9<8>)
	branch Test(UGT,CZ) l000000000043ADEF
	// succ:  l000000000043AEAE l000000000043ADEF
l000000000043AEAE:
	SCZO = cond(al - 0x2F<8>)
	branch Test(LE,SZO) l000000000043ADEF
	// succ:  l000000000043AEB6 l000000000043ADEF
l000000000043AEB6:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	// succ:  l000000000043AEB8
l000000000043AEB8:
	rax = CONVERT(0x1E<32>, word32, word64)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	eax = CONVERT(Mem0[r14:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	r15 = rsp + 0x40<64>
	eax = eax - 0x2B<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(al & 0xFD<8>)
	C = false
	branch Test(EQ,Z) l000000000043AF80
	// succ:  l000000000043AEE0 l000000000043AF80
l000000000043AEE0:
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000043AEE5
l000000000043AEE5:
	r9d = CONVERT(Mem0[rsi + 0x4A<64>:word16], word16, word32)
	r9 = CONVERT(r9d, word32, uint64)
	r8 = Mem0[rsi + 0x18<64>:word64]
	r10 = rbp - 0x1C<64>
	rdx = Mem0[rsi + 0x10<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	r13 = r13 + rax
	SCZO = cond(r13)
	rcx = Mem0[rbp + 0x68<64>:word64]
	rax = rax + r15
	SCZO = cond(rax)
	Mem0[rsp + 0x38<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = r13
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn000000000043ABC0 (retsize: 8;)
	r9d = Mem0[rbp - 0x1C<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	r9d = r9d + r12d
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	Mem0[rbp - 0x1C<64>:word32] = r9d
	r12 = CONVERT(r9d, word32, int64)
	goto l000000000043ADEF
	// succ:  l000000000043ADEF
l000000000043AF30:
	r8d = SLICE(rax + 1<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	rax = CONVERT(r8d, word32, int64)
	Mem0[rbp - 0x38<64>:word32] = r8d
	rax = rax + 0x1E<64>
	SCZO = cond(rax)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	call fn000000000046AC50 (retsize: 8;)
	r14 = rsp + 0x40<64>
	r8d = Mem0[rbp - 0x38<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x28<64>:real64] = SLICE(xmm6, real64, 0)
	Mem0[rsp + 0x20<64>:word64] = r12
	r9 = r13
	rcx = r15
	rdx = r14
	Mem0[rbp - 0x18<64>:word64] = rax
	call fn000000000046FF90 (retsize: 8;)
	Mem0[rbp - 0x1C<64>:word32] = eax
	goto l000000000043AD78
	// succ:  l000000000043AD78
l000000000043AF80:
	eax = CONVERT(Mem0[r13 + 0<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r9d = r9d - 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	Mem0[rbp - 0x1C<64>:word32] = r9d
	Mem0[r15:word16] = ax
	eax = 2<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043AEE5
	// succ:  l000000000043AEE5
l000000000043AFA1:
	ecx = 0xD0<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	r15 = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rax = 0x0000000000497370<p64>
	Mem0[r15 + 0x4A<64>:word16] = dx
	rdx = Mem0[rbp - 0x28<64>:word64]
	Mem0[r15 + 0x10<64>:word64] = 0<64>
	Mem0[r15 + 0x18<64>:word64] = 0<64>
	rcx = r15
	Mem0[r15:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[r15 + 0x20<64>:byte] = 0<8>
	Mem0[r15 + 0x28<64>:word64] = 0<64>
	Mem0[r15 + 0x30<64>:word64] = 0<64>
	Mem0[r15 + 0x38<64>:word64] = 0<64>
	Mem0[r15 + 0x40<64>:word64] = 0<64>
	Mem0[r15 + 0x48<64>:word16] = ax
	Mem0[r15 + 0xC8<64>:byte] = 0<8>
	call fn00000000004645D0 (retsize: 8;)
	rcx = Mem0[rbx + 0xD0<64>:word64]
	r8 = r13
	rdx = r15
	call fn0000000000469430 (retsize: 8;)
	rsi = Mem0[r12:word64]
	goto l000000000043AD13
	// succ:  l000000000043AD13
fn000000000043AC90_exit:


// fn000000000043B070
// Return size: 8
define fn000000000043B070
fn000000000043B070_entry:
	rsp = fp
	// succ:  l000000000043B070
l000000000043B070:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xA8<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	rax = Mem0[r8 + 8<64>:word64]
	rdi = Mem0[r8:word64]
	Mem0[rbp + 0x70<64>:word64] = rcx
	rcx = 0x000000000048B590<p64>
	rbx = r9
	Mem0[rbp + 0x78<64>:word64] = rdx
	r14d = Mem0[rbp + 0x98<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	Mem0[rbp - 0x30<64>:word64] = rax
	eax = Mem0[rbp + 0x90<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp - 0x34<64>:word32] = eax
	rax = Mem0[rbp + 0xA0<64>:word64]
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rax:real80], real80, real64)
	rax = r9 + 0xD0<64>
	Mem0[rbp - 0x28<64>:word64] = rax
	Mem0[rbp - 0x20<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call fn000000000042BB80 (retsize: 8;)
	r13 = rax
	rax = Mem0[rbx + 0xD0<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	r12 = rax + r13 * 8<64>
	rsi = Mem0[r12:word64]
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000043B394
	// succ:  l000000000043B0F3 l000000000043B394
l000000000043B0F3:
	rax = Mem0[rbx + 8<64>:word64]
	r13 = rbp + 0x10<64>
	r8d = CONVERT(r14b, byte, int32)
	rcx = rbx
	r15d = 6<32>
	r15 = CONVERT(r15d, word32, uint64)
	r14 = rbp - 0x10<64>
	rdx = r13
	SZO = cond(rax & rax)
	C = false
	branch Test(SG,S) l000000000043B116
	// succ:  l000000000043B112_1 l000000000043B116
l000000000043B112_1:
	r15 = rax
	// succ:  l000000000043B116
l000000000043B116:
	call fn0000000000452660 (retsize: 8;)
	rsp = rsp - 0x50<64>
	SCZO = cond(rsp)
	call fn000000000046AC50 (retsize: 8;)
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rbp - 0x20<64>:real80], real80, real64)
	Mem0[rbp + 8<64>:word64] = rax
	r12 = rsp + 0x40<64>
	rax = rbp + 8<64>
	Mem0[rsp + 0x28<64>:word64] = r14
	Mem0[rsp + 0x20<64>:word64] = r15
	r9 = r13
	r8d = 0x36<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = r12
	rcx = rax
	Mem0[rbp - 0x40<64>:word64] = rax
	Mem0[rbp - 0x10<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call fn000000000046FF90 (retsize: 8;)
	SCZO = cond(eax - 0x35<32>)
	Mem0[rbp + 4<64>:word32] = eax
	branch Test(GT,SZO) l000000000043B320
	// succ:  l000000000043B165 l000000000043B320
l000000000043B165:
	rcx = Mem0[rbp - 0x28<64>:word64]
	call fn0000000000473020 (retsize: 8;)
	rdx = CONVERT(Mem0[rbp + 4<64>:word32], word32, int64)
	rcx = rax
	rax = rdx + 0x1E<64> + rdx
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r8 = r12 + rdx
	r14 = rsp + 0x40<64>
	rdx = r12
	r9 = r14
	r15 = r14
	call Mem0[rax + 0x58<64>:word64] (retsize: 8;)
	r13 = CONVERT(Mem0[rbp + 4<64>:word32], word32, int64)
	edx = 0x2E<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r12
	r8 = r13
	Mem0[rbp - 0x20<64>:word32] = r13d
	rax = memchr(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	r9d = Mem0[rbp - 0x20<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	branch Test(EQ,Z) l000000000043B270
	// succ:  l000000000043B1C3 l000000000043B270
l000000000043B1C3:
	rax = rax - r12
	SCZO = cond(rax)
	SCZO = cond(Mem0[rsi + 0x20<64>:byte] - 0<8>)
	rcx = r14 + rax * 2<64>
	eax = CONVERT(Mem0[rsi + 0x48<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx:word16] = ax
	branch Test(NE,Z) l000000000043B2AA
	// succ:  l000000000043B1DB l000000000043B2AA
l000000000043B1DB:
	r12 = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(r12 - r13)
	branch Test(LE,SZO) l000000000043B220
	// succ:  l000000000043B1E4 l000000000043B220
l000000000043B1E4:
	rax = r12 + 0x1E<64>
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	edx = CONVERT(Mem0[rbp - 0x34<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	rsp = rsp - rax
	SCZO = cond(rsp)
	r9 = r15
	rcx = rbx
	r14 = rsp + 0x40<64>
	Mem0[rsp + 0x28<64>:word64] = r13
	Mem0[rsp + 0x20<64>:word64] = r12
	r13 = CONVERT(r12d, word32, int64)
	r8 = r14
	r15 = r14
	call fn0000000000468AD0 (retsize: 8;)
	Mem0[rbp + 4<64>:word32] = r12d
	// succ:  l000000000043B220
l000000000043B220:
	rax = Mem0[rbp - 0x30<64>:word64]
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	SZO = cond(al & al)
	C = false
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l000000000043B24C
	// succ:  l000000000043B232 l000000000043B24C
l000000000043B232:
	rax = Mem0[rdi:word64]
	r8 = r13
	rdx = r15
	rcx = rdi
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(r13 - rax)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l000000000043B24C
	// succ:  l000000000043B249_1 l000000000043B24C
l000000000043B249_1:
	ebx = eax
	// succ:  l000000000043B24C
l000000000043B24C:
	rax = Mem0[rbp + 0x70<64>:word64]
	Mem0[rax:word64] = rdi
	Mem0[rax + 8<64>:byte] = bl
	rsp = rbp + 0x28<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043B070_exit
l000000000043B270:
	SCZO = cond(Mem0[rsi + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000043B1DB
	// succ:  l000000000043B27A l000000000043B1DB
l000000000043B27A:
	SCZO = cond(r9d - 2<32>)
	branch Test(LE,SZO) l000000000043B2A8
	// succ:  l000000000043B280 l000000000043B2A8
l000000000043B280:
	eax = CONVERT(Mem0[r12 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x39<8>)
	branch Test(GT,SZO) l000000000043B1DB
	// succ:  l000000000043B28E l000000000043B1DB
l000000000043B28E:
	edx = CONVERT(Mem0[r12 + 2<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	edx = edx - 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(dl - 9<8>)
	branch Test(UGT,CZ) l000000000043B1DB
	// succ:  l000000000043B2A0 l000000000043B1DB
l000000000043B2A0:
	SCZO = cond(al - 0x2F<8>)
	branch Test(LE,SZO) l000000000043B1DB
	// succ:  l000000000043B2A8 l000000000043B1DB
l000000000043B2A8:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	// succ:  l000000000043B2AA
l000000000043B2AA:
	rax = CONVERT(0x1E<32> + r13 * 4<64>, word32, word64)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	eax = CONVERT(Mem0[r12:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	r15 = rsp + 0x40<64>
	eax = eax - 0x2B<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(al & 0xFD<8>)
	C = false
	branch Test(EQ,Z) l000000000043B374
	// succ:  l000000000043B2D3 l000000000043B374
l000000000043B2D3:
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000043B2D8
l000000000043B2D8:
	r9d = CONVERT(Mem0[rsi + 0x4A<64>:word16], word16, word32)
	r9 = CONVERT(r9d, word32, uint64)
	r8 = Mem0[rsi + 0x18<64>:word64]
	r10 = rbp + 4<64>
	rdx = Mem0[rsi + 0x10<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	r14 = r14 + rax
	SCZO = cond(r14)
	rcx = Mem0[rbp + 0x78<64>:word64]
	rax = rax + r15
	SCZO = cond(rax)
	Mem0[rsp + 0x38<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = r14
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn000000000043ABC0 (retsize: 8;)
	r9d = Mem0[rbp + 4<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	r9d = r9d + r12d
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	Mem0[rbp + 4<64>:word32] = r9d
	r13 = CONVERT(r9d, word32, int64)
	goto l000000000043B1DB
	// succ:  l000000000043B1DB
l000000000043B320:
	r8d = SLICE(rax + 1<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	rax = CONVERT(r8d, word32, int64)
	Mem0[rbp - 0x38<64>:word32] = r8d
	rax = rax + 0x1E<64>
	SCZO = cond(rax)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	call fn000000000046AC50 (retsize: 8;)
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rbp - 0x20<64>:real80], real80, real64)
	r12 = rsp + 0x40<64>
	r8d = Mem0[rbp - 0x38<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rcx = Mem0[rbp - 0x40<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = r14
	Mem0[rsp + 0x20<64>:word64] = r15
	r9 = r13
	rdx = r12
	Mem0[rbp + 8<64>:word64] = rax
	Mem0[rbp - 0x10<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call fn000000000046FF90 (retsize: 8;)
	Mem0[rbp + 4<64>:word32] = eax
	goto l000000000043B165
	// succ:  l000000000043B165
l000000000043B374:
	eax = CONVERT(Mem0[r14:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	r9d = r9d - 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	Mem0[rbp + 4<64>:word32] = r9d
	Mem0[r15:word16] = ax
	eax = 2<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043B2D8
	// succ:  l000000000043B2D8
l000000000043B394:
	ecx = 0xD0<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	r15 = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rax = 0x0000000000497370<p64>
	Mem0[r15 + 0x4A<64>:word16] = dx
	rdx = Mem0[rbp - 0x28<64>:word64]
	Mem0[r15 + 0x10<64>:word64] = 0<64>
	Mem0[r15 + 0x18<64>:word64] = 0<64>
	rcx = r15
	Mem0[r15:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[r15 + 0x20<64>:byte] = 0<8>
	Mem0[r15 + 0x28<64>:word64] = 0<64>
	Mem0[r15 + 0x30<64>:word64] = 0<64>
	Mem0[r15 + 0x38<64>:word64] = 0<64>
	Mem0[r15 + 0x40<64>:word64] = 0<64>
	Mem0[r15 + 0x48<64>:word16] = ax
	Mem0[r15 + 0xC8<64>:byte] = 0<8>
	call fn00000000004645D0 (retsize: 8;)
	rcx = Mem0[rbx + 0xD0<64>:word64]
	r8 = r13
	rdx = r15
	call fn0000000000469430 (retsize: 8;)
	rsi = Mem0[r12:word64]
	goto l000000000043B0F3
	// succ:  l000000000043B0F3
fn000000000043B070_exit:


// fn000000000043B460
// Return size: 8
define fn000000000043B460
fn000000000043B460_entry:
	rsp = fp
	// succ:  l000000000043B460
l000000000043B460:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0x78<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x30<64>
	Mem0[rsp + 0x28<64>:word64] = rcx
	ecx = CONVERT(Mem0[rsp + 0x70<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043B460_exit
fn000000000043B460_exit:


// fn000000000043B4A0
// Return size: 8
define fn000000000043B4A0
fn000000000043B4A0_entry:
	rsp = fp
	// succ:  l000000000043B4A0
l000000000043B4A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	ecx = CONVERT(Mem0[rsp + 0x78<64>:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x30<64>
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word32] = ecx
	ecx = CONVERT(Mem0[rsp + 0x70<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043B4A0_exit
fn000000000043B4A0_exit:


// fn000000000043B4E0
// Return size: 8
define fn000000000043B4E0
fn000000000043B4E0_entry:
	rsp = fp
	// succ:  l000000000043B4E0
l000000000043B4E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x50<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = 0x000000000043BB70<p64>
	rbx = rcx
	ecx = CONVERT(Mem0[rsp + 0x80<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rax = Mem0[rax + 0x38<64>:word64]
	xmm0 = SEQ(0<64>, Mem0[rsp + 0x88<64>:real64])
	Mem0[rsp + 0x40<64>:word128] = xmm1
	SCZO = cond(rax - r8)
	branch Test(NE,Z) l000000000043B540
	// succ:  l000000000043B516 l000000000043B540
l000000000043B516:
	Mem0[rsp + 0x30<64>:real64] = SLICE(xmm0, real64, 0)
	r8 = rsp + 0x40<64>
	Mem0[rsp + 0x20<64>:word32] = ecx
	Mem0[rsp + 0x28<64>:word32] = 0<32>
	rcx = rbx
	call fn000000000043AC90 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x50<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043B4E0_exit
l000000000043B540:
	r8 = rsp + 0x40<64>
	Mem0[rsp + 0x20<64>:word32] = ecx
	Mem0[rsp + 0x28<64>:real64] = SLICE(xmm0, real64, 0)
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x50<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043B4E0_exit
fn000000000043B4E0_exit:


// fn000000000043B560
// Return size: 8
define fn000000000043B560
fn000000000043B560_entry:
	rsp = fp
	// succ:  l000000000043B560
l000000000043B560:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0x98<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = 0x000000000043BBC0<p64>
	rbx = rcx
	ecx = CONVERT(Mem0[rsp + 0x90<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rax:real80], real80, real64)
	rax = Mem0[rdx:word64]
	rax = Mem0[rax + 0x40<64>:word64]
	SCZO = cond(rax - r8)
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x40<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	branch Test(NE,Z) l000000000043B5D0
	// succ:  l000000000043B59B l000000000043B5D0
l000000000043B59B:
	rax = rsp + 0x40<64>
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x20<64>:word32] = ecx
	Mem0[rsp + 0x28<64>:word32] = 0x4C<32>
	rcx = rbx
	Mem0[rsp + 0x30<64>:word64] = rax
	call fn000000000043B070 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043B560_exit
l000000000043B5D0:
	r8 = rsp + 0x40<64>
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	Mem0[rsp + 0x28<64>:word64] = r8
	r8 = rsp + 0x50<64>
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043B560_exit
fn000000000043B560_exit:


// fn000000000043B600
// Return size: 8
define fn000000000043B600
fn000000000043B600_entry:
	rsp = fp
	// succ:  l000000000043B600
l000000000043B600:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x000000000043BC20<p64>
	rbx = rcx
	ecx = CONVERT(Mem0[rsp + 0x70<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	xmm1 = Mem0[r8:word128]
	rax = Mem0[rax + 0x18<64>:word64]
	r8d = Mem0[rsp + 0x78<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x28<64>:word32] = r8d
	r8 = rsp + 0x30<64>
	branch Test(NE,Z) l000000000043B650
	// succ:  l000000000043B640 l000000000043B650
l000000000043B640:
	call fn0000000000439F70 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043B600_exit
l000000000043B650:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043B600_exit
fn000000000043B600_exit:


// fn000000000043B660
// Return size: 8
define fn000000000043B660
fn000000000043B660_entry:
	rsp = fp
	// succ:  l000000000043B660
l000000000043B660:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x000000000043BC60<p64>
	rbx = rcx
	ecx = CONVERT(Mem0[rsp + 0x70<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	xmm1 = Mem0[r8:word128]
	rax = Mem0[rax + 0x20<64>:word64]
	r8d = Mem0[rsp + 0x78<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x28<64>:word32] = r8d
	r8 = rsp + 0x30<64>
	branch Test(NE,Z) l000000000043B6B0
	// succ:  l000000000043B6A0 l000000000043B6B0
l000000000043B6A0:
	call fn000000000043A2B0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043B660_exit
l000000000043B6B0:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043B660_exit
fn000000000043B660_exit:


// fn000000000043B6C0
// Return size: 8
define fn000000000043B6C0
fn000000000043B6C0_entry:
	rsp = fp
	// succ:  l000000000043B6C0
l000000000043B6C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x000000000043BCA0<p64>
	rbx = rcx
	ecx = CONVERT(Mem0[rsp + 0x70<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	xmm1 = Mem0[r8:word128]
	rax = Mem0[rax + 0x28<64>:word64]
	r8 = Mem0[rsp + 0x78<64>:word64]
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x28<64>:word64] = r8
	r8 = rsp + 0x30<64>
	branch Test(NE,Z) l000000000043B710
	// succ:  l000000000043B700 l000000000043B710
l000000000043B700:
	call fn000000000043A590 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043B6C0_exit
l000000000043B710:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043B6C0_exit
fn000000000043B6C0_exit:


// fn000000000043B720
// Return size: 8
define fn000000000043B720
fn000000000043B720_entry:
	rsp = fp
	// succ:  l000000000043B720
l000000000043B720:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	r10 = 0x000000000043BCE0<p64>
	rbx = rcx
	ecx = CONVERT(Mem0[rsp + 0x70<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	xmm1 = Mem0[r8:word128]
	rax = Mem0[rax + 0x30<64>:word64]
	r8 = Mem0[rsp + 0x78<64>:word64]
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	SCZO = cond(rax - r10)
	Mem0[rsp + 0x28<64>:word64] = r8
	r8 = rsp + 0x30<64>
	branch Test(NE,Z) l000000000043B770
	// succ:  l000000000043B760 l000000000043B770
l000000000043B760:
	call fn000000000043A8D0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043B720_exit
l000000000043B770:
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043B720_exit
fn000000000043B720_exit:


// fn000000000043B780
// Return size: 8
define fn000000000043B780
fn000000000043B780_entry:
	rsp = fp
	// succ:  l000000000043B780
l000000000043B780:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp + 0x80<64>:word64]
	rsi = r8
	rcx = r9
	r9 = Mem0[rsp + 0x78<64>:word64]
	edx = CONVERT(dx, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = CONVERT(Mem0[rbx:word32], word32, int64)
	Mem0[rsp + 0x20<64>:word64] = r8
	r8 = Mem0[rsp + 0x70<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn0000000000468AD0 (retsize: 8;)
	Mem0[rbx:word32] = esi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043B780_exit
fn000000000043B780_exit:


// fn000000000043B7C0
// Return size: 8
define fn000000000043B7C0
fn000000000043B7C0_entry:
	rsp = fp
	// succ:  l000000000043B7C0
l000000000043B7C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	ebp = Mem0[r9 + 0x18<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	r10 = Mem0[r8:word64]
	rsi = Mem0[r8 + 8<64>:word64]
	rdi = rcx
	r8 = rsp + 0x30<64>
	rcx = rsp + 0x40<64>
	rbx = r9
	eax = ebp
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x30<64>:word64] = r10
	eax = eax & 0xFFFFBFB5<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x38<64>:word64] = rsi
	sil = sil & 0<8>
	SZO = cond(sil)
	C = false
	eax = eax | 0x208<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[r9 + 0x18<64>:word32] = eax
	rax = Mem0[rsp + 0xA8<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rax
	eax = CONVERT(Mem0[rsp + 0xA0<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn000000000043A8D0 (retsize: 8;)
	rax = Mem0[rsp + 0x40<64>:word64]
	Mem0[rbx + 0x18<64>:word32] = ebp
	rdx = rax
	eax = CONVERT(Mem0[rsp + 0x48<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdi:word64] = rdx
	rsi = rsi | rax
	SZO = cond(rsi)
	C = false
	rax = rdi
	Mem0[rdi + 8<64>:word64] = rsi
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043B7C0_exit
fn000000000043B7C0_exit:


// fn000000000043B850
// Return size: 8
define fn000000000043B850
fn000000000043B850_entry:
	rsp = fp
	// succ:  l000000000043B850
l000000000043B850:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	r12 = Mem0[r8:word64]
	rbx = Mem0[r8 + 8<64>:word64]
	rdi = rcx
	ecx = Mem0[rbp + 0x78<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = Mem0[rbp + 0x70<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rsi = r9
	r15 = r12
	r14d = ebx
	r14 = CONVERT(r14d, word32, uint64)
	Mem0[rbp - 0x28<64>:word32] = ecx
	ecx = Mem0[r9 + 0x18<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	r13d = eax
	r13 = CONVERT(r13d, word32, uint64)
	Mem0[rbp - 0x30<64>:word32] = ecx
	ecx = ecx & 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	branch Test(NE,Z) l000000000043B8E3
	// succ:  l000000000043B896 l000000000043B8E3
l000000000043B896:
	r8d = CONVERT(Mem0[rbp - 0x28<64>:byte], byte, word32)
	r8 = CONVERT(r8d, word32, uint64)
	eax = CONVERT(ax, word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rcx = rbp - 0x10<64>
	Mem0[rsp + 0x20<64>:word32] = eax
	Mem0[rbp - 0x20<64>:word64] = r12
	Mem0[rbp - 0x18<64>:word64] = rbx
	Mem0[rsp + 0x28<64>:word32] = r8d
	r8 = rbp - 0x20<64>
	call fn0000000000439F70 (retsize: 8;)
	r14d = CONVERT(Mem0[rbp - 8<64>:byte], byte, word32)
	r14 = CONVERT(r14d, word32, uint64)
	r15 = Mem0[rbp - 0x10<64>:word64]
	// succ:  l000000000043B8C5
l000000000043B8C5:
	bl = r14b
	Mem0[rdi:word64] = r15
	Mem0[rdi + 8<64>:word64] = rbx
	// succ:  l000000000043B8CF
l000000000043B8CF:
	rax = rdi
	rsp = rbp + 8<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043B850_exit
l000000000043B8E3:
	rcx = 0x000000000048B590<p64>
	call fn000000000042BB80 (retsize: 8;)
	rdx = rax
	Mem0[rbp - 0x38<64>:word64] = rax
	rax = Mem0[rsi + 0xD0<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	rax = rax + rdx * 8<64>
	Mem0[rbp - 0x40<64>:word64] = rax
	rax = Mem0[rax:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000043BA90
	// succ:  l000000000043B915 l000000000043BA90
l000000000043B915:
	SCZO = cond(Mem0[rbp - 0x28<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000043B9F0
	// succ:  l000000000043B91F l000000000043B9F0
l000000000043B91F:
	r9 = CONVERT(Mem0[rax + 0x40<64>:word32], word32, int64)
	r11 = Mem0[rax + 0x38<64>:word64]
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - r9)
	branch Test(LE,SZO) l000000000043BA05
	// succ:  l000000000043B934 l000000000043BA05
l000000000043B934:
	rax = rax - r9
	SCZO = cond(rax)
	r15 = rax
	rax = rax + 0x1E<64> + rax
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r15 & r15)
	C = false
	r10 = rsp + 0x30<64>
	branch Test(EQ,Z) l000000000043B96E
	// succ:  l000000000043B957 l000000000043B96E
l000000000043B957:
	// succ:  l000000000043B960
l000000000043B960:
	Mem0[r10 + rax * 2<64>:word16] = r13w
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(r15 - rax)
	branch Test(NE,Z) l000000000043B960
	// succ:  l000000000043B96E l000000000043B960
l000000000043B96E:
	eax = Mem0[rbp - 0x30<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi + 0x10<64>:word64] = 0<64>
	eax = eax & 0xB0<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x20<32>)
	branch Test(EQ,Z) l000000000043BA40
	// succ:  l000000000043B987 l000000000043BA40
l000000000043B987:
	SZO = cond(r14b & r14b)
	C = false
	Mem0[rbp - 0x30<64>:word64] = r9
	Mem0[rbp - 0x28<64>:word64] = r11
	r15 = CONVERT(r15d, word32, int64)
	branch Test(NE,Z) l000000000043B9D7
	// succ:  l000000000043B997 l000000000043B9D7
l000000000043B997:
	rax = Mem0[r12:word64]
	r8 = r15
	rdx = r10
	rcx = r12
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(r15 - rax)
	r11 = Mem0[rbp - 0x28<64>:word64]
	r9 = Mem0[rbp - 0x30<64>:word64]
	branch Test(NE,Z) l000000000043BB25
	// succ:  l000000000043B9B8 l000000000043BB25
l000000000043B9B8:
	rax = Mem0[r12:word64]
	r8 = r9
	Mem0[rbp - 0x28<64>:word64] = r9
	rdx = r11
	rcx = r12
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	r9 = Mem0[rbp - 0x28<64>:word64]
	SCZO = cond(r9 - rax)
	r14b = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l000000000043B9D7
l000000000043B9D7:
	bl = r14b
	Mem0[rdi:word64] = r12
	Mem0[rdi + 8<64>:word64] = rbx
	goto l000000000043B8CF
	// succ:  l000000000043B8CF
l000000000043B9F0:
	r9 = CONVERT(Mem0[rax + 0x30<64>:word32], word32, int64)
	r11 = Mem0[rax + 0x28<64>:word64]
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - r9)
	branch Test(GT,SZO) l000000000043B934
	// succ:  l000000000043BA05 l000000000043B934
l000000000043BA05:
	SZO = cond(r14b & r14b)
	C = false
	Mem0[rsi + 0x10<64>:word64] = 0<64>
	branch Test(NE,Z) l000000000043B8C5
	// succ:  l000000000043BA16 l000000000043B8C5
l000000000043BA16:
	rax = Mem0[r12:word64]
	r8 = r9
	Mem0[rbp - 0x28<64>:word64] = r9
	rdx = r11
	rcx = r12
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	r9 = Mem0[rbp - 0x28<64>:word64]
	SCZO = cond(r9 - rax)
	r14b = CONVERT(Test(NE,Z), bool, int8)
	goto l000000000043B8C5
	// succ:  l000000000043B8C5
l000000000043BA40:
	SZO = cond(r14b & r14b)
	C = false
	Mem0[rbp - 0x28<64>:word64] = r10
	branch Test(NE,Z) l000000000043B9D7
	// succ:  l000000000043BA49 l000000000043B9D7
l000000000043BA49:
	rax = Mem0[r12:word64]
	r8 = r9
	Mem0[rbp - 0x30<64>:word64] = r9
	rdx = r11
	rcx = r12
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	r9 = Mem0[rbp - 0x30<64>:word64]
	r10 = Mem0[rbp - 0x28<64>:word64]
	SCZO = cond(r9 - rax)
	branch Test(NE,Z) l000000000043BB25
	// succ:  l000000000043BA6E l000000000043BB25
l000000000043BA6E:
	rax = Mem0[r12:word64]
	r15 = CONVERT(r15d, word32, int64)
	rdx = r10
	r8 = r15
	rcx = r12
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(r15 - rax)
	r14b = CONVERT(Test(NE,Z), bool, int8)
	goto l000000000043B9D7
	// succ:  l000000000043B9D7
l000000000043BA90:
	ecx = 0xD0<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rdx = 0x0000000000497370<p64>
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	Mem0[rax + 8<64>:word32] = 0<32>
	Mem0[rax + 0x4A<64>:word16] = cx
	Mem0[rax + 0x10<64>:word64] = 0<64>
	rcx = rax
	Mem0[rax:word64] = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rax + 0x18<64>:word64] = 0<64>
	Mem0[rax + 0x48<64>:word16] = dx
	rdx = rsi + 0xD0<64>
	Mem0[rax + 0x20<64>:byte] = 0<8>
	Mem0[rax + 0x28<64>:word64] = 0<64>
	Mem0[rax + 0x30<64>:word64] = 0<64>
	Mem0[rax + 0x38<64>:word64] = 0<64>
	Mem0[rax + 0x40<64>:word64] = 0<64>
	Mem0[rax + 0xC8<64>:byte] = 0<8>
	Mem0[rbp - 0x48<64>:word64] = rax
	call fn00000000004645D0 (retsize: 8;)
	rcx = Mem0[rsi + 0xD0<64>:word64]
	r8 = Mem0[rbp - 0x38<64>:word64]
	rdx = Mem0[rbp - 0x48<64>:word64]
	call fn0000000000469430 (retsize: 8;)
	rax = Mem0[rbp - 0x40<64>:word64]
	rax = Mem0[rax:word64]
	goto l000000000043B915
	// succ:  l000000000043B915
l000000000043BB25:
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	goto l000000000043B9D7
	// succ:  l000000000043B9D7
fn000000000043B850_exit:


// fn000000000043BB70
// Return size: 8
define fn000000000043BB70
fn000000000043BB70_entry:
	rsp = fp
	// succ:  l000000000043BB70
l000000000043BB70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x50<64>
	SCZO = cond(rsp)
	eax = CONVERT(Mem0[rsp + 0x80<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	xmm0 = SEQ(0<64>, Mem0[rsp + 0x88<64>:real64])
	rbx = rcx
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x40<64>
	Mem0[rsp + 0x28<64>:word32] = 0<32>
	Mem0[rsp + 0x30<64>:real64] = SLICE(xmm0, real64, 0)
	Mem0[rsp + 0x20<64>:word32] = eax
	Mem0[rsp + 0x40<64>:word128] = xmm1
	call fn000000000043AC90 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x50<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043BB70_exit
fn000000000043BB70_exit:


// fn000000000043BBC0
// Return size: 8
define fn000000000043BBC0
fn000000000043BBC0_entry:
	rsp = fp
	// succ:  l000000000043BBC0
l000000000043BBC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0x98<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	rbx = rcx
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rax:real80], real80, real64)
	rax = rsp + 0x40<64>
	Mem0[rsp + 0x28<64>:word32] = 0x4C<32>
	Mem0[rsp + 0x30<64>:word64] = rax
	eax = CONVERT(Mem0[rsp + 0x90<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = eax
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x40<64>:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	call fn000000000043B070 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043BBC0_exit
fn000000000043BBC0_exit:


// fn000000000043BC20
// Return size: 8
define fn000000000043BC20
fn000000000043BC20_entry:
	rsp = fp
	// succ:  l000000000043BC20
l000000000043BC20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	eax = Mem0[rsp + 0x78<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x30<64>
	rbx = rcx
	Mem0[rsp + 0x28<64>:word32] = eax
	eax = CONVERT(Mem0[rsp + 0x70<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn0000000000439F70 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043BC20_exit
fn000000000043BC20_exit:


// fn000000000043BC60
// Return size: 8
define fn000000000043BC60
fn000000000043BC60_entry:
	rsp = fp
	// succ:  l000000000043BC60
l000000000043BC60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	eax = Mem0[rsp + 0x78<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x30<64>
	rbx = rcx
	Mem0[rsp + 0x28<64>:word32] = eax
	eax = CONVERT(Mem0[rsp + 0x70<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn000000000043A2B0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043BC60_exit
fn000000000043BC60_exit:


// fn000000000043BCA0
// Return size: 8
define fn000000000043BCA0
fn000000000043BCA0_entry:
	rsp = fp
	// succ:  l000000000043BCA0
l000000000043BCA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0x78<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x30<64>
	rbx = rcx
	Mem0[rsp + 0x28<64>:word64] = rax
	eax = CONVERT(Mem0[rsp + 0x70<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn000000000043A590 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043BCA0_exit
fn000000000043BCA0_exit:


// fn000000000043BCE0
// Return size: 8
define fn000000000043BCE0
fn000000000043BCE0_entry:
	rsp = fp
	// succ:  l000000000043BCE0
l000000000043BCE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0x78<64>:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x30<64>
	rbx = rcx
	Mem0[rsp + 0x28<64>:word64] = rax
	eax = CONVERT(Mem0[rsp + 0x70<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x30<64>:word128] = xmm1
	Mem0[rsp + 0x20<64>:word32] = eax
	call fn000000000043A8D0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043BCE0_exit
fn000000000043BCE0_exit:


// fn000000000043BD20
// Return size: 8
define fn000000000043BD20
fn000000000043BD20_entry:
	rsp = fp
	// succ:  l000000000043BD20
l000000000043BD20:
	rax = 0x000000000048E070<p64>
	return
	// succ:  fn000000000043BD20_exit
fn000000000043BD20_exit:


// fn000000000043BD30
// Return size: 8
define fn000000000043BD30
fn000000000043BD30_entry:
	rsp = fp
	// succ:  l000000000043BD30
l000000000043BD30:
	rax = Mem0[rcx + 8<64>:word64]
	return
	// succ:  fn000000000043BD30_exit
fn000000000043BD30_exit:


// fn000000000043BD40
// Return size: 8
define fn000000000043BD40
fn000000000043BD40_entry:
	rsp = fp
	// succ:  l000000000043BD40
l000000000043BD40:
	rax = Mem0[rdx:word64]
	return
	// succ:  fn000000000043BD40_exit
fn000000000043BD40_exit:


// fn000000000043BD50
// Return size: 8
define fn000000000043BD50
fn000000000043BD50_entry:
	rsp = fp
	// succ:  l000000000043BD50
l000000000043BD50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = rsp + 0x2F<64>
	rbx = rcx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call fn00000000004505D0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043BD50_exit
fn000000000043BD50_exit:


// fn000000000043BD80
// Return size: 8
define fn000000000043BD80
fn000000000043BD80_entry:
	rsp = fp
	// succ:  l000000000043BD80
l000000000043BD80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0x68<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rcx
	ecx = Mem0[rsp + 0x60<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	call Mem0[rax + 0x18<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043BD80_exit
fn000000000043BD80_exit:


// fn000000000043BDB0
// Return size: 8
define fn000000000043BDB0
fn000000000043BDB0_entry:
	rsp = fp
	// succ:  l000000000043BDB0
l000000000043BDB0:
	rax = Mem0[rcx:word64]
	r9 = 0x000000000043BE50<p64>
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rax - r9)
	branch Test(NE,Z) l000000000043BDD0
	// succ:  l000000000043BDC3 l000000000043BDD0
l000000000043BDC3:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000043BDB0_exit
l000000000043BDD0:
	call rax (retsize: 0;)
	return
	// succ:  fn000000000043BDB0_exit
fn000000000043BDB0_exit:


// fn000000000043BDE0
// Return size: 8
define fn000000000043BDE0
fn000000000043BDE0_entry:
	rsp = fp
	// succ:  l000000000043BDE0
l000000000043BDE0:
	rax = Mem0[rcx:word64]
	r9 = 0x000000000043BE50<p64>
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rax - r9)
	branch Test(NE,Z) l000000000043BE00
	// succ:  l000000000043BDF3 l000000000043BE00
l000000000043BDF3:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000043BDE0_exit
l000000000043BE00:
	call rax (retsize: 0;)
	return
	// succ:  fn000000000043BDE0_exit
fn000000000043BDE0_exit:


// fn000000000043BE10
// Return size: 8
define fn000000000043BE10
fn000000000043BE10_entry:
	rsp = fp
	// succ:  l000000000043BE10
l000000000043BE10:
	rax = Mem0[rcx:word64]
	r8 = 0x000000000043BE60<p64>
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - r8)
	branch Test(NE,Z) l000000000043BE25
	// succ:  l000000000043BE23 l000000000043BE25
l000000000043BE23:
	return
	// succ:  fn000000000043BE10_exit
l000000000043BE25:
	call rax (retsize: 0;)
	return
	// succ:  fn000000000043BE10_exit
fn000000000043BE10_exit:


// fn000000000043BE30
// Return size: 8
define fn000000000043BE30
fn000000000043BE30_entry:
	rsp = fp
	// succ:  l000000000043BE30
l000000000043BE30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdx = Mem0[rsp + 0x58<64>:word64]
	rbx = rcx
	call fn0000000000451F40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043BE30_exit
fn000000000043BE30_exit:


// fn000000000043BE50
// Return size: 8
define fn000000000043BE50
fn000000000043BE50_entry:
	rsp = fp
	// succ:  l000000000043BE50
l000000000043BE50:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000043BE50_exit
fn000000000043BE50_exit:


// fn000000000043BE60
// Return size: 8
define fn000000000043BE60
fn000000000043BE60_entry:
	rsp = fp
	// succ:  l000000000043BE60
l000000000043BE60:
	return
	// succ:  fn000000000043BE60_exit
fn000000000043BE60_exit:


// fn000000000043BE70
// Return size: 8
define fn000000000043BE70
fn000000000043BE70_entry:
	rsp = fp
	// succ:  l000000000043BE70
l000000000043BE70:
	rax = Mem0[rdx:word64]
	return
	// succ:  fn000000000043BE70_exit
fn000000000043BE70_exit:


// fn000000000043BE80
// Return size: 8
define fn000000000043BE80
fn000000000043BE80_entry:
	rsp = fp
	// succ:  l000000000043BE80
l000000000043BE80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = rsp + 0x2F<64>
	rbx = rcx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call fn0000000000448EB0 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043BE80_exit
fn000000000043BE80_exit:


// fn000000000043BEB0
// Return size: 8
define fn000000000043BEB0
fn000000000043BEB0_entry:
	rsp = fp
	// succ:  l000000000043BEB0
l000000000043BEB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0x68<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rcx
	ecx = Mem0[rsp + 0x60<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rbx
	call Mem0[rax + 0x18<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043BEB0_exit
fn000000000043BEB0_exit:


// fn000000000043BEE0
// Return size: 8
define fn000000000043BEE0
fn000000000043BEE0_entry:
	rsp = fp
	// succ:  l000000000043BEE0
l000000000043BEE0:
	rax = Mem0[rcx:word64]
	r9 = 0x000000000043BF80<p64>
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rax - r9)
	branch Test(NE,Z) l000000000043BF00
	// succ:  l000000000043BEF3 l000000000043BF00
l000000000043BEF3:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000043BEE0_exit
l000000000043BF00:
	call rax (retsize: 0;)
	return
	// succ:  fn000000000043BEE0_exit
fn000000000043BEE0_exit:


// fn000000000043BF10
// Return size: 8
define fn000000000043BF10
fn000000000043BF10_entry:
	rsp = fp
	// succ:  l000000000043BF10
l000000000043BF10:
	rax = Mem0[rcx:word64]
	r9 = 0x000000000043BF80<p64>
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rax - r9)
	branch Test(NE,Z) l000000000043BF30
	// succ:  l000000000043BF23 l000000000043BF30
l000000000043BF23:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000043BF10_exit
l000000000043BF30:
	call rax (retsize: 0;)
	return
	// succ:  fn000000000043BF10_exit
fn000000000043BF10_exit:


// fn000000000043BF40
// Return size: 8
define fn000000000043BF40
fn000000000043BF40_entry:
	rsp = fp
	// succ:  l000000000043BF40
l000000000043BF40:
	rax = Mem0[rcx:word64]
	r8 = 0x000000000043BF90<p64>
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - r8)
	branch Test(NE,Z) l000000000043BF55
	// succ:  l000000000043BF53 l000000000043BF55
l000000000043BF53:
	return
	// succ:  fn000000000043BF40_exit
l000000000043BF55:
	call rax (retsize: 0;)
	return
	// succ:  fn000000000043BF40_exit
fn000000000043BF40_exit:


// fn000000000043BF60
// Return size: 8
define fn000000000043BF60
fn000000000043BF60_entry:
	rsp = fp
	// succ:  l000000000043BF60
l000000000043BF60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdx = Mem0[rsp + 0x58<64>:word64]
	rbx = rcx
	call fn000000000044A950 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043BF60_exit
fn000000000043BF60_exit:


// fn000000000043BF80
// Return size: 8
define fn000000000043BF80
fn000000000043BF80_entry:
	rsp = fp
	// succ:  l000000000043BF80
l000000000043BF80:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000043BF80_exit
fn000000000043BF80_exit:


// fn000000000043BF90
// Return size: 8
define fn000000000043BF90
fn000000000043BF90_entry:
	rsp = fp
	// succ:  l000000000043BF90
l000000000043BF90:
	return
	// succ:  fn000000000043BF90_exit
fn000000000043BF90_exit:


// fn000000000043BFA0
// Return size: 8
define fn000000000043BFA0
fn000000000043BFA0_entry:
	rsp = fp
	// succ:  l000000000043BFA0
l000000000043BFA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043BFA0_exit
fn000000000043BFA0_exit:


// fn000000000043BFD0
// Return size: 8
define fn000000000043BFD0
fn000000000043BFD0_entry:
	rsp = fp
	// succ:  l000000000043BFD0
l000000000043BFD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043BFD0_exit
fn000000000043BFD0_exit:


// fn000000000043C000
// Return size: 8
define fn000000000043C000
fn000000000043C000_entry:
	rsp = fp
	// succ:  l000000000043C000
l000000000043C000:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C000_exit
fn000000000043C000_exit:


// fn000000000043C030
// Return size: 8
define fn000000000043C030
fn000000000043C030_entry:
	rsp = fp
	// succ:  l000000000043C030
l000000000043C030:
	rax = Mem0[rcx:word64]
	rdx = 0x000000000043C090<p64>
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l000000000043C050
	// succ:  l000000000043C043 l000000000043C050
l000000000043C043:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x48<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000043C030_exit
l000000000043C050:
	call rax (retsize: 0;)
	return
	// succ:  fn000000000043C030_exit
fn000000000043C030_exit:


// fn000000000043C060
// Return size: 8
define fn000000000043C060
fn000000000043C060_entry:
	rsp = fp
	// succ:  l000000000043C060
l000000000043C060:
	rax = Mem0[rcx:word64]
	rdx = 0x000000000043C0A0<p64>
	rax = Mem0[rax + 0x18<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l000000000043C080
	// succ:  l000000000043C073 l000000000043C080
l000000000043C073:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x49<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000043C060_exit
l000000000043C080:
	call rax (retsize: 0;)
	return
	// succ:  fn000000000043C060_exit
fn000000000043C060_exit:


// fn000000000043C090
// Return size: 8
define fn000000000043C090
fn000000000043C090_entry:
	rsp = fp
	// succ:  l000000000043C090
l000000000043C090:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x48<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000043C090_exit
fn000000000043C090_exit:


// fn000000000043C0A0
// Return size: 8
define fn000000000043C0A0
fn000000000043C0A0_entry:
	rsp = fp
	// succ:  l000000000043C0A0
l000000000043C0A0:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x49<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000043C0A0_exit
fn000000000043C0A0_exit:


// fn000000000043C0B0
// Return size: 8
define fn000000000043C0B0
fn000000000043C0B0_entry:
	rsp = fp
	// succ:  l000000000043C0B0
l000000000043C0B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x000000000043BFA0<p64>
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l000000000043C0F0
	// succ:  l000000000043C0CB l000000000043C0F0
l000000000043C0CB:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C0B0_exit
l000000000043C0F0:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C0B0_exit
fn000000000043C0B0_exit:


// fn000000000043C100
// Return size: 8
define fn000000000043C100
fn000000000043C100_entry:
	rsp = fp
	// succ:  l000000000043C100
l000000000043C100:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x000000000043BFD0<p64>
	rax = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l000000000043C140
	// succ:  l000000000043C11B l000000000043C140
l000000000043C11B:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C100_exit
l000000000043C140:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C100_exit
fn000000000043C100_exit:


// fn000000000043C150
// Return size: 8
define fn000000000043C150
fn000000000043C150_entry:
	rsp = fp
	// succ:  l000000000043C150
l000000000043C150:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x000000000043C000<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l000000000043C190
	// succ:  l000000000043C16B l000000000043C190
l000000000043C16B:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C150_exit
l000000000043C190:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C150_exit
fn000000000043C150_exit:


// fn000000000043C1A0
// Return size: 8
define fn000000000043C1A0
fn000000000043C1A0_entry:
	rsp = fp
	// succ:  l000000000043C1A0
l000000000043C1A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C1A0_exit
fn000000000043C1A0_exit:


// fn000000000043C1D0
// Return size: 8
define fn000000000043C1D0
fn000000000043C1D0_entry:
	rsp = fp
	// succ:  l000000000043C1D0
l000000000043C1D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C1D0_exit
fn000000000043C1D0_exit:


// fn000000000043C200
// Return size: 8
define fn000000000043C200
fn000000000043C200_entry:
	rsp = fp
	// succ:  l000000000043C200
l000000000043C200:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C200_exit
fn000000000043C200_exit:


// fn000000000043C230
// Return size: 8
define fn000000000043C230
fn000000000043C230_entry:
	rsp = fp
	// succ:  l000000000043C230
l000000000043C230:
	rax = Mem0[rcx:word64]
	rdx = 0x000000000043C290<p64>
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l000000000043C250
	// succ:  l000000000043C243 l000000000043C250
l000000000043C243:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x48<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000043C230_exit
l000000000043C250:
	call rax (retsize: 0;)
	return
	// succ:  fn000000000043C230_exit
fn000000000043C230_exit:


// fn000000000043C260
// Return size: 8
define fn000000000043C260
fn000000000043C260_entry:
	rsp = fp
	// succ:  l000000000043C260
l000000000043C260:
	rax = Mem0[rcx:word64]
	rdx = 0x000000000043C2A0<p64>
	rax = Mem0[rax + 0x18<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l000000000043C280
	// succ:  l000000000043C273 l000000000043C280
l000000000043C273:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x4A<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000043C260_exit
l000000000043C280:
	call rax (retsize: 0;)
	return
	// succ:  fn000000000043C260_exit
fn000000000043C260_exit:


// fn000000000043C290
// Return size: 8
define fn000000000043C290
fn000000000043C290_entry:
	rsp = fp
	// succ:  l000000000043C290
l000000000043C290:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x48<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000043C290_exit
fn000000000043C290_exit:


// fn000000000043C2A0
// Return size: 8
define fn000000000043C2A0
fn000000000043C2A0_entry:
	rsp = fp
	// succ:  l000000000043C2A0
l000000000043C2A0:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x4A<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000043C2A0_exit
fn000000000043C2A0_exit:


// fn000000000043C2B0
// Return size: 8
define fn000000000043C2B0
fn000000000043C2B0_entry:
	rsp = fp
	// succ:  l000000000043C2B0
l000000000043C2B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x000000000043C1A0<p64>
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l000000000043C2F0
	// succ:  l000000000043C2CB l000000000043C2F0
l000000000043C2CB:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C2B0_exit
l000000000043C2F0:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C2B0_exit
fn000000000043C2B0_exit:


// fn000000000043C300
// Return size: 8
define fn000000000043C300
fn000000000043C300_entry:
	rsp = fp
	// succ:  l000000000043C300
l000000000043C300:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x000000000043C1D0<p64>
	rax = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l000000000043C340
	// succ:  l000000000043C31B l000000000043C340
l000000000043C31B:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C300_exit
l000000000043C340:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C300_exit
fn000000000043C300_exit:


// fn000000000043C350
// Return size: 8
define fn000000000043C350
fn000000000043C350_entry:
	rsp = fp
	// succ:  l000000000043C350
l000000000043C350:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x000000000043C200<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l000000000043C390
	// succ:  l000000000043C36B l000000000043C390
l000000000043C36B:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C350_exit
l000000000043C390:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C350_exit
fn000000000043C350_exit:


// fn000000000043C3A0
// Return size: 8
define fn000000000043C3A0
fn000000000043C3A0_entry:
	rsp = fp
	// succ:  l000000000043C3A0
l000000000043C3A0:
	rax = Mem0[rcx:word64]
	rdx = 0x000000000043C910<p64>
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l000000000043C3C0
	// succ:  l000000000043C3B3 l000000000043C3C0
l000000000043C3B3:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000043C3A0_exit
l000000000043C3C0:
	call rax (retsize: 0;)
	return
	// succ:  fn000000000043C3A0_exit
fn000000000043C3A0_exit:


// fn000000000043C3D0
// Return size: 8
define fn000000000043C3D0
fn000000000043C3D0_entry:
	rsp = fp
	// succ:  l000000000043C3D0
l000000000043C3D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x78<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp + 0xE0<64>:word64]
	rbp = Mem0[r8:word64]
	r15 = Mem0[r8 + 8<64>:word64]
	r12 = Mem0[r9:word64]
	rdi = rcx
	r14 = Mem0[r9 + 8<64>:word64]
	rsi = rdx
	r13 = Mem0[rsp + 0xE8<64>:word64]
	rcx = rbx + 0xD0<64>
	call fn0000000000472F00 (retsize: 8;)
	Mem0[rsp + 0x50<64>:word64] = rbp
	Mem0[rsp + 0x58<64>:word64] = r15
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x40<64>:word64] = r12
	Mem0[rsp + 0x48<64>:word64] = r14
	r9 = rsp + 0x40<64>
	rax = Mem0[rax + 0x10<64>:word64]
	r8 = rsp + 0x50<64>
	rdx = rsi
	rax = Mem0[rax + 0x10<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rbx
	Mem0[rsp + 0x28<64>:word64] = r13
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = Mem0[rsp + 0xF0<64>:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	call fn000000000043D6C0 (retsize: 8;)
	rdx = Mem0[rsp + 0x68<64>:word64]
	rbx = Mem0[rsp + 0x60<64>:word64]
	rax = 0xFFFFFFFF00000000<64>
	rax = rax & r15
	SZO = cond(rax)
	C = false
	ebp = edx
	rbp = CONVERT(ebp, word32, uint64)
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	rbp = rbp | rax
	SZO = cond(rbp)
	C = false
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000043C510
	// succ:  l000000000043C486 l000000000043C510
l000000000043C486:
	SCZO = cond(edx - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043C4D2
	// succ:  l000000000043C48B l000000000043C4D2
l000000000043C48B:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l000000000043C4A5
	// succ:  l000000000043C490 l000000000043C4A5
l000000000043C490:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	// succ:  l000000000043C493
l000000000043C493:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r14d - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043C4E1
	// succ:  l000000000043C49B l000000000043C4E1
l000000000043C49B:
	SCZO = cond(r15b - al)
	branch Test(NE,Z) l000000000043C4A5
	// succ:  l000000000043C4A0 l000000000043C4A5
l000000000043C4A0:
	v28 = Mem0[r13 + 0<64>:word32] | 2<32>
	Mem0[r13 + 0<64>:word32] = v28
	SZO = cond(Mem0[r13 + 0<64>:word32])
	C = false
	// succ:  l000000000043C4A5
l000000000043C4A5:
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	rsi = 0xFFFFFFFF00000000<64>
	rax = rdi
	rsi = rsi & rbp
	SZO = cond(rsi)
	C = false
	Mem0[rdi:word64] = rbx
	rsi = rsi | rdx
	SZO = cond(rsi)
	C = false
	Mem0[rdi + 8<64>:word64] = rsi
	rsp = rsp + 0x78<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C3D0_exit
l000000000043C4D2:
	rax = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043C522
	// succ:  l000000000043C4DC l000000000043C522
l000000000043C4DC:
	esi = CONVERT(Mem0[rax:byte], byte, word32)
	rsi = CONVERT(esi, word32, uint64)
	goto l000000000043C48B
	// succ:  l000000000043C48B
l000000000043C4E1:
	rax = Mem0[r12 + 0x18<64>:word64]
	SCZO = cond(Mem0[r12 + 0x10<64>:word64] - rax)
	branch Test(UGE,C) l000000000043C4F1
	// succ:  l000000000043C4ED l000000000043C4F1
l000000000043C4ED:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000043C49B
	// succ:  l000000000043C49B
l000000000043C4F1:
	rax = Mem0[r12:word64]
	rcx = r12
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000043C4ED
	// succ:  l000000000043C500 l000000000043C4ED
l000000000043C500:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043C49B
	// succ:  l000000000043C49B
l000000000043C510:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l000000000043C4A0
	// succ:  l000000000043C517 l000000000043C4A0
l000000000043C517:
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l000000000043C493
	// succ:  l000000000043C493
l000000000043C522:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043C510
	// succ:  l000000000043C530 l000000000043C510
l000000000043C530:
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	goto l000000000043C48B
	// succ:  l000000000043C48B
fn000000000043C3D0_exit:


// fn000000000043C540
// Return size: 8
define fn000000000043C540
fn000000000043C540_entry:
	rsp = fp
	// succ:  l000000000043C540
l000000000043C540:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x78<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp + 0xE0<64>:word64]
	rbp = Mem0[r8:word64]
	r15 = Mem0[r8 + 8<64>:word64]
	r12 = Mem0[r9:word64]
	rdi = rcx
	r14 = Mem0[r9 + 8<64>:word64]
	rsi = rdx
	r13 = Mem0[rsp + 0xE8<64>:word64]
	rcx = rbx + 0xD0<64>
	call fn0000000000472F00 (retsize: 8;)
	Mem0[rsp + 0x50<64>:word64] = rbp
	Mem0[rsp + 0x58<64>:word64] = r15
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x40<64>:word64] = r12
	Mem0[rsp + 0x48<64>:word64] = r14
	r9 = rsp + 0x40<64>
	rax = Mem0[rax + 0x10<64>:word64]
	r8 = rsp + 0x50<64>
	rdx = rsi
	rax = Mem0[rax + 0x20<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rbx
	Mem0[rsp + 0x28<64>:word64] = r13
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = Mem0[rsp + 0xF0<64>:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	call fn000000000043D6C0 (retsize: 8;)
	rdx = Mem0[rsp + 0x68<64>:word64]
	rbx = Mem0[rsp + 0x60<64>:word64]
	rax = 0xFFFFFFFF00000000<64>
	rax = rax & r15
	SZO = cond(rax)
	C = false
	ebp = edx
	rbp = CONVERT(ebp, word32, uint64)
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	rbp = rbp | rax
	SZO = cond(rbp)
	C = false
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000043C680
	// succ:  l000000000043C5F6 l000000000043C680
l000000000043C5F6:
	SCZO = cond(edx - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043C642
	// succ:  l000000000043C5FB l000000000043C642
l000000000043C5FB:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l000000000043C615
	// succ:  l000000000043C600 l000000000043C615
l000000000043C600:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	// succ:  l000000000043C603
l000000000043C603:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r14d - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043C651
	// succ:  l000000000043C60B l000000000043C651
l000000000043C60B:
	SCZO = cond(r15b - al)
	branch Test(NE,Z) l000000000043C615
	// succ:  l000000000043C610 l000000000043C615
l000000000043C610:
	v28 = Mem0[r13 + 0<64>:word32] | 2<32>
	Mem0[r13 + 0<64>:word32] = v28
	SZO = cond(Mem0[r13 + 0<64>:word32])
	C = false
	// succ:  l000000000043C615
l000000000043C615:
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	rsi = 0xFFFFFFFF00000000<64>
	rax = rdi
	rsi = rsi & rbp
	SZO = cond(rsi)
	C = false
	Mem0[rdi:word64] = rbx
	rsi = rsi | rdx
	SZO = cond(rsi)
	C = false
	Mem0[rdi + 8<64>:word64] = rsi
	rsp = rsp + 0x78<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C540_exit
l000000000043C642:
	rax = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043C692
	// succ:  l000000000043C64C l000000000043C692
l000000000043C64C:
	esi = CONVERT(Mem0[rax:byte], byte, word32)
	rsi = CONVERT(esi, word32, uint64)
	goto l000000000043C5FB
	// succ:  l000000000043C5FB
l000000000043C651:
	rax = Mem0[r12 + 0x18<64>:word64]
	SCZO = cond(Mem0[r12 + 0x10<64>:word64] - rax)
	branch Test(UGE,C) l000000000043C661
	// succ:  l000000000043C65D l000000000043C661
l000000000043C65D:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000043C60B
	// succ:  l000000000043C60B
l000000000043C661:
	rax = Mem0[r12:word64]
	rcx = r12
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000043C65D
	// succ:  l000000000043C670 l000000000043C65D
l000000000043C670:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043C60B
	// succ:  l000000000043C60B
l000000000043C680:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l000000000043C610
	// succ:  l000000000043C687 l000000000043C610
l000000000043C687:
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l000000000043C603
	// succ:  l000000000043C603
l000000000043C692:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043C680
	// succ:  l000000000043C6A0 l000000000043C680
l000000000043C6A0:
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	goto l000000000043C5FB
	// succ:  l000000000043C5FB
fn000000000043C540_exit:


// fn000000000043C6B0
// Return size: 8
define fn000000000043C6B0
fn000000000043C6B0_entry:
	rsp = fp
	// succ:  l000000000043C6B0
l000000000043C6B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x98<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp + 0x100<64>:word64]
	r14 = Mem0[r8 + 8<64>:word64]
	rsi = rcx
	rdi = rdx
	r15 = Mem0[r8:word64]
	rbp = Mem0[r9:word64]
	r13 = Mem0[r9 + 8<64>:word64]
	rcx = rbx + 0xD0<64>
	r12 = Mem0[rsp + 0x108<64>:word64]
	call fn0000000000472FC0 (retsize: 8;)
	rax = rsp + 0x8C<64>
	r8 = rsp + 0x60<64>
	rcx = rsp + 0x70<64>
	r9 = rsp + 0x50<64>
	rdx = rdi
	Mem0[rsp + 0x40<64>:word64] = rbx
	Mem0[rsp + 0x48<64>:word64] = rax
	rax = rsp + 0x88<64>
	Mem0[rsp + 0x38<64>:word64] = 4<64>
	Mem0[rsp + 0x30<64>:word32] = 0x270F<32>
	Mem0[rsp + 0x28<64>:word32] = 0<32>
	Mem0[rsp + 0x20<64>:word64] = rax
	Mem0[rsp + 0x68<64>:word64] = r14
	Mem0[rsp + 0x8C<64>:word32] = 0<32>
	Mem0[rsp + 0x60<64>:word64] = r15
	Mem0[rsp + 0x50<64>:word64] = rbp
	Mem0[rsp + 0x58<64>:word64] = r13
	call fn000000000043C990 (retsize: 8;)
	rdx = Mem0[rsp + 0x78<64>:word64]
	rax = 0xFFFFFFFF00000000<64>
	r8 = Mem0[rsp + 0x70<64>:word64]
	rax = rax & r14
	SZO = cond(rax)
	C = false
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	r14 = r8
	ebx = edx
	rbx = CONVERT(ebx, word32, uint64)
	rdi = rdi | rax
	SZO = cond(rdi)
	C = false
	eax = Mem0[rsp + 0x8C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000043C810
	// succ:  l000000000043C791 l000000000043C810
l000000000043C791:
	ecx = Mem0[rsp + 0x88<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	r9d = SLICE(rcx + 0x64<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	eax = SLICE(rcx - 0x76C<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	rcx = Mem0[rsp + 0x110<64>:word64]
	branch Test(NS,S) l000000000043C7B0
	// succ:  l000000000043C7AC_1 l000000000043C7B0
l000000000043C7AC_1:
	eax = r9d
	// succ:  l000000000043C7B0
l000000000043C7B0:
	Mem0[rcx + 0x14<64>:word32] = eax
	// succ:  l000000000043C7B3
l000000000043C7B3:
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l000000000043C860
	// succ:  l000000000043C7BC l000000000043C860
l000000000043C7BC:
	SCZO = cond(edx - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043C820
	// succ:  l000000000043C7C1 l000000000043C820
l000000000043C7C1:
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000043C7DB
	// succ:  l000000000043C7C6 l000000000043C7DB
l000000000043C7C6:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	// succ:  l000000000043C7C9
l000000000043C7C9:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r13d - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043C830
	// succ:  l000000000043C7D1 l000000000043C830
l000000000043C7D1:
	SCZO = cond(r15b - al)
	branch Test(NE,Z) l000000000043C7DB
	// succ:  l000000000043C7D6 l000000000043C7DB
l000000000043C7D6:
	v32 = Mem0[r12:word32] | 2<32>
	Mem0[r12:word32] = v32
	SZO = cond(Mem0[r12:word32])
	C = false
	// succ:  l000000000043C7DB
l000000000043C7DB:
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	rbx = 0xFFFFFFFF00000000<64>
	rax = rsi
	rbx = rbx & rdi
	SZO = cond(rbx)
	C = false
	Mem0[rsi:word64] = r14
	rbx = rbx | rdx
	SZO = cond(rbx)
	C = false
	Mem0[rsi + 8<64>:word64] = rbx
	rsp = rsp + 0x98<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C6B0_exit
l000000000043C810:
	v27 = Mem0[r12:word32] | 4<32>
	Mem0[r12:word32] = v27
	SZO = cond(Mem0[r12:word32])
	C = false
	goto l000000000043C7B3
	// succ:  l000000000043C7B3
l000000000043C820:
	rax = Mem0[r8 + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[r8 + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043C880
	// succ:  l000000000043C82A l000000000043C880
l000000000043C82A:
	ebx = CONVERT(Mem0[rax:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000043C7C1
	// succ:  l000000000043C7C1
l000000000043C830:
	rax = Mem0[rbp + 0x18<64>:word64]
	SCZO = cond(Mem0[rbp + 0x10<64>:word64] - rax)
	branch Test(UGE,C) l000000000043C840
	// succ:  l000000000043C83A l000000000043C840
l000000000043C83A:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000043C7D1
	// succ:  l000000000043C7D1
l000000000043C840:
	rax = Mem0[rbp + 0<64>:word64]
	rcx = rbp
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000043C83A
	// succ:  l000000000043C84F l000000000043C83A
l000000000043C84F:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043C7D1
	// succ:  l000000000043C7D1
l000000000043C860:
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000043C7D6
	// succ:  l000000000043C86C l000000000043C7D6
l000000000043C86C:
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l000000000043C7C9
	// succ:  l000000000043C7C9
l000000000043C880:
	rax = Mem0[r8:word64]
	rcx = r8
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043C860
	// succ:  l000000000043C88E l000000000043C860
l000000000043C88E:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000043C7C1
	// succ:  l000000000043C7C1
fn000000000043C6B0_exit:


// fn000000000043C8A0
// Return size: 8
define fn000000000043C8A0
fn000000000043C8A0_entry:
	rsp = fp
	// succ:  l000000000043C8A0
l000000000043C8A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x28<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C8A0_exit
fn000000000043C8A0_exit:


// fn000000000043C910
// Return size: 8
define fn000000000043C910
fn000000000043C910_entry:
	rsp = fp
	// succ:  l000000000043C910
l000000000043C910:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000043C910_exit
fn000000000043C910_exit:


// fn000000000043C920
// Return size: 8
define fn000000000043C920
fn000000000043C920_entry:
	rsp = fp
	// succ:  l000000000043C920
l000000000043C920:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C920_exit
fn000000000043C920_exit:


// fn000000000043C990
// Return size: 8
define fn000000000043C990
fn000000000043C990_entry:
	rsp = fp
	// succ:  l000000000043C990
l000000000043C990:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rax = Mem0[r8 + 8<64>:word64]
	r10d = Mem0[r9 + 8<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	ebx = 0xA<32>
	rbx = CONVERT(ebx, word32, uint64)
	Mem0[rsp + 0x90<64>:word64] = rcx
	r14 = Mem0[r9:word64]
	r15d = Mem0[rsp + 0xC0<64>:word32]
	r15 = CONVERT(r15d, word32, uint64)
	rsi = Mem0[r8:word64]
	Mem0[rsp + 0x28<64>:word64] = rax
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	rax = Mem0[rsp + 0xD0<64>:word64]
	Mem0[rsp + 0x34<64>:word32] = r10d
	rcx = rax + 0xD0<64>
	call fn0000000000472FC0 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0xC8<64>:word64] - 2<64>)
	r9 = rax
	r10d = Mem0[rsp + 0x34<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	branch Test(EQ,Z) l000000000043CA0B
	// succ:  l000000000043C9F6 l000000000043CA0B
l000000000043C9F6:
	SCZO = cond(Mem0[rsp + 0xC8<64>:word64] - 4<64>)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	bx = 0x3E8<16>
	branch Test(EQ,Z) l000000000043CA0B
	// succ:  l000000000043CA08_1 l000000000043CA0B
l000000000043CA08_1:
	ebx = eax
	// succ:  l000000000043CA0B
l000000000043CA0B:
	Mem0[rsp + 0xC0<64>:word32] = r15d
	r15 = r9
	r9d = Mem0[rsp + 0xC0<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r11d = 0x66666667<32>
	r11 = CONVERT(r11d, word32, uint64)
	// succ:  l000000000043CA30
l000000000043CA30:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000043CC81
	// succ:  l000000000043CA39 l000000000043CC81
l000000000043CA39:
	SCZO = cond(edi - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043CB80
	// succ:  l000000000043CA42 l000000000043CB80
l000000000043CA42:
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l000000000043CD31
	// succ:  l000000000043CA4B l000000000043CD31
l000000000043CA4B:
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	// succ:  l000000000043CA4E
l000000000043CA4E:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r10d - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043CB60
	// succ:  l000000000043CA5A l000000000043CB60
l000000000043CA5A:
	SCZO = cond(al - r12b)
	branch Test(NE,Z) l000000000043CAC1
	// succ:  l000000000043CA5F l000000000043CAC1
l000000000043CA5F:
	SCZO = cond(Mem0[rsp + 0xC8<64>:word64] - r13)
	branch Test(EQ,Z) l000000000043CA85
	// succ:  l000000000043CA69 l000000000043CA85
l000000000043CA69:
	SCZO = cond(r13 - 2<64>)
	branch Test(NE,Z) l000000000043CCA0
	// succ:  l000000000043CA73 l000000000043CCA0
l000000000043CA73:
	SCZO = cond(Mem0[rsp + 0xC8<64>:word64] - 4<64>)
	branch Test(NE,Z) l000000000043CCA0
	// succ:  l000000000043CA82 l000000000043CCA0
l000000000043CA82:
	ebp = ebp - 0x64<32>
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	// succ:  l000000000043CA85
l000000000043CA85:
	rax = Mem0[rsp + 0xB0<64>:word64]
	Mem0[rax:word32] = ebp
	// succ:  l000000000043CA8F
l000000000043CA8F:
	rax = 0xFFFFFFFF00000000<64>
	rax = rax & Mem0[rsp + 0x28<64>:word64]
	SZO = cond(rax)
	C = false
	rdi = rdi | rax
	SZO = cond(rdi)
	C = false
	rax = Mem0[rsp + 0x90<64>:word64]
	Mem0[rax:word64] = rsi
	Mem0[rax + 8<64>:word64] = rdi
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043C990_exit
l000000000043CAC1:
	SCZO = cond(r13 - Mem0[rsp + 0xC8<64>:word64])
	branch Test(UGE,C) l000000000043CA5F
	// succ:  l000000000043CACB l000000000043CA5F
l000000000043CACB:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000043CD44
	// succ:  l000000000043CAD4 l000000000043CD44
l000000000043CAD4:
	SCZO = cond(edi - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043CBA0
	// succ:  l000000000043CADD l000000000043CBA0
l000000000043CADD:
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	r12d = CONVERT(dil, byte, word32)
	r12 = CONVERT(r12d, word32, uint64)
	// succ:  l000000000043CAE3
l000000000043CAE3:
	ecx = CONVERT(Mem0[r15 + 0x139<64>:byte], byte, int32)
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000043CBC0
	// succ:  l000000000043CAF4 l000000000043CBC0
l000000000043CAF4:
	eax = SLICE(rcx - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 9<8>)
	branch Test(UGT,CZ) l000000000043CA5F
	// succ:  l000000000043CAFF l000000000043CA5F
l000000000043CAFF:
	eax = SLICE(rbp + 0<64> + rbp * 4<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	ebp = SLICE(rcx - 0x30<64> + rax * 2<64>, word32, 0)
	rbp = CONVERT(ebp, word32, uint64)
	eax = ebp
	rax = CONVERT(eax, word32, uint64)
	eax = eax *s ebx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - r9d)
	branch Test(GT,SZO) l000000000043CA5F
	// succ:  l000000000043CB15 l000000000043CA5F
l000000000043CB15:
	eax = eax + ebx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(Mem0[rsp + 0xB8<64>:word32] - eax)
	branch Test(GE,SO) l000000000043CA5F
	// succ:  l000000000043CB24 l000000000043CA5F
l000000000043CB24:
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	ebx = ebx >> 0x1F<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	edx_eax = r11d *s eax
	SCZO = cond(edx_eax)
	edx = edx >> 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx - ebx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SZO = cond(rsi & rsi)
	C = false
	ebx = edx
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(EQ,Z) l000000000043CB53
	// succ:  l000000000043CB38 l000000000043CB53
l000000000043CB38:
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043CBF0
	// succ:  l000000000043CB46 l000000000043CBF0
l000000000043CB46:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsi + 0x10<64>:word64] = rax
	// succ:  l000000000043CB4E
l000000000043CB4E:
	edi = 0xFFFFFFFF<32>
	rdi = CONVERT(edi, word32, uint64)
	// succ:  l000000000043CB53
l000000000043CB53:
	r13 = r13 + 1<64>
	SCZO = cond(r13)
	goto l000000000043CA30
	// succ:  l000000000043CA30
l000000000043CB60:
	rax = Mem0[r14 + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[r14 + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043CCB0
	// succ:  l000000000043CB6E l000000000043CCB0
l000000000043CB6E:
	r10d = CONVERT(Mem0[rax:byte], byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	// succ:  l000000000043CB72
l000000000043CB72:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000043CA5A
	// succ:  l000000000043CA5A
l000000000043CB80:
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043CC51
	// succ:  l000000000043CB8E l000000000043CC51
l000000000043CB8E:
	edi = CONVERT(Mem0[rax:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	goto l000000000043CA42
	// succ:  l000000000043CA42
l000000000043CBA0:
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043CCF0
	// succ:  l000000000043CBAE l000000000043CCF0
l000000000043CBAE:
	edi = CONVERT(Mem0[rax:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	goto l000000000043CADD
	// succ:  l000000000043CADD
l000000000043CBC0:
	rax = Mem0[r15:word64]
	ecx = CONVERT(dl, byte, int32)
	rdx = 0x000000000042B620<p64>
	rax = Mem0[rax + 0x40<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l000000000043CC20
	// succ:  l000000000043CBD6 l000000000043CC20
l000000000043CBD6:
	SCZO = cond(cl - 0x2A<8>)
	branch Test(EQ,Z) l000000000043CA5F
	// succ:  l000000000043CBDF l000000000043CA5F
l000000000043CBDF:
	Mem0[r15 + 0x139<64>:byte] = cl
	goto l000000000043CAF4
	// succ:  l000000000043CAF4
l000000000043CBF0:
	rax = Mem0[rsi:word64]
	Mem0[rsp + 0x3C<64>:word32] = r9d
	rcx = rsi
	Mem0[rsp + 0x38<64>:word32] = r10d
	Mem0[rsp + 0x34<64>:word32] = r11d
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	r9d = Mem0[rsp + 0x3C<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	r10d = Mem0[rsp + 0x38<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	r11d = Mem0[rsp + 0x34<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	goto l000000000043CB4E
	// succ:  l000000000043CB4E
l000000000043CC20:
	Mem0[rsp + 0x3C<64>:word32] = r9d
	Mem0[rsp + 0x38<64>:word32] = r10d
	edx = CONVERT(cl, byte, int32)
	Mem0[rsp + 0x34<64>:word32] = r11d
	rcx = r15
	r8d = 0x2A<32>
	r8 = CONVERT(r8d, word32, uint64)
	call rax (retsize: 8;)
	r9d = Mem0[rsp + 0x3C<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	ecx = CONVERT(al, byte, int32)
	r10d = Mem0[rsp + 0x38<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	r11d = Mem0[rsp + 0x34<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	goto l000000000043CBD6
	// succ:  l000000000043CBD6
l000000000043CC51:
	rax = Mem0[rsi:word64]
	Mem0[rsp + 0x3C<64>:word32] = r9d
	rcx = rsi
	Mem0[rsp + 0x38<64>:word32] = r10d
	Mem0[rsp + 0x34<64>:word32] = r11d
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	r11d = Mem0[rsp + 0x34<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	r10d = Mem0[rsp + 0x38<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	r9d = Mem0[rsp + 0x3C<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	branch Test(NE,Z) l000000000043CD54
	// succ:  l000000000043CC81 l000000000043CD54
l000000000043CC81:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l000000000043CA5F
	// succ:  l000000000043CC8C l000000000043CA5F
l000000000043CC8C:
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	goto l000000000043CA4E
	// succ:  l000000000043CA4E
l000000000043CCA0:
	rax = Mem0[rsp + 0xD8<64>:word64]
	v36 = Mem0[rax:word32] | 4<32>
	Mem0[rax:word32] = v36
	SZO = cond(Mem0[rax:word32])
	C = false
	goto l000000000043CA8F
	// succ:  l000000000043CA8F
l000000000043CCB0:
	rax = Mem0[r14:word64]
	Mem0[rsp + 0x38<64>:word32] = r9d
	rcx = r14
	Mem0[rsp + 0x34<64>:word32] = r11d
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	r10d = eax
	r10 = CONVERT(r10d, word32, uint64)
	r11d = Mem0[rsp + 0x34<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	r9d = Mem0[rsp + 0x38<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	branch Test(NE,Z) l000000000043CB72
	// succ:  l000000000043CCD9 l000000000043CB72
l000000000043CCD9:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	goto l000000000043CA5A
	// succ:  l000000000043CA5A
l000000000043CCF0:
	rax = Mem0[rsi:word64]
	Mem0[rsp + 0x3C<64>:word32] = r9d
	rcx = rsi
	Mem0[rsp + 0x38<64>:word32] = r10d
	Mem0[rsp + 0x34<64>:word32] = r11d
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	r11d = Mem0[rsp + 0x34<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	r10d = Mem0[rsp + 0x38<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(edi - 0xFFFFFFFF<32>)
	r9d = Mem0[rsp + 0x3C<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	branch Test(NE,Z) l000000000043CADD
	// succ:  l000000000043CD22 l000000000043CADD
l000000000043CD22:
	r12d = 0xFF<32>
	r12 = CONVERT(r12d, word32, uint64)
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l000000000043CAE3
	// succ:  l000000000043CAE3
l000000000043CD31:
	SCZO = cond(r13 - Mem0[rsp + 0xC8<64>:word64])
	branch Test(UGE,C) l000000000043CA5F
	// succ:  l000000000043CD3F l000000000043CA5F
l000000000043CD3F:
	goto l000000000043CADD
	// succ:  l000000000043CADD
l000000000043CD44:
	r12d = 0xFF<32>
	r12 = CONVERT(r12d, word32, uint64)
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000043CAE3
	// succ:  l000000000043CAE3
l000000000043CD54:
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	goto l000000000043CA42
	// succ:  l000000000043CA42
fn000000000043C990_exit:


// fn000000000043CD60
// Return size: 8
define fn000000000043CD60
fn000000000043CD60_entry:
	rsp = fp
	// succ:  l000000000043CD60
l000000000043CD60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x108<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0x170<64>:word64]
	r14 = Mem0[r8 + 8<64>:word64]
	rsi = rcx
	r13 = Mem0[r8:word64]
	r15 = rdx
	rdi = Mem0[r9:word64]
	r12 = Mem0[r9 + 8<64>:word64]
	rbp = rax + 0xD0<64>
	rcx = rbp
	call fn0000000000472F00 (retsize: 8;)
	rcx = rbp
	rbx = rax
	call fn0000000000472FC0 (retsize: 8;)
	rax = Mem0[rbx + 0x10<64>:word64]
	rcx = rsp + 0x70<64>
	r9 = rsp + 0x50<64>
	r8 = rsp + 0x60<64>
	rdx = Mem0[rax + 0x90<64>:word64]
	Mem0[rsp + 0x90<64>:word64] = rdx
	rdx = Mem0[rax + 0x98<64>:word64]
	rax = Mem0[rax + 0xA0<64>:word64]
	Mem0[rsp + 0x98<64>:word64] = rdx
	rdx = r15
	Mem0[rsp + 0xA0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xA8<64>:word64]
	Mem0[rsp + 0xA8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xB0<64>:word64]
	Mem0[rsp + 0xB0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xB8<64>:word64]
	Mem0[rsp + 0xB8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xC0<64>:word64]
	Mem0[rsp + 0xC0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x58<64>:word64]
	Mem0[rsp + 0xC8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x60<64>:word64]
	Mem0[rsp + 0xD0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x68<64>:word64]
	Mem0[rsp + 0xD8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x70<64>:word64]
	Mem0[rsp + 0xE0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x78<64>:word64]
	Mem0[rsp + 0xE8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	Mem0[rsp + 0x8C<64>:word32] = 0<32>
	rax = Mem0[rax + 0x80<64>:word64]
	Mem0[rsp + 0xF0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x88<64>:word64]
	Mem0[rsp + 0x30<64>:word64] = 7<64>
	Mem0[rsp + 0x60<64>:word64] = r13
	Mem0[rsp + 0x68<64>:word64] = r14
	Mem0[rsp + 0x50<64>:word64] = rdi
	Mem0[rsp + 0x58<64>:word64] = r12
	Mem0[rsp + 0xF8<64>:word64] = rax
	rax = rsp + 0x8C<64>
	Mem0[rsp + 0x40<64>:word64] = rax
	rax = Mem0[rsp + 0x170<64>:word64]
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = rsp + 0x90<64>
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = rsp + 0x88<64>
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn000000000043EA80 (retsize: 8;)
	rdx = Mem0[rsp + 0x78<64>:word64]
	rax = 0xFFFFFFFF00000000<64>
	rcx = Mem0[rsp + 0x70<64>:word64]
	rax = rax & r14
	SZO = cond(rax)
	C = false
	r13d = edx
	r13 = CONVERT(r13d, word32, uint64)
	r14 = rcx
	ebx = edx
	rbx = CONVERT(ebx, word32, uint64)
	r13 = r13 | rax
	SZO = cond(r13)
	C = false
	eax = Mem0[rsp + 0x8C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000043CFB0
	// succ:  l000000000043CF3C l000000000043CFB0
l000000000043CF3C:
	r8d = Mem0[rsp + 0x88<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rax = Mem0[rsp + 0x180<64>:word64]
	Mem0[rax + 0x18<64>:word32] = r8d
	// succ:  l000000000043CF50
l000000000043CF50:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043D000
	// succ:  l000000000043CF59 l000000000043D000
l000000000043CF59:
	SCZO = cond(edx - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043CFC0
	// succ:  l000000000043CF5E l000000000043CFC0
l000000000043CF5E:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000043CF7E
	// succ:  l000000000043CF63 l000000000043CF7E
l000000000043CF63:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	// succ:  l000000000043CF66
l000000000043CF66:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r12d - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043CFD0
	// succ:  l000000000043CF6E l000000000043CFD0
l000000000043CF6E:
	SCZO = cond(r15b - al)
	branch Test(NE,Z) l000000000043CF7E
	// succ:  l000000000043CF73 l000000000043CF7E
l000000000043CF73:
	rax = Mem0[rsp + 0x178<64>:word64]
	v29 = Mem0[rax:word32] | 2<32>
	Mem0[rax:word32] = v29
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l000000000043CF7E
l000000000043CF7E:
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	rbx = 0xFFFFFFFF00000000<64>
	rax = rsi
	rbx = rbx & r13
	SZO = cond(rbx)
	C = false
	Mem0[rsi:word64] = r14
	rbx = rbx | rdx
	SZO = cond(rbx)
	C = false
	Mem0[rsi + 8<64>:word64] = rbx
	rsp = rsp + 0x108<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043CD60_exit
l000000000043CFB0:
	rax = Mem0[rsp + 0x178<64>:word64]
	v30 = Mem0[rax:word32] | 4<32>
	Mem0[rax:word32] = v30
	SZO = cond(Mem0[rax:word32])
	C = false
	goto l000000000043CF50
	// succ:  l000000000043CF50
l000000000043CFC0:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043D020
	// succ:  l000000000043CFCA l000000000043D020
l000000000043CFCA:
	ebx = CONVERT(Mem0[rax:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000043CF5E
	// succ:  l000000000043CF5E
l000000000043CFD0:
	rax = Mem0[rdi + 0x18<64>:word64]
	SCZO = cond(Mem0[rdi + 0x10<64>:word64] - rax)
	branch Test(UGE,C) l000000000043CFE0
	// succ:  l000000000043CFDA l000000000043CFE0
l000000000043CFDA:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000043CF6E
	// succ:  l000000000043CF6E
l000000000043CFE0:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000043CFDA
	// succ:  l000000000043CFEE l000000000043CFDA
l000000000043CFEE:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043CF6E
	// succ:  l000000000043CF6E
l000000000043D000:
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000043CF73
	// succ:  l000000000043D00C l000000000043CF73
l000000000043D00C:
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l000000000043CF66
	// succ:  l000000000043CF66
l000000000043D020:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043D000
	// succ:  l000000000043D02B l000000000043D000
l000000000043D02B:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000043CF5E
	// succ:  l000000000043CF5E
fn000000000043CD60_exit:


// fn000000000043D040
// Return size: 8
define fn000000000043D040
fn000000000043D040_entry:
	rsp = fp
	// succ:  l000000000043D040
l000000000043D040:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x68<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	rax = Mem0[r8:word64]
	rdx = Mem0[r8 + 8<64>:word64]
	rdi = Mem0[rbp + 0x60<64>:word64]
	Mem0[rbp + 0x30<64>:word64] = rcx
	r13 = Mem0[rbp + 0x58<64>:word64]
	rsi = Mem0[rbp + 0x70<64>:word64]
	Mem0[rbp - 0x30<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rbp - 0x28<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rbp - 0x40<64>:word64] = rax
	rax = Mem0[rbp + 0x68<64>:word64]
	Mem0[rbp - 0x38<64>:word64] = rdx
	rcx = rax + 0xD0<64>
	call fn0000000000472FC0 (retsize: 8;)
	r15 = rax
	rax = CONVERT(0x1E<32> + rdi * 4<64>, word32, word64)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	rdx = rbp - 0x30<64>
	rax = rbp - 0x40<64>
	r14 = rsp + 0x20<64>
	rcx = rdx
	Mem0[rbp - 0x48<64>:word64] = rdx
	rdx = rax
	Mem0[rbp - 0x58<64>:word64] = rax
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000043D0FB
	// succ:  l000000000043D0D1 l000000000043D0FB
l000000000043D0D1:
	v21 = Mem0[rsi:word32] | 4<32>
	Mem0[rsi:word32] = v21
	SZO = cond(Mem0[rsi:word32])
	C = false
	// succ:  l000000000043D0D4
l000000000043D0D4:
	rsi = Mem0[rbp + 0x30<64>:word64]
	rax = Mem0[rbp - 0x30<64>:word64]
	rdx = Mem0[rbp - 0x28<64>:word64]
	Mem0[rsi:word64] = rax
	rax = rsi
	Mem0[rsi + 8<64>:word64] = rdx
	rsp = rbp - 0x18<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043D040_exit
l000000000043D0FB:
	rcx = Mem0[rbp - 0x48<64>:word64]
	call fn000000000042B050 (retsize: 8;)
	SZO = cond(rdi & rdi)
	C = false
	r11d = eax
	r11 = CONVERT(r11d, word32, uint64)
	branch Test(EQ,Z) l000000000043D0D1
	// succ:  l000000000043D10C l000000000043D0D1
l000000000043D10C:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	goto l000000000043D133
	// succ:  l000000000043D133
l000000000043D113:
	rax = Mem0[r15:word64]
	Mem0[rbp - 0x49<64>:byte] = r11b
	rcx = r15
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	r11d = CONVERT(Mem0[rbp - 0x49<64>:byte], byte, word32)
	r11 = CONVERT(r11d, word32, uint64)
	SCZO = cond(r11b - al)
	branch Test(EQ,Z) l000000000043D140
	// succ:  l000000000043D12A l000000000043D140
l000000000043D12A:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	SCZO = cond(rbx - rdi)
	branch Test(EQ,Z) l000000000043D151
	// succ:  l000000000043D133 l000000000043D151
l000000000043D133:
	rax = Mem0[r13 + 0<64> + rbx * 8<64>:word64]
	edx = CONVERT(Mem0[rax:byte], byte, int32)
	SCZO = cond(dl - r11b)
	branch Test(NE,Z) l000000000043D113
	// succ:  l000000000043D140 l000000000043D113
l000000000043D140:
	Mem0[r14:word32] = ebx
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	r12 = r12 + 1<64>
	SCZO = cond(r12)
	SCZO = cond(rbx - rdi)
	branch Test(NE,Z) l000000000043D133
	// succ:  l000000000043D151 l000000000043D133
l000000000043D151:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	// succ:  l000000000043D153
l000000000043D153:
	SCZO = cond(r12 - 1<64>)
	branch Test(ULE,CZ) l000000000043D273
	// succ:  l000000000043D15D l000000000043D273
l000000000043D15D:
	rax = CONVERT(Mem0[r14:word32], word32, int64)
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	rcx = Mem0[r13 + 0<64> + rax * 8<64>:word64]
	eax = strlen(rcx)
	rdi = rax
	// succ:  l000000000043D173
l000000000043D173:
	rax = CONVERT(Mem0[r14 + r15 * 4<64>:word32], word32, int64)
	rcx = Mem0[r13 + 0<64> + rax * 8<64>:word64]
	eax = strlen(rcx)
	SCZO = cond(rdi - rax)
	branch Test(ULE,CZ) l000000000043D188
	// succ:  l000000000043D184_1 l000000000043D188
l000000000043D184_1:
	rdi = rax
	// succ:  l000000000043D188
l000000000043D188:
	r15 = r15 + 1<64>
	SCZO = cond(r15)
	SCZO = cond(r15 - r12)
	branch Test(ULT,C) l000000000043D173
	// succ:  l000000000043D191 l000000000043D173
l000000000043D191:
	rcx = Mem0[rbp - 0x30<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043D1B7
	// succ:  l000000000043D19A l000000000043D1B7
l000000000043D19A:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043D268
	// succ:  l000000000043D1A8 l000000000043D268
l000000000043D1A8:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l000000000043D1B0
l000000000043D1B0:
	Mem0[rbp - 0x28<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l000000000043D1B7
l000000000043D1B7:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	SCZO = cond(rbx - rdi)
	branch Test(UGE,C) l000000000043D0D1
	// succ:  l000000000043D1C4 l000000000043D0D1
l000000000043D1C4:
	rdx = Mem0[rbp - 0x58<64>:word64]
	rcx = Mem0[rbp - 0x48<64>:word64]
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000043D0D1
	// succ:  l000000000043D1D9 l000000000043D0D1
l000000000043D1D9:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	goto l000000000043D1F9
	// succ:  l000000000043D1F9
l000000000043D1E0:
	SCZO = cond(r10b - al)
	branch Test(EQ,Z) l000000000043D230
	// succ:  l000000000043D1E5 l000000000043D230
l000000000043D1E5:
	r12 = r12 - 1<64>
	SCZO = cond(r12)
	eax = Mem0[r14:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[r15:word32] = eax
	// succ:  l000000000043D1F0
l000000000043D1F0:
	SCZO = cond(r12 - rdi)
	branch Test(ULE,CZ) l000000000043D153
	// succ:  l000000000043D1F9 l000000000043D153
l000000000043D1F9:
	r15 = r14 + rdi * 4<64>
	rcx = Mem0[rbp - 0x30<64>:word64]
	rax = CONVERT(Mem0[r15:word32], word32, int64)
	SZO = cond(rcx & rcx)
	C = false
	rax = Mem0[r13 + 0<64> + rax * 8<64>:word64]
	r10d = CONVERT(Mem0[rax + rbx:byte], byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	branch Test(EQ,Z) l000000000043D25E
	// succ:  l000000000043D213 l000000000043D25E
l000000000043D213:
	eax = Mem0[rbp - 0x28<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000043D1E0
	// succ:  l000000000043D21B l000000000043D1E0
l000000000043D21B:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043D240
	// succ:  l000000000043D225 l000000000043D240
l000000000043D225:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043D228
l000000000043D228:
	SCZO = cond(r10b - al)
	Mem0[rbp - 0x28<64>:word32] = eax
	branch Test(NE,Z) l000000000043D1E5
	// succ:  l000000000043D230 l000000000043D1E5
l000000000043D230:
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	goto l000000000043D1F0
	// succ:  l000000000043D1F0
l000000000043D240:
	rax = Mem0[rcx:word64]
	Mem0[rbp - 0x49<64>:byte] = r10b
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	r10d = CONVERT(Mem0[rbp - 0x49<64>:byte], byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	branch Test(NE,Z) l000000000043D228
	// succ:  l000000000043D254 l000000000043D228
l000000000043D254:
	Mem0[rbp - 0x30<64>:word64] = 0<64>
	goto l000000000043D1E0
	// succ:  l000000000043D1E0
l000000000043D25E:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043D1E0
	// succ:  l000000000043D1E0
l000000000043D268:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l000000000043D1B0
	// succ:  l000000000043D1B0
l000000000043D273:
	SCZO = cond(r12 - 1<64>)
	branch Test(NE,Z) l000000000043D0D1
	// succ:  l000000000043D27D l000000000043D0D1
l000000000043D27D:
	rcx = Mem0[rbp - 0x30<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043D292
	// succ:  l000000000043D286 l000000000043D292
l000000000043D286:
	call fn0000000000462490 (retsize: 8;)
	Mem0[rbp - 0x28<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l000000000043D292
l000000000043D292:
	rax = CONVERT(Mem0[r14:word32], word32, int64)
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	rax = Mem0[r13 + 0<64> + rax * 8<64>:word64]
	rcx = rax
	rdi = rax
	eax = strlen(rcx)
	SCZO = cond(rax - rbx)
	r13 = rax
	branch Test(ULE,CZ) l000000000043D2C5
	// succ:  l000000000043D2B4 l000000000043D2C5
l000000000043D2B4:
	rdx = Mem0[rbp - 0x58<64>:word64]
	rcx = Mem0[rbp - 0x48<64>:word64]
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000043D2DA
	// succ:  l000000000043D2C5 l000000000043D2DA
l000000000043D2C5:
	SCZO = cond(rbx - r13)
	branch Test(NE,Z) l000000000043D0D1
	// succ:  l000000000043D2CE l000000000043D0D1
l000000000043D2CE:
	rax = Mem0[rbp + 0x50<64>:word64]
	Mem0[rax:word32] = r14d
	goto l000000000043D0D4
	// succ:  l000000000043D0D4
l000000000043D2DA:
	r15d = CONVERT(Mem0[rdi + rbx:byte], byte, word32)
	r15 = CONVERT(r15d, word32, uint64)
	rcx = Mem0[rbp - 0x48<64>:word64]
	call fn000000000042B050 (retsize: 8;)
	SCZO = cond(r15b - al)
	branch Test(NE,Z) l000000000043D2C5
	// succ:  l000000000043D2ED l000000000043D2C5
l000000000043D2ED:
	rcx = Mem0[rbp - 0x30<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043D302
	// succ:  l000000000043D2F6 l000000000043D302
l000000000043D2F6:
	call fn0000000000462490 (retsize: 8;)
	Mem0[rbp - 0x28<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l000000000043D302
l000000000043D302:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	SCZO = cond(r13 - rbx)
	branch Test(UGT,CZ) l000000000043D2B4
	// succ:  l000000000043D30B l000000000043D2B4
l000000000043D30B:
	goto l000000000043D2C5
	// succ:  l000000000043D2C5
fn000000000043D040_exit:


// fn000000000043D310
// Return size: 8
define fn000000000043D310
fn000000000043D310_entry:
	rsp = fp
	// succ:  l000000000043D310
l000000000043D310:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x158<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0x1C0<64>:word64]
	r14 = Mem0[r8 + 8<64>:word64]
	rsi = rcx
	r13 = Mem0[r8:word64]
	r15 = rdx
	rdi = Mem0[r9:word64]
	r12 = Mem0[r9 + 8<64>:word64]
	rbp = rax + 0xD0<64>
	rcx = rbp
	call fn0000000000472F00 (retsize: 8;)
	rcx = rbp
	rbx = rax
	call fn0000000000472FC0 (retsize: 8;)
	rax = Mem0[rbx + 0x10<64>:word64]
	rcx = rsp + 0x70<64>
	r9 = rsp + 0x50<64>
	r8 = rsp + 0x60<64>
	rdx = Mem0[rax + 0x128<64>:word64]
	Mem0[rsp + 0x90<64>:word64] = rdx
	rdx = Mem0[rax + 0x130<64>:word64]
	rax = Mem0[rax + 0x138<64>:word64]
	Mem0[rsp + 0x98<64>:word64] = rdx
	rdx = r15
	Mem0[rsp + 0xA0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x140<64>:word64]
	Mem0[rsp + 0xA8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x148<64>:word64]
	Mem0[rsp + 0xB0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x150<64>:word64]
	Mem0[rsp + 0xB8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x158<64>:word64]
	Mem0[rsp + 0xC0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x160<64>:word64]
	Mem0[rsp + 0xC8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x168<64>:word64]
	Mem0[rsp + 0xD0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x170<64>:word64]
	Mem0[rsp + 0xD8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x178<64>:word64]
	Mem0[rsp + 0xE0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x180<64>:word64]
	Mem0[rsp + 0xE8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xC8<64>:word64]
	Mem0[rsp + 0xF0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xD0<64>:word64]
	Mem0[rsp + 0xF8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xD8<64>:word64]
	Mem0[rsp + 0x100<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xE0<64>:word64]
	Mem0[rsp + 0x108<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xE8<64>:word64]
	Mem0[rsp + 0x110<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xF0<64>:word64]
	Mem0[rsp + 0x118<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xF8<64>:word64]
	Mem0[rsp + 0x120<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x100<64>:word64]
	Mem0[rsp + 0x128<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x108<64>:word64]
	Mem0[rsp + 0x130<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x110<64>:word64]
	Mem0[rsp + 0x138<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x118<64>:word64]
	Mem0[rsp + 0x140<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	Mem0[rsp + 0x8C<64>:word32] = 0<32>
	rax = Mem0[rax + 0x120<64>:word64]
	Mem0[rsp + 0x30<64>:word64] = 0xC<64>
	Mem0[rsp + 0x60<64>:word64] = r13
	Mem0[rsp + 0x68<64>:word64] = r14
	Mem0[rsp + 0x50<64>:word64] = rdi
	Mem0[rsp + 0x58<64>:word64] = r12
	Mem0[rsp + 0x148<64>:word64] = rax
	rax = rsp + 0x8C<64>
	Mem0[rsp + 0x40<64>:word64] = rax
	rax = Mem0[rsp + 0x1C0<64>:word64]
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = rsp + 0x90<64>
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = rsp + 0x88<64>
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn000000000043EA80 (retsize: 8;)
	rdx = Mem0[rsp + 0x78<64>:word64]
	rax = 0xFFFFFFFF00000000<64>
	rcx = Mem0[rsp + 0x70<64>:word64]
	rax = rax & r14
	SZO = cond(rax)
	C = false
	r13d = edx
	r13 = CONVERT(r13d, word32, uint64)
	r14 = rcx
	ebx = edx
	rbx = CONVERT(ebx, word32, uint64)
	r13 = r13 | rax
	SZO = cond(r13)
	C = false
	eax = Mem0[rsp + 0x8C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000043D630
	// succ:  l000000000043D5B9 l000000000043D630
l000000000043D5B9:
	r8d = Mem0[rsp + 0x88<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rax = Mem0[rsp + 0x1D0<64>:word64]
	Mem0[rax + 0x10<64>:word32] = r8d
	// succ:  l000000000043D5CD
l000000000043D5CD:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043D680
	// succ:  l000000000043D5D6 l000000000043D680
l000000000043D5D6:
	SCZO = cond(edx - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043D640
	// succ:  l000000000043D5DB l000000000043D640
l000000000043D5DB:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000043D5FB
	// succ:  l000000000043D5E0 l000000000043D5FB
l000000000043D5E0:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	// succ:  l000000000043D5E3
l000000000043D5E3:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r12d - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043D650
	// succ:  l000000000043D5EB l000000000043D650
l000000000043D5EB:
	SCZO = cond(r15b - al)
	branch Test(NE,Z) l000000000043D5FB
	// succ:  l000000000043D5F0 l000000000043D5FB
l000000000043D5F0:
	rax = Mem0[rsp + 0x1C8<64>:word64]
	v29 = Mem0[rax:word32] | 2<32>
	Mem0[rax:word32] = v29
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l000000000043D5FB
l000000000043D5FB:
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	rbx = 0xFFFFFFFF00000000<64>
	rax = rsi
	rbx = rbx & r13
	SZO = cond(rbx)
	C = false
	Mem0[rsi:word64] = r14
	rbx = rbx | rdx
	SZO = cond(rbx)
	C = false
	Mem0[rsi + 8<64>:word64] = rbx
	rsp = rsp + 0x158<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043D310_exit
l000000000043D630:
	rax = Mem0[rsp + 0x1C8<64>:word64]
	v30 = Mem0[rax:word32] | 4<32>
	Mem0[rax:word32] = v30
	SZO = cond(Mem0[rax:word32])
	C = false
	goto l000000000043D5CD
	// succ:  l000000000043D5CD
l000000000043D640:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043D6A0
	// succ:  l000000000043D64A l000000000043D6A0
l000000000043D64A:
	ebx = CONVERT(Mem0[rax:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000043D5DB
	// succ:  l000000000043D5DB
l000000000043D650:
	rax = Mem0[rdi + 0x18<64>:word64]
	SCZO = cond(Mem0[rdi + 0x10<64>:word64] - rax)
	branch Test(UGE,C) l000000000043D660
	// succ:  l000000000043D65A l000000000043D660
l000000000043D65A:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000043D5EB
	// succ:  l000000000043D5EB
l000000000043D660:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000043D65A
	// succ:  l000000000043D66E l000000000043D65A
l000000000043D66E:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043D5EB
	// succ:  l000000000043D5EB
l000000000043D680:
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000043D5F0
	// succ:  l000000000043D68C l000000000043D5F0
l000000000043D68C:
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l000000000043D5E3
	// succ:  l000000000043D5E3
l000000000043D6A0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043D680
	// succ:  l000000000043D6AB l000000000043D680
l000000000043D6AB:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000043D5DB
	// succ:  l000000000043D5DB
fn000000000043D310_exit:


// fn000000000043D6C0
// Return size: 8
define fn000000000043D6C0
fn000000000043D6C0_entry:
	rsp = fp
	// succ:  l000000000043D6C0
l000000000043D6C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x148<64>
	SCZO = cond(rsp)
	rax = Mem0[r8:word64]
	rbx = Mem0[rsp + 0x1C8<64>:word64]
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	Mem0[rsp + 0x198<64>:word64] = rdx
	rdx = Mem0[r8 + 8<64>:word64]
	r12 = rsp + 0xD8<64>
	Mem0[rsp + 0x190<64>:word64] = rcx
	Mem0[rsp + 0xC0<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0xC8<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0xB0<64>:word64] = rax
	rax = Mem0[rsp + 0x1B0<64>:word64]
	Mem0[rsp + 0xB8<64>:word64] = rdx
	rsi = rax + 0xD0<64>
	rcx = rsi
	call fn0000000000472F00 (retsize: 8;)
	rcx = rsi
	rdi = rax
	call fn0000000000472FC0 (retsize: 8;)
	rcx = rbx
	rbp = rax
	r15 = rdi
	eax = strlen(rcx)
	rsi = rax
	rax = rsp + 0xC0<64>
	rdx = Mem0[rsp + 0xC0<64>:word64]
	r14 = Mem0[rsp + 0x1B0<64>:word64]
	rdi = Mem0[rsp + 0x1C0<64>:word64]
	Mem0[rsp + 0x68<64>:word64] = rax
	rax = rsp + 0xA0<64>
	Mem0[rsp + 0xD8<64>:word32] = 0<32>
	Mem0[rsp + 0x50<64>:word64] = rax
	rax = rsp + 0x80<64>
	Mem0[rsp + 0x58<64>:word64] = rax
	rax = rsp + 0x90<64>
	Mem0[rsp + 0x60<64>:word64] = rax
	// succ:  l000000000043D7B0
l000000000043D7B0:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l000000000043D8AE
	// succ:  l000000000043D7B9 l000000000043D8AE
l000000000043D7B9:
	SCZO = cond(Mem0[rsp + 0xC8<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043D985
	// succ:  l000000000043D7C7 l000000000043D985
l000000000043D7C7:
	rcx = Mem0[rsp + 0xB0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043D7EE
	// succ:  l000000000043D7D4 l000000000043D7EE
l000000000043D7D4:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0xB8<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043D8D0
	// succ:  l000000000043D7E6 l000000000043D8D0
l000000000043D7E6:
	SCZO = cond(dl - al)
	branch Test(EQ,Z) l000000000043D8F2
	// succ:  l000000000043D7EE l000000000043D8F2
l000000000043D7EE:
	SCZO = cond(r13 - rsi)
	eax = Mem0[rsp + 0xD8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	branch Test(UGE,C) l000000000043D8F9
	// succ:  l000000000043D7FE l000000000043D8F9
l000000000043D7FE:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000043D8F9
	// succ:  l000000000043D806 l000000000043D8F9
l000000000043D806:
	r9 = rbx + r13
	edx = CONVERT(Mem0[r9:byte], byte, int32)
	r11d = CONVERT(dl, byte, word32)
	r11 = CONVERT(r11d, word32, uint64)
	eax = CONVERT(Mem0[rbp + 0x139<64> + r11:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000043D9A2
	// succ:  l000000000043D823 l000000000043D9A2
l000000000043D823:
	SCZO = cond(al - 0x25<8>)
	branch Test(NE,Z) l000000000043D943
	// succ:  l000000000043D82B l000000000043D943
l000000000043D82B:
	r9d = CONVERT(Mem0[rbx + 1<64> + r13:byte], byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	r11 = r13 + 1<64>
	ecx = CONVERT(Mem0[rbp + 0x139<64> + r9:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rdx = r9
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000043DA70
	// succ:  l000000000043D849 l000000000043DA70
l000000000043D849:
	SCZO = cond(cl - 0x4F<8>)
	Mem0[rsp + 0xDC<64>:word32] = 0<32>
	branch Test(EQ,Z) l000000000043D9D0
	// succ:  l000000000043D85D l000000000043D9D0
l000000000043D85D:
	SCZO = cond(cl - 0x45<8>)
	branch Test(EQ,Z) l000000000043D9D0
	// succ:  l000000000043D866 l000000000043D9D0
l000000000043D866:
	r13 = r11
	// succ:  l000000000043D869
l000000000043D869:
	ecx = ecx - 0x41<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	SCZO = cond(cl - 0x38<8>)
	branch Test(UGT,CZ) l000000000043DB13
	// succ:  l000000000043D875 l000000000043DB13
l000000000043D875:
	rax = 0x000000000048DF48<p64>
	ecx = CONVERT(cl, byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rdx = CONVERT(Mem0[rax + rcx * 4<64>:word32], word32, int64)
	rax = rax + rdx
	SCZO = cond(rax)
	call rax (retsize: 0;)
	return
	// succ:  fn000000000043D6C0_exit
l000000000043D890:
	rax = Mem0[rdx:word64]
	rcx = rdx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000043D996
	// succ:  l000000000043D8A2 l000000000043D996
l000000000043D8A2:
	Mem0[rsp + 0xC0<64>:word64] = 0<64>
	// succ:  l000000000043D8AE
l000000000043D8AE:
	rcx = Mem0[rsp + 0xB0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043D8F2
	// succ:  l000000000043D8BB l000000000043D8F2
l000000000043D8BB:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0xB8<64>:word32] - 0xFFFFFFFF<32>)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l000000000043D7E6
	// succ:  l000000000043D8D0 l000000000043D7E6
l000000000043D8D0:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043E8A0
	// succ:  l000000000043D8DE l000000000043E8A0
l000000000043D8DE:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043D8E1
l000000000043D8E1:
	Mem0[rsp + 0xB8<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(dl - al)
	branch Test(NE,Z) l000000000043D7EE
	// succ:  l000000000043D8F2 l000000000043D7EE
l000000000043D8F2:
	eax = Mem0[rsp + 0xD8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043D8F9
l000000000043D8F9:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000043D902
	// succ:  l000000000043D8FD l000000000043D902
l000000000043D8FD:
	SCZO = cond(r13 - rsi)
	branch Test(EQ,Z) l000000000043D90D
	// succ:  l000000000043D902 l000000000043D90D
l000000000043D902:
	rax = Mem0[rsp + 0x1B8<64>:word64]
	v36 = Mem0[rax:word32] | 4<32>
	Mem0[rax:word32] = v36
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l000000000043D90D
l000000000043D90D:
	rdi = Mem0[rsp + 0x190<64>:word64]
	rax = Mem0[rsp + 0xC0<64>:word64]
	rdx = Mem0[rsp + 0xC8<64>:word64]
	Mem0[rdi:word64] = rax
	rax = rdi
	Mem0[rdi + 8<64>:word64] = rdx
	rsp = rsp + 0x148<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043D6C0_exit
l000000000043D943:
	rcx = Mem0[rsp + 0xC0<64>:word64]
	r8d = CONVERT(Mem0[r9:byte], byte, word32)
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	rdx = rcx
	branch Test(EQ,Z) l000000000043DACA
	// succ:  l000000000043D95B l000000000043DACA
l000000000043D95B:
	eax = Mem0[rsp + 0xC8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043DA20
	// succ:  l000000000043D96B l000000000043DA20
l000000000043D96B:
	SCZO = cond(r8b - al)
	branch Test(EQ,Z) l000000000043DA3F
	// succ:  l000000000043D974 l000000000043DA3F
l000000000043D974:
	v35 = Mem0[rsp + 0xD8<64>:word32] | 4<32>
	Mem0[rsp + 0xD8<64>:word32] = v35
	SZO = cond(Mem0[rsp + 0xD8<64>:word32])
	C = false
	// succ:  l000000000043D97C
l000000000043D97C:
	r13 = r13 + 1<64>
	SCZO = cond(r13)
	goto l000000000043D7B0
	// succ:  l000000000043D7B0
l000000000043D985:
	rax = Mem0[rdx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rdx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043D890
	// succ:  l000000000043D993 l000000000043D890
l000000000043D993:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043D996
l000000000043D996:
	Mem0[rsp + 0xC8<64>:word32] = eax
	goto l000000000043D7C7
	// succ:  l000000000043D7C7
l000000000043D9A2:
	rax = Mem0[rbp + 0<64>:word64]
	rcx = 0x000000000042B620<p64>
	rax = Mem0[rax + 0x40<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l000000000043DAF0
	// succ:  l000000000043D9BA l000000000043DAF0
l000000000043D9BA:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l000000000043D943
	// succ:  l000000000043D9BE l000000000043D943
l000000000043D9BE:
	Mem0[rbp + 0x139<64> + r11:byte] = dl
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043D823
	// succ:  l000000000043D823
l000000000043D9D0:
	r13 = r13 + 2<64>
	SCZO = cond(r13)
	r9d = CONVERT(Mem0[rbx + r13:byte], byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	ecx = CONVERT(Mem0[rbp + 0x139<64> + r9:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rax = r9
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l000000000043D869
	// succ:  l000000000043D9ED l000000000043D869
l000000000043D9ED:
	rdx = Mem0[rbp + 0<64>:word64]
	r11 = Mem0[rdx + 0x40<64>:word64]
	rdx = 0x000000000042B620<p64>
	SCZO = cond(r11 - rdx)
	branch Test(NE,Z) l000000000043E9C2
	// succ:  l000000000043DA05 l000000000043E9C2
l000000000043DA05:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000043DB13
	// succ:  l000000000043DA0D l000000000043DB13
l000000000043DA0D:
	Mem0[rbp + 0x139<64> + r9:byte] = al
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	goto l000000000043D869
	// succ:  l000000000043D869
l000000000043DA20:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043DAA4
	// succ:  l000000000043DA2A l000000000043DAA4
l000000000043DA2A:
	r9d = CONVERT(Mem0[rax:byte], byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r8b - r9b)
	Mem0[rsp + 0xC8<64>:word32] = r9d
	branch Test(NE,Z) l000000000043D974
	// succ:  l000000000043DA3F l000000000043D974
l000000000043DA3F:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043E9DE
	// succ:  l000000000043DA4D l000000000043E9DE
l000000000043DA4D:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l000000000043DA55
l000000000043DA55:
	Mem0[rsp + 0xC8<64>:word32] = 0xFFFFFFFF<32>
	rdx = rcx
	goto l000000000043D97C
	// succ:  l000000000043D97C
l000000000043DA70:
	rax = Mem0[rbp + 0<64>:word64]
	rcx = 0x000000000042B620<p64>
	rax = Mem0[rax + 0x40<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l000000000043E8D0
	// succ:  l000000000043DA88 l000000000043E8D0
l000000000043DA88:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l000000000043DAE0
	// succ:  l000000000043DA8C l000000000043DAE0
l000000000043DA8C:
	v31 = Mem0[rsp + 0xD8<64>:word32] | 4<32>
	Mem0[rsp + 0xD8<64>:word32] = v31
	SZO = cond(Mem0[rsp + 0xD8<64>:word32])
	C = false
	rdx = Mem0[rsp + 0xC0<64>:word64]
	r13 = r11
	goto l000000000043D97C
	// succ:  l000000000043D97C
l000000000043DAA4:
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x70<64>:byte] = r8b
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	r8d = CONVERT(Mem0[rsp + 0x70<64>:byte], byte, word32)
	r8 = CONVERT(r8d, word32, uint64)
	branch Test(NE,Z) l000000000043EA4C
	// succ:  l000000000043DABE l000000000043EA4C
l000000000043DABE:
	Mem0[rsp + 0xC0<64>:word64] = 0<64>
	// succ:  l000000000043DACA
l000000000043DACA:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(r8b - 0xFF<8>)
	branch Test(NE,Z) l000000000043D974
	// succ:  l000000000043DAD6 l000000000043D974
l000000000043DAD6:
	goto l000000000043D97C
	// succ:  l000000000043D97C
l000000000043DAE0:
	Mem0[rbp + 0x139<64> + r9:byte] = dl
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	goto l000000000043D849
	// succ:  l000000000043D849
l000000000043DAF0:
	Mem0[rsp + 0x78<64>:word64] = r11
	Mem0[rsp + 0x70<64>:word64] = r9
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rbp
	call rax (retsize: 8;)
	r11 = Mem0[rsp + 0x78<64>:word64]
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	r9 = Mem0[rsp + 0x70<64>:word64]
	goto l000000000043D9BA
	// succ:  l000000000043D9BA
l000000000043DB13:
	r11 = r13
	goto l000000000043DA8C
	// succ:  l000000000043DA8C
l000000000043E8A0:
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x70<64>:byte] = dl
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	edx = CONVERT(Mem0[rsp + 0x70<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l000000000043D8E1
	// succ:  l000000000043E8B8 l000000000043D8E1
l000000000043E8B8:
	Mem0[rsp + 0xB0<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043D7E6
	// succ:  l000000000043D7E6
l000000000043E8D0:
	edx = CONVERT(r9b, byte, int32)
	Mem0[rsp + 0x78<64>:word64] = r9
	Mem0[rsp + 0x70<64>:word64] = r11
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rbp
	call rax (retsize: 8;)
	r9 = Mem0[rsp + 0x78<64>:word64]
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	r11 = Mem0[rsp + 0x70<64>:word64]
	goto l000000000043DA88
	// succ:  l000000000043DA88
l000000000043E9C2:
	Mem0[rsp + 0x70<64>:word64] = r9
	edx = CONVERT(r9b, byte, int32)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rbp
	call r11 (retsize: 8;)
	r9 = Mem0[rsp + 0x70<64>:word64]
	goto l000000000043DA05
	// succ:  l000000000043DA05
l000000000043E9DE:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0xC0<64>:word64]
	goto l000000000043DA55
	// succ:  l000000000043DA55
l000000000043EA4C:
	rcx = Mem0[rsp + 0xC0<64>:word64]
	SCZO = cond(r8b - al)
	Mem0[rsp + 0xC8<64>:word32] = eax
	rdx = rcx
	branch Test(NE,Z) l000000000043D974
	// succ:  l000000000043EA67 l000000000043D974
l000000000043EA67:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000043DA3F
	// succ:  l000000000043EA70 l000000000043DA3F
l000000000043EA70:
	goto l000000000043D97C
	// succ:  l000000000043D97C
fn000000000043D6C0_exit:


// fn000000000043EA80
// Return size: 8
define fn000000000043EA80
fn000000000043EA80_entry:
	rsp = fp
	// succ:  l000000000043EA80
l000000000043EA80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	rax = Mem0[r8:word64]
	rdx = Mem0[r8 + 8<64>:word64]
	Mem0[rbp + 0x10<64>:word64] = rcx
	rsi = Mem0[rbp + 0x38<64>:word64]
	Mem0[rbp - 0x50<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rbp - 0x48<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rbp - 0x60<64>:word64] = rax
	rax = Mem0[rbp + 0x48<64>:word64]
	Mem0[rbp - 0x58<64>:word64] = rdx
	rcx = rax + 0xD0<64>
	call fn0000000000472FC0 (retsize: 8;)
	r14 = rax
	rax = Mem0[rbp + 0x40<64>:word64]
	rax = CONVERT(0x1E<32> + rax * 8<64>, word32, word64)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rbx = rbp - 0x50<64>
	rdx = rbp - 0x60<64>
	rsp = rsp - rax
	SCZO = cond(rsp)
	r13 = rsp + 0x20<64>
	rcx = rbx
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000043ED55
	// succ:  l000000000043EB06 l000000000043ED55
l000000000043EB06:
	r12 = Mem0[rbp - 0x50<64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	// succ:  l000000000043EB12
l000000000043EB12:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l000000000043ECC5
	// succ:  l000000000043EB1B l000000000043ECC5
l000000000043EB1B:
	eax = Mem0[rbp - 0x48<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043EC00
	// succ:  l000000000043EB27 l000000000043EC00
l000000000043EB27:
	rcx = Mem0[rbp - 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043EB60
	// succ:  l000000000043EB30 l000000000043EB60
l000000000043EB30:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	// succ:  l000000000043EB32
l000000000043EB32:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbp - 0x58<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043EC30
	// succ:  l000000000043EB3E l000000000043EC30
l000000000043EB3E:
	SCZO = cond(al - dil)
	branch Test(EQ,Z) l000000000043EC4F
	// succ:  l000000000043EB47 l000000000043EC4F
l000000000043EB47:
	rcx = Mem0[rbp - 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043EE24
	// succ:  l000000000043EB54 l000000000043EE24
l000000000043EB54:
	eax = Mem0[rbp - 0x48<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000043EC91
	// succ:  l000000000043EB60 l000000000043EC91
l000000000043EB60:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000043EC63
	// succ:  l000000000043EB69 l000000000043EC63
l000000000043EB69:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	goto l000000000043EB7D
	// succ:  l000000000043EB7D
l000000000043EB70:
	r11 = r11 + 1<64>
	SCZO = cond(r11)
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	// succ:  l000000000043EB78
l000000000043EB78:
	SCZO = cond(rbx - rdx)
	branch Test(ULE,CZ) l000000000043EBB0
	// succ:  l000000000043EB7D l000000000043EBB0
l000000000043EB7D:
	r9 = r13 + 0<64> + rdx * 4<64>
	r8 = r15 + rdx * 8<64>
	rcx = CONVERT(Mem0[r9:word32], word32, int64)
	SCZO = cond(r14 - Mem0[r8:word64])
	rcx = Mem0[rsi + rcx * 8<64>:word64]
	branch Test(UGE,C) l000000000043EB70
	// succ:  l000000000043EB92 l000000000043EB70
l000000000043EB92:
	SCZO = cond(Mem0[rcx + r14:byte] - al)
	branch Test(EQ,Z) l000000000043EBF0
	// succ:  l000000000043EB98 l000000000043EBF0
l000000000043EB98:
	rbx = rbx - 1<64>
	SCZO = cond(rbx)
	ecx = Mem0[r13 + 0<64> + rbx * 4<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(rbx - rdx)
	Mem0[r9:word32] = ecx
	rcx = Mem0[r15 + rbx * 8<64>:word64]
	Mem0[r8:word64] = rcx
	branch Test(UGT,CZ) l000000000043EB7D
	// succ:  l000000000043EBB0 l000000000043EB7D
l000000000043EBB0:
	SCZO = cond(rbx - r11)
	branch Test(EQ,Z) l000000000043EC4F
	// succ:  l000000000043EBB9 l000000000043EC4F
l000000000043EBB9:
	r12 = Mem0[rbp - 0x50<64>:word64]
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l000000000043EBE2
	// succ:  l000000000043EBC2 l000000000043EBE2
l000000000043EBC2:
	rax = Mem0[r12 + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[r12 + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043ECD8
	// succ:  l000000000043EBD2 l000000000043ECD8
l000000000043EBD2:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[r12 + 0x10<64>:word64] = rax
	// succ:  l000000000043EBDB
l000000000043EBDB:
	Mem0[rbp - 0x48<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l000000000043EBE2
l000000000043EBE2:
	r14 = r14 + 1<64>
	SCZO = cond(r14)
	goto l000000000043EB12
	// succ:  l000000000043EB12
l000000000043EBF0:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	goto l000000000043EB78
	// succ:  l000000000043EB78
l000000000043EC00:
	rax = Mem0[r12 + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[r12 + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043ECAA
	// succ:  l000000000043EC10 l000000000043ECAA
l000000000043EC10:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043EC13
l000000000043EC13:
	rcx = Mem0[rbp - 0x60<64>:word64]
	Mem0[rbp - 0x48<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000043EB30
	// succ:  l000000000043EC23 l000000000043EB30
l000000000043EC23:
	goto l000000000043EB47
	// succ:  l000000000043EB47
l000000000043EC30:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043ED18
	// succ:  l000000000043EC3E l000000000043ED18
l000000000043EC3E:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043EC41
l000000000043EC41:
	Mem0[rbp - 0x58<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - dil)
	branch Test(NE,Z) l000000000043EB47
	// succ:  l000000000043EC4F l000000000043EB47
l000000000043EC4F:
	SCZO = cond(rbx - 1<64>)
	branch Test(EQ,Z) l000000000043EE16
	// succ:  l000000000043EC59 l000000000043EE16
l000000000043EC59:
	SCZO = cond(rbx - 2<64>)
	branch Test(EQ,Z) l000000000043ECEB
	// succ:  l000000000043EC63 l000000000043ECEB
l000000000043EC63:
	rax = Mem0[rbp + 0x50<64>:word64]
	v31 = Mem0[rax:word32] | 4<32>
	Mem0[rax:word32] = v31
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l000000000043EC6A
l000000000043EC6A:
	rdi = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rbp - 0x50<64>:word64]
	rdx = Mem0[rbp - 0x48<64>:word64]
	Mem0[rdi:word64] = rax
	rax = rdi
	Mem0[rdi + 8<64>:word64] = rdx
	rsp = rbp - 0x38<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043EA80_exit
l000000000043EC91:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043ED39
	// succ:  l000000000043EC9F l000000000043ED39
l000000000043EC9F:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043ECA2
l000000000043ECA2:
	Mem0[rbp - 0x48<64>:word32] = eax
	goto l000000000043EB60
	// succ:  l000000000043EB60
l000000000043ECAA:
	rax = Mem0[r12:word64]
	rcx = r12
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000043EC13
	// succ:  l000000000043ECBD l000000000043EC13
l000000000043ECBD:
	Mem0[rbp - 0x50<64>:word64] = 0<64>
	// succ:  l000000000043ECC5
l000000000043ECC5:
	rcx = Mem0[rbp - 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043EC4F
	// succ:  l000000000043ECCE l000000000043EC4F
l000000000043ECCE:
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	goto l000000000043EB32
	// succ:  l000000000043EB32
l000000000043ECD8:
	rax = Mem0[r12:word64]
	rcx = r12
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	r12 = Mem0[rbp - 0x50<64>:word64]
	goto l000000000043EBDB
	// succ:  l000000000043EBDB
l000000000043ECEB:
	SCZO = cond(Mem0[r15:word64] - r14)
	branch Test(EQ,Z) l000000000043ECFA
	// succ:  l000000000043ECF0 l000000000043ECFA
l000000000043ECF0:
	SCZO = cond(Mem0[r15 + 8<64>:word64] - r14)
	branch Test(NE,Z) l000000000043EC63
	// succ:  l000000000043ECFA l000000000043EC63
l000000000043ECFA:
	rcx = CONVERT(Mem0[r13 + 0<64>:word32], word32, int64)
	edx = ecx
	rdx = CONVERT(edx, word32, uint64)
	edx = edx - Mem0[rbp + 0x40<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(Mem0[rbp + 0x40<64>:word64] - rcx)
	rax = rcx
	branch Test(UGT,CZ) l000000000043ED0D
	// succ:  l000000000043ED0A_1 l000000000043ED0D
l000000000043ED0A_1:
	eax = edx
	// succ:  l000000000043ED0D
l000000000043ED0D:
	rdx = Mem0[rbp + 0x30<64>:word64]
	Mem0[rdx:word32] = eax
	goto l000000000043EC6A
	// succ:  l000000000043EC6A
l000000000043ED18:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000043EC41
	// succ:  l000000000043ED27 l000000000043EC41
l000000000043ED27:
	Mem0[rbp - 0x60<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043EB3E
	// succ:  l000000000043EB3E
l000000000043ED39:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000043ECA2
	// succ:  l000000000043ED48 l000000000043ECA2
l000000000043ED48:
	Mem0[rbp - 0x50<64>:word64] = 0<64>
	goto l000000000043EB60
	// succ:  l000000000043EB60
l000000000043ED55:
	rcx = rbx
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	call fn000000000042B050 (retsize: 8;)
	r15 = Mem0[rbp + 0x40<64>:word64]
	r12d = eax
	r12 = CONVERT(r12d, word32, uint64)
	r15 = r15 + r15
	SCZO = cond(r15)
	branch Test(NE,Z) l000000000043ED89
	// succ:  l000000000043ED6D l000000000043ED89
l000000000043ED6D:
	goto l000000000043EE2E
	// succ:  l000000000043EE2E
l000000000043ED72:
	rax = Mem0[r14:word64]
	rcx = r14
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	SCZO = cond(r12b - al)
	branch Test(EQ,Z) l000000000043ED95
	// succ:  l000000000043ED80 l000000000043ED95
l000000000043ED80:
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	SCZO = cond(rdi - r15)
	branch Test(EQ,Z) l000000000043EDA7
	// succ:  l000000000043ED89 l000000000043EDA7
l000000000043ED89:
	rax = Mem0[rsi + rdi * 8<64>:word64]
	edx = CONVERT(Mem0[rax:byte], byte, int32)
	SCZO = cond(dl - r12b)
	branch Test(NE,Z) l000000000043ED72
	// succ:  l000000000043ED95 l000000000043ED72
l000000000043ED95:
	Mem0[r13 + 0<64> + rbx * 4<64>:word32] = edi
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	SCZO = cond(rdi - r15)
	branch Test(NE,Z) l000000000043ED89
	// succ:  l000000000043EDA7 l000000000043ED89
l000000000043EDA7:
	SZO = cond(rbx & rbx)
	C = false
	r12 = Mem0[rbp - 0x50<64>:word64]
	branch Test(EQ,Z) l000000000043EE3D
	// succ:  l000000000043EDB4 l000000000043EE3D
l000000000043EDB4:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l000000000043EDCC
	// succ:  l000000000043EDB9 l000000000043EDCC
l000000000043EDB9:
	rcx = r12
	call fn0000000000462490 (retsize: 8;)
	r12 = Mem0[rbp - 0x50<64>:word64]
	Mem0[rbp - 0x48<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l000000000043EDCC
l000000000043EDCC:
	rax = CONVERT(0x1E<32> + rbx * 8<64>, word32, word64)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	rsp = rsp - rax
	SCZO = cond(rsp)
	r14 = rsp + 0x20<64>
	r15 = r14
	// succ:  l000000000043EDF0
l000000000043EDF0:
	rax = CONVERT(Mem0[r13 + 0<64> + rdi * 4<64>:word32], word32, int64)
	rcx = Mem0[rsi + rax * 8<64>:word64]
	eax = strlen(rcx)
	Mem0[r14 + rdi * 8<64>:word64] = rax
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	SCZO = cond(rdi - rbx)
	branch Test(NE,Z) l000000000043EDF0
	// succ:  l000000000043EE0B l000000000043EDF0
l000000000043EE0B:
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	goto l000000000043EB12
	// succ:  l000000000043EB12
l000000000043EE16:
	SCZO = cond(Mem0[r15:word64] - r14)
	branch Test(NE,Z) l000000000043EC63
	// succ:  l000000000043EE1F l000000000043EC63
l000000000043EE1F:
	goto l000000000043ECFA
	// succ:  l000000000043ECFA
l000000000043EE24:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043EB60
	// succ:  l000000000043EB60
l000000000043EE2E:
	r12 = Mem0[rbp - 0x50<64>:word64]
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	goto l000000000043EB12
	// succ:  l000000000043EB12
l000000000043EE3D:
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	goto l000000000043EB12
	// succ:  l000000000043EB12
fn000000000043EA80_exit:


// fn000000000043EE50
// Return size: 8
define fn000000000043EE50
fn000000000043EE50_entry:
	rsp = fp
	// succ:  l000000000043EE50
l000000000043EE50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x20<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043EE50_exit
fn000000000043EE50_exit:


// fn000000000043EEC0
// Return size: 8
define fn000000000043EEC0
fn000000000043EEC0_entry:
	rsp = fp
	// succ:  l000000000043EEC0
l000000000043EEC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x18<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043EEC0_exit
fn000000000043EEC0_exit:


// fn000000000043EF30
// Return size: 8
define fn000000000043EF30
fn000000000043EF30_entry:
	rsp = fp
	// succ:  l000000000043EF30
l000000000043EF30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x38<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043EF30_exit
fn000000000043EF30_exit:


// fn000000000043EFA0
// Return size: 8
define fn000000000043EFA0
fn000000000043EFA0_entry:
	rsp = fp
	// succ:  l000000000043EFA0
l000000000043EFA0:
	rax = Mem0[rcx:word64]
	rdx = 0x000000000043F4B0<p64>
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l000000000043EFC0
	// succ:  l000000000043EFB3 l000000000043EFC0
l000000000043EFB3:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000043EFA0_exit
l000000000043EFC0:
	call rax (retsize: 0;)
	return
	// succ:  fn000000000043EFA0_exit
fn000000000043EFA0_exit:


// fn000000000043EFD0
// Return size: 8
define fn000000000043EFD0
fn000000000043EFD0_entry:
	rsp = fp
	// succ:  l000000000043EFD0
l000000000043EFD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x78<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp + 0xE0<64>:word64]
	rsi = Mem0[r8 + 8<64>:word64]
	r15 = Mem0[r8:word64]
	rbp = Mem0[r9:word64]
	rdi = rcx
	r12 = Mem0[r9 + 8<64>:word64]
	r14 = rdx
	r13 = Mem0[rsp + 0xE8<64>:word64]
	rcx = rbx + 0xD0<64>
	call fn0000000000472F60 (retsize: 8;)
	Mem0[rsp + 0x58<64>:word64] = rsi
	Mem0[rsp + 0x50<64>:word64] = r15
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x40<64>:word64] = rbp
	Mem0[rsp + 0x48<64>:word64] = r12
	r9 = rsp + 0x40<64>
	rax = Mem0[rax + 0x10<64>:word64]
	r8 = rsp + 0x50<64>
	rdx = r14
	rax = Mem0[rax + 0x10<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rbx
	Mem0[rsp + 0x28<64>:word64] = r13
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = Mem0[rsp + 0xF0<64>:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	call fn00000000004401B0 (retsize: 8;)
	rbx = Mem0[rsp + 0x60<64>:word64]
	rdx = Mem0[rsp + 0x68<64>:word64]
	SZO = cond(rbx & rbx)
	C = false
	si = dx
	r14d = edx
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(EQ,Z) l000000000043F0F0
	// succ:  l000000000043F074 l000000000043F0F0
l000000000043F074:
	SCZO = cond(dx - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043F0D0
	// succ:  l000000000043F07A l000000000043F0D0
l000000000043F07A:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000043F09D
	// succ:  l000000000043F082 l000000000043F09D
l000000000043F082:
	SCZO = cond(r12w - 0xFFFF<16>)
	eax = r12d
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l000000000043F0C0
	// succ:  l000000000043F08C l000000000043F0C0
l000000000043F08C:
	SCZO = cond(ax - 0xFFFF<16>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(r15b - al)
	branch Test(NE,Z) l000000000043F09D
	// succ:  l000000000043F098 l000000000043F09D
l000000000043F098:
	v31 = Mem0[r13 + 0<64>:word32] | 2<32>
	Mem0[r13 + 0<64>:word32] = v31
	SZO = cond(Mem0[r13 + 0<64>:word32])
	C = false
	// succ:  l000000000043F09D
l000000000043F09D:
	si = r14w
	rax = rdi
	Mem0[rdi:word64] = rbx
	Mem0[rdi + 8<64>:word64] = rsi
	rsp = rsp + 0x78<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043EFD0_exit
l000000000043F0C0:
	rax = Mem0[rbp + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbp + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043F120
	// succ:  l000000000043F0CA l000000000043F120
l000000000043F0CA:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043F08C
	// succ:  l000000000043F08C
l000000000043F0D0:
	rax = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043F110
	// succ:  l000000000043F0DA l000000000043F110
l000000000043F0DA:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043F0DD
l000000000043F0DD:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043F0F0
	// succ:  l000000000043F0E3 l000000000043F0F0
l000000000043F0E3:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(rbp & rbp)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(NE,Z) l000000000043F082
	// succ:  l000000000043F0EE l000000000043F082
l000000000043F0EE:
	goto l000000000043F09D
	// succ:  l000000000043F09D
l000000000043F0F0:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	SZO = cond(rbp & rbp)
	C = false
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	branch Test(EQ,Z) l000000000043F098
	// succ:  l000000000043F0FD l000000000043F098
l000000000043F0FD:
	SCZO = cond(r12w - 0xFFFF<16>)
	eax = r12d
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l000000000043F08C
	// succ:  l000000000043F107 l000000000043F08C
l000000000043F107:
	goto l000000000043F0C0
	// succ:  l000000000043F0C0
l000000000043F110:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000043F0DD
	// succ:  l000000000043F0DD
l000000000043F120:
	rax = Mem0[rbp + 0<64>:word64]
	rcx = rbp
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000043F08C
	// succ:  l000000000043F08C
fn000000000043EFD0_exit:


// fn000000000043F130
// Return size: 8
define fn000000000043F130
fn000000000043F130_entry:
	rsp = fp
	// succ:  l000000000043F130
l000000000043F130:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x78<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp + 0xE0<64>:word64]
	rsi = Mem0[r8 + 8<64>:word64]
	r15 = Mem0[r8:word64]
	rbp = Mem0[r9:word64]
	rdi = rcx
	r12 = Mem0[r9 + 8<64>:word64]
	r14 = rdx
	r13 = Mem0[rsp + 0xE8<64>:word64]
	rcx = rbx + 0xD0<64>
	call fn0000000000472F60 (retsize: 8;)
	Mem0[rsp + 0x58<64>:word64] = rsi
	Mem0[rsp + 0x50<64>:word64] = r15
	rcx = rsp + 0x60<64>
	Mem0[rsp + 0x40<64>:word64] = rbp
	Mem0[rsp + 0x48<64>:word64] = r12
	r9 = rsp + 0x40<64>
	rax = Mem0[rax + 0x10<64>:word64]
	r8 = rsp + 0x50<64>
	rdx = r14
	rax = Mem0[rax + 0x20<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rbx
	Mem0[rsp + 0x28<64>:word64] = r13
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = Mem0[rsp + 0xF0<64>:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	call fn00000000004401B0 (retsize: 8;)
	rbx = Mem0[rsp + 0x60<64>:word64]
	rdx = Mem0[rsp + 0x68<64>:word64]
	SZO = cond(rbx & rbx)
	C = false
	si = dx
	r14d = edx
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(EQ,Z) l000000000043F250
	// succ:  l000000000043F1D4 l000000000043F250
l000000000043F1D4:
	SCZO = cond(dx - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043F230
	// succ:  l000000000043F1DA l000000000043F230
l000000000043F1DA:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000043F1FD
	// succ:  l000000000043F1E2 l000000000043F1FD
l000000000043F1E2:
	SCZO = cond(r12w - 0xFFFF<16>)
	eax = r12d
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l000000000043F220
	// succ:  l000000000043F1EC l000000000043F220
l000000000043F1EC:
	SCZO = cond(ax - 0xFFFF<16>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(r15b - al)
	branch Test(NE,Z) l000000000043F1FD
	// succ:  l000000000043F1F8 l000000000043F1FD
l000000000043F1F8:
	v31 = Mem0[r13 + 0<64>:word32] | 2<32>
	Mem0[r13 + 0<64>:word32] = v31
	SZO = cond(Mem0[r13 + 0<64>:word32])
	C = false
	// succ:  l000000000043F1FD
l000000000043F1FD:
	si = r14w
	rax = rdi
	Mem0[rdi:word64] = rbx
	Mem0[rdi + 8<64>:word64] = rsi
	rsp = rsp + 0x78<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043F130_exit
l000000000043F220:
	rax = Mem0[rbp + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbp + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043F280
	// succ:  l000000000043F22A l000000000043F280
l000000000043F22A:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043F1EC
	// succ:  l000000000043F1EC
l000000000043F230:
	rax = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043F270
	// succ:  l000000000043F23A l000000000043F270
l000000000043F23A:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043F23D
l000000000043F23D:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043F250
	// succ:  l000000000043F243 l000000000043F250
l000000000043F243:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(rbp & rbp)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(NE,Z) l000000000043F1E2
	// succ:  l000000000043F24E l000000000043F1E2
l000000000043F24E:
	goto l000000000043F1FD
	// succ:  l000000000043F1FD
l000000000043F250:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	SZO = cond(rbp & rbp)
	C = false
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	branch Test(EQ,Z) l000000000043F1F8
	// succ:  l000000000043F25D l000000000043F1F8
l000000000043F25D:
	SCZO = cond(r12w - 0xFFFF<16>)
	eax = r12d
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l000000000043F1EC
	// succ:  l000000000043F267 l000000000043F1EC
l000000000043F267:
	goto l000000000043F220
	// succ:  l000000000043F220
l000000000043F270:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000043F23D
	// succ:  l000000000043F23D
l000000000043F280:
	rax = Mem0[rbp + 0<64>:word64]
	rcx = rbp
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000043F1EC
	// succ:  l000000000043F1EC
fn000000000043F130_exit:


// fn000000000043F290
// Return size: 8
define fn000000000043F290
fn000000000043F290_entry:
	rsp = fp
	// succ:  l000000000043F290
l000000000043F290:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x98<64>
	SCZO = cond(rsp)
	r13 = Mem0[rsp + 0x100<64>:word64]
	rbx = Mem0[r8 + 8<64>:word64]
	rsi = rcx
	r14 = rdx
	r15 = Mem0[r8:word64]
	rdi = Mem0[r9:word64]
	rbp = Mem0[r9 + 8<64>:word64]
	rcx = r13 + 0xD0<64>
	r12 = Mem0[rsp + 0x108<64>:word64]
	call fn0000000000473020 (retsize: 8;)
	rax = rsp + 0x8C<64>
	r8 = rsp + 0x60<64>
	rcx = rsp + 0x70<64>
	r9 = rsp + 0x50<64>
	rdx = r14
	Mem0[rsp + 0x40<64>:word64] = r13
	Mem0[rsp + 0x48<64>:word64] = rax
	rax = rsp + 0x88<64>
	Mem0[rsp + 0x38<64>:word64] = 4<64>
	Mem0[rsp + 0x30<64>:word32] = 0x270F<32>
	Mem0[rsp + 0x28<64>:word32] = 0<32>
	Mem0[rsp + 0x20<64>:word64] = rax
	Mem0[rsp + 0x68<64>:word64] = rbx
	Mem0[rsp + 0x8C<64>:word32] = 0<32>
	Mem0[rsp + 0x60<64>:word64] = r15
	Mem0[rsp + 0x50<64>:word64] = rdi
	Mem0[rsp + 0x58<64>:word64] = rbp
	call fn000000000043F530 (retsize: 8;)
	eax = Mem0[rsp + 0x8C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = Mem0[rsp + 0x78<64>:word64]
	r8 = Mem0[rsp + 0x70<64>:word64]
	SZO = cond(eax & eax)
	C = false
	bx = dx
	r14d = edx
	r14 = CONVERT(r14d, word32, uint64)
	r13 = r8
	branch Test(NE,Z) l000000000043F3D0
	// succ:  l000000000043F35F l000000000043F3D0
l000000000043F35F:
	ecx = Mem0[rsp + 0x88<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	r9d = SLICE(rcx + 0x64<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	eax = SLICE(rcx - 0x76C<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	rcx = Mem0[rsp + 0x110<64>:word64]
	branch Test(NS,S) l000000000043F37E
	// succ:  l000000000043F37A_1 l000000000043F37E
l000000000043F37A_1:
	eax = r9d
	// succ:  l000000000043F37E
l000000000043F37E:
	SZO = cond(r8 & r8)
	C = false
	Mem0[rcx + 0x14<64>:word32] = eax
	branch Test(EQ,Z) l000000000043F3DA
	// succ:  l000000000043F386 l000000000043F3DA
l000000000043F386:
	SCZO = cond(dx - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043F400
	// succ:  l000000000043F38C l000000000043F400
l000000000043F38C:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000043F3AD
	// succ:  l000000000043F394 l000000000043F3AD
l000000000043F394:
	SCZO = cond(bp - 0xFFFF<16>)
	eax = ebp
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l000000000043F3F0
	// succ:  l000000000043F39C l000000000043F3F0
l000000000043F39C:
	SCZO = cond(ax - 0xFFFF<16>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(r15b - al)
	branch Test(NE,Z) l000000000043F3AD
	// succ:  l000000000043F3A8 l000000000043F3AD
l000000000043F3A8:
	v36 = Mem0[r12:word32] | 2<32>
	Mem0[r12:word32] = v36
	SZO = cond(Mem0[r12:word32])
	C = false
	// succ:  l000000000043F3AD
l000000000043F3AD:
	bx = r14w
	rax = rsi
	Mem0[rsi:word64] = r13
	Mem0[rsi + 8<64>:word64] = rbx
	rsp = rsp + 0x98<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043F290_exit
l000000000043F3D0:
	v28 = Mem0[r12:word32] | 4<32>
	Mem0[r12:word32] = v28
	SZO = cond(Mem0[r12:word32])
	C = false
	SZO = cond(r8 & r8)
	C = false
	branch Test(NE,Z) l000000000043F386
	// succ:  l000000000043F3DA l000000000043F386
l000000000043F3DA:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	SZO = cond(rdi & rdi)
	C = false
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	branch Test(EQ,Z) l000000000043F3A8
	// succ:  l000000000043F3E8 l000000000043F3A8
l000000000043F3E8:
	SCZO = cond(bp - 0xFFFF<16>)
	eax = ebp
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l000000000043F39C
	// succ:  l000000000043F3F0 l000000000043F39C
l000000000043F3F0:
	rax = Mem0[rdi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rdi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043F430
	// succ:  l000000000043F3FA l000000000043F430
l000000000043F3FA:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043F39C
	// succ:  l000000000043F39C
l000000000043F400:
	rax = Mem0[r8 + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[r8 + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043F424
	// succ:  l000000000043F40A l000000000043F424
l000000000043F40A:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043F40D
l000000000043F40D:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043F3DA
	// succ:  l000000000043F413 l000000000043F3DA
l000000000043F413:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(rdi & rdi)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(NE,Z) l000000000043F394
	// succ:  l000000000043F422 l000000000043F394
l000000000043F422:
	goto l000000000043F3AD
	// succ:  l000000000043F3AD
l000000000043F424:
	rax = Mem0[r8:word64]
	rcx = r8
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000043F40D
	// succ:  l000000000043F40D
l000000000043F430:
	rax = Mem0[rdi:word64]
	rcx = rdi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000043F39C
	// succ:  l000000000043F39C
fn000000000043F290_exit:


// fn000000000043F440
// Return size: 8
define fn000000000043F440
fn000000000043F440_entry:
	rsp = fp
	// succ:  l000000000043F440
l000000000043F440:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x28<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043F440_exit
fn000000000043F440_exit:


// fn000000000043F4B0
// Return size: 8
define fn000000000043F4B0
fn000000000043F4B0_entry:
	rsp = fp
	// succ:  l000000000043F4B0
l000000000043F4B0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000043F4B0_exit
fn000000000043F4B0_exit:


// fn000000000043F4C0
// Return size: 8
define fn000000000043F4C0
fn000000000043F4C0_entry:
	rsp = fp
	// succ:  l000000000043F4C0
l000000000043F4C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	r10 = Mem0[r9 + 8<64>:word64]
	r9 = Mem0[r9:word64]
	rbx = rcx
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r8 = rsp + 0x50<64>
	Mem0[rsp + 0x40<64>:word64] = r9
	r9 = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r10
	Mem0[rsp + 0x30<64>:word64] = rcx
	rcx = Mem0[rsp + 0x98<64>:word64]
	Mem0[rsp + 0x50<64>:word128] = xmm1
	Mem0[rsp + 0x28<64>:word64] = rcx
	rcx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rbx
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x60<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043F4C0_exit
fn000000000043F4C0_exit:


// fn000000000043F530
// Return size: 8
define fn000000000043F530
fn000000000043F530_entry:
	rsp = fp
	// succ:  l000000000043F530
l000000000043F530:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[r8 + 8<64>:word64]
	rsi = Mem0[r8:word64]
	ebx = 0xA<32>
	rbx = CONVERT(ebx, word32, uint64)
	Mem0[rsp + 0x80<64>:word64] = rcx
	rbp = Mem0[r9:word64]
	r12d = CONVERT(Mem0[r9 + 8<64>:word16], word16, word32)
	r12 = CONVERT(r12d, word32, uint64)
	Mem0[rsp + 0x20<64>:word64] = rax
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	rax = Mem0[rsp + 0xC0<64>:word64]
	rcx = rax + 0xD0<64>
	call fn0000000000473020 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0xB8<64>:word64] - 2<64>)
	r15 = rax
	branch Test(EQ,Z) l000000000043F59B
	// succ:  l000000000043F586 l000000000043F59B
l000000000043F586:
	SCZO = cond(Mem0[rsp + 0xB8<64>:word64] - 4<64>)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	bx = 0x3E8<16>
	branch Test(EQ,Z) l000000000043F59B
	// succ:  l000000000043F598_1 l000000000043F59B
l000000000043F598_1:
	ebx = eax
	// succ:  l000000000043F59B
l000000000043F59B:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	eax = r13d
	rax = CONVERT(eax, word32, uint64)
	r13 = rdi
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	goto l000000000043F678
	// succ:  l000000000043F678
l000000000043F5B0:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000043F6B5
	// succ:  l000000000043F5BB l000000000043F6B5
l000000000043F5BB:
	SCZO = cond(r12w - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043F747
	// succ:  l000000000043F5C6 l000000000043F747
l000000000043F5C6:
	SCZO = cond(r12w - 0xFFFF<16>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - dl)
	branch Test(EQ,Z) l000000000043F6C3
	// succ:  l000000000043F5D6 l000000000043F6C3
l000000000043F5D6:
	SCZO = cond(r13 - Mem0[rsp + 0xB8<64>:word64])
	branch Test(UGE,C) l000000000043F6C3
	// succ:  l000000000043F5E4 l000000000043F6C3
l000000000043F5E4:
	SZO = cond(rsi & rsi)
	C = false
	edx = 0xFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(EQ,Z) l000000000043F5FD
	// succ:  l000000000043F5EE l000000000043F5FD
l000000000043F5EE:
	SCZO = cond(r14w - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043F770
	// succ:  l000000000043F5F9 l000000000043F770
l000000000043F5F9:
	edx = CONVERT(r14w, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000043F5FD
l000000000043F5FD:
	rax = Mem0[r15:word64]
	r8d = 0x2A<32>
	r8 = CONVERT(r8d, word32, uint64)
	rcx = r15
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	edx = CONVERT(al, byte, int32)
	eax = SLICE(rdx - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 9<8>)
	branch Test(UGT,CZ) l000000000043F6C3
	// succ:  l000000000043F61A l000000000043F6C3
l000000000043F61A:
	eax = SLICE(rdi + rdi * 4<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	edi = SLICE(rdx - 0x30<64> + rax * 2<64>, word32, 0)
	rdi = CONVERT(edi, word32, uint64)
	eax = edi
	rax = CONVERT(eax, word32, uint64)
	eax = eax *s ebx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - Mem0[rsp + 0xB0<64>:word32])
	branch Test(GT,SZO) l000000000043F6C3
	// succ:  l000000000043F633 l000000000043F6C3
l000000000043F633:
	eax = eax + ebx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(Mem0[rsp + 0xA8<64>:word32] - eax)
	branch Test(GE,SO) l000000000043F6C3
	// succ:  l000000000043F642 l000000000043F6C3
l000000000043F642:
	eax = 0x66666667<32>
	rax = CONVERT(eax, word32, uint64)
	edx_eax = ebx *s eax
	SCZO = cond(edx_eax)
	ebx = ebx >> 0x1F<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	edx = edx >> 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx - ebx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SZO = cond(rsi & rsi)
	C = false
	ebx = edx
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(EQ,Z) l000000000043F674
	// succ:  l000000000043F658 l000000000043F674
l000000000043F658:
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043F7D0
	// succ:  l000000000043F666 l000000000043F7D0
l000000000043F666:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rsi + 0x10<64>:word64] = rax
	// succ:  l000000000043F66E
l000000000043F66E:
	r14d = 0xFFFFFFFF<32>
	r14 = CONVERT(r14d, word32, uint64)
	// succ:  l000000000043F674
l000000000043F674:
	r13 = r13 + 1<64>
	SCZO = cond(r13)
	// succ:  l000000000043F678
l000000000043F678:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000043F730
	// succ:  l000000000043F681 l000000000043F730
l000000000043F681:
	SCZO = cond(r14w - 0xFFFF<16>)
	branch Test(NE,Z) l000000000043F5B0
	// succ:  l000000000043F68C l000000000043F5B0
l000000000043F68C:
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043F7F0
	// succ:  l000000000043F69A l000000000043F7F0
l000000000043F69A:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043F69D
l000000000043F69D:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043F730
	// succ:  l000000000043F6A7 l000000000043F730
l000000000043F6A7:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SZO = cond(rbp & rbp)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(NE,Z) l000000000043F5BB
	// succ:  l000000000043F6B5 l000000000043F5BB
l000000000043F6B5:
	SCZO = cond(r13 - Mem0[rsp + 0xB8<64>:word64])
	branch Test(ULT,C) l000000000043F5F9
	// succ:  l000000000043F6C3 l000000000043F5F9
l000000000043F6C3:
	eax = edi
	rax = CONVERT(eax, word32, uint64)
	rdi = r13
	SCZO = cond(Mem0[rsp + 0xB8<64>:word64] - rdi)
	r13d = eax
	r13 = CONVERT(r13d, word32, uint64)
	branch Test(EQ,Z) l000000000043F7C0
	// succ:  l000000000043F6D9 l000000000043F7C0
l000000000043F6D9:
	SCZO = cond(rdi - 2<64>)
	branch Test(NE,Z) l000000000043F7E0
	// succ:  l000000000043F6E3 l000000000043F7E0
l000000000043F6E3:
	SCZO = cond(Mem0[rsp + 0xB8<64>:word64] - 4<64>)
	branch Test(NE,Z) l000000000043F7E0
	// succ:  l000000000043F6F2 l000000000043F7E0
l000000000043F6F2:
	rax = Mem0[rsp + 0xA0<64>:word64]
	r9d = SLICE(r13 - 0x64<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rax:word32] = r9d
	// succ:  l000000000043F701
l000000000043F701:
	rax = Mem0[rsp + 0x80<64>:word64]
	Mem0[rsp + 0x20<64>:word16] = r14w
	rcx = Mem0[rsp + 0x20<64>:word64]
	Mem0[rax:word64] = rsi
	Mem0[rax + 8<64>:word64] = rcx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043F530_exit
l000000000043F730:
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000043F7A0
	// succ:  l000000000043F735 l000000000043F7A0
l000000000043F735:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SCZO = cond(r12w - 0xFFFF<16>)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l000000000043F5C6
	// succ:  l000000000043F747 l000000000043F5C6
l000000000043F747:
	rax = Mem0[rbp + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbp + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043F800
	// succ:  l000000000043F755 l000000000043F800
l000000000043F755:
	r12d = CONVERT(Mem0[rax:word16], word16, word32)
	r12 = CONVERT(r12d, word32, uint64)
	// succ:  l000000000043F759
l000000000043F759:
	SCZO = cond(r12w - 0xFFFF<16>)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l000000000043F767
	// succ:  l000000000043F763_1 l000000000043F767
l000000000043F763_1:
	rbp = rax
	// succ:  l000000000043F767
l000000000043F767:
	goto l000000000043F5C6
	// succ:  l000000000043F5C6
l000000000043F770:
	rax = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rsi + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043F820
	// succ:  l000000000043F77E l000000000043F820
l000000000043F77E:
	r14d = CONVERT(Mem0[rax:word16], word16, word32)
	r14 = CONVERT(r14d, word32, uint64)
	// succ:  l000000000043F782
l000000000043F782:
	SCZO = cond(r14w - 0xFFFF<16>)
	branch Test(NE,Z) l000000000043F5F9
	// succ:  l000000000043F78D l000000000043F5F9
l000000000043F78D:
	edx = 0xFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l000000000043F5FD
	// succ:  l000000000043F5FD
l000000000043F7A0:
	eax = edi
	rax = CONVERT(eax, word32, uint64)
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	rdi = r13
	SCZO = cond(Mem0[rsp + 0xB8<64>:word64] - rdi)
	r13d = eax
	r13 = CONVERT(r13d, word32, uint64)
	branch Test(NE,Z) l000000000043F6D9
	// succ:  l000000000043F7B8 l000000000043F6D9
l000000000043F7B8:
	// succ:  l000000000043F7C0
l000000000043F7C0:
	rax = Mem0[rsp + 0xA0<64>:word64]
	Mem0[rax:word32] = r13d
	goto l000000000043F701
	// succ:  l000000000043F701
l000000000043F7D0:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l000000000043F66E
	// succ:  l000000000043F66E
l000000000043F7E0:
	rax = Mem0[rsp + 0xC8<64>:word64]
	v39 = Mem0[rax:word32] | 4<32>
	Mem0[rax:word32] = v39
	SZO = cond(Mem0[rax:word32])
	C = false
	goto l000000000043F701
	// succ:  l000000000043F701
l000000000043F7F0:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000043F69D
	// succ:  l000000000043F69D
l000000000043F800:
	rax = Mem0[rbp + 0<64>:word64]
	Mem0[rsp + 0x2F<64>:byte] = dl
	rcx = rbp
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	edx = CONVERT(Mem0[rsp + 0x2F<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	r12d = eax
	r12 = CONVERT(r12d, word32, uint64)
	goto l000000000043F759
	// succ:  l000000000043F759
l000000000043F820:
	rax = Mem0[rsi:word64]
	rcx = rsi
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	goto l000000000043F782
	// succ:  l000000000043F782
fn000000000043F530_exit:


// fn000000000043F840
// Return size: 8
define fn000000000043F840
fn000000000043F840_entry:
	rsp = fp
	// succ:  l000000000043F840
l000000000043F840:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x108<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0x170<64>:word64]
	r14 = Mem0[r8:word64]
	rdi = rcx
	rsi = Mem0[r8 + 8<64>:word64]
	r15 = rdx
	rbp = Mem0[r9:word64]
	r12 = Mem0[r9 + 8<64>:word64]
	r13 = rax + 0xD0<64>
	rcx = r13
	call fn0000000000472F60 (retsize: 8;)
	rcx = r13
	rbx = rax
	call fn0000000000473020 (retsize: 8;)
	rax = Mem0[rbx + 0x10<64>:word64]
	rcx = rsp + 0x70<64>
	r9 = rsp + 0x50<64>
	r8 = rsp + 0x60<64>
	rdx = Mem0[rax + 0x90<64>:word64]
	Mem0[rsp + 0x90<64>:word64] = rdx
	rdx = Mem0[rax + 0x98<64>:word64]
	rax = Mem0[rax + 0xA0<64>:word64]
	Mem0[rsp + 0x98<64>:word64] = rdx
	rdx = r15
	Mem0[rsp + 0xA0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xA8<64>:word64]
	Mem0[rsp + 0xA8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xB0<64>:word64]
	Mem0[rsp + 0xB0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xB8<64>:word64]
	Mem0[rsp + 0xB8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xC0<64>:word64]
	Mem0[rsp + 0xC0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x58<64>:word64]
	Mem0[rsp + 0xC8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x60<64>:word64]
	Mem0[rsp + 0xD0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x68<64>:word64]
	Mem0[rsp + 0xD8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x70<64>:word64]
	Mem0[rsp + 0xE0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x78<64>:word64]
	Mem0[rsp + 0xE8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	Mem0[rsp + 0x8C<64>:word32] = 0<32>
	rax = Mem0[rax + 0x80<64>:word64]
	Mem0[rsp + 0xF0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x88<64>:word64]
	Mem0[rsp + 0x30<64>:word64] = 7<64>
	Mem0[rsp + 0x60<64>:word64] = r14
	Mem0[rsp + 0x68<64>:word64] = rsi
	Mem0[rsp + 0x50<64>:word64] = rbp
	Mem0[rsp + 0x58<64>:word64] = r12
	Mem0[rsp + 0xF8<64>:word64] = rax
	rax = rsp + 0x8C<64>
	Mem0[rsp + 0x40<64>:word64] = rax
	rax = Mem0[rsp + 0x170<64>:word64]
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = rsp + 0x90<64>
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = rsp + 0x88<64>
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000441480 (retsize: 8;)
	eax = Mem0[rsp + 0x8C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = Mem0[rsp + 0x78<64>:word64]
	rcx = Mem0[rsp + 0x70<64>:word64]
	SZO = cond(eax & eax)
	C = false
	si = dx
	r14d = edx
	r14 = CONVERT(r14d, word32, uint64)
	rbx = rcx
	branch Test(NE,Z) l000000000043FA80
	// succ:  l000000000043FA0D l000000000043FA80
l000000000043FA0D:
	r8d = Mem0[rsp + 0x88<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rax = Mem0[rsp + 0x180<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	Mem0[rax + 0x18<64>:word32] = r8d
	branch Test(EQ,Z) l000000000043FA90
	// succ:  l000000000043FA26 l000000000043FA90
l000000000043FA26:
	SCZO = cond(dx - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043FAC0
	// succ:  l000000000043FA30 l000000000043FAC0
l000000000043FA30:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000043FA59
	// succ:  l000000000043FA38 l000000000043FA59
l000000000043FA38:
	SCZO = cond(r12w - 0xFFFF<16>)
	eax = r12d
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l000000000043FAA7
	// succ:  l000000000043FA42 l000000000043FAA7
l000000000043FA42:
	SCZO = cond(ax - 0xFFFF<16>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(r15b - al)
	branch Test(NE,Z) l000000000043FA59
	// succ:  l000000000043FA4E l000000000043FA59
l000000000043FA4E:
	rax = Mem0[rsp + 0x178<64>:word64]
	v32 = Mem0[rax:word32] | 2<32>
	Mem0[rax:word32] = v32
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l000000000043FA59
l000000000043FA59:
	si = r14w
	rax = rdi
	Mem0[rdi:word64] = rbx
	Mem0[rdi + 8<64>:word64] = rsi
	rsp = rsp + 0x108<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043F840_exit
l000000000043FA80:
	rax = Mem0[rsp + 0x178<64>:word64]
	v33 = Mem0[rax:word32] | 4<32>
	Mem0[rax:word32] = v33
	SZO = cond(Mem0[rax:word32])
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000043FA26
	// succ:  l000000000043FA90 l000000000043FA26
l000000000043FA90:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	SZO = cond(rbp & rbp)
	C = false
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	branch Test(EQ,Z) l000000000043FA4E
	// succ:  l000000000043FA9D l000000000043FA4E
l000000000043FA9D:
	SCZO = cond(r12w - 0xFFFF<16>)
	eax = r12d
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l000000000043FA42
	// succ:  l000000000043FAA7 l000000000043FA42
l000000000043FAA7:
	rax = Mem0[rbp + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbp + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043FB00
	// succ:  l000000000043FAB1 l000000000043FB00
l000000000043FAB1:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043FA42
	// succ:  l000000000043FA42
l000000000043FAC0:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043FAF0
	// succ:  l000000000043FACA l000000000043FAF0
l000000000043FACA:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043FACD
l000000000043FACD:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043FA90
	// succ:  l000000000043FAD3 l000000000043FA90
l000000000043FAD3:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(rbp & rbp)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(NE,Z) l000000000043FA38
	// succ:  l000000000043FAE2 l000000000043FA38
l000000000043FAE2:
	goto l000000000043FA59
	// succ:  l000000000043FA59
l000000000043FAF0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000043FACD
	// succ:  l000000000043FACD
l000000000043FB00:
	rax = Mem0[rbp + 0<64>:word64]
	rcx = rbp
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000043FA42
	// succ:  l000000000043FA42
fn000000000043F840_exit:


// fn000000000043FB10
// Return size: 8
define fn000000000043FB10
fn000000000043FB10_entry:
	rsp = fp
	// succ:  l000000000043FB10
l000000000043FB10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x68<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	rax = Mem0[r8:word64]
	rdx = Mem0[r8 + 8<64>:word64]
	rsi = Mem0[rbp + 0x60<64>:word64]
	Mem0[rbp + 0x30<64>:word64] = rcx
	r12 = Mem0[rbp + 0x58<64>:word64]
	rbx = Mem0[rbp + 0x70<64>:word64]
	Mem0[rbp - 0x30<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rbp - 0x28<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rbp - 0x40<64>:word64] = rax
	rax = Mem0[rbp + 0x68<64>:word64]
	Mem0[rbp - 0x38<64>:word64] = rdx
	rcx = rax + 0xD0<64>
	call fn0000000000473020 (retsize: 8;)
	r15 = rax
	rax = CONVERT(0x1E<32> + rsi * 4<64>, word32, word64)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	rdx = rbp - 0x30<64>
	rax = rbp - 0x40<64>
	r13 = rsp + 0x20<64>
	rcx = rdx
	Mem0[rbp - 0x48<64>:word64] = rdx
	rdx = rax
	Mem0[rbp - 0x50<64>:word64] = rax
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000043FBCB
	// succ:  l000000000043FBA1 l000000000043FBCB
l000000000043FBA1:
	v21 = Mem0[rbx:word32] | 4<32>
	Mem0[rbx:word32] = v21
	SZO = cond(Mem0[rbx:word32])
	C = false
	// succ:  l000000000043FBA4
l000000000043FBA4:
	rbx = Mem0[rbp + 0x30<64>:word64]
	rax = Mem0[rbp - 0x30<64>:word64]
	rdx = Mem0[rbp - 0x28<64>:word64]
	Mem0[rbx:word64] = rax
	rax = rbx
	Mem0[rbx + 8<64>:word64] = rdx
	rsp = rbp - 0x18<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043FB10_exit
l000000000043FBCB:
	rcx = Mem0[rbp - 0x48<64>:word64]
	call fn000000000042B1B0 (retsize: 8;)
	SZO = cond(rsi & rsi)
	C = false
	r11d = eax
	r11 = CONVERT(r11d, word32, uint64)
	branch Test(EQ,Z) l000000000043FBA1
	// succ:  l000000000043FBDC l000000000043FBA1
l000000000043FBDC:
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	goto l000000000043FC03
	// succ:  l000000000043FC03
l000000000043FBE3:
	rax = Mem0[r15:word64]
	Mem0[rbp - 0x58<64>:word32] = r11d
	rcx = r15
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	r11d = Mem0[rbp - 0x58<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	SCZO = cond(r11w - ax)
	branch Test(EQ,Z) l000000000043FC10
	// succ:  l000000000043FBFA l000000000043FC10
l000000000043FBFA:
	r14 = r14 + 1<64>
	SCZO = cond(r14)
	SCZO = cond(r14 - rsi)
	branch Test(EQ,Z) l000000000043FC22
	// succ:  l000000000043FC03 l000000000043FC22
l000000000043FC03:
	rax = Mem0[r12 + r14 * 8<64>:word64]
	edx = CONVERT(Mem0[rax:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(r11w - dx)
	branch Test(NE,Z) l000000000043FBE3
	// succ:  l000000000043FC10 l000000000043FBE3
l000000000043FC10:
	Mem0[r13 + 0<64> + rdi * 4<64>:word32] = r14d
	r14 = r14 + 1<64>
	SCZO = cond(r14)
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	SCZO = cond(r14 - rsi)
	branch Test(NE,Z) l000000000043FC03
	// succ:  l000000000043FC22 l000000000043FC03
l000000000043FC22:
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	// succ:  l000000000043FC25
l000000000043FC25:
	SCZO = cond(rdi - 1<64>)
	branch Test(ULE,CZ) l000000000043FD53
	// succ:  l000000000043FC2F l000000000043FD53
l000000000043FC2F:
	rax = CONVERT(Mem0[r13 + 0<64>:word32], word32, int64)
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	rcx = Mem0[r12 + rax * 8<64>:word64]
	eax = wcslen(rcx)
	rsi = rax
	// succ:  l000000000043FC45
l000000000043FC45:
	rax = CONVERT(Mem0[r13 + 0<64> + r15 * 4<64>:word32], word32, int64)
	rcx = Mem0[r12 + rax * 8<64>:word64]
	eax = wcslen(rcx)
	SCZO = cond(rsi - rax)
	branch Test(ULE,CZ) l000000000043FC5A
	// succ:  l000000000043FC56_1 l000000000043FC5A
l000000000043FC56_1:
	rsi = rax
	// succ:  l000000000043FC5A
l000000000043FC5A:
	r15 = r15 + 1<64>
	SCZO = cond(r15)
	SCZO = cond(r15 - rdi)
	branch Test(ULT,C) l000000000043FC45
	// succ:  l000000000043FC63 l000000000043FC45
l000000000043FC63:
	rcx = Mem0[rbp - 0x30<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043FC8B
	// succ:  l000000000043FC6C l000000000043FC8B
l000000000043FC6C:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043FD48
	// succ:  l000000000043FC7A l000000000043FD48
l000000000043FC7A:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l000000000043FC82
l000000000043FC82:
	ecx = 0xFFFFFFFF<32>
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rbp - 0x28<64>:word16] = cx
	// succ:  l000000000043FC8B
l000000000043FC8B:
	r14 = r14 + 1<64>
	SCZO = cond(r14)
	SCZO = cond(r14 - rsi)
	branch Test(UGE,C) l000000000043FBA1
	// succ:  l000000000043FC98 l000000000043FBA1
l000000000043FC98:
	rdx = Mem0[rbp - 0x50<64>:word64]
	rcx = Mem0[rbp - 0x48<64>:word64]
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000043FBA1
	// succ:  l000000000043FCAD l000000000043FBA1
l000000000043FCAD:
	r11 = r14 + r14
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l000000000043FCCA
	// succ:  l000000000043FCCA
l000000000043FCB5:
	rdi = rdi - 1<64>
	SCZO = cond(rdi)
	eax = Mem0[r13 + 0<64> + rdi * 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[r15:word32] = eax
	// succ:  l000000000043FCC1
l000000000043FCC1:
	SCZO = cond(rdi - rdx)
	branch Test(ULE,CZ) l000000000043FC25
	// succ:  l000000000043FCCA l000000000043FC25
l000000000043FCCA:
	r15 = r13 + 0<64> + rdx * 4<64>
	rcx = Mem0[rbp - 0x30<64>:word64]
	rax = CONVERT(Mem0[r15:word32], word32, int64)
	SZO = cond(rcx & rcx)
	C = false
	rax = Mem0[r12 + rax * 8<64>:word64]
	esi = CONVERT(Mem0[rax + r11:word16], word16, word32)
	rsi = CONVERT(esi, word32, uint64)
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l000000000043FCF3
	// succ:  l000000000043FCE9 l000000000043FCF3
l000000000043FCE9:
	eax = CONVERT(Mem0[rbp - 0x28<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043FD00
	// succ:  l000000000043FCF3 l000000000043FD00
l000000000043FCF3:
	SCZO = cond(si - ax)
	branch Test(NE,Z) l000000000043FCB5
	// succ:  l000000000043FCF8 l000000000043FCB5
l000000000043FCF8:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	goto l000000000043FCC1
	// succ:  l000000000043FCC1
l000000000043FD00:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043FD30
	// succ:  l000000000043FD0A l000000000043FD30
l000000000043FD0A:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043FD0D
l000000000043FD0D:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000043FD20
	// succ:  l000000000043FD13 l000000000043FD20
l000000000043FD13:
	Mem0[rbp - 0x28<64>:word16] = ax
	goto l000000000043FCF3
	// succ:  l000000000043FCF3
l000000000043FD20:
	Mem0[rbp - 0x30<64>:word64] = 0<64>
	goto l000000000043FCF3
	// succ:  l000000000043FCF3
l000000000043FD30:
	rax = Mem0[rcx:word64]
	Mem0[rbp - 0x60<64>:word64] = rdx
	Mem0[rbp - 0x58<64>:word64] = r11
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	rdx = Mem0[rbp - 0x60<64>:word64]
	r11 = Mem0[rbp - 0x58<64>:word64]
	goto l000000000043FD0D
	// succ:  l000000000043FD0D
l000000000043FD48:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l000000000043FC82
	// succ:  l000000000043FC82
l000000000043FD53:
	SCZO = cond(rdi - 1<64>)
	branch Test(NE,Z) l000000000043FBA1
	// succ:  l000000000043FD5D l000000000043FBA1
l000000000043FD5D:
	rcx = Mem0[rbp - 0x30<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043FD74
	// succ:  l000000000043FD66 l000000000043FD74
l000000000043FD66:
	call fn0000000000462DD0 (retsize: 8;)
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbp - 0x28<64>:word16] = dx
	// succ:  l000000000043FD74
l000000000043FD74:
	rax = CONVERT(Mem0[r13 + 0<64>:word32], word32, int64)
	r15 = r14 + 1<64>
	rsi = Mem0[r12 + rax * 8<64>:word64]
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	rcx = rsi
	eax = wcslen(rcx)
	SCZO = cond(rax - r15)
	r12 = rax
	branch Test(ULE,CZ) l000000000043FDA3
	// succ:  l000000000043FD92 l000000000043FDA3
l000000000043FD92:
	rdx = Mem0[rbp - 0x50<64>:word64]
	rcx = Mem0[rbp - 0x48<64>:word64]
	call fn000000000042B0C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000043FDB7
	// succ:  l000000000043FDA3 l000000000043FDB7
l000000000043FDA3:
	SCZO = cond(r15 - r12)
	branch Test(NE,Z) l000000000043FBA1
	// succ:  l000000000043FDAC l000000000043FBA1
l000000000043FDAC:
	rax = Mem0[rbp + 0x50<64>:word64]
	Mem0[rax:word32] = edi
	goto l000000000043FBA4
	// succ:  l000000000043FBA4
l000000000043FDB7:
	r14d = CONVERT(Mem0[rsi + r15 * 2<64>:word16], word16, word32)
	r14 = CONVERT(r14d, word32, uint64)
	rcx = Mem0[rbp - 0x48<64>:word64]
	call fn000000000042B1B0 (retsize: 8;)
	SCZO = cond(ax - r14w)
	branch Test(NE,Z) l000000000043FDA3
	// succ:  l000000000043FDCB l000000000043FDA3
l000000000043FDCB:
	rcx = Mem0[rbp - 0x30<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043FDEF
	// succ:  l000000000043FDD4 l000000000043FDEF
l000000000043FDD4:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043FDFA
	// succ:  l000000000043FDDE l000000000043FDFA
l000000000043FDDE:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l000000000043FDE6
l000000000043FDE6:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp - 0x28<64>:word16] = ax
	// succ:  l000000000043FDEF
l000000000043FDEF:
	r15 = r15 + 1<64>
	SCZO = cond(r15)
	SCZO = cond(r12 - r15)
	branch Test(UGT,CZ) l000000000043FD92
	// succ:  l000000000043FDF8 l000000000043FD92
l000000000043FDF8:
	goto l000000000043FDA3
	// succ:  l000000000043FDA3
l000000000043FDFA:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l000000000043FDE6
	// succ:  l000000000043FDE6
fn000000000043FB10_exit:


// fn000000000043FE10
// Return size: 8
define fn000000000043FE10
fn000000000043FE10_entry:
	rsp = fp
	// succ:  l000000000043FE10
l000000000043FE10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x158<64>
	SCZO = cond(rsp)
	rax = Mem0[rsp + 0x1C0<64>:word64]
	r14 = Mem0[r8:word64]
	rdi = rcx
	rsi = Mem0[r8 + 8<64>:word64]
	r15 = rdx
	rbp = Mem0[r9:word64]
	r12 = Mem0[r9 + 8<64>:word64]
	r13 = rax + 0xD0<64>
	rcx = r13
	call fn0000000000472F60 (retsize: 8;)
	rcx = r13
	rbx = rax
	call fn0000000000473020 (retsize: 8;)
	rax = Mem0[rbx + 0x10<64>:word64]
	rcx = rsp + 0x70<64>
	r9 = rsp + 0x50<64>
	r8 = rsp + 0x60<64>
	rdx = Mem0[rax + 0x128<64>:word64]
	Mem0[rsp + 0x90<64>:word64] = rdx
	rdx = Mem0[rax + 0x130<64>:word64]
	rax = Mem0[rax + 0x138<64>:word64]
	Mem0[rsp + 0x98<64>:word64] = rdx
	rdx = r15
	Mem0[rsp + 0xA0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x140<64>:word64]
	Mem0[rsp + 0xA8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x148<64>:word64]
	Mem0[rsp + 0xB0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x150<64>:word64]
	Mem0[rsp + 0xB8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x158<64>:word64]
	Mem0[rsp + 0xC0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x160<64>:word64]
	Mem0[rsp + 0xC8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x168<64>:word64]
	Mem0[rsp + 0xD0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x170<64>:word64]
	Mem0[rsp + 0xD8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x178<64>:word64]
	Mem0[rsp + 0xE0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x180<64>:word64]
	Mem0[rsp + 0xE8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xC8<64>:word64]
	Mem0[rsp + 0xF0<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xD0<64>:word64]
	Mem0[rsp + 0xF8<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xD8<64>:word64]
	Mem0[rsp + 0x100<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xE0<64>:word64]
	Mem0[rsp + 0x108<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xE8<64>:word64]
	Mem0[rsp + 0x110<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xF0<64>:word64]
	Mem0[rsp + 0x118<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0xF8<64>:word64]
	Mem0[rsp + 0x120<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x100<64>:word64]
	Mem0[rsp + 0x128<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x108<64>:word64]
	Mem0[rsp + 0x130<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x110<64>:word64]
	Mem0[rsp + 0x138<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = Mem0[rax + 0x118<64>:word64]
	Mem0[rsp + 0x140<64>:word64] = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	Mem0[rsp + 0x8C<64>:word32] = 0<32>
	rax = Mem0[rax + 0x120<64>:word64]
	Mem0[rsp + 0x30<64>:word64] = 0xC<64>
	Mem0[rsp + 0x60<64>:word64] = r14
	Mem0[rsp + 0x68<64>:word64] = rsi
	Mem0[rsp + 0x50<64>:word64] = rbp
	Mem0[rsp + 0x58<64>:word64] = r12
	Mem0[rsp + 0x148<64>:word64] = rax
	rax = rsp + 0x8C<64>
	Mem0[rsp + 0x40<64>:word64] = rax
	rax = Mem0[rsp + 0x1C0<64>:word64]
	Mem0[rsp + 0x38<64>:word64] = rax
	rax = rsp + 0x90<64>
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = rsp + 0x88<64>
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000441480 (retsize: 8;)
	eax = Mem0[rsp + 0x8C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = Mem0[rsp + 0x78<64>:word64]
	rcx = Mem0[rsp + 0x70<64>:word64]
	SZO = cond(eax & eax)
	C = false
	si = dx
	r14d = edx
	r14 = CONVERT(r14d, word32, uint64)
	rbx = rcx
	branch Test(NE,Z) l0000000000440120
	// succ:  l00000000004400AA l0000000000440120
l00000000004400AA:
	r8d = Mem0[rsp + 0x88<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rax = Mem0[rsp + 0x1D0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	Mem0[rax + 0x10<64>:word32] = r8d
	branch Test(EQ,Z) l0000000000440130
	// succ:  l00000000004400C3 l0000000000440130
l00000000004400C3:
	SCZO = cond(dx - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000440160
	// succ:  l00000000004400CD l0000000000440160
l00000000004400CD:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l00000000004400F6
	// succ:  l00000000004400D5 l00000000004400F6
l00000000004400D5:
	SCZO = cond(r12w - 0xFFFF<16>)
	eax = r12d
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l0000000000440147
	// succ:  l00000000004400DF l0000000000440147
l00000000004400DF:
	SCZO = cond(ax - 0xFFFF<16>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(r15b - al)
	branch Test(NE,Z) l00000000004400F6
	// succ:  l00000000004400EB l00000000004400F6
l00000000004400EB:
	rax = Mem0[rsp + 0x1C8<64>:word64]
	v32 = Mem0[rax:word32] | 2<32>
	Mem0[rax:word32] = v32
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l00000000004400F6
l00000000004400F6:
	si = r14w
	rax = rdi
	Mem0[rdi:word64] = rbx
	Mem0[rdi + 8<64>:word64] = rsi
	rsp = rsp + 0x158<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000043FE10_exit
l0000000000440120:
	rax = Mem0[rsp + 0x1C8<64>:word64]
	v33 = Mem0[rax:word32] | 4<32>
	Mem0[rax:word32] = v33
	SZO = cond(Mem0[rax:word32])
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l00000000004400C3
	// succ:  l0000000000440130 l00000000004400C3
l0000000000440130:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	SZO = cond(rbp & rbp)
	C = false
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	branch Test(EQ,Z) l00000000004400EB
	// succ:  l000000000044013D l00000000004400EB
l000000000044013D:
	SCZO = cond(r12w - 0xFFFF<16>)
	eax = r12d
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l00000000004400DF
	// succ:  l0000000000440147 l00000000004400DF
l0000000000440147:
	rax = Mem0[rbp + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbp + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004401A0
	// succ:  l0000000000440151 l00000000004401A0
l0000000000440151:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l00000000004400DF
	// succ:  l00000000004400DF
l0000000000440160:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000440190
	// succ:  l000000000044016A l0000000000440190
l000000000044016A:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000044016D
l000000000044016D:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000440130
	// succ:  l0000000000440173 l0000000000440130
l0000000000440173:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	SZO = cond(rbp & rbp)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(NE,Z) l00000000004400D5
	// succ:  l0000000000440182 l00000000004400D5
l0000000000440182:
	goto l00000000004400F6
	// succ:  l00000000004400F6
l0000000000440190:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000044016D
	// succ:  l000000000044016D
l00000000004401A0:
	rax = Mem0[rbp + 0<64>:word64]
	rcx = rbp
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l00000000004400DF
	// succ:  l00000000004400DF
fn000000000043FE10_exit:


// fn00000000004401B0
// Return size: 8
define fn00000000004401B0
fn00000000004401B0_entry:
	rsp = fp
	// succ:  l00000000004401B0
l00000000004401B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x138<64>
	SCZO = cond(rsp)
	rax = Mem0[r8:word64]
	rdi = Mem0[rsp + 0x1B8<64>:word64]
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	Mem0[rsp + 0x188<64>:word64] = rdx
	rdx = Mem0[r8 + 8<64>:word64]
	r13 = rsp + 0xC8<64>
	Mem0[rsp + 0x180<64>:word64] = rcx
	Mem0[rsp + 0xB0<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0xB8<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0xA0<64>:word64] = rax
	rax = Mem0[rsp + 0x1A0<64>:word64]
	Mem0[rsp + 0xA8<64>:word64] = rdx
	rbx = rax + 0xD0<64>
	rcx = rbx
	call fn0000000000472F60 (retsize: 8;)
	rcx = rbx
	r12 = rax
	call fn0000000000473020 (retsize: 8;)
	rcx = rdi
	rbx = rax
	eax = wcslen(rcx)
	rdx = rsp + 0xB0<64>
	rsi = rax
	Mem0[rsp + 0xC8<64>:word32] = 0<32>
	rax = Mem0[rsp + 0xB0<64>:word64]
	Mem0[rsp + 0x68<64>:word64] = rdx
	rdx = rsp + 0x90<64>
	Mem0[rsp + 0x60<64>:word64] = rdx
	rdx = rsp + 0x70<64>
	Mem0[rsp + 0x50<64>:word64] = rdx
	rdx = rsp + 0x80<64>
	Mem0[rsp + 0x58<64>:word64] = rdx
	goto l0000000000440330
	// succ:  l0000000000440330
l0000000000440290:
	rcx = Mem0[rsp + 0xA0<64>:word64]
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004402B9
	// succ:  l000000000044029F l00000000004402B9
l000000000044029F:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0xA8<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000044039F
	// succ:  l00000000004402B0 l000000000044039F
l00000000004402B0:
	SCZO = cond(bpl - al)
	branch Test(EQ,Z) l00000000004403D0
	// succ:  l00000000004402B9 l00000000004403D0
l00000000004402B9:
	SCZO = cond(r15 - rsi)
	eax = Mem0[rsp + 0xC8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	branch Test(UGE,C) l00000000004403D7
	// succ:  l00000000004402C9 l00000000004403D7
l00000000004402C9:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004403D7
	// succ:  l00000000004402D1 l00000000004403D7
l00000000004402D1:
	rbp = r15 + r15
	rax = Mem0[rbx:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rbx
	r14 = rdi + rbp
	edx = CONVERT(Mem0[r14:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(al - 0x25<8>)
	branch Test(EQ,Z) l0000000000440421
	// succ:  l00000000004402F1 l0000000000440421
l00000000004402F1:
	rcx = Mem0[rsp + 0xB0<64>:word64]
	ebp = CONVERT(Mem0[r14:word16], word16, word32)
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	rax = rcx
	branch Test(EQ,Z) l000000000044047C
	// succ:  l0000000000440309 l000000000044047C
l0000000000440309:
	edx = CONVERT(Mem0[rsp + 0xB8<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dx - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000440490
	// succ:  l000000000044031B l0000000000440490
l000000000044031B:
	SCZO = cond(bp - dx)
	branch Test(EQ,Z) l00000000004404D5
	// succ:  l0000000000440324 l00000000004404D5
l0000000000440324:
	v31 = Mem0[rsp + 0xC8<64>:word32] | 4<32>
	Mem0[rsp + 0xC8<64>:word32] = v31
	SZO = cond(Mem0[rsp + 0xC8<64>:word32])
	C = false
	// succ:  l000000000044032C
l000000000044032C:
	r15 = r15 + 1<64>
	SCZO = cond(r15)
	// succ:  l0000000000440330
l0000000000440330:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000044037C
	// succ:  l0000000000440335 l000000000044037C
l0000000000440335:
	SCZO = cond(Mem0[rsp + 0xB8<64>:word16] - 0xFFFF<16>)
	branch Test(NE,Z) l0000000000440290
	// succ:  l0000000000440344 l0000000000440290
l0000000000440344:
	rdx = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rax + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000440590
	// succ:  l0000000000440352 l0000000000440590
l0000000000440352:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000440355
l0000000000440355:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000440370
	// succ:  l000000000044035B l0000000000440370
l000000000044035B:
	Mem0[rsp + 0xB8<64>:word16] = ax
	goto l0000000000440290
	// succ:  l0000000000440290
l0000000000440370:
	Mem0[rsp + 0xB0<64>:word64] = 0<64>
	// succ:  l000000000044037C
l000000000044037C:
	rcx = Mem0[rsp + 0xA0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004403D0
	// succ:  l0000000000440389 l00000000004403D0
l0000000000440389:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0xA8<64>:word16] - 0xFFFF<16>)
	ebp = 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	branch Test(NE,Z) l00000000004402B0
	// succ:  l000000000044039F l00000000004402B0
l000000000044039F:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000440580
	// succ:  l00000000004403AD l0000000000440580
l00000000004403AD:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004403B0
l00000000004403B0:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000440500
	// succ:  l00000000004403BA l0000000000440500
l00000000004403BA:
	Mem0[rsp + 0xA8<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(bpl - al)
	branch Test(NE,Z) l00000000004402B9
	// succ:  l00000000004403CD l00000000004402B9
l00000000004403CD:
	// succ:  l00000000004403D0
l00000000004403D0:
	eax = Mem0[rsp + 0xC8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004403D7
l00000000004403D7:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004403E0
	// succ:  l00000000004403DB l00000000004403E0
l00000000004403DB:
	SCZO = cond(r15 - rsi)
	branch Test(EQ,Z) l00000000004403EB
	// succ:  l00000000004403E0 l00000000004403EB
l00000000004403E0:
	rax = Mem0[rsp + 0x1A8<64>:word64]
	v26 = Mem0[rax:word32] | 4<32>
	Mem0[rax:word32] = v26
	SZO = cond(Mem0[rax:word32])
	C = false
	// succ:  l00000000004403EB
l00000000004403EB:
	rdi = Mem0[rsp + 0x180<64>:word64]
	rax = Mem0[rsp + 0xB0<64>:word64]
	rdx = Mem0[rsp + 0xB8<64>:word64]
	Mem0[rdi:word64] = rax
	rax = rdi
	Mem0[rdi + 8<64>:word64] = rdx
	rsp = rsp + 0x138<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004401B0_exit
l0000000000440421:
	rax = Mem0[rbx:word64]
	edx = CONVERT(Mem0[rdi + 2<64> + rbp:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rbx
	r14 = r15 + 1<64>
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(al - 0x4F<8>)
	Mem0[rsp + 0xCC<64>:word32] = 0<32>
	branch Test(EQ,Z) l0000000000440520
	// succ:  l0000000000440449 l0000000000440520
l0000000000440449:
	SCZO = cond(al - 0x45<8>)
	branch Test(EQ,Z) l0000000000440520
	// succ:  l0000000000440451 l0000000000440520
l0000000000440451:
	eax = eax - 0x41<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 0x38<8>)
	branch Test(UGT,CZ) l0000000000440562
	// succ:  l000000000044045C l0000000000440562
l000000000044045C:
	rdx = 0x000000000048DBF8<p64>
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(Mem0[rdx + rax * 4<64>:word32], word32, int64)
	rdx = rdx + rax
	SCZO = cond(rdx)
	call rdx (retsize: 0;)
	return
	// succ:  fn00000000004401B0_exit
l0000000000440470:
	Mem0[rsp + 0xB0<64>:word64] = 0<64>
	// succ:  l000000000044047C
l000000000044047C:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(bp - 0xFFFF<16>)
	branch Test(NE,Z) l0000000000440324
	// succ:  l0000000000440488 l0000000000440324
l0000000000440488:
	goto l000000000044032C
	// succ:  l000000000044032C
l0000000000440490:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004405A0
	// succ:  l000000000044049E l00000000004405A0
l000000000044049E:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004404A1
l00000000004404A1:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000440470
	// succ:  l00000000004404A7 l0000000000440470
l00000000004404A7:
	SCZO = cond(bp - ax)
	Mem0[rsp + 0xB8<64>:word16] = ax
	branch Test(EQ,Z) l00000000004404C1
	// succ:  l00000000004404B4 l00000000004404C1
l00000000004404B4:
	rax = Mem0[rsp + 0xB0<64>:word64]
	goto l0000000000440324
	// succ:  l0000000000440324
l00000000004404C1:
	rcx = Mem0[rsp + 0xB0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	rax = rcx
	branch Test(EQ,Z) l000000000044032C
	// succ:  l00000000004404D5 l000000000044032C
l00000000004404D5:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004413A0
	// succ:  l00000000004404E3 l00000000004413A0
l00000000004404E3:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l00000000004404EB
l00000000004404EB:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0xB8<64>:word16] = ax
	rax = rcx
	goto l000000000044032C
	// succ:  l000000000044032C
l0000000000440500:
	Mem0[rsp + 0xA0<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000004402B0
	// succ:  l00000000004402B0
l0000000000440520:
	rax = Mem0[rbx:word64]
	edx = CONVERT(Mem0[rdi + 4<64> + rbp:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r14 = r15 + 2<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rbx
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	goto l0000000000440451
	// succ:  l0000000000440451
l0000000000440562:
	v33 = Mem0[rsp + 0xC8<64>:word32] | 4<32>
	Mem0[rsp + 0xC8<64>:word32] = v33
	SZO = cond(Mem0[rsp + 0xC8<64>:word32])
	C = false
	rax = Mem0[rsp + 0xB0<64>:word64]
	r15 = r14
	goto l000000000044032C
	// succ:  l000000000044032C
l0000000000440580:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l00000000004403B0
	// succ:  l00000000004403B0
l0000000000440590:
	rdx = Mem0[rax:word64]
	rcx = rax
	call Mem0[rdx + 0x48<64>:word64] (retsize: 8;)
	goto l0000000000440355
	// succ:  l0000000000440355
l00000000004405A0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l00000000004404A1
	// succ:  l00000000004404A1
l00000000004413A0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0xB0<64>:word64]
	goto l00000000004404EB
	// succ:  l00000000004404EB
fn00000000004401B0_exit:


