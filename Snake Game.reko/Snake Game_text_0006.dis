// fn0000000000461040
// Return size: 0
define fn0000000000461040
fn0000000000461040_entry:
	rsp = fp
	// succ:  l0000000000461040
l0000000000461040:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496BD8<p64>
	rbx = rcx
	rcx = rcx + 8<64>
	Mem0[rcx - 8<64>:word64] = rax
	rax = 0x0000000000496C00<p64>
	Mem0[rcx + 0xC0<64>:word64] = rax
	rax = 0x0000000000496710<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000455AB0 (retsize: 8;)
	rcx = rbx + 0x50<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rcx = rbx + 0x40<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 8<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[0x0000000000491E20<p64>:word64]
	rcx = rbx + 0xC8<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0xC8<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004610B3_thunk_fn000000000046D3D0
l00000000004610B3_thunk_fn000000000046D3D0:
	call fn000000000046D3D0 (retsize: 0;)
	return
	// succ:  fn0000000000461040_exit
fn0000000000461040_exit:


// fn00000000004610C0
// Return size: 8
define fn00000000004610C0
fn00000000004610C0_entry:
	rsp = fp
	// succ:  l00000000004610C0
l00000000004610C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rsi = rdx
	rbx = rcx
	rcx = rcx + 8<64>
	Mem0[rcx - 8<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rdx + 0x18<64>:word64]
	Mem0[rcx - 8<64> + rax:word64] = rdx
	rax = 0x0000000000496710<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000455AB0 (retsize: 8;)
	rcx = rbx + 0x50<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rcx = rbx + 0x40<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 8<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[rsi + 8<64>:word64]
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x10<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004610C0_exit
fn00000000004610C0_exit:


// fn0000000000461130
// Return size: 8
define fn0000000000461130
fn0000000000461130_entry:
	rsp = fp
	// succ:  l0000000000461130
l0000000000461130:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rcx + 8<64>
	r8d = r8d | 0x10<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn00000000004576D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000461160
	// succ:  l000000000046114D l0000000000461160
l000000000046114D:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046115B_thunk_fn000000000046EB40
l000000000046115B_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn0000000000461130_exit
l0000000000461160:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000461172_thunk_fn000000000046EB40
l0000000000461172_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn0000000000461130_exit
fn0000000000461130_exit:


// fn0000000000461180
// Return size: 8
define fn0000000000461180
fn0000000000461180_entry:
	rsp = fp
	// succ:  l0000000000461180
l0000000000461180:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdx = Mem0[rdx:word64]
	rbx = rcx
	rcx = rcx + 8<64>
	r8d = r8d | 0x10<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn00000000004576D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l00000000004611B3
	// succ:  l00000000004611A0 l00000000004611B3
l00000000004611A0:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004611AE_thunk_fn000000000046EB40
l00000000004611AE_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn0000000000461180_exit
l00000000004611B3:
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004611C5_thunk_fn000000000046EB40
l00000000004611C5_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn0000000000461180_exit
fn0000000000461180_exit:


// fn00000000004611D0
// Return size: 8
define fn00000000004611D0
fn00000000004611D0_entry:
	rsp = fp
	// succ:  l00000000004611D0
l00000000004611D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rcx + 8<64>
	call fn0000000000457800 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004611F0
	// succ:  l00000000004611E6 l00000000004611F0
l00000000004611E6:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004611D0_exit
l00000000004611F0:
	rax = Mem0[rbx:word64]
	rbx = rbx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rbx)
	edx = Mem0[rbx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000461205_thunk_fn000000000046EB40
l0000000000461205_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn00000000004611D0_exit
fn00000000004611D0_exit:


// fn0000000000461210
// Return size: 8
define fn0000000000461210
fn0000000000461210_entry:
	rsp = fp
	// succ:  l0000000000461210
l0000000000461210:
	rcx = rcx + 0x50<64>
	SCZO = cond(rcx)
	// succ:  l0000000000461214_thunk_fn000000000042AA50
l0000000000461214_thunk_fn000000000042AA50:
	call fn000000000042AA50 (retsize: 0;)
	return
	// succ:  fn0000000000461210_exit
fn0000000000461210_exit:


// fn0000000000461220
// Return size: 8
define fn0000000000461220
fn0000000000461220_entry:
	rsp = fp
	// succ:  l0000000000461220
l0000000000461220:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0xC8<64>
	rbx = rcx
	rbp = rdx
	r12d = r8d
	r12 = CONVERT(r12d, word32, uint64)
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x1A0<64>:word64] = 0<64>
	Mem0[rbx + 0x1AA<64>:byte] = 0<8>
	Mem0[rbx + 0x1A8<64>:word16] = ax
	rax = 0x0000000000492F58<p64>
	Mem0[rbx + 0x1B0<64>:word64] = 0<64>
	Mem0[rbx + 0x1B8<64>:word64] = 0<64>
	Mem0[rbx + 0x1C0<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492F80<p64>
	Mem0[rbx + 0x1C8<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0xC8<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = 0x0000000000496C58<p64>
	rdi = rbx + 8<64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496C80<p64>
	rcx = rdi
	Mem0[rbx + 0xC8<64>:word64] = rax
	call fn0000000000458BE0 (retsize: 8;)
	rdx = rdi
	rcx = rsi
	call fn000000000046EAE0 (retsize: 8;)
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rcx = rdi
	r8d = r8d | 0x10<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn00000000004576D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000461310
	// succ:  l00000000004612F7 l0000000000461310
l00000000004612F7:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461220_exit
l0000000000461310:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461220_exit
fn0000000000461220_exit:


// fn0000000000461360
// Return size: 8
define fn0000000000461360
fn0000000000461360_entry:
	rsp = fp
	// succ:  l0000000000461360
l0000000000461360:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx + 0xC8<64>
	rbx = rcx
	rbp = rdx
	r12d = r8d
	r12 = CONVERT(r12d, word32, uint64)
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x1A0<64>:word64] = 0<64>
	Mem0[rbx + 0x1AA<64>:byte] = 0<8>
	Mem0[rbx + 0x1A8<64>:word16] = ax
	rax = 0x0000000000492F58<p64>
	Mem0[rbx + 0x1B0<64>:word64] = 0<64>
	Mem0[rbx + 0x1B8<64>:word64] = 0<64>
	Mem0[rbx + 0x1C0<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492F80<p64>
	Mem0[rbx + 0x1C8<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0xC8<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = 0x0000000000496C58<p64>
	rdi = rbx + 8<64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496C80<p64>
	rcx = rdi
	Mem0[rbx + 0xC8<64>:word64] = rax
	call fn0000000000458BE0 (retsize: 8;)
	rdx = rdi
	rcx = rsi
	call fn000000000046EAE0 (retsize: 8;)
	rdx = Mem0[rbp + 0<64>:word64]
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rdi
	r8d = r8d | 0x10<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn00000000004576D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000461450
	// succ:  l0000000000461438 l0000000000461450
l0000000000461438:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461360_exit
l0000000000461450:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461360_exit
fn0000000000461360_exit:


// fn00000000004614A0
// Return size: 8
define fn00000000004614A0
fn00000000004614A0_entry:
	rsp = fp
	// succ:  l00000000004614A0
l00000000004614A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx + 0xC8<64>
	rbx = rcx
	rcx = rsi
	call fn000000000046D320 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x1A0<64>:word64] = 0<64>
	Mem0[rbx + 0x1AA<64>:byte] = 0<8>
	Mem0[rbx + 0x1A8<64>:word16] = ax
	rax = 0x0000000000492F58<p64>
	Mem0[rbx + 0x1B0<64>:word64] = 0<64>
	Mem0[rbx + 0x1B8<64>:word64] = 0<64>
	Mem0[rbx + 0x1C0<64>:word64] = 0<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word64] = rax
	rax = 0x0000000000492F80<p64>
	Mem0[rbx + 0x1C8<64>:word64] = 0<64>
	rcx = rsi
	Mem0[rbx + 0xC8<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = 0x0000000000496C58<p64>
	rdi = rbx + 8<64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000496C80<p64>
	rcx = rdi
	Mem0[rbx + 0xC8<64>:word64] = rax
	call fn0000000000458BE0 (retsize: 8;)
	rdx = rdi
	rcx = rsi
	call fn000000000046EAE0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004614A0_exit
fn00000000004614A0_exit:


// fn00000000004615A0
// Return size: 8
define fn00000000004615A0
fn00000000004615A0_entry:
	rsp = fp
	// succ:  l00000000004615A0
l00000000004615A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 8<64>:word64]
	rbx = rcx
	rsi = rdx
	rbp = r8
	r12d = r9d
	r12 = CONVERT(r12d, word32, uint64)
	rdi = rbx + 8<64>
	Mem0[rcx:word64] = rax
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	rax = Mem0[rdx + 0x10<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rcx = rdi
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	call fn0000000000458BE0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = rbx
	rdx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call fn000000000046EAE0 (retsize: 8;)
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rcx = rdi
	r8d = r8d | 0x10<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn00000000004576D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000461633
	// succ:  l000000000046161C l0000000000461633
l000000000046161C:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004615A0_exit
l0000000000461633:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004615A0_exit
fn00000000004615A0_exit:


// fn0000000000461680
// Return size: 8
define fn0000000000461680
fn0000000000461680_entry:
	rsp = fp
	// succ:  l0000000000461680
l0000000000461680:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 8<64>:word64]
	rbx = rcx
	rsi = rdx
	rbp = r8
	r12d = r9d
	r12 = CONVERT(r12d, word32, uint64)
	rdi = rbx + 8<64>
	Mem0[rcx:word64] = rax
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	rax = Mem0[rdx + 0x10<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rcx = rdi
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	call fn0000000000458BE0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = rbx
	rdx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call fn000000000046EAE0 (retsize: 8;)
	rdx = Mem0[rbp + 0<64>:word64]
	r8d = r12d
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rdi
	r8d = r8d | 0x10<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	call fn00000000004576D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000461714
	// succ:  l00000000004616FD l0000000000461714
l00000000004616FD:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461680_exit
l0000000000461714:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461680_exit
fn0000000000461680_exit:


// fn0000000000461760
// Return size: 8
define fn0000000000461760
fn0000000000461760_entry:
	rsp = fp
	// succ:  l0000000000461760
l0000000000461760:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 8<64>:word64]
	rbx = rcx
	rsi = rdx
	rdi = rbx + 8<64>
	Mem0[rcx:word64] = rax
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	rax = Mem0[rdx + 0x10<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rcx = rdi
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x18<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	call fn0000000000458BE0 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = rbx
	rdx = rdi
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	call fn000000000046EAE0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461760_exit
fn0000000000461760_exit:


// fn00000000004617F0
// Return size: 0
define fn00000000004617F0
fn00000000004617F0_entry:
	rsp = fp
	// succ:  l00000000004617F0
l00000000004617F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496C58<p64>
	rbx = rcx
	rcx = rcx + 8<64>
	Mem0[rcx - 8<64>:word64] = rax
	rax = 0x0000000000496C80<p64>
	Mem0[rcx + 0xC0<64>:word64] = rax
	rax = 0x0000000000496790<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000457800 (retsize: 8;)
	rcx = rbx + 0x50<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rcx = rbx + 0x40<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 8<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[0x0000000000491E30<p64>:word64]
	rcx = rbx + 0xC8<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0xC8<64>:word64] = rax
	call fn000000000046D3D0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046186B_thunk_fn0000000000475550
l000000000046186B_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn00000000004617F0_exit
fn00000000004617F0_exit:


// fn0000000000461870
// Return size: 0
define fn0000000000461870
fn0000000000461870_entry:
	rsp = fp
	// succ:  l0000000000461870
l0000000000461870:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496C58<p64>
	rbx = rcx
	rcx = rcx + 8<64>
	Mem0[rcx - 8<64>:word64] = rax
	rax = 0x0000000000496C80<p64>
	Mem0[rcx + 0xC0<64>:word64] = rax
	rax = 0x0000000000496790<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000457800 (retsize: 8;)
	rcx = rbx + 0x50<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rcx = rbx + 0x40<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 8<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[0x0000000000491E30<p64>:word64]
	rcx = rbx + 0xC8<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 0xC8<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004618E3_thunk_fn000000000046D3D0
l00000000004618E3_thunk_fn000000000046D3D0:
	call fn000000000046D3D0 (retsize: 0;)
	return
	// succ:  fn0000000000461870_exit
fn0000000000461870_exit:


// fn00000000004618F0
// Return size: 8
define fn00000000004618F0
fn00000000004618F0_entry:
	rsp = fp
	// succ:  l00000000004618F0
l00000000004618F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rsi = rdx
	rbx = rcx
	rcx = rcx + 8<64>
	Mem0[rcx - 8<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rdx + 0x18<64>:word64]
	Mem0[rcx - 8<64> + rax:word64] = rdx
	rax = 0x0000000000496790<p64>
	Mem0[rcx:word64] = rax
	call fn0000000000457800 (retsize: 8;)
	rcx = rbx + 0x50<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rcx = rbx + 0x40<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx + 8<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[rsi + 8<64>:word64]
	Mem0[rbx:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = Mem0[rsi + 0x10<64>:word64]
	Mem0[rbx + rax:word64] = rdx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004618F0_exit
fn00000000004618F0_exit:


// fn0000000000461960
// Return size: 8
define fn0000000000461960
fn0000000000461960_entry:
	rsp = fp
	// succ:  l0000000000461960
l0000000000461960:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdi = 0x000000000048DEAA<p64>
	rbp = rdx
	rdx = r8
	rbx = rcx
	call fn000000000046BC00 (retsize: 8;)
	rax = 0x0000000000496CD0<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l000000000046198F
l000000000046198F:
	branch rcx == 0<64> l0000000000461991
	// succ:  l000000000046198F_1 l0000000000461991
l000000000046198F_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000046198F
	// succ:  l0000000000461991 l000000000046198F
l0000000000461991:
	branch Test(EQ,Z) l00000000004619A6
	// succ:  l0000000000461993 l00000000004619A6
l0000000000461993:
	rdi = 0x000000000048DEAC<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l00000000004619A2
l00000000004619A2:
	branch rcx == 0<64> l00000000004619A4
	// succ:  l00000000004619A2_2 l00000000004619A4
l00000000004619A2_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l00000000004619A2
	// succ:  l00000000004619A4 l00000000004619A2
l00000000004619A4:
	branch Test(NE,Z) l00000000004619B0
	// succ:  l00000000004619A6 l00000000004619B0
l00000000004619A6:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461960_exit
l00000000004619B0:
	rsi = rbx + 0x10<64>
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461960_exit
fn0000000000461960_exit:


// fn00000000004619F0
// Return size: 8
define fn00000000004619F0
fn00000000004619F0_entry:
	rsp = fp
	// succ:  l00000000004619F0
l00000000004619F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdi = 0x000000000048DEAA<p64>
	rbp = rdx
	rdx = r8
	rbx = rcx
	call fn000000000046BC00 (retsize: 8;)
	rax = 0x0000000000496CD0<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l0000000000461A1F
l0000000000461A1F:
	branch rcx == 0<64> l0000000000461A21
	// succ:  l0000000000461A1F_1 l0000000000461A21
l0000000000461A1F_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000461A1F
	// succ:  l0000000000461A21 l0000000000461A1F
l0000000000461A21:
	branch Test(EQ,Z) l0000000000461A36
	// succ:  l0000000000461A23 l0000000000461A36
l0000000000461A23:
	rdi = 0x000000000048DEAC<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l0000000000461A32
l0000000000461A32:
	branch rcx == 0<64> l0000000000461A34
	// succ:  l0000000000461A32_2 l0000000000461A34
l0000000000461A32_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000461A32
	// succ:  l0000000000461A34 l0000000000461A32
l0000000000461A34:
	branch Test(NE,Z) l0000000000461A40
	// succ:  l0000000000461A36 l0000000000461A40
l0000000000461A36:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004619F0_exit
l0000000000461A40:
	rsi = rbx + 0x10<64>
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004619F0_exit
fn00000000004619F0_exit:


// fn0000000000461A80
// Return size: 0
define fn0000000000461A80
fn0000000000461A80_entry:
	rsp = fp
	// succ:  l0000000000461A80
l0000000000461A80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496CD0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046BC70 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000461A9F_thunk_fn0000000000475550
l0000000000461A9F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000461A80_exit
fn0000000000461A80_exit:


// fn0000000000461AB0
// Return size: 0
define fn0000000000461AB0
fn0000000000461AB0_entry:
	rsp = fp
	// succ:  l0000000000461AB0
l0000000000461AB0:
	rax = 0x0000000000496CD0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000461ABA_thunk_fn000000000046BC70
l0000000000461ABA_thunk_fn000000000046BC70:
	call fn000000000046BC70 (retsize: 0;)
	return
	// succ:  fn0000000000461AB0_exit
fn0000000000461AB0_exit:


// fn0000000000461AC0
// Return size: 0
define fn0000000000461AC0
fn0000000000461AC0_entry:
	rsp = fp
	// succ:  l0000000000461AC0
l0000000000461AC0:
	rax = 0x0000000000496CD0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000461ACA_thunk_fn000000000046BC70
l0000000000461ACA_thunk_fn000000000046BC70:
	call fn000000000046BC70 (retsize: 0;)
	return
	// succ:  fn0000000000461AC0_exit
fn0000000000461AC0_exit:


// fn0000000000461AD0
// Return size: 8
define fn0000000000461AD0
fn0000000000461AD0_entry:
	rsp = fp
	// succ:  l0000000000461AD0
l0000000000461AD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdi = 0x000000000048DB5A<p64>
	rbp = rdx
	rdx = r8
	rbx = rcx
	call fn000000000046BD10 (retsize: 8;)
	rax = 0x0000000000496D50<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l0000000000461AFF
l0000000000461AFF:
	branch rcx == 0<64> l0000000000461B01
	// succ:  l0000000000461AFF_1 l0000000000461B01
l0000000000461AFF_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000461AFF
	// succ:  l0000000000461B01 l0000000000461AFF
l0000000000461B01:
	branch Test(EQ,Z) l0000000000461B16
	// succ:  l0000000000461B03 l0000000000461B16
l0000000000461B03:
	rdi = 0x000000000048DB5C<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l0000000000461B12
l0000000000461B12:
	branch rcx == 0<64> l0000000000461B14
	// succ:  l0000000000461B12_2 l0000000000461B14
l0000000000461B12_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000461B12
	// succ:  l0000000000461B14 l0000000000461B12
l0000000000461B14:
	branch Test(NE,Z) l0000000000461B20
	// succ:  l0000000000461B16 l0000000000461B20
l0000000000461B16:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461AD0_exit
l0000000000461B20:
	rsi = rbx + 0x10<64>
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461AD0_exit
fn0000000000461AD0_exit:


// fn0000000000461B60
// Return size: 8
define fn0000000000461B60
fn0000000000461B60_entry:
	rsp = fp
	// succ:  l0000000000461B60
l0000000000461B60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdi = 0x000000000048DB5A<p64>
	rbp = rdx
	rdx = r8
	rbx = rcx
	call fn000000000046BD10 (retsize: 8;)
	rax = 0x0000000000496D50<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l0000000000461B8F
l0000000000461B8F:
	branch rcx == 0<64> l0000000000461B91
	// succ:  l0000000000461B8F_1 l0000000000461B91
l0000000000461B8F_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000461B8F
	// succ:  l0000000000461B91 l0000000000461B8F
l0000000000461B91:
	branch Test(EQ,Z) l0000000000461BA6
	// succ:  l0000000000461B93 l0000000000461BA6
l0000000000461B93:
	rdi = 0x000000000048DB5C<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l0000000000461BA2
l0000000000461BA2:
	branch rcx == 0<64> l0000000000461BA4
	// succ:  l0000000000461BA2_2 l0000000000461BA4
l0000000000461BA2_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000461BA2
	// succ:  l0000000000461BA4 l0000000000461BA2
l0000000000461BA4:
	branch Test(NE,Z) l0000000000461BB0
	// succ:  l0000000000461BA6 l0000000000461BB0
l0000000000461BA6:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461B60_exit
l0000000000461BB0:
	rsi = rbx + 0x10<64>
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461B60_exit
fn0000000000461B60_exit:


// fn0000000000461BF0
// Return size: 0
define fn0000000000461BF0
fn0000000000461BF0_entry:
	rsp = fp
	// succ:  l0000000000461BF0
l0000000000461BF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496D50<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046BD80 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000461C0F_thunk_fn0000000000475550
l0000000000461C0F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000461BF0_exit
fn0000000000461BF0_exit:


// fn0000000000461C20
// Return size: 0
define fn0000000000461C20
fn0000000000461C20_entry:
	rsp = fp
	// succ:  l0000000000461C20
l0000000000461C20:
	rax = 0x0000000000496D50<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000461C2A_thunk_fn000000000046BD80
l0000000000461C2A_thunk_fn000000000046BD80:
	call fn000000000046BD80 (retsize: 0;)
	return
	// succ:  fn0000000000461C20_exit
fn0000000000461C20_exit:


// fn0000000000461C30
// Return size: 0
define fn0000000000461C30
fn0000000000461C30_entry:
	rsp = fp
	// succ:  l0000000000461C30
l0000000000461C30:
	rax = 0x0000000000496D50<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000461C3A_thunk_fn000000000046BD80
l0000000000461C3A_thunk_fn000000000046BD80:
	call fn000000000046BD80 (retsize: 0;)
	return
	// succ:  fn0000000000461C30_exit
fn0000000000461C30_exit:


// fn0000000000461C40
// Return size: 8
define fn0000000000461C40
fn0000000000461C40_entry:
	rsp = fp
	// succ:  l0000000000461C40
l0000000000461C40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	rbp = rdx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497B50<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = 0x0000000000496DD0<p64>
	rdi = 0x000000000048DEAA<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l0000000000461C85
l0000000000461C85:
	branch rcx == 0<64> l0000000000461C87
	// succ:  l0000000000461C85_1 l0000000000461C87
l0000000000461C85_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000461C85
	// succ:  l0000000000461C87 l0000000000461C85
l0000000000461C87:
	branch Test(EQ,Z) l0000000000461C9C
	// succ:  l0000000000461C89 l0000000000461C9C
l0000000000461C89:
	rdi = 0x000000000048DEAC<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l0000000000461C98
l0000000000461C98:
	branch rcx == 0<64> l0000000000461C9A
	// succ:  l0000000000461C98_2 l0000000000461C9A
l0000000000461C98_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000461C98
	// succ:  l0000000000461C9A l0000000000461C98
l0000000000461C9A:
	branch Test(NE,Z) l0000000000461CA5
	// succ:  l0000000000461C9C l0000000000461CA5
l0000000000461C9C:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461C40_exit
l0000000000461CA5:
	rsi = rbx + 0x10<64>
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461C40_exit
fn0000000000461C40_exit:


// fn0000000000461CF0
// Return size: 8
define fn0000000000461CF0
fn0000000000461CF0_entry:
	rsp = fp
	// succ:  l0000000000461CF0
l0000000000461CF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	rbp = rdx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497B50<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = 0x0000000000496DD0<p64>
	rdi = 0x000000000048DEAA<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l0000000000461D35
l0000000000461D35:
	branch rcx == 0<64> l0000000000461D37
	// succ:  l0000000000461D35_1 l0000000000461D37
l0000000000461D35_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000461D35
	// succ:  l0000000000461D37 l0000000000461D35
l0000000000461D37:
	branch Test(EQ,Z) l0000000000461D4C
	// succ:  l0000000000461D39 l0000000000461D4C
l0000000000461D39:
	rdi = 0x000000000048DEAC<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l0000000000461D48
l0000000000461D48:
	branch rcx == 0<64> l0000000000461D4A
	// succ:  l0000000000461D48_2 l0000000000461D4A
l0000000000461D48_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000461D48
	// succ:  l0000000000461D4A l0000000000461D48
l0000000000461D4A:
	branch Test(NE,Z) l0000000000461D55
	// succ:  l0000000000461D4C l0000000000461D55
l0000000000461D4C:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461CF0_exit
l0000000000461D55:
	rsi = rbx + 0x10<64>
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461CF0_exit
fn0000000000461CF0_exit:


// fn0000000000461DA0
// Return size: 0
define fn0000000000461DA0
fn0000000000461DA0_entry:
	rsp = fp
	// succ:  l0000000000461DA0
l0000000000461DA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497B50<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000461DCE_thunk_fn0000000000475550
l0000000000461DCE_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000461DA0_exit
fn0000000000461DA0_exit:


// fn0000000000461DF0
// Return size: 0
define fn0000000000461DF0
fn0000000000461DF0_entry:
	rsp = fp
	// succ:  l0000000000461DF0
l0000000000461DF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497B50<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000461E16_thunk_fn000000000046AD20
l0000000000461E16_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000461DF0_exit
fn0000000000461DF0_exit:


// fn0000000000461E30
// Return size: 0
define fn0000000000461E30
fn0000000000461E30_entry:
	rsp = fp
	// succ:  l0000000000461E30
l0000000000461E30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497B50<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000461E56_thunk_fn000000000046AD20
l0000000000461E56_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000461E30_exit
fn0000000000461E30_exit:


// fn0000000000461E70
// Return size: 8
define fn0000000000461E70
fn0000000000461E70_entry:
	rsp = fp
	// succ:  l0000000000461E70
l0000000000461E70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	rbp = rdx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497B90<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = 0x0000000000496E10<p64>
	rdi = 0x000000000048DB5A<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l0000000000461EB5
l0000000000461EB5:
	branch rcx == 0<64> l0000000000461EB7
	// succ:  l0000000000461EB5_1 l0000000000461EB7
l0000000000461EB5_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000461EB5
	// succ:  l0000000000461EB7 l0000000000461EB5
l0000000000461EB7:
	branch Test(EQ,Z) l0000000000461ECC
	// succ:  l0000000000461EB9 l0000000000461ECC
l0000000000461EB9:
	rdi = 0x000000000048DB5C<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l0000000000461EC8
l0000000000461EC8:
	branch rcx == 0<64> l0000000000461ECA
	// succ:  l0000000000461EC8_2 l0000000000461ECA
l0000000000461EC8_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000461EC8
	// succ:  l0000000000461ECA l0000000000461EC8
l0000000000461ECA:
	branch Test(NE,Z) l0000000000461ED5
	// succ:  l0000000000461ECC l0000000000461ED5
l0000000000461ECC:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461E70_exit
l0000000000461ED5:
	rsi = rbx + 0x10<64>
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461E70_exit
fn0000000000461E70_exit:


// fn0000000000461F20
// Return size: 8
define fn0000000000461F20
fn0000000000461F20_entry:
	rsp = fp
	// succ:  l0000000000461F20
l0000000000461F20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	rbp = rdx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497B90<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rax = 0x0000000000496E10<p64>
	rdi = 0x000000000048DB5A<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l0000000000461F65
l0000000000461F65:
	branch rcx == 0<64> l0000000000461F67
	// succ:  l0000000000461F65_1 l0000000000461F67
l0000000000461F65_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000461F65
	// succ:  l0000000000461F67 l0000000000461F65
l0000000000461F67:
	branch Test(EQ,Z) l0000000000461F7C
	// succ:  l0000000000461F69 l0000000000461F7C
l0000000000461F69:
	rdi = 0x000000000048DB5C<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l0000000000461F78
l0000000000461F78:
	branch rcx == 0<64> l0000000000461F7A
	// succ:  l0000000000461F78_2 l0000000000461F7A
l0000000000461F78_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000461F78
	// succ:  l0000000000461F7A l0000000000461F78
l0000000000461F7A:
	branch Test(NE,Z) l0000000000461F85
	// succ:  l0000000000461F7C l0000000000461F85
l0000000000461F7C:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461F20_exit
l0000000000461F85:
	rsi = rbx + 0x10<64>
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000461F20_exit
fn0000000000461F20_exit:


// fn0000000000461FD0
// Return size: 0
define fn0000000000461FD0
fn0000000000461FD0_entry:
	rsp = fp
	// succ:  l0000000000461FD0
l0000000000461FD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497B90<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000461FFE_thunk_fn0000000000475550
l0000000000461FFE_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000461FD0_exit
fn0000000000461FD0_exit:


// fn0000000000462020
// Return size: 0
define fn0000000000462020
fn0000000000462020_entry:
	rsp = fp
	// succ:  l0000000000462020
l0000000000462020:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497B90<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000462046_thunk_fn000000000046AD20
l0000000000462046_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000462020_exit
fn0000000000462020_exit:


// fn0000000000462060
// Return size: 0
define fn0000000000462060
fn0000000000462060_entry:
	rsp = fp
	// succ:  l0000000000462060
l0000000000462060:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497B90<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000462086_thunk_fn000000000046AD20
l0000000000462086_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000462060_exit
fn0000000000462060_exit:


// fn00000000004620A0
// Return size: 0
define fn00000000004620A0
fn00000000004620A0_entry:
	rsp = fp
	// succ:  l00000000004620A0
l00000000004620A0:
	// succ:  l00000000004620A0_thunk_fn0000000000475550
l00000000004620A0_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn00000000004620A0_exit
fn00000000004620A0_exit:


// fn00000000004620B0
// Return size: 0
define fn00000000004620B0
fn00000000004620B0_entry:
	rsp = fp
	// succ:  l00000000004620B0
l00000000004620B0:
	return
	// succ:  fn00000000004620B0_exit
fn00000000004620B0_exit:


// fn00000000004620C0
// Return size: 8
define fn00000000004620C0
fn00000000004620C0_entry:
	rsp = fp
	// succ:  l00000000004620C0
l00000000004620C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn000000000045F390 (retsize: 8;)
	rax = 0x0000000000496ED0<p64>
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004620C0_exit
fn00000000004620C0_exit:


// fn00000000004620E0
// Return size: 0
define fn00000000004620E0
fn00000000004620E0_entry:
	rsp = fp
	// succ:  l00000000004620E0
l00000000004620E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496ED0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000045F3F0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004620FF_thunk_fn0000000000475550
l00000000004620FF_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn00000000004620E0_exit
fn00000000004620E0_exit:


// fn0000000000462110
// Return size: 0
define fn0000000000462110
fn0000000000462110_entry:
	rsp = fp
	// succ:  l0000000000462110
l0000000000462110:
	rax = 0x0000000000496ED0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046211A_thunk_fn000000000045F3F0
l000000000046211A_thunk_fn000000000045F3F0:
	call fn000000000045F3F0 (retsize: 0;)
	return
	// succ:  fn0000000000462110_exit
fn0000000000462110_exit:


// fn0000000000462120
// Return size: 8
define fn0000000000462120
fn0000000000462120_entry:
	rsp = fp
	// succ:  l0000000000462120
l0000000000462120:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000046215A
	// succ:  l000000000046212D l000000000046215A
l000000000046212D:
	__lock()
	v10 = Mem0[rax - 0xA0<64>:word32] - 1<32>
	Mem0[rax - 0xA0<64>:word32] = v10
	SCZO = cond(v10)
	branch Test(NE,Z) l000000000046215A
	// succ:  l0000000000462137 l000000000046215A
l0000000000462137:
	rax = Mem0[rax - 0x88<64>:word64]
	rbx = rcx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000046214B
	// succ:  l0000000000462146 l000000000046214B
l0000000000462146:
	rcx = Mem0[rcx:word64]
	call rax (retsize: 8;)
	// succ:  l000000000046214B
l000000000046214B:
	rcx = Mem0[rbx:word64]
	call fn0000000000475BA0 (retsize: 8;)
	Mem0[rbx:word64] = 0<64>
	// succ:  l000000000046215A
l000000000046215A:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000462120_exit
fn0000000000462120_exit:


// fn0000000000462160
// Return size: 8
define fn0000000000462160
fn0000000000462160_entry:
	rsp = fp
	// succ:  l0000000000462160
l0000000000462160:
	return
	// succ:  fn0000000000462160_exit
fn0000000000462160_exit:


// fn0000000000462170
// Return size: 8
define fn0000000000462170
fn0000000000462170_entry:
	rsp = fp
	// succ:  l0000000000462170
l0000000000462170:
	rax = Mem0[rcx:word64]
	r8 = Mem0[rdx:word64]
	Mem0[rcx:word64] = r8
	Mem0[rdx:word64] = rax
	return
	// succ:  fn0000000000462170_exit
fn0000000000462170_exit:


// fn0000000000462180
// Return size: 8
define fn0000000000462180
fn0000000000462180_entry:
	rsp = fp
	// succ:  l0000000000462180
l0000000000462180:
	rax = Mem0[rcx:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000462190
	// succ:  l0000000000462188 l0000000000462190
l0000000000462188:
	__lock()
	v8 = Mem0[rax - 0xA0<64>:word32] + 1<32>
	Mem0[rax - 0xA0<64>:word32] = v8
	SCZO = cond(v8)
	// succ:  l0000000000462190
l0000000000462190:
	return
	// succ:  fn0000000000462180_exit
fn0000000000462180_exit:


// fn00000000004621A0
// Return size: 8
define fn00000000004621A0
fn00000000004621A0_entry:
	rsp = fp
	// succ:  l00000000004621A0
l00000000004621A0:
	Mem0[rcx:word64] = 0<64>
	return
	// succ:  fn00000000004621A0_exit
fn00000000004621A0_exit:


// fn00000000004621B0
// Return size: 8
define fn00000000004621B0
fn00000000004621B0_entry:
	rsp = fp
	// succ:  l00000000004621B0
l00000000004621B0:
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx:word64] = rdx
	branch Test(EQ,Z) l00000000004621C0
	// succ:  l00000000004621B8 l00000000004621C0
l00000000004621B8:
	__lock()
	v8 = Mem0[rdx - 0xA0<64>:word32] + 1<32>
	Mem0[rdx - 0xA0<64>:word32] = v8
	SCZO = cond(v8)
	// succ:  l00000000004621C0
l00000000004621C0:
	return
	// succ:  fn00000000004621B0_exit
fn00000000004621B0_exit:


// fn00000000004621D0
// Return size: 8
define fn00000000004621D0
fn00000000004621D0_entry:
	rsp = fp
	// succ:  l00000000004621D0
l00000000004621D0:
	rax = Mem0[rdx:word64]
	SZO = cond(rax & rax)
	C = false
	Mem0[rcx:word64] = rax
	branch Test(EQ,Z) l00000000004621E3
	// succ:  l00000000004621DB l00000000004621E3
l00000000004621DB:
	__lock()
	v9 = Mem0[rax - 0xA0<64>:word32] + 1<32>
	Mem0[rax - 0xA0<64>:word32] = v9
	SCZO = cond(v9)
	// succ:  l00000000004621E3
l00000000004621E3:
	return
	// succ:  fn00000000004621D0_exit
fn00000000004621D0_exit:


// fn00000000004621F0
// Return size: 8
define fn00000000004621F0
fn00000000004621F0_entry:
	rsp = fp
	// succ:  l00000000004621F0
l00000000004621F0:
	Mem0[rcx:word64] = 0<64>
	return
	// succ:  fn00000000004621F0_exit
fn00000000004621F0_exit:


// fn0000000000462200
// Return size: 8
define fn0000000000462200
fn0000000000462200_entry:
	rsp = fp
	// succ:  l0000000000462200
l0000000000462200:
	// succ:  l0000000000462200_thunk_fn0000000000462120
l0000000000462200_thunk_fn0000000000462120:
	call fn0000000000462120 (retsize: 0;)
	return
	// succ:  fn0000000000462200_exit
fn0000000000462200_exit:


// fn0000000000462210
// Return size: 8
define fn0000000000462210
fn0000000000462210_entry:
	rsp = fp
	// succ:  l0000000000462210
l0000000000462210:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rdx = Mem0[rdx:word64]
	rbx = rcx
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rsp + 0x20<64>:word64] = rdx
	branch Test(EQ,Z) l0000000000462232
	// succ:  l0000000000462225 l0000000000462232
l0000000000462225:
	__lock()
	v10 = Mem0[rdx - 0xA0<64>:word32] + 1<32>
	Mem0[rdx - 0xA0<64>:word32] = v10
	SCZO = cond(v10)
	rdx = Mem0[rsp + 0x20<64>:word64]
	// succ:  l0000000000462232
l0000000000462232:
	rax = Mem0[rbx:word64]
	rcx = rsp + 0x20<64>
	Mem0[rbx:word64] = rdx
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000462120 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000462210_exit
fn0000000000462210_exit:


// fn0000000000462250
// Return size: 8
define fn0000000000462250
fn0000000000462250_entry:
	rsp = fp
	// succ:  l0000000000462250
l0000000000462250:
	rax = Mem0[rdx:word64]
	SCZO = cond(Mem0[rcx:word64] - rax)
	al = CONVERT(Test(EQ,Z), bool, int8)
	return
	// succ:  fn0000000000462250_exit
fn0000000000462250_exit:


// fn0000000000462260
// Return size: 8
define fn0000000000462260
fn0000000000462260_entry:
	rsp = fp
	// succ:  l0000000000462260
l0000000000462260:
	rax = Mem0[rdx:word64]
	SCZO = cond(Mem0[rcx:word64] - rax)
	al = CONVERT(Test(NE,Z), bool, int8)
	return
	// succ:  fn0000000000462260_exit
fn0000000000462260_exit:


// fn0000000000462270
// Return size: 8
define fn0000000000462270
fn0000000000462270_entry:
	rsp = fp
	// succ:  l0000000000462270
l0000000000462270:
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rax = rcx
	rcx = Mem0[rdx:word64]
	r10 = Mem0[rcx + 0x20<64>:word64]
	rcx = 0x00000000004627F0<p64>
	SCZO = cond(r10 - rcx)
	branch Test(NE,Z) l00000000004622A0
	// succ:  l000000000046228A l00000000004622A0
l000000000046228A:
	Mem0[rax:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rax + 8<64>:word32] = 0<32>
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000462270_exit
l00000000004622A0:
	ecx = Mem0[rsp + 0x70<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x38<64>:word64] = rax
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rax
	call r10 (retsize: 8;)
	rax = Mem0[rsp + 0x38<64>:word64]
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000462270_exit
fn0000000000462270_exit:


// fn00000000004622C0
// Return size: 8
define fn00000000004622C0
fn00000000004622C0_entry:
	rsp = fp
	// succ:  l00000000004622C0
l00000000004622C0:
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rax = rcx
	rcx = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r10 = Mem0[rcx + 0x28<64>:word64]
	rcx = 0x0000000000462810<p64>
	SCZO = cond(r10 - rcx)
	branch Test(NE,Z) l00000000004622F2
	// succ:  l00000000004622DF l00000000004622F2
l00000000004622DF:
	Mem0[rax:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rax + 8<64>:word32] = 0<32>
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004622C0_exit
l00000000004622F2:
	rcx = rax
	Mem0[rsp + 0x28<64>:word64] = rax
	r8 = rsp + 0x30<64>
	Mem0[rsp + 0x30<64>:word128] = xmm1
	call r10 (retsize: 8;)
	rax = Mem0[rsp + 0x28<64>:word64]
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004622C0_exit
fn00000000004622C0_exit:


// fn0000000000462320
// Return size: 8
define fn0000000000462320
fn0000000000462320_entry:
	rsp = fp
	// succ:  l0000000000462320
l0000000000462320:
	v5 = Mem0[rcx + 0x10<64>:word64] + rdx
	Mem0[rcx + 0x10<64>:word64] = v5
	SCZO = cond(v5)
	return
	// succ:  fn0000000000462320_exit
fn0000000000462320_exit:


// fn0000000000462330
// Return size: 8
define fn0000000000462330
fn0000000000462330_entry:
	rsp = fp
	// succ:  l0000000000462330
l0000000000462330:
	v5 = Mem0[rcx + 0x28<64>:word64] + rdx
	Mem0[rcx + 0x28<64>:word64] = v5
	SCZO = cond(v5)
	return
	// succ:  fn0000000000462330_exit
fn0000000000462330_exit:


// fn0000000000462340
// Return size: 8
define fn0000000000462340
fn0000000000462340_entry:
	rsp = fp
	// succ:  l0000000000462340
l0000000000462340:
	Mem0[rcx + 8<64>:word64] = rdx
	Mem0[rcx + 0x10<64>:word64] = r8
	Mem0[rcx + 0x18<64>:word64] = r9
	return
	// succ:  fn0000000000462340_exit
fn0000000000462340_exit:


// fn0000000000462350
// Return size: 8
define fn0000000000462350
fn0000000000462350_entry:
	rsp = fp
	// succ:  l0000000000462350
l0000000000462350:
	Mem0[rcx + 0x28<64>:word64] = rdx
	Mem0[rcx + 0x20<64>:word64] = rdx
	Mem0[rcx + 0x30<64>:word64] = r8
	return
	// succ:  fn0000000000462350_exit
fn0000000000462350_exit:


// fn0000000000462360
// Return size: 8
define fn0000000000462360
fn0000000000462360_entry:
	rsp = fp
	// succ:  l0000000000462360
l0000000000462360:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000462360_exit
fn0000000000462360_exit:


// fn0000000000462370
// Return size: 8
define fn0000000000462370
fn0000000000462370_entry:
	rsp = fp
	// succ:  l0000000000462370
l0000000000462370:
	rdx = CONVERT(edx, word32, int64)
	v6 = Mem0[rcx + 0x10<64>:word64] + rdx
	Mem0[rcx + 0x10<64>:word64] = v6
	SCZO = cond(v6)
	return
	// succ:  fn0000000000462370_exit
fn0000000000462370_exit:


// fn0000000000462380
// Return size: 8
define fn0000000000462380
fn0000000000462380_entry:
	rsp = fp
	// succ:  l0000000000462380
l0000000000462380:
	return
	// succ:  fn0000000000462380_exit
fn0000000000462380_exit:


// fn0000000000462390
// Return size: 8
define fn0000000000462390
fn0000000000462390_entry:
	rsp = fp
	// succ:  l0000000000462390
l0000000000462390:
	rdx = CONVERT(edx, word32, int64)
	v6 = Mem0[rcx + 0x28<64>:word64] + rdx
	Mem0[rcx + 0x28<64>:word64] = v6
	SCZO = cond(v6)
	return
	// succ:  fn0000000000462390_exit
fn0000000000462390_exit:


// fn00000000004623A0
// Return size: 8
define fn00000000004623A0
fn00000000004623A0_entry:
	rsp = fp
	// succ:  l00000000004623A0
l00000000004623A0:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004623B0
	// succ:  l00000000004623AA l00000000004623B0
l00000000004623AA:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004623A0_exit
l00000000004623B0:
	rax = Mem0[rcx:word64]
	r8 = 0x00000000004629D0<p64>
	rdx = Mem0[rax + 0x48<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(rdx - r8)
	branch Test(NE,Z) l00000000004623D0
	// succ:  l00000000004623C8 l00000000004623D0
l00000000004623C8:
	return
	// succ:  fn00000000004623A0_exit
l00000000004623D0:
	call rdx (retsize: 0;)
	return
	// succ:  fn00000000004623A0_exit
fn00000000004623A0_exit:


// fn00000000004623E0
// Return size: 0
define fn00000000004623E0
fn00000000004623E0_entry:
	rsp = fp
	// succ:  l00000000004623E0
l00000000004623E0:
	rax = Mem0[rcx:word64]
	rax = Mem0[rax + 0x40<64>:word64]
	call rax (retsize: 0;)
	return
	// succ:  fn00000000004623E0_exit
fn00000000004623E0_exit:


// fn00000000004623F0
// Return size: 8
define fn00000000004623F0
fn00000000004623F0_entry:
	rsp = fp
	// succ:  l00000000004623F0
l00000000004623F0:
	rax = Mem0[rcx + 0x28<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x30<64>:word64])
	branch Test(UGE,C) l0000000000462405
	// succ:  l00000000004623FA l0000000000462405
l00000000004623FA:
	Mem0[rax:byte] = dl
	eax = CONVERT(dl, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	v9 = Mem0[rcx + 0x28<64>:word64] + 1<64>
	Mem0[rcx + 0x28<64>:word64] = v9
	SCZO = cond(v9)
	return
	// succ:  fn00000000004623F0_exit
l0000000000462405:
	rax = Mem0[rcx:word64]
	r9 = 0x00000000004628B0<p64>
	r8 = Mem0[rax + 0x68<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8 - r9)
	branch Test(NE,Z) l0000000000462420
	// succ:  l000000000046241D l0000000000462420
l000000000046241D:
	return
	// succ:  fn00000000004623F0_exit
l0000000000462420:
	edx = CONVERT(dl, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	call r8 (retsize: 0;)
	return
	// succ:  fn00000000004623F0_exit
fn00000000004623F0_exit:


// fn0000000000462430
// Return size: 0
define fn0000000000462430
fn0000000000462430_entry:
	rsp = fp
	// succ:  l0000000000462430
l0000000000462430:
	rax = Mem0[rcx:word64]
	rax = Mem0[rax + 0x60<64>:word64]
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000462430_exit
fn0000000000462430_exit:


// fn0000000000462440
// Return size: 8
define fn0000000000462440
fn0000000000462440_entry:
	rsp = fp
	// succ:  l0000000000462440
l0000000000462440:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdx = 0x00000000004629D0<p64>
	rax = Mem0[rax + 0x48<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000462463
	// succ:  l0000000000462458 l0000000000462463
l0000000000462458:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000462440_exit
l0000000000462463:
	rbx = rcx
	call rax (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000462458
	// succ:  l000000000046246D l0000000000462458
l000000000046246D:
	rdx = Mem0[rbx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x10<64>:word64] = rdx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000462440_exit
fn0000000000462440_exit:


// fn0000000000462490
// Return size: 8
define fn0000000000462490
fn0000000000462490_entry:
	rsp = fp
	// succ:  l0000000000462490
l0000000000462490:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004624B0
	// succ:  l000000000046249F l00000000004624B0
l000000000046249F:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rcx + 0x10<64>:word64] = rdx
	// succ:  l00000000004624AA
l00000000004624AA:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000462490_exit
l00000000004624B0:
	rax = Mem0[rcx:word64]
	r8 = 0x0000000000462440<p64>
	rdx = Mem0[rax + 0x50<64>:word64]
	SCZO = cond(rdx - r8)
	branch Test(NE,Z) l00000000004624E0
	// succ:  l00000000004624C3 l00000000004624E0
l00000000004624C3:
	rax = Mem0[rax + 0x48<64>:word64]
	rdx = 0x00000000004629D0<p64>
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000004624F0
	// succ:  l00000000004624D3 l00000000004624F0
l00000000004624D3:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000004624AA
	// succ:  l00000000004624AA
l00000000004624E0:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call rdx (retsize: 0;)
	return
	// succ:  fn0000000000462490_exit
l00000000004624F0:
	rbx = rcx
	call rax (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l00000000004624D3
	// succ:  l00000000004624FA l00000000004624D3
l00000000004624FA:
	rdx = Mem0[rbx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x10<64>:word64] = rdx
	goto l00000000004624AA
	// succ:  l00000000004624AA
fn0000000000462490_exit:


// fn0000000000462510
// Return size: 8
define fn0000000000462510
fn0000000000462510_entry:
	rsp = fp
	// succ:  l0000000000462510
l0000000000462510:
	rax = rcx
	return
	// succ:  fn0000000000462510_exit
fn0000000000462510_exit:


// fn0000000000462520
// Return size: 8
define fn0000000000462520
fn0000000000462520_entry:
	rsp = fp
	// succ:  l0000000000462520
l0000000000462520:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x10<64>:word64]
	rdx = Mem0[rcx + 0x18<64>:word64]
	rbx = rcx
	SCZO = cond(rax - rdx)
	branch Test(UGE,C) l0000000000462550
	// succ:  l0000000000462535 l0000000000462550
l0000000000462535:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l000000000046253D
l000000000046253D:
	SCZO = cond(rdx - rax)
	branch Test(ULE,CZ) l0000000000462580
	// succ:  l0000000000462542 l0000000000462580
l0000000000462542:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000462520_exit
l0000000000462550:
	rax = Mem0[rcx:word64]
	rcx = 0x0000000000462440<p64>
	rdx = Mem0[rax + 0x50<64>:word64]
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l00000000004625A0
	// succ:  l0000000000462563 l00000000004625A0
l0000000000462563:
	rax = Mem0[rax + 0x48<64>:word64]
	rdx = 0x00000000004629D0<p64>
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000004625B4
	// succ:  l0000000000462573 l00000000004625B4
l0000000000462573:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000462520_exit
l0000000000462580:
	rax = Mem0[rbx:word64]
	rdx = 0x00000000004629D0<p64>
	rax = Mem0[rax + 0x48<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(EQ,Z) l0000000000462573
	// succ:  l0000000000462593 l0000000000462573
l0000000000462593:
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000462520_exit
l00000000004625A0:
	rcx = rbx
	call rdx (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000462573
	// succ:  l00000000004625AA l0000000000462573
l00000000004625AA:
	rax = Mem0[rbx + 0x10<64>:word64]
	rdx = Mem0[rbx + 0x18<64>:word64]
	goto l000000000046253D
	// succ:  l000000000046253D
l00000000004625B4:
	rcx = rbx
	call rax (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000462573
	// succ:  l00000000004625BE l0000000000462573
l00000000004625BE:
	rax = Mem0[rbx + 0x10<64>:word64]
	rdx = Mem0[rbx + 0x18<64>:word64]
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x10<64>:word64] = rax
	goto l000000000046253D
	// succ:  l000000000046253D
fn0000000000462520_exit:


// fn00000000004625E0
// Return size: 8
define fn00000000004625E0
fn00000000004625E0_entry:
	rsp = fp
	// succ:  l00000000004625E0
l00000000004625E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000462600
	// succ:  l00000000004625EF l0000000000462600
l00000000004625EF:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l00000000004625F7
l00000000004625F7:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004625E0_exit
l0000000000462600:
	rax = Mem0[rcx:word64]
	r8 = 0x0000000000462440<p64>
	rdx = Mem0[rax + 0x50<64>:word64]
	SCZO = cond(rdx - r8)
	branch Test(NE,Z) l0000000000462640
	// succ:  l0000000000462613 l0000000000462640
l0000000000462613:
	rax = Mem0[rax + 0x48<64>:word64]
	rdx = 0x00000000004629D0<p64>
	SCZO = cond(rax - rdx)
	branch Test(EQ,Z) l00000000004625F7
	// succ:  l0000000000462623 l00000000004625F7
l0000000000462623:
	rbx = rcx
	call rax (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l00000000004625F7
	// succ:  l000000000046262D l00000000004625F7
l000000000046262D:
	v12 = Mem0[rbx + 0x10<64>:word64] + 1<64>
	Mem0[rbx + 0x10<64>:word64] = v12
	SCZO = cond(v12)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004625E0_exit
l0000000000462640:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call rdx (retsize: 0;)
	return
	// succ:  fn00000000004625E0_exit
fn00000000004625E0_exit:


// fn0000000000462650
// Return size: 8
define fn0000000000462650
fn0000000000462650_entry:
	rsp = fp
	// succ:  l0000000000462650
l0000000000462650:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	r14 = rdx
	r13 = r8
	branch Test(LE,SZO) l000000000046269E
	// succ:  l000000000046266E l000000000046269E
l000000000046266E:
	rbp = 0x0000000000462440<p64>
	r12 = 0x00000000004629D0<p64>
	// succ:  l000000000046267C
l000000000046267C:
	rdx = Mem0[rbx + 0x10<64>:word64]
	r9 = Mem0[rbx + 0x18<64>:word64]
	r9 = r9 - rdx
	SCZO = cond(r9)
	branch Test(NE,Z) l00000000004626B0
	// succ:  l0000000000462689 l00000000004626B0
l0000000000462689:
	rax = Mem0[rbx:word64]
	rdx = Mem0[rax + 0x50<64>:word64]
	SCZO = cond(rdx - rbp)
	branch Test(NE,Z) l00000000004626E0
	// succ:  l0000000000462695 l00000000004626E0
l0000000000462695:
	rax = Mem0[rax + 0x48<64>:word64]
	SCZO = cond(rax - r12)
	branch Test(NE,Z) l0000000000462702
	// succ:  l000000000046269E l0000000000462702
l000000000046269E:
	rax = rsi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000462650_exit
l00000000004626B0:
	rdi = r13
	rcx = r14
	rdi = rdi - rsi
	SCZO = cond(rdi)
	SCZO = cond(rdi - r9)
	branch Test(LE,SZO) l00000000004626C0
	// succ:  l00000000004626BC_1 l00000000004626C0
l00000000004626BC_1:
	rdi = r9
	// succ:  l00000000004626C0
l00000000004626C0:
	r8 = rdi
	rsi = rsi + rdi
	SCZO = cond(rsi)
	rax = memcpy(rcx, rdx, r8)
	v22 = Mem0[rbx + 0x10<64>:word64] + rdi
	Mem0[rbx + 0x10<64>:word64] = v22
	SCZO = cond(v22)
	SCZO = cond(r13 - rsi)
	branch Test(LE,SZO) l000000000046269E
	// succ:  l00000000004626D4 l000000000046269E
l00000000004626D4:
	r14 = r14 + rdi
	SCZO = cond(r14)
	goto l0000000000462689
	// succ:  l0000000000462689
l00000000004626E0:
	rcx = rbx
	call rdx (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000046269E
	// succ:  l00000000004626EA l000000000046269E
l00000000004626EA:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	rdx = r14 + 1<64>
	Mem0[r14:byte] = al
	SCZO = cond(r13 - rsi)
	branch Test(LE,SZO) l000000000046269E
	// succ:  l00000000004626FA l000000000046269E
l00000000004626FA:
	r14 = rdx
	goto l000000000046267C
	// succ:  l000000000046267C
l0000000000462702:
	rcx = rbx
	call rax (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000046269E
	// succ:  l000000000046270C l000000000046269E
l000000000046270C:
	rdx = Mem0[rbx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x10<64>:word64] = rdx
	goto l00000000004626EA
	// succ:  l00000000004626EA
fn0000000000462650_exit:


// fn0000000000462720
// Return size: 8
define fn0000000000462720
fn0000000000462720_entry:
	rsp = fp
	// succ:  l0000000000462720
l0000000000462720:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rdi = rcx
	rbp = rdx
	r13 = r8
	branch Test(LE,SZO) l0000000000462760
	// succ:  l000000000046273C l0000000000462760
l000000000046273C:
	r12 = 0x00000000004628B0<p64>
	// succ:  l0000000000462743
l0000000000462743:
	rcx = Mem0[rdi + 0x28<64>:word64]
	r9 = Mem0[rdi + 0x30<64>:word64]
	r9 = r9 - rcx
	SCZO = cond(r9)
	branch Test(NE,Z) l0000000000462770
	// succ:  l0000000000462750 l0000000000462770
l0000000000462750:
	rax = Mem0[rdi:word64]
	edx = CONVERT(Mem0[rbp + 0<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rax + 0x68<64>:word64]
	SCZO = cond(rax - r12)
	branch Test(NE,Z) l00000000004627A0
	// succ:  l0000000000462760 l00000000004627A0
l0000000000462760:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000462720_exit
l0000000000462770:
	rsi = r13
	rdx = rbp
	rsi = rsi - rbx
	SCZO = cond(rsi)
	SCZO = cond(rsi - r9)
	branch Test(LE,SZO) l0000000000462780
	// succ:  l000000000046277C_1 l0000000000462780
l000000000046277C_1:
	rsi = r9
	// succ:  l0000000000462780
l0000000000462780:
	r8 = rsi
	rbx = rbx + rsi
	SCZO = cond(rbx)
	rax = memcpy(rcx, rdx, r8)
	v21 = Mem0[rdi + 0x28<64>:word64] + rsi
	Mem0[rdi + 0x28<64>:word64] = v21
	SCZO = cond(v21)
	SCZO = cond(r13 - rbx)
	branch Test(LE,SZO) l0000000000462760
	// succ:  l0000000000462794 l0000000000462760
l0000000000462794:
	rbp = rbp + rsi
	SCZO = cond(rbp)
	goto l0000000000462750
	// succ:  l0000000000462750
l00000000004627A0:
	rcx = rdi
	call rax (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000462760
	// succ:  l00000000004627AA l0000000000462760
l00000000004627AA:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	rbp = rbp + 1<64>
	SCZO = cond(rbp)
	SCZO = cond(r13 - rbx)
	branch Test(GT,SZO) l0000000000462743
	// succ:  l00000000004627B7 l0000000000462743
l00000000004627B7:
	goto l0000000000462760
	// succ:  l0000000000462760
fn0000000000462720_exit:


// fn00000000004627C0
// Return size: 8
define fn00000000004627C0
fn00000000004627C0_entry:
	rsp = fp
	// succ:  l00000000004627C0
l00000000004627C0:
	rax = Mem0[rcx:word64]
	rdx = 0x0000000000462360<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000004627E0
	// succ:  l00000000004627D3 l00000000004627E0
l00000000004627D3:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn00000000004627C0_exit
l00000000004627E0:
	call rax (retsize: 0;)
	return
	// succ:  fn00000000004627C0_exit
fn00000000004627C0_exit:


// fn00000000004627F0
// Return size: 8
define fn00000000004627F0
fn00000000004627F0_entry:
	rsp = fp
	// succ:  l00000000004627F0
l00000000004627F0:
	rax = rcx
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rcx + 8<64>:word32] = 0<32>
	return
	// succ:  fn00000000004627F0_exit
fn00000000004627F0_exit:


// fn0000000000462810
// Return size: 8
define fn0000000000462810
fn0000000000462810_entry:
	rsp = fp
	// succ:  l0000000000462810
l0000000000462810:
	rax = rcx
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rcx + 8<64>:word32] = 0<32>
	return
	// succ:  fn0000000000462810_exit
fn0000000000462810_exit:


// fn0000000000462830
// Return size: 8
define fn0000000000462830
fn0000000000462830_entry:
	rsp = fp
	// succ:  l0000000000462830
l0000000000462830:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(Mem0[rcx + 8<64>:word64] - rax)
	branch Test(UGE,C) l0000000000462850
	// succ:  l000000000046283A l0000000000462850
l000000000046283A:
	rdx = rax - 1<64>
	Mem0[rcx + 0x10<64>:word64] = rdx
	eax = CONVERT(Mem0[rax - 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000462830_exit
l0000000000462850:
	rax = Mem0[rcx:word64]
	rdx = 0x0000000000462930<p64>
	r8 = Mem0[rax + 0x58<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8 - rdx)
	branch Test(NE,Z) l0000000000462870
	// succ:  l0000000000462868 l0000000000462870
l0000000000462868:
	return
	// succ:  fn0000000000462830_exit
l0000000000462870:
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	call r8 (retsize: 0;)
	return
	// succ:  fn0000000000462830_exit
fn0000000000462830_exit:


// fn0000000000462880
// Return size: 8
define fn0000000000462880
fn0000000000462880_entry:
	rsp = fp
	// succ:  l0000000000462880
l0000000000462880:
	rdx = Mem0[rcx + 0x18<64>:word64]
	rdx = rdx - Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx)
	SZO = cond(rdx & rdx)
	C = false
	rax = rdx
	branch Test(EQ,Z) l0000000000462892
	// succ:  l0000000000462890 l0000000000462892
l0000000000462890:
	return
	// succ:  fn0000000000462880_exit
l0000000000462892:
	rax = Mem0[rcx:word64]
	r8 = Mem0[rax + 0x38<64>:word64]
	rax = rdx
	rdx = 0x0000000000462970<p64>
	SCZO = cond(r8 - rdx)
	branch Test(EQ,Z) l0000000000462890
	// succ:  l00000000004628A8 l0000000000462890
l00000000004628A8:
	call r8 (retsize: 0;)
	return
	// succ:  fn0000000000462880_exit
fn0000000000462880_exit:


// fn00000000004628B0
// Return size: 8
define fn00000000004628B0
fn00000000004628B0_entry:
	rsp = fp
	// succ:  l00000000004628B0
l00000000004628B0:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004628B0_exit
fn00000000004628B0_exit:


// fn00000000004628C0
// Return size: 8
define fn00000000004628C0
fn00000000004628C0_entry:
	rsp = fp
	// succ:  l00000000004628C0
l00000000004628C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdi = rdx + 0x38<64>
	rbx = rdx
	rsi = rcx
	rbp = r8
	rdx = rdi
	call fn000000000046AE80 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rdx = 0x0000000000462380<p64>
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000462910
	// succ:  l00000000004628F0 l0000000000462910
l00000000004628F0:
	rdx = rbp
	rcx = rdi
	call fn000000000046AF60 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004628C0_exit
l0000000000462910:
	rdx = rbp
	rcx = rbx
	call rax (retsize: 8;)
	goto l00000000004628F0
	// succ:  l00000000004628F0
fn00000000004628C0_exit:


// fn0000000000462930
// Return size: 8
define fn0000000000462930
fn0000000000462930_entry:
	rsp = fp
	// succ:  l0000000000462930
l0000000000462930:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000462930_exit
fn0000000000462930_exit:


// fn0000000000462940
// Return size: 8
define fn0000000000462940
fn0000000000462940_entry:
	rsp = fp
	// succ:  l0000000000462940
l0000000000462940:
	rax = Mem0[rcx:word64]
	r9 = 0x0000000000462510<p64>
	rax = Mem0[rax + 0x18<64>:word64]
	SCZO = cond(rax - r9)
	branch Test(NE,Z) l0000000000462960
	// succ:  l0000000000462953 l0000000000462960
l0000000000462953:
	rax = rcx
	return
	// succ:  fn0000000000462940_exit
l0000000000462960:
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000462940_exit
fn0000000000462940_exit:


// fn0000000000462970
// Return size: 8
define fn0000000000462970
fn0000000000462970_entry:
	rsp = fp
	// succ:  l0000000000462970
l0000000000462970:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000462970_exit
fn0000000000462970_exit:


// fn0000000000462980
// Return size: 8
define fn0000000000462980
fn0000000000462980_entry:
	rsp = fp
	// succ:  l0000000000462980
l0000000000462980:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(Mem0[rcx + 8<64>:word64] - rax)
	branch Test(UGE,C) l000000000046298F
	// succ:  l000000000046298A l000000000046298F
l000000000046298A:
	SCZO = cond(Mem0[rax - 1<64>:byte] - dl)
	branch Test(EQ,Z) l00000000004629B0
	// succ:  l000000000046298F l00000000004629B0
l000000000046298F:
	rax = Mem0[rcx:word64]
	r9 = 0x0000000000462930<p64>
	r8 = Mem0[rax + 0x58<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8 - r9)
	branch Test(NE,Z) l00000000004629C0
	// succ:  l00000000004629A7 l00000000004629C0
l00000000004629A7:
	return
	// succ:  fn0000000000462980_exit
l00000000004629B0:
	rdx = rax - 1<64>
	Mem0[rcx + 0x10<64>:word64] = rdx
	eax = CONVERT(Mem0[rax - 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000462980_exit
l00000000004629C0:
	edx = CONVERT(dl, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	call r8 (retsize: 0;)
	return
	// succ:  fn0000000000462980_exit
fn0000000000462980_exit:


// fn00000000004629D0
// Return size: 8
define fn00000000004629D0
fn00000000004629D0_entry:
	rsp = fp
	// succ:  l00000000004629D0
l00000000004629D0:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004629D0_exit
fn00000000004629D0_exit:


// fn00000000004629E0
// Return size: 8
define fn00000000004629E0
fn00000000004629E0_entry:
	rsp = fp
	// succ:  l00000000004629E0
l00000000004629E0:
	rax = 0x0000000000496F10<p64>
	rdx = rdx + 0x38<64>
	SCZO = cond(rdx)
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	Mem0[rcx - 0x38<64>:word64] = rax
	rax = Mem0[rdx - 0x30<64>:word64]
	Mem0[rcx - 0x30<64>:word64] = rax
	rax = Mem0[rdx - 0x28<64>:word64]
	Mem0[rcx - 0x28<64>:word64] = rax
	rax = Mem0[rdx - 0x20<64>:word64]
	Mem0[rcx - 0x20<64>:word64] = rax
	rax = Mem0[rdx - 0x18<64>:word64]
	Mem0[rcx - 0x18<64>:word64] = rax
	rax = Mem0[rdx - 0x10<64>:word64]
	Mem0[rcx - 0x10<64>:word64] = rax
	rax = Mem0[rdx - 0x10<64>:word64]
	Mem0[rcx - 8<64>:word64] = rax
	// succ:  l0000000000462A23_thunk_fn000000000046AE80
l0000000000462A23_thunk_fn000000000046AE80:
	call fn000000000046AE80 (retsize: 0;)
	return
	// succ:  fn00000000004629E0_exit
fn00000000004629E0_exit:


// fn0000000000462A30
// Return size: 8
define fn0000000000462A30
fn0000000000462A30_entry:
	rsp = fp
	// succ:  l0000000000462A30
l0000000000462A30:
	rax = 0x0000000000496F10<p64>
	Mem0[rcx + 8<64>:word64] = 0<64>
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	Mem0[rcx - 0x38<64>:word64] = rax
	Mem0[rcx - 0x20<64>:word64] = 0<64>
	Mem0[rcx - 0x18<64>:word64] = 0<64>
	Mem0[rcx - 0x10<64>:word64] = 0<64>
	Mem0[rcx - 8<64>:word64] = 0<64>
	// succ:  l0000000000462A6F_thunk_fn000000000046AE90
l0000000000462A6F_thunk_fn000000000046AE90:
	call fn000000000046AE90 (retsize: 0;)
	return
	// succ:  fn0000000000462A30_exit
fn0000000000462A30_exit:


// fn0000000000462A80
// Return size: 8
define fn0000000000462A80
fn0000000000462A80_entry:
	rsp = fp
	// succ:  l0000000000462A80
l0000000000462A80:
	rax = 0x0000000000496F10<p64>
	rdx = rdx + 0x38<64>
	SCZO = cond(rdx)
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	Mem0[rcx - 0x38<64>:word64] = rax
	rax = Mem0[rdx - 0x30<64>:word64]
	Mem0[rcx - 0x30<64>:word64] = rax
	rax = Mem0[rdx - 0x28<64>:word64]
	Mem0[rcx - 0x28<64>:word64] = rax
	rax = Mem0[rdx - 0x20<64>:word64]
	Mem0[rcx - 0x20<64>:word64] = rax
	rax = Mem0[rdx - 0x18<64>:word64]
	Mem0[rcx - 0x18<64>:word64] = rax
	rax = Mem0[rdx - 0x10<64>:word64]
	Mem0[rcx - 0x10<64>:word64] = rax
	rax = Mem0[rdx - 0x10<64>:word64]
	Mem0[rcx - 8<64>:word64] = rax
	// succ:  l0000000000462AC3_thunk_fn000000000046AE80
l0000000000462AC3_thunk_fn000000000046AE80:
	call fn000000000046AE80 (retsize: 0;)
	return
	// succ:  fn0000000000462A80_exit
fn0000000000462A80_exit:


// fn0000000000462AD0
// Return size: 8
define fn0000000000462AD0
fn0000000000462AD0_entry:
	rsp = fp
	// succ:  l0000000000462AD0
l0000000000462AD0:
	rax = 0x0000000000496F10<p64>
	Mem0[rcx + 8<64>:word64] = 0<64>
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	Mem0[rcx - 0x38<64>:word64] = rax
	Mem0[rcx - 0x20<64>:word64] = 0<64>
	Mem0[rcx - 0x18<64>:word64] = 0<64>
	Mem0[rcx - 0x10<64>:word64] = 0<64>
	Mem0[rcx - 8<64>:word64] = 0<64>
	// succ:  l0000000000462B0F_thunk_fn000000000046AE90
l0000000000462B0F_thunk_fn000000000046AE90:
	call fn000000000046AE90 (retsize: 0;)
	return
	// succ:  fn0000000000462AD0_exit
fn0000000000462AD0_exit:


// fn0000000000462B20
// Return size: 0
define fn0000000000462B20
fn0000000000462B20_entry:
	rsp = fp
	// succ:  l0000000000462B20
l0000000000462B20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496F10<p64>
	rbx = rcx
	rcx = rcx + 0x38<64>
	Mem0[rcx - 0x38<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000462B44_thunk_fn0000000000475550
l0000000000462B44_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000462B20_exit
fn0000000000462B20_exit:


// fn0000000000462B50
// Return size: 0
define fn0000000000462B50
fn0000000000462B50_entry:
	rsp = fp
	// succ:  l0000000000462B50
l0000000000462B50:
	rax = 0x0000000000496F10<p64>
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	Mem0[rcx - 0x38<64>:word64] = rax
	// succ:  l0000000000462B5F_thunk_fn000000000046AF20
l0000000000462B5F_thunk_fn000000000046AF20:
	call fn000000000046AF20 (retsize: 0;)
	return
	// succ:  fn0000000000462B50_exit
fn0000000000462B50_exit:


// fn0000000000462B70
// Return size: 0
define fn0000000000462B70
fn0000000000462B70_entry:
	rsp = fp
	// succ:  l0000000000462B70
l0000000000462B70:
	rax = 0x0000000000496F10<p64>
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	Mem0[rcx - 0x38<64>:word64] = rax
	// succ:  l0000000000462B7F_thunk_fn000000000046AF20
l0000000000462B7F_thunk_fn000000000046AF20:
	call fn000000000046AF20 (retsize: 0;)
	return
	// succ:  fn0000000000462B70_exit
fn0000000000462B70_exit:


// fn0000000000462B90
// Return size: 8
define fn0000000000462B90
fn0000000000462B90_entry:
	rsp = fp
	// succ:  l0000000000462B90
l0000000000462B90:
	rax = rcx
	return
	// succ:  fn0000000000462B90_exit
fn0000000000462B90_exit:


// fn0000000000462BA0
// Return size: 8
define fn0000000000462BA0
fn0000000000462BA0_entry:
	rsp = fp
	// succ:  l0000000000462BA0
l0000000000462BA0:
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rax = rcx
	rcx = Mem0[rdx:word64]
	r10 = Mem0[rcx + 0x20<64>:word64]
	rcx = 0x0000000000463140<p64>
	SCZO = cond(r10 - rcx)
	branch Test(NE,Z) l0000000000462BD0
	// succ:  l0000000000462BBA l0000000000462BD0
l0000000000462BBA:
	Mem0[rax:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rax + 8<64>:word32] = 0<32>
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000462BA0_exit
l0000000000462BD0:
	ecx = Mem0[rsp + 0x70<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x38<64>:word64] = rax
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rax
	call r10 (retsize: 8;)
	rax = Mem0[rsp + 0x38<64>:word64]
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000462BA0_exit
fn0000000000462BA0_exit:


// fn0000000000462BF0
// Return size: 8
define fn0000000000462BF0
fn0000000000462BF0_entry:
	rsp = fp
	// succ:  l0000000000462BF0
l0000000000462BF0:
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rax = rcx
	rcx = Mem0[rdx:word64]
	xmm1 = Mem0[r8:word128]
	r10 = Mem0[rcx + 0x28<64>:word64]
	rcx = 0x0000000000463160<p64>
	SCZO = cond(r10 - rcx)
	branch Test(NE,Z) l0000000000462C22
	// succ:  l0000000000462C0F l0000000000462C22
l0000000000462C0F:
	Mem0[rax:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rax + 8<64>:word32] = 0<32>
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000462BF0_exit
l0000000000462C22:
	rcx = rax
	Mem0[rsp + 0x28<64>:word64] = rax
	r8 = rsp + 0x30<64>
	Mem0[rsp + 0x30<64>:word128] = xmm1
	call r10 (retsize: 8;)
	rax = Mem0[rsp + 0x28<64>:word64]
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000462BF0_exit
fn0000000000462BF0_exit:


// fn0000000000462C50
// Return size: 8
define fn0000000000462C50
fn0000000000462C50_entry:
	rsp = fp
	// succ:  l0000000000462C50
l0000000000462C50:
	rdx = rdx + rdx
	SCZO = cond(rdx)
	v6 = Mem0[rcx + 0x10<64>:word64] + rdx
	Mem0[rcx + 0x10<64>:word64] = v6
	SCZO = cond(v6)
	return
	// succ:  fn0000000000462C50_exit
fn0000000000462C50_exit:


// fn0000000000462C60
// Return size: 8
define fn0000000000462C60
fn0000000000462C60_entry:
	rsp = fp
	// succ:  l0000000000462C60
l0000000000462C60:
	rdx = rdx + rdx
	SCZO = cond(rdx)
	v6 = Mem0[rcx + 0x28<64>:word64] + rdx
	Mem0[rcx + 0x28<64>:word64] = v6
	SCZO = cond(v6)
	return
	// succ:  fn0000000000462C60_exit
fn0000000000462C60_exit:


// fn0000000000462C70
// Return size: 8
define fn0000000000462C70
fn0000000000462C70_entry:
	rsp = fp
	// succ:  l0000000000462C70
l0000000000462C70:
	Mem0[rcx + 8<64>:word64] = rdx
	Mem0[rcx + 0x10<64>:word64] = r8
	Mem0[rcx + 0x18<64>:word64] = r9
	return
	// succ:  fn0000000000462C70_exit
fn0000000000462C70_exit:


// fn0000000000462C80
// Return size: 8
define fn0000000000462C80
fn0000000000462C80_entry:
	rsp = fp
	// succ:  l0000000000462C80
l0000000000462C80:
	Mem0[rcx + 0x28<64>:word64] = rdx
	Mem0[rcx + 0x20<64>:word64] = rdx
	Mem0[rcx + 0x30<64>:word64] = r8
	return
	// succ:  fn0000000000462C80_exit
fn0000000000462C80_exit:


// fn0000000000462C90
// Return size: 8
define fn0000000000462C90
fn0000000000462C90_entry:
	rsp = fp
	// succ:  l0000000000462C90
l0000000000462C90:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000462C90_exit
fn0000000000462C90_exit:


// fn0000000000462CA0
// Return size: 8
define fn0000000000462CA0
fn0000000000462CA0_entry:
	rsp = fp
	// succ:  l0000000000462CA0
l0000000000462CA0:
	rdx = CONVERT(edx, word32, int64)
	rdx = rdx + rdx
	SCZO = cond(rdx)
	v7 = Mem0[rcx + 0x10<64>:word64] + rdx
	Mem0[rcx + 0x10<64>:word64] = v7
	SCZO = cond(v7)
	return
	// succ:  fn0000000000462CA0_exit
fn0000000000462CA0_exit:


// fn0000000000462CB0
// Return size: 8
define fn0000000000462CB0
fn0000000000462CB0_entry:
	rsp = fp
	// succ:  l0000000000462CB0
l0000000000462CB0:
	return
	// succ:  fn0000000000462CB0_exit
fn0000000000462CB0_exit:


// fn0000000000462CC0
// Return size: 8
define fn0000000000462CC0
fn0000000000462CC0_entry:
	rsp = fp
	// succ:  l0000000000462CC0
l0000000000462CC0:
	rdx = CONVERT(edx, word32, int64)
	rdx = rdx + rdx
	SCZO = cond(rdx)
	v7 = Mem0[rcx + 0x28<64>:word64] + rdx
	Mem0[rcx + 0x28<64>:word64] = v7
	SCZO = cond(v7)
	return
	// succ:  fn0000000000462CC0_exit
fn0000000000462CC0_exit:


// fn0000000000462CD0
// Return size: 8
define fn0000000000462CD0
fn0000000000462CD0_entry:
	rsp = fp
	// succ:  l0000000000462CD0
l0000000000462CD0:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000462CE0
	// succ:  l0000000000462CDA l0000000000462CE0
l0000000000462CDA:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000462CD0_exit
l0000000000462CE0:
	rax = Mem0[rcx:word64]
	r8 = 0x0000000000463320<p64>
	rdx = Mem0[rax + 0x48<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(rdx - r8)
	branch Test(NE,Z) l0000000000462D00
	// succ:  l0000000000462CF8 l0000000000462D00
l0000000000462CF8:
	return
	// succ:  fn0000000000462CD0_exit
l0000000000462D00:
	call rdx (retsize: 0;)
	return
	// succ:  fn0000000000462CD0_exit
fn0000000000462CD0_exit:


// fn0000000000462D10
// Return size: 0
define fn0000000000462D10
fn0000000000462D10_entry:
	rsp = fp
	// succ:  l0000000000462D10
l0000000000462D10:
	rax = Mem0[rcx:word64]
	rax = Mem0[rax + 0x40<64>:word64]
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000462D10_exit
fn0000000000462D10_exit:


// fn0000000000462D20
// Return size: 8
define fn0000000000462D20
fn0000000000462D20_entry:
	rsp = fp
	// succ:  l0000000000462D20
l0000000000462D20:
	r8 = Mem0[rcx + 0x28<64>:word64]
	SCZO = cond(r8 - Mem0[rcx + 0x30<64>:word64])
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	branch Test(UGE,C) l0000000000462D40
	// succ:  l0000000000462D2C l0000000000462D40
l0000000000462D2C:
	Mem0[r8:word16] = dx
	r8 = r8 + 2<64>
	SCZO = cond(r8)
	Mem0[rcx + 0x28<64>:word64] = r8
	return
	// succ:  fn0000000000462D20_exit
l0000000000462D40:
	rax = Mem0[rcx:word64]
	r9 = 0x0000000000463200<p64>
	r8 = Mem0[rax + 0x68<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8 - r9)
	branch Test(NE,Z) l0000000000462D60
	// succ:  l0000000000462D58 l0000000000462D60
l0000000000462D58:
	return
	// succ:  fn0000000000462D20_exit
l0000000000462D60:
	edx = CONVERT(dx, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	call r8 (retsize: 0;)
	return
	// succ:  fn0000000000462D20_exit
fn0000000000462D20_exit:


// fn0000000000462D70
// Return size: 0
define fn0000000000462D70
fn0000000000462D70_entry:
	rsp = fp
	// succ:  l0000000000462D70
l0000000000462D70:
	rax = Mem0[rcx:word64]
	rax = Mem0[rax + 0x60<64>:word64]
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000462D70_exit
fn0000000000462D70_exit:


// fn0000000000462D80
// Return size: 8
define fn0000000000462D80
fn0000000000462D80_entry:
	rsp = fp
	// succ:  l0000000000462D80
l0000000000462D80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdx = 0x0000000000463320<p64>
	rax = Mem0[rax + 0x48<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000462DA3
	// succ:  l0000000000462D98 l0000000000462DA3
l0000000000462D98:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000462D80_exit
l0000000000462DA3:
	rbx = rcx
	call rax (retsize: 8;)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000462D98
	// succ:  l0000000000462DAE l0000000000462D98
l0000000000462DAE:
	rdx = Mem0[rbx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x10<64>:word64] = rdx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000462D80_exit
fn0000000000462D80_exit:


// fn0000000000462DD0
// Return size: 8
define fn0000000000462DD0
fn0000000000462DD0_entry:
	rsp = fp
	// succ:  l0000000000462DD0
l0000000000462DD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000462DF0
	// succ:  l0000000000462DDF l0000000000462DF0
l0000000000462DDF:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rcx + 0x10<64>:word64] = rdx
	// succ:  l0000000000462DEA
l0000000000462DEA:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000462DD0_exit
l0000000000462DF0:
	rax = Mem0[rcx:word64]
	r8 = 0x0000000000462D80<p64>
	rdx = Mem0[rax + 0x50<64>:word64]
	SCZO = cond(rdx - r8)
	branch Test(NE,Z) l0000000000462E20
	// succ:  l0000000000462E03 l0000000000462E20
l0000000000462E03:
	rax = Mem0[rax + 0x48<64>:word64]
	rdx = 0x0000000000463320<p64>
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000462E30
	// succ:  l0000000000462E13 l0000000000462E30
l0000000000462E13:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000462DEA
	// succ:  l0000000000462DEA
l0000000000462E20:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call rdx (retsize: 0;)
	return
	// succ:  fn0000000000462DD0_exit
l0000000000462E30:
	rbx = rcx
	call rax (retsize: 8;)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000462E13
	// succ:  l0000000000462E3B l0000000000462E13
l0000000000462E3B:
	rdx = Mem0[rbx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x10<64>:word64] = rdx
	goto l0000000000462DEA
	// succ:  l0000000000462DEA
fn0000000000462DD0_exit:


// fn0000000000462E50
// Return size: 8
define fn0000000000462E50
fn0000000000462E50_entry:
	rsp = fp
	// succ:  l0000000000462E50
l0000000000462E50:
	rax = rcx
	return
	// succ:  fn0000000000462E50_exit
fn0000000000462E50_exit:


// fn0000000000462E60
// Return size: 8
define fn0000000000462E60
fn0000000000462E60_entry:
	rsp = fp
	// succ:  l0000000000462E60
l0000000000462E60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	rbx = rcx
	branch Test(UGE,C) l0000000000462EA0
	// succ:  l0000000000462E72 l0000000000462EA0
l0000000000462E72:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x10<64>:word64] = rdx
	// succ:  l0000000000462E7D
l0000000000462E7D:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000462EC3
	// succ:  l0000000000462E83 l0000000000462EC3
l0000000000462E83:
	rax = Mem0[rbx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rbx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000462ED0
	// succ:  l0000000000462E8D l0000000000462ED0
l0000000000462E8D:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000462E60_exit
l0000000000462EA0:
	rax = Mem0[rcx:word64]
	rcx = 0x0000000000462D80<p64>
	rdx = Mem0[rax + 0x50<64>:word64]
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000462F04
	// succ:  l0000000000462EB3 l0000000000462F04
l0000000000462EB3:
	rax = Mem0[rax + 0x48<64>:word64]
	rdx = 0x0000000000463320<p64>
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000462EF0
	// succ:  l0000000000462EC3 l0000000000462EF0
l0000000000462EC3:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000462E60_exit
l0000000000462ED0:
	rax = Mem0[rbx:word64]
	rdx = 0x0000000000463320<p64>
	rax = Mem0[rax + 0x48<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(EQ,Z) l0000000000462EC3
	// succ:  l0000000000462EE3 l0000000000462EC3
l0000000000462EE3:
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000462E60_exit
l0000000000462EF0:
	rcx = rbx
	call rax (retsize: 8;)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000462EC3
	// succ:  l0000000000462EFB l0000000000462EC3
l0000000000462EFB:
	rdx = Mem0[rbx + 0x10<64>:word64]
	goto l0000000000462E72
	// succ:  l0000000000462E72
l0000000000462F04:
	rcx = rbx
	call rdx (retsize: 8;)
	goto l0000000000462E7D
	// succ:  l0000000000462E7D
fn0000000000462E60_exit:


// fn0000000000462F10
// Return size: 8
define fn0000000000462F10
fn0000000000462F10_entry:
	rsp = fp
	// succ:  l0000000000462F10
l0000000000462F10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000462F30
	// succ:  l0000000000462F1F l0000000000462F30
l0000000000462F1F:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l0000000000462F27
l0000000000462F27:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000462F10_exit
l0000000000462F30:
	rax = Mem0[rcx:word64]
	r8 = 0x0000000000462D80<p64>
	rdx = Mem0[rax + 0x50<64>:word64]
	SCZO = cond(rdx - r8)
	branch Test(NE,Z) l0000000000462F70
	// succ:  l0000000000462F43 l0000000000462F70
l0000000000462F43:
	rax = Mem0[rax + 0x48<64>:word64]
	rdx = 0x0000000000463320<p64>
	SCZO = cond(rax - rdx)
	branch Test(EQ,Z) l0000000000462F27
	// succ:  l0000000000462F53 l0000000000462F27
l0000000000462F53:
	rbx = rcx
	call rax (retsize: 8;)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000462F27
	// succ:  l0000000000462F5E l0000000000462F27
l0000000000462F5E:
	v12 = Mem0[rbx + 0x10<64>:word64] + 2<64>
	Mem0[rbx + 0x10<64>:word64] = v12
	SCZO = cond(v12)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000462F10_exit
l0000000000462F70:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call rdx (retsize: 0;)
	return
	// succ:  fn0000000000462F10_exit
fn0000000000462F10_exit:


// fn0000000000462F80
// Return size: 8
define fn0000000000462F80
fn0000000000462F80_entry:
	rsp = fp
	// succ:  l0000000000462F80
l0000000000462F80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	r14 = rdx
	r13 = r8
	branch Test(LE,SZO) l0000000000462FD3
	// succ:  l0000000000462FA0 l0000000000462FD3
l0000000000462FA0:
	rbp = 0x0000000000462D80<p64>
	r12 = 0x0000000000463320<p64>
	// succ:  l0000000000462FAE
l0000000000462FAE:
	rdx = Mem0[rbx + 0x10<64>:word64]
	r9 = Mem0[rbx + 0x18<64>:word64]
	r9 = r9 - rdx
	SCZO = cond(r9)
	r9 = r9 >> 1<64>
	SCZO = cond(r9)
	branch Test(NE,Z) l0000000000462FF0
	// succ:  l0000000000462FBE l0000000000462FF0
l0000000000462FBE:
	rax = Mem0[rbx:word64]
	rdx = Mem0[rax + 0x50<64>:word64]
	SCZO = cond(rdx - rbp)
	branch Test(NE,Z) l0000000000463020
	// succ:  l0000000000462FCA l0000000000463020
l0000000000462FCA:
	rax = Mem0[rax + 0x48<64>:word64]
	SCZO = cond(rax - r12)
	branch Test(NE,Z) l0000000000463044
	// succ:  l0000000000462FD3 l0000000000463044
l0000000000462FD3:
	rax = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000462F80_exit
l0000000000462FF0:
	rdi = r13
	rcx = r14
	rdi = rdi - rsi
	SCZO = cond(rdi)
	SCZO = cond(rdi - r9)
	branch Test(LE,SZO) l0000000000463000
	// succ:  l0000000000462FFC_1 l0000000000463000
l0000000000462FFC_1:
	rdi = r9
	// succ:  l0000000000463000
l0000000000463000:
	r15 = rdi + rdi
	rsi = rsi + rdi
	SCZO = cond(rsi)
	r8 = r15
	rax = memcpy(rcx, rdx, r8)
	v23 = Mem0[rbx + 0x10<64>:word64] + r15
	Mem0[rbx + 0x10<64>:word64] = v23
	SCZO = cond(v23)
	SCZO = cond(r13 - rsi)
	branch Test(LE,SZO) l0000000000462FD3
	// succ:  l0000000000463018 l0000000000462FD3
l0000000000463018:
	r14 = r14 + r15
	SCZO = cond(r14)
	goto l0000000000462FBE
	// succ:  l0000000000462FBE
l0000000000463020:
	rcx = rbx
	call rdx (retsize: 8;)
	// succ:  l0000000000463025
l0000000000463025:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000462FD3
	// succ:  l000000000046302B l0000000000462FD3
l000000000046302B:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	rdx = r14 + 2<64>
	Mem0[r14:word16] = ax
	SCZO = cond(r13 - rsi)
	branch Test(LE,SZO) l0000000000462FD3
	// succ:  l000000000046303C l0000000000462FD3
l000000000046303C:
	r14 = rdx
	goto l0000000000462FAE
	// succ:  l0000000000462FAE
l0000000000463044:
	rcx = rbx
	call rax (retsize: 8;)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l0000000000462FD3
	// succ:  l000000000046304F l0000000000462FD3
l000000000046304F:
	rdx = Mem0[rbx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x10<64>:word64] = rdx
	goto l0000000000463025
	// succ:  l0000000000463025
fn0000000000462F80_exit:


// fn0000000000463060
// Return size: 8
define fn0000000000463060
fn0000000000463060_entry:
	rsp = fp
	// succ:  l0000000000463060
l0000000000463060:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rsi = rcx
	r13 = rdx
	r14 = r8
	branch Test(LE,SZO) l00000000004630A6
	// succ:  l000000000046307E l00000000004630A6
l000000000046307E:
	rbp = 0x0000000000463200<p64>
	// succ:  l0000000000463085
l0000000000463085:
	rcx = Mem0[rsi + 0x28<64>:word64]
	r9 = Mem0[rsi + 0x30<64>:word64]
	r9 = r9 - rcx
	SCZO = cond(r9)
	r9 = r9 >> 1<64>
	SCZO = cond(r9)
	branch Test(NE,Z) l00000000004630C0
	// succ:  l0000000000463095 l00000000004630C0
l0000000000463095:
	rax = Mem0[rsi:word64]
	edx = CONVERT(Mem0[r13 + 0<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rax + 0x68<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l00000000004630F0
	// succ:  l00000000004630A6 l00000000004630F0
l00000000004630A6:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000463060_exit
l00000000004630C0:
	rdi = r14
	rdx = r13
	rdi = rdi - rbx
	SCZO = cond(rdi)
	SCZO = cond(rdi - r9)
	branch Test(LE,SZO) l00000000004630D0
	// succ:  l00000000004630CC_1 l00000000004630D0
l00000000004630CC_1:
	rdi = r9
	// succ:  l00000000004630D0
l00000000004630D0:
	r12 = rdi + rdi
	rbx = rbx + rdi
	SCZO = cond(rbx)
	r8 = r12
	rax = memcpy(rcx, rdx, r8)
	v22 = Mem0[rsi + 0x28<64>:word64] + r12
	Mem0[rsi + 0x28<64>:word64] = v22
	SCZO = cond(v22)
	SCZO = cond(r14 - rbx)
	branch Test(LE,SZO) l00000000004630A6
	// succ:  l00000000004630E8 l00000000004630A6
l00000000004630E8:
	r13 = r13 + r12
	SCZO = cond(r13)
	goto l0000000000463095
	// succ:  l0000000000463095
l00000000004630F0:
	rcx = rsi
	call rax (retsize: 8;)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l00000000004630A6
	// succ:  l00000000004630FB l00000000004630A6
l00000000004630FB:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	r13 = r13 + 2<64>
	SCZO = cond(r13)
	SCZO = cond(r14 - rbx)
	branch Test(GT,SZO) l0000000000463085
	// succ:  l000000000046310C l0000000000463085
l000000000046310C:
	goto l00000000004630A6
	// succ:  l00000000004630A6
fn0000000000463060_exit:


// fn0000000000463110
// Return size: 8
define fn0000000000463110
fn0000000000463110_entry:
	rsp = fp
	// succ:  l0000000000463110
l0000000000463110:
	rax = Mem0[rcx:word64]
	rdx = 0x0000000000462C90<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000463130
	// succ:  l0000000000463123 l0000000000463130
l0000000000463123:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000463110_exit
l0000000000463130:
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000463110_exit
fn0000000000463110_exit:


// fn0000000000463140
// Return size: 8
define fn0000000000463140
fn0000000000463140_entry:
	rsp = fp
	// succ:  l0000000000463140
l0000000000463140:
	rax = rcx
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rcx + 8<64>:word32] = 0<32>
	return
	// succ:  fn0000000000463140_exit
fn0000000000463140_exit:


// fn0000000000463160
// Return size: 8
define fn0000000000463160
fn0000000000463160_entry:
	rsp = fp
	// succ:  l0000000000463160
l0000000000463160:
	rax = rcx
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rcx + 8<64>:word32] = 0<32>
	return
	// succ:  fn0000000000463160_exit
fn0000000000463160_exit:


// fn0000000000463180
// Return size: 8
define fn0000000000463180
fn0000000000463180_entry:
	rsp = fp
	// succ:  l0000000000463180
l0000000000463180:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(Mem0[rcx + 8<64>:word64] - rax)
	branch Test(UGE,C) l00000000004631A0
	// succ:  l000000000046318A l00000000004631A0
l000000000046318A:
	rdx = rax - 2<64>
	eax = CONVERT(Mem0[rax - 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx + 0x10<64>:word64] = rdx
	return
	// succ:  fn0000000000463180_exit
l00000000004631A0:
	rax = Mem0[rcx:word64]
	rdx = 0x0000000000463280<p64>
	r8 = Mem0[rax + 0x58<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8 - rdx)
	branch Test(NE,Z) l00000000004631C0
	// succ:  l00000000004631B8 l00000000004631C0
l00000000004631B8:
	return
	// succ:  fn0000000000463180_exit
l00000000004631C0:
	edx = 0xFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	call r8 (retsize: 0;)
	return
	// succ:  fn0000000000463180_exit
fn0000000000463180_exit:


// fn00000000004631D0
// Return size: 8
define fn00000000004631D0
fn00000000004631D0_entry:
	rsp = fp
	// succ:  l00000000004631D0
l00000000004631D0:
	rdx = Mem0[rcx + 0x18<64>:word64]
	rdx = rdx - Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx)
	rdx = rdx >> 1<64>
	SCZO = cond(rdx)
	SZO = cond(rdx & rdx)
	C = false
	rax = rdx
	branch Test(EQ,Z) l00000000004631E5
	// succ:  l00000000004631E3 l00000000004631E5
l00000000004631E3:
	return
	// succ:  fn00000000004631D0_exit
l00000000004631E5:
	rax = Mem0[rcx:word64]
	r8 = Mem0[rax + 0x38<64>:word64]
	rax = rdx
	rdx = 0x00000000004632C0<p64>
	SCZO = cond(r8 - rdx)
	branch Test(EQ,Z) l00000000004631E3
	// succ:  l00000000004631FB l00000000004631E3
l00000000004631FB:
	call r8 (retsize: 0;)
	return
	// succ:  fn00000000004631D0_exit
fn00000000004631D0_exit:


// fn0000000000463200
// Return size: 8
define fn0000000000463200
fn0000000000463200_entry:
	rsp = fp
	// succ:  l0000000000463200
l0000000000463200:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000463200_exit
fn0000000000463200_exit:


// fn0000000000463210
// Return size: 8
define fn0000000000463210
fn0000000000463210_entry:
	rsp = fp
	// succ:  l0000000000463210
l0000000000463210:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdi = rdx + 0x38<64>
	rbx = rdx
	rsi = rcx
	rbp = r8
	rdx = rdi
	call fn000000000046AE80 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rdx = 0x0000000000462CB0<p64>
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000463260
	// succ:  l0000000000463240 l0000000000463260
l0000000000463240:
	rdx = rbp
	rcx = rdi
	call fn000000000046AF60 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000463210_exit
l0000000000463260:
	rdx = rbp
	rcx = rbx
	call rax (retsize: 8;)
	goto l0000000000463240
	// succ:  l0000000000463240
fn0000000000463210_exit:


// fn0000000000463280
// Return size: 8
define fn0000000000463280
fn0000000000463280_entry:
	rsp = fp
	// succ:  l0000000000463280
l0000000000463280:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000463280_exit
fn0000000000463280_exit:


// fn0000000000463290
// Return size: 8
define fn0000000000463290
fn0000000000463290_entry:
	rsp = fp
	// succ:  l0000000000463290
l0000000000463290:
	rax = Mem0[rcx:word64]
	r9 = 0x0000000000462E50<p64>
	rax = Mem0[rax + 0x18<64>:word64]
	SCZO = cond(rax - r9)
	branch Test(NE,Z) l00000000004632B0
	// succ:  l00000000004632A3 l00000000004632B0
l00000000004632A3:
	rax = rcx
	return
	// succ:  fn0000000000463290_exit
l00000000004632B0:
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000463290_exit
fn0000000000463290_exit:


// fn00000000004632C0
// Return size: 8
define fn00000000004632C0
fn00000000004632C0_entry:
	rsp = fp
	// succ:  l00000000004632C0
l00000000004632C0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn00000000004632C0_exit
fn00000000004632C0_exit:


// fn00000000004632D0
// Return size: 8
define fn00000000004632D0
fn00000000004632D0_entry:
	rsp = fp
	// succ:  l00000000004632D0
l00000000004632D0:
	r8 = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(Mem0[rcx + 8<64>:word64] - r8)
	branch Test(UGE,C) l00000000004632E4
	// succ:  l00000000004632DA l00000000004632E4
l00000000004632DA:
	eax = CONVERT(Mem0[r8 - 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - dx)
	branch Test(EQ,Z) l0000000000463300
	// succ:  l00000000004632E4 l0000000000463300
l00000000004632E4:
	rax = Mem0[rcx:word64]
	r9 = 0x0000000000463280<p64>
	r8 = Mem0[rax + 0x58<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8 - r9)
	branch Test(NE,Z) l0000000000463310
	// succ:  l00000000004632FC l0000000000463310
l00000000004632FC:
	return
	// succ:  fn00000000004632D0_exit
l0000000000463300:
	r8 = r8 - 2<64>
	SCZO = cond(r8)
	Mem0[rcx + 0x10<64>:word64] = r8
	return
	// succ:  fn00000000004632D0_exit
l0000000000463310:
	edx = CONVERT(dx, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	call r8 (retsize: 0;)
	return
	// succ:  fn00000000004632D0_exit
fn00000000004632D0_exit:


// fn0000000000463320
// Return size: 8
define fn0000000000463320
fn0000000000463320_entry:
	rsp = fp
	// succ:  l0000000000463320
l0000000000463320:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000463320_exit
fn0000000000463320_exit:


// fn0000000000463330
// Return size: 8
define fn0000000000463330
fn0000000000463330_entry:
	rsp = fp
	// succ:  l0000000000463330
l0000000000463330:
	rax = 0x0000000000496F90<p64>
	rdx = rdx + 0x38<64>
	SCZO = cond(rdx)
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	Mem0[rcx - 0x38<64>:word64] = rax
	rax = Mem0[rdx - 0x30<64>:word64]
	Mem0[rcx - 0x30<64>:word64] = rax
	rax = Mem0[rdx - 0x28<64>:word64]
	Mem0[rcx - 0x28<64>:word64] = rax
	rax = Mem0[rdx - 0x20<64>:word64]
	Mem0[rcx - 0x20<64>:word64] = rax
	rax = Mem0[rdx - 0x18<64>:word64]
	Mem0[rcx - 0x18<64>:word64] = rax
	rax = Mem0[rdx - 0x10<64>:word64]
	Mem0[rcx - 0x10<64>:word64] = rax
	rax = Mem0[rdx - 0x10<64>:word64]
	Mem0[rcx - 8<64>:word64] = rax
	// succ:  l0000000000463373_thunk_fn000000000046AE80
l0000000000463373_thunk_fn000000000046AE80:
	call fn000000000046AE80 (retsize: 0;)
	return
	// succ:  fn0000000000463330_exit
fn0000000000463330_exit:


// fn0000000000463380
// Return size: 8
define fn0000000000463380
fn0000000000463380_entry:
	rsp = fp
	// succ:  l0000000000463380
l0000000000463380:
	rax = 0x0000000000496F90<p64>
	Mem0[rcx + 8<64>:word64] = 0<64>
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	Mem0[rcx - 0x38<64>:word64] = rax
	Mem0[rcx - 0x20<64>:word64] = 0<64>
	Mem0[rcx - 0x18<64>:word64] = 0<64>
	Mem0[rcx - 0x10<64>:word64] = 0<64>
	Mem0[rcx - 8<64>:word64] = 0<64>
	// succ:  l00000000004633BF_thunk_fn000000000046AE90
l00000000004633BF_thunk_fn000000000046AE90:
	call fn000000000046AE90 (retsize: 0;)
	return
	// succ:  fn0000000000463380_exit
fn0000000000463380_exit:


// fn00000000004633D0
// Return size: 8
define fn00000000004633D0
fn00000000004633D0_entry:
	rsp = fp
	// succ:  l00000000004633D0
l00000000004633D0:
	rax = 0x0000000000496F90<p64>
	rdx = rdx + 0x38<64>
	SCZO = cond(rdx)
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	Mem0[rcx - 0x38<64>:word64] = rax
	rax = Mem0[rdx - 0x30<64>:word64]
	Mem0[rcx - 0x30<64>:word64] = rax
	rax = Mem0[rdx - 0x28<64>:word64]
	Mem0[rcx - 0x28<64>:word64] = rax
	rax = Mem0[rdx - 0x20<64>:word64]
	Mem0[rcx - 0x20<64>:word64] = rax
	rax = Mem0[rdx - 0x18<64>:word64]
	Mem0[rcx - 0x18<64>:word64] = rax
	rax = Mem0[rdx - 0x10<64>:word64]
	Mem0[rcx - 0x10<64>:word64] = rax
	rax = Mem0[rdx - 0x10<64>:word64]
	Mem0[rcx - 8<64>:word64] = rax
	// succ:  l0000000000463413_thunk_fn000000000046AE80
l0000000000463413_thunk_fn000000000046AE80:
	call fn000000000046AE80 (retsize: 0;)
	return
	// succ:  fn00000000004633D0_exit
fn00000000004633D0_exit:


// fn0000000000463420
// Return size: 8
define fn0000000000463420
fn0000000000463420_entry:
	rsp = fp
	// succ:  l0000000000463420
l0000000000463420:
	rax = 0x0000000000496F90<p64>
	Mem0[rcx + 8<64>:word64] = 0<64>
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	Mem0[rcx - 0x38<64>:word64] = rax
	Mem0[rcx - 0x20<64>:word64] = 0<64>
	Mem0[rcx - 0x18<64>:word64] = 0<64>
	Mem0[rcx - 0x10<64>:word64] = 0<64>
	Mem0[rcx - 8<64>:word64] = 0<64>
	// succ:  l000000000046345F_thunk_fn000000000046AE90
l000000000046345F_thunk_fn000000000046AE90:
	call fn000000000046AE90 (retsize: 0;)
	return
	// succ:  fn0000000000463420_exit
fn0000000000463420_exit:


// fn0000000000463470
// Return size: 0
define fn0000000000463470
fn0000000000463470_entry:
	rsp = fp
	// succ:  l0000000000463470
l0000000000463470:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000496F90<p64>
	rbx = rcx
	rcx = rcx + 0x38<64>
	Mem0[rcx - 0x38<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000463494_thunk_fn0000000000475550
l0000000000463494_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000463470_exit
fn0000000000463470_exit:


// fn00000000004634A0
// Return size: 0
define fn00000000004634A0
fn00000000004634A0_entry:
	rsp = fp
	// succ:  l00000000004634A0
l00000000004634A0:
	rax = 0x0000000000496F90<p64>
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	Mem0[rcx - 0x38<64>:word64] = rax
	// succ:  l00000000004634AF_thunk_fn000000000046AF20
l00000000004634AF_thunk_fn000000000046AF20:
	call fn000000000046AF20 (retsize: 0;)
	return
	// succ:  fn00000000004634A0_exit
fn00000000004634A0_exit:


// fn00000000004634C0
// Return size: 0
define fn00000000004634C0
fn00000000004634C0_entry:
	rsp = fp
	// succ:  l00000000004634C0
l00000000004634C0:
	rax = 0x0000000000496F90<p64>
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	Mem0[rcx - 0x38<64>:word64] = rax
	// succ:  l00000000004634CF_thunk_fn000000000046AF20
l00000000004634CF_thunk_fn000000000046AF20:
	call fn000000000046AF20 (retsize: 0;)
	return
	// succ:  fn00000000004634C0_exit
fn00000000004634C0_exit:


// fn00000000004634E0
// Return size: 8
define fn00000000004634E0
fn00000000004634E0_entry:
	rsp = fp
	// succ:  l00000000004634E0
l00000000004634E0:
	rax = rcx
	return
	// succ:  fn00000000004634E0_exit
fn00000000004634E0_exit:


// fn00000000004634F0
// Return size: 8
define fn00000000004634F0
fn00000000004634F0_entry:
	rsp = fp
	// succ:  l00000000004634F0
l00000000004634F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdi = 0x000000000048DEAA<p64>
	rbp = rdx
	rdx = r8
	rbx = rcx
	call fn000000000046D520 (retsize: 8;)
	rax = 0x0000000000497010<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l000000000046351F
l000000000046351F:
	branch rcx == 0<64> l0000000000463521
	// succ:  l000000000046351F_1 l0000000000463521
l000000000046351F_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000046351F
	// succ:  l0000000000463521 l000000000046351F
l0000000000463521:
	branch Test(EQ,Z) l0000000000463536
	// succ:  l0000000000463523 l0000000000463536
l0000000000463523:
	rdi = 0x000000000048DEAC<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l0000000000463532
l0000000000463532:
	branch rcx == 0<64> l0000000000463534
	// succ:  l0000000000463532_2 l0000000000463534
l0000000000463532_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000463532
	// succ:  l0000000000463534 l0000000000463532
l0000000000463534:
	branch Test(NE,Z) l0000000000463540
	// succ:  l0000000000463536 l0000000000463540
l0000000000463536:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004634F0_exit
l0000000000463540:
	rsi = rbx + 0x10<64>
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004634F0_exit
fn00000000004634F0_exit:


// fn0000000000463580
// Return size: 8
define fn0000000000463580
fn0000000000463580_entry:
	rsp = fp
	// succ:  l0000000000463580
l0000000000463580:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdi = 0x000000000048DEAA<p64>
	rbp = rdx
	rdx = r8
	rbx = rcx
	call fn000000000046D520 (retsize: 8;)
	rax = 0x0000000000497010<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l00000000004635AF
l00000000004635AF:
	branch rcx == 0<64> l00000000004635B1
	// succ:  l00000000004635AF_1 l00000000004635B1
l00000000004635AF_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l00000000004635AF
	// succ:  l00000000004635B1 l00000000004635AF
l00000000004635B1:
	branch Test(EQ,Z) l00000000004635C6
	// succ:  l00000000004635B3 l00000000004635C6
l00000000004635B3:
	rdi = 0x000000000048DEAC<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l00000000004635C2
l00000000004635C2:
	branch rcx == 0<64> l00000000004635C4
	// succ:  l00000000004635C2_2 l00000000004635C4
l00000000004635C2_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l00000000004635C2
	// succ:  l00000000004635C4 l00000000004635C2
l00000000004635C4:
	branch Test(NE,Z) l00000000004635D0
	// succ:  l00000000004635C6 l00000000004635D0
l00000000004635C6:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000463580_exit
l00000000004635D0:
	rsi = rbx + 0x10<64>
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000463580_exit
fn0000000000463580_exit:


// fn0000000000463610
// Return size: 0
define fn0000000000463610
fn0000000000463610_entry:
	rsp = fp
	// succ:  l0000000000463610
l0000000000463610:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497010<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046D5D0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046362F_thunk_fn0000000000475550
l000000000046362F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000463610_exit
fn0000000000463610_exit:


// fn0000000000463640
// Return size: 0
define fn0000000000463640
fn0000000000463640_entry:
	rsp = fp
	// succ:  l0000000000463640
l0000000000463640:
	rax = 0x0000000000497010<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046364A_thunk_fn000000000046D5D0
l000000000046364A_thunk_fn000000000046D5D0:
	call fn000000000046D5D0 (retsize: 0;)
	return
	// succ:  fn0000000000463640_exit
fn0000000000463640_exit:


// fn0000000000463650
// Return size: 0
define fn0000000000463650
fn0000000000463650_entry:
	rsp = fp
	// succ:  l0000000000463650
l0000000000463650:
	rax = 0x0000000000497010<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046365A_thunk_fn000000000046D5D0
l000000000046365A_thunk_fn000000000046D5D0:
	call fn000000000046D5D0 (retsize: 0;)
	return
	// succ:  fn0000000000463650_exit
fn0000000000463650_exit:


// fn0000000000463660
// Return size: 8
define fn0000000000463660
fn0000000000463660_entry:
	rsp = fp
	// succ:  l0000000000463660
l0000000000463660:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdi = 0x000000000048DB5A<p64>
	rbp = rdx
	rdx = r8
	rbx = rcx
	call fn000000000046D700 (retsize: 8;)
	rax = 0x0000000000497050<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l000000000046368F
l000000000046368F:
	branch rcx == 0<64> l0000000000463691
	// succ:  l000000000046368F_1 l0000000000463691
l000000000046368F_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000046368F
	// succ:  l0000000000463691 l000000000046368F
l0000000000463691:
	branch Test(EQ,Z) l00000000004636A6
	// succ:  l0000000000463693 l00000000004636A6
l0000000000463693:
	rdi = 0x000000000048DB5C<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l00000000004636A2
l00000000004636A2:
	branch rcx == 0<64> l00000000004636A4
	// succ:  l00000000004636A2_2 l00000000004636A4
l00000000004636A2_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l00000000004636A2
	// succ:  l00000000004636A4 l00000000004636A2
l00000000004636A4:
	branch Test(NE,Z) l00000000004636B0
	// succ:  l00000000004636A6 l00000000004636B0
l00000000004636A6:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000463660_exit
l00000000004636B0:
	rsi = rbx + 0x10<64>
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000463660_exit
fn0000000000463660_exit:


// fn00000000004636F0
// Return size: 8
define fn00000000004636F0
fn00000000004636F0_entry:
	rsp = fp
	// succ:  l00000000004636F0
l00000000004636F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdi = 0x000000000048DB5A<p64>
	rbp = rdx
	rdx = r8
	rbx = rcx
	call fn000000000046D700 (retsize: 8;)
	rax = 0x0000000000497050<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l000000000046371F
l000000000046371F:
	branch rcx == 0<64> l0000000000463721
	// succ:  l000000000046371F_1 l0000000000463721
l000000000046371F_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000046371F
	// succ:  l0000000000463721 l000000000046371F
l0000000000463721:
	branch Test(EQ,Z) l0000000000463736
	// succ:  l0000000000463723 l0000000000463736
l0000000000463723:
	rdi = 0x000000000048DB5C<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l0000000000463732
l0000000000463732:
	branch rcx == 0<64> l0000000000463734
	// succ:  l0000000000463732_2 l0000000000463734
l0000000000463732_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000463732
	// succ:  l0000000000463734 l0000000000463732
l0000000000463734:
	branch Test(NE,Z) l0000000000463740
	// succ:  l0000000000463736 l0000000000463740
l0000000000463736:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004636F0_exit
l0000000000463740:
	rsi = rbx + 0x10<64>
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004636F0_exit
fn00000000004636F0_exit:


// fn0000000000463780
// Return size: 0
define fn0000000000463780
fn0000000000463780_entry:
	rsp = fp
	// succ:  l0000000000463780
l0000000000463780:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497050<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046D7B0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046379F_thunk_fn0000000000475550
l000000000046379F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000463780_exit
fn0000000000463780_exit:


// fn00000000004637B0
// Return size: 0
define fn00000000004637B0
fn00000000004637B0_entry:
	rsp = fp
	// succ:  l00000000004637B0
l00000000004637B0:
	rax = 0x0000000000497050<p64>
	Mem0[rcx:word64] = rax
	// succ:  l00000000004637BA_thunk_fn000000000046D7B0
l00000000004637BA_thunk_fn000000000046D7B0:
	call fn000000000046D7B0 (retsize: 0;)
	return
	// succ:  fn00000000004637B0_exit
fn00000000004637B0_exit:


// fn00000000004637C0
// Return size: 0
define fn00000000004637C0
fn00000000004637C0_entry:
	rsp = fp
	// succ:  l00000000004637C0
l00000000004637C0:
	rax = 0x0000000000497050<p64>
	Mem0[rcx:word64] = rax
	// succ:  l00000000004637CA_thunk_fn000000000046D7B0
l00000000004637CA_thunk_fn000000000046D7B0:
	call fn000000000046D7B0 (retsize: 0;)
	return
	// succ:  fn00000000004637C0_exit
fn00000000004637C0_exit:


// fn00000000004637D0
// Return size: 8
define fn00000000004637D0
fn00000000004637D0_entry:
	rsp = fp
	// succ:  l00000000004637D0
l00000000004637D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbp = rdx
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rbx = rcx
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497ED0<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046D7F0 (retsize: 8;)
	rax = 0x0000000000497090<p64>
	rdi = 0x000000000048DEAA<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l000000000046381B
l000000000046381B:
	branch rcx == 0<64> l000000000046381D
	// succ:  l000000000046381B_1 l000000000046381D
l000000000046381B_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000046381B
	// succ:  l000000000046381D l000000000046381B
l000000000046381D:
	branch Test(EQ,Z) l0000000000463832
	// succ:  l000000000046381F l0000000000463832
l000000000046381F:
	rdi = 0x000000000048DEAC<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l000000000046382E
l000000000046382E:
	branch rcx == 0<64> l0000000000463830
	// succ:  l000000000046382E_2 l0000000000463830
l000000000046382E_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000046382E
	// succ:  l0000000000463830 l000000000046382E
l0000000000463830:
	branch Test(NE,Z) l0000000000463840
	// succ:  l0000000000463832 l0000000000463840
l0000000000463832:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004637D0_exit
l0000000000463840:
	rsi = rsp + 0x28<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rdx = Mem0[rsp + 0x28<64>:word64]
	rcx = rbx
	call fn000000000046D7F0 (retsize: 8;)
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004637D0_exit
fn00000000004637D0_exit:


// fn00000000004638A0
// Return size: 8
define fn00000000004638A0
fn00000000004638A0_entry:
	rsp = fp
	// succ:  l00000000004638A0
l00000000004638A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbp = rdx
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rbx = rcx
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497ED0<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046D7F0 (retsize: 8;)
	rax = 0x0000000000497090<p64>
	rdi = 0x000000000048DEAA<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l00000000004638EB
l00000000004638EB:
	branch rcx == 0<64> l00000000004638ED
	// succ:  l00000000004638EB_1 l00000000004638ED
l00000000004638EB_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l00000000004638EB
	// succ:  l00000000004638ED l00000000004638EB
l00000000004638ED:
	branch Test(EQ,Z) l0000000000463902
	// succ:  l00000000004638EF l0000000000463902
l00000000004638EF:
	rdi = 0x000000000048DEAC<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l00000000004638FE
l00000000004638FE:
	branch rcx == 0<64> l0000000000463900
	// succ:  l00000000004638FE_2 l0000000000463900
l00000000004638FE_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l00000000004638FE
	// succ:  l0000000000463900 l00000000004638FE
l0000000000463900:
	branch Test(NE,Z) l0000000000463910
	// succ:  l0000000000463902 l0000000000463910
l0000000000463902:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004638A0_exit
l0000000000463910:
	rsi = rsp + 0x28<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rdx = Mem0[rsp + 0x28<64>:word64]
	rcx = rbx
	call fn000000000046D7F0 (retsize: 8;)
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004638A0_exit
fn00000000004638A0_exit:


// fn0000000000463970
// Return size: 0
define fn0000000000463970
fn0000000000463970_entry:
	rsp = fp
	// succ:  l0000000000463970
l0000000000463970:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497090<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046DB20 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046398F_thunk_fn0000000000475550
l000000000046398F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000463970_exit
fn0000000000463970_exit:


// fn00000000004639A0
// Return size: 0
define fn00000000004639A0
fn00000000004639A0_entry:
	rsp = fp
	// succ:  l00000000004639A0
l00000000004639A0:
	rax = 0x0000000000497090<p64>
	Mem0[rcx:word64] = rax
	// succ:  l00000000004639AA_thunk_fn000000000046DB20
l00000000004639AA_thunk_fn000000000046DB20:
	call fn000000000046DB20 (retsize: 0;)
	return
	// succ:  fn00000000004639A0_exit
fn00000000004639A0_exit:


// fn00000000004639B0
// Return size: 0
define fn00000000004639B0
fn00000000004639B0_entry:
	rsp = fp
	// succ:  l00000000004639B0
l00000000004639B0:
	rax = 0x0000000000497090<p64>
	Mem0[rcx:word64] = rax
	// succ:  l00000000004639BA_thunk_fn000000000046DB20
l00000000004639BA_thunk_fn000000000046DB20:
	call fn000000000046DB20 (retsize: 0;)
	return
	// succ:  fn00000000004639B0_exit
fn00000000004639B0_exit:


// fn00000000004639C0
// Return size: 8
define fn00000000004639C0
fn00000000004639C0_entry:
	rsp = fp
	// succ:  l00000000004639C0
l00000000004639C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbp = rdx
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rbx = rcx
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497F50<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046DB70 (retsize: 8;)
	rax = 0x0000000000497110<p64>
	rdi = 0x000000000048DB5A<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l0000000000463A0B
l0000000000463A0B:
	branch rcx == 0<64> l0000000000463A0D
	// succ:  l0000000000463A0B_1 l0000000000463A0D
l0000000000463A0B_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000463A0B
	// succ:  l0000000000463A0D l0000000000463A0B
l0000000000463A0D:
	branch Test(EQ,Z) l0000000000463A22
	// succ:  l0000000000463A0F l0000000000463A22
l0000000000463A0F:
	rdi = 0x000000000048DB5C<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l0000000000463A1E
l0000000000463A1E:
	branch rcx == 0<64> l0000000000463A20
	// succ:  l0000000000463A1E_2 l0000000000463A20
l0000000000463A1E_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000463A1E
	// succ:  l0000000000463A20 l0000000000463A1E
l0000000000463A20:
	branch Test(NE,Z) l0000000000463A30
	// succ:  l0000000000463A22 l0000000000463A30
l0000000000463A22:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004639C0_exit
l0000000000463A30:
	rsi = rsp + 0x28<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rdx = Mem0[rsp + 0x28<64>:word64]
	rcx = rbx
	call fn000000000046DB70 (retsize: 8;)
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004639C0_exit
fn00000000004639C0_exit:


// fn0000000000463A90
// Return size: 8
define fn0000000000463A90
fn0000000000463A90_entry:
	rsp = fp
	// succ:  l0000000000463A90
l0000000000463A90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbp = rdx
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rbx = rcx
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497F50<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046DB70 (retsize: 8;)
	rax = 0x0000000000497110<p64>
	rdi = 0x000000000048DB5A<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l0000000000463ADB
l0000000000463ADB:
	branch rcx == 0<64> l0000000000463ADD
	// succ:  l0000000000463ADB_1 l0000000000463ADD
l0000000000463ADB_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000463ADB
	// succ:  l0000000000463ADD l0000000000463ADB
l0000000000463ADD:
	branch Test(EQ,Z) l0000000000463AF2
	// succ:  l0000000000463ADF l0000000000463AF2
l0000000000463ADF:
	rdi = 0x000000000048DB5C<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l0000000000463AEE
l0000000000463AEE:
	branch rcx == 0<64> l0000000000463AF0
	// succ:  l0000000000463AEE_2 l0000000000463AF0
l0000000000463AEE_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000463AEE
	// succ:  l0000000000463AF0 l0000000000463AEE
l0000000000463AF0:
	branch Test(NE,Z) l0000000000463B00
	// succ:  l0000000000463AF2 l0000000000463B00
l0000000000463AF2:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000463A90_exit
l0000000000463B00:
	rsi = rsp + 0x28<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rdx = Mem0[rsp + 0x28<64>:word64]
	rcx = rbx
	call fn000000000046DB70 (retsize: 8;)
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000463A90_exit
fn0000000000463A90_exit:


// fn0000000000463B60
// Return size: 0
define fn0000000000463B60
fn0000000000463B60_entry:
	rsp = fp
	// succ:  l0000000000463B60
l0000000000463B60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497110<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046DEA0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000463B7F_thunk_fn0000000000475550
l0000000000463B7F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000463B60_exit
fn0000000000463B60_exit:


// fn0000000000463B90
// Return size: 0
define fn0000000000463B90
fn0000000000463B90_entry:
	rsp = fp
	// succ:  l0000000000463B90
l0000000000463B90:
	rax = 0x0000000000497110<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000463B9A_thunk_fn000000000046DEA0
l0000000000463B9A_thunk_fn000000000046DEA0:
	call fn000000000046DEA0 (retsize: 0;)
	return
	// succ:  fn0000000000463B90_exit
fn0000000000463B90_exit:


// fn0000000000463BA0
// Return size: 0
define fn0000000000463BA0
fn0000000000463BA0_entry:
	rsp = fp
	// succ:  l0000000000463BA0
l0000000000463BA0:
	rax = 0x0000000000497110<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000463BAA_thunk_fn000000000046DEA0
l0000000000463BAA_thunk_fn000000000046DEA0:
	call fn000000000046DEA0 (retsize: 0;)
	return
	// succ:  fn0000000000463BA0_exit
fn0000000000463BA0_exit:


// fn0000000000463BB0
// Return size: 8
define fn0000000000463BB0
fn0000000000463BB0_entry:
	rsp = fp
	// succ:  l0000000000463BB0
l0000000000463BB0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497190<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn0000000000463BB0_exit
fn0000000000463BB0_exit:


// fn0000000000463BD0
// Return size: 8
define fn0000000000463BD0
fn0000000000463BD0_entry:
	rsp = fp
	// succ:  l0000000000463BD0
l0000000000463BD0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497190<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn0000000000463BD0_exit
fn0000000000463BD0_exit:


// fn0000000000463BF0
// Return size: 0
define fn0000000000463BF0
fn0000000000463BF0_entry:
	rsp = fp
	// succ:  l0000000000463BF0
l0000000000463BF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497FD0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000463C0F_thunk_fn0000000000475550
l0000000000463C0F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000463BF0_exit
fn0000000000463BF0_exit:


// fn0000000000463C20
// Return size: 0
define fn0000000000463C20
fn0000000000463C20_entry:
	rsp = fp
	// succ:  l0000000000463C20
l0000000000463C20:
	rax = 0x0000000000497FD0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000463C2A_thunk_fn000000000046AD20
l0000000000463C2A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000463C20_exit
fn0000000000463C20_exit:


// fn0000000000463C30
// Return size: 0
define fn0000000000463C30
fn0000000000463C30_entry:
	rsp = fp
	// succ:  l0000000000463C30
l0000000000463C30:
	rax = 0x0000000000497FD0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000463C3A_thunk_fn000000000046AD20
l0000000000463C3A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000463C30_exit
fn0000000000463C30_exit:


// fn0000000000463C40
// Return size: 8
define fn0000000000463C40
fn0000000000463C40_entry:
	rsp = fp
	// succ:  l0000000000463C40
l0000000000463C40:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497210<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn0000000000463C40_exit
fn0000000000463C40_exit:


// fn0000000000463C60
// Return size: 8
define fn0000000000463C60
fn0000000000463C60_entry:
	rsp = fp
	// succ:  l0000000000463C60
l0000000000463C60:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497210<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn0000000000463C60_exit
fn0000000000463C60_exit:


// fn0000000000463C80
// Return size: 0
define fn0000000000463C80
fn0000000000463C80_entry:
	rsp = fp
	// succ:  l0000000000463C80
l0000000000463C80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000498050<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000463C9F_thunk_fn0000000000475550
l0000000000463C9F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000463C80_exit
fn0000000000463C80_exit:


// fn0000000000463CB0
// Return size: 8
define fn0000000000463CB0
fn0000000000463CB0_entry:
	rsp = fp
	// succ:  l0000000000463CB0
l0000000000463CB0:
	rax = 0x0000000000498050<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000463CBA_thunk_fn000000000046AD20
l0000000000463CBA_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000463CB0_exit
fn0000000000463CB0_exit:


// fn0000000000463CC0
// Return size: 0
define fn0000000000463CC0
fn0000000000463CC0_entry:
	rsp = fp
	// succ:  l0000000000463CC0
l0000000000463CC0:
	rax = 0x0000000000498050<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000463CCA_thunk_fn000000000046AD20
l0000000000463CCA_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000463CC0_exit
fn0000000000463CC0_exit:


// fn0000000000463CD0
// Return size: 8
define fn0000000000463CD0
fn0000000000463CD0_entry:
	rsp = fp
	// succ:  l0000000000463CD0
l0000000000463CD0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497290<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn0000000000463CD0_exit
fn0000000000463CD0_exit:


// fn0000000000463CF0
// Return size: 8
define fn0000000000463CF0
fn0000000000463CF0_entry:
	rsp = fp
	// succ:  l0000000000463CF0
l0000000000463CF0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497290<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn0000000000463CF0_exit
fn0000000000463CF0_exit:


// fn0000000000463D10
// Return size: 0
define fn0000000000463D10
fn0000000000463D10_entry:
	rsp = fp
	// succ:  l0000000000463D10
l0000000000463D10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x00000000004980D0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000463D2F_thunk_fn0000000000475550
l0000000000463D2F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000463D10_exit
fn0000000000463D10_exit:


// fn0000000000463D40
// Return size: 0
define fn0000000000463D40
fn0000000000463D40_entry:
	rsp = fp
	// succ:  l0000000000463D40
l0000000000463D40:
	rax = 0x00000000004980D0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000463D4A_thunk_fn000000000046AD20
l0000000000463D4A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000463D40_exit
fn0000000000463D40_exit:


// fn0000000000463D50
// Return size: 0
define fn0000000000463D50
fn0000000000463D50_entry:
	rsp = fp
	// succ:  l0000000000463D50
l0000000000463D50:
	rax = 0x00000000004980D0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000463D5A_thunk_fn000000000046AD20
l0000000000463D5A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000463D50_exit
fn0000000000463D50_exit:


// fn0000000000463D60
// Return size: 8
define fn0000000000463D60
fn0000000000463D60_entry:
	rsp = fp
	// succ:  l0000000000463D60
l0000000000463D60:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004972D0<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn0000000000463D60_exit
fn0000000000463D60_exit:


// fn0000000000463D80
// Return size: 8
define fn0000000000463D80
fn0000000000463D80_entry:
	rsp = fp
	// succ:  l0000000000463D80
l0000000000463D80:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004972D0<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn0000000000463D80_exit
fn0000000000463D80_exit:


// fn0000000000463DA0
// Return size: 0
define fn0000000000463DA0
fn0000000000463DA0_entry:
	rsp = fp
	// succ:  l0000000000463DA0
l0000000000463DA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000498110<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000463DBF_thunk_fn0000000000475550
l0000000000463DBF_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000463DA0_exit
fn0000000000463DA0_exit:


// fn0000000000463DD0
// Return size: 0
define fn0000000000463DD0
fn0000000000463DD0_entry:
	rsp = fp
	// succ:  l0000000000463DD0
l0000000000463DD0:
	rax = 0x0000000000498110<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000463DDA_thunk_fn000000000046AD20
l0000000000463DDA_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000463DD0_exit
fn0000000000463DD0_exit:


// fn0000000000463DE0
// Return size: 0
define fn0000000000463DE0
fn0000000000463DE0_entry:
	rsp = fp
	// succ:  l0000000000463DE0
l0000000000463DE0:
	rax = 0x0000000000498110<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000463DEA_thunk_fn000000000046AD20
l0000000000463DEA_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000463DE0_exit
fn0000000000463DE0_exit:


// fn0000000000463DF0
// Return size: 8
define fn0000000000463DF0
fn0000000000463DF0_entry:
	rsp = fp
	// succ:  l0000000000463DF0
l0000000000463DF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn000000000045F390 (retsize: 8;)
	rax = 0x0000000000497310<p64>
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000463DF0_exit
fn0000000000463DF0_exit:


// fn0000000000463E10
// Return size: 0
define fn0000000000463E10
fn0000000000463E10_entry:
	rsp = fp
	// succ:  l0000000000463E10
l0000000000463E10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497310<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000045F3F0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000463E2F_thunk_fn0000000000475550
l0000000000463E2F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000463E10_exit
fn0000000000463E10_exit:


// fn0000000000463E40
// Return size: 8
define fn0000000000463E40
fn0000000000463E40_entry:
	rsp = fp
	// succ:  l0000000000463E40
l0000000000463E40:
	rax = 0x0000000000497310<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000463E4A_thunk_fn000000000045F3F0
l0000000000463E4A_thunk_fn000000000045F3F0:
	call fn000000000045F3F0 (retsize: 0;)
	return
	// succ:  fn0000000000463E40_exit
fn0000000000463E40_exit:


// fn0000000000463E50
// Return size: 8
define fn0000000000463E50
fn0000000000463E50_entry:
	rsp = fp
	// succ:  l0000000000463E50
l0000000000463E50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xA8<64>
	SCZO = cond(rsp)
	rbp = 0x000000000043BFA0<p64>
	Mem0[rcx + 0x88<64>:byte] = 1<8>
	rbx = rcx
	rcx = rdx
	r13 = rdx
	call fn0000000000473440 (retsize: 8;)
	rsi = rax
	rax = Mem0[rax:word64]
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000464240
	// succ:  l0000000000463E92 l0000000000464240
l0000000000463E92:
	rax = Mem0[rsi + 0x10<64>:word64]
	rcx = rsp + 0x40<64>
	r8 = rsp + 0x3A<64>
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000463EA9
l0000000000463EA9:
	rcx = Mem0[rsp + 0x40<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000464310
	// succ:  l0000000000463EC8 l0000000000464310
l0000000000463EC8:
	rcx = Mem0[rbx + 0x18<64>:word64]
	call fn0000000000475560 (retsize: 8;)
	rdi = rax
	rax = Mem0[rsi:word64]
	r12 = Mem0[rbx + 0x18<64>:word64]
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000464250
	// succ:  l0000000000463EE8 l0000000000464250
l0000000000463EE8:
	rax = Mem0[rsi + 0x10<64>:word64]
	rbp = rsp + 0x50<64>
	r8 = rsp + 0x3B<64>
	rcx = rbp
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000463F02
l0000000000463F02:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = r12
	rdx = rdi
	rcx = rbp
	call fn00000000004286D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0x50<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004642F0
	// succ:  l0000000000463F2A l00000000004642F0
l0000000000463F2A:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbx + 0x18<64>:word64] - 0<64>)
	Mem0[rbx + 0x10<64>:word64] = rdi
	branch Test(EQ,Z) l0000000000463F42
	// succ:  l0000000000463F37 l0000000000463F42
l0000000000463F37:
	eax = CONVERT(Mem0[rdi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 0x7D<8>)
	al = CONVERT(Test(ULE,CZ), bool, int8)
	// succ:  l0000000000463F42
l0000000000463F42:
	Mem0[rbx + 0x20<64>:byte] = al
	rax = Mem0[rsi:word64]
	rbp = 0x000000000043BFD0<p64>
	rax = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000464274
	// succ:  l0000000000463F5C l0000000000464274
l0000000000463F5C:
	rax = Mem0[rsi + 0x10<64>:word64]
	rcx = rsp + 0x60<64>
	r8 = rsp + 0x3C<64>
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000463F73
l0000000000463F73:
	rcx = Mem0[rsp + 0x60<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x30<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000464283
	// succ:  l0000000000463F92 l0000000000464283
l0000000000463F92:
	rcx = Mem0[rbx + 0x30<64>:word64]
	call fn0000000000475560 (retsize: 8;)
	r12 = rax
	rax = Mem0[rsi:word64]
	r14 = Mem0[rbx + 0x30<64>:word64]
	rax = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000464262
	// succ:  l0000000000463FB2 l0000000000464262
l0000000000463FB2:
	rax = Mem0[rsi + 0x10<64>:word64]
	rbp = rsp + 0x70<64>
	r8 = rsp + 0x3D<64>
	rcx = rbp
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000463FCC
l0000000000463FCC:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = r14
	rdx = r12
	rcx = rbp
	call fn00000000004286D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0x70<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004642D1
	// succ:  l0000000000463FF4 l00000000004642D1
l0000000000463FF4:
	rax = Mem0[rsi:word64]
	Mem0[rbx + 0x28<64>:word64] = r12
	r14 = 0x000000000043C000<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - r14)
	branch Test(NE,Z) l0000000000464205
	// succ:  l000000000046400F l0000000000464205
l000000000046400F:
	rax = Mem0[rsi + 0x10<64>:word64]
	r15 = rsp + 0x80<64>
	r8 = rsp + 0x3E<64>
	rcx = r15
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l000000000046402C
l000000000046402C:
	rcx = Mem0[rsp + 0x80<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x40<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004642A0
	// succ:  l000000000046404E l00000000004642A0
l000000000046404E:
	rcx = Mem0[rbx + 0x40<64>:word64]
	call fn0000000000475560 (retsize: 8;)
	rbp = rax
	rax = Mem0[rbx + 0x40<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsi:word64]
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - r14)
	branch Test(NE,Z) l00000000004641F0
	// succ:  l0000000000464073 l00000000004641F0
l0000000000464073:
	rax = Mem0[rsi + 0x10<64>:word64]
	r14 = rsp + 0x90<64>
	r8 = rsp + 0x3F<64>
	rcx = r14
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000464090
l0000000000464090:
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rdx = rbp
	rcx = r14
	call fn00000000004286D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0x90<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004642C0
	// succ:  l00000000004640BD l00000000004642C0
l00000000004640BD:
	rax = Mem0[rsi:word64]
	Mem0[rbx + 0x38<64>:word64] = rbp
	rdx = 0x000000000043C090<p64>
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000464230
	// succ:  l00000000004640D8 l0000000000464230
l00000000004640D8:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x48<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004640E0
l00000000004640E0:
	Mem0[rbx + 0x48<64>:byte] = al
	rax = Mem0[rsi:word64]
	rdx = 0x000000000043C0A0<p64>
	rax = Mem0[rax + 0x18<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000464220
	// succ:  l00000000004640FA l0000000000464220
l00000000004640FA:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x49<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000464102
l0000000000464102:
	Mem0[rbx + 0x49<64>:byte] = al
	rcx = r13
	call fn0000000000472FC0 (retsize: 8;)
	rsi = rax
	rax = Mem0[0x00000000004916F0<p64>:word64]
	r14 = rbx + 0x4A<64>
	r13 = Mem0[rax:word64]
	eax = CONVERT(Mem0[rsi + 0x38<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 1<8>)
	branch Test(EQ,Z) l0000000000464145
	// succ:  l0000000000464126 l0000000000464145
l0000000000464126:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004641D4
	// succ:  l000000000046412E l00000000004641D4
l000000000046412E:
	rax = Mem0[rsi:word64]
	rdx = 0x000000000042B5D0<p64>
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000464344
	// succ:  l0000000000464145 l0000000000464344
l0000000000464145:
	rax = Mem0[r13 + 0<64>:word64]
	Mem0[rbx + 0x4A<64>:word64] = rax
	rax = Mem0[r13 + 8<64>:word64]
	Mem0[r14 + 8<64>:word64] = rax
	rax = Mem0[r13 + 0x10<64>:word64]
	Mem0[r14 + 0x10<64>:word64] = rax
	rax = Mem0[r13 + 0x18<64>:word64]
	Mem0[r14 + 0x18<64>:word64] = rax
	eax = Mem0[r13 + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[r14 + 0x20<64>:word32] = eax
	// succ:  l000000000046416D
l000000000046416D:
	rax = Mem0[0x00000000004916E0<p64>:word64]
	r14 = rbx + 0x6E<64>
	r13 = Mem0[rax:word64]
	eax = CONVERT(Mem0[rsi + 0x38<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 1<8>)
	branch Test(EQ,Z) l000000000046419E
	// succ:  l0000000000464183 l000000000046419E
l0000000000464183:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004641E1
	// succ:  l0000000000464187 l00000000004641E1
l0000000000464187:
	rax = Mem0[rsi:word64]
	rdx = 0x000000000042B5D0<p64>
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000464330
	// succ:  l000000000046419E l0000000000464330
l000000000046419E:
	rax = Mem0[r13 + 0<64>:word64]
	Mem0[rbx + 0x6E<64>:word64] = rax
	rax = Mem0[r13 + 8<64>:word64]
	Mem0[r14 + 8<64>:word64] = rax
	rax = Mem0[r13 + 0x10<64>:word64]
	Mem0[r14 + 0x10<64>:word64] = rax
	eax = CONVERT(Mem0[r13 + 0x18<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r14 + 0x18<64>:word16] = ax
	// succ:  l00000000004641C0
l00000000004641C0:
	rsp = rsp + 0xA8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000463E50_exit
l00000000004641D4:
	rcx = rsi
	call fn000000000042B320 (retsize: 8;)
	goto l000000000046412E
	// succ:  l000000000046412E
l00000000004641E1:
	rcx = rsi
	call fn000000000042B320 (retsize: 8;)
	goto l0000000000464187
	// succ:  l0000000000464187
l00000000004641F0:
	r14 = rsp + 0x90<64>
	rdx = rsi
	rcx = r14
	call rax (retsize: 8;)
	goto l0000000000464090
	// succ:  l0000000000464090
l0000000000464205:
	r15 = rsp + 0x80<64>
	rdx = rsi
	rcx = r15
	call rax (retsize: 8;)
	goto l000000000046402C
	// succ:  l000000000046402C
l0000000000464220:
	rcx = rsi
	call rax (retsize: 8;)
	goto l0000000000464102
	// succ:  l0000000000464102
l0000000000464230:
	rcx = rsi
	call rax (retsize: 8;)
	goto l00000000004640E0
	// succ:  l00000000004640E0
l0000000000464240:
	rcx = rsp + 0x40<64>
	rdx = rsi
	call rax (retsize: 8;)
	goto l0000000000463EA9
	// succ:  l0000000000463EA9
l0000000000464250:
	rbp = rsp + 0x50<64>
	rdx = rsi
	rcx = rbp
	call rax (retsize: 8;)
	goto l0000000000463F02
	// succ:  l0000000000463F02
l0000000000464262:
	rbp = rsp + 0x70<64>
	rdx = rsi
	rcx = rbp
	call rax (retsize: 8;)
	goto l0000000000463FCC
	// succ:  l0000000000463FCC
l0000000000464274:
	rcx = rsp + 0x60<64>
	rdx = rsi
	call rax (retsize: 8;)
	goto l0000000000463F73
	// succ:  l0000000000463F73
l0000000000464283:
	rdx = rsp + 0x90<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000463F92
	// succ:  l0000000000463F92
l00000000004642A0:
	rdx = rsp + 0x90<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l000000000046404E
	// succ:  l000000000046404E
l00000000004642C0:
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	rdx = r15
	call fn0000000000450A50 (retsize: 8;)
	goto l00000000004640BD
	// succ:  l00000000004640BD
l00000000004642D1:
	rdx = rsp + 0x90<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000463FF4
	// succ:  l0000000000463FF4
l00000000004642F0:
	rdx = rsp + 0x90<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000463F2A
	// succ:  l0000000000463F2A
l0000000000464310:
	rdx = rsp + 0x90<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000463EC8
	// succ:  l0000000000463EC8
l0000000000464330:
	r9 = r14
	r8 = r13 + 0x1A<64>
	rdx = r13
	rcx = rsi
	call rax (retsize: 8;)
	goto l00000000004641C0
	// succ:  l00000000004641C0
l0000000000464344:
	r9 = r14
	r8 = r13 + 0x24<64>
	rdx = r13
	rcx = rsi
	call rax (retsize: 8;)
	goto l000000000046416D
	// succ:  l000000000046416D
fn0000000000463E50_exit:


// fn0000000000464430
// Return size: 8
define fn0000000000464430
fn0000000000464430_entry:
	rsp = fp
	// succ:  l0000000000464430
l0000000000464430:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 0x20<64>:byte] = 0<8>
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497350<p64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx + 0x38<64>:word64] = 0<64>
	Mem0[rcx + 0x40<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	Mem0[rcx + 0x48<64>:byte] = 0<8>
	Mem0[rcx + 0x49<64>:byte] = 0<8>
	Mem0[rcx + 0x88<64>:byte] = 0<8>
	return
	// succ:  fn0000000000464430_exit
fn0000000000464430_exit:


// fn0000000000464490
// Return size: 8
define fn0000000000464490
fn0000000000464490_entry:
	rsp = fp
	// succ:  l0000000000464490
l0000000000464490:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 0x20<64>:byte] = 0<8>
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497350<p64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx + 0x38<64>:word64] = 0<64>
	Mem0[rcx + 0x40<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	Mem0[rcx + 0x48<64>:byte] = 0<8>
	Mem0[rcx + 0x49<64>:byte] = 0<8>
	Mem0[rcx + 0x88<64>:byte] = 0<8>
	return
	// succ:  fn0000000000464490_exit
fn0000000000464490_exit:


// fn00000000004644F0
// Return size: 0
define fn00000000004644F0
fn00000000004644F0_entry:
	rsp = fp
	// succ:  l00000000004644F0
l00000000004644F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000464510 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000464505_thunk_fn0000000000475550
l0000000000464505_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn00000000004644F0_exit
fn00000000004644F0_exit:


// fn0000000000464510
// Return size: 0
define fn0000000000464510
fn0000000000464510_entry:
	rsp = fp
	// succ:  l0000000000464510
l0000000000464510:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0x88<64>:byte] - 0<8>)
	rax = 0x0000000000497350<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	branch Test(EQ,Z) l0000000000464555
	// succ:  l000000000046452B l0000000000464555
l000000000046452B:
	rcx = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000464539
	// succ:  l0000000000464534 l0000000000464539
l0000000000464534:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000464539
l0000000000464539:
	rcx = Mem0[rbx + 0x28<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000464547
	// succ:  l0000000000464542 l0000000000464547
l0000000000464542:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000464547
l0000000000464547:
	rcx = Mem0[rbx + 0x38<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000464555
	// succ:  l0000000000464550 l0000000000464555
l0000000000464550:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000464555
l0000000000464555:
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046455D_thunk_fn000000000046AD20
l000000000046455D_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000464510_exit
fn0000000000464510_exit:


// fn0000000000464570
// Return size: 0
define fn0000000000464570
fn0000000000464570_entry:
	rsp = fp
	// succ:  l0000000000464570
l0000000000464570:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0x88<64>:byte] - 0<8>)
	rax = 0x0000000000497350<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	branch Test(EQ,Z) l00000000004645B5
	// succ:  l000000000046458B l00000000004645B5
l000000000046458B:
	rcx = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000464599
	// succ:  l0000000000464594 l0000000000464599
l0000000000464594:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000464599
l0000000000464599:
	rcx = Mem0[rbx + 0x28<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004645A7
	// succ:  l00000000004645A2 l00000000004645A7
l00000000004645A2:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l00000000004645A7
l00000000004645A7:
	rcx = Mem0[rbx + 0x38<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004645B5
	// succ:  l00000000004645B0 l00000000004645B5
l00000000004645B0:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l00000000004645B5
l00000000004645B5:
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004645BD_thunk_fn000000000046AD20
l00000000004645BD_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000464570_exit
fn0000000000464570_exit:


// fn00000000004645D0
// Return size: 8
define fn00000000004645D0
fn00000000004645D0_entry:
	rsp = fp
	// succ:  l00000000004645D0
l00000000004645D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xA8<64>
	SCZO = cond(rsp)
	rbp = 0x000000000043C1A0<p64>
	Mem0[rcx + 0xC8<64>:byte] = 1<8>
	rbx = rcx
	rcx = rdx
	r13 = rdx
	call fn00000000004734A0 (retsize: 8;)
	rsi = rax
	rax = Mem0[rax:word64]
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000464911
	// succ:  l0000000000464612 l0000000000464911
l0000000000464612:
	rax = Mem0[rsi + 0x10<64>:word64]
	rcx = rsp + 0x40<64>
	r8 = rsp + 0x3A<64>
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000464629
l0000000000464629:
	rcx = Mem0[rsp + 0x40<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004649A3
	// succ:  l0000000000464648 l00000000004649A3
l0000000000464648:
	rcx = Mem0[rbx + 0x18<64>:word64]
	call fn0000000000475560 (retsize: 8;)
	rdi = rax
	rax = Mem0[rsi:word64]
	r12 = Mem0[rbx + 0x18<64>:word64]
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000464991
	// succ:  l0000000000464668 l0000000000464991
l0000000000464668:
	rax = Mem0[rsi + 0x10<64>:word64]
	rbp = rsp + 0x50<64>
	r8 = rsp + 0x3B<64>
	rcx = rbp
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000464682
l0000000000464682:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = r12
	rdx = rdi
	rcx = rbp
	call fn00000000004286D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0x50<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000464A11
	// succ:  l00000000004646AA l0000000000464A11
l00000000004646AA:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbx + 0x18<64>:word64] - 0<64>)
	Mem0[rbx + 0x10<64>:word64] = rdi
	branch Test(EQ,Z) l00000000004646C2
	// succ:  l00000000004646B7 l00000000004646C2
l00000000004646B7:
	eax = CONVERT(Mem0[rdi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 0x7D<8>)
	al = CONVERT(Test(ULE,CZ), bool, int8)
	// succ:  l00000000004646C2
l00000000004646C2:
	Mem0[rbx + 0x20<64>:byte] = al
	rax = Mem0[rsi:word64]
	rbp = 0x000000000043C1D0<p64>
	rax = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000464982
	// succ:  l00000000004646DC l0000000000464982
l00000000004646DC:
	rax = Mem0[rsi + 0x10<64>:word64]
	rcx = rsp + 0x60<64>
	r8 = rsp + 0x3C<64>
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	// succ:  l00000000004646F3
l00000000004646F3:
	rcx = Mem0[rsp + 0x60<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x30<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000464A30
	// succ:  l0000000000464712 l0000000000464A30
l0000000000464712:
	rdx = Mem0[rbx + 0x30<64>:word64]
	rcx = 0x3F80000000000000<64>
	rax = rdx + rdx
	SCZO = cond(rdx - rcx)
	rcx = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(UGT,CZ) l0000000000464732
	// succ:  l000000000046472E_1 l0000000000464732
l000000000046472E_1:
	rcx = rax
	// succ:  l0000000000464732
l0000000000464732:
	call fn0000000000475560 (retsize: 8;)
	r12 = rax
	rax = Mem0[rsi:word64]
	r14 = Mem0[rbx + 0x30<64>:word64]
	rax = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000464970
	// succ:  l000000000046474E l0000000000464970
l000000000046474E:
	rax = Mem0[rsi + 0x10<64>:word64]
	rbp = rsp + 0x70<64>
	r8 = rsp + 0x3D<64>
	rcx = rbp
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	// succ:  l0000000000464768
l0000000000464768:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = r14
	rdx = r12
	rcx = rbp
	call fn00000000004277C0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0x70<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004649E0
	// succ:  l0000000000464790 l00000000004649E0
l0000000000464790:
	rax = Mem0[rsi:word64]
	Mem0[rbx + 0x28<64>:word64] = r12
	r14 = 0x000000000043C200<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - r14)
	branch Test(NE,Z) l0000000000464955
	// succ:  l00000000004647AB l0000000000464955
l00000000004647AB:
	rax = Mem0[rsi + 0x10<64>:word64]
	r15 = rsp + 0x80<64>
	r8 = rsp + 0x3E<64>
	rcx = r15
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	// succ:  l00000000004647C8
l00000000004647C8:
	rcx = Mem0[rsp + 0x80<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x40<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004649C0
	// succ:  l00000000004647EA l00000000004649C0
l00000000004647EA:
	rdx = Mem0[rbx + 0x40<64>:word64]
	rcx = 0x3F80000000000000<64>
	rax = rdx + rdx
	SCZO = cond(rdx - rcx)
	rcx = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(UGT,CZ) l000000000046480A
	// succ:  l0000000000464806_1 l000000000046480A
l0000000000464806_1:
	rcx = rax
	// succ:  l000000000046480A
l000000000046480A:
	call fn0000000000475560 (retsize: 8;)
	rbp = rax
	rax = Mem0[rbx + 0x40<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rsi:word64]
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - r14)
	branch Test(NE,Z) l0000000000464940
	// succ:  l000000000046482B l0000000000464940
l000000000046482B:
	rax = Mem0[rsi + 0x10<64>:word64]
	r14 = rsp + 0x90<64>
	r8 = rsp + 0x3F<64>
	rcx = r14
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	// succ:  l0000000000464848
l0000000000464848:
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rdx = rbp
	rcx = r14
	call fn00000000004277C0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0x90<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000464A00
	// succ:  l0000000000464875 l0000000000464A00
l0000000000464875:
	rdx = Mem0[rsi:word64]
	Mem0[rbx + 0x38<64>:word64] = rbp
	rcx = 0x000000000043C290<p64>
	rax = Mem0[rdx + 0x10<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000464930
	// succ:  l0000000000464890 l0000000000464930
l0000000000464890:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x48<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000464898
l0000000000464898:
	Mem0[rbx + 0x48<64>:word16] = ax
	rax = Mem0[rdx + 0x18<64>:word64]
	rdx = 0x000000000043C2A0<p64>
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000464920
	// succ:  l00000000004648AC l0000000000464920
l00000000004648AC:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x4A<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004648B4
l00000000004648B4:
	Mem0[rbx + 0x4A<64>:word16] = ax
	rcx = r13
	call fn0000000000473020 (retsize: 8;)
	rsi = rax
	rax = Mem0[0x00000000004916F0<p64>:word64]
	r9 = rbx + 0x4C<64>
	rcx = rsi
	rdx = Mem0[rax:word64]
	rax = Mem0[rsi:word64]
	r8 = rdx + 0x24<64>
	call Mem0[rax + 0x58<64>:word64] (retsize: 8;)
	rax = Mem0[0x00000000004916E0<p64>:word64]
	r9 = rbx + 0x94<64>
	rcx = rsi
	rdx = Mem0[rax:word64]
	rax = Mem0[rsi:word64]
	r8 = rdx + 0x1A<64>
	call Mem0[rax + 0x58<64>:word64] (retsize: 8;)
	rsp = rsp + 0xA8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004645D0_exit
l0000000000464911:
	rcx = rsp + 0x40<64>
	rdx = rsi
	call rax (retsize: 8;)
	goto l0000000000464629
	// succ:  l0000000000464629
l0000000000464920:
	rcx = rsi
	call rax (retsize: 8;)
	goto l00000000004648B4
	// succ:  l00000000004648B4
l0000000000464930:
	rcx = rsi
	call rax (retsize: 8;)
	rdx = Mem0[rsi:word64]
	goto l0000000000464898
	// succ:  l0000000000464898
l0000000000464940:
	r14 = rsp + 0x90<64>
	rdx = rsi
	rcx = r14
	call rax (retsize: 8;)
	goto l0000000000464848
	// succ:  l0000000000464848
l0000000000464955:
	r15 = rsp + 0x80<64>
	rdx = rsi
	rcx = r15
	call rax (retsize: 8;)
	goto l00000000004647C8
	// succ:  l00000000004647C8
l0000000000464970:
	rbp = rsp + 0x70<64>
	rdx = rsi
	rcx = rbp
	call rax (retsize: 8;)
	goto l0000000000464768
	// succ:  l0000000000464768
l0000000000464982:
	rcx = rsp + 0x60<64>
	rdx = rsi
	call rax (retsize: 8;)
	goto l00000000004646F3
	// succ:  l00000000004646F3
l0000000000464991:
	rbp = rsp + 0x50<64>
	rdx = rsi
	rcx = rbp
	call rax (retsize: 8;)
	goto l0000000000464682
	// succ:  l0000000000464682
l00000000004649A3:
	rdx = rsp + 0x90<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000464648
	// succ:  l0000000000464648
l00000000004649C0:
	rdx = rsp + 0x90<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000449360 (retsize: 8;)
	goto l00000000004647EA
	// succ:  l00000000004647EA
l00000000004649E0:
	rdx = rsp + 0x90<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000449360 (retsize: 8;)
	goto l0000000000464790
	// succ:  l0000000000464790
l0000000000464A00:
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	rdx = r15
	call fn0000000000449360 (retsize: 8;)
	goto l0000000000464875
	// succ:  l0000000000464875
l0000000000464A11:
	rdx = rsp + 0x90<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l00000000004646AA
	// succ:  l00000000004646AA
l0000000000464A30:
	rdx = rsp + 0x90<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000449360 (retsize: 8;)
	goto l0000000000464712
	// succ:  l0000000000464712
fn00000000004645D0_exit:


// fn0000000000464B20
// Return size: 8
define fn0000000000464B20
fn0000000000464B20_entry:
	rsp = fp
	// succ:  l0000000000464B20
l0000000000464B20:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 0x20<64>:byte] = 0<8>
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497370<p64>
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx + 0x38<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx + 0x40<64>:word64] = 0<64>
	Mem0[rcx + 0x48<64>:word16] = ax
	Mem0[rcx + 0x4A<64>:word16] = dx
	Mem0[rcx + 0xC8<64>:byte] = 0<8>
	return
	// succ:  fn0000000000464B20_exit
fn0000000000464B20_exit:


// fn0000000000464B80
// Return size: 8
define fn0000000000464B80
fn0000000000464B80_entry:
	rsp = fp
	// succ:  l0000000000464B80
l0000000000464B80:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 0x20<64>:byte] = 0<8>
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497370<p64>
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx + 0x38<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx + 0x40<64>:word64] = 0<64>
	Mem0[rcx + 0x48<64>:word16] = ax
	Mem0[rcx + 0x4A<64>:word16] = dx
	Mem0[rcx + 0xC8<64>:byte] = 0<8>
	return
	// succ:  fn0000000000464B80_exit
fn0000000000464B80_exit:


// fn0000000000464BE0
// Return size: 0
define fn0000000000464BE0
fn0000000000464BE0_entry:
	rsp = fp
	// succ:  l0000000000464BE0
l0000000000464BE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000464C00 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000464BF5_thunk_fn0000000000475550
l0000000000464BF5_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000464BE0_exit
fn0000000000464BE0_exit:


// fn0000000000464C00
// Return size: 0
define fn0000000000464C00
fn0000000000464C00_entry:
	rsp = fp
	// succ:  l0000000000464C00
l0000000000464C00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0xC8<64>:byte] - 0<8>)
	rax = 0x0000000000497370<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	branch Test(EQ,Z) l0000000000464C45
	// succ:  l0000000000464C1B l0000000000464C45
l0000000000464C1B:
	rcx = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000464C29
	// succ:  l0000000000464C24 l0000000000464C29
l0000000000464C24:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000464C29
l0000000000464C29:
	rcx = Mem0[rbx + 0x28<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000464C37
	// succ:  l0000000000464C32 l0000000000464C37
l0000000000464C32:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000464C37
l0000000000464C37:
	rcx = Mem0[rbx + 0x38<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000464C45
	// succ:  l0000000000464C40 l0000000000464C45
l0000000000464C40:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000464C45
l0000000000464C45:
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000464C4D_thunk_fn000000000046AD20
l0000000000464C4D_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000464C00_exit
fn0000000000464C00_exit:


// fn0000000000464C60
// Return size: 0
define fn0000000000464C60
fn0000000000464C60_entry:
	rsp = fp
	// succ:  l0000000000464C60
l0000000000464C60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0xC8<64>:byte] - 0<8>)
	rax = 0x0000000000497370<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	branch Test(EQ,Z) l0000000000464CA5
	// succ:  l0000000000464C7B l0000000000464CA5
l0000000000464C7B:
	rcx = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000464C89
	// succ:  l0000000000464C84 l0000000000464C89
l0000000000464C84:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000464C89
l0000000000464C89:
	rcx = Mem0[rbx + 0x28<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000464C97
	// succ:  l0000000000464C92 l0000000000464C97
l0000000000464C92:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000464C97
l0000000000464C97:
	rcx = Mem0[rbx + 0x38<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000464CA5
	// succ:  l0000000000464CA0 l0000000000464CA5
l0000000000464CA0:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000464CA5
l0000000000464CA5:
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000464CAD_thunk_fn000000000046AD20
l0000000000464CAD_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000464C60_exit
fn0000000000464C60_exit:


// fn0000000000464CC0
// Return size: 8
define fn0000000000464CC0
fn0000000000464CC0_entry:
	rsp = fp
	// succ:  l0000000000464CC0
l0000000000464CC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x18<64>:word64]
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn00000000004249F0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000464CC0_exit
fn0000000000464CC0_exit:


// fn0000000000464CF0
// Return size: 8
define fn0000000000464CF0
fn0000000000464CF0_entry:
	rsp = fp
	// succ:  l0000000000464CF0
l0000000000464CF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	rdx = Mem0[rbp + 0x20<64>:word64]
	rax = Mem0[rbp + 0x18<64>:word64]
	r8 = rdx
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn00000000004249C0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000464CF0_exit
fn0000000000464CF0_exit:


// fn0000000000464D30
// Return size: 8
define fn0000000000464D30
fn0000000000464D30_entry:
	rsp = fp
	// succ:  l0000000000464D30
l0000000000464D30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word32] = edx
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000427270 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000464D30_exit
fn0000000000464D30_exit:


// fn0000000000464D50
// Return size: 8
define fn0000000000464D50
fn0000000000464D50_entry:
	rsp = fp
	// succ:  l0000000000464D50
l0000000000464D50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	rax = Mem0[rbp + 0x20<64>:word64]
	rcx = rax
	call fn0000000000471B70 (retsize: 8;)
	rdx = rax
	rax = Mem0[rbp + 0x18<64>:word64]
	r8 = rdx
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000424A50 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000464D50_exit
fn0000000000464D50_exit:


// fn0000000000464D90
// Return size: 8
define fn0000000000464D90
fn0000000000464D90_entry:
	rsp = fp
	// succ:  l0000000000464D90
l0000000000464D90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	rax = Mem0[rbp + 0x20<64>:word64]
	rcx = rax
	call fn0000000000471B60 (retsize: 8;)
	rdx = rax
	rax = Mem0[rbp + 0x18<64>:word64]
	r8 = rdx
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000424AA0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000464D90_exit
fn0000000000464D90_exit:


// fn0000000000464DD0
// Return size: 8
define fn0000000000464DD0
fn0000000000464DD0_entry:
	rsp = fp
	// succ:  l0000000000464DD0
l0000000000464DD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x18<64>:word64]
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000464CC0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000464DD0_exit
fn0000000000464DD0_exit:


// fn0000000000464E00
// Return size: 8
define fn0000000000464E00
fn0000000000464E00_entry:
	rsp = fp
	// succ:  l0000000000464E00
l0000000000464E00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x18<64>:word64]
	r8d = 0<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000424A00 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000464E00_exit
fn0000000000464E00_exit:


// fn0000000000464E30
// Return size: 8
define fn0000000000464E30
fn0000000000464E30_entry:
	rsp = fp
	// succ:  l0000000000464E30
l0000000000464E30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	edx = 0<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000464D30 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000464E30_exit
fn0000000000464E30_exit:


// fn0000000000464E50
// Return size: 8
define fn0000000000464E50
fn0000000000464E50_entry:
	rsp = fp
	// succ:  l0000000000464E50
l0000000000464E50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	rax = Mem0[rbp + 0x20<64>:word64]
	rcx = rax
	call fn0000000000471B70 (retsize: 8;)
	rdx = rax
	rax = Mem0[rbp + 0x18<64>:word64]
	r8 = rdx
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000464D50 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000464E50_exit
fn0000000000464E50_exit:


// fn0000000000464E90
// Return size: 8
define fn0000000000464E90
fn0000000000464E90_entry:
	rsp = fp
	// succ:  l0000000000464E90
l0000000000464E90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	rax = Mem0[rbp + 0x20<64>:word64]
	rcx = rax
	call fn0000000000471B60 (retsize: 8;)
	rdx = rax
	rax = Mem0[rbp + 0x18<64>:word64]
	r8 = rdx
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000464D90 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000464E90_exit
fn0000000000464E90_exit:


// fn0000000000464ED0
// Return size: 8
define fn0000000000464ED0
fn0000000000464ED0_entry:
	rsp = fp
	// succ:  l0000000000464ED0
l0000000000464ED0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x18<64>:word64]
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000424B40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000464ED0_exit
fn0000000000464ED0_exit:


// fn0000000000464F00
// Return size: 8
define fn0000000000464F00
fn0000000000464F00_entry:
	rsp = fp
	// succ:  l0000000000464F00
l0000000000464F00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	rdx = Mem0[rbp + 0x20<64>:word64]
	rax = Mem0[rbp + 0x18<64>:word64]
	r8 = rdx
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000424B10 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000464F00_exit
fn0000000000464F00_exit:


// fn0000000000464F40
// Return size: 8
define fn0000000000464F40
fn0000000000464F40_entry:
	rsp = fp
	// succ:  l0000000000464F40
l0000000000464F40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word32] = edx
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000427290 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000464F40_exit
fn0000000000464F40_exit:


// fn0000000000464F60
// Return size: 8
define fn0000000000464F60
fn0000000000464F60_entry:
	rsp = fp
	// succ:  l0000000000464F60
l0000000000464F60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	rax = Mem0[rbp + 0x20<64>:word64]
	rcx = rax
	call fn0000000000471B80 (retsize: 8;)
	rdx = rax
	rax = Mem0[rbp + 0x18<64>:word64]
	r8 = rdx
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000424B90 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000464F60_exit
fn0000000000464F60_exit:


// fn0000000000464FA0
// Return size: 8
define fn0000000000464FA0
fn0000000000464FA0_entry:
	rsp = fp
	// succ:  l0000000000464FA0
l0000000000464FA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x18<64>:word64]
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000464ED0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000464FA0_exit
fn0000000000464FA0_exit:


// fn0000000000464FD0
// Return size: 8
define fn0000000000464FD0
fn0000000000464FD0_entry:
	rsp = fp
	// succ:  l0000000000464FD0
l0000000000464FD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x18<64>:word64]
	r8d = 0<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000424B50 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000464FD0_exit
fn0000000000464FD0_exit:


// fn0000000000465000
// Return size: 8
define fn0000000000465000
fn0000000000465000_entry:
	rsp = fp
	// succ:  l0000000000465000
l0000000000465000:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	edx = 0<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000464F40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000465000_exit
fn0000000000465000_exit:


// fn0000000000465020
// Return size: 8
define fn0000000000465020
fn0000000000465020_entry:
	rsp = fp
	// succ:  l0000000000465020
l0000000000465020:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	rax = Mem0[rbp + 0x20<64>:word64]
	rcx = rax
	call fn0000000000471B80 (retsize: 8;)
	rdx = rax
	rax = Mem0[rbp + 0x18<64>:word64]
	r8 = rdx
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000464F60 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000465020_exit
fn0000000000465020_exit:


// fn0000000000465060
// Return size: 0
define fn0000000000465060
fn0000000000465060_entry:
	rsp = fp
	// succ:  l0000000000465060
l0000000000465060:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497390<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046E160 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046507F_thunk_fn0000000000475550
l000000000046507F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000465060_exit
fn0000000000465060_exit:


// fn0000000000465090
// Return size: 8
define fn0000000000465090
fn0000000000465090_entry:
	rsp = fp
	// succ:  l0000000000465090
l0000000000465090:
	rax = 0x0000000000497390<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046509A_thunk_fn000000000046E160
l000000000046509A_thunk_fn000000000046E160:
	call fn000000000046E160 (retsize: 0;)
	return
	// succ:  fn0000000000465090_exit
fn0000000000465090_exit:


// fn00000000004650A0
// Return size: 8
define fn00000000004650A0
fn00000000004650A0_entry:
	rsp = fp
	// succ:  l00000000004650A0
l00000000004650A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000454770 (retsize: 8;)
	rax = 0x00000000004973D0<p64>
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004650A0_exit
fn00000000004650A0_exit:


// fn00000000004650C0
// Return size: 0
define fn00000000004650C0
fn00000000004650C0_entry:
	rsp = fp
	// succ:  l00000000004650C0
l00000000004650C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x00000000004973D0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn00000000004547D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004650DF_thunk_fn0000000000475550
l00000000004650DF_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn00000000004650C0_exit
fn00000000004650C0_exit:


// fn00000000004650F0
// Return size: 8
define fn00000000004650F0
fn00000000004650F0_entry:
	rsp = fp
	// succ:  l00000000004650F0
l00000000004650F0:
	rax = 0x00000000004973D0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l00000000004650FA_thunk_fn00000000004547D0
l00000000004650FA_thunk_fn00000000004547D0:
	call fn00000000004547D0 (retsize: 0;)
	return
	// succ:  fn00000000004650F0_exit
fn00000000004650F0_exit:


// fn0000000000465100
// Return size: 8
define fn0000000000465100
fn0000000000465100_entry:
	rsp = fp
	// succ:  l0000000000465100
l0000000000465100:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 0x20<64>:word64] = 0<64>
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497410<p64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx + 0x38<64>:word64] = 0<64>
	Mem0[rcx + 0x40<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	Mem0[rcx + 0x48<64>:word64] = 0<64>
	Mem0[rcx + 0x50<64>:word64] = 0<64>
	Mem0[rcx + 0x58<64>:word64] = 0<64>
	Mem0[rcx + 0x60<64>:word64] = 0<64>
	Mem0[rcx + 0x68<64>:word64] = 0<64>
	Mem0[rcx + 0x70<64>:word64] = 0<64>
	Mem0[rcx + 0x78<64>:word64] = 0<64>
	Mem0[rcx + 0x80<64>:word64] = 0<64>
	Mem0[rcx + 0x88<64>:word64] = 0<64>
	Mem0[rcx + 0x90<64>:word64] = 0<64>
	Mem0[rcx + 0x98<64>:word64] = 0<64>
	Mem0[rcx + 0xA0<64>:word64] = 0<64>
	Mem0[rcx + 0xA8<64>:word64] = 0<64>
	Mem0[rcx + 0xB0<64>:word64] = 0<64>
	Mem0[rcx + 0xB8<64>:word64] = 0<64>
	Mem0[rcx + 0xC0<64>:word64] = 0<64>
	Mem0[rcx + 0xC8<64>:word64] = 0<64>
	Mem0[rcx + 0xD0<64>:word64] = 0<64>
	Mem0[rcx + 0xD8<64>:word64] = 0<64>
	Mem0[rcx + 0xE0<64>:word64] = 0<64>
	Mem0[rcx + 0xE8<64>:word64] = 0<64>
	Mem0[rcx + 0xF0<64>:word64] = 0<64>
	Mem0[rcx + 0xF8<64>:word64] = 0<64>
	Mem0[rcx + 0x100<64>:word64] = 0<64>
	Mem0[rcx + 0x108<64>:word64] = 0<64>
	Mem0[rcx + 0x110<64>:word64] = 0<64>
	Mem0[rcx + 0x118<64>:word64] = 0<64>
	Mem0[rcx + 0x120<64>:word64] = 0<64>
	Mem0[rcx + 0x128<64>:word64] = 0<64>
	Mem0[rcx + 0x130<64>:word64] = 0<64>
	Mem0[rcx + 0x138<64>:word64] = 0<64>
	Mem0[rcx + 0x140<64>:word64] = 0<64>
	Mem0[rcx + 0x148<64>:word64] = 0<64>
	Mem0[rcx + 0x150<64>:word64] = 0<64>
	Mem0[rcx + 0x158<64>:word64] = 0<64>
	Mem0[rcx + 0x160<64>:word64] = 0<64>
	Mem0[rcx + 0x168<64>:word64] = 0<64>
	Mem0[rcx + 0x170<64>:word64] = 0<64>
	Mem0[rcx + 0x178<64>:word64] = 0<64>
	Mem0[rcx + 0x180<64>:word64] = 0<64>
	Mem0[rcx + 0x188<64>:byte] = 0<8>
	return
	// succ:  fn0000000000465100_exit
fn0000000000465100_exit:


// fn0000000000465300
// Return size: 8
define fn0000000000465300
fn0000000000465300_entry:
	rsp = fp
	// succ:  l0000000000465300
l0000000000465300:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 0x20<64>:word64] = 0<64>
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497410<p64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx + 0x38<64>:word64] = 0<64>
	Mem0[rcx + 0x40<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	Mem0[rcx + 0x48<64>:word64] = 0<64>
	Mem0[rcx + 0x50<64>:word64] = 0<64>
	Mem0[rcx + 0x58<64>:word64] = 0<64>
	Mem0[rcx + 0x60<64>:word64] = 0<64>
	Mem0[rcx + 0x68<64>:word64] = 0<64>
	Mem0[rcx + 0x70<64>:word64] = 0<64>
	Mem0[rcx + 0x78<64>:word64] = 0<64>
	Mem0[rcx + 0x80<64>:word64] = 0<64>
	Mem0[rcx + 0x88<64>:word64] = 0<64>
	Mem0[rcx + 0x90<64>:word64] = 0<64>
	Mem0[rcx + 0x98<64>:word64] = 0<64>
	Mem0[rcx + 0xA0<64>:word64] = 0<64>
	Mem0[rcx + 0xA8<64>:word64] = 0<64>
	Mem0[rcx + 0xB0<64>:word64] = 0<64>
	Mem0[rcx + 0xB8<64>:word64] = 0<64>
	Mem0[rcx + 0xC0<64>:word64] = 0<64>
	Mem0[rcx + 0xC8<64>:word64] = 0<64>
	Mem0[rcx + 0xD0<64>:word64] = 0<64>
	Mem0[rcx + 0xD8<64>:word64] = 0<64>
	Mem0[rcx + 0xE0<64>:word64] = 0<64>
	Mem0[rcx + 0xE8<64>:word64] = 0<64>
	Mem0[rcx + 0xF0<64>:word64] = 0<64>
	Mem0[rcx + 0xF8<64>:word64] = 0<64>
	Mem0[rcx + 0x100<64>:word64] = 0<64>
	Mem0[rcx + 0x108<64>:word64] = 0<64>
	Mem0[rcx + 0x110<64>:word64] = 0<64>
	Mem0[rcx + 0x118<64>:word64] = 0<64>
	Mem0[rcx + 0x120<64>:word64] = 0<64>
	Mem0[rcx + 0x128<64>:word64] = 0<64>
	Mem0[rcx + 0x130<64>:word64] = 0<64>
	Mem0[rcx + 0x138<64>:word64] = 0<64>
	Mem0[rcx + 0x140<64>:word64] = 0<64>
	Mem0[rcx + 0x148<64>:word64] = 0<64>
	Mem0[rcx + 0x150<64>:word64] = 0<64>
	Mem0[rcx + 0x158<64>:word64] = 0<64>
	Mem0[rcx + 0x160<64>:word64] = 0<64>
	Mem0[rcx + 0x168<64>:word64] = 0<64>
	Mem0[rcx + 0x170<64>:word64] = 0<64>
	Mem0[rcx + 0x178<64>:word64] = 0<64>
	Mem0[rcx + 0x180<64>:word64] = 0<64>
	Mem0[rcx + 0x188<64>:byte] = 0<8>
	return
	// succ:  fn0000000000465300_exit
fn0000000000465300_exit:


// fn0000000000465500
// Return size: 0
define fn0000000000465500
fn0000000000465500_entry:
	rsp = fp
	// succ:  l0000000000465500
l0000000000465500:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497410<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046551F_thunk_fn0000000000475550
l000000000046551F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000465500_exit
fn0000000000465500_exit:


// fn0000000000465530
// Return size: 0
define fn0000000000465530
fn0000000000465530_entry:
	rsp = fp
	// succ:  l0000000000465530
l0000000000465530:
	rax = 0x0000000000497410<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046553A_thunk_fn000000000046AD20
l000000000046553A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000465530_exit
fn0000000000465530_exit:


// fn0000000000465540
// Return size: 0
define fn0000000000465540
fn0000000000465540_entry:
	rsp = fp
	// succ:  l0000000000465540
l0000000000465540:
	rax = 0x0000000000497410<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046554A_thunk_fn000000000046AD20
l000000000046554A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000465540_exit
fn0000000000465540_exit:


// fn0000000000465550
// Return size: 8
define fn0000000000465550
fn0000000000465550_entry:
	rsp = fp
	// succ:  l0000000000465550
l0000000000465550:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 0x20<64>:word64] = 0<64>
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497430<p64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx + 0x38<64>:word64] = 0<64>
	Mem0[rcx + 0x40<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	Mem0[rcx + 0x48<64>:word64] = 0<64>
	Mem0[rcx + 0x50<64>:word64] = 0<64>
	Mem0[rcx + 0x58<64>:word64] = 0<64>
	Mem0[rcx + 0x60<64>:word64] = 0<64>
	Mem0[rcx + 0x68<64>:word64] = 0<64>
	Mem0[rcx + 0x70<64>:word64] = 0<64>
	Mem0[rcx + 0x78<64>:word64] = 0<64>
	Mem0[rcx + 0x80<64>:word64] = 0<64>
	Mem0[rcx + 0x88<64>:word64] = 0<64>
	Mem0[rcx + 0x90<64>:word64] = 0<64>
	Mem0[rcx + 0x98<64>:word64] = 0<64>
	Mem0[rcx + 0xA0<64>:word64] = 0<64>
	Mem0[rcx + 0xA8<64>:word64] = 0<64>
	Mem0[rcx + 0xB0<64>:word64] = 0<64>
	Mem0[rcx + 0xB8<64>:word64] = 0<64>
	Mem0[rcx + 0xC0<64>:word64] = 0<64>
	Mem0[rcx + 0xC8<64>:word64] = 0<64>
	Mem0[rcx + 0xD0<64>:word64] = 0<64>
	Mem0[rcx + 0xD8<64>:word64] = 0<64>
	Mem0[rcx + 0xE0<64>:word64] = 0<64>
	Mem0[rcx + 0xE8<64>:word64] = 0<64>
	Mem0[rcx + 0xF0<64>:word64] = 0<64>
	Mem0[rcx + 0xF8<64>:word64] = 0<64>
	Mem0[rcx + 0x100<64>:word64] = 0<64>
	Mem0[rcx + 0x108<64>:word64] = 0<64>
	Mem0[rcx + 0x110<64>:word64] = 0<64>
	Mem0[rcx + 0x118<64>:word64] = 0<64>
	Mem0[rcx + 0x120<64>:word64] = 0<64>
	Mem0[rcx + 0x128<64>:word64] = 0<64>
	Mem0[rcx + 0x130<64>:word64] = 0<64>
	Mem0[rcx + 0x138<64>:word64] = 0<64>
	Mem0[rcx + 0x140<64>:word64] = 0<64>
	Mem0[rcx + 0x148<64>:word64] = 0<64>
	Mem0[rcx + 0x150<64>:word64] = 0<64>
	Mem0[rcx + 0x158<64>:word64] = 0<64>
	Mem0[rcx + 0x160<64>:word64] = 0<64>
	Mem0[rcx + 0x168<64>:word64] = 0<64>
	Mem0[rcx + 0x170<64>:word64] = 0<64>
	Mem0[rcx + 0x178<64>:word64] = 0<64>
	Mem0[rcx + 0x180<64>:word64] = 0<64>
	Mem0[rcx + 0x188<64>:byte] = 0<8>
	return
	// succ:  fn0000000000465550_exit
fn0000000000465550_exit:


// fn0000000000465750
// Return size: 8
define fn0000000000465750
fn0000000000465750_entry:
	rsp = fp
	// succ:  l0000000000465750
l0000000000465750:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 0x20<64>:word64] = 0<64>
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497430<p64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx + 0x38<64>:word64] = 0<64>
	Mem0[rcx + 0x40<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	Mem0[rcx + 0x48<64>:word64] = 0<64>
	Mem0[rcx + 0x50<64>:word64] = 0<64>
	Mem0[rcx + 0x58<64>:word64] = 0<64>
	Mem0[rcx + 0x60<64>:word64] = 0<64>
	Mem0[rcx + 0x68<64>:word64] = 0<64>
	Mem0[rcx + 0x70<64>:word64] = 0<64>
	Mem0[rcx + 0x78<64>:word64] = 0<64>
	Mem0[rcx + 0x80<64>:word64] = 0<64>
	Mem0[rcx + 0x88<64>:word64] = 0<64>
	Mem0[rcx + 0x90<64>:word64] = 0<64>
	Mem0[rcx + 0x98<64>:word64] = 0<64>
	Mem0[rcx + 0xA0<64>:word64] = 0<64>
	Mem0[rcx + 0xA8<64>:word64] = 0<64>
	Mem0[rcx + 0xB0<64>:word64] = 0<64>
	Mem0[rcx + 0xB8<64>:word64] = 0<64>
	Mem0[rcx + 0xC0<64>:word64] = 0<64>
	Mem0[rcx + 0xC8<64>:word64] = 0<64>
	Mem0[rcx + 0xD0<64>:word64] = 0<64>
	Mem0[rcx + 0xD8<64>:word64] = 0<64>
	Mem0[rcx + 0xE0<64>:word64] = 0<64>
	Mem0[rcx + 0xE8<64>:word64] = 0<64>
	Mem0[rcx + 0xF0<64>:word64] = 0<64>
	Mem0[rcx + 0xF8<64>:word64] = 0<64>
	Mem0[rcx + 0x100<64>:word64] = 0<64>
	Mem0[rcx + 0x108<64>:word64] = 0<64>
	Mem0[rcx + 0x110<64>:word64] = 0<64>
	Mem0[rcx + 0x118<64>:word64] = 0<64>
	Mem0[rcx + 0x120<64>:word64] = 0<64>
	Mem0[rcx + 0x128<64>:word64] = 0<64>
	Mem0[rcx + 0x130<64>:word64] = 0<64>
	Mem0[rcx + 0x138<64>:word64] = 0<64>
	Mem0[rcx + 0x140<64>:word64] = 0<64>
	Mem0[rcx + 0x148<64>:word64] = 0<64>
	Mem0[rcx + 0x150<64>:word64] = 0<64>
	Mem0[rcx + 0x158<64>:word64] = 0<64>
	Mem0[rcx + 0x160<64>:word64] = 0<64>
	Mem0[rcx + 0x168<64>:word64] = 0<64>
	Mem0[rcx + 0x170<64>:word64] = 0<64>
	Mem0[rcx + 0x178<64>:word64] = 0<64>
	Mem0[rcx + 0x180<64>:word64] = 0<64>
	Mem0[rcx + 0x188<64>:byte] = 0<8>
	return
	// succ:  fn0000000000465750_exit
fn0000000000465750_exit:


// fn0000000000465950
// Return size: 0
define fn0000000000465950
fn0000000000465950_entry:
	rsp = fp
	// succ:  l0000000000465950
l0000000000465950:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497430<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046596F_thunk_fn0000000000475550
l000000000046596F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000465950_exit
fn0000000000465950_exit:


// fn0000000000465980
// Return size: 0
define fn0000000000465980
fn0000000000465980_entry:
	rsp = fp
	// succ:  l0000000000465980
l0000000000465980:
	rax = 0x0000000000497430<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046598A_thunk_fn000000000046AD20
l000000000046598A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000465980_exit
fn0000000000465980_exit:


// fn0000000000465990
// Return size: 0
define fn0000000000465990
fn0000000000465990_entry:
	rsp = fp
	// succ:  l0000000000465990
l0000000000465990:
	rax = 0x0000000000497430<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046599A_thunk_fn000000000046AD20
l000000000046599A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000465990_exit
fn0000000000465990_exit:


// fn00000000004659A0
// Return size: 0
define fn00000000004659A0
fn00000000004659A0_entry:
	rsp = fp
	// succ:  l00000000004659A0
l00000000004659A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497450<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046F0F0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004659BF_thunk_fn0000000000475550
l00000000004659BF_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn00000000004659A0_exit
fn00000000004659A0_exit:


// fn00000000004659D0
// Return size: 8
define fn00000000004659D0
fn00000000004659D0_entry:
	rsp = fp
	// succ:  l00000000004659D0
l00000000004659D0:
	rax = 0x0000000000497450<p64>
	Mem0[rcx:word64] = rax
	// succ:  l00000000004659DA_thunk_fn000000000046F0F0
l00000000004659DA_thunk_fn000000000046F0F0:
	call fn000000000046F0F0 (retsize: 0;)
	return
	// succ:  fn00000000004659D0_exit
fn00000000004659D0_exit:


// fn00000000004659E0
// Return size: 8
define fn00000000004659E0
fn00000000004659E0_entry:
	rsp = fp
	// succ:  l00000000004659E0
l00000000004659E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbp = rdx
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496190<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000452740 (retsize: 8;)
	rax = 0x0000000000497490<p64>
	rdi = 0x000000000048DEAA<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l0000000000465A2E
l0000000000465A2E:
	branch rcx == 0<64> l0000000000465A30
	// succ:  l0000000000465A2E_1 l0000000000465A30
l0000000000465A2E_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000465A2E
	// succ:  l0000000000465A30 l0000000000465A2E
l0000000000465A30:
	branch Test(EQ,Z) l0000000000465A45
	// succ:  l0000000000465A32 l0000000000465A45
l0000000000465A32:
	rdi = 0x000000000048DEAC<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l0000000000465A41
l0000000000465A41:
	branch rcx == 0<64> l0000000000465A43
	// succ:  l0000000000465A41_2 l0000000000465A43
l0000000000465A41_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000465A41
	// succ:  l0000000000465A43 l0000000000465A41
l0000000000465A43:
	branch Test(NE,Z) l0000000000465A50
	// succ:  l0000000000465A45 l0000000000465A50
l0000000000465A45:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004659E0_exit
l0000000000465A50:
	rsi = rsp + 0x28<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rdx = Mem0[rsp + 0x28<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rbx
	call fn0000000000452740 (retsize: 8;)
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004659E0_exit
fn00000000004659E0_exit:


// fn0000000000465AB0
// Return size: 8
define fn0000000000465AB0
fn0000000000465AB0_entry:
	rsp = fp
	// succ:  l0000000000465AB0
l0000000000465AB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbp = rdx
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496190<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000452740 (retsize: 8;)
	rax = 0x0000000000497490<p64>
	rdi = 0x000000000048DEAA<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l0000000000465AFE
l0000000000465AFE:
	branch rcx == 0<64> l0000000000465B00
	// succ:  l0000000000465AFE_1 l0000000000465B00
l0000000000465AFE_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000465AFE
	// succ:  l0000000000465B00 l0000000000465AFE
l0000000000465B00:
	branch Test(EQ,Z) l0000000000465B15
	// succ:  l0000000000465B02 l0000000000465B15
l0000000000465B02:
	rdi = 0x000000000048DEAC<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l0000000000465B11
l0000000000465B11:
	branch rcx == 0<64> l0000000000465B13
	// succ:  l0000000000465B11_2 l0000000000465B13
l0000000000465B11_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000465B11
	// succ:  l0000000000465B13 l0000000000465B11
l0000000000465B13:
	branch Test(NE,Z) l0000000000465B20
	// succ:  l0000000000465B15 l0000000000465B20
l0000000000465B15:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000465AB0_exit
l0000000000465B20:
	rsi = rsp + 0x28<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rdx = Mem0[rsp + 0x28<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rbx
	call fn0000000000452740 (retsize: 8;)
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000465AB0_exit
fn0000000000465AB0_exit:


// fn0000000000465B80
// Return size: 0
define fn0000000000465B80
fn0000000000465B80_entry:
	rsp = fp
	// succ:  l0000000000465B80
l0000000000465B80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497490<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000452A80 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000465B9F_thunk_fn0000000000475550
l0000000000465B9F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000465B80_exit
fn0000000000465B80_exit:


// fn0000000000465BB0
// Return size: 0
define fn0000000000465BB0
fn0000000000465BB0_entry:
	rsp = fp
	// succ:  l0000000000465BB0
l0000000000465BB0:
	rax = 0x0000000000497490<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000465BBA_thunk_fn0000000000452A80
l0000000000465BBA_thunk_fn0000000000452A80:
	call fn0000000000452A80 (retsize: 0;)
	return
	// succ:  fn0000000000465BB0_exit
fn0000000000465BB0_exit:


// fn0000000000465BC0
// Return size: 0
define fn0000000000465BC0
fn0000000000465BC0_entry:
	rsp = fp
	// succ:  l0000000000465BC0
l0000000000465BC0:
	rax = 0x0000000000497490<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000465BCA_thunk_fn0000000000452A80
l0000000000465BCA_thunk_fn0000000000452A80:
	call fn0000000000452A80 (retsize: 0;)
	return
	// succ:  fn0000000000465BC0_exit
fn0000000000465BC0_exit:


// fn0000000000465BD0
// Return size: 8
define fn0000000000465BD0
fn0000000000465BD0_entry:
	rsp = fp
	// succ:  l0000000000465BD0
l0000000000465BD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbp = rdx
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496210<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000452AD0 (retsize: 8;)
	rax = 0x0000000000497510<p64>
	rdi = 0x000000000048DEAA<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l0000000000465C1E
l0000000000465C1E:
	branch rcx == 0<64> l0000000000465C20
	// succ:  l0000000000465C1E_1 l0000000000465C20
l0000000000465C1E_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000465C1E
	// succ:  l0000000000465C20 l0000000000465C1E
l0000000000465C20:
	branch Test(EQ,Z) l0000000000465C35
	// succ:  l0000000000465C22 l0000000000465C35
l0000000000465C22:
	rdi = 0x000000000048DEAC<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l0000000000465C31
l0000000000465C31:
	branch rcx == 0<64> l0000000000465C33
	// succ:  l0000000000465C31_2 l0000000000465C33
l0000000000465C31_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000465C31
	// succ:  l0000000000465C33 l0000000000465C31
l0000000000465C33:
	branch Test(NE,Z) l0000000000465C40
	// succ:  l0000000000465C35 l0000000000465C40
l0000000000465C35:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000465BD0_exit
l0000000000465C40:
	rsi = rsp + 0x28<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rdx = Mem0[rsp + 0x28<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rbx
	call fn0000000000452AD0 (retsize: 8;)
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000465BD0_exit
fn0000000000465BD0_exit:


// fn0000000000465CA0
// Return size: 8
define fn0000000000465CA0
fn0000000000465CA0_entry:
	rsp = fp
	// succ:  l0000000000465CA0
l0000000000465CA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbp = rdx
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496210<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000452AD0 (retsize: 8;)
	rax = 0x0000000000497510<p64>
	rdi = 0x000000000048DEAA<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l0000000000465CEE
l0000000000465CEE:
	branch rcx == 0<64> l0000000000465CF0
	// succ:  l0000000000465CEE_1 l0000000000465CF0
l0000000000465CEE_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000465CEE
	// succ:  l0000000000465CF0 l0000000000465CEE
l0000000000465CF0:
	branch Test(EQ,Z) l0000000000465D05
	// succ:  l0000000000465CF2 l0000000000465D05
l0000000000465CF2:
	rdi = 0x000000000048DEAC<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l0000000000465D01
l0000000000465D01:
	branch rcx == 0<64> l0000000000465D03
	// succ:  l0000000000465D01_2 l0000000000465D03
l0000000000465D01_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000465D01
	// succ:  l0000000000465D03 l0000000000465D01
l0000000000465D03:
	branch Test(NE,Z) l0000000000465D10
	// succ:  l0000000000465D05 l0000000000465D10
l0000000000465D05:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000465CA0_exit
l0000000000465D10:
	rsi = rsp + 0x28<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rdx = Mem0[rsp + 0x28<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rbx
	call fn0000000000452AD0 (retsize: 8;)
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000465CA0_exit
fn0000000000465CA0_exit:


// fn0000000000465D70
// Return size: 0
define fn0000000000465D70
fn0000000000465D70_entry:
	rsp = fp
	// succ:  l0000000000465D70
l0000000000465D70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497510<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000452E10 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000465D8F_thunk_fn0000000000475550
l0000000000465D8F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000465D70_exit
fn0000000000465D70_exit:


// fn0000000000465DA0
// Return size: 0
define fn0000000000465DA0
fn0000000000465DA0_entry:
	rsp = fp
	// succ:  l0000000000465DA0
l0000000000465DA0:
	rax = 0x0000000000497510<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000465DAA_thunk_fn0000000000452E10
l0000000000465DAA_thunk_fn0000000000452E10:
	call fn0000000000452E10 (retsize: 0;)
	return
	// succ:  fn0000000000465DA0_exit
fn0000000000465DA0_exit:


// fn0000000000465DB0
// Return size: 0
define fn0000000000465DB0
fn0000000000465DB0_entry:
	rsp = fp
	// succ:  l0000000000465DB0
l0000000000465DB0:
	rax = 0x0000000000497510<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000465DBA_thunk_fn0000000000452E10
l0000000000465DBA_thunk_fn0000000000452E10:
	call fn0000000000452E10 (retsize: 0;)
	return
	// succ:  fn0000000000465DB0_exit
fn0000000000465DB0_exit:


// fn0000000000465DC0
// Return size: 8
define fn0000000000465DC0
fn0000000000465DC0_entry:
	rsp = fp
	// succ:  l0000000000465DC0
l0000000000465DC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbp = rdx
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496290<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000452E60 (retsize: 8;)
	rax = 0x0000000000497590<p64>
	rdi = 0x000000000048DB5A<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l0000000000465E0E
l0000000000465E0E:
	branch rcx == 0<64> l0000000000465E10
	// succ:  l0000000000465E0E_1 l0000000000465E10
l0000000000465E0E_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000465E0E
	// succ:  l0000000000465E10 l0000000000465E0E
l0000000000465E10:
	branch Test(EQ,Z) l0000000000465E25
	// succ:  l0000000000465E12 l0000000000465E25
l0000000000465E12:
	rdi = 0x000000000048DB5C<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l0000000000465E21
l0000000000465E21:
	branch rcx == 0<64> l0000000000465E23
	// succ:  l0000000000465E21_2 l0000000000465E23
l0000000000465E21_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000465E21
	// succ:  l0000000000465E23 l0000000000465E21
l0000000000465E23:
	branch Test(NE,Z) l0000000000465E30
	// succ:  l0000000000465E25 l0000000000465E30
l0000000000465E25:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000465DC0_exit
l0000000000465E30:
	rsi = rsp + 0x28<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rdx = Mem0[rsp + 0x28<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rbx
	call fn0000000000452E60 (retsize: 8;)
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000465DC0_exit
fn0000000000465DC0_exit:


// fn0000000000465E90
// Return size: 8
define fn0000000000465E90
fn0000000000465E90_entry:
	rsp = fp
	// succ:  l0000000000465E90
l0000000000465E90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbp = rdx
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496290<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000452E60 (retsize: 8;)
	rax = 0x0000000000497590<p64>
	rdi = 0x000000000048DB5A<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l0000000000465EDE
l0000000000465EDE:
	branch rcx == 0<64> l0000000000465EE0
	// succ:  l0000000000465EDE_1 l0000000000465EE0
l0000000000465EDE_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000465EDE
	// succ:  l0000000000465EE0 l0000000000465EDE
l0000000000465EE0:
	branch Test(EQ,Z) l0000000000465EF5
	// succ:  l0000000000465EE2 l0000000000465EF5
l0000000000465EE2:
	rdi = 0x000000000048DB5C<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l0000000000465EF1
l0000000000465EF1:
	branch rcx == 0<64> l0000000000465EF3
	// succ:  l0000000000465EF1_2 l0000000000465EF3
l0000000000465EF1_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000465EF1
	// succ:  l0000000000465EF3 l0000000000465EF1
l0000000000465EF3:
	branch Test(NE,Z) l0000000000465F00
	// succ:  l0000000000465EF5 l0000000000465F00
l0000000000465EF5:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000465E90_exit
l0000000000465F00:
	rsi = rsp + 0x28<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rdx = Mem0[rsp + 0x28<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rbx
	call fn0000000000452E60 (retsize: 8;)
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000465E90_exit
fn0000000000465E90_exit:


// fn0000000000465F60
// Return size: 0
define fn0000000000465F60
fn0000000000465F60_entry:
	rsp = fp
	// succ:  l0000000000465F60
l0000000000465F60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497590<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn00000000004531C0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000465F7F_thunk_fn0000000000475550
l0000000000465F7F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000465F60_exit
fn0000000000465F60_exit:


// fn0000000000465F90
// Return size: 0
define fn0000000000465F90
fn0000000000465F90_entry:
	rsp = fp
	// succ:  l0000000000465F90
l0000000000465F90:
	rax = 0x0000000000497590<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000465F9A_thunk_fn00000000004531C0
l0000000000465F9A_thunk_fn00000000004531C0:
	call fn00000000004531C0 (retsize: 0;)
	return
	// succ:  fn0000000000465F90_exit
fn0000000000465F90_exit:


// fn0000000000465FA0
// Return size: 0
define fn0000000000465FA0
fn0000000000465FA0_entry:
	rsp = fp
	// succ:  l0000000000465FA0
l0000000000465FA0:
	rax = 0x0000000000497590<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000465FAA_thunk_fn00000000004531C0
l0000000000465FAA_thunk_fn00000000004531C0:
	call fn00000000004531C0 (retsize: 0;)
	return
	// succ:  fn0000000000465FA0_exit
fn0000000000465FA0_exit:


// fn0000000000465FB0
// Return size: 8
define fn0000000000465FB0
fn0000000000465FB0_entry:
	rsp = fp
	// succ:  l0000000000465FB0
l0000000000465FB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbp = rdx
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496310<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000453210 (retsize: 8;)
	rax = 0x0000000000497610<p64>
	rdi = 0x000000000048DB5A<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l0000000000465FFE
l0000000000465FFE:
	branch rcx == 0<64> l0000000000466000
	// succ:  l0000000000465FFE_1 l0000000000466000
l0000000000465FFE_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000465FFE
	// succ:  l0000000000466000 l0000000000465FFE
l0000000000466000:
	branch Test(EQ,Z) l0000000000466015
	// succ:  l0000000000466002 l0000000000466015
l0000000000466002:
	rdi = 0x000000000048DB5C<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l0000000000466011
l0000000000466011:
	branch rcx == 0<64> l0000000000466013
	// succ:  l0000000000466011_2 l0000000000466013
l0000000000466011_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000466011
	// succ:  l0000000000466013 l0000000000466011
l0000000000466013:
	branch Test(NE,Z) l0000000000466020
	// succ:  l0000000000466015 l0000000000466020
l0000000000466015:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000465FB0_exit
l0000000000466020:
	rsi = rsp + 0x28<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rdx = Mem0[rsp + 0x28<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rbx
	call fn0000000000453210 (retsize: 8;)
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000465FB0_exit
fn0000000000465FB0_exit:


// fn0000000000466080
// Return size: 8
define fn0000000000466080
fn0000000000466080_entry:
	rsp = fp
	// succ:  l0000000000466080
l0000000000466080:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbp = rdx
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000496310<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000453210 (retsize: 8;)
	rax = 0x0000000000497610<p64>
	rdi = 0x000000000048DB5A<p64>
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	Mem0[rbx:word64] = rax
	// succ:  l00000000004660CE
l00000000004660CE:
	branch rcx == 0<64> l00000000004660D0
	// succ:  l00000000004660CE_1 l00000000004660D0
l00000000004660CE_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l00000000004660CE
	// succ:  l00000000004660D0 l00000000004660CE
l00000000004660D0:
	branch Test(EQ,Z) l00000000004660E5
	// succ:  l00000000004660D2 l00000000004660E5
l00000000004660D2:
	rdi = 0x000000000048DB5C<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l00000000004660E1
l00000000004660E1:
	branch rcx == 0<64> l00000000004660E3
	// succ:  l00000000004660E1_2 l00000000004660E3
l00000000004660E1_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l00000000004660E1
	// succ:  l00000000004660E3 l00000000004660E1
l00000000004660E3:
	branch Test(NE,Z) l00000000004660F0
	// succ:  l00000000004660E5 l00000000004660F0
l00000000004660E5:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000466080_exit
l00000000004660F0:
	rsi = rsp + 0x28<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp
	rcx = rsi
	call fn000000000046AC90 (retsize: 8;)
	rdx = Mem0[rsp + 0x28<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rbx
	call fn0000000000453210 (retsize: 8;)
	rcx = rsi
	call fn000000000046ACF0 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000466080_exit
fn0000000000466080_exit:


// fn0000000000466150
// Return size: 0
define fn0000000000466150
fn0000000000466150_entry:
	rsp = fp
	// succ:  l0000000000466150
l0000000000466150:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497610<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000453570 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046616F_thunk_fn0000000000475550
l000000000046616F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000466150_exit
fn0000000000466150_exit:


// fn0000000000466180
// Return size: 0
define fn0000000000466180
fn0000000000466180_entry:
	rsp = fp
	// succ:  l0000000000466180
l0000000000466180:
	rax = 0x0000000000497610<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046618A_thunk_fn0000000000453570
l000000000046618A_thunk_fn0000000000453570:
	call fn0000000000453570 (retsize: 0;)
	return
	// succ:  fn0000000000466180_exit
fn0000000000466180_exit:


// fn0000000000466190
// Return size: 0
define fn0000000000466190
fn0000000000466190_entry:
	rsp = fp
	// succ:  l0000000000466190
l0000000000466190:
	rax = 0x0000000000497610<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046619A_thunk_fn0000000000453570
l000000000046619A_thunk_fn0000000000453570:
	call fn0000000000453570 (retsize: 0;)
	return
	// succ:  fn0000000000466190_exit
fn0000000000466190_exit:


// fn00000000004661A0
// Return size: 8
define fn00000000004661A0
fn00000000004661A0_entry:
	rsp = fp
	// succ:  l00000000004661A0
l00000000004661A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xC8<64>
	SCZO = cond(rsp)
	Mem0[rcx + 0x6F<64>:byte] = 1<8>
	rbx = rcx
	rcx = rdx
	r15 = rdx
	call fn0000000000472D80 (retsize: 8;)
	rsi = rax
	rax = Mem0[rax:word64]
	rdx = 0x00000000004291B0<p64>
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000004666D0
	// succ:  l00000000004661DF l00000000004666D0
l00000000004661DF:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x21<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004661E7
l00000000004661E7:
	Mem0[rbx + 0x21<64>:byte] = al
	rax = Mem0[rsi:word64]
	rdx = 0x0000000000429220<p64>
	rax = Mem0[rax + 0x18<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000004666C0
	// succ:  l0000000000466201 l00000000004666C0
l0000000000466201:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x22<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000466209
l0000000000466209:
	Mem0[rbx + 0x22<64>:byte] = al
	rdx = Mem0[rsi:word64]
	rcx = 0x00000000004291A0<p64>
	rax = Mem0[rdx + 0x40<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l00000000004666B2
	// succ:  l0000000000466223 l00000000004666B2
l0000000000466223:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = Mem0[rax + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000046622A
l000000000046622A:
	Mem0[rbx + 0x58<64>:word32] = eax
	rax = Mem0[rdx + 0x20<64>:word64]
	rbp = 0x0000000000428FF0<p64>
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l00000000004666A3
	// succ:  l0000000000466241 l00000000004666A3
l0000000000466241:
	rax = Mem0[rsi + 0x10<64>:word64]
	rcx = rsp + 0x40<64>
	r8 = rsp + 0x38<64>
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000466258
l0000000000466258:
	rcx = Mem0[rsp + 0x40<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000466770
	// succ:  l0000000000466277 l0000000000466770
l0000000000466277:
	rcx = Mem0[rbx + 0x18<64>:word64]
	call fn0000000000475560 (retsize: 8;)
	rdi = rax
	rax = Mem0[rsi:word64]
	r12 = Mem0[rbx + 0x18<64>:word64]
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000466691
	// succ:  l0000000000466297 l0000000000466691
l0000000000466297:
	rax = Mem0[rsi + 0x10<64>:word64]
	rbp = rsp + 0x50<64>
	r8 = rsp + 0x39<64>
	rcx = rbp
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l00000000004662B1
l00000000004662B1:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = r12
	rdx = rdi
	rcx = rbp
	call fn00000000004286D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0x50<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000466790
	// succ:  l00000000004662D9 l0000000000466790
l00000000004662D9:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbx + 0x18<64>:word64] - 0<64>)
	Mem0[rbx + 0x10<64>:word64] = rdi
	branch Test(EQ,Z) l00000000004662F1
	// succ:  l00000000004662E6 l00000000004662F1
l00000000004662E6:
	eax = CONVERT(Mem0[rdi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 0x7D<8>)
	al = CONVERT(Test(ULE,CZ), bool, int8)
	// succ:  l00000000004662F1
l00000000004662F1:
	Mem0[rbx + 0x20<64>:byte] = al
	rax = Mem0[rsi:word64]
	rbp = 0x0000000000429170<p64>
	rax = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000466682
	// succ:  l000000000046630B l0000000000466682
l000000000046630B:
	rax = Mem0[rsi + 0x10<64>:word64]
	rcx = rsp + 0x60<64>
	r8 = rsp + 0x3A<64>
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000466322
l0000000000466322:
	rcx = Mem0[rsp + 0x60<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x30<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004666F3
	// succ:  l0000000000466341 l00000000004666F3
l0000000000466341:
	rcx = Mem0[rbx + 0x30<64>:word64]
	call fn0000000000475560 (retsize: 8;)
	r13 = rax
	rax = Mem0[rsi:word64]
	r12 = Mem0[rbx + 0x30<64>:word64]
	rax = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000466670
	// succ:  l0000000000466361 l0000000000466670
l0000000000466361:
	rax = Mem0[rsi + 0x10<64>:word64]
	rbp = rsp + 0x70<64>
	r8 = rsp + 0x3B<64>
	rcx = rbp
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l000000000046637B
l000000000046637B:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = r12
	rdx = r13
	rcx = rbp
	call fn00000000004286D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0x70<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000466710
	// succ:  l00000000004663A3 l0000000000466710
l00000000004663A3:
	rax = Mem0[rsi:word64]
	Mem0[rbx + 0x28<64>:word64] = r13
	rbp = 0x00000000004291F0<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000466655
	// succ:  l00000000004663BE l0000000000466655
l00000000004663BE:
	rax = Mem0[rsi + 0x10<64>:word64]
	rcx = rsp + 0x80<64>
	r8 = rsp + 0x3C<64>
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l00000000004663D8
l00000000004663D8:
	rcx = Mem0[rsp + 0x80<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x40<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000466730
	// succ:  l00000000004663FA l0000000000466730
l00000000004663FA:
	rcx = Mem0[rbx + 0x40<64>:word64]
	call fn0000000000475560 (retsize: 8;)
	r12 = rax
	rax = Mem0[rsi:word64]
	r14 = Mem0[rbx + 0x40<64>:word64]
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000466640
	// succ:  l000000000046641A l0000000000466640
l000000000046641A:
	rax = Mem0[rsi + 0x10<64>:word64]
	rbp = rsp + 0x90<64>
	r8 = rsp + 0x3D<64>
	rcx = rbp
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000466437
l0000000000466437:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = r14
	rdx = r12
	rcx = rbp
	call fn00000000004286D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0x90<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000466750
	// succ:  l0000000000466462 l0000000000466750
l0000000000466462:
	rax = Mem0[rsi:word64]
	Mem0[rbx + 0x38<64>:word64] = r12
	r14 = 0x00000000004291C0<p64>
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - r14)
	branch Test(NE,Z) l0000000000466625
	// succ:  l000000000046647D l0000000000466625
l000000000046647D:
	rax = Mem0[rsi + 0x10<64>:word64]
	r8 = rsp + 0x3E<64>
	rdx = Mem0[rax + 0x48<64>:word64]
	rax = rsp + 0xA0<64>
	rcx = rax
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l000000000046649F
l000000000046649F:
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x50<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004667B0
	// succ:  l00000000004664C1 l00000000004667B0
l00000000004664C1:
	rcx = Mem0[rbx + 0x50<64>:word64]
	call fn0000000000475560 (retsize: 8;)
	rbp = rax
	rax = Mem0[rbx + 0x50<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	rax = Mem0[rsi:word64]
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - r14)
	branch Test(NE,Z) l0000000000466610
	// succ:  l00000000004664E6 l0000000000466610
l00000000004664E6:
	rax = Mem0[rsi + 0x10<64>:word64]
	r14 = rsp + 0xB0<64>
	r8 = rsp + 0x3F<64>
	rcx = r14
	rdx = Mem0[rax + 0x48<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000466503
l0000000000466503:
	r8 = Mem0[rsp + 0x20<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rdx = rbp
	rcx = r14
	call fn00000000004286D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0xB0<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004666E0
	// succ:  l0000000000466530 l00000000004666E0
l0000000000466530:
	rax = Mem0[rsi:word64]
	Mem0[rbx + 0x48<64>:word64] = rbp
	rdx = 0x0000000000429090<p64>
	rax = Mem0[rax + 0x48<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000466600
	// succ:  l000000000046654B l0000000000466600
l000000000046654B:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = Mem0[rax + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000466552
l0000000000466552:
	Mem0[rbx + 0x5C<64>:word32] = eax
	rax = Mem0[rsi:word64]
	rdx = 0x0000000000429080<p64>
	rax = Mem0[rax + 0x50<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000004665F0
	// succ:  l000000000046656C l00000000004665F0
l000000000046656C:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = Mem0[rax + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000466573
l0000000000466573:
	Mem0[rbx + 0x60<64>:word32] = eax
	rcx = r15
	call fn0000000000472FC0 (retsize: 8;)
	r14 = rax
	rax = Mem0[0x0000000000491720<p64>:word64]
	r15 = rbx + 0x64<64>
	rsi = Mem0[rax:word64]
	eax = CONVERT(Mem0[r14 + 0x38<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 1<8>)
	branch Test(EQ,Z) l00000000004665B3
	// succ:  l0000000000466598 l00000000004665B3
l0000000000466598:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004665E0
	// succ:  l000000000046659C l00000000004665E0
l000000000046659C:
	rax = Mem0[r14:word64]
	rdx = 0x000000000042B5D0<p64>
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000004667D0
	// succ:  l00000000004665B3 l00000000004667D0
l00000000004665B3:
	rax = Mem0[rsi:word64]
	Mem0[rbx + 0x64<64>:word64] = rax
	eax = CONVERT(Mem0[rsi + 8<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r15 + 8<64>:word16] = ax
	eax = CONVERT(Mem0[rsi + 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r15 + 0xA<64>:byte] = al
	// succ:  l00000000004665CB
l00000000004665CB:
	rsp = rsp + 0xC8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004661A0_exit
l00000000004665E0:
	rcx = r14
	call fn000000000042B320 (retsize: 8;)
	goto l000000000046659C
	// succ:  l000000000046659C
l00000000004665F0:
	rcx = rsi
	call rax (retsize: 8;)
	goto l0000000000466573
	// succ:  l0000000000466573
l0000000000466600:
	rcx = rsi
	call rax (retsize: 8;)
	goto l0000000000466552
	// succ:  l0000000000466552
l0000000000466610:
	r14 = rsp + 0xB0<64>
	rdx = rsi
	rcx = r14
	call rax (retsize: 8;)
	goto l0000000000466503
	// succ:  l0000000000466503
l0000000000466625:
	rdx = rsp + 0xA0<64>
	rcx = rdx
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rsi
	call rax (retsize: 8;)
	goto l000000000046649F
	// succ:  l000000000046649F
l0000000000466640:
	rbp = rsp + 0x90<64>
	rdx = rsi
	rcx = rbp
	call rax (retsize: 8;)
	goto l0000000000466437
	// succ:  l0000000000466437
l0000000000466655:
	rcx = rsp + 0x80<64>
	rdx = rsi
	call rax (retsize: 8;)
	goto l00000000004663D8
	// succ:  l00000000004663D8
l0000000000466670:
	rbp = rsp + 0x70<64>
	rdx = rsi
	rcx = rbp
	call rax (retsize: 8;)
	goto l000000000046637B
	// succ:  l000000000046637B
l0000000000466682:
	rcx = rsp + 0x60<64>
	rdx = rsi
	call rax (retsize: 8;)
	goto l0000000000466322
	// succ:  l0000000000466322
l0000000000466691:
	rbp = rsp + 0x50<64>
	rdx = rsi
	rcx = rbp
	call rax (retsize: 8;)
	goto l00000000004662B1
	// succ:  l00000000004662B1
l00000000004666A3:
	rcx = rsp + 0x40<64>
	rdx = rsi
	call rax (retsize: 8;)
	goto l0000000000466258
	// succ:  l0000000000466258
l00000000004666B2:
	rcx = rsi
	call rax (retsize: 8;)
	rdx = Mem0[rsi:word64]
	goto l000000000046622A
	// succ:  l000000000046622A
l00000000004666C0:
	rcx = rsi
	call rax (retsize: 8;)
	goto l0000000000466209
	// succ:  l0000000000466209
l00000000004666D0:
	rcx = rsi
	call rax (retsize: 8;)
	goto l00000000004661E7
	// succ:  l00000000004661E7
l00000000004666E0:
	rdx = Mem0[rsp + 0x28<64>:word64]
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000466530
	// succ:  l0000000000466530
l00000000004666F3:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000466341
	// succ:  l0000000000466341
l0000000000466710:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l00000000004663A3
	// succ:  l00000000004663A3
l0000000000466730:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l00000000004663FA
	// succ:  l00000000004663FA
l0000000000466750:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000466462
	// succ:  l0000000000466462
l0000000000466770:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000466277
	// succ:  l0000000000466277
l0000000000466790:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l00000000004662D9
	// succ:  l00000000004662D9
l00000000004667B0:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l00000000004664C1
	// succ:  l00000000004664C1
l00000000004667D0:
	r9 = r15
	r8 = rsi + 0xB<64>
	rdx = rsi
	rcx = r14
	call rax (retsize: 8;)
	goto l00000000004665CB
	// succ:  l00000000004665CB
fn00000000004661A0_exit:


// fn0000000000466910
// Return size: 8
define fn0000000000466910
fn0000000000466910_entry:
	rsp = fp
	// succ:  l0000000000466910
l0000000000466910:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 0x20<64>:byte] = 0<8>
	Mem0[rcx + 0x21<64>:byte] = 0<8>
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497690<p64>
	Mem0[rcx + 0x22<64>:byte] = 0<8>
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	Mem0[rcx + 0x38<64>:word64] = 0<64>
	Mem0[rcx + 0x40<64>:word64] = 0<64>
	Mem0[rcx + 0x48<64>:word64] = 0<64>
	Mem0[rcx + 0x50<64>:word64] = 0<64>
	Mem0[rcx + 0x58<64>:word32] = 0<32>
	Mem0[rcx + 0x5C<64>:byte] = 0<8>
	Mem0[rcx + 0x5D<64>:byte] = 0<8>
	Mem0[rcx + 0x5E<64>:byte] = 0<8>
	Mem0[rcx + 0x5F<64>:byte] = 0<8>
	Mem0[rcx + 0x60<64>:byte] = 0<8>
	Mem0[rcx + 0x61<64>:byte] = 0<8>
	Mem0[rcx + 0x62<64>:byte] = 0<8>
	Mem0[rcx + 0x63<64>:byte] = 0<8>
	Mem0[rcx + 0x6F<64>:byte] = 0<8>
	return
	// succ:  fn0000000000466910_exit
fn0000000000466910_exit:


// fn00000000004669A0
// Return size: 8
define fn00000000004669A0
fn00000000004669A0_entry:
	rsp = fp
	// succ:  l00000000004669A0
l00000000004669A0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 0x20<64>:byte] = 0<8>
	Mem0[rcx + 0x21<64>:byte] = 0<8>
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497690<p64>
	Mem0[rcx + 0x22<64>:byte] = 0<8>
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	Mem0[rcx + 0x38<64>:word64] = 0<64>
	Mem0[rcx + 0x40<64>:word64] = 0<64>
	Mem0[rcx + 0x48<64>:word64] = 0<64>
	Mem0[rcx + 0x50<64>:word64] = 0<64>
	Mem0[rcx + 0x58<64>:word32] = 0<32>
	Mem0[rcx + 0x5C<64>:byte] = 0<8>
	Mem0[rcx + 0x5D<64>:byte] = 0<8>
	Mem0[rcx + 0x5E<64>:byte] = 0<8>
	Mem0[rcx + 0x5F<64>:byte] = 0<8>
	Mem0[rcx + 0x60<64>:byte] = 0<8>
	Mem0[rcx + 0x61<64>:byte] = 0<8>
	Mem0[rcx + 0x62<64>:byte] = 0<8>
	Mem0[rcx + 0x63<64>:byte] = 0<8>
	Mem0[rcx + 0x6F<64>:byte] = 0<8>
	return
	// succ:  fn00000000004669A0_exit
fn00000000004669A0_exit:


// fn0000000000466A30
// Return size: 0
define fn0000000000466A30
fn0000000000466A30_entry:
	rsp = fp
	// succ:  l0000000000466A30
l0000000000466A30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000466A50 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000466A45_thunk_fn0000000000475550
l0000000000466A45_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000466A30_exit
fn0000000000466A30_exit:


// fn0000000000466A50
// Return size: 0
define fn0000000000466A50
fn0000000000466A50_entry:
	rsp = fp
	// succ:  l0000000000466A50
l0000000000466A50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0x6F<64>:byte] - 0<8>)
	rax = 0x0000000000497690<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	branch Test(EQ,Z) l0000000000466AA0
	// succ:  l0000000000466A68 l0000000000466AA0
l0000000000466A68:
	rcx = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000466A76
	// succ:  l0000000000466A71 l0000000000466A76
l0000000000466A71:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000466A76
l0000000000466A76:
	rcx = Mem0[rbx + 0x28<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000466A84
	// succ:  l0000000000466A7F l0000000000466A84
l0000000000466A7F:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000466A84
l0000000000466A84:
	rcx = Mem0[rbx + 0x38<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000466A92
	// succ:  l0000000000466A8D l0000000000466A92
l0000000000466A8D:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000466A92
l0000000000466A92:
	rcx = Mem0[rbx + 0x48<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000466AA0
	// succ:  l0000000000466A9B l0000000000466AA0
l0000000000466A9B:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000466AA0
l0000000000466AA0:
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000466AA8_thunk_fn000000000046AD20
l0000000000466AA8_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000466A50_exit
fn0000000000466A50_exit:


// fn0000000000466AB0
// Return size: 0
define fn0000000000466AB0
fn0000000000466AB0_entry:
	rsp = fp
	// succ:  l0000000000466AB0
l0000000000466AB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0x6F<64>:byte] - 0<8>)
	rax = 0x0000000000497690<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	branch Test(EQ,Z) l0000000000466B00
	// succ:  l0000000000466AC8 l0000000000466B00
l0000000000466AC8:
	rcx = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000466AD6
	// succ:  l0000000000466AD1 l0000000000466AD6
l0000000000466AD1:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000466AD6
l0000000000466AD6:
	rcx = Mem0[rbx + 0x28<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000466AE4
	// succ:  l0000000000466ADF l0000000000466AE4
l0000000000466ADF:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000466AE4
l0000000000466AE4:
	rcx = Mem0[rbx + 0x38<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000466AF2
	// succ:  l0000000000466AED l0000000000466AF2
l0000000000466AED:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000466AF2
l0000000000466AF2:
	rcx = Mem0[rbx + 0x48<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000466B00
	// succ:  l0000000000466AFB l0000000000466B00
l0000000000466AFB:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000466B00
l0000000000466B00:
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000466B08_thunk_fn000000000046AD20
l0000000000466B08_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000466AB0_exit
fn0000000000466AB0_exit:


// fn0000000000466B10
// Return size: 8
define fn0000000000466B10
fn0000000000466B10_entry:
	rsp = fp
	// succ:  l0000000000466B10
l0000000000466B10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xC8<64>
	SCZO = cond(rsp)
	Mem0[rcx + 0x6F<64>:byte] = 1<8>
	rbx = rcx
	rcx = rdx
	r15 = rdx
	call fn0000000000472DE0 (retsize: 8;)
	rsi = rax
	rax = Mem0[rax:word64]
	rdx = 0x00000000004294F0<p64>
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000467040
	// succ:  l0000000000466B4F l0000000000467040
l0000000000466B4F:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x21<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000466B57
l0000000000466B57:
	Mem0[rbx + 0x21<64>:byte] = al
	rax = Mem0[rsi:word64]
	rdx = 0x0000000000429560<p64>
	rax = Mem0[rax + 0x18<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000467030
	// succ:  l0000000000466B71 l0000000000467030
l0000000000466B71:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x22<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000466B79
l0000000000466B79:
	Mem0[rbx + 0x22<64>:byte] = al
	rdx = Mem0[rsi:word64]
	rcx = 0x00000000004294E0<p64>
	rax = Mem0[rdx + 0x40<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000467022
	// succ:  l0000000000466B93 l0000000000467022
l0000000000466B93:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = Mem0[rax + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000466B9A
l0000000000466B9A:
	Mem0[rbx + 0x58<64>:word32] = eax
	rax = Mem0[rdx + 0x20<64>:word64]
	rbp = 0x0000000000429330<p64>
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000467013
	// succ:  l0000000000466BB1 l0000000000467013
l0000000000466BB1:
	rax = Mem0[rsi + 0x10<64>:word64]
	rcx = rsp + 0x40<64>
	r8 = rsp + 0x38<64>
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000466BC8
l0000000000466BC8:
	rcx = Mem0[rsp + 0x40<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004670E0
	// succ:  l0000000000466BE7 l00000000004670E0
l0000000000466BE7:
	rcx = Mem0[rbx + 0x18<64>:word64]
	call fn0000000000475560 (retsize: 8;)
	rdi = rax
	rax = Mem0[rsi:word64]
	r12 = Mem0[rbx + 0x18<64>:word64]
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000467001
	// succ:  l0000000000466C07 l0000000000467001
l0000000000466C07:
	rax = Mem0[rsi + 0x10<64>:word64]
	rbp = rsp + 0x50<64>
	r8 = rsp + 0x39<64>
	rcx = rbp
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000466C21
l0000000000466C21:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = r12
	rdx = rdi
	rcx = rbp
	call fn00000000004286D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0x50<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000467100
	// succ:  l0000000000466C49 l0000000000467100
l0000000000466C49:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbx + 0x18<64>:word64] - 0<64>)
	Mem0[rbx + 0x10<64>:word64] = rdi
	branch Test(EQ,Z) l0000000000466C61
	// succ:  l0000000000466C56 l0000000000466C61
l0000000000466C56:
	eax = CONVERT(Mem0[rdi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 0x7D<8>)
	al = CONVERT(Test(ULE,CZ), bool, int8)
	// succ:  l0000000000466C61
l0000000000466C61:
	Mem0[rbx + 0x20<64>:byte] = al
	rax = Mem0[rsi:word64]
	rbp = 0x00000000004294B0<p64>
	rax = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000466FF2
	// succ:  l0000000000466C7B l0000000000466FF2
l0000000000466C7B:
	rax = Mem0[rsi + 0x10<64>:word64]
	rcx = rsp + 0x60<64>
	r8 = rsp + 0x3A<64>
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000466C92
l0000000000466C92:
	rcx = Mem0[rsp + 0x60<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x30<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000467063
	// succ:  l0000000000466CB1 l0000000000467063
l0000000000466CB1:
	rcx = Mem0[rbx + 0x30<64>:word64]
	call fn0000000000475560 (retsize: 8;)
	r13 = rax
	rax = Mem0[rsi:word64]
	r12 = Mem0[rbx + 0x30<64>:word64]
	rax = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000466FE0
	// succ:  l0000000000466CD1 l0000000000466FE0
l0000000000466CD1:
	rax = Mem0[rsi + 0x10<64>:word64]
	rbp = rsp + 0x70<64>
	r8 = rsp + 0x3B<64>
	rcx = rbp
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000466CEB
l0000000000466CEB:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = r12
	rdx = r13
	rcx = rbp
	call fn00000000004286D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0x70<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000467080
	// succ:  l0000000000466D13 l0000000000467080
l0000000000466D13:
	rax = Mem0[rsi:word64]
	Mem0[rbx + 0x28<64>:word64] = r13
	rbp = 0x0000000000429530<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000466FC5
	// succ:  l0000000000466D2E l0000000000466FC5
l0000000000466D2E:
	rax = Mem0[rsi + 0x10<64>:word64]
	rcx = rsp + 0x80<64>
	r8 = rsp + 0x3C<64>
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000466D48
l0000000000466D48:
	rcx = Mem0[rsp + 0x80<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x40<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004670A0
	// succ:  l0000000000466D6A l00000000004670A0
l0000000000466D6A:
	rcx = Mem0[rbx + 0x40<64>:word64]
	call fn0000000000475560 (retsize: 8;)
	r12 = rax
	rax = Mem0[rsi:word64]
	r14 = Mem0[rbx + 0x40<64>:word64]
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000466FB0
	// succ:  l0000000000466D8A l0000000000466FB0
l0000000000466D8A:
	rax = Mem0[rsi + 0x10<64>:word64]
	rbp = rsp + 0x90<64>
	r8 = rsp + 0x3D<64>
	rcx = rbp
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000466DA7
l0000000000466DA7:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = r14
	rdx = r12
	rcx = rbp
	call fn00000000004286D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0x90<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004670C0
	// succ:  l0000000000466DD2 l00000000004670C0
l0000000000466DD2:
	rax = Mem0[rsi:word64]
	Mem0[rbx + 0x38<64>:word64] = r12
	r14 = 0x0000000000429500<p64>
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - r14)
	branch Test(NE,Z) l0000000000466F95
	// succ:  l0000000000466DED l0000000000466F95
l0000000000466DED:
	rax = Mem0[rsi + 0x10<64>:word64]
	r8 = rsp + 0x3E<64>
	rdx = Mem0[rax + 0x48<64>:word64]
	rax = rsp + 0xA0<64>
	rcx = rax
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000466E0F
l0000000000466E0F:
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x50<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000467120
	// succ:  l0000000000466E31 l0000000000467120
l0000000000466E31:
	rcx = Mem0[rbx + 0x50<64>:word64]
	call fn0000000000475560 (retsize: 8;)
	rbp = rax
	rax = Mem0[rbx + 0x50<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	rax = Mem0[rsi:word64]
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - r14)
	branch Test(NE,Z) l0000000000466F80
	// succ:  l0000000000466E56 l0000000000466F80
l0000000000466E56:
	rax = Mem0[rsi + 0x10<64>:word64]
	r14 = rsp + 0xB0<64>
	r8 = rsp + 0x3F<64>
	rcx = r14
	rdx = Mem0[rax + 0x48<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000466E73
l0000000000466E73:
	r8 = Mem0[rsp + 0x20<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rdx = rbp
	rcx = r14
	call fn00000000004286D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0xB0<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000467050
	// succ:  l0000000000466EA0 l0000000000467050
l0000000000466EA0:
	rax = Mem0[rsi:word64]
	Mem0[rbx + 0x48<64>:word64] = rbp
	rdx = 0x00000000004293D0<p64>
	rax = Mem0[rax + 0x48<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000466F70
	// succ:  l0000000000466EBB l0000000000466F70
l0000000000466EBB:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = Mem0[rax + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000466EC2
l0000000000466EC2:
	Mem0[rbx + 0x5C<64>:word32] = eax
	rax = Mem0[rsi:word64]
	rdx = 0x00000000004293C0<p64>
	rax = Mem0[rax + 0x50<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000466F60
	// succ:  l0000000000466EDC l0000000000466F60
l0000000000466EDC:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = Mem0[rax + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000466EE3
l0000000000466EE3:
	Mem0[rbx + 0x60<64>:word32] = eax
	rcx = r15
	call fn0000000000472FC0 (retsize: 8;)
	r14 = rax
	rax = Mem0[0x0000000000491720<p64>:word64]
	r15 = rbx + 0x64<64>
	rsi = Mem0[rax:word64]
	eax = CONVERT(Mem0[r14 + 0x38<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 1<8>)
	branch Test(EQ,Z) l0000000000466F23
	// succ:  l0000000000466F08 l0000000000466F23
l0000000000466F08:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000466F50
	// succ:  l0000000000466F0C l0000000000466F50
l0000000000466F0C:
	rax = Mem0[r14:word64]
	rdx = 0x000000000042B5D0<p64>
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000467140
	// succ:  l0000000000466F23 l0000000000467140
l0000000000466F23:
	rax = Mem0[rsi:word64]
	Mem0[rbx + 0x64<64>:word64] = rax
	eax = CONVERT(Mem0[rsi + 8<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r15 + 8<64>:word16] = ax
	eax = CONVERT(Mem0[rsi + 0xA<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r15 + 0xA<64>:byte] = al
	// succ:  l0000000000466F3B
l0000000000466F3B:
	rsp = rsp + 0xC8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000466B10_exit
l0000000000466F50:
	rcx = r14
	call fn000000000042B320 (retsize: 8;)
	goto l0000000000466F0C
	// succ:  l0000000000466F0C
l0000000000466F60:
	rcx = rsi
	call rax (retsize: 8;)
	goto l0000000000466EE3
	// succ:  l0000000000466EE3
l0000000000466F70:
	rcx = rsi
	call rax (retsize: 8;)
	goto l0000000000466EC2
	// succ:  l0000000000466EC2
l0000000000466F80:
	r14 = rsp + 0xB0<64>
	rdx = rsi
	rcx = r14
	call rax (retsize: 8;)
	goto l0000000000466E73
	// succ:  l0000000000466E73
l0000000000466F95:
	rdx = rsp + 0xA0<64>
	rcx = rdx
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rsi
	call rax (retsize: 8;)
	goto l0000000000466E0F
	// succ:  l0000000000466E0F
l0000000000466FB0:
	rbp = rsp + 0x90<64>
	rdx = rsi
	rcx = rbp
	call rax (retsize: 8;)
	goto l0000000000466DA7
	// succ:  l0000000000466DA7
l0000000000466FC5:
	rcx = rsp + 0x80<64>
	rdx = rsi
	call rax (retsize: 8;)
	goto l0000000000466D48
	// succ:  l0000000000466D48
l0000000000466FE0:
	rbp = rsp + 0x70<64>
	rdx = rsi
	rcx = rbp
	call rax (retsize: 8;)
	goto l0000000000466CEB
	// succ:  l0000000000466CEB
l0000000000466FF2:
	rcx = rsp + 0x60<64>
	rdx = rsi
	call rax (retsize: 8;)
	goto l0000000000466C92
	// succ:  l0000000000466C92
l0000000000467001:
	rbp = rsp + 0x50<64>
	rdx = rsi
	rcx = rbp
	call rax (retsize: 8;)
	goto l0000000000466C21
	// succ:  l0000000000466C21
l0000000000467013:
	rcx = rsp + 0x40<64>
	rdx = rsi
	call rax (retsize: 8;)
	goto l0000000000466BC8
	// succ:  l0000000000466BC8
l0000000000467022:
	rcx = rsi
	call rax (retsize: 8;)
	rdx = Mem0[rsi:word64]
	goto l0000000000466B9A
	// succ:  l0000000000466B9A
l0000000000467030:
	rcx = rsi
	call rax (retsize: 8;)
	goto l0000000000466B79
	// succ:  l0000000000466B79
l0000000000467040:
	rcx = rsi
	call rax (retsize: 8;)
	goto l0000000000466B57
	// succ:  l0000000000466B57
l0000000000467050:
	rdx = Mem0[rsp + 0x28<64>:word64]
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000466EA0
	// succ:  l0000000000466EA0
l0000000000467063:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000466CB1
	// succ:  l0000000000466CB1
l0000000000467080:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000466D13
	// succ:  l0000000000466D13
l00000000004670A0:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000466D6A
	// succ:  l0000000000466D6A
l00000000004670C0:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000466DD2
	// succ:  l0000000000466DD2
l00000000004670E0:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000466BE7
	// succ:  l0000000000466BE7
l0000000000467100:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000466C49
	// succ:  l0000000000466C49
l0000000000467120:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000466E31
	// succ:  l0000000000466E31
l0000000000467140:
	r9 = r15
	r8 = rsi + 0xB<64>
	rdx = rsi
	rcx = r14
	call rax (retsize: 8;)
	goto l0000000000466F3B
	// succ:  l0000000000466F3B
fn0000000000466B10_exit:


// fn0000000000467280
// Return size: 8
define fn0000000000467280
fn0000000000467280_entry:
	rsp = fp
	// succ:  l0000000000467280
l0000000000467280:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 0x20<64>:byte] = 0<8>
	Mem0[rcx + 0x21<64>:byte] = 0<8>
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004976B0<p64>
	Mem0[rcx + 0x22<64>:byte] = 0<8>
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	Mem0[rcx + 0x38<64>:word64] = 0<64>
	Mem0[rcx + 0x40<64>:word64] = 0<64>
	Mem0[rcx + 0x48<64>:word64] = 0<64>
	Mem0[rcx + 0x50<64>:word64] = 0<64>
	Mem0[rcx + 0x58<64>:word32] = 0<32>
	Mem0[rcx + 0x5C<64>:byte] = 0<8>
	Mem0[rcx + 0x5D<64>:byte] = 0<8>
	Mem0[rcx + 0x5E<64>:byte] = 0<8>
	Mem0[rcx + 0x5F<64>:byte] = 0<8>
	Mem0[rcx + 0x60<64>:byte] = 0<8>
	Mem0[rcx + 0x61<64>:byte] = 0<8>
	Mem0[rcx + 0x62<64>:byte] = 0<8>
	Mem0[rcx + 0x63<64>:byte] = 0<8>
	Mem0[rcx + 0x6F<64>:byte] = 0<8>
	return
	// succ:  fn0000000000467280_exit
fn0000000000467280_exit:


// fn0000000000467310
// Return size: 8
define fn0000000000467310
fn0000000000467310_entry:
	rsp = fp
	// succ:  l0000000000467310
l0000000000467310:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 0x20<64>:byte] = 0<8>
	Mem0[rcx + 0x21<64>:byte] = 0<8>
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004976B0<p64>
	Mem0[rcx + 0x22<64>:byte] = 0<8>
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	Mem0[rcx + 0x38<64>:word64] = 0<64>
	Mem0[rcx + 0x40<64>:word64] = 0<64>
	Mem0[rcx + 0x48<64>:word64] = 0<64>
	Mem0[rcx + 0x50<64>:word64] = 0<64>
	Mem0[rcx + 0x58<64>:word32] = 0<32>
	Mem0[rcx + 0x5C<64>:byte] = 0<8>
	Mem0[rcx + 0x5D<64>:byte] = 0<8>
	Mem0[rcx + 0x5E<64>:byte] = 0<8>
	Mem0[rcx + 0x5F<64>:byte] = 0<8>
	Mem0[rcx + 0x60<64>:byte] = 0<8>
	Mem0[rcx + 0x61<64>:byte] = 0<8>
	Mem0[rcx + 0x62<64>:byte] = 0<8>
	Mem0[rcx + 0x63<64>:byte] = 0<8>
	Mem0[rcx + 0x6F<64>:byte] = 0<8>
	return
	// succ:  fn0000000000467310_exit
fn0000000000467310_exit:


// fn00000000004673A0
// Return size: 0
define fn00000000004673A0
fn00000000004673A0_entry:
	rsp = fp
	// succ:  l00000000004673A0
l00000000004673A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn00000000004673C0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004673B5_thunk_fn0000000000475550
l00000000004673B5_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn00000000004673A0_exit
fn00000000004673A0_exit:


// fn00000000004673C0
// Return size: 0
define fn00000000004673C0
fn00000000004673C0_entry:
	rsp = fp
	// succ:  l00000000004673C0
l00000000004673C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0x6F<64>:byte] - 0<8>)
	rax = 0x00000000004976B0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	branch Test(EQ,Z) l0000000000467410
	// succ:  l00000000004673D8 l0000000000467410
l00000000004673D8:
	rcx = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004673E6
	// succ:  l00000000004673E1 l00000000004673E6
l00000000004673E1:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l00000000004673E6
l00000000004673E6:
	rcx = Mem0[rbx + 0x28<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004673F4
	// succ:  l00000000004673EF l00000000004673F4
l00000000004673EF:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l00000000004673F4
l00000000004673F4:
	rcx = Mem0[rbx + 0x38<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000467402
	// succ:  l00000000004673FD l0000000000467402
l00000000004673FD:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000467402
l0000000000467402:
	rcx = Mem0[rbx + 0x48<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000467410
	// succ:  l000000000046740B l0000000000467410
l000000000046740B:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000467410
l0000000000467410:
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000467418_thunk_fn000000000046AD20
l0000000000467418_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn00000000004673C0_exit
fn00000000004673C0_exit:


// fn0000000000467420
// Return size: 0
define fn0000000000467420
fn0000000000467420_entry:
	rsp = fp
	// succ:  l0000000000467420
l0000000000467420:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0x6F<64>:byte] - 0<8>)
	rax = 0x00000000004976B0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	branch Test(EQ,Z) l0000000000467470
	// succ:  l0000000000467438 l0000000000467470
l0000000000467438:
	rcx = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000467446
	// succ:  l0000000000467441 l0000000000467446
l0000000000467441:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000467446
l0000000000467446:
	rcx = Mem0[rbx + 0x28<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000467454
	// succ:  l000000000046744F l0000000000467454
l000000000046744F:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000467454
l0000000000467454:
	rcx = Mem0[rbx + 0x38<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000467462
	// succ:  l000000000046745D l0000000000467462
l000000000046745D:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000467462
l0000000000467462:
	rcx = Mem0[rbx + 0x48<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000467470
	// succ:  l000000000046746B l0000000000467470
l000000000046746B:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000467470
l0000000000467470:
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000467478_thunk_fn000000000046AD20
l0000000000467478_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000467420_exit
fn0000000000467420_exit:


// fn0000000000467480
// Return size: 8
define fn0000000000467480
fn0000000000467480_entry:
	rsp = fp
	// succ:  l0000000000467480
l0000000000467480:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xC8<64>
	SCZO = cond(rsp)
	Mem0[rcx + 0x7A<64>:byte] = 1<8>
	rbx = rcx
	rcx = rdx
	r15 = rdx
	call fn0000000000472E40 (retsize: 8;)
	rdx = Mem0[rax:word64]
	rsi = rax
	rcx = 0x0000000000429830<p64>
	rax = Mem0[rdx + 0x10<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l00000000004678E0
	// succ:  l00000000004674BF l00000000004678E0
l00000000004674BF:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x22<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004674C7
l00000000004674C7:
	Mem0[rbx + 0x22<64>:word16] = ax
	rax = Mem0[rdx + 0x18<64>:word64]
	rcx = 0x00000000004298A0<p64>
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l00000000004679C0
	// succ:  l00000000004674DF l00000000004679C0
l00000000004674DF:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x24<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004674E7
l00000000004674E7:
	Mem0[rbx + 0x24<64>:word16] = ax
	rax = Mem0[rdx + 0x40<64>:word64]
	rcx = 0x0000000000429820<p64>
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l00000000004679B2
	// succ:  l00000000004674FF l00000000004679B2
l00000000004674FF:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = Mem0[rax + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000467506
l0000000000467506:
	Mem0[rbx + 0x58<64>:word32] = eax
	rax = Mem0[rdx + 0x20<64>:word64]
	rbp = 0x0000000000429670<p64>
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l00000000004679A3
	// succ:  l000000000046751D l00000000004679A3
l000000000046751D:
	rax = Mem0[rsi + 0x10<64>:word64]
	rcx = rsp + 0x40<64>
	r8 = rsp + 0x38<64>
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000467534
l0000000000467534:
	rcx = Mem0[rsp + 0x40<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000467A80
	// succ:  l0000000000467553 l0000000000467A80
l0000000000467553:
	rcx = Mem0[rbx + 0x18<64>:word64]
	call fn0000000000475560 (retsize: 8;)
	rdi = rax
	rax = Mem0[rsi:word64]
	r12 = Mem0[rbx + 0x18<64>:word64]
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000467991
	// succ:  l0000000000467573 l0000000000467991
l0000000000467573:
	rax = Mem0[rsi + 0x10<64>:word64]
	rbp = rsp + 0x50<64>
	r8 = rsp + 0x39<64>
	rcx = rbp
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l000000000046758D
l000000000046758D:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = r12
	rdx = rdi
	rcx = rbp
	call fn00000000004286D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0x50<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000467AA0
	// succ:  l00000000004675B5 l0000000000467AA0
l00000000004675B5:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbx + 0x18<64>:word64] - 0<64>)
	Mem0[rbx + 0x10<64>:word64] = rdi
	branch Test(EQ,Z) l00000000004675CD
	// succ:  l00000000004675C2 l00000000004675CD
l00000000004675C2:
	eax = CONVERT(Mem0[rdi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 0x7D<8>)
	al = CONVERT(Test(ULE,CZ), bool, int8)
	// succ:  l00000000004675CD
l00000000004675CD:
	Mem0[rbx + 0x20<64>:byte] = al
	rax = Mem0[rsi:word64]
	rbp = 0x00000000004297F0<p64>
	rax = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000467982
	// succ:  l00000000004675E7 l0000000000467982
l00000000004675E7:
	rax = Mem0[rsi + 0x10<64>:word64]
	rcx = rsp + 0x60<64>
	r8 = rsp + 0x3A<64>
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	// succ:  l00000000004675FE
l00000000004675FE:
	rcx = Mem0[rsp + 0x60<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x30<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004679D0
	// succ:  l000000000046761D l00000000004679D0
l000000000046761D:
	rdx = Mem0[rbx + 0x30<64>:word64]
	rcx = 0x3F80000000000000<64>
	rax = rdx + rdx
	SCZO = cond(rdx - rcx)
	rcx = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(UGT,CZ) l000000000046763D
	// succ:  l0000000000467639_1 l000000000046763D
l0000000000467639_1:
	rcx = rax
	// succ:  l000000000046763D
l000000000046763D:
	call fn0000000000475560 (retsize: 8;)
	r13 = rax
	rax = Mem0[rsi:word64]
	r12 = Mem0[rbx + 0x30<64>:word64]
	rax = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000467970
	// succ:  l0000000000467659 l0000000000467970
l0000000000467659:
	rax = Mem0[rsi + 0x10<64>:word64]
	rbp = rsp + 0x70<64>
	r8 = rsp + 0x3B<64>
	rcx = rbp
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	// succ:  l0000000000467673
l0000000000467673:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = r12
	rdx = r13
	rcx = rbp
	call fn00000000004277C0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0x70<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004679F0
	// succ:  l000000000046769B l00000000004679F0
l000000000046769B:
	rax = Mem0[rsi:word64]
	Mem0[rbx + 0x28<64>:word64] = r13
	rbp = 0x0000000000429870<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000467955
	// succ:  l00000000004676B6 l0000000000467955
l00000000004676B6:
	rax = Mem0[rsi + 0x10<64>:word64]
	rcx = rsp + 0x80<64>
	r8 = rsp + 0x3C<64>
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	// succ:  l00000000004676D0
l00000000004676D0:
	rcx = Mem0[rsp + 0x80<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x40<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000467A40
	// succ:  l00000000004676F2 l0000000000467A40
l00000000004676F2:
	rdx = Mem0[rbx + 0x40<64>:word64]
	rcx = 0x3F80000000000000<64>
	rax = rdx + rdx
	SCZO = cond(rdx - rcx)
	rcx = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(UGT,CZ) l0000000000467712
	// succ:  l000000000046770E_1 l0000000000467712
l000000000046770E_1:
	rcx = rax
	// succ:  l0000000000467712
l0000000000467712:
	call fn0000000000475560 (retsize: 8;)
	r12 = rax
	rax = Mem0[rsi:word64]
	r14 = Mem0[rbx + 0x40<64>:word64]
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000467940
	// succ:  l000000000046772E l0000000000467940
l000000000046772E:
	rax = Mem0[rsi + 0x10<64>:word64]
	rbp = rsp + 0x90<64>
	r8 = rsp + 0x3D<64>
	rcx = rbp
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	// succ:  l000000000046774B
l000000000046774B:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = r14
	rdx = r12
	rcx = rbp
	call fn00000000004277C0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0x90<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000467A23
	// succ:  l0000000000467776 l0000000000467A23
l0000000000467776:
	rax = Mem0[rsi:word64]
	Mem0[rbx + 0x38<64>:word64] = r12
	r14 = 0x0000000000429840<p64>
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - r14)
	branch Test(NE,Z) l0000000000467925
	// succ:  l0000000000467791 l0000000000467925
l0000000000467791:
	rax = Mem0[rsi + 0x10<64>:word64]
	r8 = rsp + 0x3E<64>
	rdx = Mem0[rax + 0x48<64>:word64]
	rax = rsp + 0xA0<64>
	rcx = rax
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn000000000044A8B0 (retsize: 8;)
	// succ:  l00000000004677B3
l00000000004677B3:
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x50<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000467A60
	// succ:  l00000000004677D5 l0000000000467A60
l00000000004677D5:
	rdx = Mem0[rbx + 0x50<64>:word64]
	rcx = 0x3F80000000000000<64>
	rax = rdx + rdx
	SCZO = cond(rdx - rcx)
	rcx = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(UGT,CZ) l00000000004677F5
	// succ:  l00000000004677F1_1 l00000000004677F5
l00000000004677F1_1:
	rcx = rax
	// succ:  l00000000004677F5
l00000000004677F5:
	call fn0000000000475560 (retsize: 8;)
	rbp = rax
	rax = Mem0[rbx + 0x50<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	rax = Mem0[rsi:word64]
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - r14)
	branch Test(NE,Z) l0000000000467910
	// succ:  l0000000000467816 l0000000000467910
l0000000000467816:
	rax = Mem0[rsi + 0x10<64>:word64]
	r14 = rsp + 0xB0<64>
	r8 = rsp + 0x3F<64>
	rcx = r14
	rdx = Mem0[rax + 0x48<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	// succ:  l0000000000467833
l0000000000467833:
	r8 = Mem0[rsp + 0x20<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rdx = rbp
	rcx = r14
	call fn00000000004277C0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0xB0<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000467A10
	// succ:  l0000000000467860 l0000000000467A10
l0000000000467860:
	rax = Mem0[rsi:word64]
	Mem0[rbx + 0x48<64>:word64] = rbp
	rdx = 0x0000000000429710<p64>
	rax = Mem0[rax + 0x48<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000467900
	// succ:  l000000000046787B l0000000000467900
l000000000046787B:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = Mem0[rax + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000467882
l0000000000467882:
	Mem0[rbx + 0x5C<64>:word32] = eax
	rax = Mem0[rsi:word64]
	rdx = 0x0000000000429700<p64>
	rax = Mem0[rax + 0x50<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000004678F0
	// succ:  l0000000000467898 l00000000004678F0
l0000000000467898:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = Mem0[rax + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000046789F
l000000000046789F:
	Mem0[rbx + 0x60<64>:word32] = eax
	rcx = r15
	call fn0000000000473020 (retsize: 8;)
	rdx = Mem0[0x0000000000491720<p64>:word64]
	r10 = Mem0[rax:word64]
	r9 = rbx + 0x64<64>
	rcx = rax
	rdx = Mem0[rdx:word64]
	r8 = rdx + 0xB<64>
	call Mem0[r10 + 0x58<64>:word64] (retsize: 8;)
	rsp = rsp + 0xC8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000467480_exit
l00000000004678E0:
	rcx = rsi
	call rax (retsize: 8;)
	rdx = Mem0[rsi:word64]
	goto l00000000004674C7
	// succ:  l00000000004674C7
l00000000004678F0:
	rcx = rsi
	call rax (retsize: 8;)
	goto l000000000046789F
	// succ:  l000000000046789F
l0000000000467900:
	rcx = rsi
	call rax (retsize: 8;)
	goto l0000000000467882
	// succ:  l0000000000467882
l0000000000467910:
	r14 = rsp + 0xB0<64>
	rdx = rsi
	rcx = r14
	call rax (retsize: 8;)
	goto l0000000000467833
	// succ:  l0000000000467833
l0000000000467925:
	rdx = rsp + 0xA0<64>
	rcx = rdx
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rsi
	call rax (retsize: 8;)
	goto l00000000004677B3
	// succ:  l00000000004677B3
l0000000000467940:
	rbp = rsp + 0x90<64>
	rdx = rsi
	rcx = rbp
	call rax (retsize: 8;)
	goto l000000000046774B
	// succ:  l000000000046774B
l0000000000467955:
	rcx = rsp + 0x80<64>
	rdx = rsi
	call rax (retsize: 8;)
	goto l00000000004676D0
	// succ:  l00000000004676D0
l0000000000467970:
	rbp = rsp + 0x70<64>
	rdx = rsi
	rcx = rbp
	call rax (retsize: 8;)
	goto l0000000000467673
	// succ:  l0000000000467673
l0000000000467982:
	rcx = rsp + 0x60<64>
	rdx = rsi
	call rax (retsize: 8;)
	goto l00000000004675FE
	// succ:  l00000000004675FE
l0000000000467991:
	rbp = rsp + 0x50<64>
	rdx = rsi
	rcx = rbp
	call rax (retsize: 8;)
	goto l000000000046758D
	// succ:  l000000000046758D
l00000000004679A3:
	rcx = rsp + 0x40<64>
	rdx = rsi
	call rax (retsize: 8;)
	goto l0000000000467534
	// succ:  l0000000000467534
l00000000004679B2:
	rcx = rsi
	call rax (retsize: 8;)
	rdx = Mem0[rsi:word64]
	goto l0000000000467506
	// succ:  l0000000000467506
l00000000004679C0:
	rcx = rsi
	call rax (retsize: 8;)
	rdx = Mem0[rsi:word64]
	goto l00000000004674E7
	// succ:  l00000000004674E7
l00000000004679D0:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000449360 (retsize: 8;)
	goto l000000000046761D
	// succ:  l000000000046761D
l00000000004679F0:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000449360 (retsize: 8;)
	goto l000000000046769B
	// succ:  l000000000046769B
l0000000000467A10:
	rdx = Mem0[rsp + 0x28<64>:word64]
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000449360 (retsize: 8;)
	goto l0000000000467860
	// succ:  l0000000000467860
l0000000000467A23:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000449360 (retsize: 8;)
	goto l0000000000467776
	// succ:  l0000000000467776
l0000000000467A40:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000449360 (retsize: 8;)
	goto l00000000004676F2
	// succ:  l00000000004676F2
l0000000000467A60:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000449360 (retsize: 8;)
	goto l00000000004677D5
	// succ:  l00000000004677D5
l0000000000467A80:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000467553
	// succ:  l0000000000467553
l0000000000467AA0:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l00000000004675B5
	// succ:  l00000000004675B5
fn0000000000467480_exit:


// fn0000000000467BF0
// Return size: 8
define fn0000000000467BF0
fn0000000000467BF0_entry:
	rsp = fp
	// succ:  l0000000000467BF0
l0000000000467BF0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 0x20<64>:byte] = 0<8>
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004976D0<p64>
	Mem0[rcx + 0x24<64>:word16] = dx
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx + 0x38<64>:word64] = 0<64>
	Mem0[rcx + 0x22<64>:word16] = ax
	Mem0[rcx + 0x40<64>:word64] = 0<64>
	Mem0[rcx + 0x48<64>:word64] = 0<64>
	Mem0[rcx + 0x50<64>:word64] = 0<64>
	Mem0[rcx + 0x58<64>:word32] = 0<32>
	Mem0[rcx + 0x5C<64>:byte] = 0<8>
	Mem0[rcx + 0x5D<64>:byte] = 0<8>
	Mem0[rcx + 0x5E<64>:byte] = 0<8>
	Mem0[rcx + 0x5F<64>:byte] = 0<8>
	Mem0[rcx + 0x60<64>:byte] = 0<8>
	Mem0[rcx + 0x61<64>:byte] = 0<8>
	Mem0[rcx + 0x62<64>:byte] = 0<8>
	Mem0[rcx + 0x63<64>:byte] = 0<8>
	Mem0[rcx + 0x7A<64>:byte] = 0<8>
	return
	// succ:  fn0000000000467BF0_exit
fn0000000000467BF0_exit:


// fn0000000000467C90
// Return size: 8
define fn0000000000467C90
fn0000000000467C90_entry:
	rsp = fp
	// succ:  l0000000000467C90
l0000000000467C90:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 0x20<64>:byte] = 0<8>
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004976D0<p64>
	Mem0[rcx + 0x24<64>:word16] = dx
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx + 0x38<64>:word64] = 0<64>
	Mem0[rcx + 0x22<64>:word16] = ax
	Mem0[rcx + 0x40<64>:word64] = 0<64>
	Mem0[rcx + 0x48<64>:word64] = 0<64>
	Mem0[rcx + 0x50<64>:word64] = 0<64>
	Mem0[rcx + 0x58<64>:word32] = 0<32>
	Mem0[rcx + 0x5C<64>:byte] = 0<8>
	Mem0[rcx + 0x5D<64>:byte] = 0<8>
	Mem0[rcx + 0x5E<64>:byte] = 0<8>
	Mem0[rcx + 0x5F<64>:byte] = 0<8>
	Mem0[rcx + 0x60<64>:byte] = 0<8>
	Mem0[rcx + 0x61<64>:byte] = 0<8>
	Mem0[rcx + 0x62<64>:byte] = 0<8>
	Mem0[rcx + 0x63<64>:byte] = 0<8>
	Mem0[rcx + 0x7A<64>:byte] = 0<8>
	return
	// succ:  fn0000000000467C90_exit
fn0000000000467C90_exit:


// fn0000000000467D30
// Return size: 0
define fn0000000000467D30
fn0000000000467D30_entry:
	rsp = fp
	// succ:  l0000000000467D30
l0000000000467D30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000467D50 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000467D45_thunk_fn0000000000475550
l0000000000467D45_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000467D30_exit
fn0000000000467D30_exit:


// fn0000000000467D50
// Return size: 0
define fn0000000000467D50
fn0000000000467D50_entry:
	rsp = fp
	// succ:  l0000000000467D50
l0000000000467D50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0x7A<64>:byte] - 0<8>)
	rax = 0x00000000004976D0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	branch Test(EQ,Z) l0000000000467DA0
	// succ:  l0000000000467D68 l0000000000467DA0
l0000000000467D68:
	rcx = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000467D76
	// succ:  l0000000000467D71 l0000000000467D76
l0000000000467D71:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000467D76
l0000000000467D76:
	rcx = Mem0[rbx + 0x28<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000467D84
	// succ:  l0000000000467D7F l0000000000467D84
l0000000000467D7F:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000467D84
l0000000000467D84:
	rcx = Mem0[rbx + 0x38<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000467D92
	// succ:  l0000000000467D8D l0000000000467D92
l0000000000467D8D:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000467D92
l0000000000467D92:
	rcx = Mem0[rbx + 0x48<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000467DA0
	// succ:  l0000000000467D9B l0000000000467DA0
l0000000000467D9B:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000467DA0
l0000000000467DA0:
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000467DA8_thunk_fn000000000046AD20
l0000000000467DA8_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000467D50_exit
fn0000000000467D50_exit:


// fn0000000000467DB0
// Return size: 0
define fn0000000000467DB0
fn0000000000467DB0_entry:
	rsp = fp
	// succ:  l0000000000467DB0
l0000000000467DB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0x7A<64>:byte] - 0<8>)
	rax = 0x00000000004976D0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	branch Test(EQ,Z) l0000000000467E00
	// succ:  l0000000000467DC8 l0000000000467E00
l0000000000467DC8:
	rcx = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000467DD6
	// succ:  l0000000000467DD1 l0000000000467DD6
l0000000000467DD1:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000467DD6
l0000000000467DD6:
	rcx = Mem0[rbx + 0x28<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000467DE4
	// succ:  l0000000000467DDF l0000000000467DE4
l0000000000467DDF:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000467DE4
l0000000000467DE4:
	rcx = Mem0[rbx + 0x38<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000467DF2
	// succ:  l0000000000467DED l0000000000467DF2
l0000000000467DED:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000467DF2
l0000000000467DF2:
	rcx = Mem0[rbx + 0x48<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000467E00
	// succ:  l0000000000467DFB l0000000000467E00
l0000000000467DFB:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000467E00
l0000000000467E00:
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000467E08_thunk_fn000000000046AD20
l0000000000467E08_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000467DB0_exit
fn0000000000467DB0_exit:


// fn0000000000467E10
// Return size: 8
define fn0000000000467E10
fn0000000000467E10_entry:
	rsp = fp
	// succ:  l0000000000467E10
l0000000000467E10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xC8<64>
	SCZO = cond(rsp)
	Mem0[rcx + 0x7A<64>:byte] = 1<8>
	rbx = rcx
	rcx = rdx
	r15 = rdx
	call fn0000000000472EA0 (retsize: 8;)
	rdx = Mem0[rax:word64]
	rsi = rax
	rcx = 0x0000000000429B70<p64>
	rax = Mem0[rdx + 0x10<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000468270
	// succ:  l0000000000467E4F l0000000000468270
l0000000000467E4F:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x22<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000467E57
l0000000000467E57:
	Mem0[rbx + 0x22<64>:word16] = ax
	rax = Mem0[rdx + 0x18<64>:word64]
	rcx = 0x0000000000429BE0<p64>
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000468350
	// succ:  l0000000000467E6F l0000000000468350
l0000000000467E6F:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x24<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000467E77
l0000000000467E77:
	Mem0[rbx + 0x24<64>:word16] = ax
	rax = Mem0[rdx + 0x40<64>:word64]
	rcx = 0x0000000000429B60<p64>
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000468342
	// succ:  l0000000000467E8F l0000000000468342
l0000000000467E8F:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = Mem0[rax + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000467E96
l0000000000467E96:
	Mem0[rbx + 0x58<64>:word32] = eax
	rax = Mem0[rdx + 0x20<64>:word64]
	rbp = 0x00000000004299B0<p64>
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000468333
	// succ:  l0000000000467EAD l0000000000468333
l0000000000467EAD:
	rax = Mem0[rsi + 0x10<64>:word64]
	rcx = rsp + 0x40<64>
	r8 = rsp + 0x38<64>
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000467EC4
l0000000000467EC4:
	rcx = Mem0[rsp + 0x40<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000468410
	// succ:  l0000000000467EE3 l0000000000468410
l0000000000467EE3:
	rcx = Mem0[rbx + 0x18<64>:word64]
	call fn0000000000475560 (retsize: 8;)
	rdi = rax
	rax = Mem0[rsi:word64]
	r12 = Mem0[rbx + 0x18<64>:word64]
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000468321
	// succ:  l0000000000467F03 l0000000000468321
l0000000000467F03:
	rax = Mem0[rsi + 0x10<64>:word64]
	rbp = rsp + 0x50<64>
	r8 = rsp + 0x39<64>
	rcx = rbp
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	// succ:  l0000000000467F1D
l0000000000467F1D:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = r12
	rdx = rdi
	rcx = rbp
	call fn00000000004286D0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0x50<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000468430
	// succ:  l0000000000467F45 l0000000000468430
l0000000000467F45:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbx + 0x18<64>:word64] - 0<64>)
	Mem0[rbx + 0x10<64>:word64] = rdi
	branch Test(EQ,Z) l0000000000467F5D
	// succ:  l0000000000467F52 l0000000000467F5D
l0000000000467F52:
	eax = CONVERT(Mem0[rdi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 0x7D<8>)
	al = CONVERT(Test(ULE,CZ), bool, int8)
	// succ:  l0000000000467F5D
l0000000000467F5D:
	Mem0[rbx + 0x20<64>:byte] = al
	rax = Mem0[rsi:word64]
	rbp = 0x0000000000429B30<p64>
	rax = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000468312
	// succ:  l0000000000467F77 l0000000000468312
l0000000000467F77:
	rax = Mem0[rsi + 0x10<64>:word64]
	rcx = rsp + 0x60<64>
	r8 = rsp + 0x3A<64>
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	// succ:  l0000000000467F8E
l0000000000467F8E:
	rcx = Mem0[rsp + 0x60<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x30<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000468360
	// succ:  l0000000000467FAD l0000000000468360
l0000000000467FAD:
	rdx = Mem0[rbx + 0x30<64>:word64]
	rcx = 0x3F80000000000000<64>
	rax = rdx + rdx
	SCZO = cond(rdx - rcx)
	rcx = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(UGT,CZ) l0000000000467FCD
	// succ:  l0000000000467FC9_1 l0000000000467FCD
l0000000000467FC9_1:
	rcx = rax
	// succ:  l0000000000467FCD
l0000000000467FCD:
	call fn0000000000475560 (retsize: 8;)
	r13 = rax
	rax = Mem0[rsi:word64]
	r12 = Mem0[rbx + 0x30<64>:word64]
	rax = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l0000000000468300
	// succ:  l0000000000467FE9 l0000000000468300
l0000000000467FE9:
	rax = Mem0[rsi + 0x10<64>:word64]
	rbp = rsp + 0x70<64>
	r8 = rsp + 0x3B<64>
	rcx = rbp
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	// succ:  l0000000000468003
l0000000000468003:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = r12
	rdx = r13
	rcx = rbp
	call fn00000000004277C0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0x70<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000468380
	// succ:  l000000000046802B l0000000000468380
l000000000046802B:
	rax = Mem0[rsi:word64]
	Mem0[rbx + 0x28<64>:word64] = r13
	rbp = 0x0000000000429BB0<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l00000000004682E5
	// succ:  l0000000000468046 l00000000004682E5
l0000000000468046:
	rax = Mem0[rsi + 0x10<64>:word64]
	rcx = rsp + 0x80<64>
	r8 = rsp + 0x3C<64>
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	// succ:  l0000000000468060
l0000000000468060:
	rcx = Mem0[rsp + 0x80<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x40<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004683D0
	// succ:  l0000000000468082 l00000000004683D0
l0000000000468082:
	rdx = Mem0[rbx + 0x40<64>:word64]
	rcx = 0x3F80000000000000<64>
	rax = rdx + rdx
	SCZO = cond(rdx - rcx)
	rcx = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(UGT,CZ) l00000000004680A2
	// succ:  l000000000046809E_1 l00000000004680A2
l000000000046809E_1:
	rcx = rax
	// succ:  l00000000004680A2
l00000000004680A2:
	call fn0000000000475560 (retsize: 8;)
	r12 = rax
	rax = Mem0[rsi:word64]
	r14 = Mem0[rbx + 0x40<64>:word64]
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l00000000004682D0
	// succ:  l00000000004680BE l00000000004682D0
l00000000004680BE:
	rax = Mem0[rsi + 0x10<64>:word64]
	rbp = rsp + 0x90<64>
	r8 = rsp + 0x3D<64>
	rcx = rbp
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	// succ:  l00000000004680DB
l00000000004680DB:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = r14
	rdx = r12
	rcx = rbp
	call fn00000000004277C0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0x90<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004683B3
	// succ:  l0000000000468106 l00000000004683B3
l0000000000468106:
	rax = Mem0[rsi:word64]
	Mem0[rbx + 0x38<64>:word64] = r12
	r14 = 0x0000000000429B80<p64>
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - r14)
	branch Test(NE,Z) l00000000004682B5
	// succ:  l0000000000468121 l00000000004682B5
l0000000000468121:
	rax = Mem0[rsi + 0x10<64>:word64]
	r8 = rsp + 0x3E<64>
	rdx = Mem0[rax + 0x48<64>:word64]
	rax = rsp + 0xA0<64>
	rcx = rax
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn000000000044A8B0 (retsize: 8;)
	// succ:  l0000000000468143
l0000000000468143:
	rcx = Mem0[rsp + 0xA0<64>:word64]
	rax = Mem0[rcx - 0x18<64>:word64]
	Mem0[rbx + 0x50<64>:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004683F0
	// succ:  l0000000000468165 l00000000004683F0
l0000000000468165:
	rdx = Mem0[rbx + 0x50<64>:word64]
	rcx = 0x3F80000000000000<64>
	rax = rdx + rdx
	SCZO = cond(rdx - rcx)
	rcx = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(UGT,CZ) l0000000000468185
	// succ:  l0000000000468181_1 l0000000000468185
l0000000000468181_1:
	rcx = rax
	// succ:  l0000000000468185
l0000000000468185:
	call fn0000000000475560 (retsize: 8;)
	rbp = rax
	rax = Mem0[rbx + 0x50<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	rax = Mem0[rsi:word64]
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - r14)
	branch Test(NE,Z) l00000000004682A0
	// succ:  l00000000004681A6 l00000000004682A0
l00000000004681A6:
	rax = Mem0[rsi + 0x10<64>:word64]
	r14 = rsp + 0xB0<64>
	r8 = rsp + 0x3F<64>
	rcx = r14
	rdx = Mem0[rax + 0x48<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	// succ:  l00000000004681C3
l00000000004681C3:
	r8 = Mem0[rsp + 0x20<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rdx = rbp
	rcx = r14
	call fn00000000004277C0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rsp + 0xB0<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rcx - 8<64>:word32] = __xadd(Mem0[rcx - 8<64>:word32], eax)
	SCZO = cond(Mem0[rcx - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004683A0
	// succ:  l00000000004681F0 l00000000004683A0
l00000000004681F0:
	rax = Mem0[rsi:word64]
	Mem0[rbx + 0x48<64>:word64] = rbp
	rdx = 0x0000000000429A50<p64>
	rax = Mem0[rax + 0x48<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000468290
	// succ:  l000000000046820B l0000000000468290
l000000000046820B:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = Mem0[rax + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000468212
l0000000000468212:
	Mem0[rbx + 0x5C<64>:word32] = eax
	rax = Mem0[rsi:word64]
	rdx = 0x0000000000429A40<p64>
	rax = Mem0[rax + 0x50<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000468280
	// succ:  l0000000000468228 l0000000000468280
l0000000000468228:
	rax = Mem0[rsi + 0x10<64>:word64]
	eax = Mem0[rax + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000046822F
l000000000046822F:
	Mem0[rbx + 0x60<64>:word32] = eax
	rcx = r15
	call fn0000000000473020 (retsize: 8;)
	rdx = Mem0[0x0000000000491720<p64>:word64]
	r10 = Mem0[rax:word64]
	r9 = rbx + 0x64<64>
	rcx = rax
	rdx = Mem0[rdx:word64]
	r8 = rdx + 0xB<64>
	call Mem0[r10 + 0x58<64>:word64] (retsize: 8;)
	rsp = rsp + 0xC8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000467E10_exit
l0000000000468270:
	rcx = rsi
	call rax (retsize: 8;)
	rdx = Mem0[rsi:word64]
	goto l0000000000467E57
	// succ:  l0000000000467E57
l0000000000468280:
	rcx = rsi
	call rax (retsize: 8;)
	goto l000000000046822F
	// succ:  l000000000046822F
l0000000000468290:
	rcx = rsi
	call rax (retsize: 8;)
	goto l0000000000468212
	// succ:  l0000000000468212
l00000000004682A0:
	r14 = rsp + 0xB0<64>
	rdx = rsi
	rcx = r14
	call rax (retsize: 8;)
	goto l00000000004681C3
	// succ:  l00000000004681C3
l00000000004682B5:
	rdx = rsp + 0xA0<64>
	rcx = rdx
	Mem0[rsp + 0x28<64>:word64] = rdx
	rdx = rsi
	call rax (retsize: 8;)
	goto l0000000000468143
	// succ:  l0000000000468143
l00000000004682D0:
	rbp = rsp + 0x90<64>
	rdx = rsi
	rcx = rbp
	call rax (retsize: 8;)
	goto l00000000004680DB
	// succ:  l00000000004680DB
l00000000004682E5:
	rcx = rsp + 0x80<64>
	rdx = rsi
	call rax (retsize: 8;)
	goto l0000000000468060
	// succ:  l0000000000468060
l0000000000468300:
	rbp = rsp + 0x70<64>
	rdx = rsi
	rcx = rbp
	call rax (retsize: 8;)
	goto l0000000000468003
	// succ:  l0000000000468003
l0000000000468312:
	rcx = rsp + 0x60<64>
	rdx = rsi
	call rax (retsize: 8;)
	goto l0000000000467F8E
	// succ:  l0000000000467F8E
l0000000000468321:
	rbp = rsp + 0x50<64>
	rdx = rsi
	rcx = rbp
	call rax (retsize: 8;)
	goto l0000000000467F1D
	// succ:  l0000000000467F1D
l0000000000468333:
	rcx = rsp + 0x40<64>
	rdx = rsi
	call rax (retsize: 8;)
	goto l0000000000467EC4
	// succ:  l0000000000467EC4
l0000000000468342:
	rcx = rsi
	call rax (retsize: 8;)
	rdx = Mem0[rsi:word64]
	goto l0000000000467E96
	// succ:  l0000000000467E96
l0000000000468350:
	rcx = rsi
	call rax (retsize: 8;)
	rdx = Mem0[rsi:word64]
	goto l0000000000467E77
	// succ:  l0000000000467E77
l0000000000468360:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000449360 (retsize: 8;)
	goto l0000000000467FAD
	// succ:  l0000000000467FAD
l0000000000468380:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000449360 (retsize: 8;)
	goto l000000000046802B
	// succ:  l000000000046802B
l00000000004683A0:
	rdx = Mem0[rsp + 0x28<64>:word64]
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000449360 (retsize: 8;)
	goto l00000000004681F0
	// succ:  l00000000004681F0
l00000000004683B3:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000449360 (retsize: 8;)
	goto l0000000000468106
	// succ:  l0000000000468106
l00000000004683D0:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000449360 (retsize: 8;)
	goto l0000000000468082
	// succ:  l0000000000468082
l00000000004683F0:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000449360 (retsize: 8;)
	goto l0000000000468165
	// succ:  l0000000000468165
l0000000000468410:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000467EE3
	// succ:  l0000000000467EE3
l0000000000468430:
	rdx = rsp + 0xB0<64>
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000467F45
	// succ:  l0000000000467F45
fn0000000000467E10_exit:


// fn0000000000468580
// Return size: 8
define fn0000000000468580
fn0000000000468580_entry:
	rsp = fp
	// succ:  l0000000000468580
l0000000000468580:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 0x20<64>:byte] = 0<8>
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004976F0<p64>
	Mem0[rcx + 0x24<64>:word16] = dx
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx + 0x38<64>:word64] = 0<64>
	Mem0[rcx + 0x22<64>:word16] = ax
	Mem0[rcx + 0x40<64>:word64] = 0<64>
	Mem0[rcx + 0x48<64>:word64] = 0<64>
	Mem0[rcx + 0x50<64>:word64] = 0<64>
	Mem0[rcx + 0x58<64>:word32] = 0<32>
	Mem0[rcx + 0x5C<64>:byte] = 0<8>
	Mem0[rcx + 0x5D<64>:byte] = 0<8>
	Mem0[rcx + 0x5E<64>:byte] = 0<8>
	Mem0[rcx + 0x5F<64>:byte] = 0<8>
	Mem0[rcx + 0x60<64>:byte] = 0<8>
	Mem0[rcx + 0x61<64>:byte] = 0<8>
	Mem0[rcx + 0x62<64>:byte] = 0<8>
	Mem0[rcx + 0x63<64>:byte] = 0<8>
	Mem0[rcx + 0x7A<64>:byte] = 0<8>
	return
	// succ:  fn0000000000468580_exit
fn0000000000468580_exit:


// fn0000000000468620
// Return size: 8
define fn0000000000468620
fn0000000000468620_entry:
	rsp = fp
	// succ:  l0000000000468620
l0000000000468620:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 0x20<64>:byte] = 0<8>
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004976F0<p64>
	Mem0[rcx + 0x24<64>:word16] = dx
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx + 0x38<64>:word64] = 0<64>
	Mem0[rcx + 0x22<64>:word16] = ax
	Mem0[rcx + 0x40<64>:word64] = 0<64>
	Mem0[rcx + 0x48<64>:word64] = 0<64>
	Mem0[rcx + 0x50<64>:word64] = 0<64>
	Mem0[rcx + 0x58<64>:word32] = 0<32>
	Mem0[rcx + 0x5C<64>:byte] = 0<8>
	Mem0[rcx + 0x5D<64>:byte] = 0<8>
	Mem0[rcx + 0x5E<64>:byte] = 0<8>
	Mem0[rcx + 0x5F<64>:byte] = 0<8>
	Mem0[rcx + 0x60<64>:byte] = 0<8>
	Mem0[rcx + 0x61<64>:byte] = 0<8>
	Mem0[rcx + 0x62<64>:byte] = 0<8>
	Mem0[rcx + 0x63<64>:byte] = 0<8>
	Mem0[rcx + 0x7A<64>:byte] = 0<8>
	return
	// succ:  fn0000000000468620_exit
fn0000000000468620_exit:


// fn00000000004686C0
// Return size: 0
define fn00000000004686C0
fn00000000004686C0_entry:
	rsp = fp
	// succ:  l00000000004686C0
l00000000004686C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn00000000004686E0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004686D5_thunk_fn0000000000475550
l00000000004686D5_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn00000000004686C0_exit
fn00000000004686C0_exit:


// fn00000000004686E0
// Return size: 0
define fn00000000004686E0
fn00000000004686E0_entry:
	rsp = fp
	// succ:  l00000000004686E0
l00000000004686E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0x7A<64>:byte] - 0<8>)
	rax = 0x00000000004976F0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	branch Test(EQ,Z) l0000000000468730
	// succ:  l00000000004686F8 l0000000000468730
l00000000004686F8:
	rcx = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000468706
	// succ:  l0000000000468701 l0000000000468706
l0000000000468701:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000468706
l0000000000468706:
	rcx = Mem0[rbx + 0x28<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000468714
	// succ:  l000000000046870F l0000000000468714
l000000000046870F:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000468714
l0000000000468714:
	rcx = Mem0[rbx + 0x38<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000468722
	// succ:  l000000000046871D l0000000000468722
l000000000046871D:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000468722
l0000000000468722:
	rcx = Mem0[rbx + 0x48<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000468730
	// succ:  l000000000046872B l0000000000468730
l000000000046872B:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000468730
l0000000000468730:
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000468738_thunk_fn000000000046AD20
l0000000000468738_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn00000000004686E0_exit
fn00000000004686E0_exit:


// fn0000000000468740
// Return size: 0
define fn0000000000468740
fn0000000000468740_entry:
	rsp = fp
	// succ:  l0000000000468740
l0000000000468740:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0x7A<64>:byte] - 0<8>)
	rax = 0x00000000004976F0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	branch Test(EQ,Z) l0000000000468790
	// succ:  l0000000000468758 l0000000000468790
l0000000000468758:
	rcx = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000468766
	// succ:  l0000000000468761 l0000000000468766
l0000000000468761:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000468766
l0000000000468766:
	rcx = Mem0[rbx + 0x28<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000468774
	// succ:  l000000000046876F l0000000000468774
l000000000046876F:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000468774
l0000000000468774:
	rcx = Mem0[rbx + 0x38<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000468782
	// succ:  l000000000046877D l0000000000468782
l000000000046877D:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000468782
l0000000000468782:
	rcx = Mem0[rbx + 0x48<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000468790
	// succ:  l000000000046878B l0000000000468790
l000000000046878B:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000468790
l0000000000468790:
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000468798_thunk_fn000000000046AD20
l0000000000468798_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000468740_exit
fn0000000000468740_exit:


// fn00000000004687A0
// Return size: 8
define fn00000000004687A0
fn00000000004687A0_entry:
	rsp = fp
	// succ:  l00000000004687A0
l00000000004687A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x30<64>:word64] = rcx
	Mem0[rbp - 0x28<64>:word64] = rdx
	Mem0[rbp - 0x20<64>:word64] = r8
	rax = Mem0[rbp - 0x20<64>:word64]
	Mem0[rbp - 0x58<64>:word64] = rax
	goto l00000000004687F5
	// succ:  l00000000004687F5
l00000000004687C4:
	rcx = rbp - 0x30<64>
	call fn000000000042AC90 (retsize: 8;)
	rbx = rax
	rax = Mem0[rbp - 0x58<64>:word64]
	rcx = rax
	call fn000000000046F3D0 (retsize: 8;)
	rdx = rbx
	rcx = rax
	call fn000000000046F360 (retsize: 8;)
	rcx = rbp - 0x30<64>
	call fn000000000045F370 (retsize: 8;)
	v14 = Mem0[rbp - 0x58<64>:word64] + 1<64>
	Mem0[rbp - 0x58<64>:word64] = v14
	SCZO = cond(v14)
	// succ:  l00000000004687F5
l00000000004687F5:
	rax = rbp - 0x28<64>
	rdx = rax
	rcx = rbp - 0x30<64>
	call fn0000000000473E70 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004687C4
	// succ:  l0000000000468809 l00000000004687C4
l0000000000468809:
	rax = Mem0[rbp - 0x58<64>:word64]
	// succ:  l0000000000468840
l0000000000468840:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004687A0_exit
fn00000000004687A0_exit:


// fn0000000000468850
// Return size: 8
define fn0000000000468850
fn0000000000468850_entry:
	rsp = fp
	// succ:  l0000000000468850
l0000000000468850:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	rdx = Mem0[rbp + 0x20<64>:word64]
	rax = Mem0[rbp + 0x18<64>:word64]
	r8 = rdx
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn00000000004719F0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000468850_exit
fn0000000000468850_exit:


// fn0000000000468890
// Return size: 0
define fn0000000000468890
fn0000000000468890_entry:
	rsp = fp
	// succ:  l0000000000468890
l0000000000468890:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497710<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046E160 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004688AF_thunk_fn0000000000475550
l00000000004688AF_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000468890_exit
fn0000000000468890_exit:


// fn00000000004688C0
// Return size: 8
define fn00000000004688C0
fn00000000004688C0_entry:
	rsp = fp
	// succ:  l00000000004688C0
l00000000004688C0:
	rax = 0x0000000000497710<p64>
	Mem0[rcx:word64] = rax
	// succ:  l00000000004688CA_thunk_fn000000000046E160
l00000000004688CA_thunk_fn000000000046E160:
	call fn000000000046E160 (retsize: 0;)
	return
	// succ:  fn00000000004688C0_exit
fn00000000004688C0_exit:


// fn00000000004688D0
// Return size: 0
define fn00000000004688D0
fn00000000004688D0_entry:
	rsp = fp
	// succ:  l00000000004688D0
l00000000004688D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = Mem0[rcx + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r13 = Mem0[rsp + 0x88<64>:word64]
	rbp = Mem0[rsp + 0x80<64>:word64]
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	rbx = r8
	r12 = r9
	eax = eax & 0xB0<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rbp = rbp - r13
	SCZO = cond(rbp)
	SCZO = cond(eax - 0x20<32>)
	branch Test(EQ,Z) l00000000004689A5
	// succ:  l0000000000468908 l00000000004689A5
l0000000000468908:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SCZO = cond(eax - 0x10<32>)
	branch Test(EQ,Z) l0000000000468940
	// succ:  l000000000046890F l0000000000468940
l000000000046890F:
	edx = CONVERT(sil, byte, int32)
	r8 = rbp
	rcx = rbx
	rax = memset(rcx, rdx, r8)
	r8 = r13
	rcx = rbx + rbp
	rdx = r12 + rdi
	r8 = r8 - rdi
	SCZO = cond(r8)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rax = memcpy(rcx, rdx, r8)
	return
	// succ:  fn00000000004688D0_exit
l0000000000468940:
	rcx = rcx + 0xD0<64>
	SCZO = cond(rcx)
	call fn0000000000472FC0 (retsize: 8;)
	SCZO = cond(Mem0[rax + 0x38<64>:byte] - 0<8>)
	rdi = rax
	branch Test(EQ,Z) l00000000004689F0
	// succ:  l0000000000468959 l00000000004689F0
l0000000000468959:
	edx = CONVERT(Mem0[r12:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - Mem0[rax + 0x66<64>:byte])
	branch Test(EQ,Z) l0000000000468995
	// succ:  l0000000000468963 l0000000000468995
l0000000000468963:
	SCZO = cond(Mem0[rdi + 0x64<64>:byte] - dl)
	branch Test(EQ,Z) l0000000000468995
	// succ:  l0000000000468968 l0000000000468995
l0000000000468968:
	SCZO = cond(Mem0[rdi + 0x69<64>:byte] - dl)
	branch Test(NE,Z) l000000000046898C
	// succ:  l000000000046896D l000000000046898C
l000000000046896D:
	SCZO = cond(r13 - 1<64>)
	branch Test(LE,SZO) l000000000046898C
	// succ:  l0000000000468973 l000000000046898C
l0000000000468973:
	eax = CONVERT(Mem0[r12 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[rdi + 0xB1<64>:byte] - al)
	branch Test(EQ,Z) l00000000004689D0
	// succ:  l0000000000468981 l00000000004689D0
l0000000000468981:
	edx = CONVERT(Mem0[rdi + 0x91<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000468988
l0000000000468988:
	SCZO = cond(al - dl)
	branch Test(EQ,Z) l00000000004689D0
	// succ:  l000000000046898C l00000000004689D0
l000000000046898C:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	goto l000000000046890F
	// succ:  l000000000046890F
l0000000000468993:
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000468995
l0000000000468995:
	Mem0[rbx:byte] = dl
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	goto l000000000046890F
	// succ:  l000000000046890F
l00000000004689A5:
	r8 = r13
	rdx = r9
	rcx = rbx
	rax = memcpy(rcx, rdx, r8)
	rcx = rbx + r13
	edx = CONVERT(sil, byte, int32)
	r8 = rbp
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rax = memset(rcx, rdx, r8)
	return
	// succ:  fn00000000004688D0_exit
l00000000004689D0:
	eax = CONVERT(Mem0[r12:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rbx = rbx + 2<64>
	SCZO = cond(rbx)
	edi = 2<32>
	rdi = CONVERT(edi, word32, uint64)
	Mem0[rbx - 2<64>:byte] = al
	eax = CONVERT(Mem0[r12 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx - 1<64>:byte] = al
	goto l000000000046890F
	// succ:  l000000000046890F
l00000000004689F0:
	rcx = rax
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[rdi:word64]
	rdx = 0x000000000042B5F0<p64>
	r8 = Mem0[rax + 0x30<64>:word64]
	eax = 0x2D<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8 - rdx)
	branch Test(NE,Z) l0000000000468ABB
	// succ:  l0000000000468A14 l0000000000468ABB
l0000000000468A14:
	edx = CONVERT(Mem0[r12:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - al)
	branch Test(EQ,Z) l0000000000468993
	// succ:  l0000000000468A21 l0000000000468993
l0000000000468A21:
	SCZO = cond(Mem0[rdi + 0x38<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000468963
	// succ:  l0000000000468A2B l0000000000468963
l0000000000468A2B:
	edx = 0x2B<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call fn000000000042B590 (retsize: 8;)
	edx = CONVERT(Mem0[r12:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - al)
	branch Test(EQ,Z) l0000000000468995
	// succ:  l0000000000468A45 l0000000000468995
l0000000000468A45:
	SCZO = cond(Mem0[rdi + 0x38<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000468968
	// succ:  l0000000000468A4F l0000000000468968
l0000000000468A4F:
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call fn000000000042B590 (retsize: 8;)
	SCZO = cond(Mem0[r12:byte] - al)
	branch Test(NE,Z) l000000000046898C
	// succ:  l0000000000468A66 l000000000046898C
l0000000000468A66:
	SCZO = cond(r13 - 1<64>)
	branch Test(LE,SZO) l000000000046898C
	// succ:  l0000000000468A70 l000000000046898C
l0000000000468A70:
	SCZO = cond(Mem0[rdi + 0x38<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000468973
	// succ:  l0000000000468A7A l0000000000468973
l0000000000468A7A:
	edx = 0x78<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call fn000000000042B590 (retsize: 8;)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(Mem0[r12 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - dl)
	branch Test(EQ,Z) l00000000004689D0
	// succ:  l0000000000468A97 l00000000004689D0
l0000000000468A97:
	SCZO = cond(Mem0[rdi + 0x38<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000468981
	// succ:  l0000000000468AA1 l0000000000468981
l0000000000468AA1:
	edx = 0x58<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call fn000000000042B590 (retsize: 8;)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(Mem0[r12 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000468988
	// succ:  l0000000000468988
l0000000000468ABB:
	edx = 0x2D<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call r8 (retsize: 8;)
	goto l0000000000468A14
	// succ:  l0000000000468A14
fn00000000004688D0_exit:


// fn0000000000468AD0
// Return size: 8
define fn0000000000468AD0
fn0000000000468AD0_entry:
	rsp = fp
	// succ:  l0000000000468AD0
l0000000000468AD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	eax = Mem0[rcx + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rbp = Mem0[rsp + 0x88<64>:word64]
	rbx = Mem0[rsp + 0x80<64>:word64]
	rdi = r8
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	eax = eax & 0xB0<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rbx = rbx - rbp
	SCZO = cond(rbx)
	SCZO = cond(eax - 0x20<32>)
	branch Test(EQ,Z) l0000000000468B40
	// succ:  l0000000000468AFF l0000000000468B40
l0000000000468AFF:
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(eax - 0x10<32>)
	branch Test(EQ,Z) l0000000000468B80
	// succ:  l0000000000468B09 l0000000000468B80
l0000000000468B09:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000468B1D
	// succ:  l0000000000468B10 l0000000000468B1D
l0000000000468B10:
	Mem0[rdi + rax * 2<64>:word16] = si
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(rbx - rax)
	branch Test(NE,Z) l0000000000468B10
	// succ:  l0000000000468B1D l0000000000468B10
l0000000000468B1D:
	r8 = rbp
	rcx = rdi + rbx * 2<64>
	r8 = r8 - rdx
	SCZO = cond(r8)
	rdx = r9 + r10
	r8 = r8 + r8
	SCZO = cond(r8)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rax = memcpy(rcx, rdx, r8)
	return
	// succ:  fn0000000000468AD0_exit
l0000000000468B40:
	rbp = rbp + rbp
	SCZO = cond(rbp)
	rcx = rdi
	rdx = r9
	r8 = rbp
	rdi = rdi + rbp
	SCZO = cond(rdi)
	rax = memcpy(rcx, rdx, r8)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000468B6D
	// succ:  l0000000000468B5B l0000000000468B6D
l0000000000468B5B:
	// succ:  l0000000000468B60
l0000000000468B60:
	Mem0[rdi + rax * 2<64>:word16] = si
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(rbx - rax)
	branch Test(NE,Z) l0000000000468B60
	// succ:  l0000000000468B6D l0000000000468B60
l0000000000468B6D:
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000468AD0_exit
l0000000000468B80:
	rcx = rcx + 0xD0<64>
	SCZO = cond(rcx)
	Mem0[rsp + 0x28<64>:word64] = r9
	call fn0000000000473020 (retsize: 8;)
	r12 = rax
	rax = Mem0[rax:word64]
	edx = 0x2D<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r12
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	r9 = Mem0[rsp + 0x28<64>:word64]
	SCZO = cond(Mem0[r9:word16] - ax)
	branch Test(EQ,Z) l0000000000468C35
	// succ:  l0000000000468BB1 l0000000000468C35
l0000000000468BB1:
	rax = Mem0[r12:word64]
	edx = 0x2B<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r12
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	r9 = Mem0[rsp + 0x28<64>:word64]
	SCZO = cond(Mem0[r9:word16] - ax)
	branch Test(EQ,Z) l0000000000468C35
	// succ:  l0000000000468BCB l0000000000468C35
l0000000000468BCB:
	rax = Mem0[r12:word64]
	Mem0[rsp + 0x28<64>:word64] = r9
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r12
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	r9 = Mem0[rsp + 0x28<64>:word64]
	SCZO = cond(Mem0[r9:word16] - ax)
	branch Test(NE,Z) l0000000000468C2B
	// succ:  l0000000000468BEA l0000000000468C2B
l0000000000468BEA:
	SCZO = cond(rbp - 1<64>)
	branch Test(LE,SZO) l0000000000468C2B
	// succ:  l0000000000468BF0 l0000000000468C2B
l0000000000468BF0:
	rax = Mem0[r12:word64]
	Mem0[rsp + 0x28<64>:word64] = r9
	edx = 0x78<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r12
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	r9 = Mem0[rsp + 0x28<64>:word64]
	SCZO = cond(Mem0[r9 + 2<64>:word16] - ax)
	branch Test(EQ,Z) l0000000000468C4C
	// succ:  l0000000000468C10 l0000000000468C4C
l0000000000468C10:
	rax = Mem0[r12:word64]
	edx = 0x58<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r12
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	r9 = Mem0[rsp + 0x28<64>:word64]
	SCZO = cond(Mem0[r9 + 2<64>:word16] - ax)
	branch Test(EQ,Z) l0000000000468C4C
	// succ:  l0000000000468C2B l0000000000468C4C
l0000000000468C2B:
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000468B09
	// succ:  l0000000000468B09
l0000000000468C35:
	Mem0[rdi:word16] = ax
	r10d = 2<32>
	r10 = CONVERT(r10d, word32, uint64)
	rdi = rdi + 2<64>
	SCZO = cond(rdi)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000468B09
	// succ:  l0000000000468B09
l0000000000468C4C:
	eax = CONVERT(Mem0[r9:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdi = rdi + 4<64>
	SCZO = cond(rdi)
	r10d = 4<32>
	r10 = CONVERT(r10d, word32, uint64)
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rdi - 4<64>:word16] = ax
	eax = CONVERT(Mem0[r9 + 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdi - 2<64>:word16] = ax
	goto l0000000000468B09
	// succ:  l0000000000468B09
fn0000000000468AD0_exit:


// fn0000000000468C80
// Return size: 8
define fn0000000000468C80
fn0000000000468C80_entry:
	rsp = fp
	// succ:  l0000000000468C80
l0000000000468C80:
	rax = 0x0000000000498340<p64>
	return
	// succ:  fn0000000000468C80_exit
fn0000000000468C80_exit:


// fn0000000000468C90
// Return size: 8
define fn0000000000468C90
fn0000000000468C90_entry:
	rsp = fp
	// succ:  l0000000000468C90
l0000000000468C90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r9 & r9)
	C = false
	rdi = rcx + 0x41<64>
	Mem0[rcx + 0x20<64>:word64] = 0<64>
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 0x39<64>:word64] = 0<64>
	Mem0[rcx + 8<64>:word32] = eax
	rax = Mem0[0x0000000000491D30<p64>:word64]
	r10 = rcx
	Mem0[rcx + 0x131<64>:word64] = 0<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx:word64] = rax
	al = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d & eax
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rax = 0x0000000000498340<p64>
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x18<64>:byte] = r8b
	branch Test(NE,Z) l0000000000468CEF
	// succ:  l0000000000468CEB_1 l0000000000468CEF
l0000000000468CEB_1:
	rdx = rax
	// succ:  l0000000000468CEF
l0000000000468CEF:
	rdi = rdi & 0xFFFFFFFFFFFFFFF8<64>
	SZO = cond(rdi)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx + 0x30<64>:word64] = rdx
	rdx = rcx + 0x141<64>
	ecx = ecx - edi
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	ecx = ecx + 0x139<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	ecx = ecx >>u 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	// succ:  l0000000000468D0B
l0000000000468D0B:
	branch rcx == 0<64> l0000000000468D0E
	// succ:  l0000000000468D0B_1 l0000000000468D0E
l0000000000468D0B_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 8<i64>
	rcx = rcx - 1<64>
	goto l0000000000468D0B
	// succ:  l0000000000468D0B
l0000000000468D0E:
	rdi = rdx
	edx = r10d
	rdx = CONVERT(edx, word32, uint64)
	Mem0[r10 + 0x38<64>:byte] = 0<8>
	rdi = rdi & 0xFFFFFFFFFFFFFFF8<64>
	SZO = cond(rdi)
	C = false
	Mem0[r10 + 0x139<64>:word64] = 0<64>
	Mem0[r10 + 0x231<64>:word64] = 0<64>
	edx = edx - edi
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	ecx = SLICE(rdx + 0x239<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx >>u 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	// succ:  l0000000000468D3E
l0000000000468D3E:
	branch rcx == 0<64> l0000000000468D41
	// succ:  l0000000000468D3E_1 l0000000000468D41
l0000000000468D3E_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 8<i64>
	rcx = rcx - 1<64>
	goto l0000000000468D3E
	// succ:  l0000000000468D3E
l0000000000468D41:
	Mem0[r10 + 0x239<64>:byte] = 0<8>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000468C90_exit
fn0000000000468C90_exit:


// fn0000000000468D50
// Return size: 8
define fn0000000000468D50
fn0000000000468D50_entry:
	rsp = fp
	// succ:  l0000000000468D50
l0000000000468D50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x30<64>:word64] - 0<64>)
	rdi = rcx + 0x41<64>
	Mem0[rcx + 0x20<64>:word64] = 0<64>
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 0x39<64>:word64] = 0<64>
	Mem0[rcx + 0x131<64>:word64] = 0<64>
	rdx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = Mem0[0x0000000000491D30<p64>:word64]
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	SZO = cond(r8 & r8)
	C = false
	Mem0[rcx:word64] = rax
	al = CONVERT(Test(NE,Z), bool, int8)
	r9d = r9d & eax
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rax = 0x0000000000498340<p64>
	SZO = cond(r8 & r8)
	C = false
	Mem0[rcx + 0x18<64>:byte] = r9b
	branch Test(NE,Z) l0000000000468DB2
	// succ:  l0000000000468DAE_1 l0000000000468DB2
l0000000000468DAE_1:
	r8 = rax
	// succ:  l0000000000468DB2
l0000000000468DB2:
	rdi = rdi & 0xFFFFFFFFFFFFFFF8<64>
	SZO = cond(rdi)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rcx + 0x30<64>:word64] = r8
	r8 = rcx + 0x141<64>
	ecx = ecx - edi
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	ecx = ecx + 0x139<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	ecx = ecx >>u 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	// succ:  l0000000000468DCE
l0000000000468DCE:
	branch rcx == 0<64> l0000000000468DD1
	// succ:  l0000000000468DCE_1 l0000000000468DD1
l0000000000468DCE_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 8<i64>
	rcx = rcx - 1<64>
	goto l0000000000468DCE
	// succ:  l0000000000468DCE
l0000000000468DD1:
	rdi = r8
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rdx + 0x38<64>:byte] = 0<8>
	rdi = rdi & 0xFFFFFFFFFFFFFFF8<64>
	SZO = cond(rdi)
	C = false
	Mem0[rdx + 0x139<64>:word64] = 0<64>
	Mem0[rdx + 0x231<64>:word64] = 0<64>
	ecx = ecx - edi
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	ecx = ecx + 0x239<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	ecx = ecx >>u 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	// succ:  l0000000000468DFF
l0000000000468DFF:
	branch rcx == 0<64> l0000000000468E02
	// succ:  l0000000000468DFF_1 l0000000000468E02
l0000000000468DFF_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 8<i64>
	rcx = rcx - 1<64>
	goto l0000000000468DFF
	// succ:  l0000000000468DFF
l0000000000468E02:
	Mem0[rdx + 0x239<64>:byte] = 0<8>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000468D50_exit
fn0000000000468D50_exit:


// fn0000000000468E10
// Return size: 0
define fn0000000000468E10
fn0000000000468E10_entry:
	rsp = fp
	// succ:  l0000000000468E10
l0000000000468E10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000468E30 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000468E25_thunk_fn0000000000475550
l0000000000468E25_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000468E10_exit
fn0000000000468E10_exit:


// fn0000000000468E30
// Return size: 0
define fn0000000000468E30
fn0000000000468E30_entry:
	rsp = fp
	// succ:  l0000000000468E30
l0000000000468E30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497950<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	SCZO = cond(Mem0[rbx + 0x18<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000468E61
	// succ:  l0000000000468E53 l0000000000468E61
l0000000000468E53:
	rcx = Mem0[rbx + 0x30<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000468E61
	// succ:  l0000000000468E5C l0000000000468E61
l0000000000468E5C:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l0000000000468E61
l0000000000468E61:
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000468E6A_thunk_fn000000000046AD20
l0000000000468E6A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000468E30_exit
fn0000000000468E30_exit:


// fn0000000000468E90
// Return size: 0
define fn0000000000468E90
fn0000000000468E90_entry:
	rsp = fp
	// succ:  l0000000000468E90
l0000000000468E90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	rsi = rcx
	goto l0000000000468EB1
	// succ:  l0000000000468EB1
l0000000000468EA0:
	Mem0[rsi + 0x19<64> + rbx:byte] = al
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	SCZO = cond(rbx - 0x80<64>)
	branch Test(EQ,Z) l0000000000468F20
	// succ:  l0000000000468EB1 l0000000000468F20
l0000000000468EB1:
	ecx = ebx
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000412B10 (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000468EA0
	// succ:  l0000000000468EBD l0000000000468EA0
l0000000000468EBD:
	Mem0[rsi + 0x18<64>:byte] = 0<8>
	// succ:  l0000000000468EC1
l0000000000468EC1:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	// succ:  l0000000000468EC3
l0000000000468EC3:
	ecx = ebx
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000412B90 (retsize: 8;)
	Mem0[rsi + 0x9A<64> + rbx * 2<64>:word16] = ax
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	SCZO = cond(rbx - 0x100<64>)
	branch Test(NE,Z) l0000000000468EC3
	// succ:  l0000000000468EDF l0000000000468EC3
l0000000000468EDF:
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	// succ:  l0000000000468EF0
l0000000000468EF0:
	ecx = ebx
	rcx = CONVERT(ecx, word32, uint64)
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	edx = edx << cl
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rcx = rsi
	Mem0[rsi + 0x29A<64> + rbx * 2<64>:word16] = dx
	call fn000000000042B7B0 (retsize: 8;)
	Mem0[rsi + 0x2BA<64> + rbx * 2<64>:word16] = ax
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	SCZO = cond(rbx - 0x10<64>)
	branch Test(NE,Z) l0000000000468EF0
	// succ:  l0000000000468F18 l0000000000468EF0
l0000000000468F18:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000468E90_exit
l0000000000468F20:
	Mem0[rsi + 0x18<64>:byte] = 1<8>
	goto l0000000000468EC1
	// succ:  l0000000000468EC1
fn0000000000468E90_exit:


// fn0000000000468F30
// Return size: 8
define fn0000000000468F30
fn0000000000468F30_entry:
	rsp = fp
	// succ:  l0000000000468F30
l0000000000468F30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	Mem0[rsp + 0x38<64>:word64] = rdx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004979D0<p64>
	Mem0[rcx:word64] = rax
	rcx = rsp + 0x38<64>
	call fn000000000046AC80 (retsize: 8;)
	Mem0[rbx + 0x18<64>:byte] = 0<8>
	Mem0[rbx + 0x10<64>:word64] = rax
	rcx = rbx
	call fn0000000000468E90 (retsize: 8;)
	rsp = rsp + 8<64>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000468F30_exit
fn0000000000468F30_exit:


// fn0000000000468F80
// Return size: 8
define fn0000000000468F80
fn0000000000468F80_entry:
	rsp = fp
	// succ:  l0000000000468F80
l0000000000468F80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004979D0<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	rcx = rbx
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:byte] = 0<8>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000468FB4_thunk_fn0000000000468E90
l0000000000468FB4_thunk_fn0000000000468E90:
	call fn0000000000468E90 (retsize: 0;)
	return
	// succ:  fn0000000000468F80_exit
fn0000000000468F80_exit:


// fn0000000000468FE0
// Return size: 0
define fn0000000000468FE0
fn0000000000468FE0_entry:
	rsp = fp
	// succ:  l0000000000468FE0
l0000000000468FE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000469000 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000468FF5_thunk_fn0000000000475550
l0000000000468FF5_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000468FE0_exit
fn0000000000468FE0_exit:


// fn0000000000469000
// Return size: 0
define fn0000000000469000
fn0000000000469000_entry:
	rsp = fp
	// succ:  l0000000000469000
l0000000000469000:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x00000000004979D0<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	rax = Mem0[0x0000000000491D00<p64>:word64]
	rcx = rbx
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000469034_thunk_fn000000000046AD20
l0000000000469034_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn0000000000469000_exit
fn0000000000469000_exit:


// fn0000000000469060
// Return size: 8
define fn0000000000469060
fn0000000000469060_entry:
	rsp = fp
	// succ:  l0000000000469060
l0000000000469060:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn00000000004690C0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000469060_exit
fn0000000000469060_exit:


// fn0000000000469080
// Return size: 8
define fn0000000000469080
fn0000000000469080_entry:
	rsp = fp
	// succ:  l0000000000469080
l0000000000469080:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000469100 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000469080_exit
fn0000000000469080_exit:


// fn00000000004690A0
// Return size: 8
define fn00000000004690A0
fn00000000004690A0_entry:
	rsp = fp
	// succ:  l00000000004690A0
l00000000004690A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000469140 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004690A0_exit
fn00000000004690A0_exit:


// fn00000000004690C0
// Return size: 8
define fn00000000004690C0
fn00000000004690C0_entry:
	rsp = fp
	// succ:  l00000000004690C0
l00000000004690C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn000000000042BB40 (retsize: 8;)
	rax = rax *s 0xF4240<64>
	SCZO = cond(rax)
	Mem0[rbp - 8<64>:word64] = rax
	rdx = rbp - 8<64>
	rax = rbp - 0x10<64>
	rcx = rax
	call fn00000000004691A0 (retsize: 8;)
	rax = Mem0[rbp - 0x10<64>:word64]
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004690C0_exit
fn00000000004690C0_exit:


// fn0000000000469100
// Return size: 8
define fn0000000000469100
fn0000000000469100_entry:
	rsp = fp
	// succ:  l0000000000469100
l0000000000469100:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn000000000042BB60 (retsize: 8;)
	rax = rax *s 0x3E8<64>
	SCZO = cond(rax)
	Mem0[rbp - 8<64>:word64] = rax
	rdx = rbp - 8<64>
	rax = rbp - 0x10<64>
	rcx = rax
	call fn0000000000469220 (retsize: 8;)
	rax = Mem0[rbp - 0x10<64>:word64]
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000469100_exit
fn0000000000469100_exit:


// fn0000000000469140
// Return size: 8
define fn0000000000469140
fn0000000000469140_entry:
	rsp = fp
	// succ:  l0000000000469140
l0000000000469140:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn000000000042BB40 (retsize: 8;)
	rcx = rax
	rdx = 0x20C49BA5E353F7CF<64>
	rax = rcx
	rdx_rax = rdx *s rax
	SCZO = cond(rdx_rax)
	rdx = rdx >> 7<64>
	SCZO = cond(rdx)
	rax = rcx
	rax = rax >> 0x3F<64>
	SCZO = cond(rax)
	rdx = rdx - rax
	SCZO = cond(rdx)
	rax = rdx
	Mem0[rbp - 8<64>:word64] = rax
	rdx = rbp - 8<64>
	rax = rbp - 0x10<64>
	rcx = rax
	call fn0000000000469240 (retsize: 8;)
	rax = Mem0[rbp - 0x10<64>:word64]
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000469140_exit
fn0000000000469140_exit:


// fn00000000004691A0
// Return size: 8
define fn00000000004691A0
fn00000000004691A0_entry:
	rsp = fp
	// succ:  l00000000004691A0
l00000000004691A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x18<64>:word64]
	rdx = Mem0[rax:word64]
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax:word64] = rdx
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004691A0_exit
fn00000000004691A0_exit:


// fn00000000004691C0
// Return size: 8
define fn00000000004691C0
fn00000000004691C0_entry:
	rsp = fp
	// succ:  l00000000004691C0
l00000000004691C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x18<64>:word64]
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = CONVERT(eax, word32, int64)
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax:word64] = rdx
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004691C0_exit
fn00000000004691C0_exit:


// fn00000000004691E0
// Return size: 8
define fn00000000004691E0
fn00000000004691E0_entry:
	rsp = fp
	// succ:  l00000000004691E0
l00000000004691E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x18<64>:word64]
	rcx = rax
	call fn0000000000469080 (retsize: 8;)
	Mem0[rbp - 0x10<64>:word64] = rax
	rax = rbp - 0x10<64>
	rcx = rax
	call fn000000000042BB40 (retsize: 8;)
	rdx = rax
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax:word64] = rdx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004691E0_exit
fn00000000004691E0_exit:


// fn0000000000469220
// Return size: 8
define fn0000000000469220
fn0000000000469220_entry:
	rsp = fp
	// succ:  l0000000000469220
l0000000000469220:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x18<64>:word64]
	rdx = Mem0[rax:word64]
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax:word64] = rdx
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000469220_exit
fn0000000000469220_exit:


// fn0000000000469240
// Return size: 8
define fn0000000000469240
fn0000000000469240_entry:
	rsp = fp
	// succ:  l0000000000469240
l0000000000469240:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x18<64>:word64]
	rdx = Mem0[rax:word64]
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax:word64] = rdx
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000469240_exit
fn0000000000469240_exit:


// fn0000000000469260
// Return size: 8
define fn0000000000469260
fn0000000000469260_entry:
	rsp = fp
	// succ:  l0000000000469260
l0000000000469260:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x10<64>:word64] = rcx
	Mem0[rbp - 8<64>:word64] = rdx
	rax = Mem0[rbp - 0x10<64>:word64]
	rax = Mem0[rax:word64]
	Mem0[rbp - 0x50<64>:word64] = rax
	rax = rbp - 0x50<64>
	rcx = rax
	call fn000000000042BB40 (retsize: 8;)
	rbx = rax
	rdx = Mem0[rbp - 8<64>:word64]
	rax = rbp - 0x40<64>
	rcx = rax
	call fn00000000004691E0 (retsize: 8;)
	rax = rbp - 0x40<64>
	rcx = rax
	call fn000000000042BB40 (retsize: 8;)
	rbx = rbx - rax
	SCZO = cond(rbx)
	rax = rbx
	Mem0[rbp - 0x58<64>:word64] = rax
	rdx = rbp - 0x58<64>
	rax = rbp - 0x60<64>
	rcx = rax
	call fn0000000000469220 (retsize: 8;)
	rax = Mem0[rbp - 0x60<64>:word64]
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000469260_exit
fn0000000000469260_exit:


// fn00000000004692E0
// Return size: 8
define fn00000000004692E0
fn00000000004692E0_entry:
	rsp = fp
	// succ:  l00000000004692E0
l00000000004692E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rcx = Mem0[0x00000000004918F0<p64>:word64]
	rdx = 0x0000000000469350<p64>
	call fn000000000041DEE0 (retsize: 8;)
	rbx = Mem0[0x00000000004918D0<p64>:word64]
	SCZO = cond(Mem0[rbx:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000469310
	// succ:  l0000000000469305 l0000000000469310
l0000000000469305:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004692E0_exit
l0000000000469310:
	rcx = 0x0000000000489960<p64>
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn00000000004699E0 (retsize: 8;)
	rax = 0x0000000000489960<p64>
	rdx = 0x0000000000489960<p64>
	Mem0[rbx:word64] = rax
	rax = Mem0[0x0000000000491900<p64>:word64]
	Mem0[rax:word64] = rdx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004692E0_exit
fn00000000004692E0_exit:


// fn0000000000469350
// Return size: 8
define fn0000000000469350
fn0000000000469350_entry:
	rsp = fp
	// succ:  l0000000000469350
l0000000000469350:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = 0x0000000000489960<p64>
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn00000000004699E0 (retsize: 8;)
	rdx = Mem0[0x00000000004918D0<p64>:word64]
	rax = 0x0000000000489960<p64>
	Mem0[rdx:word64] = rax
	rdx = Mem0[0x0000000000491900<p64>:word64]
	Mem0[rdx:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000469350_exit
fn0000000000469350_exit:


// fn0000000000469390
// Return size: 8
define fn0000000000469390
fn0000000000469390_entry:
	rsp = fp
	// succ:  l0000000000469390
l0000000000469390:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l00000000004693C0
	// succ:  l0000000000469398 l00000000004693C0
l0000000000469398:
	SZO = cond(cl & 0x3F<8>)
	C = false
	branch Test(NE,Z) l00000000004693D0
	// succ:  l000000000046939D l00000000004693D0
l000000000046939D:
	SCZO = cond(ecx - 5<32>)
	branch Test(UGT,CZ) l0000000000469420
	// succ:  l00000000004693A2 l0000000000469420
l00000000004693A2:
	rax = 0x000000000048D934<p64>
	ecx = ecx
	rcx = CONVERT(ecx, word32, uint64)
	rdx = CONVERT(Mem0[rax + rcx * 4<64>:word32], word32, int64)
	rax = rax + rdx
	SCZO = cond(rax)
	switch (ecx) { l0000000000469420 l00000000004693B4 l0000000000469410 l0000000000469400 l00000000004693F0 l00000000004693E0 }
	// succ:  l0000000000469420 l00000000004693B4 l0000000000469410 l0000000000469400 l00000000004693F0 l00000000004693E0
l00000000004693B4:
	ecx = 4<32>
	rcx = CONVERT(ecx, word32, uint64)
	// succ:  l00000000004693C0
l00000000004693C0:
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000469390_exit
l00000000004693D0:
	SZO = cond(ecx & 0xFFFFFFC0<32>)
	C = false
	branch Test(NE,Z) l000000000046939D
	// succ:  l00000000004693D8 l000000000046939D
l00000000004693D8:
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000469390_exit
l00000000004693E0:
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	goto l00000000004693C0
	// succ:  l00000000004693C0
l00000000004693F0:
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	goto l00000000004693C0
	// succ:  l00000000004693C0
l0000000000469400:
	ecx = 0x10<32>
	rcx = CONVERT(ecx, word32, uint64)
	goto l00000000004693C0
	// succ:  l00000000004693C0
l0000000000469410:
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	goto l00000000004693C0
	// succ:  l00000000004693C0
l0000000000469420:
	rcx = 0x000000000048D900<p64>
	call fn00000000004712A0 (retsize: 8;)
	// succ:  l000000000046942F_thunk_fn0000000000469430
l000000000046942F_thunk_fn0000000000469430:
	call fn0000000000469430 (retsize: 0;)
	return
	// succ:  fn0000000000469390_exit
fn0000000000469390_exit:


// fn0000000000469430
// Return size: 8
define fn0000000000469430
fn0000000000469430_entry:
	rsp = fp
	// succ:  l0000000000469430
l0000000000469430:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[0x0000000000477330<p64>:byte] - 0<8>)
	rdi = rcx
	rbx = rdx
	rsi = r8
	branch Test(EQ,Z) l0000000000469490
	// succ:  l0000000000469449 l0000000000469490
l0000000000469449:
	rcx = 0x000000000048C070<p64>
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004694F2
	// succ:  l000000000046945D l00000000004694F2
l000000000046945D:
	rax = Mem0[rdi + 0x18<64>:word64]
	SCZO = cond(Mem0[rax + rsi * 8<64>:word64] - 0<64>)
	branch Test(EQ,Z) l00000000004694D0
	// succ:  l0000000000469468 l00000000004694D0
l0000000000469468:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000469476
	// succ:  l000000000046946D l0000000000469476
l000000000046946D:
	rax = Mem0[rbx:word64]
	rcx = rbx
	call Mem0[rax + 8<64>:word64] (retsize: 8;)
	// succ:  l0000000000469476
l0000000000469476:
	rcx = 0x000000000048C070<p64>
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004694DF
	// succ:  l0000000000469486 l00000000004694DF
l0000000000469486:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000469430_exit
l0000000000469490:
	rcx = 0x0000000000477330<p64>
	call fn0000000000475E80 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000469449
	// succ:  l00000000004694A0 l0000000000469449
l00000000004694A0:
	rcx = 0x000000000048C070<p64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn0000000000420360 (retsize: 8;)
	rcx = 0x0000000000477330<p64>
	call fn0000000000475F80 (retsize: 8;)
	rcx = 0x0000000000476340<p64>
	call fn0000000000410BF0 (retsize: 8;)
	rsp = rsp + 8<64>
	goto l0000000000469449
	// succ:  l0000000000469449
l00000000004694D0:
	__lock()
	v16 = Mem0[rbx + 8<64>:word32] + 1<32>
	Mem0[rbx + 8<64>:word32] = v16
	SCZO = cond(v16)
	rax = Mem0[rdi + 0x18<64>:word64]
	Mem0[rax + rsi * 8<64>:word64] = rbx
	goto l0000000000469476
	// succ:  l0000000000469476
l00000000004694DF:
	call fn0000000000426270 (retsize: 8;)
	// succ:  l00000000004694E4
l00000000004694E4:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(EQ,Z) l000000000046954E
	// succ:  l00000000004694ED l000000000046954E
l00000000004694ED:
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l00000000004694F2
l00000000004694F2:
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rdx = 0x0000000000495E10<p64>
	r8 = 0x0000000000425E50<p64>
	rcx = rax
	Mem0[rax:word64] = rdx
	rdx = 0x0000000000493120<p64>
	call fn00000000004760B0 (retsize: 8;)
	rcx = 0x0000000000477330<p64>
	rbx = rax
	call fn0000000000475DE0 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	rcx = 0x000000000048C070<p64>
	rbx = rax
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	rcx = rbx
	branch Test(EQ,Z) l00000000004694ED
	// succ:  l0000000000469549 l00000000004694ED
l0000000000469549:
	call fn0000000000426270 (retsize: 8;)
	// succ:  l000000000046954E
l000000000046954E:
	call fn0000000000475910 (retsize: 8;)
	goto l00000000004694E4
	// succ:  l00000000004694E4
fn0000000000469430_exit:


// fn0000000000469560
// Return size: 8
define fn0000000000469560
fn0000000000469560_entry:
	rsp = fp
	// succ:  l0000000000469560
l0000000000469560:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l0000000000469710
	// succ:  l0000000000469577 l0000000000469710
l0000000000469577:
	rbx = rcx
	rcx = rdx
	rbp = r8
	call fn000000000042BB80 (retsize: 8;)
	r12 = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	rax = rax - 1<64>
	SCZO = cond(rax)
	SCZO = cond(r12 - rax)
	branch Test(ULE,CZ) l00000000004696A7
	// succ:  l0000000000469599 l00000000004696A7
l0000000000469599:
	rsi = r12 + 4<64>
	rdx = 0xFE0000000000000<64>
	rcx = 0xFFFFFFFFFFFFFFFF<64>
	r13 = Mem0[rbx + 8<64>:word64]
	rax = CONVERT(0<32> + rsi * 8<64>, word32, word64)
	SCZO = cond(rsi - rdx)
	branch Test(UGT,CZ) l00000000004695C2
	// succ:  l00000000004695BE_1 l00000000004695C2
l00000000004695BE_1:
	rcx = rax
	// succ:  l00000000004695C2
l00000000004695C2:
	call fn0000000000475560 (retsize: 8;)
	rdi = rax
	rax = Mem0[rbx + 0x10<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004695F5
	// succ:  l00000000004695D3 l00000000004695F5
l00000000004695D3:
	r8 = CONVERT(0<32> + rax * 8<64>, word32, word64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l00000000004695E0
l00000000004695E0:
	rcx = Mem0[rbx + 8<64>:word64]
	rcx = Mem0[rcx + rdx:word64]
	Mem0[rdi + rdx:word64] = rcx
	rdx = rdx + 8<64>
	SCZO = cond(rdx)
	SCZO = cond(rdx - r8)
	branch Test(NE,Z) l00000000004695E0
	// succ:  l00000000004695F5 l00000000004695E0
l00000000004695F5:
	SCZO = cond(rsi - rax)
	branch Test(ULE,CZ) l0000000000469611
	// succ:  l00000000004695FA l0000000000469611
l00000000004695FA:
	// succ:  l0000000000469600
l0000000000469600:
	Mem0[rdi + rax * 8<64>:word64] = 0<64>
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(rsi - rax)
	branch Test(NE,Z) l0000000000469600
	// succ:  l0000000000469611 l0000000000469600
l0000000000469611:
	rax = CONVERT(0<32> + rsi * 8<64>, word32, word64)
	rdx = 0xFE0000000000000<64>
	rcx = 0xFFFFFFFFFFFFFFFF<64>
	SCZO = cond(rsi - rdx)
	r14 = Mem0[rbx + 0x18<64>:word64]
	branch Test(UGT,CZ) l0000000000469635
	// succ:  l0000000000469631_1 l0000000000469635
l0000000000469631_1:
	rcx = rax
	// succ:  l0000000000469635
l0000000000469635:
	call fn0000000000475560 (retsize: 8;)
	rcx = Mem0[rbx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000469665
	// succ:  l0000000000469643 l0000000000469665
l0000000000469643:
	r9 = CONVERT(0<32> + rcx * 8<64>, word32, word64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l0000000000469650
l0000000000469650:
	r8 = Mem0[rbx + 0x18<64>:word64]
	r8 = Mem0[r8 + rdx:word64]
	Mem0[rax + rdx:word64] = r8
	rdx = rdx + 8<64>
	SCZO = cond(rdx)
	SCZO = cond(rdx - r9)
	branch Test(NE,Z) l0000000000469650
	// succ:  l0000000000469665 l0000000000469650
l0000000000469665:
	SCZO = cond(rsi - rcx)
	branch Test(ULE,CZ) l0000000000469681
	// succ:  l000000000046966A l0000000000469681
l000000000046966A:
	// succ:  l0000000000469670
l0000000000469670:
	Mem0[rax + rcx * 8<64>:word64] = 0<64>
	rcx = rcx + 1<64>
	SCZO = cond(rcx)
	SCZO = cond(rsi - rcx)
	branch Test(NE,Z) l0000000000469670
	// succ:  l0000000000469681 l0000000000469670
l0000000000469681:
	SZO = cond(r13 & r13)
	C = false
	Mem0[rbx + 0x10<64>:word64] = rsi
	Mem0[rbx + 8<64>:word64] = rdi
	Mem0[rbx + 0x18<64>:word64] = rax
	branch Test(EQ,Z) l000000000046969A
	// succ:  l0000000000469692 l000000000046969A
l0000000000469692:
	rcx = r13
	call fn0000000000475540 (retsize: 8;)
	// succ:  l000000000046969A
l000000000046969A:
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l00000000004696A7
	// succ:  l000000000046969F l00000000004696A7
l000000000046969F:
	rcx = r14
	call fn0000000000475540 (retsize: 8;)
	// succ:  l00000000004696A7
l00000000004696A7:
	__lock()
	v20 = Mem0[rbp + 8<64>:word32] + 1<32>
	Mem0[rbp + 8<64>:word32] = v20
	SCZO = cond(v20)
	rax = Mem0[rbx + 8<64>:word64]
	rsi = rax
	rcx = Mem0[rsi:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004696C3
	// succ:  l00000000004696BC l00000000004696C3
l00000000004696BC:
	__lock()
	v21 = Mem0[rcx + 8<64>:word32] - 1<32>
	Mem0[rcx + 8<64>:word32] = v21
	SCZO = cond(v21)
	branch Test(EQ,Z) l0000000000469720
	// succ:  l00000000004696C3 l0000000000469720
l00000000004696C3:
	SCZO = cond(Mem0[rbx + 0x10<64>:word64] - 0<64>)
	Mem0[rsi:word64] = rbp
	branch Test(EQ,Z) l0000000000469710
	// succ:  l00000000004696CD l0000000000469710
l00000000004696CD:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l00000000004696E7
	// succ:  l00000000004696E7
l00000000004696D1:
	rax = Mem0[rbx + 0x18<64>:word64]
	Mem0[rax + rdi:word64] = 0<64>
	// succ:  l00000000004696DD
l00000000004696DD:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	SCZO = cond(Mem0[rbx + 0x10<64>:word64] - rsi)
	branch Test(ULE,CZ) l0000000000469710
	// succ:  l00000000004696E7 l0000000000469710
l00000000004696E7:
	rax = Mem0[rbx + 0x18<64>:word64]
	rdi = CONVERT(0<32> + rsi * 8<64>, word32, word64)
	rcx = Mem0[rax + rsi * 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004696DD
	// succ:  l00000000004696FC l00000000004696DD
l00000000004696FC:
	__lock()
	v24 = Mem0[rcx + 8<64>:word32] - 1<32>
	Mem0[rcx + 8<64>:word32] = v24
	SCZO = cond(v24)
	branch Test(NE,Z) l00000000004696D1
	// succ:  l0000000000469703 l00000000004696D1
l0000000000469703:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 8<64>:word64] (retsize: 8;)
	goto l00000000004696D1
	// succ:  l00000000004696D1
l0000000000469710:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000469560_exit
l0000000000469720:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 8<64>:word64] (retsize: 8;)
	goto l00000000004696C3
	// succ:  l00000000004696C3
fn0000000000469560_exit:


// fn0000000000469790
// Return size: 8
define fn0000000000469790
fn0000000000469790_entry:
	rsp = fp
	// succ:  l0000000000469790
l0000000000469790:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rdx
	rdi = rcx
	rcx = r8
	rbx = r8
	call fn000000000042BB80 (retsize: 8;)
	rcx = Mem0[rsi + 0x10<64>:word64]
	r9 = rcx - 1<64>
	SCZO = cond(rax - r9)
	branch Test(UGT,CZ) l00000000004697D4
	// succ:  l00000000004697B5 l00000000004697D4
l00000000004697B5:
	rdx = Mem0[rsi + 8<64>:word64]
	r8 = Mem0[rdx + rax * 8<64>:word64]
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l00000000004697D4
	// succ:  l00000000004697C2 l00000000004697D4
l00000000004697C2:
	rdx = rbx
	rcx = rdi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004697CF_thunk_fn0000000000469560
l00000000004697CF_thunk_fn0000000000469560:
	call fn0000000000469560 (retsize: 0;)
	return
	// succ:  fn0000000000469790_exit
l00000000004697D4:
	rcx = 0x000000000048D950<p64>
	call fn00000000004712A0 (retsize: 8;)
	// succ:  l00000000004697EF_thunk_fn00000000004697F0
l00000000004697EF_thunk_fn00000000004697F0:
	call fn00000000004697F0 (retsize: 0;)
	return
	// succ:  fn0000000000469790_exit
fn0000000000469790_exit:


// fn00000000004697F0
// Return size: 8
define fn00000000004697F0
fn00000000004697F0_entry:
	rsp = fp
	// succ:  l00000000004697F0
l00000000004697F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = r8
	r8 = Mem0[r8:word64]
	rdi = rcx
	rsi = rdx
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l0000000000469827
	// succ:  l0000000000469808 l0000000000469827
l0000000000469808:
	// succ:  l0000000000469810
l0000000000469810:
	rbx = rbx + 8<64>
	SCZO = cond(rbx)
	rdx = rsi
	rcx = rdi
	call fn0000000000469790 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	r8 = Mem0[rbx:word64]
	SZO = cond(r8 & r8)
	C = false
	branch Test(NE,Z) l0000000000469810
	// succ:  l0000000000469827 l0000000000469810
l0000000000469827:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004697F0_exit
fn00000000004697F0_exit:


// fn0000000000469830
// Return size: 8
define fn0000000000469830
fn0000000000469830_entry:
	rsp = fp
	// succ:  l0000000000469830
l0000000000469830:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdi = rdx
	rdx = Mem0[rdx + 0x10<64>:word64]
	rbx = rcx
	Mem0[rcx:word32] = r8d
	Mem0[rcx + 8<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	Mem0[rcx + 0x20<64>:word64] = 0<64>
	Mem0[rcx + 0x10<64>:word64] = rdx
	rax = CONVERT(0<32> + rdx * 8<64>, word32, word64)
	rcx = 0xFE0000000000000<64>
	SCZO = cond(rdx - rcx)
	rcx = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(UGT,CZ) l0000000000469883
	// succ:  l000000000046987F_1 l0000000000469883
l000000000046987F_1:
	rcx = rax
	// succ:  l0000000000469883
l0000000000469883:
	call fn0000000000475560 (retsize: 8;)
	rdx = Mem0[rbx + 0x10<64>:word64]
	Mem0[rbx + 8<64>:word64] = rax
	SZO = cond(rdx & rdx)
	C = false
	rcx = rdx
	branch Test(EQ,Z) l00000000004698EF
	// succ:  l0000000000469898 l00000000004698EF
l0000000000469898:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	goto l00000000004698A4
	// succ:  l00000000004698A4
l00000000004698A0:
	rax = Mem0[rbx + 8<64>:word64]
	// succ:  l00000000004698A4
l00000000004698A4:
	r8 = Mem0[rdi + 8<64>:word64]
	r8 = Mem0[r8 + rcx * 8<64>:word64]
	Mem0[rax + rcx * 8<64>:word64] = r8
	rax = Mem0[rbx + 8<64>:word64]
	rax = Mem0[rax + rcx * 8<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004698C6
	// succ:  l00000000004698BD l00000000004698C6
l00000000004698BD:
	__lock()
	v19 = Mem0[rax + 8<64>:word32] + 1<32>
	Mem0[rax + 8<64>:word32] = v19
	SCZO = cond(v19)
	rdx = Mem0[rbx + 0x10<64>:word64]
	// succ:  l00000000004698C6
l00000000004698C6:
	rcx = rcx + 1<64>
	SCZO = cond(rcx)
	SCZO = cond(rdx - rcx)
	branch Test(UGT,CZ) l00000000004698A0
	// succ:  l00000000004698CF l00000000004698A0
l00000000004698CF:
	rcx = 0xFE0000000000000<64>
	rax = CONVERT(0<32> + rdx * 8<64>, word32, word64)
	SCZO = cond(rdx - rcx)
	rcx = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(UGT,CZ) l00000000004698EF
	// succ:  l00000000004698EB_1 l00000000004698EF
l00000000004698EB_1:
	rcx = rax
	// succ:  l00000000004698EF
l00000000004698EF:
	call fn0000000000475560 (retsize: 8;)
	SCZO = cond(Mem0[rbx + 0x10<64>:word64] - 0<64>)
	Mem0[rbx + 0x18<64>:word64] = rax
	branch Test(EQ,Z) l000000000046992F
	// succ:  l00000000004698FF l000000000046992F
l00000000004698FF:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	goto l0000000000469907
	// succ:  l0000000000469907
l0000000000469903:
	rax = Mem0[rbx + 0x18<64>:word64]
	// succ:  l0000000000469907
l0000000000469907:
	rdx = Mem0[rdi + 0x18<64>:word64]
	rdx = Mem0[rdx + rcx * 8<64>:word64]
	Mem0[rax + rcx * 8<64>:word64] = rdx
	rax = Mem0[rbx + 0x18<64>:word64]
	rax = Mem0[rax + rcx * 8<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000469925
	// succ:  l0000000000469920 l0000000000469925
l0000000000469920:
	__lock()
	v20 = Mem0[rax + 8<64>:word32] + 1<32>
	Mem0[rax + 8<64>:word32] = v20
	SCZO = cond(v20)
	// succ:  l0000000000469925
l0000000000469925:
	rcx = rcx + 1<64>
	SCZO = cond(rcx)
	SCZO = cond(Mem0[rbx + 0x10<64>:word64] - rcx)
	branch Test(UGT,CZ) l0000000000469903
	// succ:  l000000000046992F l0000000000469903
l000000000046992F:
	ecx = 0x30<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475560 (retsize: 8;)
	Mem0[rbx + 0x20<64>:word64] = rax
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000469945
	// succ:  l0000000000469945
l0000000000469941:
	rax = Mem0[rbx + 0x20<64>:word64]
	// succ:  l0000000000469945
l0000000000469945:
	Mem0[rax + rdx:word64] = 0<64>
	rdx = rdx + 8<64>
	SCZO = cond(rdx)
	SCZO = cond(rdx - 0x30<64>)
	branch Test(NE,Z) l0000000000469941
	// succ:  l0000000000469957 l0000000000469941
l0000000000469957:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	// succ:  l0000000000469960
l0000000000469960:
	rax = Mem0[rdi + 0x20<64>:word64]
	rcx = Mem0[rax + rsi:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004699AB
	// succ:  l000000000046996D l00000000004699AB
l000000000046996D:
	eax = strlen(rcx)
	rbp = rax + 1<64>
	r12 = rsi
	r12 = r12 + Mem0[rbx + 0x20<64>:word64]
	SCZO = cond(r12)
	rcx = rbp
	call fn0000000000475560 (retsize: 8;)
	Mem0[r12:word64] = rax
	rax = Mem0[rbx + 0x20<64>:word64]
	r8 = rbp
	rcx = Mem0[rax + rsi:word64]
	rax = Mem0[rdi + 0x20<64>:word64]
	rdx = Mem0[rax + rsi:word64]
	rsi = rsi + 8<64>
	SCZO = cond(rsi)
	rax = memcpy(rcx, rdx, r8)
	SCZO = cond(rsi - 0x30<64>)
	branch Test(NE,Z) l0000000000469960
	// succ:  l00000000004699AB l0000000000469960
l00000000004699AB:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000469830_exit
fn0000000000469830_exit:


// fn00000000004699E0
// Return size: 8
define fn00000000004699E0
fn00000000004699E0_entry:
	rsp = fp
	// succ:  l00000000004699E0
l00000000004699E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x000000000048A900<p64>
	Mem0[rcx:word32] = edx
	rbx = rcx
	Mem0[rcx + 0x10<64>:word64] = 0x1C<64>
	Mem0[rcx + 8<64>:word64] = rax
	rax = 0x000000000048A780<p64>
	Mem0[rcx + 0x20<64>:word64] = 0<64>
	rdx = 0x000000000048A900<p64>
	Mem0[rcx + 0x18<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rcx = 0x000000000048A780<p64>
	goto l0000000000469A2B
	// succ:  l0000000000469A2B
l0000000000469A23:
	rdx = Mem0[rbx + 8<64>:word64]
	rcx = Mem0[rbx + 0x18<64>:word64]
	// succ:  l0000000000469A2B
l0000000000469A2B:
	Mem0[rcx + rax:word64] = 0<64>
	Mem0[rdx + rax:word64] = 0<64>
	rax = rax + 8<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 0xE0<64>)
	branch Test(NE,Z) l0000000000469A23
	// succ:  l0000000000469A47 l0000000000469A23
l0000000000469A47:
	rax = 0x000000000048A720<p64>
	Mem0[rbx + 0x20<64>:word64] = rax
	rax = 0x000000000048A180<p64>
	Mem0[0x000000000048A720<p64>:word64] = rax
	call fn000000000046AC40 (retsize: 8;)
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = 0x000000000048A720<p64>
	Mem0[0x000000000048A180<p64>:word16] = ax
	eax = 8<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000469A7B
l0000000000469A7B:
	Mem0[rdx + rax:word64] = 0<64>
	rax = rax + 8<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 0x30<64>)
	branch Test(EQ,Z) l0000000000469A93
	// succ:  l0000000000469A8D l0000000000469A93
l0000000000469A8D:
	rdx = Mem0[rbx + 0x20<64>:word64]
	goto l0000000000469A7B
	// succ:  l0000000000469A7B
l0000000000469A93:
	rcx = 0x000000000048A1C0<p64>
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn0000000000468C90 (retsize: 8;)
	rdx = Mem0[0x00000000004918B0<p64>:word64]
	r8 = 0x000000000048A1C0<p64>
	rcx = rbx
	call fn0000000000469560 (retsize: 8;)
	rcx = 0x000000000048A880<p64>
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000046BC00 (retsize: 8;)
	rdx = Mem0[0x0000000000491910<p64>:word64]
	r8 = 0x000000000048A880<p64>
	rcx = rbx
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491C50<p64>:word64]
	rcx = 0x0000000000489800<p64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[0x0000000000489A48<p64>:word32] = 1<32>
	Mem0[0x0000000000489A50<p64>:word64] = 0<64>
	Mem0[0x0000000000489A58<p64>:word64] = 0<64>
	Mem0[0x0000000000489A60<p64>:byte] = 0<8>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x0000000000489A68<p64>:word64] = 0<64>
	Mem0[0x0000000000489A70<p64>:word64] = 0<64>
	Mem0[0x0000000000489A40<p64>:word64] = rax
	rax = Mem0[0x0000000000491DB0<p64>:word64]
	Mem0[0x0000000000489A78<p64>:word64] = 0<64>
	Mem0[0x0000000000489A80<p64>:word64] = 0<64>
	Mem0[0x0000000000489A88<p64>:byte] = 0<8>
	Mem0[0x0000000000489A89<p64>:byte] = 0<8>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x0000000000489AC8<p64>:byte] = 0<8>
	Mem0[0x0000000000489808<p64>:word32] = 1<32>
	Mem0[0x0000000000489800<p64>:word64] = rax
	rax = 0x0000000000489A40<p64>
	Mem0[0x0000000000489810<p64>:word64] = rax
	call fn000000000046D7F0 (retsize: 8;)
	rdx = Mem0[0x00000000004919F0<p64>:word64]
	r8 = 0x0000000000489800<p64>
	rcx = rbx
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491D60<p64>:word64]
	rdx = Mem0[0x0000000000491950<p64>:word64]
	r8 = 0x000000000048AA10<p64>
	rcx = rbx
	Mem0[0x000000000048AA18<p64>:word32] = 1<32>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x000000000048AA10<p64>:word64] = rax
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491D80<p64>:word64]
	rdx = Mem0[0x0000000000491970<p64>:word64]
	r8 = 0x000000000048AA30<p64>
	rcx = rbx
	Mem0[0x000000000048AA38<p64>:word32] = 1<32>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x000000000048AA30<p64>:word64] = rax
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491D40<p64>:word64]
	Mem0[0x000000000048A8C8<p64>:word32] = 1<32>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x000000000048A8C0<p64>:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	rdx = Mem0[0x0000000000491930<p64>:word64]
	r8 = 0x000000000048A8C0<p64>
	rcx = rbx
	Mem0[0x000000000048A8D0<p64>:word64] = rax
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491CB0<p64>:word64]
	rcx = 0x00000000004899A0<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[0x0000000000489F88<p64>:word32] = 1<32>
	Mem0[0x0000000000489F90<p64>:word64] = 0<64>
	Mem0[0x0000000000489F98<p64>:word64] = 0<64>
	Mem0[0x0000000000489FA0<p64>:byte] = 0<8>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x0000000000489FA1<p64>:byte] = 0<8>
	Mem0[0x0000000000489FA2<p64>:byte] = 0<8>
	Mem0[0x0000000000489F80<p64>:word64] = rax
	rax = Mem0[0x0000000000491B80<p64>:word64]
	Mem0[0x0000000000489FA8<p64>:word64] = 0<64>
	Mem0[0x0000000000489FB0<p64>:word64] = 0<64>
	Mem0[0x0000000000489FB8<p64>:word64] = 0<64>
	Mem0[0x0000000000489FC0<p64>:word64] = 0<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x0000000000489FC8<p64>:word64] = 0<64>
	Mem0[0x0000000000489FD0<p64>:word64] = 0<64>
	Mem0[0x00000000004899A0<p64>:word64] = rax
	rax = 0x0000000000489F80<p64>
	Mem0[0x0000000000489FD8<p64>:word32] = 0<32>
	Mem0[0x0000000000489FDC<p64>:byte] = 0<8>
	Mem0[0x0000000000489FDD<p64>:byte] = 0<8>
	Mem0[0x0000000000489FDE<p64>:byte] = 0<8>
	Mem0[0x0000000000489FDF<p64>:byte] = 0<8>
	Mem0[0x0000000000489FE0<p64>:byte] = 0<8>
	Mem0[0x0000000000489FE1<p64>:byte] = 0<8>
	Mem0[0x0000000000489FE2<p64>:byte] = 0<8>
	Mem0[0x0000000000489FE3<p64>:byte] = 0<8>
	Mem0[0x0000000000489FEF<p64>:byte] = 0<8>
	Mem0[0x00000000004899A8<p64>:word32] = 1<32>
	Mem0[0x00000000004899B0<p64>:word64] = rax
	call fn0000000000452740 (retsize: 8;)
	rdx = Mem0[0x0000000000491730<p64>:word64]
	r8 = 0x00000000004899A0<p64>
	rcx = rbx
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491CC0<p64>:word64]
	rcx = 0x00000000004899C0<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[0x000000000048A008<p64>:word32] = 1<32>
	Mem0[0x000000000048A010<p64>:word64] = 0<64>
	Mem0[0x000000000048A018<p64>:word64] = 0<64>
	Mem0[0x000000000048A020<p64>:byte] = 0<8>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x000000000048A021<p64>:byte] = 0<8>
	Mem0[0x000000000048A022<p64>:byte] = 0<8>
	Mem0[0x000000000048A000<p64>:word64] = rax
	rax = Mem0[0x0000000000491B90<p64>:word64]
	Mem0[0x000000000048A028<p64>:word64] = 0<64>
	Mem0[0x000000000048A030<p64>:word64] = 0<64>
	Mem0[0x000000000048A038<p64>:word64] = 0<64>
	Mem0[0x000000000048A040<p64>:word64] = 0<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x000000000048A048<p64>:word64] = 0<64>
	Mem0[0x000000000048A050<p64>:word64] = 0<64>
	Mem0[0x00000000004899C0<p64>:word64] = rax
	rax = 0x000000000048A000<p64>
	Mem0[0x000000000048A058<p64>:word32] = 0<32>
	Mem0[0x000000000048A05C<p64>:byte] = 0<8>
	Mem0[0x000000000048A05D<p64>:byte] = 0<8>
	Mem0[0x000000000048A05E<p64>:byte] = 0<8>
	Mem0[0x000000000048A05F<p64>:byte] = 0<8>
	Mem0[0x000000000048A060<p64>:byte] = 0<8>
	Mem0[0x000000000048A061<p64>:byte] = 0<8>
	Mem0[0x000000000048A062<p64>:byte] = 0<8>
	Mem0[0x000000000048A063<p64>:byte] = 0<8>
	Mem0[0x000000000048A06F<p64>:byte] = 0<8>
	Mem0[0x00000000004899C8<p64>:word32] = 1<32>
	Mem0[0x00000000004899D0<p64>:word64] = rax
	call fn0000000000452AD0 (retsize: 8;)
	rdx = Mem0[0x0000000000491740<p64>:word64]
	r8 = 0x00000000004899C0<p64>
	rcx = rbx
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491E40<p64>:word64]
	rdx = Mem0[0x0000000000491A60<p64>:word64]
	r8 = 0x0000000000489880<p64>
	rcx = rbx
	Mem0[0x0000000000489888<p64>:word32] = 1<32>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x0000000000489880<p64>:word64] = rax
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491E60<p64>:word64]
	rdx = Mem0[0x0000000000491A80<p64>:word64]
	r8 = 0x00000000004898A0<p64>
	rcx = rbx
	Mem0[0x00000000004898A8<p64>:word32] = 1<32>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x00000000004898A0<p64>:word64] = rax
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491C80<p64>:word64]
	rdx = 0x0000000000489C00<p64>
	rcx = 0x00000000004898C0<p64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[0x0000000000489C08<p64>:word32] = 1<32>
	Mem0[0x0000000000489C10<p64>:word64] = 0<64>
	Mem0[0x0000000000489C18<p64>:word64] = 0<64>
	Mem0[0x0000000000489C20<p64>:word64] = 0<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x0000000000489C28<p64>:word64] = 0<64>
	Mem0[0x0000000000489C30<p64>:word64] = 0<64>
	Mem0[0x0000000000489C00<p64>:word64] = rax
	Mem0[0x0000000000489C38<p64>:word64] = 0<64>
	Mem0[0x0000000000489C40<p64>:word64] = 0<64>
	Mem0[0x0000000000489C48<p64>:word64] = 0<64>
	Mem0[0x0000000000489C50<p64>:word64] = 0<64>
	Mem0[0x0000000000489C58<p64>:word64] = 0<64>
	Mem0[0x0000000000489C60<p64>:word64] = 0<64>
	Mem0[0x0000000000489C68<p64>:word64] = 0<64>
	Mem0[0x0000000000489C70<p64>:word64] = 0<64>
	Mem0[0x0000000000489C78<p64>:word64] = 0<64>
	Mem0[0x0000000000489C80<p64>:word64] = 0<64>
	Mem0[0x0000000000489C88<p64>:word64] = 0<64>
	Mem0[0x0000000000489C90<p64>:word64] = 0<64>
	Mem0[0x0000000000489C98<p64>:word64] = 0<64>
	Mem0[0x0000000000489CA0<p64>:word64] = 0<64>
	Mem0[0x0000000000489CA8<p64>:word64] = 0<64>
	Mem0[0x0000000000489CB0<p64>:word64] = 0<64>
	Mem0[0x0000000000489CB8<p64>:word64] = 0<64>
	Mem0[0x0000000000489CC0<p64>:word64] = 0<64>
	Mem0[0x0000000000489CC8<p64>:word64] = 0<64>
	Mem0[0x0000000000489CD0<p64>:word64] = 0<64>
	Mem0[0x0000000000489CD8<p64>:word64] = 0<64>
	Mem0[0x0000000000489CE0<p64>:word64] = 0<64>
	Mem0[0x0000000000489CE8<p64>:word64] = 0<64>
	Mem0[0x0000000000489CF0<p64>:word64] = 0<64>
	Mem0[0x0000000000489CF8<p64>:word64] = 0<64>
	Mem0[0x0000000000489D00<p64>:word64] = 0<64>
	Mem0[0x0000000000489D08<p64>:word64] = 0<64>
	Mem0[0x0000000000489D10<p64>:word64] = 0<64>
	Mem0[0x0000000000489D18<p64>:word64] = 0<64>
	Mem0[0x0000000000489D20<p64>:word64] = 0<64>
	Mem0[0x0000000000489D28<p64>:word64] = 0<64>
	Mem0[0x0000000000489D30<p64>:word64] = 0<64>
	Mem0[0x0000000000489D38<p64>:word64] = 0<64>
	Mem0[0x0000000000489D40<p64>:word64] = 0<64>
	Mem0[0x0000000000489D48<p64>:word64] = 0<64>
	Mem0[0x0000000000489D50<p64>:word64] = 0<64>
	Mem0[0x0000000000489D58<p64>:word64] = 0<64>
	Mem0[0x0000000000489D60<p64>:word64] = 0<64>
	Mem0[0x0000000000489D68<p64>:word64] = 0<64>
	Mem0[0x0000000000489D70<p64>:word64] = 0<64>
	Mem0[0x0000000000489D78<p64>:word64] = 0<64>
	Mem0[0x0000000000489D80<p64>:word64] = 0<64>
	Mem0[0x0000000000489D88<p64>:byte] = 0<8>
	call fn0000000000453AB0 (retsize: 8;)
	rdx = Mem0[0x0000000000491770<p64>:word64]
	r8 = 0x00000000004898C0<p64>
	rcx = rbx
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491DD0<p64>:word64]
	rdx = Mem0[0x0000000000491A10<p64>:word64]
	r8 = 0x0000000000489840<p64>
	rcx = rbx
	Mem0[0x0000000000489848<p64>:word32] = 1<32>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x0000000000489840<p64>:word64] = rax
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491DF0<p64>:word64]
	rdx = Mem0[0x0000000000491A30<p64>:word64]
	r8 = 0x0000000000489860<p64>
	rcx = rbx
	Mem0[0x0000000000489868<p64>:word32] = 1<32>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x0000000000489860<p64>:word64] = rax
	call fn0000000000469560 (retsize: 8;)
	rcx = 0x00000000004897C0<p64>
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000046D480 (retsize: 8;)
	rdx = Mem0[0x00000000004919D0<p64>:word64]
	r8 = 0x00000000004897C0<p64>
	rcx = rbx
	call fn0000000000469560 (retsize: 8;)
	rcx = 0x000000000048A400<p64>
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000468F80 (retsize: 8;)
	rdx = Mem0[0x00000000004918C0<p64>:word64]
	r8 = 0x000000000048A400<p64>
	rcx = rbx
	call fn0000000000469560 (retsize: 8;)
	rcx = 0x000000000048A8A0<p64>
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000046BD10 (retsize: 8;)
	rdx = Mem0[0x0000000000491920<p64>:word64]
	r8 = 0x000000000048A8A0<p64>
	rcx = rbx
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491C60<p64>:word64]
	rcx = 0x0000000000489820<p64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[0x0000000000489B08<p64>:word32] = 1<32>
	Mem0[0x0000000000489B10<p64>:word64] = 0<64>
	Mem0[0x0000000000489B18<p64>:word64] = 0<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x0000000000489B20<p64>:byte] = 0<8>
	Mem0[0x0000000000489B28<p64>:word64] = 0<64>
	Mem0[0x0000000000489B00<p64>:word64] = rax
	rax = Mem0[0x0000000000491DC0<p64>:word64]
	Mem0[0x0000000000489B30<p64>:word64] = 0<64>
	Mem0[0x0000000000489B38<p64>:word64] = 0<64>
	Mem0[0x0000000000489B40<p64>:word64] = 0<64>
	Mem0[0x0000000000489B48<p64>:word16] = r9w
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x0000000000489B4A<p64>:word16] = r10w
	Mem0[0x0000000000489BC8<p64>:byte] = 0<8>
	Mem0[0x0000000000489820<p64>:word64] = rax
	rax = 0x0000000000489B00<p64>
	Mem0[0x0000000000489828<p64>:word32] = 1<32>
	Mem0[0x0000000000489830<p64>:word64] = rax
	call fn000000000046DB70 (retsize: 8;)
	rdx = Mem0[0x0000000000491A00<p64>:word64]
	r8 = 0x0000000000489820<p64>
	rcx = rbx
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491D70<p64>:word64]
	rdx = Mem0[0x0000000000491960<p64>:word64]
	r8 = 0x000000000048AA20<p64>
	rcx = rbx
	Mem0[0x000000000048AA28<p64>:word32] = 1<32>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x000000000048AA20<p64>:word64] = rax
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491D90<p64>:word64]
	rdx = Mem0[0x0000000000491980<p64>:word64]
	r8 = 0x000000000048AA40<p64>
	rcx = rbx
	Mem0[0x000000000048AA48<p64>:word32] = 1<32>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x000000000048AA40<p64>:word64] = rax
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491D50<p64>:word64]
	Mem0[0x000000000048A8E8<p64>:word32] = 1<32>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x000000000048A8E0<p64>:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	rdx = Mem0[0x0000000000491940<p64>:word64]
	r8 = 0x000000000048A8E0<p64>
	rcx = rbx
	Mem0[0x000000000048A8F0<p64>:word64] = rax
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491CD0<p64>:word64]
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	Mem0[0x000000000048A0A2<p64>:word16] = cx
	rcx = 0x00000000004899E0<p64>
	Mem0[0x000000000048A0A4<p64>:word16] = r8w
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	Mem0[0x000000000048A088<p64>:word32] = 1<32>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x000000000048A090<p64>:word64] = 0<64>
	Mem0[0x000000000048A098<p64>:word64] = 0<64>
	Mem0[0x000000000048A080<p64>:word64] = rax
	rax = Mem0[0x0000000000491BA0<p64>:word64]
	Mem0[0x000000000048A0A0<p64>:byte] = 0<8>
	Mem0[0x000000000048A0A8<p64>:word64] = 0<64>
	Mem0[0x000000000048A0B0<p64>:word64] = 0<64>
	Mem0[0x000000000048A0B8<p64>:word64] = 0<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x000000000048A0C0<p64>:word64] = 0<64>
	Mem0[0x000000000048A0C8<p64>:word64] = 0<64>
	Mem0[0x00000000004899E0<p64>:word64] = rax
	rax = 0x000000000048A080<p64>
	Mem0[0x000000000048A0D0<p64>:word64] = 0<64>
	Mem0[0x000000000048A0D8<p64>:word32] = 0<32>
	Mem0[0x000000000048A0DC<p64>:byte] = 0<8>
	Mem0[0x000000000048A0DD<p64>:byte] = 0<8>
	Mem0[0x000000000048A0DE<p64>:byte] = 0<8>
	Mem0[0x000000000048A0DF<p64>:byte] = 0<8>
	Mem0[0x000000000048A0E0<p64>:byte] = 0<8>
	Mem0[0x000000000048A0E1<p64>:byte] = 0<8>
	Mem0[0x000000000048A0E2<p64>:byte] = 0<8>
	Mem0[0x000000000048A0E3<p64>:byte] = 0<8>
	Mem0[0x000000000048A0FA<p64>:byte] = 0<8>
	Mem0[0x00000000004899E8<p64>:word32] = 1<32>
	Mem0[0x00000000004899F0<p64>:word64] = rax
	call fn0000000000452E60 (retsize: 8;)
	rdx = Mem0[0x0000000000491750<p64>:word64]
	r8 = 0x00000000004899E0<p64>
	rcx = rbx
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491CE0<p64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = 0x0000000000489A00<p64>
	Mem0[0x000000000048A124<p64>:word16] = dx
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[0x000000000048A108<p64>:word32] = 1<32>
	Mem0[0x000000000048A110<p64>:word64] = 0<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x000000000048A118<p64>:word64] = 0<64>
	Mem0[0x000000000048A120<p64>:byte] = 0<8>
	Mem0[0x000000000048A100<p64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[0x000000000048A128<p64>:word64] = 0<64>
	Mem0[0x000000000048A122<p64>:word16] = ax
	rax = Mem0[0x0000000000491BB0<p64>:word64]
	Mem0[0x000000000048A130<p64>:word64] = 0<64>
	Mem0[0x000000000048A138<p64>:word64] = 0<64>
	Mem0[0x000000000048A140<p64>:word64] = 0<64>
	Mem0[0x000000000048A148<p64>:word64] = 0<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x000000000048A150<p64>:word64] = 0<64>
	Mem0[0x000000000048A158<p64>:word32] = 0<32>
	Mem0[0x0000000000489A00<p64>:word64] = rax
	rax = 0x000000000048A100<p64>
	Mem0[0x000000000048A15C<p64>:byte] = 0<8>
	Mem0[0x000000000048A15D<p64>:byte] = 0<8>
	Mem0[0x000000000048A15E<p64>:byte] = 0<8>
	Mem0[0x000000000048A15F<p64>:byte] = 0<8>
	Mem0[0x000000000048A160<p64>:byte] = 0<8>
	Mem0[0x000000000048A161<p64>:byte] = 0<8>
	Mem0[0x000000000048A162<p64>:byte] = 0<8>
	Mem0[0x000000000048A163<p64>:byte] = 0<8>
	Mem0[0x000000000048A17A<p64>:byte] = 0<8>
	Mem0[0x0000000000489A08<p64>:word32] = 1<32>
	Mem0[0x0000000000489A10<p64>:word64] = rax
	call fn0000000000453210 (retsize: 8;)
	rdx = Mem0[0x0000000000491760<p64>:word64]
	r8 = 0x0000000000489A00<p64>
	rcx = rbx
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491E50<p64>:word64]
	rdx = Mem0[0x0000000000491A70<p64>:word64]
	r8 = 0x0000000000489890<p64>
	rcx = rbx
	Mem0[0x0000000000489898<p64>:word32] = 1<32>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x0000000000489890<p64>:word64] = rax
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491E70<p64>:word64]
	rdx = Mem0[0x0000000000491A90<p64>:word64]
	r8 = 0x00000000004898B0<p64>
	rcx = rbx
	Mem0[0x00000000004898B8<p64>:word32] = 1<32>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x00000000004898B0<p64>:word64] = rax
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491C90<p64>:word64]
	rdx = 0x0000000000489DC0<p64>
	rcx = 0x0000000000489900<p64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[0x0000000000489DC8<p64>:word32] = 1<32>
	Mem0[0x0000000000489DD0<p64>:word64] = 0<64>
	Mem0[0x0000000000489DD8<p64>:word64] = 0<64>
	Mem0[0x0000000000489DE0<p64>:word64] = 0<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x0000000000489DE8<p64>:word64] = 0<64>
	Mem0[0x0000000000489DF0<p64>:word64] = 0<64>
	Mem0[0x0000000000489DC0<p64>:word64] = rax
	Mem0[0x0000000000489DF8<p64>:word64] = 0<64>
	Mem0[0x0000000000489E00<p64>:word64] = 0<64>
	Mem0[0x0000000000489E08<p64>:word64] = 0<64>
	Mem0[0x0000000000489E10<p64>:word64] = 0<64>
	Mem0[0x0000000000489E18<p64>:word64] = 0<64>
	Mem0[0x0000000000489E20<p64>:word64] = 0<64>
	Mem0[0x0000000000489E28<p64>:word64] = 0<64>
	Mem0[0x0000000000489E30<p64>:word64] = 0<64>
	Mem0[0x0000000000489E38<p64>:word64] = 0<64>
	Mem0[0x0000000000489E40<p64>:word64] = 0<64>
	Mem0[0x0000000000489E48<p64>:word64] = 0<64>
	Mem0[0x0000000000489E50<p64>:word64] = 0<64>
	Mem0[0x0000000000489E58<p64>:word64] = 0<64>
	Mem0[0x0000000000489E60<p64>:word64] = 0<64>
	Mem0[0x0000000000489E68<p64>:word64] = 0<64>
	Mem0[0x0000000000489E70<p64>:word64] = 0<64>
	Mem0[0x0000000000489E78<p64>:word64] = 0<64>
	Mem0[0x0000000000489E80<p64>:word64] = 0<64>
	Mem0[0x0000000000489E88<p64>:word64] = 0<64>
	Mem0[0x0000000000489E90<p64>:word64] = 0<64>
	Mem0[0x0000000000489E98<p64>:word64] = 0<64>
	Mem0[0x0000000000489EA0<p64>:word64] = 0<64>
	Mem0[0x0000000000489EA8<p64>:word64] = 0<64>
	Mem0[0x0000000000489EB0<p64>:word64] = 0<64>
	Mem0[0x0000000000489EB8<p64>:word64] = 0<64>
	Mem0[0x0000000000489EC0<p64>:word64] = 0<64>
	Mem0[0x0000000000489EC8<p64>:word64] = 0<64>
	Mem0[0x0000000000489ED0<p64>:word64] = 0<64>
	Mem0[0x0000000000489ED8<p64>:word64] = 0<64>
	Mem0[0x0000000000489EE0<p64>:word64] = 0<64>
	Mem0[0x0000000000489EE8<p64>:word64] = 0<64>
	Mem0[0x0000000000489EF0<p64>:word64] = 0<64>
	Mem0[0x0000000000489EF8<p64>:word64] = 0<64>
	Mem0[0x0000000000489F00<p64>:word64] = 0<64>
	Mem0[0x0000000000489F08<p64>:word64] = 0<64>
	Mem0[0x0000000000489F10<p64>:word64] = 0<64>
	Mem0[0x0000000000489F18<p64>:word64] = 0<64>
	Mem0[0x0000000000489F20<p64>:word64] = 0<64>
	Mem0[0x0000000000489F28<p64>:word64] = 0<64>
	Mem0[0x0000000000489F30<p64>:word64] = 0<64>
	Mem0[0x0000000000489F38<p64>:word64] = 0<64>
	Mem0[0x0000000000489F40<p64>:word64] = 0<64>
	Mem0[0x0000000000489F48<p64>:byte] = 0<8>
	call fn0000000000454350 (retsize: 8;)
	rdx = Mem0[0x0000000000491780<p64>:word64]
	r8 = 0x0000000000489900<p64>
	rcx = rbx
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491DE0<p64>:word64]
	rdx = Mem0[0x0000000000491A20<p64>:word64]
	r8 = 0x0000000000489850<p64>
	rcx = rbx
	Mem0[0x0000000000489858<p64>:word32] = 1<32>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x0000000000489850<p64>:word64] = rax
	call fn0000000000469560 (retsize: 8;)
	rax = Mem0[0x0000000000491E00<p64>:word64]
	rdx = Mem0[0x0000000000491A40<p64>:word64]
	r8 = 0x0000000000489870<p64>
	rcx = rbx
	Mem0[0x0000000000489878<p64>:word32] = 1<32>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[0x0000000000489870<p64>:word64] = rax
	call fn0000000000469560 (retsize: 8;)
	rcx = 0x00000000004897E0<p64>
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000046D660 (retsize: 8;)
	rdx = Mem0[0x00000000004919E0<p64>:word64]
	r8 = 0x00000000004897E0<p64>
	rcx = rbx
	call fn0000000000469560 (retsize: 8;)
	rcx = Mem0[0x00000000004919F0<p64>:word64]
	rsi = Mem0[rbx + 0x18<64>:word64]
	call fn000000000042BB80 (retsize: 8;)
	rcx = 0x0000000000489A40<p64>
	Mem0[rsi + rax * 8<64>:word64] = rcx
	rcx = Mem0[0x0000000000491730<p64>:word64]
	rsi = Mem0[rbx + 0x18<64>:word64]
	call fn000000000042BB80 (retsize: 8;)
	rcx = 0x0000000000489F80<p64>
	Mem0[rsi + rax * 8<64>:word64] = rcx
	rcx = Mem0[0x0000000000491740<p64>:word64]
	rsi = Mem0[rbx + 0x18<64>:word64]
	call fn000000000042BB80 (retsize: 8;)
	rcx = 0x000000000048A000<p64>
	Mem0[rsi + rax * 8<64>:word64] = rcx
	rcx = Mem0[0x0000000000491770<p64>:word64]
	rsi = Mem0[rbx + 0x18<64>:word64]
	call fn000000000042BB80 (retsize: 8;)
	rdx = 0x0000000000489C00<p64>
	rcx = Mem0[0x0000000000491A00<p64>:word64]
	Mem0[rsi + rax * 8<64>:word64] = rdx
	rsi = Mem0[rbx + 0x18<64>:word64]
	call fn000000000042BB80 (retsize: 8;)
	rcx = 0x0000000000489B00<p64>
	Mem0[rsi + rax * 8<64>:word64] = rcx
	rcx = Mem0[0x0000000000491750<p64>:word64]
	rsi = Mem0[rbx + 0x18<64>:word64]
	call fn000000000042BB80 (retsize: 8;)
	rdx = 0x000000000048A080<p64>
	rcx = Mem0[0x0000000000491760<p64>:word64]
	Mem0[rsi + rax * 8<64>:word64] = rdx
	rsi = Mem0[rbx + 0x18<64>:word64]
	call fn000000000042BB80 (retsize: 8;)
	rcx = 0x000000000048A100<p64>
	Mem0[rsi + rax * 8<64>:word64] = rcx
	rcx = Mem0[0x0000000000491780<p64>:word64]
	rsi = 0x0000000000489DC0<p64>
	rbx = Mem0[rbx + 0x18<64>:word64]
	call fn000000000042BB80 (retsize: 8;)
	Mem0[rbx + rax * 8<64>:word64] = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004699E0_exit
fn00000000004699E0_exit:


// fn000000000046AB10
// Return size: 8
define fn000000000046AB10
fn000000000046AB10_entry:
	rsp = fp
	// succ:  l000000000046AB10
l000000000046AB10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[rcx + 8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000046AB6A
	// succ:  l000000000046AB22 l000000000046AB6A
l000000000046AB22:
	SCZO = cond(Mem0[rbx + 0x10<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000046AB65
	// succ:  l000000000046AB29 l000000000046AB65
l000000000046AB29:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l000000000046AB3E
	// succ:  l000000000046AB3E
l000000000046AB30:
	rcx = Mem0[rbx + 8<64>:word64]
	// succ:  l000000000046AB34
l000000000046AB34:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	SCZO = cond(Mem0[rbx + 0x10<64>:word64] - rsi)
	branch Test(ULE,CZ) l000000000046AB60
	// succ:  l000000000046AB3E l000000000046AB60
l000000000046AB3E:
	rax = Mem0[rcx + rsi * 8<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000046AB34
	// succ:  l000000000046AB47 l000000000046AB34
l000000000046AB47:
	__lock()
	v12 = Mem0[rax + 8<64>:word32] - 1<32>
	Mem0[rax + 8<64>:word32] = v12
	SCZO = cond(v12)
	branch Test(NE,Z) l000000000046AB30
	// succ:  l000000000046AB4E l000000000046AB30
l000000000046AB4E:
	rdx = Mem0[rax:word64]
	rcx = rax
	call Mem0[rdx + 8<64>:word64] (retsize: 8;)
	goto l000000000046AB30
	// succ:  l000000000046AB30
l000000000046AB60:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000046AB6A
	// succ:  l000000000046AB65 l000000000046AB6A
l000000000046AB65:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l000000000046AB6A
l000000000046AB6A:
	rcx = Mem0[rbx + 0x18<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000046ABBA
	// succ:  l000000000046AB73 l000000000046ABBA
l000000000046AB73:
	SCZO = cond(Mem0[rbx + 0x10<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000046ABB5
	// succ:  l000000000046AB7A l000000000046ABB5
l000000000046AB7A:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l000000000046AB8E
	// succ:  l000000000046AB8E
l000000000046AB80:
	rcx = Mem0[rbx + 0x18<64>:word64]
	// succ:  l000000000046AB84
l000000000046AB84:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	SCZO = cond(Mem0[rbx + 0x10<64>:word64] - rsi)
	branch Test(ULE,CZ) l000000000046ABB0
	// succ:  l000000000046AB8E l000000000046ABB0
l000000000046AB8E:
	rax = Mem0[rcx + rsi * 8<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000046AB84
	// succ:  l000000000046AB97 l000000000046AB84
l000000000046AB97:
	__lock()
	v14 = Mem0[rax + 8<64>:word32] - 1<32>
	Mem0[rax + 8<64>:word32] = v14
	SCZO = cond(v14)
	branch Test(NE,Z) l000000000046AB80
	// succ:  l000000000046AB9E l000000000046AB80
l000000000046AB9E:
	rdx = Mem0[rax:word64]
	rcx = rax
	call Mem0[rdx + 8<64>:word64] (retsize: 8;)
	goto l000000000046AB80
	// succ:  l000000000046AB80
l000000000046ABB0:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000046ABBA
	// succ:  l000000000046ABB5 l000000000046ABBA
l000000000046ABB5:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l000000000046ABBA
l000000000046ABBA:
	rax = Mem0[rbx + 0x20<64>:word64]
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000046ABF4
	// succ:  l000000000046ABC5 l000000000046ABF4
l000000000046ABC5:
	rcx = Mem0[rax + rsi:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000046ABD7
	// succ:  l000000000046ABCE l000000000046ABD7
l000000000046ABCE:
	call fn0000000000475540 (retsize: 8;)
	rax = Mem0[rbx + 0x20<64>:word64]
	// succ:  l000000000046ABD7
l000000000046ABD7:
	rsi = rsi + 8<64>
	SCZO = cond(rsi)
	SCZO = cond(rsi - 0x30<64>)
	branch Test(NE,Z) l000000000046ABC5
	// succ:  l000000000046ABE1 l000000000046ABC5
l000000000046ABE1:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000046ABF4
	// succ:  l000000000046ABE6 l000000000046ABF4
l000000000046ABE6:
	rcx = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046ABEF_thunk_fn0000000000475540
l000000000046ABEF_thunk_fn0000000000475540:
	call fn0000000000475540 (retsize: 0;)
	return
	// succ:  fn000000000046AB10_exit
l000000000046ABF4:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046AB10_exit
fn000000000046AB10_exit:


// fn000000000046AC40
// Return size: 8
define fn000000000046AC40
fn000000000046AC40_entry:
	rsp = fp
	// succ:  l000000000046AC40
l000000000046AC40:
	rax = 0x0000000000492650<p64>
	return
	// succ:  fn000000000046AC40_exit
fn000000000046AC40_exit:


// fn000000000046AC50
// Return size: 8
define fn000000000046AC50
fn000000000046AC50_entry:
	rsp = fp
	// succ:  l000000000046AC50
l000000000046AC50:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdx = 0x000000000046ACD0<p64>
	rcx = 0x000000000048B490<p64>
	call fn000000000041DEE0 (retsize: 8;)
	rax = Mem0[0x000000000048B480<p64>:word64]
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000046AC50_exit
fn000000000046AC50_exit:


// fn000000000046AC80
// Return size: 8
define fn000000000046AC80
fn000000000046AC80_entry:
	rsp = fp
	// succ:  l000000000046AC80
l000000000046AC80:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000046AC80_exit
fn000000000046AC80_exit:


// fn000000000046AC90
// Return size: 8
define fn000000000046AC90
fn000000000046AC90_entry:
	rsp = fp
	// succ:  l000000000046AC90
l000000000046AC90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdi = 0x000000000048E1C0<p64>
	Mem0[rcx:word64] = 0<64>
	rsi = rdx
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	// succ:  l000000000046ACAC
l000000000046ACAC:
	branch rcx == 0<64> l000000000046ACAE
	// succ:  l000000000046ACAC_1 l000000000046ACAE
l000000000046ACAC_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000046ACAC
	// succ:  l000000000046ACAE l000000000046ACAC
l000000000046ACAE:
	branch Test(NE,Z) l000000000046ACB7
	// succ:  l000000000046ACB0 l000000000046ACB7
l000000000046ACB0:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046AC90_exit
l000000000046ACB7:
	rcx = 0x000000000048E1C8<p64>
	call fn00000000004712A0 (retsize: 8;)
	// succ:  l000000000046ACBE_thunk_fn000000000046ACD0
l000000000046ACBE_thunk_fn000000000046ACD0:
	call fn000000000046ACD0 (retsize: 0;)
	return
	// succ:  fn000000000046AC90_exit
fn000000000046AC90_exit:


// fn000000000046ACD0
// Return size: 8
define fn000000000046ACD0
fn000000000046ACD0_entry:
	rsp = fp
	// succ:  l000000000046ACD0
l000000000046ACD0:
	rdx = 0x0000000000492650<p64>
	rcx = 0x000000000048B480<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	// succ:  l000000000046ACE1_thunk_fn000000000046AC90
l000000000046ACE1_thunk_fn000000000046AC90:
	call fn000000000046AC90 (retsize: 0;)
	return
	// succ:  fn000000000046ACD0_exit
fn000000000046ACD0_exit:


// fn000000000046ACF0
// Return size: 8
define fn000000000046ACF0
fn000000000046ACF0_entry:
	rsp = fp
	// succ:  l000000000046ACF0
l000000000046ACF0:
	Mem0[rcx:word64] = 0<64>
	return
	// succ:  fn000000000046ACF0_exit
fn000000000046ACF0_exit:


// fn000000000046AD00
// Return size: 8
define fn000000000046AD00
fn000000000046AD00_entry:
	rsp = fp
	// succ:  l000000000046AD00
l000000000046AD00:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000046AD00_exit
fn000000000046AD00_exit:


// fn000000000046AD10
// Return size: 0
define fn000000000046AD10
fn000000000046AD10_entry:
	rsp = fp
	// succ:  l000000000046AD10
l000000000046AD10:
	// succ:  l000000000046AD10_thunk_fn0000000000475550
l000000000046AD10_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046AD10_exit
fn000000000046AD10_exit:


// fn000000000046AD20
// Return size: 0
define fn000000000046AD20
fn000000000046AD20_entry:
	rsp = fp
	// succ:  l000000000046AD20
l000000000046AD20:
	return
	// succ:  fn000000000046AD20_exit
fn000000000046AD20_exit:


// fn000000000046AD30
// Return size: 8
define fn000000000046AD30
fn000000000046AD30_entry:
	rsp = fp
	// succ:  l000000000046AD30
l000000000046AD30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rdi = rcx
	rbx = rdx
	call fn00000000004692E0 (retsize: 8;)
	call fn0000000000424170 (retsize: 8;)
	rcx = rax
	rsi = rax
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000046AE03
	// succ:  l000000000046AD5D l000000000046AE03
l000000000046AD5D:
	rax = Mem0[0x0000000000491900<p64>:word64]
	rdx = Mem0[rbx:word64]
	r12 = Mem0[rax:word64]
	__lock()
	v16 = Mem0[rdx:word32] + 1<32>
	Mem0[rdx:word32] = v16
	SCZO = cond(v16)
	rdx = Mem0[rbx:word64]
	rbp = rsp + 0x30<64>
	Mem0[rax:word64] = rdx
	rcx = rbp
	rdx = rbx
	call fn000000000042BBA0 (retsize: 8;)
	rdx = 0x000000000048DD5E<p64>
	rcx = rbp
	call fn0000000000428AD0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000046ADA3
	// succ:  l000000000046AD97 l000000000046ADA3
l000000000046AD97:
	rdx = Mem0[rsp + 0x30<64>:word64]
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rax = setlocale(rcx, rdx)
	// succ:  l000000000046ADA3
l000000000046ADA3:
	r8 = Mem0[rsp + 0x30<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[r8 - 8<64>:word32] = __xadd(Mem0[r8 - 8<64>:word32], eax)
	SCZO = cond(Mem0[r8 - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000046ADE0
	// succ:  l000000000046ADB7 l000000000046ADE0
l000000000046ADB7:
	rcx = rsi
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000046ADF0
	// succ:  l000000000046ADC3 l000000000046ADF0
l000000000046ADC3:
	rdx = r12
	rcx = rdi
	call fn000000000046AE70 (retsize: 8;)
	rax = rdi
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046AD30_exit
l000000000046ADE0:
	rdx = rsp + 0x2F<64>
	rcx = r8 - 0x18<64>
	call fn0000000000450A50 (retsize: 8;)
	goto l000000000046ADB7
	// succ:  l000000000046ADB7
l000000000046ADF0:
	call fn0000000000426270 (retsize: 8;)
	// succ:  l000000000046ADF5
l000000000046ADF5:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(EQ,Z) l000000000046AE37
	// succ:  l000000000046ADFE l000000000046AE37
l000000000046ADFE:
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000046AE03
l000000000046AE03:
	call fn0000000000426240 (retsize: 8;)
	rbx = rax
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	// succ:  l000000000046AE1E
l000000000046AE1E:
	rcx = rsi
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	rcx = rbx
	branch Test(EQ,Z) l000000000046ADFE
	// succ:  l000000000046AE2D l000000000046ADFE
l000000000046AE2D:
	call fn0000000000426270 (retsize: 8;)
	rbx = rax
	goto l000000000046AE1E
	// succ:  l000000000046AE1E
l000000000046AE37:
	call fn0000000000475910 (retsize: 8;)
	goto l000000000046ADF5
	// succ:  l000000000046ADF5
fn000000000046AD30_exit:


// fn000000000046AE40
// Return size: 8
define fn000000000046AE40
fn000000000046AE40_entry:
	rsp = fp
	// succ:  l000000000046AE40
l000000000046AE40:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	call fn00000000004692E0 (retsize: 8;)
	rax = Mem0[0x00000000004918D0<p64>:word64]
	rcx = 0x000000000048A700<p64>
	rdx = Mem0[rax:word64]
	call fn000000000046AE70 (retsize: 8;)
	rax = 0x000000000048A700<p64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000046AE40_exit
fn000000000046AE40_exit:


// fn000000000046AE70
// Return size: 8
define fn000000000046AE70
fn000000000046AE70_entry:
	rsp = fp
	// succ:  l000000000046AE70
l000000000046AE70:
	Mem0[rcx:word64] = rdx
	return
	// succ:  fn000000000046AE70_exit
fn000000000046AE70_exit:


// fn000000000046AE80
// Return size: 8
define fn000000000046AE80
fn000000000046AE80_entry:
	rsp = fp
	// succ:  l000000000046AE80
l000000000046AE80:
	rax = Mem0[rdx:word64]
	Mem0[rcx:word64] = rax
	__lock()
	v6 = Mem0[rax:word32] + 1<32>
	Mem0[rax:word32] = v6
	SCZO = cond(v6)
	return
	// succ:  fn000000000046AE80_exit
fn000000000046AE80_exit:


// fn000000000046AE90
// Return size: 8
define fn000000000046AE90
fn000000000046AE90_entry:
	rsp = fp
	// succ:  l000000000046AE90
l000000000046AE90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rcx:word64] = 0<64>
	rbx = rcx
	call fn00000000004692E0 (retsize: 8;)
	rsi = Mem0[0x0000000000491900<p64>:word64]
	rdx = Mem0[0x00000000004918D0<p64>:word64]
	rax = Mem0[rsi:word64]
	Mem0[rbx:word64] = rax
	SCZO = cond(rax - Mem0[rdx:word64])
	branch Test(EQ,Z) l000000000046AEF4
	goto l000000000046AEBF
	// succ:  l000000000046AEBF l000000000046AEF4
l000000000046AE90:
l000000000046AEBF:
	call fn0000000000424170 (retsize: 8;)
	rcx = rax
	rdi = rax
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000046AF00
	// succ:  l000000000046AED3 l000000000046AF00
l000000000046AED3:
	rax = Mem0[rsi:word64]
	__lock()
	v14 = Mem0[rax:word32] + 1<32>
	Mem0[rax:word32] = v14
	SCZO = cond(v14)
	rax = Mem0[rsi:word64]
	rcx = rdi
	Mem0[rbx:word64] = rax
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000046AF13
	// succ:  l000000000046AEEC l000000000046AF13
l000000000046AEEC:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046AE90_exit
l000000000046AEF4:
	__lock()
	v15 = Mem0[rax:word32] + 1<32>
	Mem0[rax:word32] = v15
	SCZO = cond(v15)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046AE90_exit
l000000000046AF00:
	call fn0000000000426240 (retsize: 8;)
	// succ:  l000000000046AF05
l000000000046AF05:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(EQ,Z) l000000000046AF1A
	// succ:  l000000000046AF0E l000000000046AF1A
l000000000046AF0E:
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000046AF13
l000000000046AF13:
	call fn0000000000426270 (retsize: 8;)
	goto l000000000046AF05
	// succ:  l000000000046AF05
l000000000046AF1A:
	call fn0000000000475910 (retsize: 8;)
	// succ:  l000000000046AF1F_thunk_fn000000000046AF20
l000000000046AF1F_thunk_fn000000000046AF20:
	call fn000000000046AF20 (retsize: 0;)
	return
	// succ:  fn000000000046AE90_exit
fn000000000046AE90_exit:


// fn000000000046AF20
// Return size: 0
define fn000000000046AF20
fn000000000046AF20_entry:
	rsp = fp
	// succ:  l000000000046AF20
l000000000046AF20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rcx:word64]
	__lock()
	v6 = Mem0[rbx:word32] - 1<32>
	Mem0[rbx:word32] = v6
	SCZO = cond(v6)
	branch Test(NE,Z) l000000000046AF50
	// succ:  l000000000046AF2E l000000000046AF50
l000000000046AF2E:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000046AF50
	// succ:  l000000000046AF33 l000000000046AF50
l000000000046AF33:
	rcx = rbx
	call fn000000000046AB10 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046AF43_thunk_fn0000000000475550
l000000000046AF43_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046AF20_exit
l000000000046AF50:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046AF20_exit
fn000000000046AF20_exit:


// fn000000000046AF60
// Return size: 8
define fn000000000046AF60
fn000000000046AF60_entry:
	rsp = fp
	// succ:  l000000000046AF60
l000000000046AF60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = rcx
	rcx = Mem0[rdx:word64]
	__lock()
	v8 = Mem0[rcx:word32] + 1<32>
	Mem0[rcx:word32] = v8
	SCZO = cond(v8)
	rbx = Mem0[rax:word64]
	__lock()
	v9 = Mem0[rbx:word32] - 1<32>
	Mem0[rbx:word32] = v9
	SCZO = cond(v9)
	branch Test(NE,Z) l000000000046AFA1
	// succ:  l000000000046AF78 l000000000046AFA1
l000000000046AF78:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000046AFA1
	// succ:  l000000000046AF7D l000000000046AFA1
l000000000046AF7D:
	rcx = rbx
	Mem0[rsp + 0x28<64>:word64] = rdx
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn000000000046AB10 (retsize: 8;)
	rcx = rbx
	call fn0000000000475550 (retsize: 8;)
	rdx = Mem0[rsp + 0x28<64>:word64]
	rax = Mem0[rsp + 0x20<64>:word64]
	// succ:  l000000000046AFA1
l000000000046AFA1:
	rdx = Mem0[rdx:word64]
	Mem0[rax:word64] = rdx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046AF60_exit
fn000000000046AF60_exit:


// fn000000000046AFB0
// Return size: 8
define fn000000000046AFB0
fn000000000046AFB0_entry:
	rsp = fp
	// succ:  l000000000046AFB0
l000000000046AFB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x10<64>:word64]
	rdx = Mem0[rax + 8<64>:word64]
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rdx - rax)
	branch Test(EQ,Z) l000000000046B011
	// succ:  l000000000046AFD5 l000000000046B011
l000000000046AFD5:
	rax = Mem0[rbp + 0x18<64>:word64]
	rcx = rax
	call fn0000000000471B60 (retsize: 8;)
	rcx = rax
	rax = Mem0[rbp + 0x10<64>:word64]
	rdx = Mem0[rax + 8<64>:word64]
	rax = Mem0[rbp + 0x10<64>:word64]
	r8 = rcx
	rcx = rax
	call fn0000000000464E90 (retsize: 8;)
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax + 8<64>:word64]
	rdx = rax + 8<64>
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 8<64>:word64] = rdx
	goto l000000000046B02A
	// succ:  l000000000046B02A
l000000000046B011:
	rax = Mem0[rbp + 0x18<64>:word64]
	rcx = rax
	call fn0000000000471B60 (retsize: 8;)
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn000000000046B220 (retsize: 8;)
	// succ:  l000000000046B02A
l000000000046B02A:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046AFB0_exit
fn000000000046AFB0_exit:


// fn000000000046B030
// Return size: 8
define fn000000000046B030
fn000000000046B030_entry:
	rsp = fp
	// succ:  l000000000046B030
l000000000046B030:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x20<64>:word64] = rcx
	Mem0[rbp - 0x18<64>:word64] = rdx
	r8 = 0x000000000048D38A<p64>
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[rbp - 0x20<64>:word64]
	call fn000000000042BF60 (retsize: 8;)
	Mem0[rbp - 0x50<64>:word64] = rax
	rax = Mem0[rbp - 0x20<64>:word64]
	rdx = Mem0[rbp - 0x50<64>:word64]
	rcx = rax
	call fn00000000004549F0 (retsize: 8;)
	Mem0[rbp - 0x58<64>:word64] = rax
	rax = Mem0[rbp - 0x58<64>:word64]
	Mem0[rbp - 0x48<64>:word64] = rax
	rax = Mem0[rbp - 0x18<64>:word64]
	rcx = rax
	call fn0000000000471B70 (retsize: 8;)
	rbx = rax
	rcx = Mem0[rbp - 0x20<64>:word64]
	call fn000000000042C020 (retsize: 8;)
	rdx = CONVERT(0<32> + rax * 8<64>, word32, word64)
	rax = Mem0[rbp - 0x58<64>:word64]
	rdx = rdx + rax
	SCZO = cond(rdx)
	rax = Mem0[rbp - 0x20<64>:word64]
	r8 = rbx
	rcx = rax
	call fn0000000000464E50 (retsize: 8;)
	Mem0[rbp - 0x48<64>:word64] = 0<64>
	rax = Mem0[rbp - 0x20<64>:word64]
	rcx = rax
	call fn0000000000454AD0 (retsize: 8;)
	r8 = rax
	rax = Mem0[rbp - 0x20<64>:word64]
	rdx = Mem0[rax + 8<64>:word64]
	rax = Mem0[rbp - 0x20<64>:word64]
	rax = Mem0[rax:word64]
	rcx = Mem0[rbp - 0x58<64>:word64]
	r9 = r8
	r8 = rcx
	rcx = rax
	call fn0000000000471900 (retsize: 8;)
	Mem0[rbp - 0x48<64>:word64] = rax
	v12 = Mem0[rbp - 0x48<64>:word64] + 8<64>
	Mem0[rbp - 0x48<64>:word64] = v12
	SCZO = cond(v12)
	rax = Mem0[rbp - 0x20<64>:word64]
	rcx = rax
	call fn0000000000454AD0 (retsize: 8;)
	rcx = rax
	rax = Mem0[rbp - 0x20<64>:word64]
	rdx = Mem0[rax + 8<64>:word64]
	rax = Mem0[rbp - 0x20<64>:word64]
	rax = Mem0[rax:word64]
	r8 = rcx
	rcx = rax
	call fn0000000000472310 (retsize: 8;)
	rax = Mem0[rbp - 0x20<64>:word64]
	rax = Mem0[rax + 0x10<64>:word64]
	rdx = rax
	rax = Mem0[rbp - 0x20<64>:word64]
	rax = Mem0[rax:word64]
	rdx = rdx - rax
	SCZO = cond(rdx)
	rax = rdx
	rax = rax >> 3<64>
	SCZO = cond(rax)
	rcx = rax
	rax = Mem0[rbp - 0x20<64>:word64]
	rdx = Mem0[rax:word64]
	rax = Mem0[rbp - 0x20<64>:word64]
	r8 = rcx
	rcx = rax
	call fn0000000000454A90 (retsize: 8;)
	rax = Mem0[rbp - 0x20<64>:word64]
	rdx = Mem0[rbp - 0x58<64>:word64]
	Mem0[rax:word64] = rdx
	rax = Mem0[rbp - 0x20<64>:word64]
	rdx = Mem0[rbp - 0x48<64>:word64]
	Mem0[rax + 8<64>:word64] = rdx
	rax = Mem0[rbp - 0x50<64>:word64]
	rdx = CONVERT(0<32> + rax * 8<64>, word32, word64)
	rax = Mem0[rbp - 0x58<64>:word64]
	rdx = rdx + rax
	SCZO = cond(rdx)
	rax = Mem0[rbp - 0x20<64>:word64]
	Mem0[rax + 0x10<64>:word64] = rdx
	// succ:  l000000000046B20E
l000000000046B20E:
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046B030_exit
fn000000000046B030_exit:


// fn000000000046B220
// Return size: 8
define fn000000000046B220
fn000000000046B220_entry:
	rsp = fp
	// succ:  l000000000046B220
l000000000046B220:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x20<64>:word64] = rcx
	Mem0[rbp - 0x18<64>:word64] = rdx
	r8 = 0x000000000048D38A<p64>
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[rbp - 0x20<64>:word64]
	call fn000000000042BF60 (retsize: 8;)
	Mem0[rbp - 0x50<64>:word64] = rax
	rax = Mem0[rbp - 0x20<64>:word64]
	rdx = Mem0[rbp - 0x50<64>:word64]
	rcx = rax
	call fn00000000004549F0 (retsize: 8;)
	Mem0[rbp - 0x58<64>:word64] = rax
	rax = Mem0[rbp - 0x58<64>:word64]
	Mem0[rbp - 0x48<64>:word64] = rax
	rax = Mem0[rbp - 0x18<64>:word64]
	rcx = rax
	call fn0000000000471B60 (retsize: 8;)
	rbx = rax
	rcx = Mem0[rbp - 0x20<64>:word64]
	call fn000000000042C020 (retsize: 8;)
	rdx = CONVERT(0<32> + rax * 8<64>, word32, word64)
	rax = Mem0[rbp - 0x58<64>:word64]
	rdx = rdx + rax
	SCZO = cond(rdx)
	rax = Mem0[rbp - 0x20<64>:word64]
	r8 = rbx
	rcx = rax
	call fn0000000000464E90 (retsize: 8;)
	Mem0[rbp - 0x48<64>:word64] = 0<64>
	rax = Mem0[rbp - 0x20<64>:word64]
	rcx = rax
	call fn0000000000454AD0 (retsize: 8;)
	r8 = rax
	rax = Mem0[rbp - 0x20<64>:word64]
	rdx = Mem0[rax + 8<64>:word64]
	rax = Mem0[rbp - 0x20<64>:word64]
	rax = Mem0[rax:word64]
	rcx = Mem0[rbp - 0x58<64>:word64]
	r9 = r8
	r8 = rcx
	rcx = rax
	call fn0000000000471900 (retsize: 8;)
	Mem0[rbp - 0x48<64>:word64] = rax
	v12 = Mem0[rbp - 0x48<64>:word64] + 8<64>
	Mem0[rbp - 0x48<64>:word64] = v12
	SCZO = cond(v12)
	rax = Mem0[rbp - 0x20<64>:word64]
	rcx = rax
	call fn0000000000454AD0 (retsize: 8;)
	rcx = rax
	rax = Mem0[rbp - 0x20<64>:word64]
	rdx = Mem0[rax + 8<64>:word64]
	rax = Mem0[rbp - 0x20<64>:word64]
	rax = Mem0[rax:word64]
	r8 = rcx
	rcx = rax
	call fn0000000000472310 (retsize: 8;)
	rax = Mem0[rbp - 0x20<64>:word64]
	rax = Mem0[rax + 0x10<64>:word64]
	rdx = rax
	rax = Mem0[rbp - 0x20<64>:word64]
	rax = Mem0[rax:word64]
	rdx = rdx - rax
	SCZO = cond(rdx)
	rax = rdx
	rax = rax >> 3<64>
	SCZO = cond(rax)
	rcx = rax
	rax = Mem0[rbp - 0x20<64>:word64]
	rdx = Mem0[rax:word64]
	rax = Mem0[rbp - 0x20<64>:word64]
	r8 = rcx
	rcx = rax
	call fn0000000000454A90 (retsize: 8;)
	rax = Mem0[rbp - 0x20<64>:word64]
	rdx = Mem0[rbp - 0x58<64>:word64]
	Mem0[rax:word64] = rdx
	rax = Mem0[rbp - 0x20<64>:word64]
	rdx = Mem0[rbp - 0x48<64>:word64]
	Mem0[rax + 8<64>:word64] = rdx
	rax = Mem0[rbp - 0x50<64>:word64]
	rdx = CONVERT(0<32> + rax * 8<64>, word32, word64)
	rax = Mem0[rbp - 0x58<64>:word64]
	rdx = rdx + rax
	SCZO = cond(rdx)
	rax = Mem0[rbp - 0x20<64>:word64]
	Mem0[rax + 0x10<64>:word64] = rdx
	// succ:  l000000000046B3FE
l000000000046B3FE:
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046B220_exit
fn000000000046B220_exit:


// fn000000000046B410
// Return size: 8
define fn000000000046B410
fn000000000046B410_entry:
	rsp = fp
	// succ:  l000000000046B410
l000000000046B410:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x30<64>:word64] = rcx
	Mem0[rbp - 0x28<64>:word64] = rdx
	Mem0[rbp - 0x20<64>:word64] = r8
	Mem0[rbp - 0x18<64>:word64] = r9
	rax = Mem0[rbp - 0x30<64>:word64]
	rdx = Mem0[rbp - 0x28<64>:word64]
	rcx = rax
	call fn00000000004549F0 (retsize: 8;)
	Mem0[rbp - 0x58<64>:word64] = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	rcx = rax
	call fn0000000000454AD0 (retsize: 8;)
	r8 = rax
	rcx = Mem0[rbp - 0x58<64>:word64]
	rdx = Mem0[rbp - 0x18<64>:word64]
	rax = Mem0[rbp - 0x20<64>:word64]
	r9 = r8
	r8 = rcx
	rcx = rax
	call fn00000000004713C0 (retsize: 8;)
	rax = Mem0[rbp - 0x58<64>:word64]
	// succ:  l000000000046B4A9
l000000000046B4A9:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046B410_exit
fn000000000046B410_exit:


// fn000000000046B4B0
// Return size: 8
define fn000000000046B4B0
fn000000000046B4B0_entry:
	rsp = fp
	// succ:  l000000000046B4B0
l000000000046B4B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x30<64>:word64] = rcx
	Mem0[rbp - 0x28<64>:word64] = rdx
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C080 (retsize: 8;)
	SCZO = cond(rax - Mem0[rbp - 0x28<64>:word64])
	al = CONVERT(Test(ULT,C), bool, int8)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000046B4E6
	// succ:  l000000000046B4DA l000000000046B4E6
l000000000046B4DA:
	rcx = 0x000000000048D37A<p64>
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l000000000046B4E6
l000000000046B4E6:
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C050 (retsize: 8;)
	SCZO = cond(rax - Mem0[rbp - 0x28<64>:word64])
	al = CONVERT(Test(ULT,C), bool, int8)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000046B5E8
	// succ:  l000000000046B4FE l000000000046B5E8
l000000000046B4FE:
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C020 (retsize: 8;)
	Mem0[rbp - 0x58<64>:word64] = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	rax = Mem0[rax + 8<64>:word64]
	rcx = rax
	call fn00000000004718A0 (retsize: 8;)
	rbx = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	rax = Mem0[rax:word64]
	rcx = rax
	call fn00000000004718A0 (retsize: 8;)
	rdx = rax
	rax = Mem0[rbp - 0x28<64>:word64]
	r9 = rbx
	r8 = rdx
	rdx = rax
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000046B410 (retsize: 8;)
	Mem0[rbp - 0x60<64>:word64] = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	rcx = rax
	call fn0000000000454AD0 (retsize: 8;)
	rcx = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	rdx = Mem0[rax + 8<64>:word64]
	rax = Mem0[rbp - 0x30<64>:word64]
	rax = Mem0[rax:word64]
	r8 = rcx
	rcx = rax
	call fn0000000000472310 (retsize: 8;)
	rax = Mem0[rbp - 0x30<64>:word64]
	rax = Mem0[rax + 0x10<64>:word64]
	rdx = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	rax = Mem0[rax:word64]
	rdx = rdx - rax
	SCZO = cond(rdx)
	rax = rdx
	rax = rax >> 3<64>
	SCZO = cond(rax)
	rcx = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	rdx = Mem0[rax:word64]
	rax = Mem0[rbp - 0x30<64>:word64]
	r8 = rcx
	rcx = rax
	call fn0000000000454A90 (retsize: 8;)
	rax = Mem0[rbp - 0x30<64>:word64]
	rdx = Mem0[rbp - 0x60<64>:word64]
	Mem0[rax:word64] = rdx
	rax = Mem0[rbp - 0x58<64>:word64]
	rdx = CONVERT(0<32> + rax * 8<64>, word32, word64)
	rax = Mem0[rbp - 0x60<64>:word64]
	rdx = rdx + rax
	SCZO = cond(rdx)
	rax = Mem0[rbp - 0x30<64>:word64]
	Mem0[rax + 8<64>:word64] = rdx
	rax = Mem0[rbp - 0x30<64>:word64]
	rax = Mem0[rax:word64]
	rdx = Mem0[rbp - 0x28<64>:word64]
	rdx = rdx << 3<64>
	SCZO = cond(rdx)
	rdx = rdx + rax
	SCZO = cond(rdx)
	rax = Mem0[rbp - 0x30<64>:word64]
	Mem0[rax + 0x10<64>:word64] = rdx
	// succ:  l000000000046B5E8
l000000000046B5E8:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046B4B0_exit
fn000000000046B4B0_exit:


// fn000000000046B5F0
// Return size: 8
define fn000000000046B5F0
fn000000000046B5F0_entry:
	rsp = fp
	// succ:  l000000000046B5F0
l000000000046B5F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x18<64>:word64]
	rcx = rax
	call fn0000000000471B20 (retsize: 8;)
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn000000000046AFB0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046B5F0_exit
fn000000000046B5F0_exit:


// fn000000000046B620
// Return size: 8
define fn000000000046B620
fn000000000046B620_entry:
	rsp = fp
	// succ:  l000000000046B620
l000000000046B620:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x10<64>:word64]
	rdx = Mem0[rax + 8<64>:word64]
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rdx - rax)
	branch Test(EQ,Z) l000000000046B676
	// succ:  l000000000046B645 l000000000046B676
l000000000046B645:
	rax = Mem0[rbp + 0x10<64>:word64]
	rdx = Mem0[rax + 8<64>:word64]
	rax = Mem0[rbp + 0x10<64>:word64]
	rcx = Mem0[rbp + 0x18<64>:word64]
	r8 = rcx
	rcx = rax
	call fn0000000000464E50 (retsize: 8;)
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax + 8<64>:word64]
	rdx = rax + 8<64>
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 8<64>:word64] = rdx
	goto l000000000046B687
	// succ:  l000000000046B687
l000000000046B676:
	rax = Mem0[rbp + 0x18<64>:word64]
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn000000000046B030 (retsize: 8;)
	// succ:  l000000000046B687
l000000000046B687:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046B620_exit
fn000000000046B620_exit:


// fn000000000046B690
// Return size: 8
define fn000000000046B690
fn000000000046B690_entry:
	rsp = fp
	// succ:  l000000000046B690
l000000000046B690:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rcx = rax
	call fn0000000000454AE0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046B690_exit
fn000000000046B690_exit:


// fn000000000046B6B0
// Return size: 8
define fn000000000046B6B0
fn000000000046B6B0_entry:
	rsp = fp
	// succ:  l000000000046B6B0
l000000000046B6B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rcx = rax
	call fn0000000000454AD0 (retsize: 8;)
	rcx = rax
	rax = Mem0[rbp + 0x10<64>:word64]
	rdx = Mem0[rax + 8<64>:word64]
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax:word64]
	r8 = rcx
	rcx = rax
	call fn0000000000472310 (retsize: 8;)
	rax = Mem0[rbp + 0x10<64>:word64]
	rcx = rax
	call fn0000000000454B00 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046B6B0_exit
fn000000000046B6B0_exit:


// fn000000000046B700
// Return size: 8
define fn000000000046B700
fn000000000046B700_entry:
	rsp = fp
	// succ:  l000000000046B700
l000000000046B700:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax:word64]
	rdx = Mem0[rbp + 0x18<64>:word64]
	rdx = rdx << 3<64>
	SCZO = cond(rdx)
	rax = rax + rdx
	SCZO = cond(rax)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046B700_exit
fn000000000046B700_exit:


// fn000000000046B720
// Return size: 8
define fn000000000046B720
fn000000000046B720_entry:
	rsp = fp
	// succ:  l000000000046B720
l000000000046B720:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x20<64>:word64] = rcx
	Mem0[rbp - 0x18<64>:word64] = rdx
	r8 = 0x000000000048D38A<p64>
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[rbp - 0x20<64>:word64]
	call fn000000000042C0D0 (retsize: 8;)
	Mem0[rbp - 0x50<64>:word64] = rax
	rax = Mem0[rbp - 0x20<64>:word64]
	rdx = Mem0[rbp - 0x50<64>:word64]
	rcx = rax
	call fn0000000000454B60 (retsize: 8;)
	Mem0[rbp - 0x58<64>:word64] = rax
	rax = Mem0[rbp - 0x58<64>:word64]
	Mem0[rbp - 0x48<64>:word64] = rax
	rax = Mem0[rbp - 0x18<64>:word64]
	rcx = rax
	call fn0000000000471B80 (retsize: 8;)
	rbx = rax
	rcx = Mem0[rbp - 0x20<64>:word64]
	call fn000000000042C190 (retsize: 8;)
	rdx = rax
	rax = Mem0[rbp - 0x58<64>:word64]
	rdx = rdx + rax
	SCZO = cond(rdx)
	rax = Mem0[rbp - 0x20<64>:word64]
	r8 = rbx
	rcx = rax
	call fn0000000000465020 (retsize: 8;)
	Mem0[rbp - 0x48<64>:word64] = 0<64>
	rax = Mem0[rbp - 0x20<64>:word64]
	rcx = rax
	call fn0000000000454C40 (retsize: 8;)
	r8 = rax
	rax = Mem0[rbp - 0x20<64>:word64]
	rdx = Mem0[rax + 8<64>:word64]
	rax = Mem0[rbp - 0x20<64>:word64]
	rax = Mem0[rax:word64]
	rcx = Mem0[rbp - 0x58<64>:word64]
	r9 = r8
	r8 = rcx
	rcx = rax
	call fn0000000000471960 (retsize: 8;)
	Mem0[rbp - 0x48<64>:word64] = rax
	v12 = Mem0[rbp - 0x48<64>:word64] + 1<64>
	Mem0[rbp - 0x48<64>:word64] = v12
	SCZO = cond(v12)
	rax = Mem0[rbp - 0x20<64>:word64]
	rcx = rax
	call fn0000000000454C40 (retsize: 8;)
	rcx = rax
	rax = Mem0[rbp - 0x20<64>:word64]
	rdx = Mem0[rax + 8<64>:word64]
	rax = Mem0[rbp - 0x20<64>:word64]
	rax = Mem0[rax:word64]
	r8 = rcx
	rcx = rax
	call fn0000000000472370 (retsize: 8;)
	rax = Mem0[rbp - 0x20<64>:word64]
	rax = Mem0[rax + 0x10<64>:word64]
	rdx = rax
	rax = Mem0[rbp - 0x20<64>:word64]
	rax = Mem0[rax:word64]
	rdx = rdx - rax
	SCZO = cond(rdx)
	rax = rdx
	rcx = rax
	rax = Mem0[rbp - 0x20<64>:word64]
	rdx = Mem0[rax:word64]
	rax = Mem0[rbp - 0x20<64>:word64]
	r8 = rcx
	rcx = rax
	call fn0000000000454C00 (retsize: 8;)
	rax = Mem0[rbp - 0x20<64>:word64]
	rdx = Mem0[rbp - 0x58<64>:word64]
	Mem0[rax:word64] = rdx
	rax = Mem0[rbp - 0x20<64>:word64]
	rdx = Mem0[rbp - 0x48<64>:word64]
	Mem0[rax + 8<64>:word64] = rdx
	rdx = Mem0[rbp - 0x58<64>:word64]
	rax = Mem0[rbp - 0x50<64>:word64]
	rdx = rdx + rax
	SCZO = cond(rdx)
	rax = Mem0[rbp - 0x20<64>:word64]
	Mem0[rax + 0x10<64>:word64] = rdx
	// succ:  l000000000046B8E8
l000000000046B8E8:
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046B720_exit
fn000000000046B720_exit:


// fn000000000046B8F0
// Return size: 8
define fn000000000046B8F0
fn000000000046B8F0_entry:
	rsp = fp
	// succ:  l000000000046B8F0
l000000000046B8F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x30<64>:word64] = rcx
	Mem0[rbp - 0x28<64>:word64] = rdx
	Mem0[rbp - 0x20<64>:word64] = r8
	Mem0[rbp - 0x18<64>:word64] = r9
	rax = Mem0[rbp - 0x30<64>:word64]
	rdx = Mem0[rbp - 0x28<64>:word64]
	rcx = rax
	call fn0000000000454B60 (retsize: 8;)
	Mem0[rbp - 0x58<64>:word64] = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	rcx = rax
	call fn0000000000454C40 (retsize: 8;)
	r8 = rax
	rcx = Mem0[rbp - 0x58<64>:word64]
	rdx = Mem0[rbp - 0x18<64>:word64]
	rax = Mem0[rbp - 0x20<64>:word64]
	r9 = r8
	r8 = rcx
	rcx = rax
	call fn0000000000471400 (retsize: 8;)
	rax = Mem0[rbp - 0x58<64>:word64]
	// succ:  l000000000046B989
l000000000046B989:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046B8F0_exit
fn000000000046B8F0_exit:


// fn000000000046B990
// Return size: 8
define fn000000000046B990
fn000000000046B990_entry:
	rsp = fp
	// succ:  l000000000046B990
l000000000046B990:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x30<64>:word64] = rcx
	Mem0[rbp - 0x28<64>:word64] = rdx
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C1F0 (retsize: 8;)
	SCZO = cond(rax - Mem0[rbp - 0x28<64>:word64])
	al = CONVERT(Test(ULT,C), bool, int8)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000046B9C6
	// succ:  l000000000046B9BA l000000000046B9C6
l000000000046B9BA:
	rcx = 0x000000000048D37A<p64>
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l000000000046B9C6
l000000000046B9C6:
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C1C0 (retsize: 8;)
	SCZO = cond(rax - Mem0[rbp - 0x28<64>:word64])
	al = CONVERT(Test(ULT,C), bool, int8)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000046BAB8
	// succ:  l000000000046B9DE l000000000046BAB8
l000000000046B9DE:
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C190 (retsize: 8;)
	Mem0[rbp - 0x58<64>:word64] = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	rax = Mem0[rax + 8<64>:word64]
	rcx = rax
	call fn00000000004718D0 (retsize: 8;)
	rbx = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	rax = Mem0[rax:word64]
	rcx = rax
	call fn00000000004718D0 (retsize: 8;)
	rdx = rax
	rax = Mem0[rbp - 0x28<64>:word64]
	r9 = rbx
	r8 = rdx
	rdx = rax
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000046B8F0 (retsize: 8;)
	Mem0[rbp - 0x60<64>:word64] = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	rcx = rax
	call fn0000000000454C40 (retsize: 8;)
	rcx = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	rdx = Mem0[rax + 8<64>:word64]
	rax = Mem0[rbp - 0x30<64>:word64]
	rax = Mem0[rax:word64]
	r8 = rcx
	rcx = rax
	call fn0000000000472370 (retsize: 8;)
	rax = Mem0[rbp - 0x30<64>:word64]
	rax = Mem0[rax + 0x10<64>:word64]
	rdx = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	rax = Mem0[rax:word64]
	rdx = rdx - rax
	SCZO = cond(rdx)
	rax = rdx
	rcx = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	rdx = Mem0[rax:word64]
	rax = Mem0[rbp - 0x30<64>:word64]
	r8 = rcx
	rcx = rax
	call fn0000000000454C00 (retsize: 8;)
	rax = Mem0[rbp - 0x30<64>:word64]
	rdx = Mem0[rbp - 0x60<64>:word64]
	Mem0[rax:word64] = rdx
	rdx = Mem0[rbp - 0x60<64>:word64]
	rax = Mem0[rbp - 0x58<64>:word64]
	rdx = rdx + rax
	SCZO = cond(rdx)
	rax = Mem0[rbp - 0x30<64>:word64]
	Mem0[rax + 8<64>:word64] = rdx
	rax = Mem0[rbp - 0x30<64>:word64]
	rdx = Mem0[rax:word64]
	rax = Mem0[rbp - 0x28<64>:word64]
	rdx = rdx + rax
	SCZO = cond(rdx)
	rax = Mem0[rbp - 0x30<64>:word64]
	Mem0[rax + 0x10<64>:word64] = rdx
	// succ:  l000000000046BAB8
l000000000046BAB8:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046B990_exit
fn000000000046B990_exit:


// fn000000000046BAC0
// Return size: 8
define fn000000000046BAC0
fn000000000046BAC0_entry:
	rsp = fp
	// succ:  l000000000046BAC0
l000000000046BAC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x10<64>:word64]
	rdx = Mem0[rax + 8<64>:word64]
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rdx - rax)
	branch Test(EQ,Z) l000000000046BB16
	// succ:  l000000000046BAE5 l000000000046BB16
l000000000046BAE5:
	rax = Mem0[rbp + 0x10<64>:word64]
	rdx = Mem0[rax + 8<64>:word64]
	rax = Mem0[rbp + 0x10<64>:word64]
	rcx = Mem0[rbp + 0x18<64>:word64]
	r8 = rcx
	rcx = rax
	call fn0000000000465020 (retsize: 8;)
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax + 8<64>:word64]
	rdx = rax + 1<64>
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 8<64>:word64] = rdx
	goto l000000000046BB27
	// succ:  l000000000046BB27
l000000000046BB16:
	rax = Mem0[rbp + 0x18<64>:word64]
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn000000000046B720 (retsize: 8;)
	// succ:  l000000000046BB27
l000000000046BB27:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046BAC0_exit
fn000000000046BAC0_exit:


// fn000000000046BB30
// Return size: 8
define fn000000000046BB30
fn000000000046BB30_entry:
	rsp = fp
	// succ:  l000000000046BB30
l000000000046BB30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rcx = rax
	call fn0000000000454C50 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046BB30_exit
fn000000000046BB30_exit:


// fn000000000046BB50
// Return size: 8
define fn000000000046BB50
fn000000000046BB50_entry:
	rsp = fp
	// succ:  l000000000046BB50
l000000000046BB50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rcx = rax
	call fn0000000000454C40 (retsize: 8;)
	rcx = rax
	rax = Mem0[rbp + 0x10<64>:word64]
	rdx = Mem0[rax + 8<64>:word64]
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax:word64]
	r8 = rcx
	rcx = rax
	call fn0000000000472370 (retsize: 8;)
	rax = Mem0[rbp + 0x10<64>:word64]
	rcx = rax
	call fn0000000000454C70 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046BB50_exit
fn000000000046BB50_exit:


// fn000000000046BBA0
// Return size: 8
define fn000000000046BBA0
fn000000000046BBA0_entry:
	rsp = fp
	// succ:  l000000000046BBA0
l000000000046BBA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x10<64>:word64]
	rdx = Mem0[rax:word64]
	rax = Mem0[rbp + 0x18<64>:word64]
	rax = rax + rdx
	SCZO = cond(rax)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046BBA0_exit
fn000000000046BBA0_exit:


// fn000000000046BBC0
// Return size: 8
define fn000000000046BBC0
fn000000000046BBC0_entry:
	rsp = fp
	// succ:  l000000000046BBC0
l000000000046BBC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	Mem0[rsp + 0x38<64>:word64] = rdx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497A50<p64>
	Mem0[rcx:word64] = rax
	rcx = rsp + 0x38<64>
	call fn000000000046AC80 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046BBC0_exit
fn000000000046BBC0_exit:


// fn000000000046BC00
// Return size: 8
define fn000000000046BC00
fn000000000046BC00_entry:
	rsp = fp
	// succ:  l000000000046BC00
l000000000046BC00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497A50<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046BC00_exit
fn000000000046BC00_exit:


// fn000000000046BC50
// Return size: 0
define fn000000000046BC50
fn000000000046BC50_entry:
	rsp = fp
	// succ:  l000000000046BC50
l000000000046BC50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn000000000046BC70 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046BC65_thunk_fn0000000000475550
l000000000046BC65_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046BC50_exit
fn000000000046BC50_exit:


// fn000000000046BC70
// Return size: 0
define fn000000000046BC70
fn000000000046BC70_entry:
	rsp = fp
	// succ:  l000000000046BC70
l000000000046BC70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497A50<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	rax = Mem0[0x0000000000491D10<p64>:word64]
	rcx = rbx
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046BCA4_thunk_fn000000000046AD20
l000000000046BCA4_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046BC70_exit
fn000000000046BC70_exit:


// fn000000000046BCD0
// Return size: 8
define fn000000000046BCD0
fn000000000046BCD0_entry:
	rsp = fp
	// succ:  l000000000046BCD0
l000000000046BCD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	Mem0[rsp + 0x38<64>:word64] = rdx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497AD0<p64>
	Mem0[rcx:word64] = rax
	rcx = rsp + 0x38<64>
	call fn000000000046AC80 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046BCD0_exit
fn000000000046BCD0_exit:


// fn000000000046BD10
// Return size: 8
define fn000000000046BD10
fn000000000046BD10_entry:
	rsp = fp
	// succ:  l000000000046BD10
l000000000046BD10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497AD0<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046BD10_exit
fn000000000046BD10_exit:


// fn000000000046BD60
// Return size: 0
define fn000000000046BD60
fn000000000046BD60_entry:
	rsp = fp
	// succ:  l000000000046BD60
l000000000046BD60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn000000000046BD80 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046BD75_thunk_fn0000000000475550
l000000000046BD75_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046BD60_exit
fn000000000046BD60_exit:


// fn000000000046BD80
// Return size: 0
define fn000000000046BD80
fn000000000046BD80_entry:
	rsp = fp
	// succ:  l000000000046BD80
l000000000046BD80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497AD0<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	rax = Mem0[0x0000000000491D20<p64>:word64]
	rcx = rbx
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046BDB4_thunk_fn000000000046AD20
l000000000046BDB4_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046BD80_exit
fn000000000046BD80_exit:


// fn000000000046BDE0
// Return size: 8
define fn000000000046BDE0
fn000000000046BDE0_entry:
	rsp = fp
	// succ:  l000000000046BDE0
l000000000046BDE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	Mem0[rsp + 0x38<64>:word64] = rdx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497B50<p64>
	Mem0[rcx:word64] = rax
	rcx = rsp + 0x38<64>
	call fn000000000046AC80 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046BDE0_exit
fn000000000046BDE0_exit:


// fn000000000046BE20
// Return size: 8
define fn000000000046BE20
fn000000000046BE20_entry:
	rsp = fp
	// succ:  l000000000046BE20
l000000000046BE20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497B50<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046BE20_exit
fn000000000046BE20_exit:


// fn000000000046BE70
// Return size: 8
define fn000000000046BE70
fn000000000046BE70_entry:
	rsp = fp
	// succ:  l000000000046BE70
l000000000046BE70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	Mem0[rsp + 0x38<64>:word64] = rdx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497B50<p64>
	Mem0[rcx:word64] = rax
	rcx = rsp + 0x38<64>
	call fn000000000046AC80 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046BE70_exit
fn000000000046BE70_exit:


// fn000000000046BEB0
// Return size: 8
define fn000000000046BEB0
fn000000000046BEB0_entry:
	rsp = fp
	// succ:  l000000000046BEB0
l000000000046BEB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497B50<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046BEB0_exit
fn000000000046BEB0_exit:


// fn000000000046BF00
// Return size: 0
define fn000000000046BF00
fn000000000046BF00_entry:
	rsp = fp
	// succ:  l000000000046BF00
l000000000046BF00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497B50<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046BF2E_thunk_fn0000000000475550
l000000000046BF2E_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046BF00_exit
fn000000000046BF00_exit:


// fn000000000046BF50
// Return size: 0
define fn000000000046BF50
fn000000000046BF50_entry:
	rsp = fp
	// succ:  l000000000046BF50
l000000000046BF50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497B50<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046BF76_thunk_fn000000000046AD20
l000000000046BF76_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046BF50_exit
fn000000000046BF50_exit:


// fn000000000046BF90
// Return size: 0
define fn000000000046BF90
fn000000000046BF90_entry:
	rsp = fp
	// succ:  l000000000046BF90
l000000000046BF90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497B50<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046BFB6_thunk_fn000000000046AD20
l000000000046BFB6_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046BF90_exit
fn000000000046BF90_exit:


// fn000000000046BFD0
// Return size: 8
define fn000000000046BFD0
fn000000000046BFD0_entry:
	rsp = fp
	// succ:  l000000000046BFD0
l000000000046BFD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	Mem0[rsp + 0x38<64>:word64] = rdx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497B90<p64>
	Mem0[rcx:word64] = rax
	rcx = rsp + 0x38<64>
	call fn000000000046AC80 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046BFD0_exit
fn000000000046BFD0_exit:


// fn000000000046C010
// Return size: 8
define fn000000000046C010
fn000000000046C010_entry:
	rsp = fp
	// succ:  l000000000046C010
l000000000046C010:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497B90<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046C010_exit
fn000000000046C010_exit:


// fn000000000046C060
// Return size: 8
define fn000000000046C060
fn000000000046C060_entry:
	rsp = fp
	// succ:  l000000000046C060
l000000000046C060:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	Mem0[rsp + 0x38<64>:word64] = rdx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497B90<p64>
	Mem0[rcx:word64] = rax
	rcx = rsp + 0x38<64>
	call fn000000000046AC80 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046C060_exit
fn000000000046C060_exit:


// fn000000000046C0A0
// Return size: 8
define fn000000000046C0A0
fn000000000046C0A0_entry:
	rsp = fp
	// succ:  l000000000046C0A0
l000000000046C0A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497B90<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046C0A0_exit
fn000000000046C0A0_exit:


// fn000000000046C0F0
// Return size: 0
define fn000000000046C0F0
fn000000000046C0F0_entry:
	rsp = fp
	// succ:  l000000000046C0F0
l000000000046C0F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497B90<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046C11E_thunk_fn0000000000475550
l000000000046C11E_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046C0F0_exit
fn000000000046C0F0_exit:


// fn000000000046C140
// Return size: 0
define fn000000000046C140
fn000000000046C140_entry:
	rsp = fp
	// succ:  l000000000046C140
l000000000046C140:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497B90<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046C166_thunk_fn000000000046AD20
l000000000046C166_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046C140_exit
fn000000000046C140_exit:


// fn000000000046C180
// Return size: 0
define fn000000000046C180
fn000000000046C180_entry:
	rsp = fp
	// succ:  l000000000046C180
l000000000046C180:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497B90<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046C1A6_thunk_fn000000000046AD20
l000000000046C1A6_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046C180_exit
fn000000000046C180_exit:


// fn000000000046C1C0
// Return size: 8
define fn000000000046C1C0
fn000000000046C1C0_entry:
	rsp = fp
	// succ:  l000000000046C1C0
l000000000046C1C0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497BD0<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046C1C0_exit
fn000000000046C1C0_exit:


// fn000000000046C1E0
// Return size: 8
define fn000000000046C1E0
fn000000000046C1E0_entry:
	rsp = fp
	// succ:  l000000000046C1E0
l000000000046C1E0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497BD0<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046C1E0_exit
fn000000000046C1E0_exit:


// fn000000000046C200
// Return size: 0
define fn000000000046C200
fn000000000046C200_entry:
	rsp = fp
	// succ:  l000000000046C200
l000000000046C200:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497BD0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046C21F_thunk_fn0000000000475550
l000000000046C21F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046C200_exit
fn000000000046C200_exit:


// fn000000000046C230
// Return size: 0
define fn000000000046C230
fn000000000046C230_entry:
	rsp = fp
	// succ:  l000000000046C230
l000000000046C230:
	rax = 0x0000000000497BD0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046C23A_thunk_fn000000000046AD20
l000000000046C23A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046C230_exit
fn000000000046C230_exit:


// fn000000000046C240
// Return size: 0
define fn000000000046C240
fn000000000046C240_entry:
	rsp = fp
	// succ:  l000000000046C240
l000000000046C240:
	rax = 0x0000000000497BD0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046C24A_thunk_fn000000000046AD20
l000000000046C24A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046C240_exit
fn000000000046C240_exit:


// fn000000000046C250
// Return size: 8
define fn000000000046C250
fn000000000046C250_entry:
	rsp = fp
	// succ:  l000000000046C250
l000000000046C250:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497C50<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046C250_exit
fn000000000046C250_exit:


// fn000000000046C270
// Return size: 8
define fn000000000046C270
fn000000000046C270_entry:
	rsp = fp
	// succ:  l000000000046C270
l000000000046C270:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497C50<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046C270_exit
fn000000000046C270_exit:


// fn000000000046C290
// Return size: 0
define fn000000000046C290
fn000000000046C290_entry:
	rsp = fp
	// succ:  l000000000046C290
l000000000046C290:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497C50<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046C2AF_thunk_fn0000000000475550
l000000000046C2AF_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046C290_exit
fn000000000046C290_exit:


// fn000000000046C2C0
// Return size: 0
define fn000000000046C2C0
fn000000000046C2C0_entry:
	rsp = fp
	// succ:  l000000000046C2C0
l000000000046C2C0:
	rax = 0x0000000000497C50<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046C2CA_thunk_fn000000000046AD20
l000000000046C2CA_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046C2C0_exit
fn000000000046C2C0_exit:


// fn000000000046C2D0
// Return size: 0
define fn000000000046C2D0
fn000000000046C2D0_entry:
	rsp = fp
	// succ:  l000000000046C2D0
l000000000046C2D0:
	rax = 0x0000000000497C50<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046C2DA_thunk_fn000000000046AD20
l000000000046C2DA_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046C2D0_exit
fn000000000046C2D0_exit:


// fn000000000046C2E0
// Return size: 8
define fn000000000046C2E0
fn000000000046C2E0_entry:
	rsp = fp
	// succ:  l000000000046C2E0
l000000000046C2E0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497CD0<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046C2E0_exit
fn000000000046C2E0_exit:


// fn000000000046C300
// Return size: 8
define fn000000000046C300
fn000000000046C300_entry:
	rsp = fp
	// succ:  l000000000046C300
l000000000046C300:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497CD0<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046C300_exit
fn000000000046C300_exit:


// fn000000000046C320
// Return size: 0
define fn000000000046C320
fn000000000046C320_entry:
	rsp = fp
	// succ:  l000000000046C320
l000000000046C320:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497CD0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046C33F_thunk_fn0000000000475550
l000000000046C33F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046C320_exit
fn000000000046C320_exit:


// fn000000000046C350
// Return size: 0
define fn000000000046C350
fn000000000046C350_entry:
	rsp = fp
	// succ:  l000000000046C350
l000000000046C350:
	rax = 0x0000000000497CD0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046C35A_thunk_fn000000000046AD20
l000000000046C35A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046C350_exit
fn000000000046C350_exit:


// fn000000000046C360
// Return size: 0
define fn000000000046C360
fn000000000046C360_entry:
	rsp = fp
	// succ:  l000000000046C360
l000000000046C360:
	rax = 0x0000000000497CD0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046C36A_thunk_fn000000000046AD20
l000000000046C36A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046C360_exit
fn000000000046C360_exit:


// fn000000000046C370
// Return size: 8
define fn000000000046C370
fn000000000046C370_entry:
	rsp = fp
	// succ:  l000000000046C370
l000000000046C370:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497D50<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046C370_exit
fn000000000046C370_exit:


// fn000000000046C390
// Return size: 8
define fn000000000046C390
fn000000000046C390_entry:
	rsp = fp
	// succ:  l000000000046C390
l000000000046C390:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497D50<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046C390_exit
fn000000000046C390_exit:


// fn000000000046C3B0
// Return size: 0
define fn000000000046C3B0
fn000000000046C3B0_entry:
	rsp = fp
	// succ:  l000000000046C3B0
l000000000046C3B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497D50<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046C3CF_thunk_fn0000000000475550
l000000000046C3CF_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046C3B0_exit
fn000000000046C3B0_exit:


// fn000000000046C3E0
// Return size: 0
define fn000000000046C3E0
fn000000000046C3E0_entry:
	rsp = fp
	// succ:  l000000000046C3E0
l000000000046C3E0:
	rax = 0x0000000000497D50<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046C3EA_thunk_fn000000000046AD20
l000000000046C3EA_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046C3E0_exit
fn000000000046C3E0_exit:


// fn000000000046C3F0
// Return size: 0
define fn000000000046C3F0
fn000000000046C3F0_entry:
	rsp = fp
	// succ:  l000000000046C3F0
l000000000046C3F0:
	rax = 0x0000000000497D50<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046C3FA_thunk_fn000000000046AD20
l000000000046C3FA_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046C3F0_exit
fn000000000046C3F0_exit:


// fn000000000046C400
// Return size: 0
define fn000000000046C400
fn000000000046C400_entry:
	rsp = fp
	// succ:  l000000000046C400
l000000000046C400:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497DD0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046F0F0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046C41F_thunk_fn0000000000475550
l000000000046C41F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046C400_exit
fn000000000046C400_exit:


// fn000000000046C430
// Return size: 8
define fn000000000046C430
fn000000000046C430_entry:
	rsp = fp
	// succ:  l000000000046C430
l000000000046C430:
	rax = 0x0000000000497DD0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046C43A_thunk_fn000000000046F0F0
l000000000046C43A_thunk_fn000000000046F0F0:
	call fn000000000046F0F0 (retsize: 0;)
	return
	// succ:  fn000000000046C430_exit
fn000000000046C430_exit:


// fn000000000046C440
// Return size: 8
define fn000000000046C440
fn000000000046C440_entry:
	rsp = fp
	// succ:  l000000000046C440
l000000000046C440:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	SCZO = cond(edx - 7<32>)
	rdi = rcx
	ebx = edx
	rbx = CONVERT(ebx, word32, uint64)
	r12d = r8d
	r12 = CONVERT(r12d, word32, uint64)
	rsi = rcx + 0x40<64>
	branch Test(LE,SZO) l000000000046C502
	// succ:  l000000000046C461 l000000000046C502
l000000000046C461:
	SCZO = cond(edx - 0x7FFFFFFF<32>)
	branch Test(EQ,Z) l000000000046C530
	// succ:  l000000000046C46D l000000000046C530
l000000000046C46D:
	ebp = SLICE(rdx + 1<64>, word32, 0)
	rbp = CONVERT(ebp, word32, uint64)
	r13 = CONVERT(ebp, word32, int64)
	rcx = r13
	rcx = rcx << 4<64>
	SCZO = cond(rcx)
	call fn0000000000475560 (retsize: 8;)
	r9 = r13 - 1<64>
	r12 = rax
	r8 = rax
	// succ:  l000000000046C490
l000000000046C490:
	r9 = r9 - 1<64>
	SCZO = cond(r9)
	Mem0[r8:word64] = 0<64>
	Mem0[r8 + 8<64>:word32] = 0<32>
	r8 = r8 + 0x10<64>
	SCZO = cond(r8)
	SCZO = cond(r9 - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l000000000046C490
	// succ:  l000000000046C4AD l000000000046C490
l000000000046C4AD:
	edx = Mem0[rdi + 0xC0<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l000000000046C4E7
	// succ:  l000000000046C4B7 l000000000046C4E7
l000000000046C4B7:
	edx = edx - 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	rdx = rdx << 4<64>
	SCZO = cond(rdx)
	// succ:  l000000000046C4C5
l000000000046C4C5:
	r9 = Mem0[rdi + 0xC8<64>:word64]
	rax = Mem0[r9 + r8:word64]
	Mem0[r12 + r8:word64] = rax
	eax = Mem0[r9 + 8<64> + r8:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[r12 + 8<64> + r8:word32] = eax
	r8 = r8 + 0x10<64>
	SCZO = cond(r8)
	SCZO = cond(r8 - rdx)
	branch Test(NE,Z) l000000000046C4C5
	// succ:  l000000000046C4E7 l000000000046C4C5
l000000000046C4E7:
	rcx = Mem0[rdi + 0xC8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000046C4FD
	// succ:  l000000000046C4F3 l000000000046C4FD
l000000000046C4F3:
	SCZO = cond(rsi - rcx)
	branch Test(EQ,Z) l000000000046C4FD
	// succ:  l000000000046C4F8 l000000000046C4FD
l000000000046C4F8:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l000000000046C4FD
l000000000046C4FD:
	rsi = r12
	goto l000000000046C507
	// succ:  l000000000046C507
l000000000046C502:
	ebp = 8<32>
	rbp = CONVERT(ebp, word32, uint64)
	// succ:  l000000000046C507
l000000000046C507:
	rax = CONVERT(ebx, word32, int64)
	Mem0[rdi + 0xC8<64>:word64] = rsi
	Mem0[rdi + 0xC0<64>:word32] = ebp
	rax = rax << 4<64>
	SCZO = cond(rax)
	rax = rsi + rax
	// succ:  l000000000046C51F
l000000000046C51F:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046C440_exit
l000000000046C530:
	eax = Mem0[rcx + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax | 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(Mem0[rcx + 0x1C<64>:word32] & eax)
	C = false
	Mem0[rcx + 0x20<64>:word32] = eax
	branch Test(NE,Z) l000000000046C56A
	// succ:  l000000000046C53E l000000000046C56A
l000000000046C53E:
	SZO = cond(r8b & r8b)
	C = false
	branch Test(EQ,Z) l000000000046C560
	// succ:  l000000000046C543 l000000000046C560
l000000000046C543:
	Mem0[rcx + 0x38<64>:word32] = 0<32>
	// succ:  l000000000046C54A
l000000000046C54A:
	rax = rdi + 0x30<64>
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046C440_exit
l000000000046C560:
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	goto l000000000046C54A
	// succ:  l000000000046C54A
l000000000046C56A:
	rcx = 0x000000000048D840<p64>
	call fn0000000000470B20 (retsize: 8;)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rcx = rax
	branch Test(EQ,Z) l000000000046C584
	// succ:  l000000000046C57F l000000000046C584
l000000000046C57F:
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l000000000046C584
l000000000046C584:
	call fn0000000000475840 (retsize: 8;)
	eax = Mem0[rdi + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax | 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(Mem0[rdi + 0x1C<64>:word32] & eax)
	C = false
	Mem0[rdi + 0x20<64>:word32] = eax
	branch Test(NE,Z) l000000000046C5BB
	// succ:  l000000000046C597 l000000000046C5BB
l000000000046C597:
	SZO = cond(r12b & r12b)
	C = false
	branch Test(EQ,Z) l000000000046C5C7
	// succ:  l000000000046C59C l000000000046C5C7
l000000000046C59C:
	Mem0[rdi + 0x38<64>:word32] = 0<32>
	// succ:  l000000000046C5A3
l000000000046C5A3:
	rax = rdi + 0x30<64>
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn0000000000475A70 (retsize: 8;)
	rax = Mem0[rsp + 0x28<64>:word64]
	goto l000000000046C51F
	// succ:  l000000000046C51F
l000000000046C5BB:
	rcx = 0x000000000048D868<p64>
	call fn0000000000470B20 (retsize: 8;)
	// succ:  l000000000046C5C7
l000000000046C5C7:
	Mem0[rdi + 0x30<64>:word64] = 0<64>
	goto l000000000046C5A3
	// succ:  l000000000046C5A3
fn000000000046C440_exit:


// fn000000000046C5F0
// Return size: 8
define fn000000000046C5F0
fn000000000046C5F0_entry:
	rsp = fp
	// succ:  l000000000046C5F0
l000000000046C5F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rsi = Mem0[0x00000000004919B0<p64>:word64]
	edi = ecx
	rdi = CONVERT(edi, word32, uint64)
	ebx = CONVERT(Mem0[rsi:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bl - cl)
	branch Test(UGT,CZ) l000000000046C613
	// succ:  l000000000046C608 l000000000046C613
l000000000046C608:
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046C5F0_exit
l000000000046C613:
	rbp = rsp + 0x2F<64>
	rcx = rbp
	call fn000000000046C940 (retsize: 8;)
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rcx = Mem0[0x0000000000491630<p64>:word64]
	Mem0[rsi:byte] = dil
	rsi = rax + 0x10<64>
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	Mem0[rcx - 0x38<64>:word64] = rsi
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[0x0000000000491610<p64>:word64]
	Mem0[rcx:word64] = rsi
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[0x0000000000491620<p64>:word64]
	Mem0[rcx:word64] = rsi
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rcx = Mem0[0x0000000000491660<p64>:word64]
	rsi = rax + 0x10<64>
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	Mem0[rcx - 0x38<64>:word64] = rsi
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[0x0000000000491640<p64>:word64]
	Mem0[rcx:word64] = rsi
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[0x0000000000491650<p64>:word64]
	Mem0[rcx:word64] = rsi
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rsi = _iob_func
	call _iob_func (retsize: 8;)
	rcx = Mem0[0x0000000000491690<p64>:word64]
	rdx = rax + 0x30<64>
	r9d = 0x200<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8d = 0x10<32>
	r8 = CONVERT(r8d, word32, uint64)
	call fn0000000000424C00 (retsize: 8;)
	call _iob_func (retsize: 8;)
	rcx = Mem0[0x0000000000491670<p64>:word64]
	r9d = 0x200<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8d = 8<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rax
	call fn0000000000424C00 (retsize: 8;)
	call _iob_func (retsize: 8;)
	rcx = Mem0[0x0000000000491680<p64>:word64]
	rdx = rax + 0x60<64>
	r9d = 0x200<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8d = 0x10<32>
	r8 = CONVERT(r8d, word32, uint64)
	call fn0000000000424C00 (retsize: 8;)
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	rdx = Mem0[0x0000000000491690<p64>:word64]
	rcx = rcx + 8<64>
	SCZO = cond(rcx)
	call fn000000000046E460 (retsize: 8;)
	rcx = Mem0[0x0000000000491AA0<p64>:word64]
	rdx = Mem0[0x0000000000491670<p64>:word64]
	rcx = rcx + 0x10<64>
	SCZO = cond(rcx)
	call fn000000000046E460 (retsize: 8;)
	rcx = Mem0[0x0000000000491AB0<p64>:word64]
	rdx = Mem0[0x0000000000491680<p64>:word64]
	rcx = rcx + 8<64>
	SCZO = cond(rcx)
	call fn000000000046E460 (retsize: 8;)
	rcx = Mem0[0x0000000000491AC0<p64>:word64]
	rdx = Mem0[0x0000000000491680<p64>:word64]
	rcx = rcx + 8<64>
	SCZO = cond(rcx)
	call fn000000000046E460 (retsize: 8;)
	call _iob_func (retsize: 8;)
	rcx = Mem0[0x00000000004916C0<p64>:word64]
	rdx = rax + 0x30<64>
	r9d = 0x200<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8d = 0x10<32>
	r8 = CONVERT(r8d, word32, uint64)
	call fn00000000004250A0 (retsize: 8;)
	call _iob_func (retsize: 8;)
	rcx = Mem0[0x00000000004916A0<p64>:word64]
	r9d = 0x200<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8d = 8<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rax
	call fn00000000004250A0 (retsize: 8;)
	call _iob_func (retsize: 8;)
	rcx = Mem0[0x00000000004916B0<p64>:word64]
	rdx = rax + 0x60<64>
	r9d = 0x200<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8d = 0x10<32>
	r8 = CONVERT(r8d, word32, uint64)
	call fn00000000004250A0 (retsize: 8;)
	rcx = Mem0[0x0000000000491B10<p64>:word64]
	rdx = Mem0[0x00000000004916C0<p64>:word64]
	rcx = rcx + 8<64>
	SCZO = cond(rcx)
	call fn000000000046EC30 (retsize: 8;)
	rcx = Mem0[0x0000000000491AE0<p64>:word64]
	rdx = Mem0[0x00000000004916A0<p64>:word64]
	rcx = rcx + 0x10<64>
	SCZO = cond(rcx)
	call fn000000000046EC30 (retsize: 8;)
	rcx = Mem0[0x0000000000491AF0<p64>:word64]
	rdx = Mem0[0x00000000004916B0<p64>:word64]
	rcx = rcx + 8<64>
	SCZO = cond(rcx)
	call fn000000000046EC30 (retsize: 8;)
	rcx = Mem0[0x0000000000491B00<p64>:word64]
	rdx = Mem0[0x00000000004916B0<p64>:word64]
	rcx = rcx + 8<64>
	SCZO = cond(rcx)
	call fn000000000046EC30 (retsize: 8;)
	rcx = rbp
	call fn000000000046D120 (retsize: 8;)
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046C5F0_exit
fn000000000046C5F0_exit:


// fn000000000046C850
// Return size: 8
define fn000000000046C850
fn000000000046C850_entry:
	rsp = fp
	// succ:  l000000000046C850
l000000000046C850:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rcx + 0x28<64>:word64]
	rsi = rcx
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000046C879
	// succ:  l000000000046C865 l000000000046C879
l000000000046C865:
	r8d = Mem0[rbx + 0x10<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rsi
	ecx = edi
	rcx = CONVERT(ecx, word32, uint64)
	call Mem0[rbx + 8<64>:word64] (retsize: 8;)
	rbx = Mem0[rbx:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l000000000046C865
	// succ:  l000000000046C879 l000000000046C865
l000000000046C879:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046C850_exit
fn000000000046C850_exit:


// fn000000000046C8B0
// Return size: 8
define fn000000000046C8B0
fn000000000046C8B0_entry:
	rsp = fp
	// succ:  l000000000046C8B0
l000000000046C8B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	ecx = 0x18<32>
	rcx = CONVERT(ecx, word32, uint64)
	rdi = rdx
	esi = r8d
	rsi = CONVERT(esi, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rdx = Mem0[rbx + 0x28<64>:word64]
	Mem0[rax + 8<64>:word64] = rdi
	Mem0[rax + 0x10<64>:word32] = esi
	Mem0[rax + 0x14<64>:word32] = 0<32>
	Mem0[rax:word64] = rdx
	Mem0[rbx + 0x28<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046C8B0_exit
fn000000000046C8B0_exit:


// fn000000000046C8F0
// Return size: 8
define fn000000000046C8F0
fn000000000046C8F0_entry:
	rsp = fp
	// succ:  l000000000046C8F0
l000000000046C8F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = Mem0[rcx + 0x28<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000046C910
	// succ:  l000000000046C902 l000000000046C910
l000000000046C902:
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[rcx + 0x14<64>:word32] = __xadd(Mem0[rcx + 0x14<64>:word32], edx)
	SCZO = cond(Mem0[rcx + 0x14<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l000000000046C920
	// succ:  l000000000046C910 l000000000046C920
l000000000046C910:
	Mem0[rsi + 0x28<64>:word64] = 0<64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046C8F0_exit
l000000000046C920:
	rbx = Mem0[rcx:word64]
	call fn0000000000475550 (retsize: 8;)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000046C910
	// succ:  l000000000046C92D l000000000046C910
l000000000046C92D:
	rcx = rbx
	goto l000000000046C902
	// succ:  l000000000046C902
fn000000000046C8F0_exit:


// fn000000000046C940
// Return size: 8
define fn000000000046C940
fn000000000046C940_entry:
	rsp = fp
	// succ:  l000000000046C940
l000000000046C940:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[0x00000000004919A0<p64>:word64]
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rbp + 0<64>:word32] = __xadd(Mem0[rbp + 0<64>:word32], eax)
	SCZO = cond(Mem0[rbp + 0<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000046C972
	// succ:  l000000000046C963 l000000000046C972
l000000000046C963:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046C940_exit
l000000000046C972:
	rax = Mem0[0x00000000004919B0<p64>:word64]
	r13 = _iob_func
	Mem0[rax:byte] = 1<8>
	call _iob_func (retsize: 8;)
	rsi = rax
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rbx = Mem0[0x0000000000491630<p64>:word64]
	rsi = rsi + 0x30<64>
	SCZO = cond(rsi)
	r12 = rax + 0x10<64>
	rcx = rbx + 0x38<64>
	Mem0[rbx + 8<64>:word64] = 0<64>
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	Mem0[rbx + 0x18<64>:word64] = 0<64>
	Mem0[rbx:word64] = r12
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	call fn000000000046AE90 (retsize: 8;)
	rax = Mem0[0x0000000000491B30<p64>:word64]
	Mem0[rbx + 0x40<64>:word64] = rsi
	Mem0[rbx + 0x48<64>:word32] = 0xFFFFFFFF<32>
	rdi = rax + 0x10<64>
	Mem0[rbx:word64] = rdi
	call _iob_func (retsize: 8;)
	rsi = Mem0[0x0000000000491610<p64>:word64]
	r14 = rax
	rcx = rsi + 0x38<64>
	Mem0[rsi:word64] = r12
	Mem0[rsi + 8<64>:word64] = 0<64>
	Mem0[rsi + 0x10<64>:word64] = 0<64>
	Mem0[rsi + 0x18<64>:word64] = 0<64>
	Mem0[rsi + 0x20<64>:word64] = 0<64>
	Mem0[rsi + 0x28<64>:word64] = 0<64>
	Mem0[rsi + 0x30<64>:word64] = 0<64>
	call fn000000000046AE90 (retsize: 8;)
	Mem0[rsi + 0x40<64>:word64] = r14
	Mem0[rsi:word64] = rdi
	Mem0[rsi + 0x48<64>:word32] = 0xFFFFFFFF<32>
	call _iob_func (retsize: 8;)
	rsi = Mem0[0x0000000000491620<p64>:word64]
	r14 = rax
	r14 = r14 + 0x60<64>
	SCZO = cond(r14)
	rcx = rsi + 0x38<64>
	Mem0[rsi:word64] = r12
	Mem0[rsi + 8<64>:word64] = 0<64>
	Mem0[rsi + 0x10<64>:word64] = 0<64>
	Mem0[rsi + 0x18<64>:word64] = 0<64>
	Mem0[rsi + 0x20<64>:word64] = 0<64>
	Mem0[rsi + 0x28<64>:word64] = 0<64>
	Mem0[rsi + 0x30<64>:word64] = 0<64>
	call fn000000000046AE90 (retsize: 8;)
	Mem0[rsi + 0x40<64>:word64] = r14
	Mem0[rsi:word64] = rdi
	Mem0[rsi + 0x48<64>:word32] = 0xFFFFFFFF<32>
	rsi = Mem0[0x0000000000491AD0<p64>:word64]
	rcx = rsi + 8<64>
	call fn000000000046D320 (retsize: 8;)
	r14 = Mem0[0x0000000000491B60<p64>:word64]
	rcx = rsi + 8<64>
	Mem0[rsi + 0xE0<64>:word64] = 0<64>
	Mem0[rsi + 0xE8<64>:byte] = 0<8>
	Mem0[rsi + 0xE9<64>:byte] = 0<8>
	rdx = rbx
	Mem0[rsi + 0xF0<64>:word64] = 0<64>
	Mem0[rsi + 0xF8<64>:word64] = 0<64>
	rax = r14 + 0x18<64>
	Mem0[rsi + 0x100<64>:word64] = 0<64>
	Mem0[rsi + 0x108<64>:word64] = 0<64>
	Mem0[rsi:word64] = rax
	rax = r14 + 0x40<64>
	Mem0[rsi + 8<64>:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	rdi = Mem0[0x0000000000491AA0<p64>:word64]
	rcx = rdi + 0x10<64>
	call fn000000000046D320 (retsize: 8;)
	rax = Mem0[0x0000000000491B50<p64>:word64]
	rcx = rdi + 0x10<64>
	Mem0[rdi + 0xE8<64>:word64] = 0<64>
	Mem0[rdi + 0xF0<64>:byte] = 0<8>
	Mem0[rdi + 0xF1<64>:byte] = 0<8>
	Mem0[rdi + 0xF8<64>:word64] = 0<64>
	Mem0[rdi + 0x100<64>:word64] = 0<64>
	rdx = rax + 0x18<64>
	rax = rax + 0x40<64>
	SCZO = cond(rax)
	Mem0[rdi + 0x108<64>:word64] = 0<64>
	Mem0[rdi + 0x110<64>:word64] = 0<64>
	Mem0[rdi + 0x10<64>:word64] = rax
	Mem0[rdi:word64] = rdx
	rdx = Mem0[0x0000000000491610<p64>:word64]
	Mem0[rdi + 8<64>:word64] = 0<64>
	call fn000000000046E310 (retsize: 8;)
	rbx = Mem0[0x0000000000491AB0<p64>:word64]
	rcx = rbx + 8<64>
	call fn000000000046D320 (retsize: 8;)
	rax = r14 + 0x18<64>
	rdx = Mem0[0x0000000000491620<p64>:word64]
	rcx = rbx + 8<64>
	Mem0[rbx + 0xE0<64>:word64] = 0<64>
	Mem0[rbx + 0xE8<64>:byte] = 0<8>
	Mem0[rbx:word64] = rax
	rax = r14 + 0x40<64>
	Mem0[rbx + 0xE9<64>:byte] = 0<8>
	Mem0[rbx + 0xF0<64>:word64] = 0<64>
	Mem0[rbx + 0xF8<64>:word64] = 0<64>
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	Mem0[rbx + 0x108<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	r12 = Mem0[0x0000000000491AC0<p64>:word64]
	rcx = r12 + 8<64>
	call fn000000000046D320 (retsize: 8;)
	rdx = Mem0[0x0000000000491620<p64>:word64]
	rax = r14 + 0x18<64>
	rcx = r12 + 8<64>
	r14 = r14 + 0x40<64>
	SCZO = cond(r14)
	Mem0[r12 + 0xE0<64>:word64] = 0<64>
	Mem0[r12 + 0xE8<64>:byte] = 0<8>
	Mem0[r12 + 0xE9<64>:byte] = 0<8>
	Mem0[r12 + 0xF0<64>:word64] = 0<64>
	Mem0[r12 + 0xF8<64>:word64] = 0<64>
	Mem0[r12 + 0x100<64>:word64] = 0<64>
	Mem0[r12 + 0x108<64>:word64] = 0<64>
	Mem0[r12 + 8<64>:word64] = r14
	Mem0[r12:word64] = rax
	call fn000000000046E310 (retsize: 8;)
	v18 = Mem0[rbx + 0x20<64>:word32] | 0x2000<32>
	Mem0[rbx + 0x20<64>:word32] = v18
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	Mem0[rdi + 0xE8<64>:word64] = rsi
	Mem0[rbx + 0xE0<64>:word64] = rsi
	call _iob_func (retsize: 8;)
	rsi = rax
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rbx = Mem0[0x0000000000491660<p64>:word64]
	rsi = rsi + 0x30<64>
	SCZO = cond(rsi)
	r12 = rax + 0x10<64>
	rcx = rbx + 0x38<64>
	Mem0[rbx + 8<64>:word64] = 0<64>
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	Mem0[rbx:word64] = r12
	Mem0[rbx + 0x18<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	call fn000000000046AE90 (retsize: 8;)
	rax = Mem0[0x0000000000491B40<p64>:word64]
	r8d = 0xFFFFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rbx + 0x40<64>:word64] = rsi
	Mem0[rbx + 0x48<64>:word16] = r8w
	rdi = rax + 0x10<64>
	Mem0[rbx:word64] = rdi
	call _iob_func (retsize: 8;)
	rsi = Mem0[0x0000000000491640<p64>:word64]
	r14 = rax
	rcx = rsi + 0x38<64>
	Mem0[rsi:word64] = r12
	Mem0[rsi + 8<64>:word64] = 0<64>
	Mem0[rsi + 0x10<64>:word64] = 0<64>
	Mem0[rsi + 0x18<64>:word64] = 0<64>
	Mem0[rsi + 0x20<64>:word64] = 0<64>
	Mem0[rsi + 0x28<64>:word64] = 0<64>
	Mem0[rsi + 0x30<64>:word64] = 0<64>
	call fn000000000046AE90 (retsize: 8;)
	r9d = 0xFFFFFFFF<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsi:word64] = rdi
	Mem0[rsi + 0x40<64>:word64] = r14
	Mem0[rsi + 0x48<64>:word16] = r9w
	call _iob_func (retsize: 8;)
	rsi = Mem0[0x0000000000491650<p64>:word64]
	r13 = rax
	r13 = r13 + 0x60<64>
	SCZO = cond(r13)
	rcx = rsi + 0x38<64>
	Mem0[rsi:word64] = r12
	Mem0[rsi + 8<64>:word64] = 0<64>
	Mem0[rsi + 0x10<64>:word64] = 0<64>
	Mem0[rsi + 0x18<64>:word64] = 0<64>
	Mem0[rsi + 0x20<64>:word64] = 0<64>
	Mem0[rsi + 0x28<64>:word64] = 0<64>
	Mem0[rsi + 0x30<64>:word64] = 0<64>
	call fn000000000046AE90 (retsize: 8;)
	r10d = 0xFFFFFFFF<32>
	r10 = CONVERT(r10d, word32, uint64)
	Mem0[rsi + 0x40<64>:word64] = r13
	Mem0[rsi:word64] = rdi
	Mem0[rsi + 0x48<64>:word16] = r10w
	rsi = Mem0[0x0000000000491B10<p64>:word64]
	rcx = rsi + 8<64>
	call fn000000000046D320 (retsize: 8;)
	r13 = Mem0[0x0000000000491C20<p64>:word64]
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	rcx = rsi + 8<64>
	Mem0[rsi + 0xE0<64>:word64] = 0<64>
	Mem0[rsi + 0xE8<64>:word16] = r11w
	rdx = rbx
	Mem0[rsi + 0xEA<64>:byte] = 0<8>
	Mem0[rsi + 0xF0<64>:word64] = 0<64>
	rax = r13 + 0x18<64>
	Mem0[rsi + 0xF8<64>:word64] = 0<64>
	Mem0[rsi + 0x100<64>:word64] = 0<64>
	Mem0[rsi + 0x108<64>:word64] = 0<64>
	Mem0[rsi:word64] = rax
	rax = r13 + 0x40<64>
	Mem0[rsi + 8<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	rdi = Mem0[0x0000000000491AE0<p64>:word64]
	rcx = rdi + 0x10<64>
	call fn000000000046D320 (retsize: 8;)
	rax = Mem0[0x0000000000491C10<p64>:word64]
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	Mem0[rdi + 0xE8<64>:word64] = 0<64>
	Mem0[rdi + 0xF0<64>:word16] = cx
	rcx = rdi + 0x10<64>
	Mem0[rdi + 0xF2<64>:byte] = 0<8>
	Mem0[rdi + 0xF8<64>:word64] = 0<64>
	Mem0[rdi + 0x100<64>:word64] = 0<64>
	rdx = rax + 0x18<64>
	rax = rax + 0x40<64>
	SCZO = cond(rax)
	Mem0[rdi + 0x108<64>:word64] = 0<64>
	Mem0[rdi + 0x110<64>:word64] = 0<64>
	Mem0[rdi + 0x10<64>:word64] = rax
	Mem0[rdi:word64] = rdx
	rdx = Mem0[0x0000000000491640<p64>:word64]
	Mem0[rdi + 8<64>:word64] = 0<64>
	call fn000000000046EAE0 (retsize: 8;)
	rbx = Mem0[0x0000000000491AF0<p64>:word64]
	rcx = rbx + 8<64>
	call fn000000000046D320 (retsize: 8;)
	rax = r13 + 0x18<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx + 8<64>
	Mem0[rbx + 0xE8<64>:word16] = dx
	rdx = Mem0[0x0000000000491650<p64>:word64]
	Mem0[rbx:word64] = rax
	rax = r13 + 0x40<64>
	Mem0[rbx + 0xE0<64>:word64] = 0<64>
	Mem0[rbx + 0xEA<64>:byte] = 0<8>
	Mem0[rbx + 0xF0<64>:word64] = 0<64>
	Mem0[rbx + 0xF8<64>:word64] = 0<64>
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	Mem0[rbx + 0x108<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	r12 = Mem0[0x0000000000491B00<p64>:word64]
	rcx = r12 + 8<64>
	call fn000000000046D320 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rdx = Mem0[0x0000000000491650<p64>:word64]
	rcx = r12 + 8<64>
	Mem0[r12 + 0xE8<64>:word16] = ax
	rax = r13 + 0x18<64>
	r13 = r13 + 0x40<64>
	SCZO = cond(r13)
	Mem0[r12 + 0xE0<64>:word64] = 0<64>
	Mem0[r12 + 0xEA<64>:byte] = 0<8>
	Mem0[r12 + 0xF0<64>:word64] = 0<64>
	Mem0[r12 + 0xF8<64>:word64] = 0<64>
	Mem0[r12 + 0x100<64>:word64] = 0<64>
	Mem0[r12 + 0x108<64>:word64] = 0<64>
	Mem0[r12 + 8<64>:word64] = r13
	Mem0[r12:word64] = rax
	call fn000000000046EAE0 (retsize: 8;)
	v36 = Mem0[rbx + 0x20<64>:word32] | 0x2000<32>
	Mem0[rbx + 0x20<64>:word32] = v36
	SZO = cond(Mem0[rbx + 0x20<64>:word32])
	C = false
	Mem0[rdi + 0xE8<64>:word64] = rsi
	Mem0[rbx + 0xE0<64>:word64] = rsi
	__lock()
	v37 = Mem0[rbp + 0<64>:word32] + 1<32>
	Mem0[rbp + 0<64>:word32] = v37
	SCZO = cond(v37)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046C940_exit
fn000000000046C940_exit:


// fn000000000046D120
// Return size: 8
define fn000000000046D120
fn000000000046D120_entry:
	rsp = fp
	// succ:  l000000000046D120
l000000000046D120:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x00000000004919A0<p64>:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[rax:word32] = __xadd(Mem0[rax:word32], edx)
	SCZO = cond(Mem0[rax:word32])
	SCZO = cond(edx - 2<32>)
	branch Test(EQ,Z) l000000000046D140
	// succ:  l000000000046D139 l000000000046D140
l000000000046D139:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000046D120_exit
l000000000046D140:
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn000000000044E8B0 (retsize: 8;)
	rcx = Mem0[0x0000000000491AB0<p64>:word64]
	call fn000000000044E8B0 (retsize: 8;)
	rcx = Mem0[0x0000000000491AC0<p64>:word64]
	call fn000000000044E8B0 (retsize: 8;)
	rcx = Mem0[0x0000000000491B10<p64>:word64]
	call fn000000000045D8D0 (retsize: 8;)
	rcx = Mem0[0x0000000000491AF0<p64>:word64]
	call fn000000000045D8D0 (retsize: 8;)
	rcx = Mem0[0x0000000000491B00<p64>:word64]
	call fn000000000045D8D0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000046D120_exit
fn000000000046D120_exit:


// fn000000000046D1A0
// Return size: 8
define fn000000000046D1A0
fn000000000046D1A0_entry:
	rsp = fp
	// succ:  l000000000046D1A0
l000000000046D1A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdi = rdx + 0xD0<64>
	rbp = r8
	rsi = rdx
	rbx = rcx
	rdx = rdi
	call fn000000000046AE80 (retsize: 8;)
	rdx = rbp
	rcx = rdi
	call fn000000000046AF60 (retsize: 8;)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	call fn000000000046C850 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046D1A0_exit
fn000000000046D1A0_exit:


// fn000000000046D1F0
// Return size: 8
define fn000000000046D1F0
fn000000000046D1F0_entry:
	rsp = fp
	// succ:  l000000000046D1F0
l000000000046D1F0:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[0x000000000048C0A0<p64>:word32] = __xadd(Mem0[0x000000000048C0A0<p64>:word32], eax)
	SCZO = cond(Mem0[0x000000000048C0A0<p64>:word32])
	eax = eax + 4<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	return
	// succ:  fn000000000046D1F0_exit
fn000000000046D1F0_exit:


// fn000000000046D210
// Return size: 8
define fn000000000046D210
fn000000000046D210_entry:
	rsp = fp
	// succ:  l000000000046D210
l000000000046D210:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rsi = rsp + 0x20<64>
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 6<64>
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word32] = 0x1002<32>
	rcx = rsi
	call fn000000000046AE90 (retsize: 8;)
	rcx = rbx + 0xD0<64>
	rdx = rsi
	call fn000000000046AF60 (retsize: 8;)
	rcx = rsi
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046D210_exit
fn000000000046D210_exit:


// fn000000000046D260
// Return size: 8
define fn000000000046D260
fn000000000046D260_entry:
	rsp = fp
	// succ:  l000000000046D260
l000000000046D260:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000495F70<p64>
	rbx = rcx
	rcx = rcx + 8<64>
	Mem0[rcx - 8<64>:word64] = rax
	call fn0000000000451F40 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046D260_exit
fn000000000046D260_exit:


// fn000000000046D2B0
// Return size: 0
define fn000000000046D2B0
fn000000000046D2B0_entry:
	rsp = fp
	// succ:  l000000000046D2B0
l000000000046D2B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn000000000046D2D0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046D2C5_thunk_fn0000000000475550
l000000000046D2C5_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046D2B0_exit
fn000000000046D2B0_exit:


// fn000000000046D2D0
// Return size: 8
define fn000000000046D2D0
fn000000000046D2D0_entry:
	rsp = fp
	// succ:  l000000000046D2D0
l000000000046D2D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = 0x0000000000495F70<p64>
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rbx = rcx
	Mem0[rcx:word64] = rax
	rax = Mem0[rcx + 8<64>:word64]
	__lock()
	Mem0[rax - 8<64>:word32] = __xadd(Mem0[rax - 8<64>:word32], edx)
	SCZO = cond(Mem0[rax - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l000000000046D303
	// succ:  l000000000046D2F4 l000000000046D303
l000000000046D2F4:
	rcx = rbx
	call fn000000000046F0F0 (retsize: 8;)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046D2D0_exit
l000000000046D303:
	rcx = rax - 0x18<64>
	rdx = rsp + 0x2F<64>
	call fn0000000000450A50 (retsize: 8;)
	rcx = rbx
	call fn000000000046F0F0 (retsize: 8;)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046D2D0_exit
fn000000000046D2D0_exit:


// fn000000000046D320
// Return size: 0
define fn000000000046D320
fn000000000046D320_entry:
	rsp = fp
	// succ:  l000000000046D320
l000000000046D320:
	rax = 0x0000000000497E10<p64>
	r8 = rcx + 0x40<64>
	rdx = rcx + 0xC0<64>
	Mem0[rcx + 8<64>:word64] = 0<64>
	Mem0[rcx:word64] = rax
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word32] = 0<32>
	Mem0[rcx + 0x1C<64>:word32] = 0<32>
	rax = r8
	Mem0[rcx + 0x20<64>:word32] = 0<32>
	Mem0[rcx + 0x28<64>:word64] = 0<64>
	Mem0[rcx + 0x30<64>:word64] = 0<64>
	Mem0[rcx + 0x38<64>:word32] = 0<32>
	// succ:  l000000000046D374
l000000000046D374:
	Mem0[rax:word64] = 0<64>
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l000000000046D374
	// succ:  l000000000046D38B l000000000046D374
l000000000046D38B:
	Mem0[rcx + 0xC0<64>:word32] = 8<32>
	Mem0[rcx + 0xC8<64>:word64] = r8
	rcx = rcx + 0xD0<64>
	SCZO = cond(rcx)
	// succ:  l000000000046D3A3_thunk_fn000000000046AE90
l000000000046D3A3_thunk_fn000000000046AE90:
	call fn000000000046AE90 (retsize: 0;)
	return
	// succ:  fn000000000046D320_exit
fn000000000046D320_exit:


// fn000000000046D3B0
// Return size: 0
define fn000000000046D3B0
fn000000000046D3B0_entry:
	rsp = fp
	// succ:  l000000000046D3B0
l000000000046D3B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn000000000046D3D0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046D3C5_thunk_fn0000000000475550
l000000000046D3C5_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046D3B0_exit
fn000000000046D3B0_exit:


// fn000000000046D3D0
// Return size: 0
define fn000000000046D3D0
fn000000000046D3D0_entry:
	rsp = fp
	// succ:  l000000000046D3D0
l000000000046D3D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497E10<p64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046C850 (retsize: 8;)
	rcx = rbx
	call fn000000000046C8F0 (retsize: 8;)
	rcx = Mem0[rbx + 0xC8<64>:word64]
	rax = rbx + 0x40<64>
	SCZO = cond(rcx - rax)
	branch Test(EQ,Z) l000000000046D416
	// succ:  l000000000046D401 l000000000046D416
l000000000046D401:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000046D40B
	// succ:  l000000000046D406 l000000000046D40B
l000000000046D406:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l000000000046D40B
l000000000046D40B:
	Mem0[rbx + 0xC8<64>:word64] = 0<64>
	// succ:  l000000000046D416
l000000000046D416:
	rcx = rbx + 0xD0<64>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046D422_thunk_fn000000000046AF20
l000000000046D422_thunk_fn000000000046AF20:
	call fn000000000046AF20 (retsize: 0;)
	return
	// succ:  fn000000000046D3D0_exit
fn000000000046D3D0_exit:


// fn000000000046D430
// Return size: 8
define fn000000000046D430
fn000000000046D430_entry:
	rsp = fp
	// succ:  l000000000046D430
l000000000046D430:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r9 & r9)
	C = false
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497E30<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046D430_exit
fn000000000046D430_exit:


// fn000000000046D480
// Return size: 8
define fn000000000046D480
fn000000000046D480_entry:
	rsp = fp
	// succ:  l000000000046D480
l000000000046D480:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497E30<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046D480_exit
fn000000000046D480_exit:


// fn000000000046D4D0
// Return size: 8
define fn000000000046D4D0
fn000000000046D4D0_entry:
	rsp = fp
	// succ:  l000000000046D4D0
l000000000046D4D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r9 & r9)
	C = false
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497E30<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046D4D0_exit
fn000000000046D4D0_exit:


// fn000000000046D520
// Return size: 8
define fn000000000046D520
fn000000000046D520_entry:
	rsp = fp
	// succ:  l000000000046D520
l000000000046D520:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497E30<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046D520_exit
fn000000000046D520_exit:


// fn000000000046D570
// Return size: 0
define fn000000000046D570
fn000000000046D570_entry:
	rsp = fp
	// succ:  l000000000046D570
l000000000046D570:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn000000000046D590 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046D585_thunk_fn0000000000475550
l000000000046D585_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046D570_exit
fn000000000046D570_exit:


// fn000000000046D590
// Return size: 0
define fn000000000046D590
fn000000000046D590_entry:
	rsp = fp
	// succ:  l000000000046D590
l000000000046D590:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497E30<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046D5B6_thunk_fn000000000046AD20
l000000000046D5B6_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046D590_exit
fn000000000046D590_exit:


// fn000000000046D5D0
// Return size: 0
define fn000000000046D5D0
fn000000000046D5D0_entry:
	rsp = fp
	// succ:  l000000000046D5D0
l000000000046D5D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497E30<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046D5F6_thunk_fn000000000046AD20
l000000000046D5F6_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046D5D0_exit
fn000000000046D5D0_exit:


// fn000000000046D610
// Return size: 8
define fn000000000046D610
fn000000000046D610_entry:
	rsp = fp
	// succ:  l000000000046D610
l000000000046D610:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r9 & r9)
	C = false
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497E70<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046D610_exit
fn000000000046D610_exit:


// fn000000000046D660
// Return size: 8
define fn000000000046D660
fn000000000046D660_entry:
	rsp = fp
	// succ:  l000000000046D660
l000000000046D660:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497E70<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046D660_exit
fn000000000046D660_exit:


// fn000000000046D6B0
// Return size: 8
define fn000000000046D6B0
fn000000000046D6B0_entry:
	rsp = fp
	// succ:  l000000000046D6B0
l000000000046D6B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r9 & r9)
	C = false
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497E70<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046D6B0_exit
fn000000000046D6B0_exit:


// fn000000000046D700
// Return size: 8
define fn000000000046D700
fn000000000046D700_entry:
	rsp = fp
	// succ:  l000000000046D700
l000000000046D700:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497E70<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046AC50 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046D700_exit
fn000000000046D700_exit:


// fn000000000046D750
// Return size: 0
define fn000000000046D750
fn000000000046D750_entry:
	rsp = fp
	// succ:  l000000000046D750
l000000000046D750:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn000000000046D770 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046D765_thunk_fn0000000000475550
l000000000046D765_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046D750_exit
fn000000000046D750_exit:


// fn000000000046D770
// Return size: 0
define fn000000000046D770
fn000000000046D770_entry:
	rsp = fp
	// succ:  l000000000046D770
l000000000046D770:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497E70<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046D796_thunk_fn000000000046AD20
l000000000046D796_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046D770_exit
fn000000000046D770_exit:


// fn000000000046D7B0
// Return size: 0
define fn000000000046D7B0
fn000000000046D7B0_entry:
	rsp = fp
	// succ:  l000000000046D7B0
l000000000046D7B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497E70<p64>
	rbx = rcx
	rcx = rcx + 0x10<64>
	Mem0[rcx - 0x10<64>:word64] = rax
	call fn000000000046ACF0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046D7D6_thunk_fn000000000046AD20
l000000000046D7D6_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046D7B0_exit
fn000000000046D7B0_exit:


// fn000000000046D7F0
// Return size: 8
define fn000000000046D7F0
fn000000000046D7F0_entry:
	rsp = fp
	// succ:  l000000000046D7F0
l000000000046D7F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x10<64>:word64]
	rbx = rcx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000046D8A7
	// succ:  l000000000046D805 l000000000046D8A7
l000000000046D805:
	rcx = 0x000000000048E380<p64>
	Mem0[rax + 0x18<64>:word64] = 0<64>
	Mem0[rax + 0x20<64>:byte] = 0<8>
	Mem0[rax + 0x48<64>:byte] = 0x2E<8>
	Mem0[rax + 0x10<64>:word64] = rcx
	rax = Mem0[rbx + 0x10<64>:word64]
	Mem0[rax + 0x49<64>:byte] = 0x2C<8>
	rax = Mem0[0x00000000004916F0<p64>:word64]
	rcx = Mem0[rax:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000046D834
l000000000046D834:
	r8d = CONVERT(Mem0[rcx + rax:byte], byte, word32)
	r8 = CONVERT(r8d, word32, uint64)
	rdx = Mem0[rbx + 0x10<64>:word64]
	Mem0[rdx + 0x4A<64> + rax:byte] = r8b
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 0x24<64>)
	branch Test(NE,Z) l000000000046D834
	// succ:  l000000000046D84C l000000000046D834
l000000000046D84C:
	rax = Mem0[0x00000000004916E0<p64>:word64]
	r8 = Mem0[rax:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000046D860
l000000000046D860:
	ecx = CONVERT(Mem0[r8 + rax:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rdx = Mem0[rbx + 0x10<64>:word64]
	Mem0[rdx + 0x6E<64> + rax:byte] = cl
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 0x1A<64>)
	branch Test(NE,Z) l000000000046D860
	// succ:  l000000000046D877 l000000000046D860
l000000000046D877:
	rax = Mem0[rbx + 0x10<64>:word64]
	rbx = 0x000000000048E381<p64>
	Mem0[rax + 0x28<64>:word64] = rbx
	rbx = 0x000000000048E386<p64>
	Mem0[rax + 0x30<64>:word64] = 4<64>
	Mem0[rax + 0x40<64>:word64] = 5<64>
	Mem0[rax + 0x38<64>:word64] = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046D7F0_exit
l000000000046D8A7:
	ecx = 0x90<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rcx = Mem0[0x0000000000491C50<p64>:word64]
	Mem0[rax + 8<64>:word32] = 0<32>
	Mem0[rax + 0x10<64>:word64] = 0<64>
	Mem0[rax + 0x18<64>:word64] = 0<64>
	Mem0[rax + 0x20<64>:byte] = 0<8>
	Mem0[rax + 0x28<64>:word64] = 0<64>
	rdx = rcx + 0x10<64>
	Mem0[rax + 0x30<64>:word64] = 0<64>
	Mem0[rax + 0x38<64>:word64] = 0<64>
	Mem0[rax + 0x40<64>:word64] = 0<64>
	Mem0[rax + 0x48<64>:byte] = 0<8>
	Mem0[rax:word64] = rdx
	Mem0[rax + 0x49<64>:byte] = 0<8>
	Mem0[rax + 0x88<64>:byte] = 0<8>
	Mem0[rbx + 0x10<64>:word64] = rax
	goto l000000000046D805
	// succ:  l000000000046D805
fn000000000046D7F0_exit:


// fn000000000046D920
// Return size: 8
define fn000000000046D920
fn000000000046D920_entry:
	rsp = fp
	// succ:  l000000000046D920
l000000000046D920:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	Mem0[rcx + 0x10<64>:word64] = rdx
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497ED0<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046D7F0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046D920_exit
fn000000000046D920_exit:


// fn000000000046D970
// Return size: 8
define fn000000000046D970
fn000000000046D970_entry:
	rsp = fp
	// succ:  l000000000046D970
l000000000046D970:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497ED0<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046D7F0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046D970_exit
fn000000000046D970_exit:


// fn000000000046D9C0
// Return size: 8
define fn000000000046D9C0
fn000000000046D9C0_entry:
	rsp = fp
	// succ:  l000000000046D9C0
l000000000046D9C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497ED0<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046D7F0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046D9C0_exit
fn000000000046D9C0_exit:


// fn000000000046DA10
// Return size: 8
define fn000000000046DA10
fn000000000046DA10_entry:
	rsp = fp
	// succ:  l000000000046DA10
l000000000046DA10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	Mem0[rcx + 0x10<64>:word64] = rdx
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497ED0<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046D7F0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046DA10_exit
fn000000000046DA10_exit:


// fn000000000046DA60
// Return size: 8
define fn000000000046DA60
fn000000000046DA60_entry:
	rsp = fp
	// succ:  l000000000046DA60
l000000000046DA60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497ED0<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046D7F0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046DA60_exit
fn000000000046DA60_exit:


// fn000000000046DAB0
// Return size: 8
define fn000000000046DAB0
fn000000000046DAB0_entry:
	rsp = fp
	// succ:  l000000000046DAB0
l000000000046DAB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497ED0<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046D7F0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046DAB0_exit
fn000000000046DAB0_exit:


// fn000000000046DB00
// Return size: 0
define fn000000000046DB00
fn000000000046DB00_entry:
	rsp = fp
	// succ:  l000000000046DB00
l000000000046DB00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn000000000046DB20 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046DB15_thunk_fn0000000000475550
l000000000046DB15_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046DB00_exit
fn000000000046DB00_exit:


// fn000000000046DB20
// Return size: 0
define fn000000000046DB20
fn000000000046DB20_entry:
	rsp = fp
	// succ:  l000000000046DB20
l000000000046DB20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491DB0<p64>:word64]
	rbx = rcx
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	rcx = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000046DB46
	// succ:  l000000000046DB40 l000000000046DB46
l000000000046DB40:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 8<64>:word64] (retsize: 8;)
	// succ:  l000000000046DB46
l000000000046DB46:
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046DB4F_thunk_fn000000000046AD20
l000000000046DB4F_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046DB20_exit
fn000000000046DB20_exit:


// fn000000000046DB70
// Return size: 8
define fn000000000046DB70
fn000000000046DB70_entry:
	rsp = fp
	// succ:  l000000000046DB70
l000000000046DB70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdx = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l000000000046DC25
	// succ:  l000000000046DB82 l000000000046DC25
l000000000046DB82:
	rax = 0x000000000048E380<p64>
	ecx = 0x2C<32>
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rdx + 0x18<64>:word64] = 0<64>
	Mem0[rdx + 0x20<64>:byte] = 0<8>
	Mem0[rdx + 0x4A<64>:word16] = cx
	Mem0[rdx + 0x10<64>:word64] = rax
	eax = 0x2E<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdx + 0x48<64>:word16] = ax
	rax = Mem0[0x00000000004916F0<p64>:word64]
	r8 = Mem0[rax:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000046DBC0
l000000000046DBC0:
	cx = CONVERT(Mem0[r8 + rax:byte], byte, int16)
	Mem0[rdx + 0x4C<64> + rax * 2<64>:word16] = cx
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 0x24<64>)
	branch Test(NE,Z) l000000000046DBC0
	// succ:  l000000000046DBD5 l000000000046DBC0
l000000000046DBD5:
	rax = Mem0[0x00000000004916E0<p64>:word64]
	r8 = Mem0[rax:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000046DBE1
l000000000046DBE1:
	cx = CONVERT(Mem0[r8 + rax:byte], byte, int16)
	Mem0[rdx + 0x94<64> + rax * 2<64>:word16] = cx
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 0x1A<64>)
	branch Test(NE,Z) l000000000046DBE1
	// succ:  l000000000046DBF9 l000000000046DBE1
l000000000046DBF9:
	rax = 0x000000000048E38C<p64>
	Mem0[rdx + 0x30<64>:word64] = 4<64>
	Mem0[rdx + 0x40<64>:word64] = 5<64>
	Mem0[rdx + 0x28<64>:word64] = rax
	rax = 0x000000000048E396<p64>
	Mem0[rdx + 0x38<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046DB70_exit
l000000000046DC25:
	rbx = rcx
	ecx = 0xD0<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rdx = Mem0[0x0000000000491C60<p64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	Mem0[rax + 8<64>:word32] = 0<32>
	Mem0[rax + 0x10<64>:word64] = 0<64>
	Mem0[rax + 0x18<64>:word64] = 0<64>
	Mem0[rax + 0x20<64>:byte] = 0<8>
	rdx = rdx + 0x10<64>
	SCZO = cond(rdx)
	Mem0[rax + 0x28<64>:word64] = 0<64>
	Mem0[rax + 0x30<64>:word64] = 0<64>
	Mem0[rax:word64] = rdx
	Mem0[rax + 0x38<64>:word64] = 0<64>
	rdx = rax
	Mem0[rax + 0x40<64>:word64] = 0<64>
	Mem0[rax + 0x48<64>:word16] = r8w
	Mem0[rax + 0x4A<64>:word16] = r9w
	Mem0[rax + 0xC8<64>:byte] = 0<8>
	Mem0[rbx + 0x10<64>:word64] = rax
	goto l000000000046DB82
	// succ:  l000000000046DB82
fn000000000046DB70_exit:


// fn000000000046DCA0
// Return size: 8
define fn000000000046DCA0
fn000000000046DCA0_entry:
	rsp = fp
	// succ:  l000000000046DCA0
l000000000046DCA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	Mem0[rcx + 0x10<64>:word64] = rdx
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497F50<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046DB70 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046DCA0_exit
fn000000000046DCA0_exit:


// fn000000000046DCF0
// Return size: 8
define fn000000000046DCF0
fn000000000046DCF0_entry:
	rsp = fp
	// succ:  l000000000046DCF0
l000000000046DCF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497F50<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046DB70 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046DCF0_exit
fn000000000046DCF0_exit:


// fn000000000046DD40
// Return size: 8
define fn000000000046DD40
fn000000000046DD40_entry:
	rsp = fp
	// succ:  l000000000046DD40
l000000000046DD40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497F50<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046DB70 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046DD40_exit
fn000000000046DD40_exit:


// fn000000000046DD90
// Return size: 8
define fn000000000046DD90
fn000000000046DD90_entry:
	rsp = fp
	// succ:  l000000000046DD90
l000000000046DD90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	Mem0[rcx + 0x10<64>:word64] = rdx
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497F50<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046DB70 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046DD90_exit
fn000000000046DD90_exit:


// fn000000000046DDE0
// Return size: 8
define fn000000000046DDE0
fn000000000046DDE0_entry:
	rsp = fp
	// succ:  l000000000046DDE0
l000000000046DDE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r8 & r8)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497F50<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046DB70 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046DDE0_exit
fn000000000046DDE0_exit:


// fn000000000046DE30
// Return size: 8
define fn000000000046DE30
fn000000000046DE30_entry:
	rsp = fp
	// succ:  l000000000046DE30
l000000000046DE30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	rbx = rcx
	al = CONVERT(Test(NE,Z), bool, int8)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497F50<p64>
	Mem0[rcx:word64] = rax
	call fn000000000046DB70 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046DE30_exit
fn000000000046DE30_exit:


// fn000000000046DE80
// Return size: 0
define fn000000000046DE80
fn000000000046DE80_entry:
	rsp = fp
	// succ:  l000000000046DE80
l000000000046DE80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn000000000046DEA0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046DE95_thunk_fn0000000000475550
l000000000046DE95_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046DE80_exit
fn000000000046DE80_exit:


// fn000000000046DEA0
// Return size: 0
define fn000000000046DEA0
fn000000000046DEA0_entry:
	rsp = fp
	// succ:  l000000000046DEA0
l000000000046DEA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491DC0<p64>:word64]
	rbx = rcx
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	rcx = Mem0[rcx + 0x10<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000046DEC6
	// succ:  l000000000046DEC0 l000000000046DEC6
l000000000046DEC0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 8<64>:word64] (retsize: 8;)
	// succ:  l000000000046DEC6
l000000000046DEC6:
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046DECF_thunk_fn000000000046AD20
l000000000046DECF_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046DEA0_exit
fn000000000046DEA0_exit:


// fn000000000046DEF0
// Return size: 8
define fn000000000046DEF0
fn000000000046DEF0_entry:
	rsp = fp
	// succ:  l000000000046DEF0
l000000000046DEF0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497FD0<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046DEF0_exit
fn000000000046DEF0_exit:


// fn000000000046DF10
// Return size: 8
define fn000000000046DF10
fn000000000046DF10_entry:
	rsp = fp
	// succ:  l000000000046DF10
l000000000046DF10:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000497FD0<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046DF10_exit
fn000000000046DF10_exit:


// fn000000000046DF30
// Return size: 0
define fn000000000046DF30
fn000000000046DF30_entry:
	rsp = fp
	// succ:  l000000000046DF30
l000000000046DF30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000497FD0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046DF4F_thunk_fn0000000000475550
l000000000046DF4F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046DF30_exit
fn000000000046DF30_exit:


// fn000000000046DF60
// Return size: 0
define fn000000000046DF60
fn000000000046DF60_entry:
	rsp = fp
	// succ:  l000000000046DF60
l000000000046DF60:
	rax = 0x0000000000497FD0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046DF6A_thunk_fn000000000046AD20
l000000000046DF6A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046DF60_exit
fn000000000046DF60_exit:


// fn000000000046DF70
// Return size: 0
define fn000000000046DF70
fn000000000046DF70_entry:
	rsp = fp
	// succ:  l000000000046DF70
l000000000046DF70:
	rax = 0x0000000000497FD0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046DF7A_thunk_fn000000000046AD20
l000000000046DF7A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046DF70_exit
fn000000000046DF70_exit:


// fn000000000046DF80
// Return size: 8
define fn000000000046DF80
fn000000000046DF80_entry:
	rsp = fp
	// succ:  l000000000046DF80
l000000000046DF80:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000498050<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046DF80_exit
fn000000000046DF80_exit:


// fn000000000046DFA0
// Return size: 8
define fn000000000046DFA0
fn000000000046DFA0_entry:
	rsp = fp
	// succ:  l000000000046DFA0
l000000000046DFA0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000498050<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046DFA0_exit
fn000000000046DFA0_exit:


// fn000000000046DFC0
// Return size: 0
define fn000000000046DFC0
fn000000000046DFC0_entry:
	rsp = fp
	// succ:  l000000000046DFC0
l000000000046DFC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000498050<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046DFDF_thunk_fn0000000000475550
l000000000046DFDF_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046DFC0_exit
fn000000000046DFC0_exit:


// fn000000000046DFF0
// Return size: 0
define fn000000000046DFF0
fn000000000046DFF0_entry:
	rsp = fp
	// succ:  l000000000046DFF0
l000000000046DFF0:
	rax = 0x0000000000498050<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046DFFA_thunk_fn000000000046AD20
l000000000046DFFA_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046DFF0_exit
fn000000000046DFF0_exit:


// fn000000000046E000
// Return size: 0
define fn000000000046E000
fn000000000046E000_entry:
	rsp = fp
	// succ:  l000000000046E000
l000000000046E000:
	rax = 0x0000000000498050<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046E00A_thunk_fn000000000046AD20
l000000000046E00A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046E000_exit
fn000000000046E000_exit:


// fn000000000046E010
// Return size: 8
define fn000000000046E010
fn000000000046E010_entry:
	rsp = fp
	// succ:  l000000000046E010
l000000000046E010:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004980D0<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046E010_exit
fn000000000046E010_exit:


// fn000000000046E030
// Return size: 8
define fn000000000046E030
fn000000000046E030_entry:
	rsp = fp
	// succ:  l000000000046E030
l000000000046E030:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004980D0<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046E030_exit
fn000000000046E030_exit:


// fn000000000046E050
// Return size: 0
define fn000000000046E050
fn000000000046E050_entry:
	rsp = fp
	// succ:  l000000000046E050
l000000000046E050:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x00000000004980D0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046E06F_thunk_fn0000000000475550
l000000000046E06F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046E050_exit
fn000000000046E050_exit:


// fn000000000046E080
// Return size: 0
define fn000000000046E080
fn000000000046E080_entry:
	rsp = fp
	// succ:  l000000000046E080
l000000000046E080:
	rax = 0x00000000004980D0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046E08A_thunk_fn000000000046AD20
l000000000046E08A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046E080_exit
fn000000000046E080_exit:


// fn000000000046E090
// Return size: 0
define fn000000000046E090
fn000000000046E090_entry:
	rsp = fp
	// succ:  l000000000046E090
l000000000046E090:
	rax = 0x00000000004980D0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046E09A_thunk_fn000000000046AD20
l000000000046E09A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046E090_exit
fn000000000046E090_exit:


// fn000000000046E0A0
// Return size: 8
define fn000000000046E0A0
fn000000000046E0A0_entry:
	rsp = fp
	// succ:  l000000000046E0A0
l000000000046E0A0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000498110<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046E0A0_exit
fn000000000046E0A0_exit:


// fn000000000046E0C0
// Return size: 8
define fn000000000046E0C0
fn000000000046E0C0_entry:
	rsp = fp
	// succ:  l000000000046E0C0
l000000000046E0C0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000498110<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046E0C0_exit
fn000000000046E0C0_exit:


// fn000000000046E0E0
// Return size: 0
define fn000000000046E0E0
fn000000000046E0E0_entry:
	rsp = fp
	// succ:  l000000000046E0E0
l000000000046E0E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000498110<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046E0FF_thunk_fn0000000000475550
l000000000046E0FF_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046E0E0_exit
fn000000000046E0E0_exit:


// fn000000000046E110
// Return size: 0
define fn000000000046E110
fn000000000046E110_entry:
	rsp = fp
	// succ:  l000000000046E110
l000000000046E110:
	rax = 0x0000000000498110<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046E11A_thunk_fn000000000046AD20
l000000000046E11A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046E110_exit
fn000000000046E110_exit:


// fn000000000046E120
// Return size: 0
define fn000000000046E120
fn000000000046E120_entry:
	rsp = fp
	// succ:  l000000000046E120
l000000000046E120:
	rax = 0x0000000000498110<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046E12A_thunk_fn000000000046AD20
l000000000046E12A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046E120_exit
fn000000000046E120_exit:


// fn000000000046E130
// Return size: 0
define fn000000000046E130
fn000000000046E130_entry:
	rsp = fp
	// succ:  l000000000046E130
l000000000046E130:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000498150<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046F0F0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046E14F_thunk_fn0000000000475550
l000000000046E14F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046E130_exit
fn000000000046E130_exit:


// fn000000000046E160
// Return size: 8
define fn000000000046E160
fn000000000046E160_entry:
	rsp = fp
	// succ:  l000000000046E160
l000000000046E160:
	rax = 0x0000000000498150<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046E16A_thunk_fn000000000046F0F0
l000000000046E16A_thunk_fn000000000046F0F0:
	call fn000000000046F0F0 (retsize: 0;)
	return
	// succ:  fn000000000046E160_exit
fn000000000046E160_exit:


// fn000000000046E170
// Return size: 8
define fn000000000046E170
fn000000000046E170_entry:
	rsp = fp
	// succ:  l000000000046E170
l000000000046E170:
	Mem0[rcx + 0x1C<64>:word32] = edx
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000046E176_thunk_fn000000000046E370
l000000000046E176_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn000000000046E170_exit
fn000000000046E170_exit:


// fn000000000046E180
// Return size: 8
define fn000000000046E180
fn000000000046E180_entry:
	rsp = fp
	// succ:  l000000000046E180
l000000000046E180:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	v6 = Mem0[rcx + 0x20<64>:word32] | edx
	Mem0[rcx + 0x20<64>:word32] = v6
	SZO = cond(Mem0[rcx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rcx + 0x1C<64>:word32] & edx)
	C = false
	branch Test(NE,Z) l000000000046E191
	// succ:  l000000000046E18C l000000000046E191
l000000000046E18C:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000046E180_exit
l000000000046E191:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000046E19F_thunk_fn000000000046E1A0
l000000000046E19F_thunk_fn000000000046E1A0:
	call fn000000000046E1A0 (retsize: 0;)
	return
	// succ:  fn000000000046E180_exit
fn000000000046E180_exit:


// fn000000000046E1A0
// Return size: 8
define fn000000000046E1A0
fn000000000046E1A0_entry:
	rsp = fp
	// succ:  l000000000046E1A0
l000000000046E1A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = rdx
	rbx = rdx
	call fn0000000000472520 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000046E204
	// succ:  l000000000046E1B8 l000000000046E204
l000000000046E1B8:
	rcx = rbx
	call fn0000000000472FC0 (retsize: 8;)
	rcx = rbx
	Mem0[rsi + 0xF0<64>:word64] = rax
	call fn0000000000472820 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000046E220
	// succ:  l000000000046E1D3 l000000000046E220
l000000000046E1D3:
	rcx = rbx
	call fn00000000004732C0 (retsize: 8;)
	rcx = rbx
	Mem0[rsi + 0xF8<64>:word64] = rax
	call fn0000000000472760 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000046E240
	// succ:  l000000000046E1EE l000000000046E240
l000000000046E1EE:
	rcx = rbx
	call fn0000000000473200 (retsize: 8;)
	Mem0[rsi + 0x100<64>:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046E1A0_exit
l000000000046E204:
	Mem0[rsi + 0xF0<64>:word64] = 0<64>
	rcx = rbx
	call fn0000000000472820 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000046E1D3
	// succ:  l000000000046E21B l000000000046E1D3
l000000000046E21B:
	// succ:  l000000000046E220
l000000000046E220:
	Mem0[rsi + 0xF8<64>:word64] = 0<64>
	rcx = rbx
	call fn0000000000472760 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000046E1EE
	// succ:  l000000000046E237 l000000000046E1EE
l000000000046E237:
	// succ:  l000000000046E240
l000000000046E240:
	Mem0[rsi + 0x100<64>:word64] = 0<64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046E1A0_exit
fn000000000046E1A0_exit:


// fn000000000046E260
// Return size: 8
define fn000000000046E260
fn000000000046E260_entry:
	rsp = fp
	// succ:  l000000000046E260
l000000000046E260:
	rax = Mem0[rcx + 0xD8<64>:word64]
	Mem0[rcx + 0xD8<64>:word64] = rdx
	return
	// succ:  fn000000000046E260_exit
fn000000000046E260_exit:


// fn000000000046E270
// Return size: 8
define fn000000000046E270
fn000000000046E270_entry:
	rsp = fp
	// succ:  l000000000046E270
l000000000046E270:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0xE1<64>:byte] - 0<8>)
	rbx = rcx
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	branch Test(EQ,Z) l000000000046E2A0
	// succ:  l000000000046E285 l000000000046E2A0
l000000000046E285:
	eax = CONVERT(Mem0[rcx + 0xE0<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 0xE0<64>:byte] = sil
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046E270_exit
l000000000046E2A0:
	rdi = Mem0[rcx + 0xF0<64>:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000046E2FD
	// succ:  l000000000046E2AC l000000000046E2FD
l000000000046E2AC:
	SCZO = cond(Mem0[rdi + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000046E2D0
	// succ:  l000000000046E2B2 l000000000046E2D0
l000000000046E2B2:
	eax = CONVERT(Mem0[rdi + 0x59<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000046E2B6
l000000000046E2B6:
	Mem0[rbx + 0xE1<64>:byte] = 1<8>
	Mem0[rbx + 0xE0<64>:byte] = sil
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046E270_exit
l000000000046E2D0:
	rcx = rdi
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[rdi:word64]
	rdx = 0x000000000042B5F0<p64>
	r8 = Mem0[rax + 0x30<64>:word64]
	eax = 0x20<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8 - rdx)
	branch Test(EQ,Z) l000000000046E2B6
	// succ:  l000000000046E2F0 l000000000046E2B6
l000000000046E2F0:
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call r8 (retsize: 8;)
	goto l000000000046E2B6
	// succ:  l000000000046E2B6
l000000000046E2FD:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000046E30F_thunk_fn000000000046E310
l000000000046E30F_thunk_fn000000000046E310:
	call fn000000000046E310 (retsize: 0;)
	return
	// succ:  fn000000000046E270_exit
fn000000000046E270_exit:


// fn000000000046E310
// Return size: 8
define fn000000000046E310
fn000000000046E310_entry:
	rsp = fp
	// succ:  l000000000046E310
l000000000046E310:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	rsi = rdx
	call fn000000000046D210 (retsize: 8;)
	rdx = rbx + 0xD0<64>
	rcx = rbx
	call fn000000000046E1A0 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rsi & rsi)
	C = false
	Mem0[rbx + 0xE0<64>:byte] = 0<8>
	al = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rbx + 0xE1<64>:byte] = 0<8>
	Mem0[rbx + 0xD8<64>:word64] = 0<64>
	Mem0[rbx + 0x1C<64>:word32] = 0<32>
	Mem0[rbx + 0xE8<64>:word64] = rsi
	Mem0[rbx + 0x20<64>:word32] = eax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046E310_exit
fn000000000046E310_exit:


// fn000000000046E370
// Return size: 8
define fn000000000046E370
fn000000000046E370_entry:
	rsp = fp
	// succ:  l000000000046E370
l000000000046E370:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0xE8<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000046E390
	// succ:  l000000000046E37E l000000000046E390
l000000000046E37E:
	SZO = cond(Mem0[rcx + 0x1C<64>:word32] & edx)
	C = false
	Mem0[rcx + 0x20<64>:word32] = edx
	branch Test(NE,Z) l000000000046E395
	// succ:  l000000000046E386 l000000000046E395
l000000000046E386:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000046E370_exit
l000000000046E390:
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l000000000046E37E
	// succ:  l000000000046E37E
l000000000046E395:
	rcx = 0x000000000048D5B0<p64>
	call fn0000000000470B20 (retsize: 8;)
	// succ:  l000000000046E3AF_thunk_fn000000000046E3B0
l000000000046E3AF_thunk_fn000000000046E3B0:
	call fn000000000046E3B0 (retsize: 0;)
	return
	// succ:  fn000000000046E370_exit
fn000000000046E370_exit:


// fn000000000046E3B0
// Return size: 8
define fn000000000046E3B0
fn000000000046E3B0_entry:
	rsp = fp
	// succ:  l000000000046E3B0
l000000000046E3B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rbx = rdx
	rsi = rsp + 0x20<64>
	rdx = rdx + 0xD0<64>
	rdi = r8
	rbp = rcx
	call fn000000000046AE80 (retsize: 8;)
	rdx = rbx
	r8 = rdi
	rcx = rsi
	call fn000000000046D1A0 (retsize: 8;)
	rcx = rsi
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rdx = rdi
	rcx = rbx
	call fn000000000046E1A0 (retsize: 8;)
	rbx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000046E42F
	// succ:  l000000000046E401 l000000000046E42F
l000000000046E401:
	r12 = rbx + 0x38<64>
	rcx = rsi
	rdx = r12
	call fn000000000046AE80 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rdx = rdi
	rcx = rbx
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	rcx = r12
	rdx = rdi
	call fn000000000046AF60 (retsize: 8;)
	rcx = rsi
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	// succ:  l000000000046E42F
l000000000046E42F:
	rax = rbp
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046E3B0_exit
fn000000000046E3B0_exit:


// fn000000000046E460
// Return size: 8
define fn000000000046E460
fn000000000046E460_entry:
	rsp = fp
	// succ:  l000000000046E460
l000000000046E460:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rcx + 0xE8<64>:word64]
	Mem0[rcx + 0xE8<64>:word64] = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046E460_exit
fn000000000046E460_exit:


// fn000000000046E490
// Return size: 8
define fn000000000046E490
fn000000000046E490_entry:
	rsp = fp
	// succ:  l000000000046E490
l000000000046E490:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	SCZO = cond(rcx - rdx)
	rsi = rcx
	rbx = rdx
	branch Test(EQ,Z) l000000000046E5F2
	// succ:  l000000000046E4A9 l000000000046E5F2
l000000000046E4A9:
	eax = Mem0[rdx + 0xC0<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 8<32>)
	branch Test(GT,SZO) l000000000046E600
	// succ:  l000000000046E4B8 l000000000046E600
l000000000046E4B8:
	rdi = rcx + 0x40<64>
	r12 = rdi
	// succ:  l000000000046E4BF
l000000000046E4BF:
	rbp = Mem0[rbx + 0x28<64>:word64]
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000046E4CD
	// succ:  l000000000046E4C8 l000000000046E4CD
l000000000046E4C8:
	__lock()
	v16 = Mem0[rbp + 0x14<64>:word32] + 1<32>
	Mem0[rbp + 0x14<64>:word32] = v16
	SCZO = cond(v16)
	// succ:  l000000000046E4CD
l000000000046E4CD:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rsi
	call fn000000000046C850 (retsize: 8;)
	rcx = Mem0[rsi + 0xC8<64>:word64]
	SCZO = cond(rcx - r12)
	branch Test(EQ,Z) l000000000046E4F8
	// succ:  l000000000046E4E3 l000000000046E4F8
l000000000046E4E3:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000046E4ED
	// succ:  l000000000046E4E8 l000000000046E4ED
l000000000046E4E8:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l000000000046E4ED
l000000000046E4ED:
	Mem0[rsi + 0xC8<64>:word64] = 0<64>
	// succ:  l000000000046E4F8
l000000000046E4F8:
	rcx = rsi
	call fn000000000046C8F0 (retsize: 8;)
	ecx = Mem0[rbx + 0xC0<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsi + 0x28<64>:word64] = rbp
	SZO = cond(ecx & ecx)
	C = false
	branch Test(LE,SZO) l000000000046E542
	// succ:  l000000000046E50E l000000000046E542
l000000000046E50E:
	edx = SLICE(rcx - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	rdx = rdx << 4<64>
	SCZO = cond(rdx)
	// succ:  l000000000046E520
l000000000046E520:
	r9 = Mem0[rbx + 0xC8<64>:word64]
	rax = Mem0[r9 + r8:word64]
	Mem0[rdi + r8:word64] = rax
	eax = Mem0[r9 + 8<64> + r8:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdi + 8<64> + r8:word32] = eax
	r8 = r8 + 0x10<64>
	SCZO = cond(r8)
	SCZO = cond(r8 - rdx)
	branch Test(NE,Z) l000000000046E520
	// succ:  l000000000046E542 l000000000046E520
l000000000046E542:
	eax = Mem0[rbx + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[rbx + 0xE1<64>:byte] - 0<8>)
	Mem0[rsi + 0xC8<64>:word64] = rdi
	Mem0[rsi + 0xC0<64>:word32] = ecx
	Mem0[rsi + 0x18<64>:word32] = eax
	rax = Mem0[rbx + 0x10<64>:word64]
	Mem0[rsi + 0x10<64>:word64] = rax
	rax = Mem0[rbx + 8<64>:word64]
	Mem0[rsi + 8<64>:word64] = rax
	rax = Mem0[rbx + 0xD8<64>:word64]
	Mem0[rsi + 0xD8<64>:word64] = rax
	branch Test(EQ,Z) l000000000046E670
	// succ:  l000000000046E580 l000000000046E670
l000000000046E580:
	edi = CONVERT(Mem0[rbx + 0xE0<64>:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	// succ:  l000000000046E587
l000000000046E587:
	SCZO = cond(Mem0[rsi + 0xE1<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000046E644
	// succ:  l000000000046E594 l000000000046E644
l000000000046E594:
	Mem0[rsi + 0xE0<64>:byte] = dil
	rdi = rsp + 0x20<64>
	rdx = rbx + 0xD0<64>
	rbp = rsi + 0xD0<64>
	rcx = rdi
	call fn000000000046AE80 (retsize: 8;)
	rdx = rdi
	rcx = rbp
	call fn000000000046AF60 (retsize: 8;)
	rcx = rdi
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rdx = rbp
	rcx = rsi
	call fn000000000046E1A0 (retsize: 8;)
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	call fn000000000046C850 (retsize: 8;)
	eax = Mem0[rbx + 0x1C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = Mem0[rsi + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	Mem0[rsi + 0x1C<64>:word32] = eax
	call fn000000000046E370 (retsize: 8;)
	// succ:  l000000000046E5F2
l000000000046E5F2:
	rax = rsi
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046E490_exit
l000000000046E600:
	rcx = CONVERT(eax, word32, int64)
	rcx = rcx << 4<64>
	SCZO = cond(rcx)
	call fn0000000000475560 (retsize: 8;)
	rcx = CONVERT(Mem0[rbx + 0xC0<64>:word32], word32, int64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rdi = rax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000046E63B
	// succ:  l000000000046E61D l000000000046E63B
l000000000046E61D:
	// succ:  l000000000046E620
l000000000046E620:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rax:word64] = 0<64>
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	SCZO = cond(rcx - rdx)
	branch Test(NE,Z) l000000000046E620
	// succ:  l000000000046E63B l000000000046E620
l000000000046E63B:
	r12 = rsi + 0x40<64>
	goto l000000000046E4BF
	// succ:  l000000000046E4BF
l000000000046E644:
	rbp = Mem0[rsi + 0xF0<64>:word64]
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000046E6FF
	// succ:  l000000000046E654 l000000000046E6FF
l000000000046E654:
	SCZO = cond(Mem0[rbp + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000046E6D0
	// succ:  l000000000046E65A l000000000046E6D0
l000000000046E65A:
	Mem0[rsi + 0xE1<64>:byte] = 1<8>
	goto l000000000046E594
	// succ:  l000000000046E594
l000000000046E670:
	rbp = Mem0[rbx + 0xF0<64>:word64]
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000046E6FF
	// succ:  l000000000046E680 l000000000046E6FF
l000000000046E680:
	SCZO = cond(Mem0[rbp + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000046E6A0
	// succ:  l000000000046E686 l000000000046E6A0
l000000000046E686:
	edi = CONVERT(Mem0[rbp + 0x59<64>:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	// succ:  l000000000046E68A
l000000000046E68A:
	Mem0[rbx + 0xE0<64>:byte] = dil
	Mem0[rbx + 0xE1<64>:byte] = 1<8>
	goto l000000000046E587
	// succ:  l000000000046E587
l000000000046E6A0:
	rcx = rbp
	edi = 0x20<32>
	rdi = CONVERT(edi, word32, uint64)
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[rbp + 0<64>:word64]
	rdx = 0x000000000042B5F0<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(EQ,Z) l000000000046E68A
	// succ:  l000000000046E6C1 l000000000046E68A
l000000000046E6C1:
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbp
	call rax (retsize: 8;)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	goto l000000000046E68A
	// succ:  l000000000046E68A
l000000000046E6D0:
	rcx = rbp
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[rbp + 0<64>:word64]
	rdx = 0x000000000042B5F0<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(EQ,Z) l000000000046E65A
	// succ:  l000000000046E6F0 l000000000046E65A
l000000000046E6F0:
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbp
	call rax (retsize: 8;)
	goto l000000000046E65A
	// succ:  l000000000046E65A
l000000000046E6FF:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000046E70F_thunk_fn000000000046E710
l000000000046E70F_thunk_fn000000000046E710:
	call fn000000000046E710 (retsize: 0;)
	return
	// succ:  fn000000000046E490_exit
fn000000000046E490_exit:


// fn000000000046E710
// Return size: 8
define fn000000000046E710
fn000000000046E710_entry:
	rsp = fp
	// succ:  l000000000046E710
l000000000046E710:
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l000000000046E713_thunk_fn000000000046E370
l000000000046E713_thunk_fn000000000046E370:
	call fn000000000046E370 (retsize: 0;)
	return
	// succ:  fn000000000046E710_exit
fn000000000046E710_exit:


// fn000000000046E720
// Return size: 8
define fn000000000046E720
fn000000000046E720_entry:
	rsp = fp
	// succ:  l000000000046E720
l000000000046E720:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	rsi = rdx
	call fn000000000046D320 (retsize: 8;)
	rax = 0x0000000000498190<p64>
	Mem0[rbx + 0xD8<64>:word64] = 0<64>
	Mem0[rbx + 0xE0<64>:byte] = 0<8>
	Mem0[rbx + 0xE1<64>:byte] = 0<8>
	Mem0[rbx + 0xE8<64>:word64] = 0<64>
	rdx = rsi
	Mem0[rbx:word64] = rax
	Mem0[rbx + 0xF0<64>:word64] = 0<64>
	rcx = rbx
	Mem0[rbx + 0xF8<64>:word64] = 0<64>
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	call fn000000000046E310 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046E720_exit
fn000000000046E720_exit:


// fn000000000046E7B0
// Return size: 8
define fn000000000046E7B0
fn000000000046E7B0_entry:
	rsp = fp
	// succ:  l000000000046E7B0
l000000000046E7B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn000000000046D320 (retsize: 8;)
	rax = 0x0000000000498190<p64>
	Mem0[rbx + 0xD8<64>:word64] = 0<64>
	Mem0[rbx + 0xE0<64>:byte] = 0<8>
	Mem0[rbx + 0xE1<64>:byte] = 0<8>
	Mem0[rbx + 0xE8<64>:word64] = 0<64>
	Mem0[rbx:word64] = rax
	Mem0[rbx + 0xF0<64>:word64] = 0<64>
	Mem0[rbx + 0xF8<64>:word64] = 0<64>
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046E7B0_exit
fn000000000046E7B0_exit:


// fn000000000046E820
// Return size: 8
define fn000000000046E820
fn000000000046E820_entry:
	rsp = fp
	// succ:  l000000000046E820
l000000000046E820:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	rsi = rdx
	call fn000000000046D320 (retsize: 8;)
	rax = 0x0000000000498190<p64>
	Mem0[rbx + 0xD8<64>:word64] = 0<64>
	Mem0[rbx + 0xE0<64>:byte] = 0<8>
	Mem0[rbx + 0xE1<64>:byte] = 0<8>
	Mem0[rbx + 0xE8<64>:word64] = 0<64>
	rdx = rsi
	Mem0[rbx:word64] = rax
	Mem0[rbx + 0xF0<64>:word64] = 0<64>
	rcx = rbx
	Mem0[rbx + 0xF8<64>:word64] = 0<64>
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	call fn000000000046E310 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046E820_exit
fn000000000046E820_exit:


// fn000000000046E8B0
// Return size: 8
define fn000000000046E8B0
fn000000000046E8B0_entry:
	rsp = fp
	// succ:  l000000000046E8B0
l000000000046E8B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn000000000046D320 (retsize: 8;)
	rax = 0x0000000000498190<p64>
	Mem0[rbx + 0xD8<64>:word64] = 0<64>
	Mem0[rbx + 0xE0<64>:byte] = 0<8>
	Mem0[rbx + 0xE1<64>:byte] = 0<8>
	Mem0[rbx + 0xE8<64>:word64] = 0<64>
	Mem0[rbx:word64] = rax
	Mem0[rbx + 0xF0<64>:word64] = 0<64>
	Mem0[rbx + 0xF8<64>:word64] = 0<64>
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046E8B0_exit
fn000000000046E8B0_exit:


// fn000000000046E920
// Return size: 0
define fn000000000046E920
fn000000000046E920_entry:
	rsp = fp
	// succ:  l000000000046E920
l000000000046E920:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000498190<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046D3D0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046E93F_thunk_fn0000000000475550
l000000000046E93F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046E920_exit
fn000000000046E920_exit:


// fn000000000046E950
// Return size: 0
define fn000000000046E950
fn000000000046E950_entry:
	rsp = fp
	// succ:  l000000000046E950
l000000000046E950:
	rax = 0x0000000000498190<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046E95A_thunk_fn000000000046D3D0
l000000000046E95A_thunk_fn000000000046D3D0:
	call fn000000000046D3D0 (retsize: 0;)
	return
	// succ:  fn000000000046E950_exit
fn000000000046E950_exit:


// fn000000000046E960
// Return size: 0
define fn000000000046E960
fn000000000046E960_entry:
	rsp = fp
	// succ:  l000000000046E960
l000000000046E960:
	rax = 0x0000000000498190<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046E96A_thunk_fn000000000046D3D0
l000000000046E96A_thunk_fn000000000046D3D0:
	call fn000000000046D3D0 (retsize: 0;)
	return
	// succ:  fn000000000046E960_exit
fn000000000046E960_exit:


// fn000000000046E970
// Return size: 8
define fn000000000046E970
fn000000000046E970_entry:
	rsp = fp
	// succ:  l000000000046E970
l000000000046E970:
	Mem0[rcx + 0x1C<64>:word32] = edx
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000046E976_thunk_fn000000000046EB40
l000000000046E976_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn000000000046E970_exit
fn000000000046E970_exit:


// fn000000000046E980
// Return size: 8
define fn000000000046E980
fn000000000046E980_entry:
	rsp = fp
	// succ:  l000000000046E980
l000000000046E980:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	v6 = Mem0[rcx + 0x20<64>:word32] | edx
	Mem0[rcx + 0x20<64>:word32] = v6
	SZO = cond(Mem0[rcx + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rcx + 0x1C<64>:word32] & edx)
	C = false
	branch Test(NE,Z) l000000000046E991
	// succ:  l000000000046E98C l000000000046E991
l000000000046E98C:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000046E980_exit
l000000000046E991:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l000000000046E99F_thunk_fn000000000046E9A0
l000000000046E99F_thunk_fn000000000046E9A0:
	call fn000000000046E9A0 (retsize: 0;)
	return
	// succ:  fn000000000046E980_exit
fn000000000046E980_exit:


// fn000000000046E9A0
// Return size: 8
define fn000000000046E9A0
fn000000000046E9A0_entry:
	rsp = fp
	// succ:  l000000000046E9A0
l000000000046E9A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = rdx
	rbx = rdx
	call fn0000000000472580 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000046EA04
	// succ:  l000000000046E9B8 l000000000046EA04
l000000000046E9B8:
	rcx = rbx
	call fn0000000000473020 (retsize: 8;)
	rcx = rbx
	Mem0[rsi + 0xF0<64>:word64] = rax
	call fn0000000000472880 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000046EA20
	// succ:  l000000000046E9D3 l000000000046EA20
l000000000046E9D3:
	rcx = rbx
	call fn0000000000473320 (retsize: 8;)
	rcx = rbx
	Mem0[rsi + 0xF8<64>:word64] = rax
	call fn00000000004727C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000046EA40
	// succ:  l000000000046E9EE l000000000046EA40
l000000000046E9EE:
	rcx = rbx
	call fn0000000000473260 (retsize: 8;)
	Mem0[rsi + 0x100<64>:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046E9A0_exit
l000000000046EA04:
	Mem0[rsi + 0xF0<64>:word64] = 0<64>
	rcx = rbx
	call fn0000000000472880 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000046E9D3
	// succ:  l000000000046EA1B l000000000046E9D3
l000000000046EA1B:
	// succ:  l000000000046EA20
l000000000046EA20:
	Mem0[rsi + 0xF8<64>:word64] = 0<64>
	rcx = rbx
	call fn00000000004727C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000046E9EE
	// succ:  l000000000046EA37 l000000000046E9EE
l000000000046EA37:
	// succ:  l000000000046EA40
l000000000046EA40:
	Mem0[rsi + 0x100<64>:word64] = 0<64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046E9A0_exit
fn000000000046E9A0_exit:


// fn000000000046EA60
// Return size: 8
define fn000000000046EA60
fn000000000046EA60_entry:
	rsp = fp
	// succ:  l000000000046EA60
l000000000046EA60:
	rax = Mem0[rcx + 0xD8<64>:word64]
	Mem0[rcx + 0xD8<64>:word64] = rdx
	return
	// succ:  fn000000000046EA60_exit
fn000000000046EA60_exit:


// fn000000000046EA70
// Return size: 8
define fn000000000046EA70
fn000000000046EA70_entry:
	rsp = fp
	// succ:  l000000000046EA70
l000000000046EA70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0xE2<64>:byte] - 0<8>)
	rbx = rcx
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	branch Test(EQ,Z) l000000000046EAA0
	// succ:  l000000000046EA84 l000000000046EAA0
l000000000046EA84:
	eax = CONVERT(Mem0[rcx + 0xE0<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 0xE0<64>:word16] = si
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046EA70_exit
l000000000046EAA0:
	rcx = Mem0[rcx + 0xF0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000046EACC
	// succ:  l000000000046EAAC l000000000046EACC
l000000000046EAAC:
	rax = Mem0[rcx:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	Mem0[rbx + 0xE2<64>:byte] = 1<8>
	Mem0[rbx + 0xE0<64>:word16] = si
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046EA70_exit
l000000000046EACC:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000046EADF_thunk_fn000000000046EAE0
l000000000046EADF_thunk_fn000000000046EAE0:
	call fn000000000046EAE0 (retsize: 0;)
	return
	// succ:  fn000000000046EA70_exit
fn000000000046EA70_exit:


// fn000000000046EAE0
// Return size: 8
define fn000000000046EAE0
fn000000000046EAE0_entry:
	rsp = fp
	// succ:  l000000000046EAE0
l000000000046EAE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	rsi = rdx
	call fn000000000046D210 (retsize: 8;)
	rdx = rbx + 0xD0<64>
	rcx = rbx
	call fn000000000046E9A0 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0xE2<64>:byte] = 0<8>
	Mem0[rbx + 0xD8<64>:word64] = 0<64>
	Mem0[rbx + 0xE0<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rsi & rsi)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rbx + 0x1C<64>:word32] = 0<32>
	Mem0[rbx + 0xE8<64>:word64] = rsi
	Mem0[rbx + 0x20<64>:word32] = eax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046EAE0_exit
fn000000000046EAE0_exit:


// fn000000000046EB40
// Return size: 8
define fn000000000046EB40
fn000000000046EB40_entry:
	rsp = fp
	// succ:  l000000000046EB40
l000000000046EB40:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0xE8<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000046EB60
	// succ:  l000000000046EB4E l000000000046EB60
l000000000046EB4E:
	SZO = cond(Mem0[rcx + 0x1C<64>:word32] & edx)
	C = false
	Mem0[rcx + 0x20<64>:word32] = edx
	branch Test(NE,Z) l000000000046EB65
	// succ:  l000000000046EB56 l000000000046EB65
l000000000046EB56:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000046EB40_exit
l000000000046EB60:
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l000000000046EB4E
	// succ:  l000000000046EB4E
l000000000046EB65:
	rcx = 0x000000000048D5B0<p64>
	call fn0000000000470B20 (retsize: 8;)
	// succ:  l000000000046EB7F_thunk_fn000000000046EB80
l000000000046EB7F_thunk_fn000000000046EB80:
	call fn000000000046EB80 (retsize: 0;)
	return
	// succ:  fn000000000046EB40_exit
fn000000000046EB40_exit:


// fn000000000046EB80
// Return size: 8
define fn000000000046EB80
fn000000000046EB80_entry:
	rsp = fp
	// succ:  l000000000046EB80
l000000000046EB80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rbx = rdx
	rsi = rsp + 0x20<64>
	rdx = rdx + 0xD0<64>
	rdi = r8
	rbp = rcx
	call fn000000000046AE80 (retsize: 8;)
	rdx = rbx
	r8 = rdi
	rcx = rsi
	call fn000000000046D1A0 (retsize: 8;)
	rcx = rsi
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rdx = rdi
	rcx = rbx
	call fn000000000046E9A0 (retsize: 8;)
	rbx = Mem0[rbx + 0xE8<64>:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000046EBFF
	// succ:  l000000000046EBD1 l000000000046EBFF
l000000000046EBD1:
	r12 = rbx + 0x38<64>
	rcx = rsi
	rdx = r12
	call fn000000000046AE80 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rdx = rdi
	rcx = rbx
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	rcx = r12
	rdx = rdi
	call fn000000000046AF60 (retsize: 8;)
	rcx = rsi
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	// succ:  l000000000046EBFF
l000000000046EBFF:
	rax = rbp
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046EB80_exit
fn000000000046EB80_exit:


// fn000000000046EC30
// Return size: 8
define fn000000000046EC30
fn000000000046EC30_entry:
	rsp = fp
	// succ:  l000000000046EC30
l000000000046EC30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rcx + 0xE8<64>:word64]
	Mem0[rcx + 0xE8<64>:word64] = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046EC30_exit
fn000000000046EC30_exit:


// fn000000000046EC60
// Return size: 8
define fn000000000046EC60
fn000000000046EC60_entry:
	rsp = fp
	// succ:  l000000000046EC60
l000000000046EC60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	SCZO = cond(rcx - rdx)
	rsi = rcx
	rbx = rdx
	branch Test(EQ,Z) l000000000046EDC2
	// succ:  l000000000046EC79 l000000000046EDC2
l000000000046EC79:
	eax = Mem0[rdx + 0xC0<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 8<32>)
	branch Test(GT,SZO) l000000000046EDD0
	// succ:  l000000000046EC88 l000000000046EDD0
l000000000046EC88:
	rdi = rcx + 0x40<64>
	r12 = rdi
	// succ:  l000000000046EC8F
l000000000046EC8F:
	rbp = Mem0[rbx + 0x28<64>:word64]
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l000000000046EC9D
	// succ:  l000000000046EC98 l000000000046EC9D
l000000000046EC98:
	__lock()
	v16 = Mem0[rbp + 0x14<64>:word32] + 1<32>
	Mem0[rbp + 0x14<64>:word32] = v16
	SCZO = cond(v16)
	// succ:  l000000000046EC9D
l000000000046EC9D:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rsi
	call fn000000000046C850 (retsize: 8;)
	rcx = Mem0[rsi + 0xC8<64>:word64]
	SCZO = cond(r12 - rcx)
	branch Test(EQ,Z) l000000000046ECC8
	// succ:  l000000000046ECB3 l000000000046ECC8
l000000000046ECB3:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000046ECBD
	// succ:  l000000000046ECB8 l000000000046ECBD
l000000000046ECB8:
	call fn0000000000475540 (retsize: 8;)
	// succ:  l000000000046ECBD
l000000000046ECBD:
	Mem0[rsi + 0xC8<64>:word64] = 0<64>
	// succ:  l000000000046ECC8
l000000000046ECC8:
	rcx = rsi
	call fn000000000046C8F0 (retsize: 8;)
	ecx = Mem0[rbx + 0xC0<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsi + 0x28<64>:word64] = rbp
	SZO = cond(ecx & ecx)
	C = false
	branch Test(LE,SZO) l000000000046ED12
	// succ:  l000000000046ECDE l000000000046ED12
l000000000046ECDE:
	edx = SLICE(rcx - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	rdx = rdx << 4<64>
	SCZO = cond(rdx)
	// succ:  l000000000046ECF0
l000000000046ECF0:
	r9 = Mem0[rbx + 0xC8<64>:word64]
	rax = Mem0[r9 + r8:word64]
	Mem0[rdi + r8:word64] = rax
	eax = Mem0[r9 + 8<64> + r8:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdi + 8<64> + r8:word32] = eax
	r8 = r8 + 0x10<64>
	SCZO = cond(r8)
	SCZO = cond(r8 - rdx)
	branch Test(NE,Z) l000000000046ECF0
	// succ:  l000000000046ED12 l000000000046ECF0
l000000000046ED12:
	eax = Mem0[rbx + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[rbx + 0xE2<64>:byte] - 0<8>)
	Mem0[rsi + 0xC8<64>:word64] = rdi
	Mem0[rsi + 0xC0<64>:word32] = ecx
	Mem0[rsi + 0x18<64>:word32] = eax
	rax = Mem0[rbx + 0x10<64>:word64]
	Mem0[rsi + 0x10<64>:word64] = rax
	rax = Mem0[rbx + 8<64>:word64]
	Mem0[rsi + 8<64>:word64] = rax
	rax = Mem0[rbx + 0xD8<64>:word64]
	Mem0[rsi + 0xD8<64>:word64] = rax
	branch Test(EQ,Z) l000000000046EE40
	// succ:  l000000000046ED50 l000000000046EE40
l000000000046ED50:
	edi = CONVERT(Mem0[rbx + 0xE0<64>:word16], word16, word32)
	rdi = CONVERT(edi, word32, uint64)
	// succ:  l000000000046ED57
l000000000046ED57:
	SCZO = cond(Mem0[rsi + 0xE2<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000046EE14
	// succ:  l000000000046ED64 l000000000046EE14
l000000000046ED64:
	Mem0[rsi + 0xE0<64>:word16] = di
	rdi = rsp + 0x20<64>
	rdx = rbx + 0xD0<64>
	rbp = rsi + 0xD0<64>
	rcx = rdi
	call fn000000000046AE80 (retsize: 8;)
	rdx = rdi
	rcx = rbp
	call fn000000000046AF60 (retsize: 8;)
	rcx = rdi
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rdx = rbp
	rcx = rsi
	call fn000000000046E9A0 (retsize: 8;)
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	call fn000000000046C850 (retsize: 8;)
	eax = Mem0[rbx + 0x1C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = Mem0[rsi + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	Mem0[rsi + 0x1C<64>:word32] = eax
	call fn000000000046EB40 (retsize: 8;)
	// succ:  l000000000046EDC2
l000000000046EDC2:
	rax = rsi
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046EC60_exit
l000000000046EDD0:
	rcx = CONVERT(eax, word32, int64)
	rcx = rcx << 4<64>
	SCZO = cond(rcx)
	call fn0000000000475560 (retsize: 8;)
	rcx = CONVERT(Mem0[rbx + 0xC0<64>:word32], word32, int64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rdi = rax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000046EE0B
	// succ:  l000000000046EDED l000000000046EE0B
l000000000046EDED:
	// succ:  l000000000046EDF0
l000000000046EDF0:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rax:word64] = 0<64>
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	SCZO = cond(rcx - rdx)
	branch Test(NE,Z) l000000000046EDF0
	// succ:  l000000000046EE0B l000000000046EDF0
l000000000046EE0B:
	r12 = rsi + 0x40<64>
	goto l000000000046EC8F
	// succ:  l000000000046EC8F
l000000000046EE14:
	rcx = Mem0[rsi + 0xF0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000046EE6C
	// succ:  l000000000046EE20 l000000000046EE6C
l000000000046EE20:
	rax = Mem0[rcx:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	Mem0[rsi + 0xE2<64>:byte] = 1<8>
	goto l000000000046ED64
	// succ:  l000000000046ED64
l000000000046EE40:
	rcx = Mem0[rbx + 0xF0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000046EE6C
	// succ:  l000000000046EE4C l000000000046EE6C
l000000000046EE4C:
	rax = Mem0[rcx:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	Mem0[rbx + 0xE2<64>:byte] = 1<8>
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	Mem0[rbx + 0xE0<64>:word16] = ax
	goto l000000000046ED57
	// succ:  l000000000046ED57
l000000000046EE6C:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l000000000046EE7F_thunk_fn000000000046EE80
l000000000046EE7F_thunk_fn000000000046EE80:
	call fn000000000046EE80 (retsize: 0;)
	return
	// succ:  fn000000000046EC60_exit
fn000000000046EC60_exit:


// fn000000000046EE80
// Return size: 8
define fn000000000046EE80
fn000000000046EE80_entry:
	rsp = fp
	// succ:  l000000000046EE80
l000000000046EE80:
	edx = edx | Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l000000000046EE83_thunk_fn000000000046EB40
l000000000046EE83_thunk_fn000000000046EB40:
	call fn000000000046EB40 (retsize: 0;)
	return
	// succ:  fn000000000046EE80_exit
fn000000000046EE80_exit:


// fn000000000046EE90
// Return size: 8
define fn000000000046EE90
fn000000000046EE90_entry:
	rsp = fp
	// succ:  l000000000046EE90
l000000000046EE90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	rsi = rdx
	call fn000000000046D320 (retsize: 8;)
	rax = 0x00000000004981B0<p64>
	Mem0[rbx + 0xD8<64>:word64] = 0<64>
	Mem0[rbx + 0xE2<64>:byte] = 0<8>
	Mem0[rbx + 0xE8<64>:word64] = 0<64>
	Mem0[rbx + 0xF0<64>:word64] = 0<64>
	rdx = rsi
	Mem0[rbx:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0xF8<64>:word64] = 0<64>
	Mem0[rbx + 0xE0<64>:word16] = ax
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	rcx = rbx
	call fn000000000046EAE0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046EE90_exit
fn000000000046EE90_exit:


// fn000000000046EF20
// Return size: 8
define fn000000000046EF20
fn000000000046EF20_entry:
	rsp = fp
	// succ:  l000000000046EF20
l000000000046EF20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn000000000046D320 (retsize: 8;)
	rax = 0x00000000004981B0<p64>
	Mem0[rbx + 0xD8<64>:word64] = 0<64>
	Mem0[rbx + 0xE2<64>:byte] = 0<8>
	Mem0[rbx + 0xE8<64>:word64] = 0<64>
	Mem0[rbx + 0xF0<64>:word64] = 0<64>
	Mem0[rbx:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0xF8<64>:word64] = 0<64>
	Mem0[rbx + 0xE0<64>:word16] = ax
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046EF20_exit
fn000000000046EF20_exit:


// fn000000000046EF90
// Return size: 8
define fn000000000046EF90
fn000000000046EF90_entry:
	rsp = fp
	// succ:  l000000000046EF90
l000000000046EF90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	rsi = rdx
	call fn000000000046D320 (retsize: 8;)
	rax = 0x00000000004981B0<p64>
	Mem0[rbx + 0xD8<64>:word64] = 0<64>
	Mem0[rbx + 0xE2<64>:byte] = 0<8>
	Mem0[rbx + 0xE8<64>:word64] = 0<64>
	Mem0[rbx + 0xF0<64>:word64] = 0<64>
	rdx = rsi
	Mem0[rbx:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0xF8<64>:word64] = 0<64>
	Mem0[rbx + 0xE0<64>:word16] = ax
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	rcx = rbx
	call fn000000000046EAE0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046EF90_exit
fn000000000046EF90_exit:


// fn000000000046F020
// Return size: 8
define fn000000000046F020
fn000000000046F020_entry:
	rsp = fp
	// succ:  l000000000046F020
l000000000046F020:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn000000000046D320 (retsize: 8;)
	rax = 0x00000000004981B0<p64>
	Mem0[rbx + 0xD8<64>:word64] = 0<64>
	Mem0[rbx + 0xE2<64>:byte] = 0<8>
	Mem0[rbx + 0xE8<64>:word64] = 0<64>
	Mem0[rbx + 0xF0<64>:word64] = 0<64>
	Mem0[rbx:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0xF8<64>:word64] = 0<64>
	Mem0[rbx + 0xE0<64>:word16] = ax
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046F020_exit
fn000000000046F020_exit:


// fn000000000046F090
// Return size: 0
define fn000000000046F090
fn000000000046F090_entry:
	rsp = fp
	// succ:  l000000000046F090
l000000000046F090:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x00000000004981B0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046D3D0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046F0AF_thunk_fn0000000000475550
l000000000046F0AF_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046F090_exit
fn000000000046F090_exit:


// fn000000000046F0C0
// Return size: 0
define fn000000000046F0C0
fn000000000046F0C0_entry:
	rsp = fp
	// succ:  l000000000046F0C0
l000000000046F0C0:
	rax = 0x00000000004981B0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046F0CA_thunk_fn000000000046D3D0
l000000000046F0CA_thunk_fn000000000046D3D0:
	call fn000000000046D3D0 (retsize: 0;)
	return
	// succ:  fn000000000046F0C0_exit
fn000000000046F0C0_exit:


// fn000000000046F0D0
// Return size: 0
define fn000000000046F0D0
fn000000000046F0D0_entry:
	rsp = fp
	// succ:  l000000000046F0D0
l000000000046F0D0:
	rax = 0x00000000004981B0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046F0DA_thunk_fn000000000046D3D0
l000000000046F0DA_thunk_fn000000000046D3D0:
	call fn000000000046D3D0 (retsize: 0;)
	return
	// succ:  fn000000000046F0D0_exit
fn000000000046F0D0_exit:


// fn000000000046F0E0
// Return size: 0
define fn000000000046F0E0
fn000000000046F0E0_entry:
	rsp = fp
	// succ:  l000000000046F0E0
l000000000046F0E0:
	// succ:  l000000000046F0E0_thunk_fn0000000000475550
l000000000046F0E0_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046F0E0_exit
fn000000000046F0E0_exit:


// fn000000000046F0F0
// Return size: 8
define fn000000000046F0F0
fn000000000046F0F0_entry:
	rsp = fp
	// succ:  l000000000046F0F0
l000000000046F0F0:
	return
	// succ:  fn000000000046F0F0_exit
fn000000000046F0F0_exit:


// fn000000000046F100
// Return size: 8
define fn000000000046F100
fn000000000046F100_entry:
	rsp = fp
	// succ:  l000000000046F100
l000000000046F100:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000498210<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046F100_exit
fn000000000046F100_exit:


// fn000000000046F120
// Return size: 8
define fn000000000046F120
fn000000000046F120_entry:
	rsp = fp
	// succ:  l000000000046F120
l000000000046F120:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000498210<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046F120_exit
fn000000000046F120_exit:


// fn000000000046F140
// Return size: 0
define fn000000000046F140
fn000000000046F140_entry:
	rsp = fp
	// succ:  l000000000046F140
l000000000046F140:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000498210<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046F15F_thunk_fn0000000000475550
l000000000046F15F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046F140_exit
fn000000000046F140_exit:


// fn000000000046F170
// Return size: 0
define fn000000000046F170
fn000000000046F170_entry:
	rsp = fp
	// succ:  l000000000046F170
l000000000046F170:
	rax = 0x0000000000498210<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046F17A_thunk_fn000000000046AD20
l000000000046F17A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046F170_exit
fn000000000046F170_exit:


// fn000000000046F180
// Return size: 0
define fn000000000046F180
fn000000000046F180_entry:
	rsp = fp
	// succ:  l000000000046F180
l000000000046F180:
	rax = 0x0000000000498210<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046F18A_thunk_fn000000000046AD20
l000000000046F18A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046F180_exit
fn000000000046F180_exit:


// fn000000000046F190
// Return size: 8
define fn000000000046F190
fn000000000046F190_entry:
	rsp = fp
	// succ:  l000000000046F190
l000000000046F190:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000498250<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046F190_exit
fn000000000046F190_exit:


// fn000000000046F1B0
// Return size: 8
define fn000000000046F1B0
fn000000000046F1B0_entry:
	rsp = fp
	// succ:  l000000000046F1B0
l000000000046F1B0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000498250<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046F1B0_exit
fn000000000046F1B0_exit:


// fn000000000046F1D0
// Return size: 0
define fn000000000046F1D0
fn000000000046F1D0_entry:
	rsp = fp
	// succ:  l000000000046F1D0
l000000000046F1D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000498250<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046F1EF_thunk_fn0000000000475550
l000000000046F1EF_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046F1D0_exit
fn000000000046F1D0_exit:


// fn000000000046F200
// Return size: 0
define fn000000000046F200
fn000000000046F200_entry:
	rsp = fp
	// succ:  l000000000046F200
l000000000046F200:
	rax = 0x0000000000498250<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046F20A_thunk_fn000000000046AD20
l000000000046F20A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046F200_exit
fn000000000046F200_exit:


// fn000000000046F210
// Return size: 0
define fn000000000046F210
fn000000000046F210_entry:
	rsp = fp
	// succ:  l000000000046F210
l000000000046F210:
	rax = 0x0000000000498250<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046F21A_thunk_fn000000000046AD20
l000000000046F21A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046F210_exit
fn000000000046F210_exit:


// fn000000000046F220
// Return size: 8
define fn000000000046F220
fn000000000046F220_entry:
	rsp = fp
	// succ:  l000000000046F220
l000000000046F220:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000498290<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046F220_exit
fn000000000046F220_exit:


// fn000000000046F240
// Return size: 8
define fn000000000046F240
fn000000000046F240_entry:
	rsp = fp
	// succ:  l000000000046F240
l000000000046F240:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x0000000000498290<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046F240_exit
fn000000000046F240_exit:


// fn000000000046F260
// Return size: 0
define fn000000000046F260
fn000000000046F260_entry:
	rsp = fp
	// succ:  l000000000046F260
l000000000046F260:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000498290<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046F27F_thunk_fn0000000000475550
l000000000046F27F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046F260_exit
fn000000000046F260_exit:


// fn000000000046F290
// Return size: 0
define fn000000000046F290
fn000000000046F290_entry:
	rsp = fp
	// succ:  l000000000046F290
l000000000046F290:
	rax = 0x0000000000498290<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046F29A_thunk_fn000000000046AD20
l000000000046F29A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046F290_exit
fn000000000046F290_exit:


// fn000000000046F2A0
// Return size: 0
define fn000000000046F2A0
fn000000000046F2A0_entry:
	rsp = fp
	// succ:  l000000000046F2A0
l000000000046F2A0:
	rax = 0x0000000000498290<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046F2AA_thunk_fn000000000046AD20
l000000000046F2AA_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046F2A0_exit
fn000000000046F2A0_exit:


// fn000000000046F2B0
// Return size: 8
define fn000000000046F2B0
fn000000000046F2B0_entry:
	rsp = fp
	// succ:  l000000000046F2B0
l000000000046F2B0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004982D0<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046F2B0_exit
fn000000000046F2B0_exit:


// fn000000000046F2D0
// Return size: 8
define fn000000000046F2D0
fn000000000046F2D0_entry:
	rsp = fp
	// succ:  l000000000046F2D0
l000000000046F2D0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rdx & rdx)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	Mem0[rcx + 8<64>:word32] = eax
	rax = 0x00000000004982D0<p64>
	Mem0[rcx:word64] = rax
	return
	// succ:  fn000000000046F2D0_exit
fn000000000046F2D0_exit:


// fn000000000046F2F0
// Return size: 0
define fn000000000046F2F0
fn000000000046F2F0_entry:
	rsp = fp
	// succ:  l000000000046F2F0
l000000000046F2F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x00000000004982D0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046AD20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000046F30F_thunk_fn0000000000475550
l000000000046F30F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046F2F0_exit
fn000000000046F2F0_exit:


// fn000000000046F320
// Return size: 0
define fn000000000046F320
fn000000000046F320_entry:
	rsp = fp
	// succ:  l000000000046F320
l000000000046F320:
	rax = 0x00000000004982D0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046F32A_thunk_fn000000000046AD20
l000000000046F32A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046F320_exit
fn000000000046F320_exit:


// fn000000000046F330
// Return size: 0
define fn000000000046F330
fn000000000046F330_entry:
	rsp = fp
	// succ:  l000000000046F330
l000000000046F330:
	rax = 0x00000000004982D0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000046F33A_thunk_fn000000000046AD20
l000000000046F33A_thunk_fn000000000046AD20:
	call fn000000000046AD20 (retsize: 0;)
	return
	// succ:  fn000000000046F330_exit
fn000000000046F330_exit:


// fn000000000046F340
// Return size: 0
define fn000000000046F340
fn000000000046F340_entry:
	rsp = fp
	// succ:  l000000000046F340
l000000000046F340:
	// succ:  l000000000046F340_thunk_fn0000000000475550
l000000000046F340_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn000000000046F340_exit
fn000000000046F340_exit:


// fn000000000046F350
// Return size: 8
define fn000000000046F350
fn000000000046F350_entry:
	rsp = fp
	// succ:  l000000000046F350
l000000000046F350:
	return
	// succ:  fn000000000046F350_exit
fn000000000046F350_exit:


// fn000000000046F360
// Return size: 8
define fn000000000046F360
fn000000000046F360_entry:
	rsp = fp
	// succ:  l000000000046F360
l000000000046F360:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x40<64>:word64] = rcx
	Mem0[rbp - 0x38<64>:word64] = rdx
	rax = Mem0[rbp - 0x38<64>:word64]
	rcx = rax
	call fn0000000000471B90 (retsize: 8;)
	ebx = CONVERT(Mem0[rax:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	rax = Mem0[rbp - 0x40<64>:word64]
	rdx = rax
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475600 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000046F39D
	// succ:  l000000000046F39B l000000000046F39D
l000000000046F39B:
	Mem0[rax:byte] = bl
	// succ:  l000000000046F39D
l000000000046F39D:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046F360_exit
fn000000000046F360_exit:


// fn000000000046F3B0
// Return size: 8
define fn000000000046F3B0
fn000000000046F3B0_entry:
	rsp = fp
	// succ:  l000000000046F3B0
l000000000046F3B0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	call fn000000000046FE70 (retsize: 8;)
	rcx = rax
	call fn0000000000423B10 (retsize: 8;)
	// succ:  l000000000046F3CF_thunk_fn000000000046F3D0
l000000000046F3CF_thunk_fn000000000046F3D0:
	call fn000000000046F3D0 (retsize: 0;)
	return
	// succ:  fn000000000046F3B0_exit
fn000000000046F3B0_exit:


// fn000000000046F3D0
// Return size: 8
define fn000000000046F3D0
fn000000000046F3D0_entry:
	rsp = fp
	// succ:  l000000000046F3D0
l000000000046F3D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046F3D0_exit
fn000000000046F3D0_exit:


// fn000000000046F3E0
// Return size: 8
define fn000000000046F3E0
fn000000000046F3E0_entry:
	rsp = fp
	// succ:  l000000000046F3E0
l000000000046F3E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000452640 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046F3E0_exit
fn000000000046F3E0_exit:


// fn000000000046F400
// Return size: 8
define fn000000000046F400
fn000000000046F400_entry:
	rsp = fp
	// succ:  l000000000046F400
l000000000046F400:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000452630 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046F400_exit
fn000000000046F400_exit:


// fn000000000046F420
// Return size: 8
define fn000000000046F420
fn000000000046F420_entry:
	rsp = fp
	// succ:  l000000000046F420
l000000000046F420:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	Mem0[rbp - 1<64>:byte] = 1<8>
	rdx = Mem0[rbp + 0x20<64>:word64]
	rax = Mem0[rbp + 0x18<64>:word64]
	r8 = rdx
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn00000000004535C0 (retsize: 8;)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046F420_exit
fn000000000046F420_exit:


// fn000000000046F460
// Return size: 8
define fn000000000046F460
fn000000000046F460_entry:
	rsp = fp
	// succ:  l000000000046F460
l000000000046F460:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	SCZO = cond(Mem0[rsp + 0x30<64>:byte] - 0<8>)
	r10d = edx
	r10 = CONVERT(r10d, word32, uint64)
	branch Test(EQ,Z) l000000000046F4A4
	// succ:  l000000000046F46B l000000000046F4A4
l000000000046F46B:
	r11 = rcx
	ebx = 0xCCCCCCCD<32>
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l000000000046F473
l000000000046F473:
	eax = r10d
	rax = CONVERT(eax, word32, uint64)
	r11 = r11 - 1<64>
	SCZO = cond(r11)
	edx_eax = ebx *u eax
	SCZO = cond(edx_eax)
	edx = edx >>u 3<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r9d = SLICE(rdx + rdx * 4<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	r9d = r9d + r9d
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	r10d = r10d - r9d
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	r10d = r10d + 4<32>
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	SZO = cond(edx & edx)
	C = false
	r9d = CONVERT(Mem0[r8 + r10:byte], byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	r10d = edx
	r10 = CONVERT(r10d, word32, uint64)
	Mem0[r11:byte] = r9b
	branch Test(NE,Z) l000000000046F473
	// succ:  l000000000046F49C l000000000046F473
l000000000046F49C:
	rax = rcx
	rax = rax - r11
	SCZO = cond(rax)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046F460_exit
l000000000046F4A4:
	eax = r9d
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0x4A<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x40<32>)
	branch Test(EQ,Z) l000000000046F4E4
	// succ:  l000000000046F4AF l000000000046F4E4
l000000000046F4AF:
	r9d = r9d & 0x4000<32>
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r11 = rcx
	SCZO = cond(r9d - 1<32>)
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx & 0xFFFFFFF0<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 0x14<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	// succ:  l000000000046F4C5
l000000000046F4C5:
	eax = r10d
	rax = CONVERT(eax, word32, uint64)
	r10d = r10d >>u 4<32>
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	r11 = r11 - 1<64>
	SCZO = cond(r11)
	eax = eax & 0xF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax + edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(r10d & r10d)
	C = false
	eax = CONVERT(Mem0[r8 + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r11:byte] = al
	branch Test(NE,Z) l000000000046F4C5
	// succ:  l000000000046F4E2 l000000000046F4C5
l000000000046F4E2:
	goto l000000000046F49C
	// succ:  l000000000046F49C
l000000000046F4E4:
	r11 = rcx
	// succ:  l000000000046F4F0
l000000000046F4F0:
	eax = r10d
	rax = CONVERT(eax, word32, uint64)
	r10d = r10d >>u 3<32>
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	r11 = r11 - 1<64>
	SCZO = cond(r11)
	eax = eax & 7<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r10d & r10d)
	C = false
	eax = CONVERT(Mem0[r8 + 4<64> + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r11:byte] = al
	branch Test(NE,Z) l000000000046F4F0
	// succ:  l000000000046F50C l000000000046F4F0
l000000000046F50C:
	goto l000000000046F49C
	// succ:  l000000000046F49C
fn000000000046F460_exit:


// fn000000000046F510
// Return size: 8
define fn000000000046F510
fn000000000046F510_entry:
	rsp = fp
	// succ:  l000000000046F510
l000000000046F510:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	SCZO = cond(Mem0[rsp + 0x30<64>:byte] - 0<8>)
	r10 = rdx
	branch Test(EQ,Z) l000000000046F561
	// succ:  l000000000046F51B l000000000046F561
l000000000046F51B:
	r11 = rcx
	rbx = 0xCCCCCCCCCCCCCCCD<64>
	// succ:  l000000000046F530
l000000000046F530:
	rax = r10
	r11 = r11 - 1<64>
	SCZO = cond(r11)
	rdx_rax = rbx *u rax
	SCZO = cond(rdx_rax)
	rdx = rdx >>u 3<64>
	SCZO = cond(rdx)
	r9 = rdx + rdx * 4<64>
	r9 = r9 + r9
	SCZO = cond(r9)
	r10 = r10 - r9
	SCZO = cond(r10)
	SZO = cond(rdx & rdx)
	C = false
	r9d = CONVERT(Mem0[r8 + 4<64> + r10:byte], byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	r10 = rdx
	Mem0[r11:byte] = r9b
	branch Test(NE,Z) l000000000046F530
	// succ:  l000000000046F559 l000000000046F530
l000000000046F559:
	rax = rcx
	rax = rax - r11
	SCZO = cond(rax)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046F510_exit
l000000000046F561:
	eax = r9d
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0x4A<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x40<32>)
	branch Test(EQ,Z) l000000000046F5AC
	// succ:  l000000000046F56C l000000000046F5AC
l000000000046F56C:
	r9d = r9d & 0x4000<32>
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r11 = rcx
	SCZO = cond(r9d - 1<32>)
	rax = rax - rax - C
	SCZO = cond(rax)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	rdx = r8 + 0x14<64> + rax
	// succ:  l000000000046F590
l000000000046F590:
	rax = r10
	r10 = r10 >>u 4<64>
	SCZO = cond(r10)
	r11 = r11 - 1<64>
	SCZO = cond(r11)
	eax = eax & 0xF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r10 & r10)
	C = false
	eax = CONVERT(Mem0[rdx + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r11:byte] = al
	branch Test(NE,Z) l000000000046F590
	// succ:  l000000000046F5AA l000000000046F590
l000000000046F5AA:
	goto l000000000046F559
	// succ:  l000000000046F559
l000000000046F5AC:
	r11 = rcx
	// succ:  l000000000046F5B0
l000000000046F5B0:
	rax = r10
	r10 = r10 >>u 3<64>
	SCZO = cond(r10)
	r11 = r11 - 1<64>
	SCZO = cond(r11)
	eax = eax & 7<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r10 & r10)
	C = false
	eax = CONVERT(Mem0[r8 + 4<64> + rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r11:byte] = al
	branch Test(NE,Z) l000000000046F5B0
	// succ:  l000000000046F5CC l000000000046F5B0
l000000000046F5CC:
	goto l000000000046F559
	// succ:  l000000000046F559
fn000000000046F510_exit:


// fn000000000046F5D0
// Return size: 8
define fn000000000046F5D0
fn000000000046F5D0_entry:
	rsp = fp
	// succ:  l000000000046F5D0
l000000000046F5D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	SCZO = cond(Mem0[rsp + 0x30<64>:byte] - 0<8>)
	r10d = edx
	r10 = CONVERT(r10d, word32, uint64)
	branch Test(EQ,Z) l000000000046F618
	// succ:  l000000000046F5DB l000000000046F618
l000000000046F5DB:
	r11 = rcx
	ebx = 0xCCCCCCCD<32>
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l000000000046F5E3
l000000000046F5E3:
	eax = r10d
	rax = CONVERT(eax, word32, uint64)
	r11 = r11 - 2<64>
	SCZO = cond(r11)
	edx_eax = ebx *u eax
	SCZO = cond(edx_eax)
	edx = edx >>u 3<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r9d = SLICE(rdx + rdx * 4<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	r9d = r9d + r9d
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	r10d = r10d - r9d
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	r10d = r10d + 4<32>
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	SZO = cond(edx & edx)
	C = false
	r9d = CONVERT(Mem0[r8 + r10 * 2<64>:word16], word16, word32)
	r9 = CONVERT(r9d, word32, uint64)
	r10d = edx
	r10 = CONVERT(r10d, word32, uint64)
	Mem0[r11:word16] = r9w
	branch Test(NE,Z) l000000000046F5E3
	// succ:  l000000000046F60D l000000000046F5E3
l000000000046F60D:
	rcx = rcx - r11
	SCZO = cond(rcx)
	rax = rcx
	rax = rax >> 1<64>
	SCZO = cond(rax)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046F5D0_exit
l000000000046F618:
	eax = r9d
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0x4A<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x40<32>)
	branch Test(EQ,Z) l000000000046F660
	// succ:  l000000000046F623 l000000000046F660
l000000000046F623:
	r9d = r9d & 0x4000<32>
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r11 = rcx
	SCZO = cond(r9d - 1<32>)
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx & 0xFFFFFFF0<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 0x14<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	// succ:  l000000000046F640
l000000000046F640:
	eax = r10d
	rax = CONVERT(eax, word32, uint64)
	r10d = r10d >>u 4<32>
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	r11 = r11 - 2<64>
	SCZO = cond(r11)
	eax = eax & 0xF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax + edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SZO = cond(r10d & r10d)
	C = false
	eax = CONVERT(Mem0[r8 + rax * 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r11:word16] = ax
	branch Test(NE,Z) l000000000046F640
	// succ:  l000000000046F65E l000000000046F640
l000000000046F65E:
	goto l000000000046F60D
	// succ:  l000000000046F60D
l000000000046F660:
	r11 = rcx
	// succ:  l000000000046F663
l000000000046F663:
	eax = r10d
	rax = CONVERT(eax, word32, uint64)
	r10d = r10d >>u 3<32>
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	r11 = r11 - 2<64>
	SCZO = cond(r11)
	eax = eax & 7<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r10d & r10d)
	C = false
	eax = CONVERT(Mem0[r8 + 8<64> + rax * 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r11:word16] = ax
	branch Test(NE,Z) l000000000046F663
	// succ:  l000000000046F680 l000000000046F663
l000000000046F680:
	goto l000000000046F60D
	// succ:  l000000000046F60D
fn000000000046F5D0_exit:


// fn000000000046F690
// Return size: 8
define fn000000000046F690
fn000000000046F690_entry:
	rsp = fp
	// succ:  l000000000046F690
l000000000046F690:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	SCZO = cond(Mem0[rsp + 0x30<64>:byte] - 0<8>)
	r10 = rdx
	branch Test(EQ,Z) l000000000046F6E5
	// succ:  l000000000046F69B l000000000046F6E5
l000000000046F69B:
	r11 = rcx
	rbx = 0xCCCCCCCCCCCCCCCD<64>
	// succ:  l000000000046F6B0
l000000000046F6B0:
	rax = r10
	r11 = r11 - 2<64>
	SCZO = cond(r11)
	rdx_rax = rbx *u rax
	SCZO = cond(rdx_rax)
	rdx = rdx >>u 3<64>
	SCZO = cond(rdx)
	r9 = rdx + rdx * 4<64>
	r9 = r9 + r9
	SCZO = cond(r9)
	r10 = r10 - r9
	SCZO = cond(r10)
	SZO = cond(rdx & rdx)
	C = false
	r9d = CONVERT(Mem0[r8 + 8<64> + r10 * 2<64>:word16], word16, word32)
	r9 = CONVERT(r9d, word32, uint64)
	r10 = rdx
	Mem0[r11:word16] = r9w
	branch Test(NE,Z) l000000000046F6B0
	// succ:  l000000000046F6DA l000000000046F6B0
l000000000046F6DA:
	rcx = rcx - r11
	SCZO = cond(rcx)
	rax = rcx
	rax = rax >> 1<64>
	SCZO = cond(rax)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046F690_exit
l000000000046F6E5:
	eax = r9d
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0x4A<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x40<32>)
	branch Test(EQ,Z) l000000000046F731
	// succ:  l000000000046F6F0 l000000000046F731
l000000000046F6F0:
	r9d = r9d & 0x4000<32>
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r11 = rcx
	SCZO = cond(r9d - 1<32>)
	rdx = rdx - rdx - C
	SCZO = cond(rdx)
	rdx = rdx & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rdx)
	C = false
	rdx = rdx + 0x14<64>
	SCZO = cond(rdx)
	// succ:  l000000000046F710
l000000000046F710:
	rax = r10
	r10 = r10 >>u 4<64>
	SCZO = cond(r10)
	r11 = r11 - 2<64>
	SCZO = cond(r11)
	eax = eax & 0xF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rax = rax + rdx
	SCZO = cond(rax)
	SZO = cond(r10 & r10)
	C = false
	eax = CONVERT(Mem0[r8 + rax * 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r11:word16] = ax
	branch Test(NE,Z) l000000000046F710
	// succ:  l000000000046F72F l000000000046F710
l000000000046F72F:
	goto l000000000046F6DA
	// succ:  l000000000046F6DA
l000000000046F731:
	r11 = rcx
	// succ:  l000000000046F734
l000000000046F734:
	rax = r10
	r10 = r10 >>u 3<64>
	SCZO = cond(r10)
	r11 = r11 - 2<64>
	SCZO = cond(r11)
	eax = eax & 7<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(r10 & r10)
	C = false
	eax = CONVERT(Mem0[r8 + 8<64> + rax * 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r11:word16] = ax
	branch Test(NE,Z) l000000000046F734
	// succ:  l000000000046F751 l000000000046F734
l000000000046F751:
	goto l000000000046F6DA
	// succ:  l000000000046F6DA
fn000000000046F690_exit:


// fn000000000046F760
// Return size: 8
define fn000000000046F760
fn000000000046F760_entry:
	rsp = fp
	// succ:  l000000000046F760
l000000000046F760:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[0x00000000004915F0<p64>:word64]
	rax = Mem0[rbx:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000046F780
	// succ:  l000000000046F774 l000000000046F780
l000000000046F774:
	rax = Mem0[rax:word64]
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046F760_exit
l000000000046F780:
	call fn0000000000423C20 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	Mem0[rbx:word64] = rax
	rax = Mem0[rax:word64]
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046F760_exit
fn000000000046F760_exit:


// fn000000000046F7A0
// Return size: 8
define fn000000000046F7A0
fn000000000046F7A0_entry:
	rsp = fp
	// succ:  l000000000046F7A0
l000000000046F7A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = Mem0[0x00000000004915F0<p64>:word64]
	rbx = rcx
	rdx = Mem0[rsi:word64]
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l000000000046F7C5
	// succ:  l000000000046F7B8 l000000000046F7C5
l000000000046F7B8:
	rax = rbx
	v12 = Mem0[rdx:word64]
	Mem0[rdx:word64] = rax
	rax = v12
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046F7A0_exit
l000000000046F7C5:
	call fn0000000000423C20 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rdx = rax
	Mem0[rsi:word64] = rax
	goto l000000000046F7B8
	// succ:  l000000000046F7B8
fn000000000046F7A0_exit:


// fn000000000046F7F0
// Return size: 8
define fn000000000046F7F0
fn000000000046F7F0_entry:
	rsp = fp
	// succ:  l000000000046F7F0
l000000000046F7F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rbp = Mem0[rsp + 0x48<64>:word64]
	r10 = Mem0[rsp + 0x50<64>:word64]
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	rax = rcx
	rcx = CONVERT(Mem0[r8:byte], byte, int64)
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r9 = r9 - 1<64>
	SCZO = cond(r9)
	r11 = rcx
	// succ:  l000000000046F810
l000000000046F810:
	rdi = r10
	rdi = rdi - rbp
	SCZO = cond(rdi)
	SCZO = cond(rdi - rcx)
	branch Test(LE,SZO) l000000000046F848
	// succ:  l000000000046F81B l000000000046F848
l000000000046F81B:
	edi = SLICE(r11 - 1<64>, word32, 0)
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(dil - 0x7D<8>)
	branch Test(UGT,CZ) l000000000046F848
	// succ:  l000000000046F825 l000000000046F848
l000000000046F825:
	r10 = r10 - rcx
	SCZO = cond(r10)
	SCZO = cond(rbx - r9)
	branch Test(UGE,C) l000000000046F930
	// succ:  l000000000046F831 l000000000046F930
l000000000046F831:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	rdi = r10
	rcx = CONVERT(Mem0[r8 + rbx:byte], byte, int64)
	rdi = rdi - rbp
	SCZO = cond(rdi)
	SCZO = cond(rdi - rcx)
	r11 = rcx
	branch Test(GT,SZO) l000000000046F81B
	// succ:  l000000000046F848 l000000000046F81B
l000000000046F848:
	SCZO = cond(rbp - r10)
	rdi = r8 + rbx
	branch Test(EQ,Z) l000000000046F87F
	// succ:  l000000000046F851 l000000000046F87F
l000000000046F851:
	rcx = rbp
	r9 = rax
	// succ:  l000000000046F860
l000000000046F860:
	rcx = rcx + 1<64>
	SCZO = cond(rcx)
	r11d = CONVERT(Mem0[rcx - 1<64>:byte], byte, word32)
	r11 = CONVERT(r11d, word32, uint64)
	r9 = r9 + 1<64>
	SCZO = cond(r9)
	SCZO = cond(rcx - r10)
	Mem0[r9 - 1<64>:byte] = r11b
	branch Test(NE,Z) l000000000046F860
	// succ:  l000000000046F876 l000000000046F860
l000000000046F876:
	rcx = r10
	rcx = rcx - rbp
	SCZO = cond(rcx)
	rax = rax + rcx
	SCZO = cond(rax)
	// succ:  l000000000046F87F
l000000000046F87F:
	rsi = rsi - 1<64>
	SCZO = cond(rsi)
	SCZO = cond(rsi - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l000000000046F8D7
	// succ:  l000000000046F889 l000000000046F8D7
l000000000046F889:
	// succ:  l000000000046F890
l000000000046F890:
	Mem0[rax:byte] = dl
	r11d = CONVERT(Mem0[rdi:byte], byte, word32)
	r11 = CONVERT(r11d, word32, uint64)
	rbp = rax + 1<64>
	SZO = cond(r11b & r11b)
	C = false
	branch Test(LE,SZO) l000000000046F93E
	// succ:  l000000000046F8A3 l000000000046F93E
l000000000046F8A3:
	r11d = r11d - 1<32>
	r11 = CONVERT(r11d, word32, uint64)
	SCZO = cond(r11d)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r11d = CONVERT(r11b, byte, word32)
	r11 = CONVERT(r11d, word32, uint64)
	r11 = r11 + 1<64>
	SCZO = cond(r11)
	// succ:  l000000000046F8B2
l000000000046F8B2:
	ecx = CONVERT(Mem0[r10 + r9:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rax + 1<64> + r9:byte] = cl
	r9 = r9 + 1<64>
	SCZO = cond(r9)
	SCZO = cond(r9 - r11)
	branch Test(NE,Z) l000000000046F8B2
	// succ:  l000000000046F8C5 l000000000046F8B2
l000000000046F8C5:
	rsi = rsi - 1<64>
	SCZO = cond(rsi)
	r10 = r10 + r9
	SCZO = cond(r10)
	rax = rbp + 0<64> + r9
	SCZO = cond(rsi - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l000000000046F890
	// succ:  l000000000046F8D7 l000000000046F890
l000000000046F8D7:
	rbx = rbx - 1<64>
	SCZO = cond(rbx)
	SCZO = cond(rbx - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l000000000046F924
	// succ:  l000000000046F8E1 l000000000046F924
l000000000046F8E1:
	Mem0[rax:byte] = dl
	r11d = CONVERT(Mem0[r8 + rbx:byte], byte, word32)
	r11 = CONVERT(r11d, word32, uint64)
	rsi = rax + 1<64>
	SZO = cond(r11b & r11b)
	C = false
	branch Test(LE,SZO) l000000000046F939
	// succ:  l000000000046F8F1 l000000000046F939
l000000000046F8F1:
	r11d = r11d - 1<32>
	r11 = CONVERT(r11d, word32, uint64)
	SCZO = cond(r11d)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r11d = CONVERT(r11b, byte, word32)
	r11 = CONVERT(r11d, word32, uint64)
	r11 = r11 + 1<64>
	SCZO = cond(r11)
	// succ:  l000000000046F900
l000000000046F900:
	ecx = CONVERT(Mem0[r10 + r9:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rax + 1<64> + r9:byte] = cl
	r9 = r9 + 1<64>
	SCZO = cond(r9)
	SCZO = cond(r9 - r11)
	branch Test(NE,Z) l000000000046F900
	// succ:  l000000000046F913 l000000000046F900
l000000000046F913:
	rbx = rbx - 1<64>
	SCZO = cond(rbx)
	r10 = r10 + r9
	SCZO = cond(r10)
	rax = rsi + r9
	SCZO = cond(rbx - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l000000000046F8E1
	// succ:  l000000000046F924 l000000000046F8E1
l000000000046F924:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046F7F0_exit
l000000000046F930:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	goto l000000000046F810
	// succ:  l000000000046F810
l000000000046F939:
	rax = rsi
	goto l000000000046F8D7
	// succ:  l000000000046F8D7
l000000000046F93E:
	rax = rbp
	goto l000000000046F87F
	// succ:  l000000000046F87F
fn000000000046F7F0_exit:


// fn000000000046F950
// Return size: 8
define fn000000000046F950
fn000000000046F950_entry:
	rsp = fp
	// succ:  l000000000046F950
l000000000046F950:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	r11 = CONVERT(Mem0[r8:byte], byte, int64)
	rbp = Mem0[rsp + 0x48<64>:word64]
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	r10 = Mem0[rsp + 0x50<64>:word64]
	rax = rcx
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r9 = r9 - 1<64>
	SCZO = cond(r9)
	rdi = r11
	// succ:  l000000000046F970
l000000000046F970:
	rcx = r10
	rcx = rcx - rbp
	SCZO = cond(rcx)
	rcx = rcx >> 1<64>
	SCZO = cond(rcx)
	SCZO = cond(rcx - r11)
	branch Test(LE,SZO) l000000000046F9B0
	// succ:  l000000000046F97E l000000000046F9B0
l000000000046F97E:
	ecx = SLICE(rdi - 1<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 0x7D<8>)
	branch Test(UGT,CZ) l000000000046F9B0
	// succ:  l000000000046F986 l000000000046F9B0
l000000000046F986:
	rcx = r11 + r11
	r10 = r10 - rcx
	SCZO = cond(r10)
	SCZO = cond(rbx - r9)
	branch Test(UGE,C) l000000000046FAA0
	// succ:  l000000000046F996 l000000000046FAA0
l000000000046F996:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	rcx = r10
	r11 = CONVERT(Mem0[r8 + rbx:byte], byte, int64)
	rcx = rcx - rbp
	SCZO = cond(rcx)
	rcx = rcx >> 1<64>
	SCZO = cond(rcx)
	SCZO = cond(rcx - r11)
	rdi = r11
	branch Test(GT,SZO) l000000000046F97E
	// succ:  l000000000046F9B0 l000000000046F97E
l000000000046F9B0:
	SCZO = cond(rbp - r10)
	rdi = r8 + rbx
	branch Test(EQ,Z) l000000000046F9E9
	// succ:  l000000000046F9B9 l000000000046F9E9
l000000000046F9B9:
	rcx = rbp
	r9 = rax
	// succ:  l000000000046F9C0
l000000000046F9C0:
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	r11d = CONVERT(Mem0[rcx - 2<64>:word16], word16, word32)
	r11 = CONVERT(r11d, word32, uint64)
	r9 = r9 + 2<64>
	SCZO = cond(r9)
	SCZO = cond(rcx - r10)
	Mem0[r9 - 2<64>:word16] = r11w
	branch Test(NE,Z) l000000000046F9C0
	// succ:  l000000000046F9D7 l000000000046F9C0
l000000000046F9D7:
	rbp = rbp + 2<64>
	SCZO = cond(rbp)
	rcx = r10
	rcx = rcx - rbp
	SCZO = cond(rcx)
	rcx = rcx >>u 1<64>
	SCZO = cond(rcx)
	rax = rax + 2<64> + rcx * 2<64>
	// succ:  l000000000046F9E9
l000000000046F9E9:
	rsi = rsi - 1<64>
	SCZO = cond(rsi)
	SCZO = cond(rsi - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l000000000046FA49
	// succ:  l000000000046F9F3 l000000000046FA49
l000000000046F9F3:
	Mem0[rax:word16] = dx
	r11d = CONVERT(Mem0[rdi:byte], byte, word32)
	r11 = CONVERT(r11d, word32, uint64)
	rbp = rax + 2<64>
	SZO = cond(r11b & r11b)
	C = false
	branch Test(LE,SZO) l000000000046FAAE
	// succ:  l000000000046FA07 l000000000046FAAE
l000000000046FA07:
	r11d = r11d - 1<32>
	r11 = CONVERT(r11d, word32, uint64)
	SCZO = cond(r11d)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r11d = CONVERT(r11b, byte, word32)
	r11 = CONVERT(r11d, word32, uint64)
	r11 = r11 + 1<64>
	SCZO = cond(r11)
	// succ:  l000000000046FA20
l000000000046FA20:
	ecx = CONVERT(Mem0[r10 + r9 * 2<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rax + 2<64> + r9 * 2<64>:word16] = cx
	r9 = r9 + 1<64>
	SCZO = cond(r9)
	SCZO = cond(r9 - r11)
	branch Test(NE,Z) l000000000046FA20
	// succ:  l000000000046FA34 l000000000046FA20
l000000000046FA34:
	r9 = r9 + r9
	SCZO = cond(r9)
	rsi = rsi - 1<64>
	SCZO = cond(rsi)
	r10 = r10 + r9
	SCZO = cond(r10)
	SCZO = cond(rsi - 0xFFFFFFFFFFFFFFFF<64>)
	rax = rbp + 0<64> + r9
	branch Test(NE,Z) l000000000046F9F3
	// succ:  l000000000046FA49 l000000000046F9F3
l000000000046FA49:
	rbx = rbx - 1<64>
	SCZO = cond(rbx)
	SCZO = cond(rbx - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l000000000046FA9B
	// succ:  l000000000046FA53 l000000000046FA9B
l000000000046FA53:
	Mem0[rax:word16] = dx
	r11d = CONVERT(Mem0[r8 + rbx:byte], byte, word32)
	r11 = CONVERT(r11d, word32, uint64)
	rsi = rax + 2<64>
	SZO = cond(r11b & r11b)
	C = false
	branch Test(LE,SZO) l000000000046FAA9
	// succ:  l000000000046FA64 l000000000046FAA9
l000000000046FA64:
	r11d = r11d - 1<32>
	r11 = CONVERT(r11d, word32, uint64)
	SCZO = cond(r11d)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r11d = CONVERT(r11b, byte, word32)
	r11 = CONVERT(r11d, word32, uint64)
	r11 = r11 + 1<64>
	SCZO = cond(r11)
	// succ:  l000000000046FA73
l000000000046FA73:
	ecx = CONVERT(Mem0[r10 + r9 * 2<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rax + 2<64> + r9 * 2<64>:word16] = cx
	r9 = r9 + 1<64>
	SCZO = cond(r9)
	SCZO = cond(r9 - r11)
	branch Test(NE,Z) l000000000046FA73
	// succ:  l000000000046FA87 l000000000046FA73
l000000000046FA87:
	r9 = r9 + r9
	SCZO = cond(r9)
	rbx = rbx - 1<64>
	SCZO = cond(rbx)
	r10 = r10 + r9
	SCZO = cond(r10)
	SCZO = cond(rbx - 0xFFFFFFFFFFFFFFFF<64>)
	rax = rsi + r9
	branch Test(NE,Z) l000000000046FA53
	// succ:  l000000000046FA9B l000000000046FA53
l000000000046FA9B:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046F950_exit
l000000000046FAA0:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	goto l000000000046F970
	// succ:  l000000000046F970
l000000000046FAA9:
	rax = rsi
	goto l000000000046FA49
	// succ:  l000000000046FA49
l000000000046FAAE:
	rax = rbp
	goto l000000000046F9E9
	// succ:  l000000000046F9E9
fn000000000046F950_exit:


// fn000000000046FAC0
// Return size: 8
define fn000000000046FAC0
fn000000000046FAC0_entry:
	rsp = fp
	// succ:  l000000000046FAC0
l000000000046FAC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rdi = rcx
	r12 = rdx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r13 = r8
	rax = setlocale(rcx, rdx)
	rcx = rax
	rbp = rax
	eax = strlen(rcx)
	rbx = rax + 1<64>
	rcx = rbx
	call fn0000000000475560 (retsize: 8;)
	r8 = rbx
	rdx = rbp
	rcx = rax
	rsi = rax
	rax = memcpy(rcx, rdx, r8)
	rdx = 0x000000000048E1C0<p64>
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rax = setlocale(rcx, rdx)
	rdx = rsp + 0x28<64>
	rcx = rdi
	call fn0000000000411FC0 (retsize: 8;)
	rax = Mem0[rsp + 0x28<64>:word64]
	Mem0[r12:real64] = SLICE(xmm0, real64, 0)
	SCZO = cond(rax - rdi)
	branch Test(EQ,Z) l000000000046FB36
	// succ:  l000000000046FB31 l000000000046FB36
l000000000046FB31:
	SCZO = cond(Mem0[rax:byte] - 0<8>)
	branch Test(EQ,Z) l000000000046FB70
	// succ:  l000000000046FB36 l000000000046FB70
l000000000046FB36:
	Mem0[r12:word64] = 0<64>
	Mem0[r13 + 0<64>:word32] = 4<32>
	rdx = rsi
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rax = setlocale(rcx, rdx)
	rcx = rsi
	call fn0000000000475540 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046FAC0_exit
l000000000046FB70:
	CZP = cond(SLICE(xmm0, real64, 0) - Mem0[0x000000000048E240<p64>:real64])
	O = false
	S = false
	branch Test(UGT,CZ) l000000000046FB88
	// succ:  l000000000046FB7A l000000000046FB88
l000000000046FB7A:
l000000000046FB88:
	xmm1 = 0<128>
fn000000000046FAC0_exit:


// fn000000000046FBE0
// Return size: 8
define fn000000000046FBE0
fn000000000046FBE0_entry:
	rsp = fp
	// succ:  l000000000046FBE0
l000000000046FBE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rdi = rcx
	r12 = rdx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r13 = r8
	rax = setlocale(rcx, rdx)
	rcx = rax
	rbp = rax
	eax = strlen(rcx)
	rbx = rax + 1<64>
	rcx = rbx
	call fn0000000000475560 (retsize: 8;)
	r8 = rbx
	rdx = rbp
	rcx = rax
	rsi = rax
	rax = memcpy(rcx, rdx, r8)
	rdx = 0x000000000048E1C0<p64>
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rax = setlocale(rcx, rdx)
	rcx = rsp + 0x20<64>
	r8 = rsp + 0x38<64>
	rdx = rdi
	call fn0000000000412A50 (retsize: 8;)
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[rsp + 0x20<64>:real80], real80, real64)
	rax = Mem0[rsp + 0x38<64>:word64]
	SCZO = cond(rax - rdi)
	v20 = ST[Top:real64]
	Top = Top - 1<i8>
	ST[Top:real64] = v20
	Mem0[r12:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	branch Test(EQ,Z) l000000000046FC63
	// succ:  l000000000046FC5A l000000000046FC63
l000000000046FC5A:
	SCZO = cond(Mem0[rax:byte] - 0<8>)
	branch Test(EQ,Z) l000000000046FCA0
	// succ:  l000000000046FC5F l000000000046FCA0
l000000000046FC5F:
	ST[Top:real64] = ST[Top:real64]
	Top = Top + 1<i8>
	goto l000000000046FC65
	// succ:  l000000000046FC65
l000000000046FC63:
	ST[Top:real64] = ST[Top:real64]
	Top = Top + 1<i8>
	// succ:  l000000000046FC65
l000000000046FC65:
	Top = Top - 1<i8>
	ST[Top:real64] = 0.0
	Mem0[r12:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	Mem0[r13 + 0<64>:word32] = 4<32>
	goto l000000000046FC80
	// succ:  l000000000046FC80
l000000000046FC75:
	ST[Top:real64] = ST[Top:real64]
	Top = Top + 1<i8>
	// succ:  l000000000046FC80
l000000000046FC80:
	rdx = rsi
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rax = setlocale(rcx, rdx)
	rcx = rsi
	call fn0000000000475540 (retsize: 8;)
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046FBE0_exit
l000000000046FCA0:
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[0x000000000048E250<p64>:real80], real80, real64)
	v22 = ST[Top:real64]
	ST[Top:real64] = ST[Top + 1<i8>:real64]
	ST[Top + 1<i8>:real64] = v22
	CZP = cond(ST[Top:real64] - ST[Top + 1<i8>:real64])
	O = false
	S = false
	ST[Top + 1<i8>:real64] = ST[Top:real64]
	Top = Top + 1<i8>
	branch Test(UGT,CZ) l000000000046FCB8
	// succ:  l000000000046FCAE l000000000046FCB8
l000000000046FCAE:
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[0x000000000048E260<p64>:real80], real80, real64)
	CZP = cond(ST[Top:real64] - ST[Top + 1<i8>:real64])
	O = false
	S = false
	Top = Top + 1<i8>
	branch Test(ULE,CZ) l000000000046FC75
	// succ:  l000000000046FCB8 l000000000046FC75
l000000000046FCB8:
	Top = Top - 1<i8>
	ST[Top:real64] = 0.0
	v27 = ST[Top:real64]
	ST[Top:real64] = ST[Top + 1<i8>:real64]
	ST[Top + 1<i8>:real64] = v27
	CZP = cond(ST[Top:real64] - ST[Top + 1<i8>:real64])
	O = false
	S = false
	Top = Top + 1<i8>
	ST[Top:real64] = ST[Top:real64]
	Top = Top + 1<i8>
	branch Test(ULE,CZ) l000000000046FCE0
	// succ:  l000000000046FCC2 l000000000046FCE0
l000000000046FCC2:
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[0x000000000048E250<p64>:real80], real80, real64)
	Mem0[r12:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	// succ:  l000000000046FCCC
l000000000046FCCC:
	Mem0[r13 + 0<64>:word32] = 4<32>
	goto l000000000046FC80
	// succ:  l000000000046FC80
l000000000046FCE0:
	Top = Top - 1<i8>
	ST[Top:real64] = CONVERT(Mem0[0x000000000048E260<p64>:real80], real80, real64)
	Mem0[r12:real80] = CONVERT(ST[Top:real64], real64, real80)
	Top = Top + 1<i8>
	goto l000000000046FCCC
	// succ:  l000000000046FCCC
fn000000000046FBE0_exit:


// fn000000000046FD00
// Return size: 8
define fn000000000046FD00
fn000000000046FD00_entry:
	rsp = fp
	// succ:  l000000000046FD00
l000000000046FD00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rdi = rcx
	r12 = rdx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r13 = r8
	rax = setlocale(rcx, rdx)
	rcx = rax
	rbp = rax
	eax = strlen(rcx)
	rbx = rax + 1<64>
	rcx = rbx
	call fn0000000000475560 (retsize: 8;)
	r8 = rbx
	rdx = rbp
	rcx = rax
	rsi = rax
	rax = memcpy(rcx, rdx, r8)
	rdx = 0x000000000048E1C0<p64>
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rax = setlocale(rcx, rdx)
	rdx = rsp + 0x28<64>
	rcx = rdi
	call fn0000000000411F10 (retsize: 8;)
	rax = Mem0[rsp + 0x28<64>:word64]
	Mem0[r12:real32] = SLICE(xmm0, real32, 0)
	SCZO = cond(rax - rdi)
	branch Test(EQ,Z) l000000000046FD76
	// succ:  l000000000046FD71 l000000000046FD76
l000000000046FD71:
	SCZO = cond(Mem0[rax:byte] - 0<8>)
	branch Test(EQ,Z) l000000000046FDB0
	// succ:  l000000000046FD76 l000000000046FDB0
l000000000046FD76:
	Mem0[r12:word32] = 0<32>
	Mem0[r13 + 0<64>:word32] = 4<32>
	rdx = rsi
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rax = setlocale(rcx, rdx)
	rcx = rsi
	call fn0000000000475540 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046FD00_exit
l000000000046FDB0:
	CZP = cond(SLICE(xmm0, real32, 0) - Mem0[0x000000000048E238<p64>:real32])
	O = false
	S = false
	branch Test(UGT,CZ) l000000000046FDC6
	// succ:  l000000000046FDB9 l000000000046FDC6
l000000000046FDB9:
l000000000046FDC6:
	xmm1 = 0<128>
fn000000000046FD00_exit:


// fn000000000046FE10
// Return size: 8
define fn000000000046FE10
fn000000000046FE10_entry:
	rsp = fp
	// succ:  l000000000046FE10
l000000000046FE10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x20<64>:word64] = rcx
	Mem0[rbp + 0x28<64>:word64] = rdx
	Mem0[rbp + 0x30<64>:word64] = r8
	rax = Mem0[rbp + 0x30<64>:word64]
	rcx = rax
	call fn000000000046F400 (retsize: 8;)
	rsi = rax
	rax = Mem0[rbp + 0x28<64>:word64]
	rcx = rax
	call fn000000000046F400 (retsize: 8;)
	rbx = rax
	rcx = Mem0[rbp + 0x20<64>:word64]
	call fn000000000046F400 (retsize: 8;)
	r8 = rsi
	rdx = rbx
	rcx = rax
	call fn000000000046F420 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046FE10_exit
fn000000000046FE10_exit:


// fn000000000046FE70
// Return size: 8
define fn000000000046FE70
fn000000000046FE70_entry:
	rsp = fp
	// succ:  l000000000046FE70
l000000000046FE70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[0x0000000000491600<p64>:word64]
	rax = Mem0[rbx:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000046FE90
	// succ:  l000000000046FE84 l000000000046FE90
l000000000046FE84:
	rax = Mem0[rax:word64]
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046FE70_exit
l000000000046FE90:
	call fn0000000000423C40 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	Mem0[rbx:word64] = rax
	rax = Mem0[rax:word64]
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046FE70_exit
fn000000000046FE70_exit:


// fn000000000046FEB0
// Return size: 8
define fn000000000046FEB0
fn000000000046FEB0_entry:
	rsp = fp
	// succ:  l000000000046FEB0
l000000000046FEB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = Mem0[0x0000000000491600<p64>:word64]
	rbx = rcx
	rdx = Mem0[rsi:word64]
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l000000000046FED5
	// succ:  l000000000046FEC8 l000000000046FED5
l000000000046FEC8:
	rax = rbx
	v12 = Mem0[rdx:word64]
	Mem0[rdx:word64] = rax
	rax = v12
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046FEB0_exit
l000000000046FED5:
	call fn0000000000423C40 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rdx = rax
	Mem0[rsi:word64] = rax
	goto l000000000046FEC8
	// succ:  l000000000046FEC8
fn000000000046FEB0_exit:


// fn000000000046FF00
// Return size: 8
define fn000000000046FF00
fn000000000046FF00_entry:
	rsp = fp
	// succ:  l000000000046FF00
l000000000046FF00:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[0x0000000000477340<p64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000046FF20
	// succ:  l000000000046FF0D l000000000046FF20
l000000000046FF0D:
	rax = 0x000000000048C080<p64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000046FF00_exit
l000000000046FF20:
	rcx = 0x0000000000477340<p64>
	call fn0000000000475E80 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000046FF0D
	// succ:  l000000000046FF30 l000000000046FF0D
l000000000046FF30:
	rcx = 0x0000000000477340<p64>
	call fn0000000000475F80 (retsize: 8;)
	rcx = 0x0000000000476370<p64>
	call fn0000000000410BF0 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = 0x000000000048C080<p64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000046FF00_exit
fn000000000046FF00_exit:


// fn000000000046FF60
// Return size: 8
define fn000000000046FF60
fn000000000046FF60_entry:
	rsp = fp
	// succ:  l000000000046FF60
l000000000046FF60:
	rax = Mem0[0x0000000000489940<p64>:word64]
	return
	// succ:  fn000000000046FF60_exit
fn000000000046FF60_exit:


// fn000000000046FF70
// Return size: 8
define fn000000000046FF70
fn000000000046FF70_entry:
	rsp = fp
	// succ:  l000000000046FF70
l000000000046FF70:
	rax = rcx
	v5 = Mem0[0x0000000000489940<p64>:word64]
	Mem0[0x0000000000489940<p64>:word64] = rax
	rax = v5
	return
	// succ:  fn000000000046FF70_exit
fn000000000046FF70_exit:


// fn000000000046FF80
// Return size: 8
define fn000000000046FF80
fn000000000046FF80_entry:
	rsp = fp
	// succ:  l000000000046FF80
l000000000046FF80:
	rax = 0x000000000048AA70<p64>
	return
	// succ:  fn000000000046FF80_exit
fn000000000046FF80_exit:


// fn000000000046FF90
// Return size: 8
define fn000000000046FF90
fn000000000046FF90_entry:
	rsp = fp
	// succ:  l000000000046FF90
l000000000046FF90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	r14 = 0x000000000048DB5A<p64>
	ecx = 4<32>
	rcx = CONVERT(ecx, word32, uint64)
	r12 = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ebx = r8d
	rbx = CONVERT(ebx, word32, uint64)
	r13 = r9
	rdi = r14
	rax = setlocale(rcx, rdx)
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rax
	rbp = rax
	// succ:  l000000000046FFC8
l000000000046FFC8:
	branch rcx == 0<64> l000000000046FFCA
	// succ:  l000000000046FFC8_1 l000000000046FFCA
l000000000046FFC8_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000046FFC8
	// succ:  l000000000046FFCA l000000000046FFC8
l000000000046FFCA:
	branch Test(NE,Z) l0000000000470000
	// succ:  l000000000046FFCC l0000000000470000
l000000000046FFCC:
	r9 = rsp + 0x90<64>
	rdx = CONVERT(ebx, word32, int64)
	r8 = r13
	rcx = r12
	Mem0[rsp + 0x28<64>:word64] = r9
	call fn0000000000411E90 (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l000000000046FFE9
l000000000046FFE9:
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000046FF90_exit
l0000000000470000:
	rcx = rax
	eax = strlen(rcx)
	rsi = rax + 1<64>
	rcx = rsi
	call fn0000000000475560 (retsize: 8;)
	r8 = rsi
	rdx = rbp
	rcx = rax
	rdi = rax
	rax = memcpy(rcx, rdx, r8)
	rdx = r14
	ecx = 4<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = setlocale(rcx, rdx)
	r9 = rsp + 0x90<64>
	rdx = CONVERT(ebx, word32, int64)
	r8 = r13
	rcx = r12
	Mem0[rsp + 0x28<64>:word64] = r9
	call fn0000000000411E90 (retsize: 8;)
	rdx = rdi
	ecx = 4<32>
	rcx = CONVERT(ecx, word32, uint64)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	rax = setlocale(rcx, rdx)
	rcx = rdi
	call fn0000000000475540 (retsize: 8;)
	goto l000000000046FFE9
	// succ:  l000000000046FFE9
fn000000000046FF90_exit:


// fn0000000000470070
// Return size: 8
define fn0000000000470070
fn0000000000470070_entry:
	rsp = fp
	// succ:  l0000000000470070
l0000000000470070:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	r13 = rsp + 0x30<64>
	rbx = rcx
	r15 = rdx
	rdx = rcx
	r12 = r8
	rcx = r13
	call fn000000000044ED50 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x30<64>:byte] - 0<8>)
	branch Test(EQ,Z) l00000000004700ED
	// succ:  l00000000004700A0 l00000000004700ED
l00000000004700A0:
	rax = Mem0[rbx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rbp = rbx + rax
	rsi = Mem0[rbp + 0x10<64>:word64]
	SCZO = cond(rsi - r12)
	branch Test(LE,SZO) l0000000000470140
	// succ:  l00000000004700B8 l0000000000470140
l00000000004700B8:
	edx = Mem0[rbp + 0x18<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xB0<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(edx - 0x20<32>)
	rdx = rbp
	Mem0[rsp + 0x2F<64>:byte] = CONVERT(Test(EQ,Z), bool, int8)
	edi = CONVERT(Mem0[rsp + 0x2F<64>:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(dil & dil)
	C = false
	branch Test(EQ,Z) l00000000004701D2
	// succ:  l00000000004700DA l00000000004701D2
l00000000004700DA:
	ecx = Mem0[rdx + 0x20<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0000000000470180
	// succ:  l00000000004700E5 l0000000000470180
l00000000004700E5:
	Mem0[rdx + 0x10<64>:word64] = 0<64>
	// succ:  l00000000004700ED
l00000000004700ED:
	rax = Mem0[rsp + 0x38<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rsi = rax
	branch Test(EQ,Z) l0000000000470126
	// succ:  l0000000000470102 l0000000000470126
l0000000000470102:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000470126
	// succ:  l000000000047010B l0000000000470126
l000000000047010B:
	rcx = Mem0[rsi + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000470126
	// succ:  l0000000000470117 l0000000000470126
l0000000000470117:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000470260
	// succ:  l0000000000470126 l0000000000470260
l0000000000470126:
	rax = rbx
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000470070_exit
l0000000000470140:
	rcx = Mem0[rbp + 0xE8<64>:word64]
	r8 = r12
	rdx = r15
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(r12 - rax)
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000470170
	// succ:  l000000000047015B l0000000000470170
l000000000047015B:
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	// succ:  l000000000047016D
l000000000047016D:
	rax = Mem0[rbx:word64]
	// succ:  l0000000000470170
l0000000000470170:
	rdx = rbx
	rdx = rdx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx)
	goto l00000000004700E5
	// succ:  l00000000004700E5
l0000000000470180:
	rcx = Mem0[rdx + 0xE8<64>:word64]
	r8 = r12
	rdx = r15
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(r12 - rax)
	branch Test(EQ,Z) l00000000004701AD
	// succ:  l0000000000470198 l00000000004701AD
l0000000000470198:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	// succ:  l00000000004701AD
l00000000004701AD:
	SCZO = cond(Mem0[rsp + 0x2F<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000047016D
	// succ:  l00000000004701B4 l000000000047016D
l00000000004701B4:
	rax = Mem0[rbx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rdi = rbx + rax
	edx = Mem0[rdi + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000470280
	// succ:  l00000000004701CA l0000000000470280
l00000000004701CA:
	rdx = rdi
	goto l00000000004700E5
	// succ:  l00000000004700E5
l00000000004701D2:
	rdi = rsi
	rdi = rdi - r12
	SCZO = cond(rdi)
	SCZO = cond(Mem0[rbp + 0xE1<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000470300
	// succ:  l00000000004701E5 l0000000000470300
l00000000004701E5:
	r14d = CONVERT(Mem0[rbp + 0xE0<64>:byte], byte, word32)
	r14 = CONVERT(r14d, word32, uint64)
	// succ:  l00000000004701ED
l00000000004701ED:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(LE,SZO) l00000000004700DA
	// succ:  l00000000004701F6 l00000000004700DA
l00000000004701F6:
	ebp = CONVERT(r14b, byte, word32)
	rbp = CONVERT(ebp, word32, uint64)
	goto l0000000000470219
	// succ:  l0000000000470219
l0000000000470200:
	Mem0[rax:byte] = r14b
	v30 = Mem0[rcx + 0x28<64>:word64] + 1<64>
	Mem0[rcx + 0x28<64>:word64] = v30
	SCZO = cond(v30)
	// succ:  l0000000000470208
l0000000000470208:
	rdi = rdi - 1<64>
	SCZO = cond(rdi)
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l00000000004702F0
	// succ:  l0000000000470215 l00000000004702F0
l0000000000470215:
	rax = Mem0[rax - 0x18<64>:word64]
	// succ:  l0000000000470219
l0000000000470219:
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	rax = Mem0[rcx + 0x28<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x30<64>:word64])
	branch Test(ULT,C) l0000000000470200
	// succ:  l000000000047022B l0000000000470200
l000000000047022B:
	rax = Mem0[rcx:word64]
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000470208
	// succ:  l0000000000470238 l0000000000470208
l0000000000470238:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rdx = rbx
	rdx = rdx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx)
	goto l00000000004700DA
	// succ:  l00000000004700DA
l0000000000470260:
	rcx = Mem0[rsp + 0x38<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046E370 (retsize: 8;)
	goto l0000000000470126
	// succ:  l0000000000470126
l0000000000470280:
	rsi = rsi - r12
	SCZO = cond(rsi)
	SCZO = cond(Mem0[rdi + 0xE1<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000470340
	// succ:  l0000000000470290 l0000000000470340
l0000000000470290:
	ebp = CONVERT(Mem0[rdi + 0xE0<64>:byte], byte, word32)
	rbp = CONVERT(ebp, word32, uint64)
	rdx = rdi
	// succ:  l000000000047029A
l000000000047029A:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(LE,SZO) l00000000004700E5
	// succ:  l00000000004702A3 l00000000004700E5
l00000000004702A3:
	edi = CONVERT(bpl, byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	goto l00000000004702C9
	// succ:  l00000000004702C9
l00000000004702B0:
	Mem0[r8:byte] = bpl
	v29 = Mem0[rcx + 0x28<64>:word64] + 1<64>
	Mem0[rcx + 0x28<64>:word64] = v29
	SCZO = cond(v29)
	// succ:  l00000000004702B8
l00000000004702B8:
	rsi = rsi - 1<64>
	SCZO = cond(rsi)
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000470170
	// succ:  l00000000004702C5 l0000000000470170
l00000000004702C5:
	rax = Mem0[rax - 0x18<64>:word64]
	// succ:  l00000000004702C9
l00000000004702C9:
	rcx = Mem0[rbx + 0xE8<64> + rax:word64]
	r8 = Mem0[rcx + 0x28<64>:word64]
	SCZO = cond(r8 - Mem0[rcx + 0x30<64>:word64])
	branch Test(ULT,C) l00000000004702B0
	// succ:  l00000000004702DB l00000000004702B0
l00000000004702DB:
	rax = Mem0[rcx:word64]
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x68<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l00000000004702B8
	// succ:  l00000000004702E8 l00000000004702B8
l00000000004702E8:
	rax = Mem0[rbx:word64]
	goto l000000000047015B
	// succ:  l000000000047015B
l00000000004702F0:
	rdx = rbx
	rdx = rdx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx)
	goto l00000000004700DA
	// succ:  l00000000004700DA
l0000000000470300:
	r14 = Mem0[rbp + 0xF0<64>:word64]
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l00000000004703FC
	// succ:  l0000000000470310 l00000000004703FC
l0000000000470310:
	SCZO = cond(Mem0[r14 + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000470380
	// succ:  l0000000000470317 l0000000000470380
l0000000000470317:
	r14d = CONVERT(Mem0[r14 + 0x59<64>:byte], byte, word32)
	r14 = CONVERT(r14d, word32, uint64)
	// succ:  l000000000047031C
l000000000047031C:
	Mem0[rbp + 0xE0<64>:byte] = r14b
	rax = Mem0[rbx:word64]
	Mem0[rbp + 0xE1<64>:byte] = 1<8>
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = rbx + rax
	goto l00000000004701ED
	// succ:  l00000000004701ED
l0000000000470340:
	rbp = Mem0[rdi + 0xF0<64>:word64]
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l00000000004703F7
	// succ:  l0000000000470350 l00000000004703F7
l0000000000470350:
	SCZO = cond(Mem0[rbp + 0x38<64>:byte] - 0<8>)
	branch Test(EQ,Z) l00000000004703B0
	// succ:  l0000000000470356 l00000000004703B0
l0000000000470356:
	ebp = CONVERT(Mem0[rbp + 0x59<64>:byte], byte, word32)
	rbp = CONVERT(ebp, word32, uint64)
	// succ:  l000000000047035A
l000000000047035A:
	Mem0[rdi + 0xE0<64>:byte] = bpl
	rax = Mem0[rbx:word64]
	Mem0[rdi + 0xE1<64>:byte] = 1<8>
	rax = Mem0[rax - 0x18<64>:word64]
	rdx = rbx + rax
	goto l000000000047029A
	// succ:  l000000000047029A
l0000000000470380:
	rcx = r14
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[r14:word64]
	rdx = 0x000000000042B5F0<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000470412
	// succ:  l000000000047039B l0000000000470412
l000000000047039B:
	r14d = 0x20<32>
	r14 = CONVERT(r14d, word32, uint64)
	goto l000000000047031C
	// succ:  l000000000047031C
l00000000004703B0:
	rcx = rbp
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[rbp + 0<64>:word64]
	rdx = 0x000000000042B5F0<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000470401
	// succ:  l00000000004703CC l0000000000470401
l00000000004703CC:
	ebp = 0x20<32>
	rbp = CONVERT(ebp, word32, uint64)
	goto l000000000047035A
	// succ:  l000000000047035A
l00000000004703F7:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l00000000004703FC
l00000000004703FC:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l0000000000470401
l0000000000470401:
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbp
	call rax (retsize: 8;)
	ebp = eax
	rbp = CONVERT(ebp, word32, uint64)
	goto l000000000047035A
	// succ:  l000000000047035A
l0000000000470412:
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r14
	call rax (retsize: 8;)
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	goto l000000000047031C
	// succ:  l000000000047031C
fn0000000000470070_exit:


// fn0000000000470480
// Return size: 0
define fn0000000000470480
fn0000000000470480_entry:
	rsp = fp
	// succ:  l0000000000470480
l0000000000470480:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	r13 = rsp + 0x30<64>
	rbx = rcx
	r14 = rdx
	rdx = rcx
	r12 = r8
	rcx = r13
	call fn000000000045DD70 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x30<64>:byte] - 0<8>)
	branch Test(EQ,Z) l00000000004704F2
	// succ:  l00000000004704B0 l00000000004704F2
l00000000004704B0:
	rax = Mem0[rbx:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	rbp = rbx + rdx
	rsi = Mem0[rbp + 0x10<64>:word64]
	SCZO = cond(rsi - r12)
	branch Test(LE,SZO) l0000000000470540
	// succ:  l00000000004704C4 l0000000000470540
l00000000004704C4:
	eax = Mem0[rbp + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = rbp
	eax = eax & 0xB0<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x20<32>)
	r15b = CONVERT(Test(EQ,Z), bool, int8)
	SZO = cond(r15b & r15b)
	C = false
	branch Test(EQ,Z) l0000000000470640
	// succ:  l00000000004704DF l0000000000470640
l00000000004704DF:
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000470580
	// succ:  l00000000004704EA l0000000000470580
l00000000004704EA:
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	// succ:  l00000000004704F2
l00000000004704F2:
	rax = Mem0[rsp + 0x38<64>:word64]
	rdx = Mem0[rax:word64]
	rax = rax + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax)
	SZO = cond(Mem0[rax + 0x19<64>:byte] & 0x20<8>)
	C = false
	rsi = rax
	branch Test(EQ,Z) l000000000047052B
	// succ:  l0000000000470507 l000000000047052B
l0000000000470507:
	call fn0000000000470A80 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000047052B
	// succ:  l0000000000470510 l000000000047052B
l0000000000470510:
	rcx = Mem0[rsi + 0xE8<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000047052B
	// succ:  l000000000047051C l000000000047052B
l000000000047051C:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l00000000004706B2
	// succ:  l000000000047052B l00000000004706B2
l000000000047052B:
	rax = rbx
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000470480_exit
l0000000000470540:
	rcx = Mem0[rbp + 0xE8<64>:word64]
	r8 = r12
	rdx = r14
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(r12 - rax)
	rcx = rbx
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l0000000000470573
	// succ:  l000000000047055E l0000000000470573
l000000000047055E:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	// succ:  l000000000047056D
l000000000047056D:
	rax = Mem0[rbx:word64]
	// succ:  l0000000000470570
l0000000000470570:
	rcx = rbx
	// succ:  l0000000000470573
l0000000000470573:
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	goto l00000000004704EA
	// succ:  l00000000004704EA
l0000000000470580:
	rcx = Mem0[rcx + 0xE8<64>:word64]
	r8 = r12
	rdx = r14
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x60<64>:word64] (retsize: 8;)
	SCZO = cond(r12 - rax)
	branch Test(EQ,Z) l00000000004705AD
	// succ:  l0000000000470598 l00000000004705AD
l0000000000470598:
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	// succ:  l00000000004705AD
l00000000004705AD:
	SZO = cond(r15b & r15b)
	C = false
	branch Test(EQ,Z) l000000000047056D
	// succ:  l00000000004705B2 l000000000047056D
l00000000004705B2:
	rax = Mem0[rbx:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	rdi = rbx + rdx
	eax = Mem0[rdi + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = rdi
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004704EA
	// succ:  l00000000004705CB l00000000004704EA
l00000000004705CB:
	rsi = rsi - r12
	SCZO = cond(rsi)
	SCZO = cond(Mem0[rdi + 0xE2<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000470720
	// succ:  l00000000004705DB l0000000000470720
l00000000004705DB:
	rcx = rdi
	edi = CONVERT(Mem0[rdi + 0xE0<64>:word16], word16, word32)
	rdi = CONVERT(edi, word32, uint64)
	// succ:  l00000000004705E5
l00000000004705E5:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(LE,SZO) l00000000004704EA
	// succ:  l00000000004705EE l00000000004704EA
l00000000004705EE:
	ebp = CONVERT(di, word16, word32)
	rbp = CONVERT(ebp, word32, uint64)
	goto l000000000047061C
	// succ:  l000000000047061C
l00000000004705F3:
	Mem0[r8:word16] = di
	r8 = r8 + 2<64>
	SCZO = cond(r8)
	eax = edi
	rax = CONVERT(eax, word32, uint64)
	Mem0[rcx + 0x28<64>:word64] = r8
	// succ:  l0000000000470601
l0000000000470601:
	SCZO = cond(ax - 0xFFFF<16>)
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l00000000004706D0
	// succ:  l000000000047060E l00000000004706D0
l000000000047060E:
	rsi = rsi - 1<64>
	SCZO = cond(rsi)
	branch Test(EQ,Z) l0000000000470570
	// succ:  l0000000000470618 l0000000000470570
l0000000000470618:
	rdx = Mem0[rax - 0x18<64>:word64]
	// succ:  l000000000047061C
l000000000047061C:
	rcx = Mem0[rbx + 0xE8<64> + rdx:word64]
	r8 = Mem0[rcx + 0x28<64>:word64]
	SCZO = cond(r8 - Mem0[rcx + 0x30<64>:word64])
	branch Test(ULT,C) l00000000004705F3
	// succ:  l000000000047062E l00000000004705F3
l000000000047062E:
	rax = Mem0[rcx:word64]
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x68<64>:word64] (retsize: 8;)
	goto l0000000000470601
	// succ:  l0000000000470601
l0000000000470640:
	rdi = rsi
	rdi = rdi - r12
	SCZO = cond(rdi)
	SCZO = cond(Mem0[rbp + 0xE2<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000470760
	// succ:  l0000000000470653 l0000000000470760
l0000000000470653:
	ebp = CONVERT(Mem0[rbp + 0xE0<64>:word16], word16, word32)
	rbp = CONVERT(ebp, word32, uint64)
	// succ:  l000000000047065A
l000000000047065A:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(LE,SZO) l00000000004704DF
	// succ:  l0000000000470663 l00000000004704DF
l0000000000470663:
	eax = CONVERT(bp, word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x2C<64>:word32] = eax
	goto l0000000000470694
	// succ:  l0000000000470694
l0000000000470670:
	Mem0[rax:word16] = bp
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x28<64>:word64] = rax
	eax = ebp
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000047067D
l000000000047067D:
	SCZO = cond(ax - 0xFFFF<16>)
	rax = Mem0[rbx:word64]
	branch Test(EQ,Z) l00000000004706F0
	// succ:  l0000000000470686 l00000000004706F0
l0000000000470686:
	rdi = rdi - 1<64>
	SCZO = cond(rdi)
	branch Test(EQ,Z) l0000000000470711
	// succ:  l0000000000470690 l0000000000470711
l0000000000470690:
	rdx = Mem0[rax - 0x18<64>:word64]
	// succ:  l0000000000470694
l0000000000470694:
	rcx = Mem0[rbx + 0xE8<64> + rdx:word64]
	rax = Mem0[rcx + 0x28<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x30<64>:word64])
	branch Test(ULT,C) l0000000000470670
	// succ:  l00000000004706A6 l0000000000470670
l00000000004706A6:
	rax = Mem0[rcx:word64]
	edx = Mem0[rsp + 0x2C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x68<64>:word64] (retsize: 8;)
	goto l000000000047067D
	// succ:  l000000000047067D
l00000000004706B2:
	rcx = Mem0[rsp + 0x38<64>:word64]
	rax = Mem0[rcx:word64]
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	goto l000000000047052B
	// succ:  l000000000047052B
l00000000004706D0:
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	goto l000000000047056D
	// succ:  l000000000047056D
l00000000004706F0:
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	edx = Mem0[rcx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn000000000046EB40 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	goto l00000000004704DF
	// succ:  l00000000004704DF
l0000000000470711:
	rcx = rbx
	rcx = rcx + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rcx)
	goto l00000000004704DF
	// succ:  l00000000004704DF
l0000000000470720:
	rcx = Mem0[rdi + 0xF0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004707BB
	// succ:  l0000000000470730 l00000000004707BB
l0000000000470730:
	rax = Mem0[rcx:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rdx = Mem0[rbx:word64]
	Mem0[rdi + 0xE0<64>:word16] = ax
	Mem0[rdi + 0xE2<64>:byte] = 1<8>
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	rdx = Mem0[rdx - 0x18<64>:word64]
	rcx = rbx + rdx
	goto l00000000004705E5
	// succ:  l00000000004705E5
l0000000000470760:
	rcx = Mem0[rbp + 0xF0<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004707C0
	// succ:  l000000000047076C l00000000004707C0
l000000000047076C:
	rax = Mem0[rcx:word64]
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rdx = Mem0[rbx:word64]
	Mem0[rbp + 0xE0<64>:word16] = ax
	Mem0[rbp + 0xE2<64>:byte] = 1<8>
	ebp = eax
	rbp = CONVERT(ebp, word32, uint64)
	rdx = Mem0[rdx - 0x18<64>:word64]
	rcx = rbx + rdx
	goto l000000000047065A
	// succ:  l000000000047065A
l00000000004707BB:
	call fn0000000000470820 (retsize: 8;)
	// succ:  l00000000004707C0
l00000000004707C0:
	call fn0000000000470820 (retsize: 8;)
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	// succ:  l00000000004707CD
l00000000004707CD:
	rcx = r13
	call fn000000000045DE50 (retsize: 8;)
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	call fn0000000000476060 (retsize: 8;)
	call fn0000000000475840 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rsi = rbx
	rsi = rsi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rsi)
	v27 = Mem0[rsi + 0x20<64>:word32] | 1<32>
	Mem0[rsi + 0x20<64>:word32] = v27
	SZO = cond(Mem0[rsi + 0x20<64>:word32])
	C = false
	SZO = cond(Mem0[rsi + 0x1C<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l0000000000470805
	// succ:  l00000000004707FB l0000000000470805
l00000000004707FB:
	call fn0000000000475A70 (retsize: 8;)
	goto l00000000004704F2
	// succ:  l00000000004704F2
l0000000000470805:
	call fn0000000000476060 (retsize: 8;)
	rbx = rax
	goto l00000000004707CD
	// succ:  l00000000004707CD
fn0000000000470480_exit:


// fn0000000000470820
// Return size: 0
define fn0000000000470820
fn0000000000470820_entry:
	rsp = fp
	// succ:  l0000000000470820
l0000000000470820:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[0x0000000000491DA0<p64>:word64]
	r8 = 0x000000000046C430<p64>
	rdx = rcx + 0x10<64>
	rcx = rax
	Mem0[rax:word64] = rdx
	rdx = 0x0000000000493E00<p64>
	call fn00000000004760B0 (retsize: 8;)
	// succ:  l000000000047085F_thunk_fn0000000000470860
l000000000047085F_thunk_fn0000000000470860:
	call fn0000000000470860 (retsize: 0;)
	return
	// succ:  fn0000000000470820_exit
fn0000000000470820_exit:


// fn0000000000470860
// Return size: 8
define fn0000000000470860
fn0000000000470860_entry:
	rsp = fp
	// succ:  l0000000000470860
l0000000000470860:
	rax = 0x000000000048AA80<p64>
	return
	// succ:  fn0000000000470860_exit
fn0000000000470860_exit:


// fn0000000000470870
// Return size: 8
define fn0000000000470870
fn0000000000470870_entry:
	rsp = fp
	// succ:  l0000000000470870
l0000000000470870:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	r8 = rsp + 0x2F<64>
	call fn0000000000471040 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000470870_exit
fn0000000000470870_exit:


// fn0000000000470890
// Return size: 8
define fn0000000000470890
fn0000000000470890_entry:
	rsp = fp
	// succ:  l0000000000470890
l0000000000470890:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	r8 = rsp + 0x2F<64>
	call fn0000000000471150 (retsize: 8;)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000470890_exit
fn0000000000470890_exit:


// fn00000000004708B0
// Return size: 0
define fn00000000004708B0
fn00000000004708B0_entry:
	rsp = fp
	// succ:  l00000000004708B0
l00000000004708B0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[0x0000000000491E10<p64>:word64]
	r8 = 0x000000000046E160<p64>
	rdx = rcx + 0x10<64>
	rcx = rax
	Mem0[rax:word64] = rdx
	rdx = 0x0000000000493FC0<p64>
	call fn00000000004760B0 (retsize: 8;)
	// succ:  l00000000004708EF_thunk_fn00000000004708F0
l00000000004708EF_thunk_fn00000000004708F0:
	call fn00000000004708F0 (retsize: 0;)
	return
	// succ:  fn00000000004708B0_exit
fn00000000004708B0_exit:


// fn00000000004708F0
// Return size: 8
define fn00000000004708F0
fn00000000004708F0_entry:
	rsp = fp
	// succ:  l00000000004708F0
l00000000004708F0:
	r10 = Mem0[r8:word64]
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	rax = Mem0[r10 - 0x18<64>:word64]
	r8 = rax - 1<64>
	SCZO = cond(rdx - r8)
	branch Test(ULE,CZ) l0000000000470906
	// succ:  l0000000000470902_1 l0000000000470906
l0000000000470902_1:
	rdx = r8
	// succ:  l0000000000470906
l0000000000470906:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l0000000000470963
	// succ:  l000000000047090B l0000000000470963
l000000000047090B:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	goto l0000000000470914
	// succ:  l0000000000470914
l0000000000470910:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000047092D
	// succ:  l0000000000470914 l000000000047092D
l0000000000470914:
	eax = CONVERT(Mem0[rcx + r9:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[r10 + r8:byte] - al)
	al = CONVERT(Test(EQ,Z), bool, int8)
	r9 = r9 + 1<64>
	SCZO = cond(r9)
	r8 = r8 - 1<64>
	SCZO = cond(r8)
	SCZO = cond(r9 - rdx)
	branch Test(ULT,C) l0000000000470910
	// succ:  l000000000047092D l0000000000470910
l000000000047092D:
	SZO = cond(r8 & r8)
	C = false
	edx = CONVERT(Mem0[rcx + rdx:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l000000000047094D
	// succ:  l0000000000470936 l000000000047094D
l0000000000470936:
	goto l0000000000470951
	// succ:  l0000000000470951
l0000000000470940:
	SCZO = cond(Mem0[r10 + r8:byte] - dl)
	al = CONVERT(Test(EQ,Z), bool, int8)
	r8 = r8 - 1<64>
	SCZO = cond(r8)
	branch Test(EQ,Z) l0000000000470951
	// succ:  l000000000047094D l0000000000470951
l000000000047094D:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000470940
	// succ:  l0000000000470951 l0000000000470940
l0000000000470951:
	ecx = SLICE(rdx - 1<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 0x7D<8>)
	branch Test(UGT,CZ) l0000000000470961
	// succ:  l0000000000470959 l0000000000470961
l0000000000470959:
	SCZO = cond(Mem0[r10:byte] - dl)
	dl = CONVERT(Test(LE,SZO), bool, int8)
	eax = eax & edx
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000470961
l0000000000470961:
	return
	// succ:  fn00000000004708F0_exit
l0000000000470963:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000047092D
	// succ:  l000000000047092D
fn00000000004708F0_exit:


// fn0000000000470970
// Return size: 8
define fn0000000000470970
fn0000000000470970_entry:
	rsp = fp
	// succ:  l0000000000470970
l0000000000470970:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000475C50 (retsize: 8;)
	rdx = Mem0[rax:word64]
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l000000000047099C
	// succ:  l0000000000470985 l000000000047099C
l0000000000470985:
	rax = Mem0[rdx + 0x50<64>:word64]
	r8 = 0xB8B1AABCBCD4D500<64>
	r8 = r8 + rax
	SCZO = cond(r8)
	SCZO = cond(r8 - 1<64>)
	branch Test(ULE,CZ) l00000000004709B0
	// succ:  l000000000047099C l00000000004709B0
l000000000047099C:
	Mem0[rbx:word64] = 0<64>
	// succ:  l00000000004709A3
l00000000004709A3:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000470970_exit
l00000000004709B0:
	SZO = cond(al & 1<8>)
	C = false
	branch Test(NE,Z) l00000000004709D0
	// succ:  l00000000004709B4 l00000000004709D0
l00000000004709B4:
	rdx = rdx + 0x90<64>
	SCZO = cond(rdx)
	Mem0[rbx:word64] = rdx
	// succ:  l00000000004709BE
l00000000004709BE:
	__lock()
	v14 = Mem0[rdx - 0xA0<64>:word32] + 1<32>
	Mem0[rdx - 0xA0<64>:word32] = v14
	SCZO = cond(v14)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000470970_exit
l00000000004709D0:
	rdx = Mem0[rdx:word64]
	SZO = cond(rdx & rdx)
	C = false
	Mem0[rbx:word64] = rdx
	branch Test(NE,Z) l00000000004709BE
	// succ:  l00000000004709DB l00000000004709BE
l00000000004709DB:
	goto l00000000004709A3
	// succ:  l00000000004709A3
fn0000000000470970_exit:


// fn00000000004709E0
// Return size: 8
define fn00000000004709E0
fn00000000004709E0_entry:
	rsp = fp
	// succ:  l00000000004709E0
l00000000004709E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = Mem0[rcx:word64]
	call fn0000000000475620 (retsize: 8;)
	rsp = rsp + 8<64>
	rbx = rax
	Mem0[rax:word64] = rsi
	__lock()
	v8 = Mem0[rsi - 0xA0<64>:word32] + 1<32>
	Mem0[rsi - 0xA0<64>:word32] = v8
	SCZO = cond(v8)
	call fn000000000046FE70 (retsize: 8;)
	Mem0[rbx + 0x10<64>:word64] = rax
	rbx = rbx + 0x50<64>
	SCZO = cond(rbx)
	call fn000000000046F760 (retsize: 8;)
	Mem0[rbx - 0x38<64>:word64] = rax
	rax = 0x474E5543432B2B01<64>
	Mem0[rbx:word64] = rax
	rax = 0x0000000000423A70<p64>
	Mem0[rbx + 8<64>:word64] = rax
	rcx = rbx
	call fn0000000000411550 (retsize: 8;)
	rcx = rbx
	call fn0000000000475840 (retsize: 8;)
	call fn0000000000472D60 (retsize: 8;)
	// succ:  l0000000000470A3F_thunk_fn0000000000470A40
l0000000000470A3F_thunk_fn0000000000470A40:
	call fn0000000000470A40 (retsize: 0;)
	return
	// succ:  fn00000000004709E0_exit
fn00000000004709E0_exit:


// fn0000000000470A40
// Return size: 8
define fn0000000000470A40
fn0000000000470A40_entry:
	rsp = fp
	// succ:  l0000000000470A40
l0000000000470A40:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[0x0000000000491B70<p64>:word64]
	r8 = 0x0000000000452720<p64>
	rdx = rcx + 0x10<64>
	rcx = rax
	Mem0[rax:word64] = rdx
	rdx = 0x00000000004932A0<p64>
	call fn00000000004760B0 (retsize: 8;)
	// succ:  l0000000000470A7F_thunk_fn0000000000470A80
l0000000000470A7F_thunk_fn0000000000470A80:
	call fn0000000000470A80 (retsize: 0;)
	return
	// succ:  fn0000000000470A40_exit
fn0000000000470A40_exit:


// fn0000000000470A80
// Return size: 8
define fn0000000000470A80
fn0000000000470A80_entry:
	rsp = fp
	// succ:  l0000000000470A80
l0000000000470A80:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	call fn0000000000475C50 (retsize: 8;)
	eax = Mem0[rax + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000470A80_exit
fn0000000000470A80_exit:


// fn0000000000470AA0
// Return size: 8
define fn0000000000470AA0
fn0000000000470AA0_entry:
	rsp = fp
	// succ:  l0000000000470AA0
l0000000000470AA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	Mem0[rbp - 1<64>:byte] = 1<8>
	rdx = Mem0[rbp + 0x20<64>:word64]
	rax = Mem0[rbp + 0x18<64>:word64]
	r8 = rdx
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000468850 (retsize: 8;)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000470AA0_exit
fn0000000000470AA0_exit:


// fn0000000000470AE0
// Return size: 8
define fn0000000000470AE0
fn0000000000470AE0_entry:
	rsp = fp
	// succ:  l0000000000470AE0
l0000000000470AE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	Mem0[rbp - 1<64>:byte] = 0<8>
	rdx = Mem0[rbp + 0x20<64>:word64]
	rax = Mem0[rbp + 0x18<64>:word64]
	r8 = rdx
	rdx = rax
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn00000000004687A0 (retsize: 8;)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000470AE0_exit
fn0000000000470AE0_exit:


// fn0000000000470B20
// Return size: 0
define fn0000000000470B20
fn0000000000470B20_entry:
	rsp = fp
	// succ:  l0000000000470B20
l0000000000470B20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rdi = rcx
	rsi = rsp + 0x30<64>
	ecx = 0x10<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rsp + 0x2E<64>
	rdx = rdi
	rcx = rsi
	rbx = rax
	call fn0000000000451EA0 (retsize: 8;)
	rdx = rsi
	rcx = rbx
	call fn000000000046D260 (retsize: 8;)
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	r8 = 0x000000000046D2D0<p64>
	rdx = 0x00000000004931C0<p64>
	rcx = rbx
	call fn00000000004760B0 (retsize: 8;)
	rsi = rax
	rcx = rbx
	call fn0000000000475BA0 (retsize: 8;)
	rcx = rsi
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l0000000000470B9F_thunk_fn0000000000470BA0
l0000000000470B9F_thunk_fn0000000000470BA0:
	call fn0000000000470BA0 (retsize: 0;)
	return
	// succ:  fn0000000000470B20_exit
fn0000000000470B20_exit:


// fn0000000000470BA0
// Return size: 0
define fn0000000000470BA0
fn0000000000470BA0_entry:
	rsp = fp
	// succ:  l0000000000470BA0
l0000000000470BA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rdi = rcx
	rsi = rsp + 0x30<64>
	ecx = 0x10<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rsp + 0x2E<64>
	rdx = rdi
	rcx = rsi
	rbx = rax
	call fn0000000000451EA0 (retsize: 8;)
	rdx = rsi
	rcx = rbx
	call fn0000000000454770 (retsize: 8;)
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	r8 = 0x00000000004547D0<p64>
	rdx = 0x0000000000493420<p64>
	rcx = rbx
	call fn00000000004760B0 (retsize: 8;)
	rsi = rax
	// succ:  l0000000000470C03
l0000000000470C03:
	rcx = rbx
	call fn0000000000475BA0 (retsize: 8;)
	rcx = rsi
	call fn00000000004115B0 (retsize: 8;)
	rsi = rax
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	goto l0000000000470C03
	// succ:  l0000000000470C03
fn0000000000470BA0_exit:


// fn0000000000470C30
// Return size: 0
define fn0000000000470C30
fn0000000000470C30_entry:
	rsp = fp
	// succ:  l0000000000470C30
l0000000000470C30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rdi = rcx
	rsi = rsp + 0x30<64>
	ecx = 0x10<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rsp + 0x2E<64>
	rdx = rdi
	rcx = rsi
	rbx = rax
	call fn0000000000451EA0 (retsize: 8;)
	rdx = rsi
	rcx = rbx
	call fn0000000000454820 (retsize: 8;)
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	r8 = 0x0000000000454870<p64>
	rdx = 0x0000000000493440<p64>
	rcx = rbx
	call fn00000000004760B0 (retsize: 8;)
	rsi = rax
	// succ:  l0000000000470C93
l0000000000470C93:
	rcx = rbx
	call fn0000000000475BA0 (retsize: 8;)
	rcx = rsi
	call fn00000000004115B0 (retsize: 8;)
	rsi = rax
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	goto l0000000000470C93
	// succ:  l0000000000470C93
fn0000000000470C30_exit:


// fn0000000000470CC0
// Return size: 0
define fn0000000000470CC0
fn0000000000470CC0_entry:
	rsp = fp
	// succ:  l0000000000470CC0
l0000000000470CC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	esi = ecx
	rsi = CONVERT(esi, word32, uint64)
	ecx = 0x18<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	rbx = rax
	call fn0000000000454880 (retsize: 8;)
	r8 = 0x0000000000454940<p64>
	rdx = 0x0000000000493460<p64>
	rcx = rbx
	call fn00000000004760B0 (retsize: 8;)
	rsi = rax
	rcx = rbx
	call fn0000000000475BA0 (retsize: 8;)
	rcx = rsi
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l0000000000470D0F_thunk_fn0000000000470D10
l0000000000470D0F_thunk_fn0000000000470D10:
	call fn0000000000470D10 (retsize: 0;)
	return
	// succ:  fn0000000000470CC0_exit
fn0000000000470CC0_exit:


// fn0000000000470D10
// Return size: 0
define fn0000000000470D10
fn0000000000470D10_entry:
	rsp = fp
	// succ:  l0000000000470D10
l0000000000470D10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rdi = rcx
	rsi = rsp + 0x30<64>
	ecx = 0x10<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rsp + 0x2E<64>
	rdx = rdi
	rcx = rsi
	rbx = rax
	call fn0000000000451EA0 (retsize: 8;)
	rdx = rsi
	rcx = rbx
	call fn0000000000455250 (retsize: 8;)
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	r8 = 0x00000000004552A0<p64>
	rdx = 0x00000000004934D0<p64>
	rcx = rbx
	call fn00000000004760B0 (retsize: 8;)
	rsi = rax
	// succ:  l0000000000470D73
l0000000000470D73:
	rcx = rbx
	call fn0000000000475BA0 (retsize: 8;)
	rcx = rsi
	call fn00000000004115B0 (retsize: 8;)
	rsi = rax
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	goto l0000000000470D73
	// succ:  l0000000000470D73
fn0000000000470D10_exit:


// fn0000000000470DA0
// Return size: 0
define fn0000000000470DA0
fn0000000000470DA0_entry:
	rsp = fp
	// succ:  l0000000000470DA0
l0000000000470DA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	ebp = ecx
	rbp = CONVERT(ebp, word32, uint64)
	rsi = rsp + 0x30<64>
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rbx = rax
	call fn000000000046FF00 (retsize: 8;)
	r8 = rsp + 0x2F<64>
	rdx = 0x000000000048D790<p64>
	rcx = rsi
	rdi = rax
	call fn0000000000451EA0 (retsize: 8;)
	rdx = rsi
	rcx = rbx
	call fn0000000000454770 (retsize: 8;)
	r8 = Mem0[rsp + 0x30<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[r8 - 8<64>:word32] = __xadd(Mem0[r8 - 8<64>:word32], eax)
	SCZO = cond(Mem0[r8 - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000470E22
	// succ:  l0000000000470DF7 l0000000000470E22
l0000000000470DF7:
	rax = Mem0[0x0000000000491BC0<p64>:word64]
	r8 = 0x00000000004552E0<p64>
	rcx = rbx
	Mem0[rbx + 0x10<64>:word32] = ebp
	Mem0[rbx + 0x18<64>:word64] = rdi
	rdx = rax + 0x10<64>
	Mem0[rbx:word64] = rdx
	rdx = 0x00000000004934F0<p64>
	call fn00000000004760B0 (retsize: 8;)
	// succ:  l0000000000470E22
l0000000000470E22:
	rdx = rsp + 0x2E<64>
	rcx = r8 - 0x18<64>
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000470DF7
	// succ:  l0000000000470DF7
fn0000000000470DA0_exit:


// fn0000000000470E60
// Return size: 0
define fn0000000000470E60
fn0000000000470E60_entry:
	rsp = fp
	// succ:  l0000000000470E60
l0000000000470E60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rdi = rcx
	rsi = rsp + 0x30<64>
	ecx = 0x10<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rsp + 0x2E<64>
	rdx = rdi
	rcx = rsi
	rbx = rax
	call fn0000000000451EA0 (retsize: 8;)
	rdx = rsi
	rcx = rbx
	call fn00000000004552F0 (retsize: 8;)
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	r8 = 0x0000000000455340<p64>
	rdx = 0x0000000000493510<p64>
	rcx = rbx
	call fn00000000004760B0 (retsize: 8;)
	rsi = rax
	// succ:  l0000000000470EC3
l0000000000470EC3:
	rcx = rbx
	call fn0000000000475BA0 (retsize: 8;)
	rcx = rsi
	call fn00000000004115B0 (retsize: 8;)
	rsi = rax
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	goto l0000000000470EC3
	// succ:  l0000000000470EC3
fn0000000000470E60_exit:


// fn0000000000470EF0
// Return size: 0
define fn0000000000470EF0
fn0000000000470EF0_entry:
	rsp = fp
	// succ:  l0000000000470EF0
l0000000000470EF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rdi = rcx
	rsi = rsp + 0x30<64>
	ecx = 0x10<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rsp + 0x2E<64>
	rdx = rdi
	rcx = rsi
	rbx = rax
	call fn0000000000451EA0 (retsize: 8;)
	rdx = rsi
	rcx = rbx
	call fn0000000000455350 (retsize: 8;)
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	r8 = 0x00000000004553A0<p64>
	rdx = 0x0000000000493530<p64>
	rcx = rbx
	call fn00000000004760B0 (retsize: 8;)
	rsi = rax
	// succ:  l0000000000470F53
l0000000000470F53:
	rcx = rbx
	call fn0000000000475BA0 (retsize: 8;)
	rcx = rsi
	call fn00000000004115B0 (retsize: 8;)
	rsi = rax
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = rsp + 0x2F<64>
	rcx = rax - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	goto l0000000000470F53
	// succ:  l0000000000470F53
fn0000000000470EF0_exit:


// fn0000000000470F80
// Return size: 0
define fn0000000000470F80
fn0000000000470F80_entry:
	rsp = fp
	// succ:  l0000000000470F80
l0000000000470F80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	edi = ecx
	rdi = CONVERT(edi, word32, uint64)
	ecx = 0x20<32>
	rcx = CONVERT(ecx, word32, uint64)
	rbp = rsp + 0x30<64>
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rbx = rax
	call fn0000000000470860 (retsize: 8;)
	rsi = rax
	rax = Mem0[rax:word64]
	r8d = edi
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rsi
	rcx = rbp
	call Mem0[rax + 0x18<64>:word64] (retsize: 8;)
	rdx = rbp
	rcx = rbx
	call fn000000000045F390 (retsize: 8;)
	r9 = Mem0[rsp + 0x30<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[r9 - 8<64>:word32] = __xadd(Mem0[r9 - 8<64>:word32], eax)
	SCZO = cond(Mem0[r9 - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000470FFD
	// succ:  l0000000000470FD2 l0000000000470FFD
l0000000000470FD2:
	rax = Mem0[0x0000000000491BD0<p64>:word64]
	r8 = 0x00000000004553E0<p64>
	rdx = 0x0000000000493550<p64>
	rcx = rbx
	Mem0[rbx + 0x10<64>:word32] = edi
	Mem0[rbx + 0x18<64>:word64] = rsi
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx:word64] = rax
	call fn00000000004760B0 (retsize: 8;)
	// succ:  l0000000000470FFD
l0000000000470FFD:
	rdx = rsp + 0x2F<64>
	rcx = r9 - 0x18<64>
	call fn0000000000450A50 (retsize: 8;)
	goto l0000000000470FD2
	// succ:  l0000000000470FD2
fn0000000000470F80_exit:


