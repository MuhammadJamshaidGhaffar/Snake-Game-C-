// fn0000000000421010
// Return size: 8
define fn0000000000421010
fn0000000000421010_entry:
	rsp = fp
	// succ:  l0000000000421010
l0000000000421010:
	SCZO = cond(edx - 1<32>)
	branch Test(UGT,CZ) l000000000042101A
	// succ:  l0000000000421015 l000000000042101A
l0000000000421015:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000421020
	// succ:  l000000000042101A l0000000000421020
l000000000042101A:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000421010_exit
l0000000000421020:
	SCZO = cond(edx - 1<32>)
	Mem0[rcx:word32] = 0<32>
	branch Test(EQ,Z) l0000000000421030
	// succ:  l000000000042102B l0000000000421030
l000000000042102B:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000421010_exit
l0000000000421030:
	eax = 0x28<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000421010_exit
fn0000000000421010_exit:


// fn0000000000421040
// Return size: 8
define fn0000000000421040
fn0000000000421040_entry:
	rsp = fp
	// succ:  l0000000000421040
l0000000000421040:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000421123
	// succ:  l0000000000421055 l0000000000421123
l0000000000421055:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l0000000000421065
	// succ:  l000000000042105A l0000000000421065
l000000000042105A:
	SCZO = cond(Mem0[rdx:word32] - 1<32>)
	al = 0x28<8>
	branch Test(EQ,Z) l0000000000421123
	// succ:  l0000000000421065 l0000000000421123
l0000000000421065:
	rsi = rcx
	edx = 0xB0<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = calloc(rcx, rdx)
	rbx = rax
	eax = 0xC<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000421123
	// succ:  l0000000000421088 l0000000000421123
l0000000000421088:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8d = 0x7FFFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdi = CreateSemaphoreA
	Mem0[rbx:word32] = 0xC0DEADBF<32>
	Mem0[rbx + 4<64>:word32] = 0<32>
	Mem0[rbx + 8<64>:word32] = 0<32>
	Mem0[rbx + 0x10<64>:word32] = 0<32>
	Mem0[rbx + 0xC<64>:word32] = 0<32>
	rax = CreateSemaphoreA(rcx, rdx, r8, r9)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0xA0<64>:word64] = rax
	r8d = 0x7FFFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	rax = CreateSemaphoreA(rcx, rdx, r8, r9)
	rcx = Mem0[rbx + 0xA0<64>:word64]
	Mem0[rbx + 0xA8<64>:word64] = rax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042113D
	// succ:  l00000000004210E9 l000000000042113D
l00000000004210E9:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000421130
	// succ:  l00000000004210EE l0000000000421130
l00000000004210EE:
	rdi = InitializeCriticalSection
	rcx = rbx + 0x18<64>
	InitializeCriticalSection(rcx)
	rcx = rbx + 0x70<64>
	InitializeCriticalSection(rcx)
	rcx = rbx + 0x40<64>
	InitializeCriticalSection(rcx)
	Mem0[rbx + 0x68<64>:word32] = 0<32>
	Mem0[rbx + 0x98<64>:word32] = 1<32>
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx:word32] = 0xC0BAB1FD<32>
	Mem0[rsi:word64] = rbx
	// succ:  l0000000000421123
l0000000000421123:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000421040_exit
l0000000000421130:
	eax = CloseHandle(rcx)
	rax = Mem0[rbx + 0xA8<64>:word64]
	// succ:  l000000000042113D
l000000000042113D:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000042114B
	// succ:  l0000000000421142 l000000000042114B
l0000000000421142:
	rcx = rax
	eax = CloseHandle(rcx)
	// succ:  l000000000042114B
l000000000042114B:
	rcx = rbx
	free(rcx)
	Mem0[rsi:word64] = 0<64>
	eax = 0xB<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000421123
	// succ:  l0000000000421123
fn0000000000421040_exit:


// fn0000000000421170
// Return size: 8
define fn0000000000421170
fn0000000000421170_entry:
	rsp = fp
	// succ:  l0000000000421170
l0000000000421170:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = Mem0[0x00000000004AE5A0<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004211F0
	// succ:  l0000000000421185 l00000000004211F0
l0000000000421185:
	call fn0000000000422260 (retsize: 8;)
	SZO = cond(rsi & rsi)
	C = false
	ebx = 0x16<32>
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(EQ,Z) l00000000004211A0
	// succ:  l0000000000421194 l00000000004211A0
l0000000000421194:
	bl = bl ^ bl
	SZO = cond(bl)
	C = false
	SCZO = cond(Mem0[rsi:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l0000000000421220
	// succ:  l00000000004211A0 l0000000000421220
l00000000004211A0:
	rcx = Mem0[0x00000000004AE5A0<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004211C0
	// succ:  l00000000004211AC l00000000004211C0
l00000000004211AC:
	call fn0000000000422310 (retsize: 8;)
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000421170_exit
l00000000004211C0:
	r8 = 0x0000000000420D10<p64>
	rcx = 0x0000000000491472<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE5A0<p64>:word64] = rax
	call fn0000000000422310 (retsize: 8;)
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000421170_exit
l00000000004211F0:
	rcx = 0x0000000000491472<p64>
	r8 = 0x0000000000420D10<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE5A0<p64>:word64] = rax
	goto l0000000000421185
	// succ:  l0000000000421185
l0000000000421220:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rsi
	call fn0000000000421040 (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l00000000004211A0
	// succ:  l00000000004211A0
fn0000000000421170_exit:


// fn0000000000421240
// Return size: 8
define fn0000000000421240
fn0000000000421240_entry:
	rsp = fp
	// succ:  l0000000000421240
l0000000000421240:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	SCZO = cond(edx - 1<32>)
	rbp = rcx
	r13d = edx
	r13 = CONVERT(r13d, word32, uint64)
	esi = r8d
	rsi = CONVERT(esi, word32, uint64)
	branch Test(EQ,Z) l0000000000421300
	// succ:  l000000000042125E l0000000000421300
l000000000042125E:
	Mem0[rsp + 0x20<64>:word64] = rcx
	call fn000000000041E9E0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	Mem0[rsp + 0x28<64>:word64] = rax
	branch Test(EQ,Z) l0000000000421371
	// succ:  l0000000000421276 l0000000000421371
l0000000000421276:
	rbx = rsp + 0x20<64>
	// succ:  l000000000042127B
l000000000042127B:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	r9d = esi
	r9 = CONVERT(r9d, word32, uint64)
	rdx = rbx
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	eax = WaitForMultipleObjects(rcx, rdx, r8, r9)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l0000000000421352
	// succ:  l0000000000421298 l0000000000421352
l0000000000421298:
	branch Test(ULT,C) l0000000000421330
	// succ:  l000000000042129E l0000000000421330
l000000000042129E:
	SCZO = cond(eax - 0x80<32>)
	branch Test(EQ,Z) l00000000004214ED
	// succ:  l00000000004212A9 l00000000004214ED
l00000000004212A9:
	SCZO = cond(eax - 0x102<32>)
	branch Test(NE,Z) l00000000004214DB
	// succ:  l00000000004212B4 l00000000004214DB
l00000000004212B4:
	r12d = 0x8A<32>
	r12 = CONVERT(r12d, word32, uint64)
	// succ:  l00000000004212BA
l00000000004212BA:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = Mem0[rsp + 0x20<64>:word64]
	eax = WaitForSingleObject(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000421330
	// succ:  l00000000004212CB l0000000000421330
l00000000004212CB:
	SCZO = cond(r13d - 2<32>)
	al = CONVERT(Test(NE,Z), bool, int8)
	// succ:  l00000000004212D2
l00000000004212D2:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000421333
	// succ:  l00000000004212D6 l0000000000421333
l00000000004212D6:
	call fn000000000041EC70 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000421333
	// succ:  l00000000004212DF l0000000000421333
l00000000004212DF:
	// succ:  l00000000004212E0
l00000000004212E0:
	r12d = 0x16<32>
	r12 = CONVERT(r12d, word32, uint64)
	eax = r12d
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000421240_exit
l0000000000421300:
	edx = r8d
	rdx = CONVERT(edx, word32, uint64)
	rdi = WaitForSingleObject
	eax = WaitForSingleObject(rcx, rdx)
	SCZO = cond(eax - 0x80<32>)
	branch Test(EQ,Z) l00000000004214D0
	// succ:  l0000000000421317 l00000000004214D0
l0000000000421317:
	SCZO = cond(eax - 0x102<32>)
	branch Test(NE,Z) l0000000000421343
	// succ:  l000000000042131E l0000000000421343
l000000000042131E:
	r12d = 0x8A<32>
	r12 = CONVERT(r12d, word32, uint64)
	// succ:  l0000000000421324
l0000000000421324:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbp
	eax = WaitForSingleObject(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000421333
	// succ:  l000000000042132F l0000000000421333
l000000000042132F:
	// succ:  l0000000000421330
l0000000000421330:
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	// succ:  l0000000000421333
l0000000000421333:
	eax = r12d
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000421240_exit
l0000000000421343:
	SCZO = cond(eax - 1<32>)
	r12d = r12d - r12d - C
	r12 = CONVERT(r12d, word32, uint64)
	SCZO = cond(r12d)
	r12d = ~r12d
	r12 = CONVERT(r12d, word32, uint64)
	r12d = r12d & 0x16<32>
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	goto l0000000000421333
	// succ:  l0000000000421333
l0000000000421352:
	rcx = Mem0[rsp + 0x28<64>:word64]
	eax = ResetEvent(rcx)
	SCZO = cond(r13d - 2<32>)
	branch Test(NE,Z) l000000000042142B
	// succ:  l0000000000421367 l000000000042142B
l0000000000421367:
	call fn000000000041EDF0 (retsize: 8;)
	goto l000000000042127B
	// succ:  l000000000042127B
l0000000000421371:
	SCZO = cond(esi - 0xFFFFFFFF<32>)
	rdi = WaitForSingleObject
	branch Test(EQ,Z) l00000000004213ED
	// succ:  l000000000042137D l00000000004213ED
l000000000042137D:
	rdi = WaitForSingleObject
	ebx = 0x14<32>
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000421389
l0000000000421389:
	SCZO = cond(ebx - esi)
	rcx = rbp
	branch Test(ULE,CZ) l0000000000421391
	// succ:  l000000000042138E_1 l0000000000421391
l000000000042138E_1:
	ebx = esi
	// succ:  l0000000000421391
l0000000000421391:
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	call rdi (retsize: 8;)
	SCZO = cond(eax - 0x80<32>)
	branch Test(EQ,Z) l0000000000421490
	// succ:  l00000000004213A0 l0000000000421490
l00000000004213A0:
	SCZO = cond(eax - 0x102<32>)
	branch Test(EQ,Z) l0000000000421440
	// succ:  l00000000004213AB l0000000000421440
l00000000004213AB:
	SZO = cond(eax & eax)
	C = false
	r12d = 0x16<32>
	r12 = CONVERT(r12d, word32, uint64)
	branch Test(EQ,Z) l0000000000421484
	// succ:  l00000000004213B9 l0000000000421484
l00000000004213B9:
	SCZO = cond(esi - ebx)
	branch Test(NE,Z) l0000000000421460
	// succ:  l00000000004213C1 l0000000000421460
l00000000004213C1:
	SZO = cond(r12d & r12d)
	C = false
	branch Test(EQ,Z) l0000000000421333
	// succ:  l00000000004213CA l0000000000421333
l00000000004213CA:
	// succ:  l00000000004213D0
l00000000004213D0:
	SCZO = cond(r13d - 2<32>)
	branch Test(EQ,Z) l0000000000421333
	// succ:  l00000000004213DA l0000000000421333
l00000000004213DA:
	call fn000000000041EDF0 (retsize: 8;)
	goto l0000000000421333
	// succ:  l0000000000421333
l00000000004213E4:
	call fn000000000041EC70 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000421421
	// succ:  l00000000004213ED l0000000000421421
l00000000004213ED:
	edx = 0x28<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbp
	eax = WaitForSingleObject(rcx, rdx)
	SCZO = cond(eax - 0x80<32>)
	branch Test(EQ,Z) l00000000004214A0
	// succ:  l0000000000421402 l00000000004214A0
l0000000000421402:
	SCZO = cond(eax - 0x102<32>)
	branch Test(EQ,Z) l00000000004213E4
	// succ:  l0000000000421409 l00000000004213E4
l0000000000421409:
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000421333
	// succ:  l0000000000421414 l0000000000421333
l0000000000421414:
	call fn000000000041EC70 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000000004212E0
	// succ:  l0000000000421421 l00000000004212E0
l0000000000421421:
	SCZO = cond(r13d - 2<32>)
	branch Test(EQ,Z) l00000000004212E0
	// succ:  l000000000042142B l00000000004212E0
l000000000042142B:
	call fn000000000041EDF0 (retsize: 8;)
	r12d = 0x16<32>
	r12 = CONVERT(r12d, word32, uint64)
	goto l0000000000421333
	// succ:  l0000000000421333
l0000000000421440:
	esi = esi - ebx
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	branch Test(NE,Z) l0000000000421472
	// succ:  l0000000000421444 l0000000000421472
l0000000000421444:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbp
	r12d = 0x8A<32>
	r12 = CONVERT(r12d, word32, uint64)
	call rdi (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004213D0
	// succ:  l0000000000421459 l00000000004213D0
l0000000000421459:
	goto l0000000000421330
	// succ:  l0000000000421330
l0000000000421460:
	call fn000000000041EC70 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000000004213C1
	// succ:  l000000000042146D l00000000004213C1
l000000000042146D:
	goto l00000000004212E0
	// succ:  l00000000004212E0
l0000000000421472:
	call fn000000000041EC70 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000421389
	// succ:  l000000000042147F l0000000000421389
l000000000042147F:
	goto l00000000004212E0
	// succ:  l00000000004212E0
l0000000000421484:
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	goto l00000000004213C1
	// succ:  l00000000004213C1
l0000000000421490:
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	goto l00000000004213B9
	// succ:  l00000000004213B9
l00000000004214A0:
	call fn000000000041EC70 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000421421
	// succ:  l00000000004214AD l0000000000421421
l00000000004214AD:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbp
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	eax = WaitForSingleObject(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000421330
	// succ:  l00000000004214C2 l0000000000421330
l00000000004214C2:
	goto l0000000000421333
	// succ:  l0000000000421333
l00000000004214D0:
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	goto l0000000000421324
	// succ:  l0000000000421324
l00000000004214DB:
	SCZO = cond(r13d - 2<32>)
	r12d = 0x16<32>
	r12 = CONVERT(r12d, word32, uint64)
	al = CONVERT(Test(NE,Z), bool, int8)
	goto l00000000004212D2
	// succ:  l00000000004212D2
l00000000004214ED:
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	goto l00000000004212BA
	// succ:  l00000000004212BA
fn0000000000421240_exit:


// fn0000000000421500
// Return size: 8
define fn0000000000421500
fn0000000000421500_entry:
	rsp = fp
	// succ:  l0000000000421500
l0000000000421500:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r12 = EnterCriticalSection
	rbx = Mem0[rsp + 0x90<64>:word64]
	r13 = rcx
	r14d = edx
	r14 = CONVERT(r14d, word32, uint64)
	r15d = r8d
	r15 = CONVERT(r15d, word32, uint64)
	rsi = r9
	rcx = r9
	EnterCriticalSection(rcx)
	__lock()
	v18 = Mem0[rbx:word32] - 1<32>
	Mem0[rbx:word32] = v18
	SCZO = cond(v18)
	edi = Mem0[rbx:word32]
	rdi = CONVERT(edi, word32, uint64)
	rbp = LeaveCriticalSection
	rcx = rsi
	LeaveCriticalSection(rcx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(edi & edi)
	C = false
	branch Test(SG,S) l0000000000421560
	// succ:  l0000000000421549 l0000000000421560
l0000000000421549:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000421500_exit
l0000000000421560:
	r8d = r15d
	r8 = CONVERT(r8d, word32, uint64)
	edx = r14d
	rdx = CONVERT(edx, word32, uint64)
	rcx = r13
	call fn0000000000421240 (retsize: 8;)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	rcx = rsi
	EnterCriticalSection(rcx)
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l0000000000421583
	// succ:  l000000000042157A l0000000000421583
l000000000042157A:
	rcx = rsi
	LeaveCriticalSection(rcx)
	eax = edi
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000421549
	// succ:  l0000000000421549
l0000000000421583:
	__lock()
	v28 = Mem0[rbx:word32] + 1<32>
	Mem0[rbx:word32] = v28
	SCZO = cond(v28)
	goto l000000000042157A
	// succ:  l000000000042157A
fn0000000000421500_exit:


// fn0000000000421590
// Return size: 8
define fn0000000000421590
fn0000000000421590_entry:
	rsp = fp
	// succ:  l0000000000421590
l0000000000421590:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	esi = 0x16<32>
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004215E4
	// succ:  l00000000004215A6 l00000000004215E4
l00000000004215A6:
	rbx = Mem0[rcx:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l00000000004215E4
	// succ:  l00000000004215AE l00000000004215E4
l00000000004215AE:
	SCZO = cond(rbx - 0xFFFFFFFFFFFFFFFF<64>)
	rdi = rcx
	branch Test(EQ,Z) l00000000004215F3
	// succ:  l00000000004215B7 l00000000004215F3
l00000000004215B7:
	rcx = Mem0[rbx + 0xA8<64>:word64]
	r12 = rbx + 0x98<64>
	rbp = rbx + 0x70<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8d = 0xFFFFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x20<64>:word64] = r12
	r9 = rbp
	call fn0000000000421500 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	branch Test(EQ,Z) l0000000000421640
	// succ:  l00000000004215E4 l0000000000421640
l00000000004215E4:
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000421590_exit
l00000000004215F3:
	rcx = Mem0[0x00000000004AE5A0<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000421750
	// succ:  l0000000000421603 l0000000000421750
l0000000000421603:
	call fn0000000000422260 (retsize: 8;)
	SCZO = cond(Mem0[rdi:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	esi = 0x10<32>
	rsi = CONVERT(esi, word32, uint64)
	branch Test(EQ,Z) l0000000000421714
	// succ:  l0000000000421617 l0000000000421714
l0000000000421617:
	rcx = Mem0[0x00000000004AE5A0<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000421723
	// succ:  l0000000000421627 l0000000000421723
l0000000000421627:
	call fn0000000000422310 (retsize: 8;)
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000421590_exit
l0000000000421640:
	r13 = rbx + 0x18<64>
	rcx = r13
	eax = TryEnterCriticalSection(rcx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000421690
	// succ:  l0000000000421651 l0000000000421690
l0000000000421651:
	eax = Mem0[rbx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[rbx + 8<64>:word32] - eax)
	branch Test(LE,SZO) l00000000004216B0
	// succ:  l0000000000421659 l00000000004216B0
l0000000000421659:
	rcx = Mem0[rbx + 0xA8<64>:word64]
	r9 = r12
	r8 = rbp
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000420D20 (retsize: 8;)
	rsp = rsp + 8<64>
	SZO = cond(eax & eax)
	C = false
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	eax = 0x10<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l000000000042167C
	// succ:  l0000000000421679_1 l000000000042167C
l0000000000421679_1:
	esi = eax
	// succ:  l000000000042167C
l000000000042167C:
	rcx = r13
	LeaveCriticalSection(rcx)
	goto l00000000004215E4
	// succ:  l00000000004215E4
l0000000000421690:
	rcx = Mem0[rbx + 0xA8<64>:word64]
	r9 = r12
	r8 = rbp
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	sil = 0x10<8>
	call fn0000000000420D20 (retsize: 8;)
	rsp = rsp + 8<64>
	goto l00000000004215E4
	// succ:  l00000000004215E4
l00000000004216B0:
	Mem0[rdi:word64] = 0<64>
	rcx = Mem0[rbx + 0xA8<64>:word64]
	r9 = r12
	r8 = rbp
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000420D20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = Mem0[rbx + 0xA0<64>:word64]
	rdi = CloseHandle
	eax = CloseHandle(rcx)
	rcx = Mem0[rbx + 0xA8<64>:word64]
	eax = CloseHandle(rcx)
	rcx = r13
	LeaveCriticalSection(rcx)
	rdi = DeleteCriticalSection
	rcx = r13
	DeleteCriticalSection(rcx)
	rcx = rbp
	DeleteCriticalSection(rcx)
	rcx = rbx + 0x40<64>
	DeleteCriticalSection(rcx)
	rcx = rbx
	free(rcx)
	goto l00000000004215E4
	// succ:  l00000000004215E4
l0000000000421714:
	Mem0[rdi:word64] = 0<64>
	sil = sil ^ sil
	SZO = cond(sil)
	C = false
	goto l0000000000421617
	// succ:  l0000000000421617
l0000000000421723:
	rcx = 0x0000000000491472<p64>
	r8 = 0x0000000000420D10<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE5A0<p64>:word64] = rax
	goto l0000000000421627
	// succ:  l0000000000421627
l0000000000421750:
	rcx = 0x0000000000491472<p64>
	r8 = 0x0000000000420D10<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE5A0<p64>:word64] = rax
	goto l0000000000421603
	// succ:  l0000000000421603
fn0000000000421590_exit:


// fn0000000000421780
// Return size: 8
define fn0000000000421780
fn0000000000421780_entry:
	rsp = fp
	// succ:  l0000000000421780
l0000000000421780:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004217B0
	// succ:  l000000000042178B l00000000004217B0
l000000000042178B:
	rbx = Mem0[rcx:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l00000000004217B0
	// succ:  l0000000000421793 l00000000004217B0
l0000000000421793:
	SCZO = cond(rbx - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l00000000004217C0
	// succ:  l0000000000421799 l00000000004217C0
l0000000000421799:
	SCZO = cond(Mem0[rbx:word32] - 0xC0BAB1FD<32>)
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l00000000004217C4
	// succ:  l00000000004217A6 l00000000004217C4
l00000000004217A6:
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000421780_exit
l00000000004217B0:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000421780_exit
l00000000004217C0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004217A6
	// succ:  l00000000004217A6
l00000000004217C4:
	rsi = rbx + 0x18<64>
	rcx = rsi
	EnterCriticalSection(rcx)
	eax = Mem0[rbx + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000421820
	// succ:  l00000000004217D8 l0000000000421820
l00000000004217D8:
	edx = Mem0[rbx + 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000421870
	// succ:  l00000000004217E3 l0000000000421870
l00000000004217E3:
	edx = edx - 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx + 8<64>:word32] = edx
	Mem0[rbx + 0xC<64>:word32] = eax
	// succ:  l00000000004217EF
l00000000004217EF:
	rcx = rsi
	LeaveCriticalSection(rcx)
	rcx = Mem0[rbx + 0xA0<64>:word64]
	r9 = rbx + 0x68<64>
	r8 = rbx + 0x40<64>
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000421812_thunk_fn0000000000420D20
l0000000000421812_thunk_fn0000000000420D20:
	call fn0000000000420D20 (retsize: 0;)
	return
	// succ:  fn0000000000421780_exit
l0000000000421820:
	eax = Mem0[rbx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[rbx + 8<64>:word32] - eax)
	branch Test(LE,SZO) l0000000000421870
	// succ:  l0000000000421828 l0000000000421870
l0000000000421828:
	rcx = Mem0[rbx + 0xA8<64>:word64]
	rax = rbx + 0x98<64>
	r9 = rbx + 0x70<64>
	r8d = 0xFFFFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000421500 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000421890
	// succ:  l0000000000421853 l0000000000421890
l0000000000421853:
	eax = Mem0[rbx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000421880
	// succ:  l000000000042185A l0000000000421880
l000000000042185A:
	eax = Mem0[rbx + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042185D
l000000000042185D:
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx + 0xC<64>:word32] = 1<32>
	Mem0[rbx + 8<64>:word32] = eax
	goto l00000000004217EF
	// succ:  l00000000004217EF
l0000000000421870:
	rcx = rsi
	LeaveCriticalSection(rcx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004217A6
	// succ:  l00000000004217A6
l0000000000421880:
	edx = Mem0[rbx + 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0x10<64>:word32] = 0<32>
	edx = edx - eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042185D
	// succ:  l000000000042185D
l0000000000421890:
	Mem0[rsp + 0x3C<64>:word32] = eax
	rcx = rsi
	LeaveCriticalSection(rcx)
	eax = Mem0[rsp + 0x3C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l00000000004217A6
	// succ:  l00000000004217A6
fn0000000000421780_exit:


// fn00000000004218B0
// Return size: 8
define fn00000000004218B0
fn00000000004218B0_entry:
	rsp = fp
	// succ:  l00000000004218B0
l00000000004218B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004218E0
	// succ:  l00000000004218BC l00000000004218E0
l00000000004218BC:
	rbx = Mem0[rcx:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l00000000004218E0
	// succ:  l00000000004218C4 l00000000004218E0
l00000000004218C4:
	SCZO = cond(rbx - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l00000000004218F0
	// succ:  l00000000004218CA l00000000004218F0
l00000000004218CA:
	SCZO = cond(Mem0[rbx:word32] - 0xC0BAB1FD<32>)
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l00000000004218F4
	// succ:  l00000000004218D7 l00000000004218F4
l00000000004218D7:
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004218B0_exit
l00000000004218E0:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004218B0_exit
l00000000004218F0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004218D7
	// succ:  l00000000004218D7
l00000000004218F4:
	rsi = rbx + 0x18<64>
	rcx = rsi
	EnterCriticalSection(rcx)
	eax = Mem0[rbx + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000421945
	// succ:  l0000000000421908 l0000000000421945
l0000000000421908:
	edi = Mem0[rbx + 8<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l0000000000421990
	// succ:  l0000000000421913 l0000000000421990
l0000000000421913:
	eax = eax + edi
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx + 8<64>:word32] = 0<32>
	Mem0[rbx + 0xC<64>:word32] = eax
	// succ:  l000000000042191F
l000000000042191F:
	rcx = rsi
	LeaveCriticalSection(rcx)
	rcx = Mem0[rbx + 0xA0<64>:word64]
	r9 = rbx + 0x68<64>
	r8 = rbx + 0x40<64>
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000421940_thunk_fn0000000000420D20
l0000000000421940_thunk_fn0000000000420D20:
	call fn0000000000420D20 (retsize: 0;)
	return
	// succ:  fn00000000004218B0_exit
l0000000000421945:
	eax = Mem0[rbx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[rbx + 8<64>:word32] - eax)
	branch Test(LE,SZO) l0000000000421990
	// succ:  l000000000042194D l0000000000421990
l000000000042194D:
	rcx = Mem0[rbx + 0xA8<64>:word64]
	rax = rbx + 0x98<64>
	r9 = rbx + 0x70<64>
	r8d = 0xFFFFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000421500 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004219AE
	// succ:  l0000000000421978 l00000000004219AE
l0000000000421978:
	eax = Mem0[rbx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004219A0
	// succ:  l000000000042197F l00000000004219A0
l000000000042197F:
	edi = Mem0[rbx + 8<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	// succ:  l0000000000421982
l0000000000421982:
	Mem0[rbx + 8<64>:word32] = 0<32>
	Mem0[rbx + 0xC<64>:word32] = edi
	goto l000000000042191F
	// succ:  l000000000042191F
l0000000000421990:
	rcx = rsi
	LeaveCriticalSection(rcx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004218D7
	// succ:  l00000000004218D7
l00000000004219A0:
	edi = Mem0[rbx + 8<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	Mem0[rbx + 0x10<64>:word32] = 0<32>
	edi = edi - eax
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	goto l0000000000421982
	// succ:  l0000000000421982
l00000000004219AE:
	Mem0[rsp + 0x3C<64>:word32] = eax
	rcx = rsi
	LeaveCriticalSection(rcx)
	eax = Mem0[rsp + 0x3C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l00000000004218D7
	// succ:  l00000000004218D7
fn00000000004218B0_exit:


// fn00000000004219D0
// Return size: 8
define fn00000000004219D0
fn00000000004219D0_entry:
	rsp = fp
	// succ:  l00000000004219D0
l00000000004219D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp + 0xFFFFFFFFFFFFFF80<64>
	SCZO = cond(rsp)
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000421A00
	// succ:  l00000000004219E4 l0000000000421A00
l00000000004219E4:
	rsi = Mem0[rcx:word64]
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000421A00
	// succ:  l00000000004219EC l0000000000421A00
l00000000004219EC:
	SCZO = cond(rsi - 0xFFFFFFFFFFFFFFFF<64>)
	rdi = rdx
	rbx = rcx
	branch Test(EQ,Z) l0000000000421A10
	// succ:  l00000000004219F8 l0000000000421A10
l00000000004219F8:
	SCZO = cond(Mem0[rsi:word32] - 0xC0BAB1FD<32>)
	branch Test(EQ,Z) l0000000000421A23
	// succ:  l0000000000421A00 l0000000000421A23
l0000000000421A00:
	rsp = rsp - 0xFFFFFFFFFFFFFF80<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004219D0_exit
l0000000000421A10:
	call fn0000000000421170 (retsize: 8;)
	SZO = cond(eax & 0xFFFFFFEF<32>)
	C = false
	Mem0[rsp + 0x3C<64>:word32] = eax
	branch Test(NE,Z) l0000000000421A00
	// succ:  l0000000000421A20 l0000000000421A00
l0000000000421A20:
	rsi = Mem0[rbx:word64]
	// succ:  l0000000000421A23
l0000000000421A23:
	rcx = Mem0[rsi + 0xA8<64>:word64]
	rbp = rsi + 0x98<64>
	rbx = rsi + 0x70<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8d = 0xFFFFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x20<64>:word64] = rbp
	r9 = rbx
	call fn0000000000421500 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	Mem0[rsp + 0x3C<64>:word32] = eax
	branch Test(NE,Z) l0000000000421A00
	// succ:  l0000000000421A52 l0000000000421A00
l0000000000421A52:
	r12 = rsi + 0x18<64>
	rcx = r12
	EnterCriticalSection(rcx)
	v20 = Mem0[rsi + 8<64>:word32] + 1<32>
	Mem0[rsi + 8<64>:word32] = v20
	SCZO = cond(v20)
	rcx = r12
	LeaveCriticalSection(rcx)
	rcx = Mem0[rsi + 0xA8<64>:word64]
	r9 = rbp
	r8 = rbx
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000420D20 (retsize: 8;)
	rsp = rsp + 8<64>
	SZO = cond(eax & eax)
	C = false
	Mem0[rsp + 0x3C<64>:word32] = eax
	branch Test(NE,Z) l0000000000421A00
	// succ:  l0000000000421A8F l0000000000421A00
l0000000000421A8F:
	rax = rsp + 0x3C<64>
	Mem0[rsp + 0x40<64>:word64] = rsi
	Mem0[rsp + 0x48<64>:word64] = rdi
	Mem0[rsp + 0x50<64>:word64] = rax
	rax = 0x0000000000421B30<p64>
	Mem0[rsp + 0x60<64>:word64] = rax
	rax = rsp + 0x40<64>
	Mem0[rsp + 0x68<64>:word64] = rax
	call fn000000000041EA40 (retsize: 8;)
	rax = Mem0[rax:word64]
	Mem0[rsp + 0x70<64>:word64] = rax
	__mfence()
	call fn000000000041EA40 (retsize: 8;)
	rdx = rsp + 0x60<64>
	rcx = rdi
	Mem0[rax:word64] = rdx
	__mfence()
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	Mem0[rsp + 0x3C<64>:word32] = eax
	branch Test(EQ,Z) l0000000000421B08
	// succ:  l0000000000421AE9 l0000000000421B08
l0000000000421AE9:
	call fn000000000041EA40 (retsize: 8;)
	rdx = Mem0[rsp + 0x70<64>:word64]
	Mem0[rax:word64] = rdx
	rcx = Mem0[rsp + 0x68<64>:word64]
	call Mem0[rsp + 0x60<64>:word64] (retsize: 8;)
	eax = Mem0[rsp + 0x3C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000421A00
	// succ:  l0000000000421A00
l0000000000421B08:
	rcx = Mem0[rsi + 0xA0<64>:word64]
	rax = rsi + 0x68<64>
	r9 = rsi + 0x40<64>
	r8d = 0xFFFFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000421500 (retsize: 8;)
	Mem0[rsp + 0x3C<64>:word32] = eax
	goto l0000000000421AE9
	// succ:  l0000000000421AE9
fn00000000004219D0_exit:


// fn0000000000421B30
// Return size: 8
define fn0000000000421B30
fn0000000000421B30_entry:
	rsp = fp
	// succ:  l0000000000421B30
l0000000000421B30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rcx:word64]
	rsi = rcx
	rbp = rbx + 0x18<64>
	rcx = rbp
	EnterCriticalSection(rcx)
	edi = Mem0[rbx + 0xC<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l0000000000421BB0
	// succ:  l0000000000421B56 l0000000000421BB0
l0000000000421B56:
	eax = SLICE(rdi - 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	rcx = rbp
	Mem0[rbx + 0xC<64>:word32] = eax
	LeaveCriticalSection(rcx)
	SCZO = cond(edi - 1<32>)
	branch Test(NE,Z) l0000000000421B90
	// succ:  l0000000000421B6A l0000000000421B90
l0000000000421B6A:
	rcx = Mem0[rbx + 0xA8<64>:word64]
	r9 = rbx + 0x98<64>
	r8 = rbx + 0x70<64>
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000420D20 (retsize: 8;)
	rsp = rsp + 8<64>
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000421B9D
	// succ:  l0000000000421B8A l0000000000421B9D
l0000000000421B8A:
	// succ:  l0000000000421B90
l0000000000421B90:
	rcx = Mem0[rsi + 8<64>:word64]
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000421BA3
	// succ:  l0000000000421B9D l0000000000421BA3
l0000000000421B9D:
	rdx = Mem0[rsi + 0x10<64>:word64]
	Mem0[rdx:word32] = eax
	// succ:  l0000000000421BA3
l0000000000421BA3:
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000421B30_exit
l0000000000421BB0:
	eax = Mem0[rbx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x3FFFFFFE<32>)
	branch Test(EQ,Z) l0000000000421BD0
	// succ:  l0000000000421BBA l0000000000421BD0
l0000000000421BBA:
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx + 0x10<64>:word32] = eax
	// succ:  l0000000000421BC0
l0000000000421BC0:
	rcx = rbp
	LeaveCriticalSection(rcx)
	goto l0000000000421B90
	// succ:  l0000000000421B90
l0000000000421BD0:
	rcx = Mem0[rbx + 0xA8<64>:word64]
	r12 = rbx + 0x98<64>
	rdi = rbx + 0x70<64>
	Mem0[rbx + 0x10<64>:word32] = 0x3FFFFFFF<32>
	r8d = 0xFFFFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsp + 0x20<64>:word64] = r12
	r9 = rdi
	call fn0000000000421500 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	r13d = eax
	r13 = CONVERT(r13d, word32, uint64)
	branch Test(NE,Z) l0000000000421C32
	// succ:  l0000000000421C08 l0000000000421C32
l0000000000421C08:
	eax = Mem0[rbx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	v23 = Mem0[rbx + 8<64>:word32] - eax
	Mem0[rbx + 8<64>:word32] = v23
	SCZO = cond(v23)
	r9 = r12
	rcx = Mem0[rbx + 0xA8<64>:word64]
	r8 = rdi
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000420D20 (retsize: 8;)
	rsp = rsp + 8<64>
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000421C47
	// succ:  l0000000000421C29 l0000000000421C47
l0000000000421C29:
	Mem0[rbx + 0x10<64>:word32] = 0<32>
	goto l0000000000421BC0
	// succ:  l0000000000421BC0
l0000000000421C32:
	rcx = rbp
	LeaveCriticalSection(rcx)
	rdx = Mem0[rsi + 0x10<64>:word64]
	Mem0[rdx:word32] = r13d
	goto l0000000000421BA3
	// succ:  l0000000000421BA3
l0000000000421C47:
	Mem0[rsp + 0x3C<64>:word32] = eax
	rcx = rbp
	LeaveCriticalSection(rcx)
	rdx = Mem0[rsi + 0x10<64>:word64]
	eax = Mem0[rsp + 0x3C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdx:word32] = eax
	goto l0000000000421BA3
	// succ:  l0000000000421BA3
fn0000000000421B30_exit:


// fn0000000000421C70
// Return size: 0
define fn0000000000421C70
fn0000000000421C70_entry:
	rsp = fp
	// succ:  l0000000000421C70
l0000000000421C70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp + 0xFFFFFFFFFFFFFF80<64>
	SCZO = cond(rsp)
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000421CA6
	// succ:  l0000000000421C84 l0000000000421CA6
l0000000000421C84:
	rbx = Mem0[rcx:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000421CA6
	// succ:  l0000000000421C8C l0000000000421CA6
l0000000000421C8C:
	SCZO = cond(rbx - 0xFFFFFFFFFFFFFFFF<64>)
	ebp = r9d
	rbp = CONVERT(ebp, word32, uint64)
	rdi = r8
	rsi = rdx
	r12 = rcx
	branch Test(EQ,Z) l0000000000421CB1
	// succ:  l0000000000421C9E l0000000000421CB1
l0000000000421C9E:
	SCZO = cond(Mem0[rbx:word32] - 0xC0BAB1FD<32>)
	branch Test(EQ,Z) l0000000000421CC5
	// succ:  l0000000000421CA6 l0000000000421CC5
l0000000000421CA6:
	rsp = rsp - 0xFFFFFFFFFFFFFF80<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000421C70_exit
l0000000000421CB1:
	call fn0000000000421170 (retsize: 8;)
	SZO = cond(eax & 0xFFFFFFEF<32>)
	C = false
	Mem0[rsp + 0x3C<64>:word32] = eax
	branch Test(NE,Z) l0000000000421CA6
	// succ:  l0000000000421CC1 l0000000000421CA6
l0000000000421CC1:
	rbx = Mem0[r12:word64]
	// succ:  l0000000000421CC5
l0000000000421CC5:
	SZO = cond(ebp & ebp)
	C = false
	rcx = rdi
	branch Test(NE,Z) l0000000000421DB5
	// succ:  l0000000000421CD0 l0000000000421DB5
l0000000000421CD0:
	call fn00000000004232C0 (retsize: 8;)
	edx = 0xFFFFFFFE<32>
	rdx = CONVERT(edx, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(rax - rdx)
	branch Test(ULE,CZ) l0000000000421CE6
	// succ:  l0000000000421CE1 l0000000000421CE6
l0000000000421CE1:
	edi = 0xFFFFFFFF<32>
	rdi = CONVERT(edi, word32, uint64)
	// succ:  l0000000000421CE6
l0000000000421CE6:
	rcx = Mem0[rbx + 0xA8<64>:word64]
	r12 = rbx + 0x98<64>
	rbp = rbx + 0x70<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8d = 0xFFFFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x20<64>:word64] = r12
	r9 = rbp
	call fn0000000000421500 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	Mem0[rsp + 0x3C<64>:word32] = eax
	branch Test(NE,Z) l0000000000421CA6
	// succ:  l0000000000421D15 l0000000000421CA6
l0000000000421D15:
	v24 = Mem0[rbx + 8<64>:word32] + 1<32>
	Mem0[rbx + 8<64>:word32] = v24
	SCZO = cond(v24)
	rcx = Mem0[rbx + 0xA8<64>:word64]
	r9 = r12
	r8 = rbp
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000420D20 (retsize: 8;)
	rsp = rsp + 8<64>
	SZO = cond(eax & eax)
	C = false
	Mem0[rsp + 0x3C<64>:word32] = eax
	branch Test(NE,Z) l0000000000421CA6
	// succ:  l0000000000421D3C l0000000000421CA6
l0000000000421D3C:
	rax = rsp + 0x3C<64>
	Mem0[rsp + 0x40<64>:word64] = rbx
	Mem0[rsp + 0x48<64>:word64] = rsi
	Mem0[rsp + 0x50<64>:word64] = rax
	rax = 0x0000000000421B30<p64>
	Mem0[rsp + 0x60<64>:word64] = rax
	rax = rsp + 0x40<64>
	Mem0[rsp + 0x68<64>:word64] = rax
	call fn000000000041EA40 (retsize: 8;)
	rax = Mem0[rax:word64]
	Mem0[rsp + 0x70<64>:word64] = rax
	__mfence()
	call fn000000000041EA40 (retsize: 8;)
	rdx = rsp + 0x60<64>
	rcx = rsi
	Mem0[rax:word64] = rdx
	__mfence()
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	Mem0[rsp + 0x3C<64>:word32] = eax
	branch Test(EQ,Z) l0000000000421DCF
	// succ:  l0000000000421D96 l0000000000421DCF
l0000000000421D96:
	call fn000000000041EA40 (retsize: 8;)
	rdx = Mem0[rsp + 0x70<64>:word64]
	Mem0[rax:word64] = rdx
	rcx = Mem0[rsp + 0x68<64>:word64]
	call Mem0[rsp + 0x60<64>:word64] (retsize: 8;)
	eax = Mem0[rsp + 0x3C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000421CA6
	// succ:  l0000000000421CA6
l0000000000421DB5:
	call fn0000000000423290 (retsize: 8;)
	edx = 0xFFFFFFFE<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(rax - rdx)
	branch Test(UGT,CZ) l0000000000421CE1
	// succ:  l0000000000421DC8 l0000000000421CE1
l0000000000421DC8:
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	goto l0000000000421CE6
	// succ:  l0000000000421CE6
l0000000000421DCF:
	rcx = Mem0[rbx + 0xA0<64>:word64]
	rax = rbx + 0x68<64>
	r9 = rbx + 0x40<64>
	r8d = edi
	r8 = CONVERT(r8d, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000421500 (retsize: 8;)
	Mem0[rsp + 0x3C<64>:word32] = eax
	goto l0000000000421D96
	// succ:  l0000000000421D96
fn0000000000421C70_exit:


// fn0000000000421E00
// Return size: 8
define fn0000000000421E00
fn0000000000421E00_entry:
	rsp = fp
	// succ:  l0000000000421E00
l0000000000421E00:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	// succ:  l0000000000421E03_thunk_fn0000000000421C70
l0000000000421E03_thunk_fn0000000000421C70:
	call fn0000000000421C70 (retsize: 0;)
	return
	// succ:  fn0000000000421E00_exit
fn0000000000421E00_exit:


// fn0000000000421E10
// Return size: 0
define fn0000000000421E10
fn0000000000421E10_entry:
	rsp = fp
	// succ:  l0000000000421E10
l0000000000421E10:
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	// succ:  l0000000000421E16_thunk_fn0000000000421C70
l0000000000421E16_thunk_fn0000000000421C70:
	call fn0000000000421C70 (retsize: 0;)
	return
	// succ:  fn0000000000421E10_exit
fn0000000000421E10_exit:


// fn0000000000421E20
// Return size: 8
define fn0000000000421E20
fn0000000000421E20_entry:
	rsp = fp
	// succ:  l0000000000421E20
l0000000000421E20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = CONVERT(r9d, word32, int64)
	eax = r8d
	rax = CONVERT(eax, word32, uint64)
	rsi = rdx
	eax = eax - ebx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - 0x3F<32>)
	branch Test(GT,SZO) l0000000000421E37
	// succ:  l0000000000421E36 l0000000000421E37
l0000000000421E36:
	int3()
	// succ:  l0000000000421E37
l0000000000421E37:
	ecx = CONVERT(cx, word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rdx = rsi
	eax = GetAtomNameA(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000421E93
	// succ:  l0000000000421E47 l0000000000421E93
l0000000000421E47:
	int3()
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000421E4D
l0000000000421E4D:
	rdx = rsi + rbx
	r10d = 0x40<32>
	r10 = CONVERT(r10d, word32, uint64)
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	goto l0000000000421E6A
	// succ:  l0000000000421E6A
l0000000000421E60:
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	SCZO = cond(r8 - 0x40<64>)
	branch Test(EQ,Z) l0000000000421E8C
	// succ:  l0000000000421E6A l0000000000421E8C
l0000000000421E6A:
	SCZO = cond(Mem0[rdx + r8:byte] - 0x41<8>)
	branch Test(NE,Z) l0000000000421E60
	// succ:  l0000000000421E71 l0000000000421E60
l0000000000421E71:
	ecx = r10d
	rcx = CONVERT(ecx, word32, uint64)
	esi = r9d
	rsi = CONVERT(esi, word32, uint64)
	ecx = ecx - r8d
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	esi = esi << cl
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	rcx = CONVERT(esi, word32, int64)
	rax = rax | rcx
	SZO = cond(rax)
	C = false
	SCZO = cond(r8 - 0x40<64>)
	branch Test(NE,Z) l0000000000421E6A
	// succ:  l0000000000421E8C l0000000000421E6A
l0000000000421E8C:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000421E20_exit
l0000000000421E93:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000421E4D
	// succ:  l0000000000421E4D
fn0000000000421E20_exit:


// fn0000000000421EA0
// Return size: 8
define fn0000000000421EA0
fn0000000000421EA0_entry:
	rsp = fp
	// succ:  l0000000000421EA0
l0000000000421EA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	rdi = rcx
	r12 = CONVERT(edx, word32, int64)
	r13 = r8
	eax = strlen(rcx)
	r14 = rax
	ebx = SLICE(rax + 0xF<64>, word32, 0)
	rbx = CONVERT(ebx, word32, uint64)
	eax = SLICE(rax + 0x51<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rax = rax + 0xF<64>
	SCZO = cond(rax)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	r15 = CONVERT(r14d, word32, int64)
	rax = 0x656D68732D636367<64>
	rsi = rsp + 0x20<64>
	rcx = rsp + 0x2F<64>
	r8 = r15
	rdx = rdi
	Mem0[rsp + 0x20<64>:word64] = rax
	eax = 0x326D<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x28<64>:word32] = 0x64742D6D<32>
	Mem0[rsp + 0x2C<64>:word16] = ax
	rbx = CONVERT(ebx, word32, int64)
	Mem0[rsp + 0x2E<64>:byte] = 0x2D<8>
	rax = memcpy(rcx, rdx, r8)
	rax = rsi + 0x10<64> + r15
	r15d = SLICE(r14 + 0x50<64>, word32, 0)
	r15 = CONVERT(r15d, word32, uint64)
	rdx = 0x6161616161616161<64>
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rsi
	Mem0[rax:word64] = rdx
	Mem0[rax + 8<64>:word64] = rdx
	Mem0[rax + 0x10<64>:word64] = rdx
	Mem0[rax + 0x18<64>:word64] = rdx
	Mem0[rax + 0x20<64>:word64] = rdx
	Mem0[rax + 0x28<64>:word64] = rdx
	Mem0[rax + 0x30<64>:word64] = rdx
	Mem0[rax + 0x38<64>:word64] = rdx
	rax = CONVERT(r15d, word32, int64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x20<64> + rax:byte] = 0<8>
	Mem0[rsp + 0x20<64> + rbx:byte] = 0<8>
	rax = CreateMutexA(rcx, rdx, r8)
	Mem0[rsp + 0x20<64> + rbx:byte] = 0x2D<8>
	rdi = rax
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	eax = WaitForSingleObject(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000421F89
	// succ:  l0000000000421F88 l0000000000421F89
l0000000000421F88:
	int3()
	// succ:  l0000000000421F89
l0000000000421F89:
	rcx = rsi
	ax = FindAtomA(rcx)
	SZO = cond(ax & ax)
	C = false
	branch Test(NE,Z) l0000000000422022
	// succ:  l0000000000421F9B l0000000000422022
l0000000000421F9B:
	rcx = r12
	r14d = r14d + 0x10<32>
	r14 = CONVERT(r14d, word32, uint64)
	SCZO = cond(r14d)
	rax = malloc(rcx)
	r10d = 0x40<32>
	r10 = CONVERT(r10d, word32, uint64)
	rbx = rax
	// succ:  l0000000000421FB0
l0000000000421FB0:
	C = __bt(rbx, r10)
	branch Test(UGE,C) l0000000000421FC4
	// succ:  l0000000000421FB6 l0000000000421FC4
l0000000000421FB6:
	r11d = r15d
	r11 = CONVERT(r11d, word32, uint64)
	r11d = r11d - r10d
	r11 = CONVERT(r11d, word32, uint64)
	SCZO = cond(r11d)
	r11 = CONVERT(r11d, word32, int64)
	Mem0[rsi + r11:byte] = 0x41<8>
	// succ:  l0000000000421FC4
l0000000000421FC4:
	r10d = r10d - 1<32>
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	branch Test(NE,Z) l0000000000421FB0
	// succ:  l0000000000421FCA l0000000000421FB0
l0000000000421FCA:
	rcx = rsi
	ax = AddAtomA(rcx)
	SZO = cond(ax & ax)
	C = false
	branch Test(EQ,Z) l000000000042201F
	// succ:  l0000000000421FD8 l000000000042201F
l0000000000421FD8:
	rdx = rsi
	ecx = CONVERT(ax, word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	r9d = r14d
	r9 = CONVERT(r9d, word32, uint64)
	r8d = r15d
	r8 = CONVERT(r8d, word32, uint64)
	call fn0000000000421E20 (retsize: 8;)
	SCZO = cond(rax - rbx)
	rsi = rax
	branch Test(EQ,Z) l0000000000422039
	// succ:  l0000000000421FF1 l0000000000422039
l0000000000421FF1:
	rcx = rbx
	free(rcx)
	// succ:  l0000000000421FF9
l0000000000421FF9:
	rcx = rdi
	eax = ReleaseMutex(rcx)
	rcx = rdi
	eax = CloseHandle(rcx)
	rax = rsi
	rsp = rbp - 0x58<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000421EA0_exit
l000000000042201F:
	int3()
	goto l0000000000421FD8
	// succ:  l0000000000421FD8
l0000000000422022:
	r9d = SLICE(r14 + 0x10<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	rdx = rsi
	ecx = CONVERT(ax, word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	r8d = r15d
	r8 = CONVERT(r8d, word32, uint64)
	call fn0000000000421E20 (retsize: 8;)
	rsi = rax
	goto l0000000000421FF9
	// succ:  l0000000000421FF9
l0000000000422039:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = r12
	rcx = rbx
	rax = memset(rcx, rdx, r8)
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000421FF9
	// succ:  l000000000042204B l0000000000421FF9
l000000000042204B:
	rcx = rbx
	call fn0000000000000000 (retsize: 8;)
	goto l0000000000421FF9
	// succ:  l0000000000421FF9
fn0000000000421EA0_exit:


// fn0000000000422060
// Return size: 8
define fn0000000000422060
fn0000000000422060_entry:
	rsp = fp
	// succ:  l0000000000422060
l0000000000422060:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[0x00000000004AE5C0<p64>:word64]
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042208A
	// succ:  l000000000042208A
l0000000000422073:
	edx = Mem0[rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000422088
	// succ:  l0000000000422079 l0000000000422088
l0000000000422079:
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	v15 = Mem0[rax:word32]
	Mem0[rax:word32] = edx
	edx = v15
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l00000000004220B0
	// succ:  l0000000000422081 l00000000004220B0
l0000000000422081:
	rax = Mem0[0x00000000004AE5C0<p64>:word64]
	// succ:  l0000000000422088
l0000000000422088:
	__pause()
	// succ:  l000000000042208A
l000000000042208A:
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l0000000000422073
	// succ:  l000000000042208F l0000000000422073
l000000000042208F:
	rcx = 0x0000000000491490<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE5C0<p64>:word64] = rax
	goto l0000000000422073
	// succ:  l0000000000422073
l00000000004220B0:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422060_exit
fn0000000000422060_exit:


// fn00000000004220C0
// Return size: 8
define fn00000000004220C0
fn00000000004220C0_entry:
	rsp = fp
	// succ:  l00000000004220C0
l00000000004220C0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x00000000004AE5C0<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004220E0
	// succ:  l00000000004220D0 l00000000004220E0
l00000000004220D0:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	v10 = Mem0[rax:word32]
	Mem0[rax:word32] = edx
	edx = v10
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004220C0_exit
l00000000004220E0:
	rcx = 0x0000000000491490<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	Mem0[0x00000000004AE5C0<p64>:word64] = rax
	goto l00000000004220D0
	// succ:  l00000000004220D0
fn00000000004220C0_exit:


// fn0000000000422100
// Return size: 8
define fn0000000000422100
fn0000000000422100_entry:
	rsp = fp
	// succ:  l0000000000422100
l0000000000422100:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	rdi = rcx
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = calloc(rcx, rdx)
	rbx = rax
	eax = 0xC<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000422146
	// succ:  l0000000000422126 l0000000000422146
l0000000000422126:
	rsi = rbx + 8<64>
	rcx = rsi
	InitializeCriticalSection(rcx)
	edx = 0xFA0<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	eax = SetCriticalSectionSpinCount(rcx, rdx)
	Mem0[rdi:word64] = rbx
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000422146
l0000000000422146:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422100_exit
fn0000000000422100_exit:


// fn0000000000422150
// Return size: 8
define fn0000000000422150
fn0000000000422150_entry:
	rsp = fp
	// succ:  l0000000000422150
l0000000000422150:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000422060 (retsize: 8;)
	SCZO = cond(Mem0[rbx:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l0000000000422170
	// succ:  l0000000000422163 l0000000000422170
l0000000000422163:
	call fn00000000004220C0 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000042216A
l000000000042216A:
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422150_exit
l0000000000422170:
	rcx = rbx
	call fn0000000000422100 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NS,S) l0000000000422163
	// succ:  l000000000042217C l0000000000422163
l000000000042217C:
	Mem0[rsp + 0x2C<64>:word32] = eax
	call fn00000000004220C0 (retsize: 8;)
	eax = Mem0[rsp + 0x2C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042216A
	// succ:  l000000000042216A
fn0000000000422150_exit:


// fn0000000000422190
// Return size: 8
define fn0000000000422190
fn0000000000422190_entry:
	rsp = fp
	// succ:  l0000000000422190
l0000000000422190:
	rcx = 0x0000000000491490<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000042219F_thunk_fn0000000000421EA0
l000000000042219F_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn0000000000422190_exit
fn0000000000422190_exit:


// fn00000000004221B0
// Return size: 8
define fn00000000004221B0
fn00000000004221B0_entry:
	rsp = fp
	// succ:  l00000000004221B0
l00000000004221B0:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004221C0
	// succ:  l00000000004221B5 l00000000004221C0
l00000000004221B5:
	SZO = cond(edx & edx)
	C = false
	eax = 0x81<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l00000000004221D0
	// succ:  l00000000004221BE l00000000004221D0
l00000000004221BE:
	return
	// succ:  fn00000000004221B0_exit
l00000000004221C0:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004221B0_exit
l00000000004221D0:
	// succ:  l00000000004221D0_thunk_fn0000000000422100
l00000000004221D0_thunk_fn0000000000422100:
	call fn0000000000422100 (retsize: 0;)
	return
	// succ:  fn00000000004221B0_exit
fn00000000004221B0_exit:


// fn00000000004221E0
// Return size: 8
define fn00000000004221E0
fn00000000004221E0_entry:
	rsp = fp
	// succ:  l00000000004221E0
l00000000004221E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000422222
	// succ:  l00000000004221F1 l0000000000422222
l00000000004221F1:
	SCZO = cond(Mem0[rcx:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000422222
	// succ:  l00000000004221F7 l0000000000422222
l00000000004221F7:
	rbx = rcx
	call fn0000000000422060 (retsize: 8;)
	rsi = Mem0[rbx:word64]
	SCZO = cond(rsi - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l0000000000422242
	// succ:  l0000000000422208 l0000000000422242
l0000000000422208:
	edi = Mem0[rsi:word32]
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l0000000000422230
	// succ:  l000000000042220E l0000000000422230
l000000000042220E:
	eax = GetCurrentThreadId()
	SCZO = cond(edi - eax)
	branch Test(EQ,Z) l0000000000422230
	// succ:  l0000000000422218 l0000000000422230
l0000000000422218:
	call fn00000000004220C0 (retsize: 8;)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000422222
l0000000000422222:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004221E0_exit
l0000000000422230:
	rcx = rsi + 8<64>
	DeleteCriticalSection(rcx)
	rcx = rsi
	free(rcx)
	// succ:  l0000000000422242
l0000000000422242:
	Mem0[rbx:word64] = 0<64>
	call fn00000000004220C0 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004221E0_exit
fn00000000004221E0_exit:


// fn0000000000422260
// Return size: 8
define fn0000000000422260
fn0000000000422260_entry:
	rsp = fp
	// succ:  l0000000000422260
l0000000000422260:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000422299
	// succ:  l0000000000422270 l0000000000422299
l0000000000422270:
	rsi = Mem0[rcx:word64]
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000422299
	// succ:  l0000000000422278 l0000000000422299
l0000000000422278:
	SCZO = cond(rsi - 0xFFFFFFFFFFFFFFFF<64>)
	rbx = rcx
	branch Test(EQ,Z) l00000000004222A0
	// succ:  l0000000000422281 l00000000004222A0
l0000000000422281:
	rcx = rsi + 8<64>
	EnterCriticalSection(rcx)
	eax = GetCurrentThreadId()
	v12 = Mem0[rsi + 4<64>:word32] + 1<32>
	Mem0[rsi + 4<64>:word32] = v12
	SCZO = cond(v12)
	Mem0[rsi:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000422299
l0000000000422299:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422260_exit
l00000000004222A0:
	call fn0000000000422150 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000422299
	// succ:  l00000000004222A9 l0000000000422299
l00000000004222A9:
	rsi = Mem0[rbx:word64]
	goto l0000000000422281
	// succ:  l0000000000422281
fn0000000000422260_exit:


// fn00000000004222B0
// Return size: 8
define fn00000000004222B0
fn00000000004222B0_entry:
	rsp = fp
	// succ:  l00000000004222B0
l00000000004222B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004222E6
	// succ:  l00000000004222C0 l00000000004222E6
l00000000004222C0:
	rsi = Mem0[rcx:word64]
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l00000000004222E6
	// succ:  l00000000004222C8 l00000000004222E6
l00000000004222C8:
	SCZO = cond(rsi - 0xFFFFFFFFFFFFFFFF<64>)
	rbx = rcx
	branch Test(EQ,Z) l0000000000422300
	// succ:  l00000000004222D1 l0000000000422300
l00000000004222D1:
	rcx = rsi + 8<64>
	eax = TryEnterCriticalSection(rcx)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	eax = 0x10<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l00000000004222F0
	// succ:  l00000000004222E6 l00000000004222F0
l00000000004222E6:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004222B0_exit
l00000000004222F0:
	eax = GetCurrentThreadId()
	v15 = Mem0[rsi + 4<64>:word32] + 1<32>
	Mem0[rsi + 4<64>:word32] = v15
	SCZO = cond(v15)
	Mem0[rsi:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004222E6
	// succ:  l00000000004222E6
l0000000000422300:
	call fn0000000000422150 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l00000000004222E6
	// succ:  l0000000000422309 l00000000004222E6
l0000000000422309:
	rsi = Mem0[rbx:word64]
	goto l00000000004222D1
	// succ:  l00000000004222D1
fn00000000004222B0_exit:


// fn0000000000422310
// Return size: 8
define fn0000000000422310
fn0000000000422310_entry:
	rsp = fp
	// succ:  l0000000000422310
l0000000000422310:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042233F
	// succ:  l0000000000422320 l000000000042233F
l0000000000422320:
	rbx = Mem0[rcx:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000042233F
	// succ:  l0000000000422328 l000000000042233F
l0000000000422328:
	SCZO = cond(rbx - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l000000000042233A
	// succ:  l000000000042232E l000000000042233A
l000000000042232E:
	esi = Mem0[rbx:word32]
	rsi = CONVERT(esi, word32, uint64)
	eax = GetCurrentThreadId()
	SCZO = cond(esi - eax)
	branch Test(EQ,Z) l0000000000422350
	// succ:  l000000000042233A l0000000000422350
l000000000042233A:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042233F
l000000000042233F:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422310_exit
l0000000000422350:
	v13 = Mem0[rbx + 4<64>:word32] - 1<32>
	Mem0[rbx + 4<64>:word32] = v13
	SCZO = cond(v13)
	branch Test(NE,Z) l000000000042235C
	// succ:  l0000000000422356 l000000000042235C
l0000000000422356:
	Mem0[rbx:word32] = 0<32>
	// succ:  l000000000042235C
l000000000042235C:
	rcx = rbx + 8<64>
	LeaveCriticalSection(rcx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422310_exit
fn0000000000422310_exit:


// fn0000000000422370
// Return size: 8
define fn0000000000422370
fn0000000000422370_entry:
	rsp = fp
	// succ:  l0000000000422370
l0000000000422370:
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	return
	// succ:  fn0000000000422370_exit
fn0000000000422370_exit:


// fn0000000000422380
// Return size: 8
define fn0000000000422380
fn0000000000422380_entry:
	rsp = fp
	// succ:  l0000000000422380
l0000000000422380:
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	return
	// succ:  fn0000000000422380_exit
fn0000000000422380_exit:


// fn0000000000422390
// Return size: 8
define fn0000000000422390
fn0000000000422390_entry:
	rsp = fp
	// succ:  l0000000000422390
l0000000000422390:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	Mem0[rdx:word64] = 0<64>
	rcx = Mem0[0x00000000004AE5D8<p64>:word64]
	rdi = rdx
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000422451
	// succ:  l00000000004223B4 l0000000000422451
l00000000004223B4:
	call fn0000000000422260 (retsize: 8;)
	SZO = cond(rbx & rbx)
	C = false
	esi = 0x16<32>
	rsi = CONVERT(esi, word32, uint64)
	branch Test(EQ,Z) l00000000004223D9
	// succ:  l00000000004223C3 l00000000004223D9
l00000000004223C3:
	rcx = Mem0[rbx:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004223D9
	// succ:  l00000000004223CB l00000000004223D9
l00000000004223CB:
	SCZO = cond(rcx - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l0000000000422403
	// succ:  l00000000004223D1 l0000000000422403
l00000000004223D1:
	SCZO = cond(Mem0[rcx:word32] - 0xBAB1F0ED<32>)
	branch Test(EQ,Z) l00000000004223F4
	// succ:  l00000000004223D9 l00000000004223F4
l00000000004223D9:
	rcx = Mem0[0x00000000004AE5D8<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000422420
	// succ:  l00000000004223E5 l0000000000422420
l00000000004223E5:
	call fn0000000000422310 (retsize: 8;)
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422390_exit
l00000000004223F4:
	eax = Mem0[rcx + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	esi = 0x10<32>
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004223D9
	// succ:  l0000000000422400 l00000000004223D9
l0000000000422400:
	Mem0[rdi:word64] = rcx
	// succ:  l0000000000422403
l0000000000422403:
	Mem0[rbx:word64] = 0<64>
	rcx = Mem0[0x00000000004AE5D8<p64>:word64]
	sil = sil ^ sil
	SZO = cond(sil)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l00000000004223E5
	// succ:  l0000000000422419 l00000000004223E5
l0000000000422419:
	// succ:  l0000000000422420
l0000000000422420:
	r8 = 0x0000000000422370<p64>
	rcx = 0x00000000004914B0<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE5D8<p64>:word64] = rax
	call fn0000000000422310 (retsize: 8;)
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422390_exit
l0000000000422451:
	rcx = 0x00000000004914B0<p64>
	r8 = 0x0000000000422370<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE5D8<p64>:word64] = rax
	goto l00000000004223B4
	// succ:  l00000000004223B4
fn0000000000422390_exit:


// fn0000000000422480
// Return size: 8
define fn0000000000422480
fn0000000000422480_entry:
	rsp = fp
	// succ:  l0000000000422480
l0000000000422480:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[0x00000000004AE5D8<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000422510
	// succ:  l0000000000422495 l0000000000422510
l0000000000422495:
	call fn0000000000422260 (retsize: 8;)
	SZO = cond(rbx & rbx)
	C = false
	esi = 0x16<32>
	rsi = CONVERT(esi, word32, uint64)
	branch Test(EQ,Z) l00000000004224B4
	// succ:  l00000000004224A4 l00000000004224B4
l00000000004224A4:
	rdx = Mem0[rbx:word64]
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l00000000004224B4
	// succ:  l00000000004224AC l00000000004224B4
l00000000004224AC:
	SCZO = cond(Mem0[rdx:word32] - 0xBAB1F0ED<32>)
	branch Test(EQ,Z) l00000000004224D0
	// succ:  l00000000004224B4 l00000000004224D0
l00000000004224B4:
	rcx = Mem0[0x00000000004AE5D8<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004224E0
	// succ:  l00000000004224C0 l00000000004224E0
l00000000004224C0:
	call fn0000000000422310 (retsize: 8;)
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422480_exit
l00000000004224D0:
	SCZO = cond(rdx - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l0000000000422540
	// succ:  l00000000004224D6 l0000000000422540
l00000000004224D6:
	v16 = Mem0[rdx + 4<64>:word32] + 1<32>
	Mem0[rdx + 4<64>:word32] = v16
	SCZO = cond(v16)
	sil = sil ^ sil
	SZO = cond(sil)
	C = false
	goto l00000000004224B4
	// succ:  l00000000004224B4
l00000000004224E0:
	r8 = 0x0000000000422370<p64>
	rcx = 0x00000000004914B0<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE5D8<p64>:word64] = rax
	call fn0000000000422310 (retsize: 8;)
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422480_exit
l0000000000422510:
	rcx = 0x00000000004914B0<p64>
	r8 = 0x0000000000422370<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE5D8<p64>:word64] = rax
	goto l0000000000422495
	// succ:  l0000000000422495
l0000000000422540:
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	goto l00000000004224B4
	// succ:  l00000000004224B4
fn0000000000422480_exit:


// fn0000000000422550
// Return size: 8
define fn0000000000422550
fn0000000000422550_entry:
	rsp = fp
	// succ:  l0000000000422550
l0000000000422550:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdi = rcx + 0x18<64>
	rbx = rcx
	rcx = rdi
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	branch Test(EQ,Z) l0000000000422580
	// succ:  l000000000042256C l0000000000422580
l000000000042256C:
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422550_exit
l0000000000422580:
	rcx = rbx + 0x20<64>
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(EQ,Z) l000000000042256C
	// succ:  l000000000042258F l000000000042256C
l000000000042258F:
	rcx = rdi
	esi = ebx
	rsi = CONVERT(esi, word32, uint64)
	call fn00000000004202A0 (retsize: 8;)
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422550_exit
fn0000000000422550_exit:


// fn00000000004225B0
// Return size: 8
define fn00000000004225B0
fn00000000004225B0_entry:
	rsp = fp
	// succ:  l00000000004225B0
l00000000004225B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rcx + 0x20<64>
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	call fn00000000004202A0 (retsize: 8;)
	rcx = rbx + 0x18<64>
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000000004225E0
	// succ:  l00000000004225D4 l00000000004225E0
l00000000004225D4:
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l00000000004225E0
	// succ:  l00000000004225D8 l00000000004225E0
l00000000004225D8:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004225B0_exit
l00000000004225E0:
	esi = esi | edi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	branch Test(EQ,Z) l00000000004225E5
	// succ:  l00000000004225E2_1 l00000000004225E5
l00000000004225E2_1:
	eax = edi
	// succ:  l00000000004225E5
l00000000004225E5:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004225B0_exit
fn00000000004225B0_exit:


// fn00000000004225F0
// Return size: 8
define fn00000000004225F0
fn00000000004225F0_entry:
	rsp = fp
	// succ:  l00000000004225F0
l00000000004225F0:
	eax = Mem0[rcx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 0x10<64>:word32] = 0<32>
	eax = -eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	C = eax == 0<32>
	Mem0[rcx + 0xC<64>:word32] = eax
	// succ:  l0000000000422601_thunk_fn00000000004225B0
l0000000000422601_thunk_fn00000000004225B0:
	call fn00000000004225B0 (retsize: 0;)
	return
	// succ:  fn00000000004225F0_exit
fn00000000004225F0_exit:


// fn0000000000422610
// Return size: 0
define fn0000000000422610
fn0000000000422610_entry:
	rsp = fp
	// succ:  l0000000000422610
l0000000000422610:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[0x00000000004AE5D8<p64>:word64]
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004226A0
	// succ:  l0000000000422627 l00000000004226A0
l0000000000422627:
	call fn0000000000422260 (retsize: 8;)
	rcx = Mem0[rbx:word64]
	SCZO = cond(Mem0[rcx:word32] - 0xBAB1F0ED<32>)
	branch Test(NE,Z) l00000000004226C7
	// succ:  l000000000042263B l00000000004226C7
l000000000042263B:
	rax = Mem0[rbx:word64]
	eax = Mem0[rax + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004226C7
	// succ:  l0000000000422649 l00000000004226C7
l0000000000422649:
	rcx = Mem0[rbx:word64]
	v14 = Mem0[rcx + 4<64>:word32] - 1<32>
	Mem0[rcx + 4<64>:word32] = v14
	SCZO = cond(v14)
	rcx = Mem0[0x00000000004AE5D8<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000422670
	// succ:  l000000000042265C l0000000000422670
l000000000042265C:
	call fn0000000000422310 (retsize: 8;)
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422610_exit
l0000000000422670:
	r8 = 0x0000000000422370<p64>
	rcx = 0x00000000004914B0<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE5D8<p64>:word64] = rax
	call fn0000000000422310 (retsize: 8;)
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422610_exit
l00000000004226A0:
	rcx = 0x00000000004914B0<p64>
	r8 = 0x0000000000422370<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE5D8<p64>:word64] = rax
	goto l0000000000422627
	// succ:  l0000000000422627
l00000000004226C7:
	call _iob_func (retsize: 8;)
	r9 = 0x00000000004914C8<p64>
	rcx = rax + 0x60<64>
	r8 = 0x0000000000491500<p64>
	rdx = 0x0000000000491550<p64>
	Mem0[rsp + 0x20<64>:word32] = 0x2F<32>
	eax = fprintf(rcx, rdx, 0<32>)
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	exit(rcx)
fn0000000000422610_exit:


// fn0000000000422700
// Return size: 8
define fn0000000000422700
fn0000000000422700_entry:
	rsp = fp
	// succ:  l0000000000422700
l0000000000422700:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rcx:word64] = 0<64>
	rdi = rcx
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = calloc(rcx, rdx)
	rbx = rax
	eax = 0xC<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000042278F
	// succ:  l0000000000422730 l000000000042278F
l0000000000422730:
	rbp = rbx + 0x18<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx:word32] = 0xDEADB0EF<32>
	Mem0[rbx + 0x10<64>:word32] = 0<32>
	Mem0[rbx + 0xC<64>:word32] = 0<32>
	rcx = rbp
	Mem0[rbx + 8<64>:word32] = 0<32>
	call fn0000000000420360 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	branch Test(NE,Z) l00000000004227A8
	// succ:  l000000000042275F l00000000004227A8
l000000000042275F:
	r12 = rbx + 0x20<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = r12
	call fn0000000000420360 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	branch Test(NE,Z) l00000000004227A0
	// succ:  l0000000000422773 l00000000004227A0
l0000000000422773:
	rcx = rbx + 0x28<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn0000000000421040 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	branch Test(NE,Z) l00000000004227C0
	// succ:  l0000000000422784 l00000000004227C0
l0000000000422784:
	Mem0[rbx:word32] = 0xBAB1F0ED<32>
	Mem0[rdi:word64] = rbx
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000042278F
l000000000042278F:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422700_exit
l00000000004227A0:
	rcx = rbp
	call fn0000000000420B50 (retsize: 8;)
	// succ:  l00000000004227A8
l00000000004227A8:
	rcx = rbx
	free(rcx)
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422700_exit
l00000000004227C0:
	rcx = rbp
	call fn0000000000420B50 (retsize: 8;)
	rcx = r12
	call fn0000000000420B50 (retsize: 8;)
	rcx = rbx
	free(rcx)
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042278F
	// succ:  l000000000042278F
fn0000000000422700_exit:


// fn00000000004227E0
// Return size: 8
define fn00000000004227E0
fn00000000004227E0_entry:
	rsp = fp
	// succ:  l00000000004227E0
l00000000004227E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[0x00000000004AE5D0<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000422844
	// succ:  l00000000004227F4 l0000000000422844
l00000000004227F4:
	call fn0000000000422260 (retsize: 8;)
	SCZO = cond(Mem0[rbx:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l0000000000422870
	// succ:  l00000000004227FF l0000000000422870
l00000000004227FF:
	rcx = Mem0[0x00000000004AE5D0<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000422820
	// succ:  l000000000042280B l0000000000422820
l000000000042280B:
	ebx = 0x16<32>
	rbx = CONVERT(ebx, word32, uint64)
	call fn0000000000422310 (retsize: 8;)
	// succ:  l0000000000422815
l0000000000422815:
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004227E0_exit
l0000000000422820:
	rcx = 0x000000000049157A<p64>
	r8 = 0x0000000000422380<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE5D0<p64>:word64] = rax
	goto l000000000042280B
	// succ:  l000000000042280B
l0000000000422844:
	rcx = 0x000000000049157A<p64>
	r8 = 0x0000000000422380<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE5D0<p64>:word64] = rax
	goto l00000000004227F4
	// succ:  l00000000004227F4
l0000000000422870:
	rcx = rbx
	call fn0000000000422700 (retsize: 8;)
	rcx = Mem0[0x00000000004AE5D0<p64>:word64]
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042288D
	// succ:  l0000000000422886 l000000000042288D
l0000000000422886:
	call fn0000000000422310 (retsize: 8;)
	goto l0000000000422815
	// succ:  l0000000000422815
l000000000042288D:
	rcx = 0x000000000049157A<p64>
	r8 = 0x0000000000422380<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE5D0<p64>:word64] = rax
	goto l0000000000422886
	// succ:  l0000000000422886
fn00000000004227E0_exit:


// fn00000000004228C0
// Return size: 8
define fn00000000004228C0
fn00000000004228C0_entry:
	rsp = fp
	// succ:  l00000000004228C0
l00000000004228C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx:word64] - 0xFFFFFFFFFFFFFFFF<64>)
	rbx = rcx
	branch Test(EQ,Z) l0000000000422920
	// succ:  l00000000004228CE l0000000000422920
l00000000004228CE:
	rcx = Mem0[0x00000000004AE5D8<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000422954
	// succ:  l00000000004228DA l0000000000422954
l00000000004228DA:
	call fn0000000000422260 (retsize: 8;)
	rax = Mem0[rbx:word64]
	ebx = 0x16<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004228F4
	// succ:  l00000000004228EC l00000000004228F4
l00000000004228EC:
	SCZO = cond(Mem0[rax:word32] - 0xBAB1F0ED<32>)
	branch Test(EQ,Z) l0000000000422910
	// succ:  l00000000004228F4 l0000000000422910
l00000000004228F4:
	rcx = Mem0[0x00000000004AE5D8<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000422930
	// succ:  l0000000000422900 l0000000000422930
l0000000000422900:
	call fn0000000000422310 (retsize: 8;)
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000422907
l0000000000422907:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004228C0_exit
l0000000000422910:
	v15 = Mem0[rax + 4<64>:word32] + 1<32>
	Mem0[rax + 4<64>:word32] = v15
	SCZO = cond(v15)
	bl = bl ^ bl
	SZO = cond(bl)
	C = false
	goto l00000000004228F4
	// succ:  l00000000004228F4
l0000000000422920:
	call fn00000000004227E0 (retsize: 8;)
	SZO = cond(eax & 0xFFFFFFEF<32>)
	C = false
	branch Test(NE,Z) l0000000000422907
	// succ:  l000000000042292C l0000000000422907
l000000000042292C:
	goto l00000000004228CE
	// succ:  l00000000004228CE
l0000000000422930:
	rcx = 0x00000000004914B0<p64>
	r8 = 0x0000000000422370<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE5D8<p64>:word64] = rax
	goto l0000000000422900
	// succ:  l0000000000422900
l0000000000422954:
	rcx = 0x00000000004914B0<p64>
	r8 = 0x0000000000422370<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE5D8<p64>:word64] = rax
	goto l00000000004228DA
	// succ:  l00000000004228DA
fn00000000004228C0_exit:


// fn0000000000422980
// Return size: 8
define fn0000000000422980
fn0000000000422980_entry:
	rsp = fp
	// succ:  l0000000000422980
l0000000000422980:
	r8 = 0x0000000000422370<p64>
	rcx = 0x00000000004914B0<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000422993_thunk_fn0000000000421EA0
l0000000000422993_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn0000000000422980_exit
fn0000000000422980_exit:


// fn00000000004229A0
// Return size: 8
define fn00000000004229A0
fn00000000004229A0_entry:
	rsp = fp
	// succ:  l00000000004229A0
l00000000004229A0:
	Mem0[0x00000000004AE5E0<p64>:word32] = ecx
	return
	// succ:  fn00000000004229A0_exit
fn00000000004229A0_exit:


// fn00000000004229B0
// Return size: 8
define fn00000000004229B0
fn00000000004229B0_entry:
	rsp = fp
	// succ:  l00000000004229B0
l00000000004229B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	eax = Mem0[0x00000000004AE5E0<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000422A13
	// succ:  l00000000004229C2 l0000000000422A13
l00000000004229C2:
	rax = Mem0[rcx:word64]
	rsi = rdx
	rbx = rcx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000422A20
	// succ:  l00000000004229D0 l0000000000422A20
l00000000004229D0:
	ebp = Mem0[rax + 4<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	edi = Mem0[rax:word32]
	rdi = CONVERT(edi, word32, uint64)
	eax = GetCurrentThreadId()
	rdx = Mem0[rbx:word64]
	rcx = 0x00000000004915A0<p64>
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rsp + 0x40<64>:word64] = rsi
	Mem0[rsp + 0x38<64>:word64] = 0<64>
	r9d = edi
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x30<64>:word32] = 0<32>
	Mem0[rsp + 0x28<64>:word32] = 0<32>
	Mem0[rsp + 0x20<64>:word32] = ebp
	eax = printf(rcx, 0<32>)
	// succ:  l0000000000422A13
l0000000000422A13:
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004229B0_exit
l0000000000422A20:
	eax = GetCurrentThreadId()
	rdx = Mem0[rbx:word64]
	rcx = 0x0000000000491593<p64>
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	r9 = rsi
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	eax = printf(rcx, 0<32>)
	return
	// succ:  fn00000000004229B0_exit
fn00000000004229B0_exit:


// fn0000000000422A50
// Return size: 8
define fn0000000000422A50
fn0000000000422A50_entry:
	rsp = fp
	// succ:  l0000000000422A50
l0000000000422A50:
	r8 = 0x0000000000422380<p64>
	rcx = 0x000000000049157A<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000422A63_thunk_fn0000000000421EA0
l0000000000422A63_thunk_fn0000000000421EA0:
	call fn0000000000421EA0 (retsize: 0;)
	return
	// succ:  fn0000000000422A50_exit
fn0000000000422A50_exit:


// fn0000000000422A70
// Return size: 8
define fn0000000000422A70
fn0000000000422A70_entry:
	rsp = fp
	// succ:  l0000000000422A70
l0000000000422A70:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000422A80
	// succ:  l0000000000422A75 l0000000000422A80
l0000000000422A75:
	// succ:  l0000000000422A75_thunk_fn0000000000422700
l0000000000422A75_thunk_fn0000000000422700:
	call fn0000000000422700 (retsize: 0;)
	return
	// succ:  fn0000000000422A70_exit
l0000000000422A80:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000422A70_exit
fn0000000000422A70_exit:


// fn0000000000422A90
// Return size: 8
define fn0000000000422A90
fn0000000000422A90_entry:
	rsp = fp
	// succ:  l0000000000422A90
l0000000000422A90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rdi = rcx
	rcx = Mem0[0x00000000004AE5D0<p64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000422B44
	// succ:  l0000000000422AAA l0000000000422B44
l0000000000422AAA:
	call fn0000000000422260 (retsize: 8;)
	rdx = rsp + 0x28<64>
	rcx = rdi
	call fn0000000000422390 (retsize: 8;)
	rcx = Mem0[0x00000000004AE5D0<p64>:word64]
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000422B70
	// succ:  l0000000000422ACE l0000000000422B70
l0000000000422ACE:
	call fn0000000000422310 (retsize: 8;)
	SZO = cond(ebx & ebx)
	C = false
	branch Test(NE,Z) l0000000000422B1F
	// succ:  l0000000000422AD7 l0000000000422B1F
l0000000000422AD7:
	rsi = Mem0[rsp + 0x28<64>:word64]
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000422B1F
	// succ:  l0000000000422AE1 l0000000000422B1F
l0000000000422AE1:
	rcx = rsi
	call fn0000000000422550 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000422B30
	// succ:  l0000000000422AED l0000000000422B30
l0000000000422AED:
	eax = Mem0[rsi + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[rsi + 0xC<64>:word32] - eax)
	branch Test(GT,SZO) l0000000000422B00
	// succ:  l0000000000422AF5 l0000000000422B00
l0000000000422AF5:
	eax = Mem0[rsi + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000422BA0
	// succ:  l0000000000422B00 l0000000000422BA0
l0000000000422B00:
	rax = Mem0[rsp + 0x28<64>:word64]
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	ebx = 0x10<32>
	rbx = CONVERT(ebx, word32, uint64)
	Mem0[rdi:word64] = rax
	call fn00000000004225B0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000422B1F
	// succ:  l0000000000422B1C_1 l0000000000422B1F
l0000000000422B1C_1:
	ebx = eax
	// succ:  l0000000000422B1F
l0000000000422B1F:
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422A90_exit
l0000000000422B30:
	rdx = Mem0[rsp + 0x28<64>:word64]
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdi:word64] = rdx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422A90_exit
l0000000000422B44:
	rcx = 0x000000000049157A<p64>
	r8 = 0x0000000000422380<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE5D0<p64>:word64] = rax
	goto l0000000000422AAA
	// succ:  l0000000000422AAA
l0000000000422B70:
	rcx = 0x000000000049157A<p64>
	r8 = 0x0000000000422380<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000421EA0 (retsize: 8;)
	rcx = rax
	Mem0[0x00000000004AE5D0<p64>:word64] = rax
	goto l0000000000422ACE
	// succ:  l0000000000422ACE
l0000000000422BA0:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsi:word32] = 0xDEADB0EF<32>
	rcx = rsi
	call fn00000000004225B0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000422B30
	// succ:  l0000000000422BB8 l0000000000422B30
l0000000000422BB8:
	rcx = rsi + 0x28<64>
	call fn0000000000421590 (retsize: 8;)
	rcx = rsi + 0x18<64>
	call fn0000000000420B50 (retsize: 8;)
	rcx = rsi + 0x20<64>
	call fn0000000000420B50 (retsize: 8;)
	rcx = Mem0[rsp + 0x28<64>:word64]
	Mem0[rsi:word32] = 0xDEADB0EF<32>
	free(rcx)
	goto l0000000000422B1F
	// succ:  l0000000000422B1F
fn0000000000422A90_exit:


// fn0000000000422BF0
// Return size: 8
define fn0000000000422BF0
fn0000000000422BF0_entry:
	rsp = fp
	// succ:  l0000000000422BF0
l0000000000422BF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn00000000004228C0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000422C10
	// succ:  l0000000000422C04 l0000000000422C10
l0000000000422C04:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422BF0_exit
l0000000000422C10:
	rsi = Mem0[rbx:word64]
	rdi = rsi + 0x18<64>
	rcx = rdi
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000422C39
	// succ:  l0000000000422C23 l0000000000422C39
l0000000000422C23:
	__lock()
	v13 = Mem0[rsi + 0xC<64>:word32] + 1<32>
	Mem0[rsi + 0xC<64>:word32] = v13
	SCZO = cond(v13)
	SCZO = cond(Mem0[rsi + 0xC<64>:word32] - 0x7FFFFFFF<32>)
	branch Test(EQ,Z) l0000000000422C50
	// succ:  l0000000000422C31 l0000000000422C50
l0000000000422C31:
	rcx = rdi
	call fn00000000004202A0 (retsize: 8;)
	// succ:  l0000000000422C39
l0000000000422C39:
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000422C3B
l0000000000422C3B:
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000422C46_thunk_fn0000000000422610
l0000000000422C46_thunk_fn0000000000422610:
	call fn0000000000422610 (retsize: 0;)
	return
	// succ:  fn0000000000422BF0_exit
l0000000000422C50:
	rcx = rsi + 0x20<64>
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	ebp = eax
	rbp = CONVERT(ebp, word32, uint64)
	branch Test(EQ,Z) l0000000000422C70
	// succ:  l0000000000422C5F l0000000000422C70
l0000000000422C5F:
	rcx = rdi
	call fn00000000004202A0 (retsize: 8;)
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000422C3B
	// succ:  l0000000000422C3B
l0000000000422C70:
	eax = Mem0[rsi + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	v20 = Mem0[rsi + 0xC<64>:word32] - eax
	Mem0[rsi + 0xC<64>:word32] = v20
	SCZO = cond(v20)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsi + 0x10<64>:word32] = 0<32>
	rcx = rsi
	call fn00000000004225B0 (retsize: 8;)
	goto l0000000000422C39
	// succ:  l0000000000422C39
fn0000000000422BF0_exit:


// fn0000000000422C90
// Return size: 8
define fn0000000000422C90
fn0000000000422C90_entry:
	rsp = fp
	// succ:  l0000000000422C90
l0000000000422C90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	rdi = rdx
	call fn00000000004228C0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000422CB0
	// succ:  l0000000000422CA7 l0000000000422CB0
l0000000000422CA7:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422C90_exit
l0000000000422CB0:
	rsi = Mem0[rbx:word64]
	rdx = rdi
	rbp = rsi + 0x18<64>
	rcx = rbp
	call fn0000000000420900 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000422CDC
	// succ:  l0000000000422CC6 l0000000000422CDC
l0000000000422CC6:
	__lock()
	v14 = Mem0[rsi + 0xC<64>:word32] + 1<32>
	Mem0[rsi + 0xC<64>:word32] = v14
	SCZO = cond(v14)
	SCZO = cond(Mem0[rsi + 0xC<64>:word32] - 0x7FFFFFFF<32>)
	branch Test(EQ,Z) l0000000000422CF0
	// succ:  l0000000000422CD4 l0000000000422CF0
l0000000000422CD4:
	rcx = rbp
	call fn00000000004202A0 (retsize: 8;)
	// succ:  l0000000000422CDC
l0000000000422CDC:
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000422CDE
l0000000000422CDE:
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000422CE9_thunk_fn0000000000422610
l0000000000422CE9_thunk_fn0000000000422610:
	call fn0000000000422610 (retsize: 0;)
	return
	// succ:  fn0000000000422C90_exit
l0000000000422CF0:
	rcx = rsi + 0x20<64>
	rdx = rdi
	call fn0000000000420900 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	branch Test(EQ,Z) l0000000000422D20
	// succ:  l0000000000422D02 l0000000000422D20
l0000000000422D02:
	SCZO = cond(eax - 0x8A<32>)
	branch Test(EQ,Z) l0000000000422D15
	// succ:  l0000000000422D09 l0000000000422D15
l0000000000422D09:
	rcx = rbp
	call fn00000000004202A0 (retsize: 8;)
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000422CDE
	// succ:  l0000000000422CDE
l0000000000422D15:
	__lock()
	v17 = Mem0[rsi + 0x10<64>:word32] + 1<32>
	Mem0[rsi + 0x10<64>:word32] = v17
	SCZO = cond(v17)
	goto l0000000000422D09
	// succ:  l0000000000422D09
l0000000000422D20:
	eax = Mem0[rsi + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	v19 = Mem0[rsi + 0xC<64>:word32] - eax
	Mem0[rsi + 0xC<64>:word32] = v19
	SCZO = cond(v19)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsi + 0x10<64>:word32] = 0<32>
	rcx = rsi
	call fn00000000004225B0 (retsize: 8;)
	goto l0000000000422CDC
	// succ:  l0000000000422CDC
fn0000000000422C90_exit:


// fn0000000000422D40
// Return size: 8
define fn0000000000422D40
fn0000000000422D40_entry:
	rsp = fp
	// succ:  l0000000000422D40
l0000000000422D40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn00000000004228C0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000422D60
	// succ:  l0000000000422D54 l0000000000422D60
l0000000000422D54:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422D40_exit
l0000000000422D60:
	rsi = Mem0[rbx:word64]
	rdi = rsi + 0x18<64>
	rcx = rdi
	call fn00000000004209D0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000422D89
	// succ:  l0000000000422D73 l0000000000422D89
l0000000000422D73:
	__lock()
	v13 = Mem0[rsi + 0xC<64>:word32] + 1<32>
	Mem0[rsi + 0xC<64>:word32] = v13
	SCZO = cond(v13)
	SCZO = cond(Mem0[rsi + 0xC<64>:word32] - 0x7FFFFFFF<32>)
	branch Test(EQ,Z) l0000000000422DA0
	// succ:  l0000000000422D81 l0000000000422DA0
l0000000000422D81:
	rcx = rdi
	call fn00000000004202A0 (retsize: 8;)
	// succ:  l0000000000422D89
l0000000000422D89:
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000422D8B
l0000000000422D8B:
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000422D96_thunk_fn0000000000422610
l0000000000422D96_thunk_fn0000000000422610:
	call fn0000000000422610 (retsize: 0;)
	return
	// succ:  fn0000000000422D40_exit
l0000000000422DA0:
	rcx = rsi + 0x20<64>
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	ebp = eax
	rbp = CONVERT(ebp, word32, uint64)
	branch Test(EQ,Z) l0000000000422DC0
	// succ:  l0000000000422DAF l0000000000422DC0
l0000000000422DAF:
	rcx = rdi
	call fn00000000004202A0 (retsize: 8;)
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000422D8B
	// succ:  l0000000000422D8B
l0000000000422DC0:
	eax = Mem0[rsi + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	v18 = Mem0[rsi + 0xC<64>:word32] - eax
	Mem0[rsi + 0xC<64>:word32] = v18
	SCZO = cond(v18)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsi + 0x10<64>:word32] = 0<32>
	rcx = rsi
	call fn00000000004225B0 (retsize: 8;)
	goto l0000000000422D89
	// succ:  l0000000000422D89
fn0000000000422D40_exit:


// fn0000000000422DE0
// Return size: 8
define fn0000000000422DE0
fn0000000000422DE0_entry:
	rsp = fp
	// succ:  l0000000000422DE0
l0000000000422DE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn00000000004228C0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000422E00
	// succ:  l0000000000422DF4 l0000000000422E00
l0000000000422DF4:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422DE0_exit
l0000000000422E00:
	rsi = Mem0[rbx:word64]
	rdi = rsi + 0x18<64>
	rcx = rdi
	call fn00000000004209D0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000422E5E
	// succ:  l0000000000422E13 l0000000000422E5E
l0000000000422E13:
	rcx = rsi + 0x20<64>
	call fn00000000004209D0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	ebp = eax
	rbp = CONVERT(ebp, word32, uint64)
	branch Test(NE,Z) l0000000000422E70
	// succ:  l0000000000422E22 l0000000000422E70
l0000000000422E22:
	eax = Mem0[rsi + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = 0x10<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000422E60
	// succ:  l0000000000422E2E l0000000000422E60
l0000000000422E2E:
	eax = Mem0[rsi + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000422E81
	// succ:  l0000000000422E35 l0000000000422E81
l0000000000422E35:
	edx = Mem0[rsi + 0xC<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsi + 0x10<64>:word32] = 0<32>
	edx = edx - eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi + 0xC<64>:word32] = edx
	// succ:  l0000000000422E46
l0000000000422E46:
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000422E90
	// succ:  l0000000000422E4A l0000000000422E90
l0000000000422E4A:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rsi
	call fn00000000004225B0 (retsize: 8;)
	edx = 0x10<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000422E5E
	// succ:  l0000000000422E5B_1 l0000000000422E5E
l0000000000422E5B_1:
	eax = edx
	// succ:  l0000000000422E5E
l0000000000422E5E:
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000422E60
l0000000000422E60:
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000422E6B_thunk_fn0000000000422610
l0000000000422E6B_thunk_fn0000000000422610:
	call fn0000000000422610 (retsize: 0;)
	return
	// succ:  fn0000000000422DE0_exit
l0000000000422E70:
	rcx = rdi
	call fn00000000004202A0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000422E7D
	// succ:  l0000000000422E7A_1 l0000000000422E7D
l0000000000422E7A_1:
	ebp = eax
	// succ:  l0000000000422E7D
l0000000000422E7D:
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000422E60
	// succ:  l0000000000422E60
l0000000000422E81:
	eax = Mem0[rsi + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000422E46
	// succ:  l0000000000422E46
l0000000000422E90:
	Mem0[rsi + 8<64>:word32] = 1<32>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000422E60
	// succ:  l0000000000422E60
fn0000000000422DE0_exit:


// fn0000000000422EA0
// Return size: 0
define fn0000000000422EA0
fn0000000000422EA0_entry:
	rsp = fp
	// succ:  l0000000000422EA0
l0000000000422EA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000422480 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000422F10
	// succ:  l0000000000422EB3 l0000000000422F10
l0000000000422EB3:
	rsi = Mem0[rbx:word64]
	edx = Mem0[rsi + 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000422EE0
	// succ:  l0000000000422EBD l0000000000422EE0
l0000000000422EBD:
	__lock()
	v14 = Mem0[rsi + 8<64>:word32] - 1<32>
	Mem0[rsi + 8<64>:word32] = v14
	SCZO = cond(v14)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rsi
	call fn00000000004225B0 (retsize: 8;)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000422ECE
l0000000000422ECE:
	rcx = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000422ED8_thunk_fn0000000000422610
l0000000000422ED8_thunk_fn0000000000422610:
	call fn0000000000422610 (retsize: 0;)
	return
	// succ:  fn0000000000422EA0_exit
l0000000000422EE0:
	rdi = rsi + 0x20<64>
	rcx = rdi
	call fn00000000004208F0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l0000000000422ECE
	// succ:  l0000000000422EF2 l0000000000422ECE
l0000000000422EF2:
	__lock()
	v15 = Mem0[rsi + 0x10<64>:word32] + 1<32>
	Mem0[rsi + 0x10<64>:word32] = v15
	SCZO = cond(v15)
	eax = Mem0[rsi + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000422F20
	// succ:  l0000000000422EFE l0000000000422F20
l0000000000422EFE:
	rcx = rdi
	call fn00000000004202A0 (retsize: 8;)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000422ECE
	// succ:  l0000000000422ECE
l0000000000422F10:
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422EA0_exit
l0000000000422F20:
	rcx = rsi + 0x28<64>
	call fn0000000000421780 (retsize: 8;)
	rcx = rdi
	Mem0[rsp + 0x2C<64>:word32] = eax
	call fn00000000004202A0 (retsize: 8;)
	edx = Mem0[rsp + 0x2C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000422F3E
	// succ:  l0000000000422F3B_1 l0000000000422F3E
l0000000000422F3B_1:
	edx = eax
	// succ:  l0000000000422F3E
l0000000000422F3E:
	goto l0000000000422ECE
	// succ:  l0000000000422ECE
fn0000000000422EA0_exit:


// fn0000000000422F40
// Return size: 8
define fn0000000000422F40
fn0000000000422F40_entry:
	rsp = fp
	// succ:  l0000000000422F40
l0000000000422F40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rsi = rcx
	call fn00000000004228C0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000422F65
	// succ:  l0000000000422F58 l0000000000422F65
l0000000000422F58:
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422F40_exit
l0000000000422F65:
	rbx = Mem0[rsi:word64]
	rcx = rbx
	call fn0000000000422550 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	ebp = eax
	rbp = CONVERT(ebp, word32, uint64)
	branch Test(NE,Z) l0000000000423045
	// succ:  l0000000000422F7A l0000000000423045
l0000000000422F7A:
	edx = Mem0[rbx + 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000423040
	// succ:  l0000000000422F85 l0000000000423040
l0000000000422F85:
	eax = Mem0[rbx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000423060
	// succ:  l0000000000422F90 l0000000000423060
l0000000000422F90:
	edx = Mem0[rbx + 0xC<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0x10<64>:word32] = 0<32>
	edx = edx - eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 0xC<64>:word32] = edx
	// succ:  l0000000000422FA1
l0000000000422FA1:
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000423040
	// succ:  l0000000000422FA9 l0000000000423040
l0000000000422FA9:
	eax = -eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	C = eax == 0<32>
	Mem0[rsp + 0x28<64>:word64] = rbx
	r13 = rbx + 0x20<64>
	Mem0[rbx + 0x10<64>:word32] = eax
	rax = 0x00000000004225F0<p64>
	r12 = rbx + 0x28<64>
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn000000000041EA40 (retsize: 8;)
	rax = Mem0[rax:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	__mfence()
	call fn000000000041EA40 (retsize: 8;)
	rdx = rsp + 0x20<64>
	Mem0[rax:word64] = rdx
	__mfence()
	goto l0000000000422FF7
	// succ:  l0000000000422FF7
l0000000000422FF0:
	eax = Mem0[rbx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NS,S) l0000000000423022
	// succ:  l0000000000422FF7 l0000000000423022
l0000000000422FF7:
	rdx = r13
	rcx = r12
	call fn00000000004219D0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	branch Test(EQ,Z) l0000000000422FF0
	// succ:  l0000000000423008 l0000000000422FF0
l0000000000423008:
	call fn000000000041EA40 (retsize: 8;)
	rdx = Mem0[rsp + 0x30<64>:word64]
	ebp = edi
	rbp = CONVERT(ebp, word32, uint64)
	Mem0[rax:word64] = rdx
	rcx = Mem0[rsp + 0x28<64>:word64]
	call Mem0[rsp + 0x20<64>:word64] (retsize: 8;)
	goto l0000000000423045
	// succ:  l0000000000423045
l0000000000423022:
	call fn000000000041EA40 (retsize: 8;)
	rdx = Mem0[rsp + 0x30<64>:word64]
	Mem0[rax:word64] = rdx
	Mem0[rbx + 0xC<64>:word32] = 0<32>
	// succ:  l0000000000423040
l0000000000423040:
	__lock()
	v19 = Mem0[rbx + 8<64>:word32] + 1<32>
	Mem0[rbx + 8<64>:word32] = v19
	SCZO = cond(v19)
	// succ:  l0000000000423045
l0000000000423045:
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	call fn0000000000422610 (retsize: 8;)
	rsp = rsp + 8<64>
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000422F40_exit
l0000000000423060:
	eax = Mem0[rbx + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000422FA1
	// succ:  l0000000000422FA1
fn0000000000422F40_exit:


// fn0000000000423070
// Return size: 8
define fn0000000000423070
fn0000000000423070_entry:
	rsp = fp
	// succ:  l0000000000423070
l0000000000423070:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000423088
	// succ:  l0000000000423083 l0000000000423088
l0000000000423083:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(NE,Z) l00000000004230A0
	// succ:  l0000000000423088 l00000000004230A0
l0000000000423088:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042308D
l000000000042308D:
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000423070_exit
l00000000004230A0:
	rsi = rdx
	rbx = rcx
	call fn00000000004228C0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000042308D
	// succ:  l00000000004230AF l000000000042308D
l00000000004230AF:
	rdi = Mem0[rbx:word64]
	rdx = rsi
	rbp = rdi + 0x18<64>
	rcx = rbp
	call fn0000000000420900 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004231A0
	// succ:  l00000000004230C9 l00000000004231A0
l00000000004230C9:
	r12 = rdi + 0x20<64>
	rdx = rsi
	rcx = r12
	call fn0000000000420900 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	r13d = eax
	r13 = CONVERT(r13d, word32, uint64)
	branch Test(NE,Z) l00000000004231AF
	// succ:  l00000000004230E3 l00000000004231AF
l00000000004230E3:
	edx = Mem0[rdi + 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000423183
	// succ:  l00000000004230EE l0000000000423183
l00000000004230EE:
	eax = Mem0[rdi + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l00000000004231C7
	// succ:  l00000000004230F9 l00000000004231C7
l00000000004230F9:
	edx = Mem0[rdi + 0xC<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rdi + 0x10<64>:word32] = 0<32>
	edx = edx - eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdi + 0xC<64>:word32] = edx
	// succ:  l000000000042310A
l000000000042310A:
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000423183
	// succ:  l000000000042310E l0000000000423183
l000000000042310E:
	eax = -eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	C = eax == 0<32>
	Mem0[rsp + 0x28<64>:word64] = rdi
	r14 = rdi + 0x28<64>
	Mem0[rdi + 0x10<64>:word32] = eax
	rax = 0x00000000004225F0<p64>
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn000000000041EA40 (retsize: 8;)
	rax = Mem0[rax:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	__mfence()
	call fn000000000041EA40 (retsize: 8;)
	rdx = rsp + 0x20<64>
	Mem0[rax:word64] = rdx
	__mfence()
	goto l0000000000423154
	// succ:  l0000000000423154
l0000000000423150:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(NE,Z) l00000000004231CF
	// succ:  l0000000000423154 l00000000004231CF
l0000000000423154:
	r8 = rsi
	rdx = r12
	rcx = r14
	call fn0000000000421E00 (retsize: 8;)
	ebp = eax
	rbp = CONVERT(ebp, word32, uint64)
	eax = Mem0[rdi + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000423150
	// succ:  l000000000042316B l0000000000423150
l000000000042316B:
	call fn000000000041EA40 (retsize: 8;)
	rdx = Mem0[rsp + 0x30<64>:word64]
	SZO = cond(ebp & ebp)
	C = false
	Mem0[rax:word64] = rdx
	branch Test(NE,Z) l00000000004231DC
	// succ:  l000000000042317C l00000000004231DC
l000000000042317C:
	Mem0[rdi + 0xC<64>:word32] = 0<32>
	// succ:  l0000000000423183
l0000000000423183:
	__lock()
	v23 = Mem0[rdi + 8<64>:word32] + 1<32>
	Mem0[rdi + 8<64>:word32] = v23
	SCZO = cond(v23)
	// succ:  l0000000000423188
l0000000000423188:
	edx = r13d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000422610 (retsize: 8;)
	rsp = rsp + 8<64>
	goto l000000000042308D
	// succ:  l000000000042308D
l00000000004231A0:
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000422610 (retsize: 8;)
	rsp = rsp + 8<64>
	goto l000000000042308D
	// succ:  l000000000042308D
l00000000004231AF:
	rcx = rbp
	call fn00000000004202A0 (retsize: 8;)
	edx = r13d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000422610 (retsize: 8;)
	rsp = rsp + 8<64>
	goto l000000000042308D
	// succ:  l000000000042308D
l00000000004231C7:
	eax = Mem0[rdi + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042310A
	// succ:  l000000000042310A
l00000000004231CF:
	call fn000000000041EA40 (retsize: 8;)
	rdx = Mem0[rsp + 0x30<64>:word64]
	Mem0[rax:word64] = rdx
	// succ:  l00000000004231DC
l00000000004231DC:
	rcx = Mem0[rsp + 0x28<64>:word64]
	r13d = ebp
	r13 = CONVERT(r13d, word32, uint64)
	call Mem0[rsp + 0x20<64>:word64] (retsize: 8;)
	goto l0000000000423188
	// succ:  l0000000000423188
fn0000000000423070_exit:


// fn00000000004231F0
// Return size: 8
define fn00000000004231F0
fn00000000004231F0_entry:
	rsp = fp
	// succ:  l00000000004231F0
l00000000004231F0:
	SCZO = cond(rcx - 1<64>)
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn00000000004231F0_exit
fn00000000004231F0_exit:


// fn0000000000423200
// Return size: 8
define fn0000000000423200
fn0000000000423200_entry:
	rsp = fp
	// succ:  l0000000000423200
l0000000000423200:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000423212
	// succ:  l000000000042320A l0000000000423212
l000000000042320A:
	Mem0[rcx:word32] = 0<32>
	al = al ^ al
	SZO = cond(al)
	C = false
	// succ:  l0000000000423212
l0000000000423212:
	return
	// succ:  fn0000000000423200_exit
fn0000000000423200_exit:


// fn0000000000423220
// Return size: 8
define fn0000000000423220
fn0000000000423220_entry:
	rsp = fp
	// succ:  l0000000000423220
l0000000000423220:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042322A
	// succ:  l0000000000423225 l000000000042322A
l0000000000423225:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(NE,Z) l0000000000423230
	// succ:  l000000000042322A l0000000000423230
l000000000042322A:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000423220_exit
l0000000000423230:
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdx:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000423220_exit
fn0000000000423220_exit:


// fn0000000000423240
// Return size: 8
define fn0000000000423240
fn0000000000423240_entry:
	rsp = fp
	// succ:  l0000000000423240
l0000000000423240:
	SCZO = cond(edx - 1<32>)
	branch Test(UGT,CZ) l000000000042324A
	// succ:  l0000000000423245 l000000000042324A
l0000000000423245:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000423250
	// succ:  l000000000042324A l0000000000423250
l000000000042324A:
	eax = 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000423240_exit
l0000000000423250:
	Mem0[rcx:word32] = edx
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000423240_exit
fn0000000000423240_exit:


// fn0000000000423260
// Return size: 8
define fn0000000000423260
fn0000000000423260_entry:
	rsp = fp
	// succ:  l0000000000423260
l0000000000423260:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rcx = rsp + 0x20<64>
	call ftime (retsize: 8;)
	rdx = Mem0[rsp + 0x20<64>:word64] *s 0x3E8<64>
	SCZO = cond(rdx)
	eax = CONVERT(Mem0[rsp + 0x28<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = rax + rdx
	SCZO = cond(rax)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000423260_exit
fn0000000000423260_exit:


// fn0000000000423290
// Return size: 8
define fn0000000000423290
fn0000000000423290_entry:
	rsp = fp
	// succ:  l0000000000423290
l0000000000423290:
	r8 = Mem0[rcx:word64] *s 0x3E8<64>
	SCZO = cond(r8)
	ecx = Mem0[rcx + 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	edx = 0x431BDE83<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	ecx = ecx >> 0x1F<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	edx_eax = edx *s eax
	SCZO = cond(edx_eax)
	edx = edx >> 0x12<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx - ecx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rdx = CONVERT(edx, word32, int64)
	rax = rdx + r8
	return
	// succ:  fn0000000000423290_exit
fn0000000000423290_exit:


// fn00000000004232C0
// Return size: 8
define fn00000000004232C0
fn00000000004232C0_entry:
	rsp = fp
	// succ:  l00000000004232C0
l00000000004232C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	r8d = Mem0[rcx + 8<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	edx = 0x431BDE83<32>
	rdx = CONVERT(edx, word32, uint64)
	rbx = Mem0[rcx:word64] *s 0x3E8<64>
	SCZO = cond(rbx)
	rcx = rsp + 0x20<64>
	eax = r8d
	rax = CONVERT(eax, word32, uint64)
	r8d = r8d >> 0x1F<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	edx_eax = edx *s eax
	SCZO = cond(edx_eax)
	edx = edx >> 0x12<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx - r8d
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rdx = CONVERT(edx, word32, int64)
	rbx = rbx + rdx
	SCZO = cond(rbx)
	call ftime (retsize: 8;)
	rcx = Mem0[rsp + 0x20<64>:word64] *s 0x3E8<64>
	SCZO = cond(rcx)
	eax = CONVERT(Mem0[rsp + 0x28<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = 0<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rcx + rax
	SCZO = cond(rcx)
	rax = rbx
	rax = rax - rcx
	SCZO = cond(rax)
	SCZO = cond(rbx - rcx)
	branch Test(UGE,C) l0000000000423318
	// succ:  l0000000000423314_1 l0000000000423318
l0000000000423314_1:
	rax = rdx
	// succ:  l0000000000423318
l0000000000423318:
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004232C0_exit
fn00000000004232C0_exit:


// fn0000000000423516
// Return size: 0
define fn0000000000423516
fn0000000000423516_entry:
	rsp = fp
	// succ:  l0000000000423516
l0000000000423516:
	rax = &msvcrt.dll!longjmp
	call Mem0[rax:word64] (retsize: 0;)
	return
	// succ:  fn0000000000423516_exit
fn0000000000423516_exit:


// fn0000000000423550
// Return size: 8
define fn0000000000423550
fn0000000000423550_entry:
	rsp = fp
	// succ:  l0000000000423550
l0000000000423550:
	r8 = 0x0000000000476300<p64>
	rcx = 0x000000000048D7BB<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000423563_thunk_fn00000000004117B0
l0000000000423563_thunk_fn00000000004117B0:
	call fn00000000004117B0 (retsize: 0;)
	return
	// succ:  fn0000000000423550_exit
fn0000000000423550_exit:


// fn0000000000423570
// Return size: 8
define fn0000000000423570
fn0000000000423570_entry:
	rsp = fp
	// succ:  l0000000000423570
l0000000000423570:
	rcx = 0x000000000048D7B0<p64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 0x10<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000042357F_thunk_fn00000000004117B0
l000000000042357F_thunk_fn00000000004117B0:
	call fn00000000004117B0 (retsize: 0;)
	return
	// succ:  fn0000000000423570_exit
fn0000000000423570_exit:


// fn0000000000423590
// Return size: 8
define fn0000000000423590
fn0000000000423590_entry:
	rsp = fp
	// succ:  l0000000000423590
l0000000000423590:
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	rax = rcx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	// succ:  l00000000004235A0
l00000000004235A0:
	rax = rax + 1<64>
	SCZO = cond(rax)
	r9d = CONVERT(Mem0[rax - 1<64>:byte], byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	r8 = r9
	r8d = r8d & 0x7F<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	r8 = r8 << cl
	SCZO = cond(r8)
	ecx = ecx + 7<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r10 = r10 | r8
	SZO = cond(r10)
	C = false
	SZO = cond(r9b & r9b)
	C = false
	branch Test(SG,S) l00000000004235A0
	// succ:  l00000000004235BE l00000000004235A0
l00000000004235BE:
	SCZO = cond(ecx - 0x3F<32>)
	branch Test(UGT,CZ) l00000000004235D6
	// succ:  l00000000004235C3 l00000000004235D6
l00000000004235C3:
	r9d = r9d & 0x40<32>
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	branch Test(EQ,Z) l00000000004235D6
	// succ:  l00000000004235C9 l00000000004235D6
l00000000004235C9:
	r8 = 0xFFFFFFFFFFFFFFFF<64>
	r8 = r8 << cl
	SCZO = cond(r8)
	r10 = r10 | r8
	SZO = cond(r10)
	C = false
	// succ:  l00000000004235D6
l00000000004235D6:
	Mem0[rdx:word64] = r10
	return
	// succ:  fn0000000000423590_exit
fn0000000000423590_exit:


// fn00000000004235E0
// Return size: 8
define fn00000000004235E0
fn00000000004235E0_entry:
	rsp = fp
	// succ:  l00000000004235E0
l00000000004235E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000423623
	// succ:  l00000000004235EB l0000000000423623
l00000000004235EB:
	rax = Mem0[rcx:word64]
	rsi = rcx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000423615
	// succ:  l00000000004235F6 l0000000000423615
l00000000004235F6:
	// succ:  l0000000000423600
l0000000000423600:
	rbx = Mem0[rax + 0x20<64>:word64]
	rcx = rax + 0x50<64>
	call fn00000000004116C0 (retsize: 8;)
	rsp = rsp + 8<64>
	SZO = cond(rbx & rbx)
	C = false
	rax = rbx
	branch Test(NE,Z) l0000000000423600
	// succ:  l0000000000423615 l0000000000423600
l0000000000423615:
	rcx = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	free(rcx)
	return
	// succ:  fn00000000004235E0_exit
l0000000000423623:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004235E0_exit
fn00000000004235E0_exit:


// fn0000000000423630
// Return size: 8
define fn0000000000423630
fn0000000000423630_entry:
	rsp = fp
	// succ:  l0000000000423630
l0000000000423630:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = CONVERT(Mem0[rcx + 0x28<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0xFF<8>)
	branch Test(EQ,Z) l00000000004236B0
	// succ:  l000000000042363C l00000000004236B0
l000000000042363C:
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d & 7<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(r8b - 2<8>)
	branch Test(EQ,Z) l00000000004236A0
	// succ:  l0000000000423649 l00000000004236A0
l0000000000423649:
	branch Test(ULE,CZ) l0000000000423680
	// succ:  l000000000042364B l0000000000423680
l000000000042364B:
	SCZO = cond(r8b - 3<8>)
	branch Test(EQ,Z) l0000000000423690
	// succ:  l0000000000423651 l0000000000423690
l0000000000423651:
	SCZO = cond(r8b - 4<8>)
	branch Test(NE,Z) l0000000000423685
	// succ:  l0000000000423657 l0000000000423685
l0000000000423657:
	r8 = CONVERT(0<32> + rdx * 8<64>, word32, word64)
	r8 = -r8
	SCZO = cond(r8)
	C = r8 == 0<64>
	// succ:  l0000000000423662
l0000000000423662:
	r8 = r8 + Mem0[rcx + 0x18<64>:word64]
	SCZO = cond(r8)
	rdx = Mem0[rcx + 0x10<64>:word64]
	r9 = rsp + 0x28<64>
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000423940 (retsize: 8;)
	rax = Mem0[rsp + 0x28<64>:word64]
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000423630_exit
l0000000000423680:
	SZO = cond(r8b & r8b)
	C = false
	branch Test(EQ,Z) l0000000000423657
	// succ:  l0000000000423685 l0000000000423657
l0000000000423685:
	abort()
	// succ:  l0000000000423690
l0000000000423690:
	r8 = CONVERT(0<32> + rdx * 4<64>, word32, word64)
	r8 = -r8
	SCZO = cond(r8)
	C = r8 == 0<64>
	goto l0000000000423662
	// succ:  l0000000000423662
l00000000004236A0:
	r8 = rdx + rdx
	r8 = -r8
	SCZO = cond(r8)
	C = r8 == 0<64>
	goto l0000000000423662
	// succ:  l0000000000423662
l00000000004236B0:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	goto l0000000000423662
	// succ:  l0000000000423662
fn0000000000423630_exit:


// fn00000000004236C0
// Return size: 8
define fn00000000004236C0
fn00000000004236C0_entry:
	rsp = fp
	// succ:  l00000000004236C0
l00000000004236C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[r8:word64]
	rsi = rcx
	rbx = rdx
	rdi = r8
	rcx = rdx
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rdx:word64]
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004236F2
	// succ:  l00000000004236E5 l00000000004236F2
l00000000004236E5:
	rax = Mem0[rsp + 0x28<64>:word64]
	rax = Mem0[rax:word64]
	Mem0[rsp + 0x28<64>:word64] = rax
	// succ:  l00000000004236F2
l00000000004236F2:
	rax = Mem0[rsi:word64]
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8 = rsp + 0x28<64>
	rdx = rbx
	rcx = rsi
	call Mem0[rax + 0x20<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000423715
	// succ:  l000000000042370D l0000000000423715
l000000000042370D:
	rdx = Mem0[rsp + 0x28<64>:word64]
	Mem0[rdi:word64] = rdx
	// succ:  l0000000000423715
l0000000000423715:
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004236C0_exit
fn00000000004236C0_exit:


// fn0000000000423720
// Return size: 8
define fn0000000000423720
fn0000000000423720_entry:
	rsp = fp
	// succ:  l0000000000423720
l0000000000423720:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	rbp = rcx
	rsi = rdx
	rbx = r8
	branch Test(EQ,Z) l000000000042373D
	// succ:  l0000000000423738 l000000000042373D
l0000000000423738:
	call fn00000000004112E0 (retsize: 8;)
	// succ:  l000000000042373D
l000000000042373D:
	Mem0[rbx:word64] = rax
	r9d = CONVERT(Mem0[rsi:byte], byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	rdi = rsi + 1<64>
	SCZO = cond(r9b - 0xFF<8>)
	branch Test(EQ,Z) l00000000004237F0
	// succ:  l0000000000423752 l00000000004237F0
l0000000000423752:
	esi = CONVERT(r9b, byte, word32)
	rsi = CONVERT(esi, word32, uint64)
	rdx = rbp
	ecx = esi
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000423890 (retsize: 8;)
	r9 = rbx + 8<64>
	r8 = rdi
	rdx = rax
	ecx = esi
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000423940 (retsize: 8;)
	rdi = rax
	eax = CONVERT(Mem0[rdi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdi + 1<64>
	SCZO = cond(al - 0xFF<8>)
	Mem0[rbx + 0x28<64>:byte] = al
	branch Test(EQ,Z) l0000000000423802
	// succ:  l0000000000423786 l0000000000423802
l0000000000423786:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	// succ:  l0000000000423790
l0000000000423790:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	r8d = CONVERT(Mem0[rdx - 1<64>:byte], byte, word32)
	r8 = CONVERT(r8d, word32, uint64)
	rax = r8
	eax = eax & 0x7F<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rax = rax << cl
	SCZO = cond(rax)
	ecx = ecx + 7<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 | rax
	SZO = cond(r9)
	C = false
	SZO = cond(r8b & r8b)
	C = false
	branch Test(SG,S) l0000000000423790
	// succ:  l00000000004237AD l0000000000423790
l00000000004237AD:
	r9 = r9 + rdx
	SCZO = cond(r9)
	Mem0[rbx + 0x18<64>:word64] = r9
	// succ:  l00000000004237B4
l00000000004237B4:
	rax = rdx + 1<64>
	edx = CONVERT(Mem0[rdx:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	r10d = r10d ^ r10d
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	Mem0[rbx + 0x29<64>:byte] = dl
	// succ:  l00000000004237C3
l00000000004237C3:
	rax = rax + 1<64>
	SCZO = cond(rax)
	r9d = CONVERT(Mem0[rax - 1<64>:byte], byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	rdx = r9
	edx = edx & 0x7F<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rdx = rdx << cl
	SCZO = cond(rdx)
	ecx = ecx + 7<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r10 = r10 | rdx
	SZO = cond(r10)
	C = false
	SZO = cond(r9b & r9b)
	C = false
	branch Test(SG,S) l00000000004237C3
	// succ:  l00000000004237E0 l00000000004237C3
l00000000004237E0:
	r10 = r10 + rax
	SCZO = cond(r10)
	Mem0[rbx + 0x20<64>:word64] = r10
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000423720_exit
l00000000004237F0:
	Mem0[rbx + 8<64>:word64] = rax
	eax = CONVERT(Mem0[rdi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rdi + 1<64>
	SCZO = cond(al - 0xFF<8>)
	Mem0[rbx + 0x28<64>:byte] = al
	branch Test(NE,Z) l0000000000423786
	// succ:  l0000000000423802 l0000000000423786
l0000000000423802:
	Mem0[rbx + 0x18<64>:word64] = 0<64>
	goto l00000000004237B4
	// succ:  l00000000004237B4
fn0000000000423720_exit:


// fn0000000000423810
// Return size: 8
define fn0000000000423810
fn0000000000423810_entry:
	rsp = fp
	// succ:  l0000000000423810
l0000000000423810:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r9 = ~r9
	rbp = rsp + 0x60<64>
	rsi = rcx
	rbx = r9
	rbx = rbx + Mem0[rcx + 0x18<64>:word64]
	SCZO = cond(rbx)
	rdi = rdx
	Mem0[rsp + 0x60<64>:word64] = r8
	// succ:  l0000000000423832
l0000000000423832:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	// succ:  l0000000000423840
l0000000000423840:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	r9d = CONVERT(Mem0[rbx - 1<64>:byte], byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	rax = r9
	eax = eax & 0x7F<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rax = rax << cl
	SCZO = cond(rax)
	ecx = ecx + 7<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	rdx = rdx | rax
	SZO = cond(rdx)
	C = false
	SZO = cond(r9b & r9b)
	C = false
	branch Test(SG,S) l0000000000423840
	// succ:  l000000000042385D l0000000000423840
l000000000042385D:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l0000000000423885
	// succ:  l0000000000423862 l0000000000423885
l0000000000423862:
	rcx = rsi
	call fn0000000000423630 (retsize: 8;)
	r8 = rbp
	rdx = rdi
	rcx = rax
	call fn00000000004236C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000423832
	// succ:  l000000000042387C l0000000000423832
l000000000042387C:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000423810_exit
l0000000000423885:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000423810_exit
fn0000000000423810_exit:


// fn0000000000423890
// Return size: 8
define fn0000000000423890
fn0000000000423890_entry:
	rsp = fp
	// succ:  l0000000000423890
l0000000000423890:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(cl - 0xFF<8>)
	branch Test(EQ,Z) l00000000004238C0
	// succ:  l0000000000423899 l00000000004238C0
l0000000000423899:
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 0x70<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - 0x20<8>)
	branch Test(EQ,Z) l00000000004238F0
	// succ:  l00000000004238A2 l00000000004238F0
l00000000004238A2:
	branch Test(ULE,CZ) l00000000004238D0
	// succ:  l00000000004238A4 l00000000004238D0
l00000000004238A4:
	SCZO = cond(al - 0x40<8>)
	branch Test(EQ,Z) l00000000004238E0
	// succ:  l00000000004238A8 l00000000004238E0
l00000000004238A8:
	SCZO = cond(al - 0x50<8>)
	branch Test(EQ,Z) l00000000004238C0
	// succ:  l00000000004238AC l00000000004238C0
l00000000004238AC:
	SCZO = cond(al - 0x30<8>)
	branch Test(NE,Z) l00000000004238D8
	// succ:  l00000000004238B0 l00000000004238D8
l00000000004238B0:
	rcx = rdx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	// succ:  l00000000004238B7_thunk_fn0000000000411320
l00000000004238B7_thunk_fn0000000000411320:
	call fn0000000000411320 (retsize: 0;)
	return
	// succ:  fn0000000000423890_exit
l00000000004238C0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000423890_exit
l00000000004238D0:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004238C0
	// succ:  l00000000004238D4 l00000000004238C0
l00000000004238D4:
	SCZO = cond(al - 0x10<8>)
	branch Test(EQ,Z) l00000000004238C0
	// succ:  l00000000004238D8 l00000000004238C0
l00000000004238D8:
	abort()
	// succ:  l00000000004238E0
l00000000004238E0:
	rcx = rdx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	// succ:  l00000000004238E7_thunk_fn00000000004112E0
l00000000004238E7_thunk_fn00000000004112E0:
	call fn00000000004112E0 (retsize: 0;)
	return
	// succ:  fn0000000000423890_exit
l00000000004238F0:
	rcx = rdx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	// succ:  l00000000004238F7_thunk_fn0000000000411330
l00000000004238F7_thunk_fn0000000000411330:
	call fn0000000000411330 (retsize: 0;)
	return
	// succ:  fn0000000000423890_exit
fn0000000000423890_exit:


// fn0000000000423900
// Return size: 8
define fn0000000000423900
fn0000000000423900_entry:
	rsp = fp
	// succ:  l0000000000423900
l0000000000423900:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(ecx - 1<32>)
	branch Test(UGT,CZ) l0000000000423936
	// succ:  l000000000042390A l0000000000423936
l000000000042390A:
	__lock()
	v8 = Mem0[rdx - 0x60<64>:word32] - 1<32>
	Mem0[rdx - 0x60<64>:word32] = v8
	SCZO = cond(v8)
	branch Test(NE,Z) l0000000000423930
	// succ:  l0000000000423911 l0000000000423930
l0000000000423911:
	rax = Mem0[rdx - 0x48<64>:word64]
	rbx = rdx + 0x40<64>
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000423923
	// succ:  l000000000042391E l0000000000423923
l000000000042391E:
	rcx = rbx
	call rax (retsize: 8;)
	// succ:  l0000000000423923
l0000000000423923:
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000042392B_thunk_fn0000000000475BA0
l000000000042392B_thunk_fn0000000000475BA0:
	call fn0000000000475BA0 (retsize: 0;)
	return
	// succ:  fn0000000000423900_exit
l0000000000423930:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000423900_exit
l0000000000423936:
	rcx = Mem0[rdx - 0x38<64>:word64]
	call fn0000000000423AD0 (retsize: 8;)
	// succ:  l000000000042393F_thunk_fn0000000000423940
l000000000042393F_thunk_fn0000000000423940:
	call fn0000000000423940 (retsize: 0;)
	return
	// succ:  fn0000000000423900_exit
fn0000000000423900_exit:


// fn0000000000423940
// Return size: 8
define fn0000000000423940
fn0000000000423940_entry:
	rsp = fp
	// succ:  l0000000000423940
l0000000000423940:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	SCZO = cond(cl - 0x50<8>)
	ebx = ecx
	rbx = CONVERT(ebx, word32, uint64)
	rsi = rdx
	branch Test(EQ,Z) l0000000000423A55
	// succ:  l0000000000423954 l0000000000423A55
l0000000000423954:
	r10d = ecx
	r10 = CONVERT(r10d, word32, uint64)
	r10d = r10d & 0xF<32>
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d)
	C = false
	SCZO = cond(r10b - 0xC<8>)
	branch Test(UGT,CZ) l0000000000423A50
	// succ:  l0000000000423965 l0000000000423A50
l0000000000423965:
	r11 = 0x000000000048D420<p64>
	r10d = CONVERT(r10b, byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	rax = CONVERT(Mem0[r11 + r10 * 4<64>:word32], word32, int64)
	r11 = r11 + rax
	SCZO = cond(r11)
	call r11 (retsize: 0;)
	return
	// succ:  fn0000000000423940_exit
l0000000000423A50:
	abort()
	// succ:  l0000000000423A55
l0000000000423A55:
	rax = r8 + 7<64>
	rax = rax & 0xFFFFFFFFFFFFFFF8<64>
	SZO = cond(rax)
	C = false
	r10 = Mem0[rax:word64]
	rax = rax + 8<64>
	SCZO = cond(rax)
	Mem0[r9:word64] = r10
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000423940_exit
fn0000000000423940_exit:


// fn0000000000423A70
// Return size: 0
define fn0000000000423A70
fn0000000000423A70_entry:
	rsp = fp
	// succ:  l0000000000423A70
l0000000000423A70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rdx - 0x50<64>:word64]
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	rcx = rdx - 0x50<64>
	SCZO = cond(eax - 1<32>)
	branch Test(UGT,CZ) l0000000000423AB7
	// succ:  l0000000000423A84 l0000000000423AB7
l0000000000423A84:
	call fn0000000000475AF0 (retsize: 8;)
	__lock()
	v11 = Mem0[rbx - 0xA0<64>:word32] - 1<32>
	Mem0[rbx - 0xA0<64>:word32] = v11
	SCZO = cond(v11)
	branch Test(NE,Z) l0000000000423AB1
	// succ:  l0000000000423A93 l0000000000423AB1
l0000000000423A93:
	rax = Mem0[rbx - 0x88<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000423AA4
	// succ:  l0000000000423A9F l0000000000423AA4
l0000000000423A9F:
	rcx = rbx
	call rax (retsize: 8;)
	// succ:  l0000000000423AA4
l0000000000423AA4:
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000423AAC_thunk_fn0000000000475BA0
l0000000000423AAC_thunk_fn0000000000475BA0:
	call fn0000000000475BA0 (retsize: 0;)
	return
	// succ:  fn0000000000423A70_exit
l0000000000423AB1:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000423A70_exit
l0000000000423AB7:
	rcx = Mem0[rbx - 0x78<64>:word64]
	call fn0000000000423AD0 (retsize: 8;)
	// succ:  l0000000000423ACF_thunk_fn0000000000423AD0
l0000000000423ACF_thunk_fn0000000000423AD0:
	call fn0000000000423AD0 (retsize: 0;)
	return
	// succ:  fn0000000000423A70_exit
fn0000000000423A70_exit:


// fn0000000000423AD0
// Return size: 0
define fn0000000000423AD0
fn0000000000423AD0_entry:
	rsp = fp
	// succ:  l0000000000423AD0
l0000000000423AD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	call rcx (retsize: 8;)
	abort()
	rcx = rax
	call fn0000000000475840 (retsize: 8;)
	abort()
	rsi = rdx
	rbx = rax
	call fn0000000000475A70 (retsize: 8;)
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	branch Test(EQ,Z) l0000000000423B03
	// succ:  l0000000000423AFB l0000000000423B03
l0000000000423AFB:
	rcx = rbx
	call fn00000000004115B0 (retsize: 8;)
	// succ:  l0000000000423B03
l0000000000423B03:
	rcx = rbx
	call fn0000000000475910 (retsize: 8;)
	// succ:  l0000000000423B0F_thunk_fn0000000000423B10
l0000000000423B0F_thunk_fn0000000000423B10:
	call fn0000000000423B10 (retsize: 0;)
	return
	// succ:  fn0000000000423AD0_exit
fn0000000000423AD0_exit:


// fn0000000000423B10
// Return size: 0
define fn0000000000423B10
fn0000000000423B10_entry:
	rsp = fp
	// succ:  l0000000000423B10
l0000000000423B10:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	call rcx (retsize: 8;)
	call fn0000000000472D60 (retsize: 8;)
fn0000000000423B10_exit:


// fn0000000000423B20
// Return size: 0
define fn0000000000423B20
fn0000000000423B20_entry:
	rsp = fp
	// succ:  l0000000000423B20
l0000000000423B20:
	// succ:  l0000000000423B20_thunk_fn0000000000475550
l0000000000423B20_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000423B20_exit
fn0000000000423B20_exit:


// fn0000000000423B30
// Return size: 8
define fn0000000000423B30
fn0000000000423B30_entry:
	rsp = fp
	// succ:  l0000000000423B30
l0000000000423B30:
	return
	// succ:  fn0000000000423B30_exit
fn0000000000423B30_exit:


// fn0000000000423B40
// Return size: 0
define fn0000000000423B40
fn0000000000423B40_entry:
	rsp = fp
	// succ:  l0000000000423B40
l0000000000423B40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x00000000004958D0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046F350 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000423B5F_thunk_fn0000000000475550
l0000000000423B5F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000423B40_exit
fn0000000000423B40_exit:


// fn0000000000423B70
// Return size: 8
define fn0000000000423B70
fn0000000000423B70_entry:
	rsp = fp
	goto l0000000000423B70
	// succ:  l0000000000423B70
l0000000000423B1F_thunk_fn0000000000423B20:
	call fn0000000000423B20 (retsize: 0;)
	return
	// succ:  fn0000000000423B70_exit
l0000000000423B70:
	rax = 0x00000000004958D0<p64>
	Mem0[rcx:word64] = rax
	goto l0000000000423B7A_thunk_fn000000000046F350
	// succ:  l0000000000423B7A_thunk_fn000000000046F350
l0000000000423B70:
	goto l0000000000423B1F_thunk_fn0000000000423B20
	// succ:  l0000000000423B1F_thunk_fn0000000000423B20
l0000000000423B7A_thunk_fn000000000046F350:
	call fn000000000046F350 (retsize: 0;)
	return
	// succ:  fn0000000000423B70_exit
fn0000000000423B70_exit:


// fn0000000000423B80
// Return size: 0
define fn0000000000423B80
fn0000000000423B80_entry:
	rsp = fp
	// succ:  l0000000000423B80
l0000000000423B80:
	// succ:  l0000000000423B80_thunk_fn0000000000475550
l0000000000423B80_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000423B80_exit
fn0000000000423B80_exit:


// fn0000000000423B90
// Return size: 8
define fn0000000000423B90
fn0000000000423B90_entry:
	rsp = fp
	// succ:  l0000000000423B90
l0000000000423B90:
	return
	// succ:  fn0000000000423B90_exit
fn0000000000423B90_exit:


// fn0000000000423BA0
// Return size: 0
define fn0000000000423BA0
fn0000000000423BA0_entry:
	rsp = fp
	// succ:  l0000000000423BA0
l0000000000423BA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000495990<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000423B70 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000423BBF_thunk_fn0000000000475550
l0000000000423BBF_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000423BA0_exit
fn0000000000423BA0_exit:


// fn0000000000423BD0
// Return size: 8
define fn0000000000423BD0
fn0000000000423BD0_entry:
	rsp = fp
	// succ:  l0000000000423BD0
l0000000000423BD0:
	rax = 0x0000000000495990<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000423BDA_thunk_fn0000000000423B70
l0000000000423BDA_thunk_fn0000000000423B70:
	call fn0000000000423B70 (retsize: 0;)
	return
	// succ:  fn0000000000423BD0_exit
fn0000000000423BD0_exit:


// fn0000000000423BE0
// Return size: 0
define fn0000000000423BE0
fn0000000000423BE0_entry:
	rsp = fp
	// succ:  l0000000000423BE0
l0000000000423BE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000495A10<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn0000000000423B70 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000423BFF_thunk_fn0000000000475550
l0000000000423BFF_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000423BE0_exit
fn0000000000423BE0_exit:


// fn0000000000423C10
// Return size: 0
define fn0000000000423C10
fn0000000000423C10_entry:
	rsp = fp
	// succ:  l0000000000423C10
l0000000000423C10:
	rax = 0x0000000000495A10<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000423C1A_thunk_fn0000000000423B70
l0000000000423C1A_thunk_fn0000000000423B70:
	call fn0000000000423B70 (retsize: 0;)
	return
	// succ:  fn0000000000423C10_exit
fn0000000000423C10_exit:


// fn0000000000423C20
// Return size: 8
define fn0000000000423C20
fn0000000000423C20_entry:
	rsp = fp
	// succ:  l0000000000423C20
l0000000000423C20:
	r8 = 0x00000000004762E0<p64>
	rcx = 0x000000000048E140<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000423C33_thunk_fn00000000004117B0
l0000000000423C33_thunk_fn00000000004117B0:
	call fn00000000004117B0 (retsize: 0;)
	return
	// succ:  fn0000000000423C20_exit
fn0000000000423C20_exit:


// fn0000000000423C40
// Return size: 8
define fn0000000000423C40
fn0000000000423C40_entry:
	rsp = fp
	// succ:  l0000000000423C40
l0000000000423C40:
	r8 = 0x00000000004762F0<p64>
	rcx = 0x000000000048E160<p64>
	edx = 8<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000423C53_thunk_fn00000000004117B0
l0000000000423C53_thunk_fn00000000004117B0:
	call fn00000000004117B0 (retsize: 0;)
	return
	// succ:  fn0000000000423C40_exit
fn0000000000423C40_exit:


// fn0000000000423C60
// Return size: 8
define fn0000000000423C60
fn0000000000423C60_entry:
	rsp = fp
	// succ:  l0000000000423C60
l0000000000423C60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xB8<64>
	SCZO = cond(rsp)
	eax = 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ecx - 1<32>)
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	Mem0[rsp + 0x5C<64>:word32] = 0<32>
	branch Test(EQ,Z) l0000000000423CA2
	// succ:  l0000000000423C8E l0000000000423CA2
l0000000000423C8E:
	rsp = rsp + 0xB8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000423C60_exit
l0000000000423CA2:
	rax = 0xB8B1AABCBCD4D500<64>
	rbx = r9
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	r8 = r8 + rax
	SCZO = cond(r8)
	SCZO = cond(r8 - 1<64>)
	Mem0[rsp + 0x43<64>:byte] = CONVERT(Test(UGT,CZ), bool, int8)
	edi = CONVERT(Mem0[rsp + 0x43<64>:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edx - 6<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(dil - al)
	branch Test(UGE,C) l0000000000423D62
	// succ:  l0000000000423CD1 l0000000000423D62
l0000000000423CD1:
	r12 = Mem0[r9 - 0x10<64>:word64]
	rax = Mem0[r9 - 0x18<64>:word64]
	edi = Mem0[r9 - 0x24<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(r12 & r12)
	C = false
	Mem0[rsp + 0x20<64>:word64] = rax
	branch Test(EQ,Z) l0000000000423D35
	// succ:  l0000000000423CE7 l0000000000423D35
l0000000000423CE7:
	esi = esi & 8<32>
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	branch Test(NE,Z) l0000000000423D59
	// succ:  l0000000000423CEC l0000000000423D59
l0000000000423CEC:
	SZO = cond(edi & edi)
	C = false
	branch Test(SG,S) l00000000004240DA
	// succ:  l0000000000423CF4 l00000000004240DA
l0000000000423CF4:
	rcx = Mem0[rsp + 0x120<64>:word64]
	r8 = rbx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn0000000000411270 (retsize: 8;)
	rcx = Mem0[rsp + 0x120<64>:word64]
	r8 = CONVERT(edi, word32, int64)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000411270 (retsize: 8;)
	rcx = Mem0[rsp + 0x120<64>:word64]
	rdx = r12
	call fn00000000004112C0 (retsize: 8;)
	eax = 7<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000423C8E
	// succ:  l0000000000423C8E
l0000000000423D35:
	esi = esi & 8<32>
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	branch Test(NE,Z) l0000000000423F37
	// succ:  l0000000000423D3E l0000000000423F37
l0000000000423D3E:
	rcx = rbx
	call fn00000000004758D0 (retsize: 8;)
	// succ:  l0000000000423D50
l0000000000423D50:
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l0000000000423F37
	// succ:  l0000000000423D59 l0000000000423F37
l0000000000423D59:
	SZO = cond(edi & edi)
	C = false
	branch Test(NS,S) l0000000000423CF4
	// succ:  l0000000000423D5D l0000000000423CF4
l0000000000423D5D:
	call fn000000000046F3B0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	// succ:  l0000000000423D62
l0000000000423D62:
	rcx = Mem0[rsp + 0x120<64>:word64]
	call fn00000000004112D0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	Mem0[rsp + 0x20<64>:word64] = rax
	branch Test(EQ,Z) l0000000000423F3C
	// succ:  l0000000000423D7D l0000000000423F3C
l0000000000423D7D:
	rax = rsp + 0x80<64>
	rdx = Mem0[rsp + 0x20<64>:word64]
	rcx = Mem0[rsp + 0x120<64>:word64]
	r8 = rax
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn0000000000423720 (retsize: 8;)
	ecx = CONVERT(Mem0[rsp + 0xA8<64>:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rdx = Mem0[rsp + 0x120<64>:word64]
	r15 = rax
	call fn0000000000423890 (retsize: 8;)
	rcx = Mem0[rsp + 0x120<64>:word64]
	rdx = rsp + 0x5C<64>
	Mem0[rsp + 0x90<64>:word64] = rax
	call fn00000000004112B0 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x5C<64>:word32] - 1<32>)
	r12 = rax
	r12 = r12 - 0<64> - C
	SCZO = cond(r12)
	SCZO = cond(r15 - Mem0[rsp + 0xA0<64>:word64])
	branch Test(UGE,C) l0000000000423EA2
	// succ:  l0000000000423DEB l0000000000423EA2
l0000000000423DEB:
	r14 = rsp + 0x68<64>
	rdi = rsp + 0x70<64>
	rbp = rsp + 0x78<64>
	// succ:  l0000000000423DFA
l0000000000423DFA:
	r13d = CONVERT(Mem0[rsp + 0xA9<64>:byte], byte, word32)
	r13 = CONVERT(r13d, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = r13d
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000423890 (retsize: 8;)
	r8 = r15
	r9 = r14
	ecx = r13d
	rcx = CONVERT(ecx, word32, uint64)
	rdx = rax
	call fn0000000000423940 (retsize: 8;)
	r13d = CONVERT(Mem0[rsp + 0xA9<64>:byte], byte, word32)
	r13 = CONVERT(r13d, word32, uint64)
	r15 = rax
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = r13d
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000423890 (retsize: 8;)
	r8 = r15
	r9 = rdi
	ecx = r13d
	rcx = CONVERT(ecx, word32, uint64)
	rdx = rax
	call fn0000000000423940 (retsize: 8;)
	r13d = CONVERT(Mem0[rsp + 0xA9<64>:byte], byte, word32)
	r13 = CONVERT(r13d, word32, uint64)
	r15 = rax
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = r13d
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000423890 (retsize: 8;)
	r9 = rbp
	r8 = r15
	ecx = r13d
	rcx = CONVERT(ecx, word32, uint64)
	rdx = rax
	call fn0000000000423940 (retsize: 8;)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r15 = rax
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	// succ:  l0000000000423E74
l0000000000423E74:
	r15 = r15 + 1<64>
	SCZO = cond(r15)
	eax = CONVERT(Mem0[r15 - 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rdx = rax
	edx = edx & 0x7F<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rdx = rdx << cl
	SCZO = cond(rdx)
	ecx = ecx + 7<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 | rdx
	SZO = cond(r9)
	C = false
	SZO = cond(al & al)
	C = false
	branch Test(SG,S) l0000000000423E74
	// succ:  l0000000000423E90 l0000000000423E74
l0000000000423E90:
	rax = Mem0[rsp + 0x80<64>:word64]
	rax = rax + Mem0[rsp + 0x68<64>:word64]
	SCZO = cond(rax)
	SCZO = cond(r12 - rax)
	branch Test(UGE,C) l0000000000423F12
	// succ:  l0000000000423EA2 l0000000000423F12
l0000000000423EA2:
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000423EAA
l0000000000423EAA:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	// succ:  l0000000000423EAE
l0000000000423EAE:
	SZO = cond(sil & 1<8>)
	C = false
	branch Test(EQ,Z) l0000000000423EF0
	// succ:  l0000000000423EB4 l0000000000423EF0
l0000000000423EB4:
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l0000000000423F3C
	// succ:  l0000000000423EBD l0000000000423F3C
l0000000000423EBD:
	SCZO = cond(Mem0[rsp + 0x43<64>:byte] - 0<8>)
	eax = 6<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l0000000000423C8E
	// succ:  l0000000000423ECD l0000000000423C8E
l0000000000423ECD:
	rsi = Mem0[rsp + 0x20<64>:word64]
	rdx = Mem0[rsp + 0x60<64>:word64]
	Mem0[rbx - 0x24<64>:word32] = edi
	Mem0[rbx - 0x20<64>:word64] = rcx
	Mem0[rbx - 0x10<64>:word64] = r12
	Mem0[rbx - 0x18<64>:word64] = rsi
	Mem0[rbx - 8<64>:word64] = rdx
	goto l0000000000423C8E
	// succ:  l0000000000423C8E
l0000000000423EF0:
	esi = esi & 8<32>
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	branch Test(NE,Z) l0000000000423D50
	// succ:  l0000000000423EF9 l0000000000423D50
l0000000000423EF9:
	SCZO = cond(Mem0[rsp + 0x43<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000423D50
	// succ:  l0000000000423F04 l0000000000423D50
l0000000000423F04:
	SCZO = cond(eax - 1<32>)
	branch Test(NE,Z) l0000000000423CEC
	// succ:  l0000000000423F0D l0000000000423CEC
l0000000000423F0D:
	goto l0000000000423D3E
	// succ:  l0000000000423D3E
l0000000000423F12:
	rax = rax + Mem0[rsp + 0x70<64>:word64]
	SCZO = cond(rax)
	SCZO = cond(r12 - rax)
	branch Test(ULT,C) l0000000000423F46
	// succ:  l0000000000423F1C l0000000000423F46
l0000000000423F1C:
	SCZO = cond(r15 - Mem0[rsp + 0xA0<64>:word64])
	branch Test(ULT,C) l0000000000423DFA
	// succ:  l0000000000423F2A l0000000000423DFA
l0000000000423F2A:
	goto l0000000000423EA2
	// succ:  l0000000000423EA2
l0000000000423F37:
	call fn0000000000472D60 (retsize: 8;)
	// succ:  l0000000000423F3C
l0000000000423F3C:
	eax = 8<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000423C8E
	// succ:  l0000000000423C8E
l0000000000423F46:
	r12 = Mem0[rsp + 0x78<64>:word64]
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l0000000000423F3C
	// succ:  l0000000000423F50 l0000000000423F3C
l0000000000423F50:
	r12 = r12 + Mem0[rsp + 0x88<64>:word64]
	SCZO = cond(r12)
	SZO = cond(r9 & r9)
	C = false
	branch Test(EQ,Z) l00000000004240C7
	// succ:  l0000000000423F61 l00000000004240C7
l0000000000423F61:
	rax = Mem0[rsp + 0xA0<64>:word64]
	SZO = cond(r12 & r12)
	C = false
	rax = rax - 1<64> + r9
	rcx = rax
	branch Test(EQ,Z) l0000000000423F3C
	// succ:  l0000000000423F76 l0000000000423F3C
l0000000000423F76:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004240D0
	// succ:  l0000000000423F7F l00000000004240D0
l0000000000423F7F:
	rax = 0x0000000000492FC0<p64>
	rdx = rax
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 8<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x44<64>:word32] = eax
	branch Test(NE,Z) l0000000000423FC1
	// succ:  l0000000000423F94 l0000000000423FC1
l0000000000423F94:
	SCZO = cond(Mem0[rsp + 0x43<64>:byte] - 0<8>)
	rax = 0x0000000000492FF0<p64>
	rdx = rax
	branch Test(NE,Z) l0000000000423FC1
	// succ:  l0000000000423FA5 l0000000000423FC1
l0000000000423FA5:
	SZO = cond(Mem0[rbx:byte] & 1<8>)
	C = false
	rax = rbx + 0x40<64>
	branch Test(EQ,Z) l0000000000423FB2
	// succ:  l0000000000423FAE l0000000000423FB2
l0000000000423FAE:
	rax = Mem0[rbx - 0x50<64>:word64]
	// succ:  l0000000000423FB2
l0000000000423FB2:
	Mem0[rsp + 0x60<64>:word64] = rax
	rax = Mem0[rax - 0x90<64>:word64]
	rdx = rax
	// succ:  l0000000000423FC1
l0000000000423FC1:
	rax = rsp + 0x60<64>
	Mem0[rsp + 0x38<64>:word64] = rbx
	rbx = Mem0[rsp + 0x28<64>:word64]
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	r13 = rcx
	r15 = rdx
	Mem0[rsp + 0x48<64>:word64] = rax
	Mem0[rsp + 0x30<64>:word64] = r12
	// succ:  l0000000000423FE3
l0000000000423FE3:
	rdx = rdi
	rcx = r13
	call fn0000000000423590 (retsize: 8;)
	rdx = rbp
	rcx = rax
	r12 = rax
	call fn0000000000423590 (retsize: 8;)
	rdx = Mem0[rsp + 0x70<64>:word64]
	SCZO = cond(rdx - 0<64>)
	branch Test(EQ,Z) l000000000042407E
	// succ:  l0000000000424007 l000000000042407E
l0000000000424007:
	branch Test(GT,SZO) l0000000000424086
	// succ:  l0000000000424009 l0000000000424086
l0000000000424009:
	eax = Mem0[rsp + 0x44<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(r15 & r15)
	C = false
	cl = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(eax & eax)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	eax = eax & ecx
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - Mem0[rsp + 0x43<64>:byte])
	branch Test(UGT,CZ) l000000000042412F
	// succ:  l0000000000424024 l000000000042412F
l0000000000424024:
	rdx = ~rdx
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rax = rdx
	rax = rax + Mem0[rsp + 0x98<64>:word64]
	SCZO = cond(rax)
	// succ:  l0000000000424040
l0000000000424040:
	rax = rax + 1<64>
	SCZO = cond(rax)
	r8d = CONVERT(Mem0[rax - 1<64>:byte], byte, word32)
	r8 = CONVERT(r8d, word32, uint64)
	rdx = r8
	edx = edx & 0x7F<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rdx = rdx << cl
	SCZO = cond(rdx)
	ecx = ecx + 7<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r9 | rdx
	SZO = cond(r9)
	C = false
	SZO = cond(r8b & r8b)
	C = false
	branch Test(SG,S) l0000000000424040
	// succ:  l000000000042405D l0000000000424040
l000000000042405D:
	SZO = cond(r9 & r9)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	// succ:  l0000000000424063
l0000000000424063:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004240AC
	// succ:  l0000000000424067 l00000000004240AC
l0000000000424067:
	rax = Mem0[rsp + 0x78<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000042414A
	// succ:  l0000000000424075 l000000000042414A
l0000000000424075:
	r13 = r12 + rax
	goto l0000000000423FE3
	// succ:  l0000000000423FE3
l000000000042407E:
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	goto l0000000000424067
	// succ:  l0000000000424067
l0000000000424086:
	rcx = rbx
	call fn0000000000423630 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004240AC
	// succ:  l0000000000424093 l00000000004240AC
l0000000000424093:
	SZO = cond(r15 & r15)
	C = false
	branch Test(EQ,Z) l0000000000424067
	// succ:  l0000000000424098 l0000000000424067
l0000000000424098:
	r8 = Mem0[rsp + 0x48<64>:word64]
	rdx = r15
	rcx = rax
	call fn00000000004236C0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000424067
	// succ:  l00000000004240AC l0000000000424067
l00000000004240AC:
	rcx = r13
	r12 = Mem0[rsp + 0x30<64>:word64]
	rbx = Mem0[rsp + 0x38<64>:word64]
	edi = Mem0[rsp + 0x70<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	eax = 3<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000423EAE
	// succ:  l0000000000423EAE
l00000000004240C7:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l0000000000423F3C
	// succ:  l00000000004240D0 l0000000000423F3C
l00000000004240D0:
	eax = 2<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000423EAA
	// succ:  l0000000000423EAA
l00000000004240DA:
	rdx = Mem0[rsp + 0x20<64>:word64]
	rcx = Mem0[rsp + 0x120<64>:word64]
	r8 = rsp + 0x80<64>
	call fn0000000000423720 (retsize: 8;)
	ecx = CONVERT(Mem0[rsp + 0xA8<64>:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rdx = Mem0[rsp + 0x120<64>:word64]
	call fn0000000000423890 (retsize: 8;)
	ecx = CONVERT(Mem0[rsp + 0xA8<64>:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rdx = Mem0[rsp + 0x120<64>:word64]
	Mem0[rsp + 0x90<64>:word64] = rax
	call fn0000000000423890 (retsize: 8;)
	Mem0[rbx - 0x10<64>:word64] = rax
	goto l0000000000423CF4
	// succ:  l0000000000423CF4
l000000000042412F:
	r8 = Mem0[rsp + 0x60<64>:word64]
	r9 = rdx
	rcx = rbx
	rdx = r15
	call fn0000000000423810 (retsize: 8;)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000424063
	// succ:  l0000000000424063
l000000000042414A:
	SZO = cond(r14b & r14b)
	C = false
	rcx = r13
	r12 = Mem0[rsp + 0x30<64>:word64]
	rbx = Mem0[rsp + 0x38<64>:word64]
	branch Test(EQ,Z) l0000000000423F3C
	// succ:  l0000000000424160 l0000000000423F3C
l0000000000424160:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	eax = 2<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000423EAE
	// succ:  l0000000000423EAE
fn0000000000423C60_exit:


// fn0000000000424170
// Return size: 8
define fn0000000000424170
fn0000000000424170_entry:
	rsp = fp
	// succ:  l0000000000424170
l0000000000424170:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[0x0000000000477320<p64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000424190
	// succ:  l000000000042417E l0000000000424190
l000000000042417E:
	rax = 0x000000000048C050<p64>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424170_exit
l0000000000424190:
	rcx = 0x0000000000477320<p64>
	call fn0000000000475E80 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000042417E
	// succ:  l00000000004241A0 l000000000042417E
l00000000004241A0:
	rcx = 0x000000000048C050<p64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn0000000000420360 (retsize: 8;)
	rcx = 0x0000000000477320<p64>
	call fn0000000000475F80 (retsize: 8;)
	rcx = 0x0000000000476350<p64>
	call fn0000000000410BF0 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = 0x000000000048C050<p64>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424170_exit
fn0000000000424170_exit:


// fn00000000004241F0
// Return size: 0
define fn00000000004241F0
fn00000000004241F0_entry:
	rsp = fp
	// succ:  l00000000004241F0
l00000000004241F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000495A90<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn00000000004620B0 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000042420F_thunk_fn0000000000475550
l000000000042420F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn00000000004241F0_exit
fn00000000004241F0_exit:


// fn0000000000424220
// Return size: 0
define fn0000000000424220
fn0000000000424220_entry:
	rsp = fp
	// succ:  l0000000000424220
l0000000000424220:
	rax = 0x0000000000495A90<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000042422A_thunk_fn00000000004620B0
l000000000042422A_thunk_fn00000000004620B0:
	call fn00000000004620B0 (retsize: 0;)
	return
	// succ:  fn0000000000424220_exit
fn0000000000424220_exit:


// fn0000000000424230
// Return size: 0
define fn0000000000424230
fn0000000000424230_entry:
	rsp = fp
	// succ:  l0000000000424230
l0000000000424230:
	// succ:  l0000000000424230_thunk_fn0000000000475550
l0000000000424230_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000424230_exit
fn0000000000424230_exit:


// fn0000000000424240
// Return size: 8
define fn0000000000424240
fn0000000000424240_entry:
	rsp = fp
	// succ:  l0000000000424240
l0000000000424240:
	return
	// succ:  fn0000000000424240_exit
fn0000000000424240_exit:


// fn0000000000424250
// Return size: 0
define fn0000000000424250
fn0000000000424250_entry:
	rsp = fp
	// succ:  l0000000000424250
l0000000000424250:
	// succ:  l0000000000424250_thunk_fn0000000000475550
l0000000000424250_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000424250_exit
fn0000000000424250_exit:


// fn0000000000424260
// Return size: 8
define fn0000000000424260
fn0000000000424260_entry:
	rsp = fp
	// succ:  l0000000000424260
l0000000000424260:
	return
	// succ:  fn0000000000424260_exit
fn0000000000424260_exit:


// fn0000000000424270
// Return size: 8
define fn0000000000424270
fn0000000000424270_entry:
	rsp = fp
	// succ:  l0000000000424270
l0000000000424270:
	ecx = ecx & 0x3D<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	SCZO = cond(ecx - 0x3C<32>)
	branch Test(UGT,CZ) l0000000000424350
	// succ:  l000000000042427C l0000000000424350
l000000000042427C:
	rax = 0x000000000048DD84<p64>
	rdx = CONVERT(Mem0[rax + rcx * 4<64>:word32], word32, int64)
	rax = rax + rdx
	SCZO = cond(rax)
	switch (ecx) { l0000000000424350 l0000000000424290 l0000000000424350 l0000000000424350 l0000000000424350 l00000000004242B0 l0000000000424350 l0000000000424350 l0000000000424300 l00000000004242C0 l0000000000424350 l0000000000424350 l00000000004242F0 l00000000004242D0 l0000000000424350 l0000000000424350 l00000000004242E0 l0000000000424290 l0000000000424350 l0000000000424350 l00000000004242A0 l00000000004242B0 l0000000000424350 l0000000000424350 l0000000000424320 l00000000004242C0 l0000000000424350 l0000000000424350 l0000000000424330 l00000000004242D0 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l00000000004242E0 l0000000000424350 l0000000000424350 l0000000000424350 l00000000004242A0 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424310 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424340 }
	// succ:  l0000000000424350 l0000000000424290 l0000000000424350 l0000000000424350 l0000000000424350 l00000000004242B0 l0000000000424350 l0000000000424350 l0000000000424300 l00000000004242C0 l0000000000424350 l0000000000424350 l00000000004242F0 l00000000004242D0 l0000000000424350 l0000000000424350 l00000000004242E0 l0000000000424290 l0000000000424350 l0000000000424350 l00000000004242A0 l00000000004242B0 l0000000000424350 l0000000000424350 l0000000000424320 l00000000004242C0 l0000000000424350 l0000000000424350 l0000000000424330 l00000000004242D0 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424350 l00000000004242E0 l0000000000424350 l0000000000424350 l0000000000424350 l00000000004242A0 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424310 l0000000000424350 l0000000000424350 l0000000000424350 l0000000000424340
l0000000000424290:
	rax = 0x000000000048DD62<p64>
	return
	// succ:  fn0000000000424270_exit
l00000000004242A0:
	rax = 0x000000000048DD73<p64>
	return
	// succ:  fn0000000000424270_exit
l00000000004242B0:
	rax = 0x000000000048DD76<p64>
	return
	// succ:  fn0000000000424270_exit
l00000000004242C0:
	rax = 0x000000000048DD70<p64>
	return
	// succ:  fn0000000000424270_exit
l00000000004242D0:
	rax = 0x000000000048DD64<p64>
	return
	// succ:  fn0000000000424270_exit
l00000000004242E0:
	rax = 0x000000000048DD60<p64>
	return
	// succ:  fn0000000000424270_exit
l00000000004242F0:
	rax = 0x000000000048DD79<p64>
	return
	// succ:  fn0000000000424270_exit
l0000000000424300:
	rax = 0x000000000048DD68<p64>
	return
	// succ:  fn0000000000424270_exit
l0000000000424310:
	rax = 0x000000000048DD6D<p64>
	return
	// succ:  fn0000000000424270_exit
l0000000000424320:
	rax = 0x000000000048DD6A<p64>
	return
	// succ:  fn0000000000424270_exit
l0000000000424330:
	rax = 0x000000000048DD7C<p64>
	return
	// succ:  fn0000000000424270_exit
l0000000000424340:
	rax = 0x000000000048DD80<p64>
	return
	// succ:  fn0000000000424270_exit
l0000000000424350:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000424270_exit
fn0000000000424270_exit:


// fn0000000000424360
// Return size: 8
define fn0000000000424360
fn0000000000424360_entry:
	rsp = fp
	// succ:  l0000000000424360
l0000000000424360:
	rax = 0x000000000048AA00<p64>
	Mem0[0x000000000048AA00<p64>:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[0x000000000048AA50<p64>:word64] = rax
	return
	// succ:  fn0000000000424360_exit
fn0000000000424360_exit:


// fn0000000000424380
// Return size: 8
define fn0000000000424380
fn0000000000424380_entry:
	rsp = fp
	// succ:  l0000000000424380
l0000000000424380:
	rax = 0x00000000004897A0<p64>
	Mem0[0x00000000004897A0<p64>:word64] = 0xFFFFFFFFFFFFFFFD<64>
	Mem0[0x000000000048AA60<p64>:word64] = rax
	return
	// succ:  fn0000000000424380_exit
fn0000000000424380_exit:


// fn00000000004243A0
// Return size: 0
define fn00000000004243A0
fn00000000004243A0_entry:
	rsp = fp
	// succ:  l00000000004243A0
l00000000004243A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r12 = _errno
	edi = ecx
	rdi = CONVERT(edi, word32, uint64)
	rsi = rdx
	rbp = r8
	rbx = r8
	// succ:  l00000000004243C0
l00000000004243C0:
	r8d = ebx
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rsi
	ecx = edi
	rcx = CONVERT(ecx, word32, uint64)
	call write (retsize: 8;)
	rax = CONVERT(eax, int32, int64)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(EQ,Z) l00000000004243E0
	// succ:  l00000000004243D5 l00000000004243E0
l00000000004243D5:
	rbx = rbx - rax
	SCZO = cond(rbx)
	branch Test(EQ,Z) l00000000004243E8
	// succ:  l00000000004243DA l00000000004243E8
l00000000004243DA:
	rsi = rsi + rax
	SCZO = cond(rsi)
	goto l00000000004243C0
	// succ:  l00000000004243C0
l00000000004243E0:
	call r12 (retsize: 8;)
	SCZO = cond(Mem0[rax:word32] - 4<32>)
	branch Test(EQ,Z) l00000000004243C0
	// succ:  l00000000004243E8 l00000000004243C0
l00000000004243E8:
	rax = rbp
	rax = rax - rbx
	SCZO = cond(rax)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004243A0_exit
fn00000000004243A0_exit:


// fn0000000000424400
// Return size: 8
define fn0000000000424400
fn0000000000424400_entry:
	rsp = fp
	// succ:  l0000000000424400
l0000000000424400:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x10<64>:word64]
	edx = Mem0[rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x18<64>:word64]
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(edx - eax)
	branch Test(NE,Z) l0000000000424435
	// succ:  l000000000042441C l0000000000424435
l000000000042441C:
	rax = Mem0[rbp + 0x10<64>:word64]
	edx = Mem0[rax + 4<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x18<64>:word64]
	eax = Mem0[rax + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(edx - eax)
	branch Test(NE,Z) l0000000000424435
	// succ:  l000000000042442E l0000000000424435
l000000000042442E:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042443A
	// succ:  l000000000042443A
l0000000000424435:
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042443A
l000000000042443A:
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424400_exit
fn0000000000424400_exit:


// fn0000000000424440
// Return size: 8
define fn0000000000424440
fn0000000000424440_entry:
	rsp = fp
	// succ:  l0000000000424440
l0000000000424440:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rdx = rax + 0x24<64>
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = rax + 8<64>
	SCZO = cond(rax)
	rcx = rax
	call fn000000000046B620 (retsize: 8;)
	rax = Mem0[rbp + 0x10<64>:word64]
	eax = Mem0[rax + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 0x20<64>:word32] = edx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424440_exit
fn0000000000424440_exit:


// fn0000000000424480
// Return size: 8
define fn0000000000424480
fn0000000000424480_entry:
	rsp = fp
	// succ:  l0000000000424480
l0000000000424480:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word32] = r8d
	ecx = Mem0[rbp + 0x18<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	edx = Mem0[rbp + 0x1C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax:word32] = ecx
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 4<64>:word32] = edx
	rax = Mem0[rbp + 0x10<64>:word64]
	edx = Mem0[rbp + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rax + 0x20<64>:word32] = edx
	eax = Mem0[rbp + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = Mem0[rbp + 0x10<64>:word64]
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B4B0 (retsize: 8;)
	eax = Mem0[rbp + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = Mem0[rbp + 0x10<64>:word64]
	rcx = rdx + 0x38<64>
	rdx = rax
	call fn000000000046B990 (retsize: 8;)
	Mem0[rbp - 4<64>:word32] = 1<32>
	goto l0000000000424523
	// succ:  l0000000000424523
l00000000004244E4:
	eax = Mem0[rbp + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - Mem0[rbp - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbp - 0x10<64>:word32] = eax
	eax = Mem0[rbp + 0x1C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp - 0xC<64>:word32] = eax
	rax = Mem0[rbp + 0x10<64>:word64]
	rcx = rax + 8<64>
	rax = rbp - 0x10<64>
	rdx = rax
	call fn000000000046B5F0 (retsize: 8;)
	rax = Mem0[rbp + 0x10<64>:word64]
	rdx = rax + 0x2D<64>
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = rax + 0x38<64>
	SCZO = cond(rax)
	rcx = rax
	call fn000000000046BAC0 (retsize: 8;)
	v13 = Mem0[rbp - 4<64>:word32] + 1<32>
	Mem0[rbp - 4<64>:word32] = v13
	SCZO = cond(v13)
	// succ:  l0000000000424523
l0000000000424523:
	eax = Mem0[rbp - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - Mem0[rbp + 0x20<64>:word32])
	branch Test(LE,SZO) l00000000004244E4
	// succ:  l000000000042452B l00000000004244E4
l000000000042452B:
	eax = Mem0[rbp + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - Mem0[rbp + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = SLICE(rax - 1<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	edx = Mem0[rbp + 0x1C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 0x24<64>:word32] = ecx
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 0x28<64>:word32] = edx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424480_exit
fn0000000000424480_exit:


// fn0000000000424550
// Return size: 8
define fn0000000000424550
fn0000000000424550_entry:
	rsp = fp
	// succ:  l0000000000424550
l0000000000424550:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x30<64>:word64] = rcx
	Mem0[rbp - 0x28<64>:word64] = rdx
	rax = Mem0[rbp - 0x30<64>:word64]
	ebx = Mem0[rax + 0x24<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	rax = Mem0[rbp - 0x30<64>:word64]
	eax = Mem0[rax + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rax = CONVERT(eax, int32, int64)
	rdx = Mem0[rbp - 0x30<64>:word64]
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B700 (retsize: 8;)
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ebx - eax)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004245A5
	// succ:  l0000000000424594 l00000000004245A5
l0000000000424594:
	rax = Mem0[rbp - 0x30<64>:word64]
	edx = CONVERT(Mem0[rax + 0x30<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp - 0x30<64>:word64]
	Mem0[rax + 0x50<64>:byte] = dl
	goto l00000000004245E3
	// succ:  l00000000004245E3
l00000000004245A5:
	rax = Mem0[rbp - 0x30<64>:word64]
	ebx = Mem0[rax + 0x28<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	rax = Mem0[rbp - 0x30<64>:word64]
	eax = Mem0[rax + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rax = CONVERT(eax, int32, int64)
	rdx = Mem0[rbp - 0x30<64>:word64]
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B700 (retsize: 8;)
	eax = Mem0[rax + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ebx - eax)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004245E3
	// succ:  l00000000004245D4 l00000000004245E3
l00000000004245D4:
	rax = Mem0[rbp - 0x30<64>:word64]
	edx = CONVERT(Mem0[rax + 0x2F<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp - 0x30<64>:word64]
	Mem0[rax + 0x50<64>:byte] = dl
	// succ:  l00000000004245E3
l00000000004245E3:
	rax = Mem0[rbp - 0x30<64>:word64]
	eax = Mem0[rax + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rax = CONVERT(eax, int32, int64)
	rdx = Mem0[rbp - 0x30<64>:word64]
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B700 (retsize: 8;)
	rdx = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	rdx = Mem0[rdx:word64]
	Mem0[rax + 0x24<64>:word64] = rdx
	rax = Mem0[rbp - 0x30<64>:word64]
	eax = Mem0[rax + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp - 0x54<64>:word32] = eax
	goto l0000000000424712
	// succ:  l0000000000424712
l000000000042461C:
	eax = Mem0[rbp - 0x54<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = Mem0[rbp - 0x30<64>:word64]
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B700 (retsize: 8;)
	ebx = Mem0[rax:word32]
	rbx = CONVERT(ebx, word32, uint64)
	eax = Mem0[rbp - 0x54<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rax = CONVERT(eax, int32, int64)
	rdx = Mem0[rbp - 0x30<64>:word64]
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B700 (retsize: 8;)
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ebx - eax)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000042467A
	// succ:  l0000000000424656 l000000000042467A
l0000000000424656:
	eax = Mem0[rbp - 0x54<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = Mem0[rbp - 0x30<64>:word64]
	rcx = rdx + 0x38<64>
	rdx = rax
	call fn000000000046BBA0 (retsize: 8;)
	rdx = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	eax = CONVERT(Mem0[rax + 0x2E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdx:byte] = al
	goto l00000000004246D8
	// succ:  l00000000004246D8
l000000000042467A:
	eax = Mem0[rbp - 0x54<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = Mem0[rbp - 0x30<64>:word64]
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B700 (retsize: 8;)
	ebx = Mem0[rax + 4<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	eax = Mem0[rbp - 0x54<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rax = CONVERT(eax, int32, int64)
	rdx = Mem0[rbp - 0x30<64>:word64]
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B700 (retsize: 8;)
	eax = Mem0[rax + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ebx - eax)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004246D8
	// succ:  l00000000004246B6 l00000000004246D8
l00000000004246B6:
	eax = Mem0[rbp - 0x54<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = Mem0[rbp - 0x30<64>:word64]
	rcx = rdx + 0x38<64>
	rdx = rax
	call fn000000000046BBA0 (retsize: 8;)
	rdx = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	eax = CONVERT(Mem0[rax + 0x2D<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdx:byte] = al
	// succ:  l00000000004246D8
l00000000004246D8:
	eax = Mem0[rbp - 0x54<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = Mem0[rbp - 0x30<64>:word64]
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B700 (retsize: 8;)
	rbx = rax
	eax = Mem0[rbp - 0x54<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rax = CONVERT(eax, int32, int64)
	rdx = Mem0[rbp - 0x30<64>:word64]
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B700 (retsize: 8;)
	rax = Mem0[rax:word64]
	Mem0[rbx:word64] = rax
	v17 = Mem0[rbp - 0x54<64>:word32] - 1<32>
	Mem0[rbp - 0x54<64>:word32] = v17
	SCZO = cond(v17)
	// succ:  l0000000000424712
l0000000000424712:
	SCZO = cond(Mem0[rbp - 0x54<64>:word32] - 0<32>)
	branch Test(GT,SZO) l000000000042461C
	// succ:  l000000000042471C l000000000042461C
l000000000042471C:
	rax = Mem0[rbp - 0x30<64>:word64]
	rax = rax + 8<64>
	SCZO = cond(rax)
	edx = 0<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	call fn000000000046B700 (retsize: 8;)
	edx = Mem0[rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp - 0x30<64>:word64]
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(edx - eax)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000424766
	// succ:  l0000000000424742 l0000000000424766
l0000000000424742:
	rax = Mem0[rbp - 0x30<64>:word64]
	rax = rax + 0x38<64>
	SCZO = cond(rax)
	edx = 0<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	call fn000000000046BBA0 (retsize: 8;)
	rdx = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	eax = CONVERT(Mem0[rax + 0x2E<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdx:byte] = al
	goto l00000000004247B0
	// succ:  l00000000004247B0
l0000000000424766:
	rax = Mem0[rbp - 0x30<64>:word64]
	rax = rax + 8<64>
	SCZO = cond(rax)
	edx = 0<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	call fn000000000046B700 (retsize: 8;)
	edx = Mem0[rax + 4<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp - 0x30<64>:word64]
	eax = Mem0[rax + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(edx - eax)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004247B0
	// succ:  l000000000042478E l00000000004247B0
l000000000042478E:
	rax = Mem0[rbp - 0x30<64>:word64]
	rax = rax + 0x38<64>
	SCZO = cond(rax)
	edx = 0<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	call fn000000000046BBA0 (retsize: 8;)
	rdx = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	eax = CONVERT(Mem0[rax + 0x2D<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdx:byte] = al
	// succ:  l00000000004247B0
l00000000004247B0:
	rax = Mem0[rbp - 0x30<64>:word64]
	rax = rax + 8<64>
	SCZO = cond(rax)
	edx = 0<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	call fn000000000046B700 (retsize: 8;)
	rdx = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	rax = Mem0[rax:word64]
	Mem0[rdx:word64] = rax
	rax = Mem0[rbp - 0x30<64>:word64]
	rdx = Mem0[rbp - 0x28<64>:word64]
	Mem0[rax:word64] = rdx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424550_exit
fn0000000000424550_exit:


// fn00000000004247F0
// Return size: 8
define fn00000000004247F0
fn00000000004247F0_entry:
	rsp = fp
	// succ:  l00000000004247F0
l00000000004247F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word32] = r8d
	Mem0[rbp + 0x28<64>:word64] = r9
	rax = Mem0[rbp + 0x18<64>:word64]
	ecx = Mem0[rax:word32]
	rcx = CONVERT(ecx, word32, uint64)
	rax = Mem0[rbp + 0x18<64>:word64]
	edx = Mem0[rax + 4<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax:word32] = ecx
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 4<64>:word32] = edx
	eax = Mem0[rbp + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = Mem0[rbp + 0x10<64>:word64]
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B4B0 (retsize: 8;)
	eax = Mem0[rbp + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = Mem0[rbp + 0x10<64>:word64]
	rcx = rdx + 0x38<64>
	rdx = rax
	call fn000000000046B990 (retsize: 8;)
	Mem0[rbp - 4<64>:word32] = 0<32>
	goto l00000000004248B4
	// succ:  l00000000004248B4
l0000000000424855:
	eax = Mem0[rbp - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = CONVERT(eax, word32, int64)
	rax = Mem0[rbp + 0x28<64>:word64]
	rcx = rax
	call fn000000000042C0B0 (retsize: 8;)
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp - 0x10<64>:word32] = eax
	eax = Mem0[rbp - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = CONVERT(eax, word32, int64)
	rax = Mem0[rbp + 0x28<64>:word64]
	rcx = rax
	call fn000000000042C0B0 (retsize: 8;)
	eax = Mem0[rax + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp - 0xC<64>:word32] = eax
	rax = Mem0[rbp + 0x10<64>:word64]
	rcx = rax + 8<64>
	rax = rbp - 0x10<64>
	rdx = rax
	call fn000000000046B5F0 (retsize: 8;)
	rax = Mem0[rbp + 0x10<64>:word64]
	rdx = rax + 0x2D<64>
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = rax + 0x38<64>
	SCZO = cond(rax)
	rcx = rax
	call fn000000000046BAC0 (retsize: 8;)
	v14 = Mem0[rbp - 4<64>:word32] + 1<32>
	Mem0[rbp - 4<64>:word32] = v14
	SCZO = cond(v14)
	// succ:  l00000000004248B4
l00000000004248B4:
	eax = Mem0[rbp - 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - Mem0[rbp + 0x20<64>:word32])
	branch Test(LT,SO) l0000000000424855
	// succ:  l00000000004248BC l0000000000424855
l00000000004248BC:
	rax = Mem0[rbp + 0x10<64>:word64]
	edx = Mem0[rbp + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rax + 0x20<64>:word32] = edx
	rax = Mem0[rbp + 0x30<64>:word64]
	ecx = Mem0[rax:word32]
	rcx = CONVERT(ecx, word32, uint64)
	rax = Mem0[rbp + 0x30<64>:word64]
	edx = Mem0[rax + 4<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 0x24<64>:word32] = ecx
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 0x28<64>:word32] = edx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004247F0_exit
fn00000000004247F0_exit:


// fn00000000004248F0
// Return size: 8
define fn00000000004248F0
fn00000000004248F0_entry:
	rsp = fp
	// succ:  l00000000004248F0
l00000000004248F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = rax + 8<64>
	SCZO = cond(rax)
	rcx = rax
	call fn000000000046B690 (retsize: 8;)
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = rax + 8<64>
	SCZO = cond(rax)
	rcx = rax
	call fn000000000042C020 (retsize: 8;)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 0x20<64>:word32] = edx
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 0x2C<64>:byte] = 0x4F<8>
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 0x2D<64>:byte] = 0x2A<8>
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 0x2E<64>:byte] = 0x2A<8>
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 0x2F<64>:byte] = 0x5E<8>
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 0x30<64>:byte] = 0x5E<8>
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = rax + 0x38<64>
	SCZO = cond(rax)
	rcx = rax
	call fn000000000046BB30 (retsize: 8;)
	rax = Mem0[rbp + 0x10<64>:word64]
	edx = CONVERT(Mem0[rax + 0x2F<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x10<64>:word64]
	Mem0[rax + 0x50<64>:byte] = dl
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004248F0_exit
fn00000000004248F0_exit:


// fn0000000000424980
// Return size: 8
define fn0000000000424980
fn0000000000424980_entry:
	rsp = fp
	// succ:  l0000000000424980
l0000000000424980:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = rax + 0x38<64>
	SCZO = cond(rax)
	rcx = rax
	call fn000000000046BB50 (retsize: 8;)
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = rax + 8<64>
	SCZO = cond(rax)
	rcx = rax
	call fn000000000046B6B0 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424980_exit
fn0000000000424980_exit:


// fn00000000004249C0
// Return size: 8
define fn00000000004249C0
fn00000000004249C0_entry:
	rsp = fp
	// succ:  l00000000004249C0
l00000000004249C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	rax = Mem0[rbp + 0x18<64>:word64]
	rcx = rax
	call fn0000000000475550 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004249C0_exit
fn00000000004249C0_exit:


// fn00000000004249F0
// Return size: 8
define fn00000000004249F0
fn00000000004249F0_entry:
	rsp = fp
	// succ:  l00000000004249F0
l00000000004249F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004249F0_exit
fn00000000004249F0_exit:


// fn0000000000424A00
// Return size: 8
define fn0000000000424A00
fn0000000000424A00_entry:
	rsp = fp
	// succ:  l0000000000424A00
l0000000000424A00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000427270 (retsize: 8;)
	SCZO = cond(rax - Mem0[rbp + 0x18<64>:word64])
	al = CONVERT(Test(ULT,C), bool, int8)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000424A2D
	// succ:  l0000000000424A28 l0000000000424A2D
l0000000000424A28:
	call fn00000000004708B0 (retsize: 8;)
	// succ:  l0000000000424A2D
l0000000000424A2D:
	rax = Mem0[rbp + 0x18<64>:word64]
	rax = rax << 3<64>
	SCZO = cond(rax)
	rcx = rax
	call fn0000000000475590 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424A00_exit
fn0000000000424A00_exit:


// fn0000000000424A50
// Return size: 8
define fn0000000000424A50
fn0000000000424A50_entry:
	rsp = fp
	// succ:  l0000000000424A50
l0000000000424A50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x40<64>:word64] = rcx
	Mem0[rbp - 0x38<64>:word64] = rdx
	Mem0[rbp - 0x30<64>:word64] = r8
	rax = Mem0[rbp - 0x30<64>:word64]
	rcx = rax
	call fn0000000000471B70 (retsize: 8;)
	rbx = rax
	rax = Mem0[rbp - 0x38<64>:word64]
	rdx = rax
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475600 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000424A95
	// succ:  l0000000000424A8F l0000000000424A95
l0000000000424A8F:
	rdx = Mem0[rbx:word64]
	Mem0[rax:word64] = rdx
	// succ:  l0000000000424A95
l0000000000424A95:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424A50_exit
fn0000000000424A50_exit:


// fn0000000000424AA0
// Return size: 8
define fn0000000000424AA0
fn0000000000424AA0_entry:
	rsp = fp
	// succ:  l0000000000424AA0
l0000000000424AA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x40<64>:word64] = rcx
	Mem0[rbp - 0x38<64>:word64] = rdx
	Mem0[rbp - 0x30<64>:word64] = r8
	rax = Mem0[rbp - 0x30<64>:word64]
	rcx = rax
	call fn0000000000471B60 (retsize: 8;)
	rbx = rax
	rax = Mem0[rbp - 0x38<64>:word64]
	rdx = rax
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475600 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000424AE5
	// succ:  l0000000000424ADF l0000000000424AE5
l0000000000424ADF:
	rdx = Mem0[rbx:word64]
	Mem0[rax:word64] = rdx
	// succ:  l0000000000424AE5
l0000000000424AE5:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424AA0_exit
fn0000000000424AA0_exit:


// fn0000000000424AF0
// Return size: 8
define fn0000000000424AF0
fn0000000000424AF0_entry:
	rsp = fp
	// succ:  l0000000000424AF0
l0000000000424AF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424AF0_exit
fn0000000000424AF0_exit:


// fn0000000000424B00
// Return size: 8
define fn0000000000424B00
fn0000000000424B00_entry:
	rsp = fp
	// succ:  l0000000000424B00
l0000000000424B00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424B00_exit
fn0000000000424B00_exit:


// fn0000000000424B10
// Return size: 8
define fn0000000000424B10
fn0000000000424B10_entry:
	rsp = fp
	// succ:  l0000000000424B10
l0000000000424B10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	rax = Mem0[rbp + 0x18<64>:word64]
	rcx = rax
	call fn0000000000475550 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424B10_exit
fn0000000000424B10_exit:


// fn0000000000424B40
// Return size: 8
define fn0000000000424B40
fn0000000000424B40_entry:
	rsp = fp
	// succ:  l0000000000424B40
l0000000000424B40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424B40_exit
fn0000000000424B40_exit:


// fn0000000000424B50
// Return size: 8
define fn0000000000424B50
fn0000000000424B50_entry:
	rsp = fp
	// succ:  l0000000000424B50
l0000000000424B50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	Mem0[rbp + 0x20<64>:word64] = r8
	rcx = Mem0[rbp + 0x10<64>:word64]
	call fn0000000000427290 (retsize: 8;)
	SCZO = cond(rax - Mem0[rbp + 0x18<64>:word64])
	al = CONVERT(Test(ULT,C), bool, int8)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000424B7D
	// succ:  l0000000000424B78 l0000000000424B7D
l0000000000424B78:
	call fn00000000004708B0 (retsize: 8;)
	// succ:  l0000000000424B7D
l0000000000424B7D:
	rax = Mem0[rbp + 0x18<64>:word64]
	rcx = rax
	call fn0000000000475590 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424B50_exit
fn0000000000424B50_exit:


// fn0000000000424B90
// Return size: 8
define fn0000000000424B90
fn0000000000424B90_entry:
	rsp = fp
	// succ:  l0000000000424B90
l0000000000424B90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x40<64>:word64] = rcx
	Mem0[rbp - 0x38<64>:word64] = rdx
	Mem0[rbp - 0x30<64>:word64] = r8
	rax = Mem0[rbp - 0x30<64>:word64]
	rcx = rax
	call fn0000000000471B80 (retsize: 8;)
	ebx = CONVERT(Mem0[rax:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	rax = Mem0[rbp - 0x38<64>:word64]
	rdx = rax
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475600 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000424BD1
	// succ:  l0000000000424BCF l0000000000424BD1
l0000000000424BCF:
	Mem0[rax:byte] = bl
	// succ:  l0000000000424BD1
l0000000000424BD1:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424B90_exit
fn0000000000424B90_exit:


// fn0000000000424BE0
// Return size: 8
define fn0000000000424BE0
fn0000000000424BE0_entry:
	rsp = fp
	// succ:  l0000000000424BE0
l0000000000424BE0:
	rcx = rcx + 0x48<64>
	SCZO = cond(rcx)
	// succ:  l0000000000424BE4_thunk_fn0000000000454CC0
l0000000000424BE4_thunk_fn0000000000454CC0:
	call fn0000000000454CC0 (retsize: 0;)
	return
	// succ:  fn0000000000424BE0_exit
fn0000000000424BE0_exit:


// fn0000000000424BF0
// Return size: 8
define fn0000000000424BF0
fn0000000000424BF0_entry:
	rsp = fp
	// succ:  l0000000000424BF0
l0000000000424BF0:
	rcx = rcx + 0x48<64>
	SCZO = cond(rcx)
	// succ:  l0000000000424BF4_thunk_fn0000000000454CF0
l0000000000424BF4_thunk_fn0000000000454CF0:
	call fn0000000000454CF0 (retsize: 0;)
	return
	// succ:  fn0000000000424BF0_exit
fn0000000000424BF0_exit:


// fn0000000000424C00
// Return size: 8
define fn0000000000424C00
fn0000000000424C00_entry:
	rsp = fp
	// succ:  l0000000000424C00
l0000000000424C00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rbp = rdx
	edi = r8d
	rdi = CONVERT(edi, word32, uint64)
	r12 = r9
	rsi = rbx + 0x48<64>
	call fn0000000000456F80 (retsize: 8;)
	rax = 0x0000000000495C10<p64>
	r8d = edi
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rcx = rsi
	Mem0[rbx:word64] = rax
	call fn0000000000454EC0 (retsize: 8;)
	rcx = rsi
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000424C50
	// succ:  l0000000000424C43 l0000000000424C50
l0000000000424C43:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424C00_exit
l0000000000424C50:
	Mem0[rbx + 0x58<64>:word32] = edi
	Mem0[rbx + 0x70<64>:word64] = r12
	rcx = rbx
	call fn0000000000455930 (retsize: 8;)
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424C00_exit
fn0000000000424C00_exit:


// fn0000000000424CB0
// Return size: 8
define fn0000000000424CB0
fn0000000000424CB0_entry:
	rsp = fp
	// succ:  l0000000000424CB0
l0000000000424CB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	r12 = r9
	ebp = edx
	rbp = CONVERT(ebp, word32, uint64)
	edi = r8d
	rdi = CONVERT(edi, word32, uint64)
	rsi = rbx + 0x48<64>
	call fn0000000000456F80 (retsize: 8;)
	rax = 0x0000000000495C10<p64>
	r8d = edi
	r8 = CONVERT(r8d, word32, uint64)
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	Mem0[rbx:word64] = rax
	call fn0000000000454F20 (retsize: 8;)
	rcx = rsi
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000424D00
	// succ:  l0000000000424CF1 l0000000000424D00
l0000000000424CF1:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424CB0_exit
l0000000000424D00:
	Mem0[rbx + 0x58<64>:word32] = edi
	Mem0[rbx + 0x70<64>:word64] = r12
	rcx = rbx
	call fn0000000000455930 (retsize: 8;)
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424CB0_exit
fn0000000000424CB0_exit:


// fn0000000000424D60
// Return size: 8
define fn0000000000424D60
fn0000000000424D60_entry:
	rsp = fp
	// succ:  l0000000000424D60
l0000000000424D60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000456F80 (retsize: 8;)
	rax = 0x0000000000495C10<p64>
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424D60_exit
fn0000000000424D60_exit:


// fn0000000000424D80
// Return size: 8
define fn0000000000424D80
fn0000000000424D80_entry:
	rsp = fp
	// succ:  l0000000000424D80
l0000000000424D80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rbp = rdx
	edi = r8d
	rdi = CONVERT(edi, word32, uint64)
	r12 = r9
	rsi = rbx + 0x48<64>
	call fn0000000000456F80 (retsize: 8;)
	rax = 0x0000000000495C10<p64>
	r8d = edi
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rcx = rsi
	Mem0[rbx:word64] = rax
	call fn0000000000454EC0 (retsize: 8;)
	rcx = rsi
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000424DD0
	// succ:  l0000000000424DC3 l0000000000424DD0
l0000000000424DC3:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424D80_exit
l0000000000424DD0:
	Mem0[rbx + 0x58<64>:word32] = edi
	Mem0[rbx + 0x70<64>:word64] = r12
	rcx = rbx
	call fn0000000000455930 (retsize: 8;)
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424D80_exit
fn0000000000424D80_exit:


// fn0000000000424E30
// Return size: 8
define fn0000000000424E30
fn0000000000424E30_entry:
	rsp = fp
	// succ:  l0000000000424E30
l0000000000424E30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	r12 = r9
	ebp = edx
	rbp = CONVERT(ebp, word32, uint64)
	edi = r8d
	rdi = CONVERT(edi, word32, uint64)
	rsi = rbx + 0x48<64>
	call fn0000000000456F80 (retsize: 8;)
	rax = 0x0000000000495C10<p64>
	r8d = edi
	r8 = CONVERT(r8d, word32, uint64)
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	Mem0[rbx:word64] = rax
	call fn0000000000454F20 (retsize: 8;)
	rcx = rsi
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000424E80
	// succ:  l0000000000424E71 l0000000000424E80
l0000000000424E71:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424E30_exit
l0000000000424E80:
	Mem0[rbx + 0x58<64>:word32] = edi
	Mem0[rbx + 0x70<64>:word64] = r12
	rcx = rbx
	call fn0000000000455930 (retsize: 8;)
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424E30_exit
fn0000000000424E30_exit:


// fn0000000000424EE0
// Return size: 8
define fn0000000000424EE0
fn0000000000424EE0_entry:
	rsp = fp
	// succ:  l0000000000424EE0
l0000000000424EE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000456F80 (retsize: 8;)
	rax = 0x0000000000495C10<p64>
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000424EE0_exit
fn0000000000424EE0_exit:


// fn0000000000424F00
// Return size: 0
define fn0000000000424F00
fn0000000000424F00_entry:
	rsp = fp
	// succ:  l0000000000424F00
l0000000000424F00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491BF0<p64>:word64]
	rbx = rcx
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	call fn0000000000455AB0 (retsize: 8;)
	rcx = rbx + 0x48<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rcx = rbx + 0x38<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000424F45_thunk_fn0000000000475550
l0000000000424F45_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000424F00_exit
fn0000000000424F00_exit:


// fn0000000000424F80
// Return size: 0
define fn0000000000424F80
fn0000000000424F80_entry:
	rsp = fp
	// succ:  l0000000000424F80
l0000000000424F80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491BF0<p64>:word64]
	rbx = rcx
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	call fn0000000000455AB0 (retsize: 8;)
	rcx = rbx + 0x48<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rcx = rbx + 0x38<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000424FBD_thunk_fn000000000046AF20
l0000000000424FBD_thunk_fn000000000046AF20:
	call fn000000000046AF20 (retsize: 0;)
	return
	// succ:  fn0000000000424F80_exit
fn0000000000424F80_exit:


// fn0000000000425000
// Return size: 0
define fn0000000000425000
fn0000000000425000_entry:
	rsp = fp
	// succ:  l0000000000425000
l0000000000425000:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491BF0<p64>:word64]
	rbx = rcx
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	call fn0000000000455AB0 (retsize: 8;)
	rcx = rbx + 0x48<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rcx = rbx + 0x38<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000042503D_thunk_fn000000000046AF20
l000000000042503D_thunk_fn000000000046AF20:
	call fn000000000046AF20 (retsize: 0;)
	return
	// succ:  fn0000000000425000_exit
fn0000000000425000_exit:


// fn0000000000425080
// Return size: 8
define fn0000000000425080
fn0000000000425080_entry:
	rsp = fp
	// succ:  l0000000000425080
l0000000000425080:
	rcx = rcx + 0x48<64>
	SCZO = cond(rcx)
	// succ:  l0000000000425084_thunk_fn0000000000454CC0
l0000000000425084_thunk_fn0000000000454CC0:
	call fn0000000000454CC0 (retsize: 0;)
	return
	// succ:  fn0000000000425080_exit
fn0000000000425080_exit:


// fn0000000000425090
// Return size: 8
define fn0000000000425090
fn0000000000425090_entry:
	rsp = fp
	// succ:  l0000000000425090
l0000000000425090:
	rcx = rcx + 0x48<64>
	SCZO = cond(rcx)
	// succ:  l0000000000425094_thunk_fn0000000000454CF0
l0000000000425094_thunk_fn0000000000454CF0:
	call fn0000000000454CF0 (retsize: 0;)
	return
	// succ:  fn0000000000425090_exit
fn0000000000425090_exit:


// fn00000000004250A0
// Return size: 8
define fn00000000004250A0
fn00000000004250A0_entry:
	rsp = fp
	// succ:  l00000000004250A0
l00000000004250A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rbp = rdx
	edi = r8d
	rdi = CONVERT(edi, word32, uint64)
	r12 = r9
	rsi = rbx + 0x48<64>
	call fn0000000000458D50 (retsize: 8;)
	rax = 0x0000000000495C90<p64>
	r8d = edi
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rcx = rsi
	Mem0[rbx:word64] = rax
	call fn0000000000454EC0 (retsize: 8;)
	rcx = rsi
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004250F0
	// succ:  l00000000004250E3 l00000000004250F0
l00000000004250E3:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004250A0_exit
l00000000004250F0:
	Mem0[rbx + 0x58<64>:word32] = edi
	Mem0[rbx + 0x70<64>:word64] = r12
	rcx = rbx
	call fn0000000000457670 (retsize: 8;)
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004250A0_exit
fn00000000004250A0_exit:


// fn0000000000425150
// Return size: 8
define fn0000000000425150
fn0000000000425150_entry:
	rsp = fp
	// succ:  l0000000000425150
l0000000000425150:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	r12 = r9
	ebp = edx
	rbp = CONVERT(ebp, word32, uint64)
	edi = r8d
	rdi = CONVERT(edi, word32, uint64)
	rsi = rbx + 0x48<64>
	call fn0000000000458D50 (retsize: 8;)
	rax = 0x0000000000495C90<p64>
	r8d = edi
	r8 = CONVERT(r8d, word32, uint64)
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	Mem0[rbx:word64] = rax
	call fn0000000000454F20 (retsize: 8;)
	rcx = rsi
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004251A0
	// succ:  l0000000000425191 l00000000004251A0
l0000000000425191:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425150_exit
l00000000004251A0:
	Mem0[rbx + 0x58<64>:word32] = edi
	Mem0[rbx + 0x70<64>:word64] = r12
	rcx = rbx
	call fn0000000000457670 (retsize: 8;)
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425150_exit
fn0000000000425150_exit:


// fn0000000000425200
// Return size: 8
define fn0000000000425200
fn0000000000425200_entry:
	rsp = fp
	// succ:  l0000000000425200
l0000000000425200:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000458D50 (retsize: 8;)
	rax = 0x0000000000495C90<p64>
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425200_exit
fn0000000000425200_exit:


// fn0000000000425220
// Return size: 8
define fn0000000000425220
fn0000000000425220_entry:
	rsp = fp
	// succ:  l0000000000425220
l0000000000425220:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rbp = rdx
	edi = r8d
	rdi = CONVERT(edi, word32, uint64)
	r12 = r9
	rsi = rbx + 0x48<64>
	call fn0000000000458D50 (retsize: 8;)
	rax = 0x0000000000495C90<p64>
	r8d = edi
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rcx = rsi
	Mem0[rbx:word64] = rax
	call fn0000000000454EC0 (retsize: 8;)
	rcx = rsi
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000425270
	// succ:  l0000000000425263 l0000000000425270
l0000000000425263:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425220_exit
l0000000000425270:
	Mem0[rbx + 0x58<64>:word32] = edi
	Mem0[rbx + 0x70<64>:word64] = r12
	rcx = rbx
	call fn0000000000457670 (retsize: 8;)
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425220_exit
fn0000000000425220_exit:


// fn00000000004252D0
// Return size: 8
define fn00000000004252D0
fn00000000004252D0_entry:
	rsp = fp
	// succ:  l00000000004252D0
l00000000004252D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	r12 = r9
	ebp = edx
	rbp = CONVERT(ebp, word32, uint64)
	edi = r8d
	rdi = CONVERT(edi, word32, uint64)
	rsi = rbx + 0x48<64>
	call fn0000000000458D50 (retsize: 8;)
	rax = 0x0000000000495C90<p64>
	r8d = edi
	r8 = CONVERT(r8d, word32, uint64)
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	Mem0[rbx:word64] = rax
	call fn0000000000454F20 (retsize: 8;)
	rcx = rsi
	call fn000000000042AA50 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000425320
	// succ:  l0000000000425311 l0000000000425320
l0000000000425311:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004252D0_exit
l0000000000425320:
	Mem0[rbx + 0x58<64>:word32] = edi
	Mem0[rbx + 0x70<64>:word64] = r12
	rcx = rbx
	call fn0000000000457670 (retsize: 8;)
	rax = Mem0[rbx + 0x68<64>:word64]
	Mem0[rbx + 0x79<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x20<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 8<64>:word64] = rax
	Mem0[rbx + 0x10<64>:word64] = rax
	Mem0[rbx + 0x18<64>:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004252D0_exit
fn00000000004252D0_exit:


// fn0000000000425380
// Return size: 8
define fn0000000000425380
fn0000000000425380_entry:
	rsp = fp
	// succ:  l0000000000425380
l0000000000425380:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	call fn0000000000458D50 (retsize: 8;)
	rax = 0x0000000000495C90<p64>
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425380_exit
fn0000000000425380_exit:


// fn00000000004253A0
// Return size: 0
define fn00000000004253A0
fn00000000004253A0_entry:
	rsp = fp
	// succ:  l00000000004253A0
l00000000004253A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491C00<p64>:word64]
	rbx = rcx
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	call fn0000000000457800 (retsize: 8;)
	rcx = rbx + 0x48<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rcx = rbx + 0x38<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004253E5_thunk_fn0000000000475550
l00000000004253E5_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn00000000004253A0_exit
fn00000000004253A0_exit:


// fn0000000000425420
// Return size: 0
define fn0000000000425420
fn0000000000425420_entry:
	rsp = fp
	// succ:  l0000000000425420
l0000000000425420:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491C00<p64>:word64]
	rbx = rcx
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	call fn0000000000457800 (retsize: 8;)
	rcx = rbx + 0x48<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rcx = rbx + 0x38<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000042545D_thunk_fn000000000046AF20
l000000000042545D_thunk_fn000000000046AF20:
	call fn000000000046AF20 (retsize: 0;)
	return
	// succ:  fn0000000000425420_exit
fn0000000000425420_exit:


// fn00000000004254A0
// Return size: 0
define fn00000000004254A0
fn00000000004254A0_entry:
	rsp = fp
	// succ:  l00000000004254A0
l00000000004254A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491C00<p64>:word64]
	rbx = rcx
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx:word64] = rax
	call fn0000000000457800 (retsize: 8;)
	rcx = rbx + 0x48<64>
	call fn00000000004550A0 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rcx = rbx + 0x38<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004254DD_thunk_fn000000000046AF20
l00000000004254DD_thunk_fn000000000046AF20:
	call fn000000000046AF20 (retsize: 0;)
	return
	// succ:  fn00000000004254A0_exit
fn00000000004254A0_exit:


// fn0000000000425520
// Return size: 8
define fn0000000000425520
fn0000000000425520_entry:
	rsp = fp
	// succ:  l0000000000425520
l0000000000425520:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rbp = rsp
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[0x00000000004916F0<p64>:word64]
	r9d = 2<32>
	r9 = CONVERT(r9d, word32, uint64)
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rdi = rdx
	rdx = r8
	Mem0[rsp + 0x20<64>:word32] = 1<32>
	r12 = rcx
	rcx = rsp + 0x48<64>
	r8 = Mem0[rax:word64]
	rbx = rsp + 0x30<64>
	call fn000000000046F510 (retsize: 8;)
	r8 = CONVERT(eax, word32, int64)
	SCZO = cond(r8 - rdi)
	rsi = r8
	branch Test(UGT,CZ) l0000000000425590
	// succ:  l000000000042556C l0000000000425590
l000000000042556C:
	rbx = rbx - r8
	SCZO = cond(rbx)
	rcx = r12
	rdx = rbx + 0x18<64>
	rax = memcpy(rcx, rdx, r8)
	// succ:  l000000000042557B
l000000000042557B:
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rbp
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425520_exit
l0000000000425590:
	esi = 0xFFFFFFFF<32>
	rsi = CONVERT(esi, word32, uint64)
	goto l000000000042557B
	// succ:  l000000000042557B
fn0000000000425520_exit:


// fn00000000004255A0
// Return size: 8
define fn00000000004255A0
fn00000000004255A0_entry:
	rsp = fp
	// succ:  l00000000004255A0
l00000000004255A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbp = rcx
	rsi = r8
	rdi = rcx - 1<64> + rdx
	rbx = rcx
	goto l00000000004255CA
	// succ:  l00000000004255CA
l00000000004255C0:
	Mem0[rbx:byte] = dl
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	// succ:  l00000000004255CA
l00000000004255CA:
	eax = CONVERT(Mem0[rsi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000425640
	// succ:  l00000000004255D1 l0000000000425640
l00000000004255D1:
	SCZO = cond(rbx - rdi)
	branch Test(UGE,C) l0000000000425690
	// succ:  l00000000004255DA l0000000000425690
l00000000004255DA:
	SCZO = cond(al - 0x25<8>)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l00000000004255C0
	// succ:  l00000000004255E0 l00000000004255C0
l00000000004255E0:
	r8d = CONVERT(Mem0[rsi + 1<64>:byte], byte, word32)
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8b - 0x73<8>)
	branch Test(EQ,Z) l0000000000425600
	// succ:  l00000000004255EB l0000000000425600
l00000000004255EB:
	SCZO = cond(r8b - 0x7A<8>)
	branch Test(EQ,Z) l0000000000425654
	// succ:  l00000000004255F1 l0000000000425654
l00000000004255F1:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r8b - 0x25<8>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	rsi = rsi + rax
	SCZO = cond(rsi)
	goto l00000000004255C0
	// succ:  l00000000004255C0
l0000000000425600:
	rdx = Mem0[r9:word64]
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000425615
	// succ:  l000000000042560A l0000000000425615
l000000000042560A:
	goto l0000000000425627
	// succ:  l0000000000425627
l0000000000425610:
	SCZO = cond(rbx - rdi)
	branch Test(EQ,Z) l0000000000425690
	// succ:  l0000000000425615 l0000000000425690
l0000000000425615:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rbx - 1<64>:byte] = al
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000425610
	// succ:  l0000000000425627 l0000000000425610
l0000000000425627:
	rsi = rsi + 2<64>
	SCZO = cond(rsi)
	eax = CONVERT(Mem0[rsi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	r9 = r9 + 8<64>
	SCZO = cond(r9)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004255D1
	// succ:  l0000000000425636 l00000000004255D1
l0000000000425636:
	// succ:  l0000000000425640
l0000000000425640:
	rax = rbx
	Mem0[rbx:byte] = 0<8>
	rax = rax - rbp
	SCZO = cond(rax)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004255A0_exit
l0000000000425654:
	SCZO = cond(Mem0[rsi + 2<64>:byte] - 0x75<8>)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l00000000004255C0
	// succ:  l0000000000425660 l00000000004255C0
l0000000000425660:
	r8 = Mem0[r9:word64]
	rdx = rdi
	rcx = rbx
	rdx = rdx - rbx
	SCZO = cond(rdx)
	r12 = r9 + 8<64>
	call fn0000000000425520 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l0000000000425690
	// succ:  l0000000000425679 l0000000000425690
l0000000000425679:
	rax = CONVERT(eax, int32, int64)
	rsi = rsi + 3<64>
	SCZO = cond(rsi)
	r9 = r12
	rbx = rbx + rax
	SCZO = cond(rbx)
	goto l00000000004255CA
	// succ:  l00000000004255CA
l0000000000425690:
	rdx = rbx
	rcx = rbp
	call fn0000000000425EE0 (retsize: 8;)
	// succ:  l000000000042569F_thunk_fn00000000004256A0
l000000000042569F_thunk_fn00000000004256A0:
	call fn00000000004256A0 (retsize: 0;)
	return
	// succ:  fn00000000004255A0_exit
fn00000000004255A0_exit:


// fn00000000004256A0
// Return size: 8
define fn00000000004256A0
fn00000000004256A0_entry:
	rsp = fp
	// succ:  l00000000004256A0
l00000000004256A0:
	rax = Mem0[rcx + 0x40<64>:word64]
	return
	// succ:  fn00000000004256A0_exit
fn00000000004256A0_exit:


// fn00000000004256B0
// Return size: 0
define fn00000000004256B0
fn00000000004256B0_entry:
	rsp = fp
	// succ:  l00000000004256B0
l00000000004256B0:
	rcx = Mem0[rcx + 0x40<64>:word64]
	call msvcrt.dll!fflush (retsize: 0;)
	return
	// succ:  fn00000000004256B0_exit
fn00000000004256B0_exit:


// fn00000000004256C0
// Return size: 8
define fn00000000004256C0
fn00000000004256C0_entry:
	rsp = fp
	// succ:  l00000000004256C0
l00000000004256C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[rcx + 0x40<64>:word64]
	call msvcrt.dll!getc (retsize: 8;)
	Mem0[rbx + 0x48<64>:word32] = eax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004256C0_exit
fn00000000004256C0_exit:


// fn00000000004256E0
// Return size: 8
define fn00000000004256E0
fn00000000004256E0_entry:
	rsp = fp
	// succ:  l00000000004256E0
l00000000004256E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r9 = Mem0[rcx + 0x40<64>:word64]
	rsi = rdx
	rbx = rcx
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	eax = fread(rcx, rdx, r8, r9)
	SZO = cond(rax & rax)
	C = false
	branch Test(LE,SZO) l0000000000425711
	// succ:  l0000000000425702 l0000000000425711
l0000000000425702:
	edx = CONVERT(Mem0[rsi - 1<64> + rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0x48<64>:word32] = edx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004256E0_exit
l0000000000425711:
	Mem0[rbx + 0x48<64>:word32] = 0xFFFFFFFF<32>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004256E0_exit
fn00000000004256E0_exit:


// fn0000000000425720
// Return size: 0
define fn0000000000425720
fn0000000000425720_entry:
	rsp = fp
	// succ:  l0000000000425720
l0000000000425720:
	r9 = Mem0[rcx + 0x40<64>:word64]
	rax = rdx
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	eax = fwrite(rcx, rdx, r8, r9)
	return
	// succ:  fn0000000000425720_exit
fn0000000000425720_exit:


// fn0000000000425740
// Return size: 8
define fn0000000000425740
fn0000000000425740_entry:
	rsp = fp
	// succ:  l0000000000425740
l0000000000425740:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rdx
	rdx = r8
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SZO = cond(r9d & r9d)
	C = false
	rbx = rcx
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rcx + 8<64>:word32] = 0<32>
	branch Test(EQ,Z) l0000000000425774
	// succ:  l0000000000425765 l0000000000425774
l0000000000425765:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(r9d - 1<32>)
	r8b = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d + 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	// succ:  l0000000000425774
l0000000000425774:
	rcx = Mem0[rsi + 0x40<64>:word64]
	call fn0000000000411A00 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000042578D
	// succ:  l0000000000425781 l000000000042578D
l0000000000425781:
	rcx = Mem0[rsi + 0x40<64>:word64]
	call fn0000000000411E60 (retsize: 8;)
	Mem0[rbx:word64] = rax
	// succ:  l000000000042578D
l000000000042578D:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425740_exit
fn0000000000425740_exit:


// fn00000000004257A0
// Return size: 8
define fn00000000004257A0
fn00000000004257A0_entry:
	rsp = fp
	// succ:  l00000000004257A0
l00000000004257A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rsi = rdx
	rbx = rcx
	rcx = 0x0000000000425740<p64>
	rax = Mem0[rsi:word64]
	rdx = Mem0[r8:word64]
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000425810
	// succ:  l00000000004257C2 l0000000000425810
l00000000004257C2:
	rcx = Mem0[rsi + 0x40<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	Mem0[rbx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rbx + 8<64>:word32] = 0<32>
	call fn0000000000411A00 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000000004257F0
	// succ:  l00000000004257E0 l00000000004257F0
l00000000004257E0:
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004257A0_exit
l00000000004257F0:
	rcx = Mem0[rsi + 0x40<64>:word64]
	call fn0000000000411E60 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004257A0_exit
l0000000000425810:
	Mem0[rsp + 0x20<64>:word32] = r9d
	r8 = rdx
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rdx = rsi
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004257A0_exit
fn00000000004257A0_exit:


// fn0000000000425830
// Return size: 8
define fn0000000000425830
fn0000000000425830_entry:
	rsp = fp
	// succ:  l0000000000425830
l0000000000425830:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(edx - 0xFFFFFFFF<32>)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l0000000000425850
	// succ:  l000000000042583B l0000000000425850
l000000000042583B:
	rdx = Mem0[rcx + 0x40<64>:word64]
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	call msvcrt.dll!putc (retsize: 0;)
	return
	// succ:  fn0000000000425830_exit
l0000000000425850:
	rcx = Mem0[rcx + 0x40<64>:word64]
	call msvcrt.dll!fflush (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = -eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	C = eax == 0<32>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000425830_exit
fn0000000000425830_exit:


// fn0000000000425870
// Return size: 8
define fn0000000000425870
fn0000000000425870_entry:
	rsp = fp
	// succ:  l0000000000425870
l0000000000425870:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(edx - 0xFFFFFFFF<32>)
	rbx = rcx
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(EQ,Z) l0000000000425895
	// succ:  l000000000042587F l0000000000425895
l000000000042587F:
	rdx = Mem0[rbx + 0x40<64>:word64]
	call msvcrt.dll!ungetc (retsize: 8;)
	// succ:  l0000000000425888
l0000000000425888:
	Mem0[rbx + 0x48<64>:word32] = 0xFFFFFFFF<32>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425870_exit
l0000000000425895:
	ecx = Mem0[rbx + 0x48<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042587F
	// succ:  l000000000042589D l000000000042587F
l000000000042589D:
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000425888
	// succ:  l0000000000425888
fn0000000000425870_exit:


// fn00000000004258B0
// Return size: 0
define fn00000000004258B0
fn00000000004258B0_entry:
	rsp = fp
	// succ:  l00000000004258B0
l00000000004258B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[rcx + 0x40<64>:word64]
	call msvcrt.dll!getc (retsize: 8;)
	rdx = Mem0[rbx + 0x40<64>:word64]
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call msvcrt.dll!ungetc (retsize: 0;)
	return
	// succ:  fn00000000004258B0_exit
fn00000000004258B0_exit:


// fn00000000004258E0
// Return size: 8
define fn00000000004258E0
fn00000000004258E0_entry:
	rsp = fp
	// succ:  l00000000004258E0
l00000000004258E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	Mem0[rcx + 0x20<64>:word64] = 0<64>
	rcx = rcx + 0x38<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx - 0x10<64>:word64] = 0<64>
	Mem0[rcx - 8<64>:word64] = 0<64>
	Mem0[rcx - 0x38<64>:word64] = rax
	rsi = rdx
	call fn000000000046AE90 (retsize: 8;)
	rax = 0x0000000000495D10<p64>
	Mem0[rbx + 0x40<64>:word64] = rsi
	Mem0[rbx + 0x48<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004258E0_exit
fn00000000004258E0_exit:


// fn0000000000425950
// Return size: 8
define fn0000000000425950
fn0000000000425950_entry:
	rsp = fp
	// succ:  l0000000000425950
l0000000000425950:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	Mem0[rcx + 0x20<64>:word64] = 0<64>
	rcx = rcx + 0x38<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx - 0x10<64>:word64] = 0<64>
	Mem0[rcx - 8<64>:word64] = 0<64>
	Mem0[rcx - 0x38<64>:word64] = rax
	rsi = rdx
	call fn000000000046AE90 (retsize: 8;)
	rax = 0x0000000000495D10<p64>
	Mem0[rbx + 0x40<64>:word64] = rsi
	Mem0[rbx + 0x48<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rbx:word64] = rax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425950_exit
fn0000000000425950_exit:


// fn00000000004259C0
// Return size: 0
define fn00000000004259C0
fn00000000004259C0_entry:
	rsp = fp
	// succ:  l00000000004259C0
l00000000004259C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rbx = rcx
	rcx = rcx + 0x38<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx - 0x38<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l00000000004259E8_thunk_fn0000000000475550
l00000000004259E8_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn00000000004259C0_exit
fn00000000004259C0_exit:


// fn00000000004259F0
// Return size: 0
define fn00000000004259F0
fn00000000004259F0_entry:
	rsp = fp
	// succ:  l00000000004259F0
l00000000004259F0:
	rax = Mem0[0x0000000000491C30<p64>:word64]
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx - 0x38<64>:word64] = rax
	// succ:  l0000000000425A03_thunk_fn000000000046AF20
l0000000000425A03_thunk_fn000000000046AF20:
	call fn000000000046AF20 (retsize: 0;)
	return
	// succ:  fn00000000004259F0_exit
fn00000000004259F0_exit:


// fn0000000000425A10
// Return size: 8
define fn0000000000425A10
fn0000000000425A10_entry:
	rsp = fp
	// succ:  l0000000000425A10
l0000000000425A10:
	rax = Mem0[rcx + 0x40<64>:word64]
	return
	// succ:  fn0000000000425A10_exit
fn0000000000425A10_exit:


// fn0000000000425A20
// Return size: 0
define fn0000000000425A20
fn0000000000425A20_entry:
	rsp = fp
	// succ:  l0000000000425A20
l0000000000425A20:
	rcx = Mem0[rcx + 0x40<64>:word64]
	call msvcrt.dll!fflush (retsize: 0;)
	return
	// succ:  fn0000000000425A20_exit
fn0000000000425A20_exit:


// fn0000000000425A30
// Return size: 8
define fn0000000000425A30
fn0000000000425A30_entry:
	rsp = fp
	// succ:  l0000000000425A30
l0000000000425A30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[rcx + 0x40<64>:word64]
	call msvcrt.dll!getwc (retsize: 8;)
	Mem0[rbx + 0x48<64>:word16] = ax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425A30_exit
fn0000000000425A30_exit:


// fn0000000000425A50
// Return size: 8
define fn0000000000425A50
fn0000000000425A50_entry:
	rsp = fp
	// succ:  l0000000000425A50
l0000000000425A50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SZO = cond(r8 & r8)
	C = false
	rsi = rcx
	rbp = rdx
	rdi = r8
	branch Test(EQ,Z) l0000000000425A92
	// succ:  l0000000000425A66 l0000000000425A92
l0000000000425A66:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l0000000000425A7E
	// succ:  l0000000000425A7E
l0000000000425A70:
	Mem0[rbp + 0<64> + rbx * 2<64>:word16] = ax
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	SCZO = cond(rdi - rbx)
	branch Test(EQ,Z) l0000000000425AB0
	// succ:  l0000000000425A7E l0000000000425AB0
l0000000000425A7E:
	rcx = Mem0[rsi + 0x40<64>:word64]
	call msvcrt.dll!getwc (retsize: 8;)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(NE,Z) l0000000000425A70
	// succ:  l0000000000425A8D l0000000000425A70
l0000000000425A8D:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l0000000000425AB0
	// succ:  l0000000000425A92 l0000000000425AB0
l0000000000425A92:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsi + 0x48<64>:word16] = ax
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425A50_exit
l0000000000425AB0:
	eax = CONVERT(Mem0[rbp - 2<64> + rbx * 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi + 0x48<64>:word16] = ax
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425A50_exit
fn0000000000425A50_exit:


// fn0000000000425AD0
// Return size: 8
define fn0000000000425AD0
fn0000000000425AD0_entry:
	rsp = fp
	// succ:  l0000000000425AD0
l0000000000425AD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l0000000000425B19
	// succ:  l0000000000425ADD l0000000000425B19
l0000000000425ADD:
	rsi = r8
	rbp = rdx
	rdi = rcx
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l0000000000425AF9
	// succ:  l0000000000425AF9
l0000000000425AF0:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	SCZO = cond(rsi - rbx)
	branch Test(EQ,Z) l0000000000425B0D
	// succ:  l0000000000425AF9 l0000000000425B0D
l0000000000425AF9:
	ecx = CONVERT(Mem0[rbp + 0<64> + rbx * 2<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rdx = Mem0[rdi + 0x40<64>:word64]
	call msvcrt.dll!putwc (retsize: 8;)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(NE,Z) l0000000000425AF0
	// succ:  l0000000000425B0D l0000000000425AF0
l0000000000425B0D:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425AD0_exit
l0000000000425B19:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l0000000000425B0D
	// succ:  l0000000000425B0D
fn0000000000425AD0_exit:


// fn0000000000425B20
// Return size: 8
define fn0000000000425B20
fn0000000000425B20_entry:
	rsp = fp
	// succ:  l0000000000425B20
l0000000000425B20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rdx
	rdx = r8
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SZO = cond(r9d & r9d)
	C = false
	rbx = rcx
	Mem0[rcx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rcx + 8<64>:word32] = 0<32>
	branch Test(EQ,Z) l0000000000425B54
	// succ:  l0000000000425B45 l0000000000425B54
l0000000000425B45:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(r9d - 1<32>)
	r8b = CONVERT(Test(NE,Z), bool, int8)
	r8d = r8d + 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	// succ:  l0000000000425B54
l0000000000425B54:
	rcx = Mem0[rsi + 0x40<64>:word64]
	call fn0000000000411A00 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000425B6D
	// succ:  l0000000000425B61 l0000000000425B6D
l0000000000425B61:
	rcx = Mem0[rsi + 0x40<64>:word64]
	call fn0000000000411E60 (retsize: 8;)
	Mem0[rbx:word64] = rax
	// succ:  l0000000000425B6D
l0000000000425B6D:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425B20_exit
fn0000000000425B20_exit:


// fn0000000000425B80
// Return size: 8
define fn0000000000425B80
fn0000000000425B80_entry:
	rsp = fp
	// succ:  l0000000000425B80
l0000000000425B80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rsi = rdx
	rbx = rcx
	rcx = 0x0000000000425B20<p64>
	rax = Mem0[rsi:word64]
	rdx = Mem0[r8:word64]
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000425BF0
	// succ:  l0000000000425BA2 l0000000000425BF0
l0000000000425BA2:
	rcx = Mem0[rsi + 0x40<64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	Mem0[rbx:word64] = 0xFFFFFFFFFFFFFFFF<64>
	Mem0[rbx + 8<64>:word32] = 0<32>
	call fn0000000000411A00 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000425BD0
	// succ:  l0000000000425BC0 l0000000000425BD0
l0000000000425BC0:
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425B80_exit
l0000000000425BD0:
	rcx = Mem0[rsi + 0x40<64>:word64]
	call fn0000000000411E60 (retsize: 8;)
	Mem0[rbx:word64] = rax
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425B80_exit
l0000000000425BF0:
	Mem0[rsp + 0x20<64>:word32] = r9d
	r8 = rdx
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rdx = rsi
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425B80_exit
fn0000000000425B80_exit:


// fn0000000000425C10
// Return size: 8
define fn0000000000425C10
fn0000000000425C10_entry:
	rsp = fp
	// succ:  l0000000000425C10
l0000000000425C10:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(dx - 0xFFFF<16>)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l0000000000425C30
	// succ:  l0000000000425C1C l0000000000425C30
l0000000000425C1C:
	rdx = Mem0[rcx + 0x40<64>:word64]
	ecx = CONVERT(ax, word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	call msvcrt.dll!putwc (retsize: 0;)
	return
	// succ:  fn0000000000425C10_exit
l0000000000425C30:
	rcx = Mem0[rcx + 0x40<64>:word64]
	call msvcrt.dll!fflush (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = -eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	C = eax == 0<32>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000425C10_exit
fn0000000000425C10_exit:


// fn0000000000425C50
// Return size: 8
define fn0000000000425C50
fn0000000000425C50_entry:
	rsp = fp
	// succ:  l0000000000425C50
l0000000000425C50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(dx - 0xFFFF<16>)
	rbx = rcx
	ecx = CONVERT(dx, word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(EQ,Z) l0000000000425C80
	// succ:  l0000000000425C61 l0000000000425C80
l0000000000425C61:
	rdx = Mem0[rbx + 0x40<64>:word64]
	call msvcrt.dll!ungetwc (retsize: 8;)
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0x48<64>:word16] = dx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425C50_exit
l0000000000425C80:
	ecx = CONVERT(Mem0[rbx + 0x48<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(cx - 0xFFFF<16>)
	branch Test(NE,Z) l0000000000425C61
	// succ:  l0000000000425C8C l0000000000425C61
l0000000000425C8C:
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0x48<64>:word16] = dx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425C50_exit
fn0000000000425C50_exit:


// fn0000000000425CA0
// Return size: 0
define fn0000000000425CA0
fn0000000000425CA0_entry:
	rsp = fp
	// succ:  l0000000000425CA0
l0000000000425CA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[rcx + 0x40<64>:word64]
	call msvcrt.dll!getwc (retsize: 8;)
	rdx = Mem0[rbx + 0x40<64>:word64]
	ecx = CONVERT(ax, word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call msvcrt.dll!ungetwc (retsize: 0;)
	return
	// succ:  fn0000000000425CA0_exit
fn0000000000425CA0_exit:


// fn0000000000425CD0
// Return size: 8
define fn0000000000425CD0
fn0000000000425CD0_entry:
	rsp = fp
	// succ:  l0000000000425CD0
l0000000000425CD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	Mem0[rcx + 0x20<64>:word64] = 0<64>
	rcx = rcx + 0x38<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx - 0x10<64>:word64] = 0<64>
	Mem0[rcx - 8<64>:word64] = 0<64>
	Mem0[rcx - 0x38<64>:word64] = rax
	rsi = rdx
	call fn000000000046AE90 (retsize: 8;)
	rax = 0x0000000000495D90<p64>
	Mem0[rbx + 0x40<64>:word64] = rsi
	Mem0[rbx:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 0x48<64>:word16] = ax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425CD0_exit
fn0000000000425CD0_exit:


// fn0000000000425D50
// Return size: 8
define fn0000000000425D50
fn0000000000425D50_entry:
	rsp = fp
	// succ:  l0000000000425D50
l0000000000425D50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rbx = rcx
	Mem0[rcx + 8<64>:word64] = 0<64>
	Mem0[rcx + 0x10<64>:word64] = 0<64>
	Mem0[rcx + 0x18<64>:word64] = 0<64>
	Mem0[rcx + 0x20<64>:word64] = 0<64>
	rcx = rcx + 0x38<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx - 0x10<64>:word64] = 0<64>
	Mem0[rcx - 8<64>:word64] = 0<64>
	Mem0[rcx - 0x38<64>:word64] = rax
	rsi = rdx
	call fn000000000046AE90 (retsize: 8;)
	rax = 0x0000000000495D90<p64>
	Mem0[rbx + 0x40<64>:word64] = rsi
	Mem0[rbx:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx + 0x48<64>:word16] = ax
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000425D50_exit
fn0000000000425D50_exit:


// fn0000000000425DD0
// Return size: 0
define fn0000000000425DD0
fn0000000000425DD0_entry:
	rsp = fp
	// succ:  l0000000000425DD0
l0000000000425DD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rbx = rcx
	rcx = rcx + 0x38<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx - 0x38<64>:word64] = rax
	call fn000000000046AF20 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000425DF8_thunk_fn0000000000475550
l0000000000425DF8_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000425DD0_exit
fn0000000000425DD0_exit:


// fn0000000000425E00
// Return size: 0
define fn0000000000425E00
fn0000000000425E00_entry:
	rsp = fp
	// succ:  l0000000000425E00
l0000000000425E00:
	rax = Mem0[0x0000000000491C40<p64>:word64]
	rcx = rcx + 0x38<64>
	SCZO = cond(rcx)
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rcx - 0x38<64>:word64] = rax
	// succ:  l0000000000425E13_thunk_fn000000000046AF20
l0000000000425E13_thunk_fn000000000046AF20:
	call fn000000000046AF20 (retsize: 0;)
	return
	// succ:  fn0000000000425E00_exit
fn0000000000425E00_exit:


// fn0000000000425E20
// Return size: 0
define fn0000000000425E20
fn0000000000425E20_entry:
	rsp = fp
	// succ:  l0000000000425E20
l0000000000425E20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000495E10<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046F0F0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000425E3F_thunk_fn0000000000475550
l0000000000425E3F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000425E20_exit
fn0000000000425E20_exit:


// fn0000000000425E50
// Return size: 8
define fn0000000000425E50
fn0000000000425E50_entry:
	rsp = fp
	// succ:  l0000000000425E50
l0000000000425E50:
	rax = 0x0000000000495E10<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000425E5A_thunk_fn000000000046F0F0
l0000000000425E5A_thunk_fn000000000046F0F0:
	call fn000000000046F0F0 (retsize: 0;)
	return
	// succ:  fn0000000000425E50_exit
fn0000000000425E50_exit:


// fn0000000000425E60
// Return size: 0
define fn0000000000425E60
fn0000000000425E60_entry:
	rsp = fp
	// succ:  l0000000000425E60
l0000000000425E60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000495E50<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046F0F0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000425E7F_thunk_fn0000000000475550
l0000000000425E7F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000425E60_exit
fn0000000000425E60_exit:


// fn0000000000425E90
// Return size: 8
define fn0000000000425E90
fn0000000000425E90_entry:
	rsp = fp
	// succ:  l0000000000425E90
l0000000000425E90:
	rax = 0x0000000000495E50<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000425E9A_thunk_fn000000000046F0F0
l0000000000425E9A_thunk_fn000000000046F0F0:
	call fn000000000046F0F0 (retsize: 0;)
	return
	// succ:  fn0000000000425E90_exit
fn0000000000425E90_exit:


// fn0000000000425EA0
// Return size: 0
define fn0000000000425EA0
fn0000000000425EA0_entry:
	rsp = fp
	// succ:  l0000000000425EA0
l0000000000425EA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000495E90<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046F0F0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000425EBF_thunk_fn0000000000475550
l0000000000425EBF_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000425EA0_exit
fn0000000000425EA0_exit:


// fn0000000000425ED0
// Return size: 8
define fn0000000000425ED0
fn0000000000425ED0_entry:
	rsp = fp
	// succ:  l0000000000425ED0
l0000000000425ED0:
	rax = 0x0000000000495E90<p64>
	Mem0[rcx:word64] = rax
	// succ:  l0000000000425EDA_thunk_fn000000000046F0F0
l0000000000425EDA_thunk_fn000000000046F0F0:
	call fn000000000046F0F0 (retsize: 0;)
	return
	// succ:  fn0000000000425ED0_exit
fn0000000000425ED0_exit:


// fn0000000000425EE0
// Return size: 0
define fn0000000000425EE0
fn0000000000425EE0_entry:
	rsp = fp
	// succ:  l0000000000425EE0
l0000000000425EE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xA8<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	rbx = 0x6F2E756E672E6363<64>
	r15 = 0x756F6E6520746F6E<64>
	r14 = 0x6563617073206867<64>
	rdx = rdx - rcx
	SCZO = cond(rdx)
	Mem0[rbp + 0x70<64>:word64] = rcx
	r13 = 0x726F6620726F6620<64>
	rax = rdx + 1<64>
	r8 = rdx
	r12 = 0x617078652074616D<64>
	rdi = 0x5028206E6F69736E<64>
	rsi = 0x757320657361656C<64>
	r11 = 0x6C75662074696D62<64>
	Mem0[rbp - 0x58<64>:word64] = rax
	rax = r8 + 0x8A<64>
	r10 = 0x657220677562206C<64>
	rcx = 0x2074612074726F70<64>
	rdx = 0x672F2F3A70747468<64>
	Mem0[rbp + 0<64>:word64] = rbx
	r9 = 0x200A3A296C6D7468<64>
	rbx = 0x2E736775622F6772<64>
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	Mem0[rbp - 0x50<64>:word64] = r15
	Mem0[rbp - 0x48<64>:word64] = r14
	Mem0[rbp - 0x40<64>:word64] = r13
	Mem0[rbp - 0x38<64>:word64] = r12
	Mem0[rbp - 0x30<64>:word64] = rdi
	Mem0[rbp - 0x28<64>:word64] = rsi
	Mem0[rbp - 0x20<64>:word64] = r11
	Mem0[rbp - 0x18<64>:word64] = r10
	Mem0[rbp - 0x10<64>:word64] = rcx
	Mem0[rbp - 8<64>:word64] = rdx
	Mem0[rbp + 8<64>:word64] = rbx
	Mem0[rbp + 0x10<64>:word64] = r9
	Mem0[rbp + 0x18<64>:word32] = 0x202020<32>
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	eax = 0x2020<32>
	rax = CONVERT(eax, word32, uint64)
	rbx = rsp + 0x20<64>
	Mem0[rbx + 0x48<64>:word64] = rdx
	rdx = Mem0[rbp + 0x70<64>:word64]
	Mem0[rbx + 0x20<64>:word64] = rdi
	Mem0[rbx + 0x28<64>:word64] = rsi
	rdi = 0x2E736775622F6772<64>
	Mem0[rbx + 0x40<64>:word64] = rcx
	rsi = 0x6F2E756E672E6363<64>
	rcx = rbx + 0x6B<64>
	Mem0[rbx:word64] = r15
	Mem0[rbx + 8<64>:word64] = r14
	Mem0[rbx + 0x10<64>:word64] = r13
	Mem0[rbx + 0x18<64>:word64] = r12
	Mem0[rbx + 0x30<64>:word64] = r11
	Mem0[rbx + 0x38<64>:word64] = r10
	Mem0[rbx + 0x50<64>:word64] = rsi
	Mem0[rbx + 0x58<64>:word64] = rdi
	Mem0[rbx + 0x60<64>:word64] = r9
	Mem0[rbx + 0x68<64>:word16] = ax
	Mem0[rbx + 0x6A<64>:byte] = 0x20<8>
	rax = memcpy(rcx, rdx, r8)
	rax = Mem0[rbp - 0x58<64>:word64]
	rcx = rbx
	Mem0[rbx + 0x6A<64> + rax:byte] = 0<8>
	call fn0000000000470BA0 (retsize: 8;)
	// succ:  l000000000042605F_thunk_fn0000000000426060
l000000000042605F_thunk_fn0000000000426060:
	call fn0000000000426060 (retsize: 0;)
	return
	// succ:  fn0000000000425EE0_exit
fn0000000000425EE0_exit:


// fn0000000000426060
// Return size: 0
define fn0000000000426060
fn0000000000426060_entry:
	rsp = fp
	// succ:  l0000000000426060
l0000000000426060:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[0x000000000048C090<p64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000426127
	// succ:  l0000000000426074 l0000000000426127
l0000000000426074:
	Mem0[0x000000000048C090<p64>:byte] = 1<8>
	call fn0000000000475A00 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004261BA
	// succ:  l0000000000426089 l00000000004261BA
l0000000000426089:
	rbx = Mem0[rax + 8<64>:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	r9 = rsp + 0x2C<64>
	SCZO = cond(Mem0[rbx:byte] - 0x2A<8>)
	Mem0[rsp + 0x2C<64>:word32] = 0xFFFFFFFF<32>
	al = CONVERT(Test(EQ,Z), bool, int8)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rbx = rbx + rax
	SCZO = cond(rbx)
	rcx = rbx
	call fn000000000040FB80 (retsize: 8;)
	rsi = _iob_func
	rdi = rax
	call _iob_func (retsize: 8;)
	rcx = 0x000000000048E7D0<p64>
	r9 = rax + 0x60<64>
	r8d = 0x30<32>
	r8 = CONVERT(r8d, word32, uint64)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = fwrite(rcx, rdx, r8, r9)
	SCZO = cond(Mem0[rsp + 0x2C<64>:word32] - 0<32>)
	branch Test(EQ,Z) l0000000000426117
	// succ:  l00000000004260E0 l0000000000426117
l00000000004260E0:
	call _iob_func (retsize: 8;)
	rdx = rax + 0x60<64>
	rcx = rbx
	eax = fputs(rcx, rdx)
	// succ:  l00000000004260EE
l00000000004260EE:
	call _iob_func (retsize: 8;)
	rcx = 0x000000000048E801<p64>
	r9 = rax + 0x60<64>
	r8d = 2<32>
	r8 = CONVERT(r8d, word32, uint64)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = fwrite(rcx, rdx, r8, r9)
	SCZO = cond(Mem0[rsp + 0x2C<64>:word32] - 0<32>)
	branch Test(EQ,Z) l000000000042614D
	// succ:  l0000000000426112 l000000000042614D
l0000000000426112:
	call fn0000000000476060 (retsize: 8;)
	// succ:  l0000000000426117
l0000000000426117:
	call rsi (retsize: 8;)
	rdx = rax + 0x60<64>
	rcx = rdi
	eax = fputs(rcx, rdx)
	goto l00000000004260EE
	// succ:  l00000000004260EE
l0000000000426127:
	call _iob_func (retsize: 8;)
	rcx = 0x000000000048E7B0<p64>
	r9 = rax + 0x60<64>
	r8d = 0x1D<32>
	r8 = CONVERT(r8d, word32, uint64)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = fwrite(rcx, rdx, r8, r9)
	abort()
	// succ:  l000000000042614D
l000000000042614D:
	rcx = rdi
	free(rcx)
	goto l0000000000426112
	// succ:  l0000000000426112
l00000000004261B5:
	abort()
	// succ:  l00000000004261BA
l00000000004261BA:
	call _iob_func (retsize: 8;)
	rcx = 0x000000000048E808<p64>
	r9 = rax + 0x60<64>
	r8d = 0x2D<32>
	r8 = CONVERT(r8d, word32, uint64)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = fwrite(rcx, rdx, r8, r9)
	goto l00000000004261B5
	// succ:  l00000000004261B5
fn0000000000426060_exit:


// fn0000000000426200
// Return size: 0
define fn0000000000426200
fn0000000000426200_entry:
	rsp = fp
	// succ:  l0000000000426200
l0000000000426200:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0x0000000000495ED0<p64>
	rbx = rcx
	Mem0[rcx:word64] = rax
	call fn000000000046F0F0 (retsize: 8;)
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000042621F_thunk_fn0000000000475550
l000000000042621F_thunk_fn0000000000475550:
	call fn0000000000475550 (retsize: 0;)
	return
	// succ:  fn0000000000426200_exit
fn0000000000426200_exit:


// fn0000000000426230
// Return size: 8
define fn0000000000426230
fn0000000000426230_entry:
	rsp = fp
	// succ:  l0000000000426230
l0000000000426230:
	rax = 0x0000000000495ED0<p64>
	Mem0[rcx:word64] = rax
	// succ:  l000000000042623A_thunk_fn000000000046F0F0
l000000000042623A_thunk_fn000000000046F0F0:
	call fn000000000046F0F0 (retsize: 0;)
	return
	// succ:  fn0000000000426230_exit
fn0000000000426230_exit:


// fn0000000000426240
// Return size: 0
define fn0000000000426240
fn0000000000426240_entry:
	rsp = fp
	// succ:  l0000000000426240
l0000000000426240:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rdx = 0x0000000000495E10<p64>
	r8 = 0x0000000000425E50<p64>
	rcx = rax
	Mem0[rax:word64] = rdx
	rdx = 0x0000000000493120<p64>
	call fn00000000004760B0 (retsize: 8;)
	// succ:  l000000000042626F_thunk_fn0000000000426270
l000000000042626F_thunk_fn0000000000426270:
	call fn0000000000426270 (retsize: 0;)
	return
	// succ:  fn0000000000426240_exit
fn0000000000426240_exit:


// fn0000000000426270
// Return size: 0
define fn0000000000426270
fn0000000000426270_entry:
	rsp = fp
	// succ:  l0000000000426270
l0000000000426270:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rdx = 0x0000000000495E90<p64>
	r8 = 0x0000000000425ED0<p64>
	rcx = rax
	Mem0[rax:word64] = rdx
	rdx = 0x0000000000493160<p64>
	call fn00000000004760B0 (retsize: 8;)
	// succ:  l000000000042629F_thunk_fn00000000004262A0
l000000000042629F_thunk_fn00000000004262A0:
	call fn00000000004262A0 (retsize: 0;)
	return
	// succ:  fn0000000000426270_exit
fn0000000000426270_exit:


// fn00000000004262A0
// Return size: 0
define fn00000000004262A0
fn00000000004262A0_entry:
	rsp = fp
	// succ:  l00000000004262A0
l00000000004262A0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn00000000004756E0 (retsize: 8;)
	rsp = rsp + 8<64>
	rdx = 0x0000000000495ED0<p64>
	r8 = 0x0000000000426230<p64>
	rcx = rax
	Mem0[rax:word64] = rdx
	rdx = 0x0000000000493180<p64>
	call fn00000000004760B0 (retsize: 8;)
	// succ:  l00000000004262CF_thunk_fn00000000004262D0
l00000000004262CF_thunk_fn00000000004262D0:
	call fn00000000004262D0 (retsize: 0;)
	return
	// succ:  fn00000000004262A0_exit
fn00000000004262A0_exit:


// fn00000000004262D0
// Return size: 8
define fn00000000004262D0
fn00000000004262D0_entry:
	rsp = fp
	// succ:  l00000000004262D0
l00000000004262D0:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x20<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004262FF
	// succ:  l00000000004262DD l00000000004262FF
l00000000004262DD:
	eax = CONVERT(Mem0[rax + rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004262D0_exit
l00000000004262F0:
	rax = Mem0[rcx + 0x30<64>:word64]
	r8 = Mem0[rax:word64]
	SCZO = cond(r8 - rdx)
	branch Test(ULE,CZ) l0000000000426336
	// succ:  l00000000004262FC l0000000000426336
l00000000004262FC:
	rcx = rax
	// succ:  l00000000004262FF
l00000000004262FF:
	eax = CONVERT(Mem0[rcx + 0x18<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000426303
l0000000000426303:
	SCZO = cond(al - 1<8>)
	branch Test(EQ,Z) l00000000004262F0
	// succ:  l0000000000426307 l00000000004262F0
l0000000000426307:
	branch Test(ULT,C) l0000000000426330
	// succ:  l0000000000426309 l0000000000426330
l0000000000426309:
	SCZO = cond(al - 3<8>)
	branch Test(UGT,CZ) l0000000000426303
	// succ:  l000000000042630D l0000000000426303
l000000000042630D:
	rcx = Mem0[rcx + 0x30<64>:word64]
	r9 = rsp + 0x2F<64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	eax = CONVERT(Mem0[rsp + 0x2F<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004262D0_exit
l0000000000426330:
	rax = Mem0[rcx + 0x30<64>:word64]
	goto l00000000004262DD
	// succ:  l00000000004262DD
l0000000000426336:
	rdx = rdx - r8
	SCZO = cond(rdx)
	rcx = Mem0[rcx + 0x38<64>:word64]
	goto l00000000004262FF
	// succ:  l00000000004262FF
fn00000000004262D0_exit:


// fn0000000000426340
// Return size: 8
define fn0000000000426340
fn0000000000426340_entry:
	rsp = fp
	// succ:  l0000000000426340
l0000000000426340:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x20<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000042636F
	// succ:  l000000000042634D l000000000042636F
l000000000042634D:
	eax = CONVERT(Mem0[rax + rdx * 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000426340_exit
l0000000000426360:
	rax = Mem0[rcx + 0x30<64>:word64]
	r8 = Mem0[rax:word64]
	SCZO = cond(r8 - rdx)
	branch Test(ULE,CZ) l00000000004263A6
	// succ:  l000000000042636C l00000000004263A6
l000000000042636C:
	rcx = rax
	// succ:  l000000000042636F
l000000000042636F:
	eax = CONVERT(Mem0[rcx + 0x18<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000426373
l0000000000426373:
	SCZO = cond(al - 1<8>)
	branch Test(EQ,Z) l0000000000426360
	// succ:  l0000000000426377 l0000000000426360
l0000000000426377:
	branch Test(ULT,C) l00000000004263A0
	// succ:  l0000000000426379 l00000000004263A0
l0000000000426379:
	SCZO = cond(al - 3<8>)
	branch Test(UGT,CZ) l0000000000426373
	// succ:  l000000000042637D l0000000000426373
l000000000042637D:
	rcx = Mem0[rcx + 0x30<64>:word64]
	r9 = rsp + 0x2E<64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	eax = CONVERT(Mem0[rsp + 0x2E<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000426340_exit
l00000000004263A0:
	rax = Mem0[rcx + 0x30<64>:word64]
	goto l000000000042634D
	// succ:  l000000000042634D
l00000000004263A6:
	rdx = rdx - r8
	SCZO = cond(rdx)
	rcx = Mem0[rcx + 0x38<64>:word64]
	goto l000000000042636F
	// succ:  l000000000042636F
fn0000000000426340_exit:


// fn00000000004263B0
// Return size: 8
define fn00000000004263B0
fn00000000004263B0_entry:
	rsp = fp
	// succ:  l00000000004263B0
l00000000004263B0:
	rax = Mem0[rdx:word64]
	SCZO = cond(Mem0[rcx:word64] - rax)
	al = CONVERT(Test(EQ,Z), bool, int8)
	return
	// succ:  fn00000000004263B0_exit
fn00000000004263B0_exit:


// fn00000000004263C0
// Return size: 8
define fn00000000004263C0
fn00000000004263C0_entry:
	rsp = fp
	// succ:  l00000000004263C0
l00000000004263C0:
	rax = Mem0[rdx:word64]
	SCZO = cond(Mem0[rcx:word64] - rax)
	al = CONVERT(Test(EQ,Z), bool, int8)
	return
	// succ:  fn00000000004263C0_exit
fn00000000004263C0_exit:


// fn00000000004263D0
// Return size: 8
define fn00000000004263D0
fn00000000004263D0_entry:
	rsp = fp
	// succ:  l00000000004263D0
l00000000004263D0:
	rax = Mem0[rdx:word64]
	SCZO = cond(Mem0[rcx:word64] - rax)
	al = CONVERT(Test(EQ,Z), bool, int8)
	return
	// succ:  fn00000000004263D0_exit
fn00000000004263D0_exit:


// fn00000000004263E0
// Return size: 8
define fn00000000004263E0
fn00000000004263E0_entry:
	rsp = fp
	// succ:  l00000000004263E0
l00000000004263E0:
	rax = Mem0[rdx:word64]
	SCZO = cond(Mem0[rcx:word64] - rax)
	al = CONVERT(Test(EQ,Z), bool, int8)
	return
	// succ:  fn00000000004263E0_exit
fn00000000004263E0_exit:


// fn00000000004263F0
// Return size: 8
define fn00000000004263F0
fn00000000004263F0_entry:
	rsp = fp
	// succ:  l00000000004263F0
l00000000004263F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx
	rbx = rdx
	rbp = r8
	edi = r9d
	rdi = CONVERT(edi, word32, uint64)
	call fn0000000000448CF0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000426412
	// succ:  l000000000042640D l0000000000426412
l000000000042640D:
	SCZO = cond(edi - 3<32>)
	branch Test(ULE,CZ) l0000000000426420
	// succ:  l0000000000426412 l0000000000426420
l0000000000426412:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004263F0_exit
l0000000000426420:
	rax = Mem0[rbx:word64]
	r8 = rbp
	rdx = rsi
	rcx = rbx
	rax = Mem0[rax + 0x28<64>:word64]
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call rax (retsize: 0;)
	return
	// succ:  fn00000000004263F0_exit
fn00000000004263F0_exit:


// fn0000000000426440
// Return size: 8
define fn0000000000426440
fn0000000000426440_entry:
	rsp = fp
	// succ:  l0000000000426440
l0000000000426440:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = r8
	rbx = r9
	call fn0000000000448CF0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000426467
	// succ:  l0000000000426455 l0000000000426467
l0000000000426455:
	Mem0[rbx:word64] = rsi
	Mem0[rbx + 0x10<64>:word64] = 0x10<64>
	Mem0[rbx + 8<64>:word32] = 6<32>
	// succ:  l0000000000426467
l0000000000426467:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000426440_exit
fn0000000000426440_exit:


// fn0000000000426470
// Return size: 8
define fn0000000000426470
fn0000000000426470_entry:
	rsp = fp
	// succ:  l0000000000426470
l0000000000426470:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = r8
	Mem0[rsp + 0x20<64>:word64] = 0<64>
	Mem0[rsp + 0x28<64>:word32] = 0<32>
	Mem0[rsp + 0x2C<64>:word32] = 0x10<32>
	Mem0[rsp + 0x30<64>:word64] = 0<64>
	r9 = rsp + 0x20<64>
	r8 = Mem0[r8:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	edx = Mem0[rsp + 0x28<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edx = edx & 6<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(edx - 6<32>)
	branch Test(NE,Z) l00000000004264C3
	// succ:  l00000000004264B6 l00000000004264C3
l00000000004264B6:
	rax = Mem0[rsp + 0x20<64>:word64]
	Mem0[rbx:word64] = rax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004264C3
l00000000004264C3:
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000426470_exit
fn0000000000426470_exit:


// fn00000000004264D0
// Return size: 8
define fn00000000004264D0
fn00000000004264D0_entry:
	rsp = fp
	// succ:  l00000000004264D0
l00000000004264D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp + 0x70<64>:word64]
	SCZO = cond(rbx - Mem0[rsp + 0x80<64>:word64])
	rsi = rcx
	edi = r8d
	rdi = CONVERT(edi, word32, uint64)
	branch Test(EQ,Z) l0000000000426520
	// succ:  l00000000004264EC l0000000000426520
l00000000004264EC:
	rdx = r9
	rcx = rsi
	call fn0000000000448CF0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000426510
	// succ:  l00000000004264FB l0000000000426510
l00000000004264FB:
	rax = Mem0[rsp + 0x88<64>:word64]
	Mem0[rax:word64] = rbx
	Mem0[rax + 8<64>:word32] = edi
	Mem0[rax + 0x10<64>:word32] = 1<32>
	// succ:  l0000000000426510
l0000000000426510:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004264D0_exit
l0000000000426520:
	rdx = Mem0[rsp + 0x78<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = r9
	call fn0000000000448CF0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	r9 = Mem0[rsp + 0x28<64>:word64]
	branch Test(EQ,Z) l00000000004264EC
	// succ:  l0000000000426538 l00000000004264EC
l0000000000426538:
	rax = Mem0[rsp + 0x88<64>:word64]
	Mem0[rax + 0xC<64>:word32] = edi
	goto l0000000000426510
	// succ:  l0000000000426510
fn00000000004264D0_exit:


// fn0000000000426550
// Return size: 8
define fn0000000000426550
fn0000000000426550_entry:
	rsp = fp
	// succ:  l0000000000426550
l0000000000426550:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x28<64>:word64] - r8)
	al = CONVERT(Test(EQ,Z), bool, int8)
	eax = SLICE(rax + 1<64> + rax * 4<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000426550_exit
fn0000000000426550_exit:


// fn0000000000426560
// Return size: 8
define fn0000000000426560
fn0000000000426560_entry:
	rsp = fp
	// succ:  l0000000000426560
l0000000000426560:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbp = rcx
	rbx = rdx
	rsi = r8
	rdi = r9
	call fn0000000000426440 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000426590
	// succ:  l000000000042657D l0000000000426590
l000000000042657D:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000426560_exit
l0000000000426590:
	rcx = Mem0[rbp + 0x10<64>:word64]
	r9 = rdi
	r8 = rsi
	rdx = rbx
	rax = Mem0[rcx:word64]
	rax = Mem0[rax + 0x30<64>:word64]
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000426560_exit
fn0000000000426560_exit:


// fn00000000004265B0
// Return size: 8
define fn00000000004265B0
fn00000000004265B0_entry:
	rsp = fp
	// succ:  l00000000004265B0
l00000000004265B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp + 0x90<64>:word64]
	r14 = Mem0[rsp + 0x98<64>:word64]
	rbp = rdx
	rdx = r9
	rdi = rcx
	r15d = r8d
	r15 = CONVERT(r15d, word32, uint64)
	r12 = r9
	r13 = Mem0[rsp + 0xA0<64>:word64]
	rsi = Mem0[rsp + 0xA8<64>:word64]
	call fn0000000000448CF0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000426630
	// succ:  l00000000004265F8 l0000000000426630
l00000000004265F8:
	SZO = cond(rbp & rbp)
	C = false
	Mem0[rsi:word64] = rbx
	Mem0[rsi + 8<64>:word32] = r15d
	branch Test(SG,S) l0000000000426680
	// succ:  l0000000000426604 l0000000000426680
l0000000000426604:
	rbx = rbx + rbp
	SCZO = cond(rbx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r13 - rbx)
	al = CONVERT(Test(EQ,Z), bool, int8)
	eax = SLICE(rax + 1<64> + rax * 4<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsi + 0x10<64>:word32] = eax
	// succ:  l0000000000426616
l0000000000426616:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004265B0_exit
l0000000000426630:
	SCZO = cond(rbx - r13)
	branch Test(EQ,Z) l0000000000426690
	// succ:  l0000000000426635 l0000000000426690
l0000000000426635:
	rcx = Mem0[rdi + 0x10<64>:word64]
	r9 = r12
	r8d = r15d
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbp
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0xA8<64>:word64] = rsi
	Mem0[rsp + 0xA0<64>:word64] = r13
	Mem0[rsp + 0x98<64>:word64] = r14
	Mem0[rsp + 0x90<64>:word64] = rbx
	rax = Mem0[rax + 0x38<64>:word64]
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call rax (retsize: 0;)
	return
	// succ:  fn00000000004265B0_exit
l0000000000426680:
	SCZO = cond(rbp - 0xFFFFFFFFFFFFFFFE<64>)
	branch Test(NE,Z) l0000000000426616
	// succ:  l0000000000426686 l0000000000426616
l0000000000426686:
	Mem0[rsi + 0x10<64>:word32] = 1<32>
	goto l0000000000426616
	// succ:  l0000000000426616
l0000000000426690:
	rdx = r14
	rcx = rdi
	call fn0000000000448CF0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000426635
	// succ:  l000000000042669F l0000000000426635
l000000000042669F:
	Mem0[rsi + 0xC<64>:word32] = r15d
	goto l0000000000426616
	// succ:  l0000000000426616
fn00000000004265B0_exit:


// fn00000000004266B0
// Return size: 8
define fn00000000004266B0
fn00000000004266B0_entry:
	rsp = fp
	// succ:  l00000000004266B0
l00000000004266B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp + 0x70<64>:word64]
	rsi = rcx
	rdi = rdx
	SCZO = cond(rbx - r8)
	branch Test(EQ,Z) l00000000004266E4
	// succ:  l00000000004266C7 l00000000004266E4
l00000000004266C7:
	rcx = Mem0[rsi + 0x10<64>:word64]
	rdx = rdi
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x70<64>:word64] = rbx
	rax = Mem0[rax + 0x40<64>:word64]
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call rax (retsize: 0;)
	return
	// succ:  fn00000000004266B0_exit
l00000000004266E4:
	rdx = r9
	Mem0[rsp + 0x28<64>:word64] = r8
	Mem0[rsp + 0x20<64>:word64] = r9
	call fn0000000000448CF0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	r9 = Mem0[rsp + 0x20<64>:word64]
	r8 = Mem0[rsp + 0x28<64>:word64]
	branch Test(EQ,Z) l00000000004266C7
	// succ:  l0000000000426704 l00000000004266C7
l0000000000426704:
	eax = 6<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004266B0_exit
fn00000000004266B0_exit:


// fn0000000000426720
// Return size: 8
define fn0000000000426720
fn0000000000426720_entry:
	rsp = fp
	// succ:  l0000000000426720
l0000000000426720:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	rdi = r8
	Mem0[rsp + 0xA0<64>:word64] = rcx
	Mem0[rsp + 0xA8<64>:word64] = rdx
	rbp = r9
	call fn0000000000426440 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	branch Test(NE,Z) l00000000004268C0
	// succ:  l0000000000426756 l00000000004268C0
l0000000000426756:
	r12d = Mem0[rbp + 0xC<64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12b & 0x10<8>)
	C = false
	branch Test(NE,Z) l0000000000426930
	// succ:  l0000000000426764 l0000000000426930
l0000000000426764:
	rax = Mem0[rsp + 0xA0<64>:word64]
	rdx = Mem0[rsp + 0xA0<64>:word64]
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	r13d = Mem0[rax + 0x14<64>:word32]
	r13 = CONVERT(r13d, word32, uint64)
	rax = r13
	rax = rax << 4<64>
	SCZO = cond(rax)
	rsi = rdx + 8<64> + rax
	rax = rsp + 0x30<64>
	Mem0[rsp + 0x20<64>:word64] = rax
	eax = r12d
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x28<64>:word32] = eax
	goto l0000000000426828
	// succ:  l0000000000426828
l00000000004267A0:
	r8 = r8 >> 8<64>
	SCZO = cond(r8)
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l00000000004267AF
	// succ:  l00000000004267A9 l00000000004267AF
l00000000004267A9:
	r8 = r8 + Mem0[rdi:word64]
	SCZO = cond(r8)
	r8 = Mem0[r8:word64]
	// succ:  l00000000004267AF
l00000000004267AF:
	r8 = r8 + rdi
	SCZO = cond(r8)
	// succ:  l00000000004267B2
l00000000004267B2:
	rcx = Mem0[rsi:word64]
	r9 = Mem0[rsp + 0x20<64>:word64]
	rdx = Mem0[rsp + 0xA8<64>:word64]
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x30<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	branch Test(EQ,Z) l0000000000426820
	// succ:  l00000000004267CF l0000000000426820
l00000000004267CF:
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l00000000004267E4
	// succ:  l00000000004267D4 l00000000004267E4
l00000000004267D4:
	SCZO = cond(Mem0[rsp + 0x40<64>:word64] - 0x10<64>)
	branch Test(NE,Z) l00000000004267E4
	// succ:  l00000000004267DC l00000000004267E4
l00000000004267DC:
	rax = Mem0[rsi:word64]
	Mem0[rsp + 0x40<64>:word64] = rax
	// succ:  l00000000004267E4
l00000000004267E4:
	SZO = cond(bl & bl)
	C = false
	eax = Mem0[rsp + 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l00000000004267F8
	// succ:  l00000000004267EC l00000000004267F8
l00000000004267EC:
	SCZO = cond(eax - 3<32>)
	branch Test(LE,SZO) l00000000004267F8
	// succ:  l00000000004267F1 l00000000004267F8
l00000000004267F1:
	eax = eax & 0xFFFFFFFD<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x38<64>:word32] = eax
	// succ:  l00000000004267F8
l00000000004267F8:
	rdx = Mem0[rbp + 0x10<64>:word64]
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l0000000000426880
	// succ:  l0000000000426801 l0000000000426880
l0000000000426801:
	rax = Mem0[rbp + 0<64>:word64]
	SCZO = cond(rax - Mem0[rsp + 0x30<64>:word64])
	branch Test(NE,Z) l000000000042694F
	// succ:  l0000000000426810 l000000000042694F
l0000000000426810:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004268D4
	// succ:  l0000000000426819 l00000000004268D4
l0000000000426819:
	eax = Mem0[rsp + 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	v32 = Mem0[rbp + 8<64>:word32] | eax
	Mem0[rbp + 8<64>:word32] = v32
	SZO = cond(Mem0[rbp + 8<64>:word32])
	C = false
	// succ:  l0000000000426820
l0000000000426820:
	r15 = r15 + 1<64>
	SCZO = cond(r15)
	rsi = rsi - 0x10<64>
	SCZO = cond(rsi)
	// succ:  l0000000000426828
l0000000000426828:
	SCZO = cond(r13 - r15)
	branch Test(EQ,Z) l0000000000426941
	// succ:  l0000000000426831 l0000000000426941
l0000000000426831:
	r8 = Mem0[rsi + 8<64>:word64]
	Mem0[rsp + 0x30<64>:word64] = 0<64>
	Mem0[rsp + 0x38<64>:word32] = 0<32>
	Mem0[rsp + 0x3C<64>:word32] = r12d
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	rbx = r8
	r14 = r8
	rbx = rbx >>u 1<64>
	SCZO = cond(rbx)
	r14d = r14d & 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	ebx = ebx & 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	branch Test(NE,Z) l000000000042686E
	// succ:  l0000000000426866 l000000000042686E
l0000000000426866:
	edx = Mem0[rsp + 0x28<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000426820
	// succ:  l000000000042686E l0000000000426820
l000000000042686E:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(NE,Z) l00000000004267A0
	// succ:  l0000000000426877 l00000000004267A0
l0000000000426877:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	goto l00000000004267B2
	// succ:  l00000000004267B2
l0000000000426880:
	rax = Mem0[rsp + 0x30<64>:word64]
	rdx = Mem0[rsp + 0x40<64>:word64]
	Mem0[rbp + 0<64>:word64] = rax
	rax = Mem0[rsp + 0x38<64>:word64]
	Mem0[rbp + 0x10<64>:word64] = rdx
	SCZO = cond(eax - 3<32>)
	Mem0[rbp + 8<64>:word64] = rax
	branch Test(LE,SZO) l00000000004268C0
	// succ:  l00000000004268A0 l00000000004268C0
l00000000004268A0:
	SZO = cond(al & 2<8>)
	C = false
	branch Test(EQ,Z) l0000000000426910
	// succ:  l00000000004268A4 l0000000000426910
l00000000004268A4:
	rax = Mem0[rsp + 0xA0<64>:word64]
	SZO = cond(Mem0[rax + 0x10<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l0000000000426820
	// succ:  l00000000004268B6 l0000000000426820
l00000000004268B6:
	// succ:  l00000000004268C0
l00000000004268C0:
	eax = r8d
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000426720_exit
l00000000004268D4:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SCZO = cond(rcx - 0x10<64>)
	branch Test(EQ,Z) l00000000004268FD
	// succ:  l00000000004268DF l00000000004268FD
l00000000004268DF:
	SCZO = cond(rdx - 0x10<64>)
	branch Test(EQ,Z) l00000000004268FD
	// succ:  l00000000004268E5 l00000000004268FD
l00000000004268E5:
	Mem0[rsp + 0x2F<64>:byte] = r8b
	call fn0000000000448CF0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	r8d = CONVERT(Mem0[rsp + 0x2F<64>:byte], byte, word32)
	r8 = CONVERT(r8d, word32, uint64)
	branch Test(NE,Z) l0000000000426819
	// succ:  l00000000004268FD l0000000000426819
l00000000004268FD:
	Mem0[rbp + 8<64>:word32] = 2<32>
	goto l00000000004268C0
	// succ:  l00000000004268C0
l0000000000426910:
	SZO = cond(al & 1<8>)
	C = false
	branch Test(EQ,Z) l00000000004268C0
	// succ:  l0000000000426914 l00000000004268C0
l0000000000426914:
	rax = Mem0[rsp + 0xA0<64>:word64]
	SZO = cond(Mem0[rax + 0x10<64>:byte] & 2<8>)
	C = false
	branch Test(NE,Z) l0000000000426820
	// succ:  l0000000000426926 l0000000000426820
l0000000000426926:
	goto l00000000004268C0
	// succ:  l00000000004268C0
l0000000000426930:
	rax = Mem0[rsp + 0xA0<64>:word64]
	r12d = Mem0[rax + 0x10<64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	goto l0000000000426764
	// succ:  l0000000000426764
l0000000000426941:
	eax = Mem0[rbp + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	r8b = CONVERT(Test(NE,Z), bool, int8)
	goto l00000000004268C0
	// succ:  l00000000004268C0
l000000000042694F:
	Mem0[rbp + 0<64>:word64] = 0<64>
	Mem0[rbp + 8<64>:word32] = 2<32>
	goto l00000000004268C0
	// succ:  l00000000004268C0
fn0000000000426720_exit:


// fn0000000000426970
// Return size: 8
define fn0000000000426970
fn0000000000426970_entry:
	rsp = fp
	// succ:  l0000000000426970
l0000000000426970:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp + 0x108<64>:word64]
	Mem0[rsp + 0xD0<64>:word64] = rcx
	r14 = rdx
	Mem0[rsp + 0xE0<64>:word32] = r8d
	Mem0[rsp + 0xE8<64>:word64] = r9
	SZO = cond(Mem0[rbp + 0x14<64>:byte] & 0x10<8>)
	C = false
	branch Test(EQ,Z) l00000000004269B2
	// succ:  l00000000004269AC l00000000004269B2
l00000000004269AC:
	eax = Mem0[rcx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x14<64>:word32] = eax
	// succ:  l00000000004269B2
l00000000004269B2:
	rax = Mem0[rsp + 0x100<64>:word64]
	SCZO = cond(Mem0[rsp + 0xF0<64>:word64] - rax)
	branch Test(EQ,Z) l0000000000426EA0
	// succ:  l00000000004269C8 l0000000000426EA0
l00000000004269C8:
	rdx = Mem0[rsp + 0xE8<64>:word64]
	rcx = Mem0[rsp + 0xD0<64>:word64]
	call fn0000000000448CF0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	Mem0[rsp + 0x5A<64>:byte] = al
	branch Test(NE,Z) l0000000000426C12
	// succ:  l00000000004269E9 l0000000000426C12
l00000000004269E9:
	r10 = Mem0[rsp + 0x100<64>:word64]
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0xD8<64>:word64] = r14
	Mem0[rsp + 0x52<64>:byte] = 0<8>
	Mem0[rsp + 0x5B<64>:byte] = 0<8>
	Mem0[rsp + 0x53<64>:byte] = 1<8>
	r10 = r10 - r14
	SCZO = cond(r10)
	SZO = cond(r14 & r14)
	C = false
	r14 = Mem0[rsp + 0xF0<64>:word64]
	branch Test(SG,S) l0000000000426A1F
	// succ:  l0000000000426A1B_1 l0000000000426A1F
l0000000000426A1B_1:
	rax = r10
	// succ:  l0000000000426A1F
l0000000000426A1F:
	r15 = rax
	eax = Mem0[rsp + 0xE0<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax | 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x54<64>:word32] = eax
	rax = rsp + 0x60<64>
	Mem0[rsp + 0x48<64>:word64] = rax
	// succ:  l0000000000426A3A
l0000000000426A3A:
	rax = Mem0[rsp + 0xD0<64>:word64]
	rbx = Mem0[rsp + 0xD0<64>:word64]
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	eax = Mem0[rax + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x40<64>:word64] = rax
	rax = rax << 4<64>
	SCZO = cond(rax)
	r12 = rbx + 8<64> + rax
	goto l0000000000426A9A
	// succ:  l0000000000426A9A
l0000000000426A60:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000426E40
	// succ:  l0000000000426A69 l0000000000426E40
l0000000000426A69:
	r8 = Mem0[rsp + 0x60<64>:word64]
	SCZO = cond(rcx - r8)
	branch Test(EQ,Z) l0000000000426DC0
	// succ:  l0000000000426A77 l0000000000426DC0
l0000000000426A77:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000426BAA
	// succ:  l0000000000426A7F l0000000000426BAA
l0000000000426A7F:
	SZO = cond(r8 & r8)
	C = false
	branch Test(NE,Z) l0000000000426BAA
	// succ:  l0000000000426A88 l0000000000426BAA
l0000000000426A88:
	SCZO = cond(r9d - 4<32>)
	branch Test(EQ,Z) l0000000000426E90
	// succ:  l0000000000426A92 l0000000000426E90
l0000000000426A92:
	r13 = r13 + 1<64>
	SCZO = cond(r13)
	r12 = r12 - 0x10<64>
	SCZO = cond(r12)
	// succ:  l0000000000426A9A
l0000000000426A9A:
	SCZO = cond(Mem0[rsp + 0x40<64>:word64] - r13)
	branch Test(EQ,Z) l0000000000426E71
	// succ:  l0000000000426AA5 l0000000000426E71
l0000000000426AA5:
	rdx = Mem0[r12 + 8<64>:word64]
	ecx = Mem0[rbp + 0x14<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	Mem0[rsp + 0x68<64>:word32] = 0<32>
	Mem0[rsp + 0x6C<64>:word32] = 0<32>
	Mem0[rsp + 0x70<64>:word32] = 0<32>
	rax = rdx
	Mem0[rsp + 0x74<64>:word32] = ecx
	r8d = Mem0[rsp + 0xE0<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rax = rax >> 8<64>
	SCZO = cond(rax)
	SZO = cond(dl & 1<8>)
	C = false
	branch Test(EQ,Z) l0000000000426AF1
	// succ:  l0000000000426AE6 l0000000000426AF1
l0000000000426AE6:
	rax = rax + Mem0[r14:word64]
	SCZO = cond(rax)
	r8d = Mem0[rsp + 0x54<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rax = Mem0[rax:word64]
	// succ:  l0000000000426AF1
l0000000000426AF1:
	rax = rax + r14
	SCZO = cond(rax)
	SZO = cond(r15 & r15)
	C = false
	branch Test(EQ,Z) l0000000000426B0B
	// succ:  l0000000000426AF9 l0000000000426B0B
l0000000000426AF9:
	SCZO = cond(rax - r15)
	r9b = CONVERT(Test(UGT,CZ), bool, int8)
	SCZO = cond(r9b - Mem0[rsp + 0x53<64>:byte])
	branch Test(EQ,Z) l0000000000426D71
	// succ:  l0000000000426B0B l0000000000426D71
l0000000000426B0B:
	edx = edx & 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	branch Test(NE,Z) l0000000000426B23
	// succ:  l0000000000426B10 l0000000000426B23
l0000000000426B10:
	SCZO = cond(Mem0[rsp + 0xD8<64>:word64] - 0xFFFFFFFFFFFFFFFE<64>)
	branch Test(EQ,Z) l0000000000426D80
	// succ:  l0000000000426B1F l0000000000426D80
l0000000000426B1F:
	r8d = r8d & 0xFFFFFFFD<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	// succ:  l0000000000426B23
l0000000000426B23:
	rcx = Mem0[r12:word64]
	rdi = Mem0[rsp + 0x48<64>:word64]
	rsi = Mem0[rsp + 0xF8<64>:word64]
	r9 = Mem0[rsp + 0xE8<64>:word64]
	rdx = Mem0[rsp + 0xD8<64>:word64]
	r11 = Mem0[rcx:word64]
	Mem0[rsp + 0x38<64>:word64] = rdi
	rdi = Mem0[rsp + 0x100<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rsi
	Mem0[rsp + 0x20<64>:word64] = rax
	Mem0[rsp + 0x30<64>:word64] = rdi
	call Mem0[r11 + 0x38<64>:word64] (retsize: 8;)
	ebx = Mem0[rsp + 0x70<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	edx = Mem0[rsp + 0x6C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | Mem0[rbp + 0xC<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ebx
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx & 0xFFFFFFFB<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	SCZO = cond(ecx - 2<32>)
	r9d = edx
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rbp + 0xC<64>:word32] = edx
	branch Test(EQ,Z) l0000000000426ED1
	// succ:  l0000000000426B86 l0000000000426ED1
l0000000000426B86:
	SCZO = cond(Mem0[rsp + 0x52<64>:byte] - 0<8>)
	rcx = Mem0[rbp + 0<64>:word64]
	branch Test(EQ,Z) l0000000000426A60
	// succ:  l0000000000426B95 l0000000000426A60
l0000000000426B95:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000426A69
	// succ:  l0000000000426B9E l0000000000426A69
l0000000000426B9E:
	SCZO = cond(Mem0[rsp + 0x60<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000426A88
	// succ:  l0000000000426BAA l0000000000426A88
l0000000000426BAA:
	SCZO = cond(edx - 3<32>)
	edi = Mem0[rbp + 0x10<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	branch Test(LE,SZO) l0000000000426C70
	// succ:  l0000000000426BB6 l0000000000426C70
l0000000000426BB6:
	edx = edx & 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l0000000000426BC5
	// succ:  l0000000000426BBB l0000000000426BC5
l0000000000426BBB:
	SZO = cond(Mem0[rbp + 0x14<64>:byte] & 2<8>)
	C = false
	branch Test(NE,Z) l0000000000426C70
	// succ:  l0000000000426BC5 l0000000000426C70
l0000000000426BC5:
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l0000000000426D63
	// succ:  l0000000000426BCD l0000000000426D63
l0000000000426BCD:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l0000000000426CDE
	// succ:  l0000000000426BD5 l0000000000426CDE
l0000000000426BD5:
	r11d = ebx
	r11 = CONVERT(r11d, word32, uint64)
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	// succ:  l0000000000426BE2
l0000000000426BE2:
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ esi
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 3<32>)
	branch Test(LE,SZO) l0000000000426D43
	// succ:  l0000000000426BEF l0000000000426D43
l0000000000426BEF:
	SCZO = cond(ebx - 3<32>)
	branch Test(GT,SZO) l0000000000426D90
	// succ:  l0000000000426BF8 l0000000000426D90
l0000000000426BF8:
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 2<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000426BFD
l0000000000426BFD:
	SZO = cond(eax & eax)
	C = false
	Mem0[rbp + 0x10<64>:word32] = edi
	branch Test(NE,Z) l0000000000426C52
	// succ:  l0000000000426C04 l0000000000426C52
l0000000000426C04:
	esi = esi & 1<32>
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	branch Test(EQ,Z) l0000000000426C52
	// succ:  l0000000000426C09 l0000000000426C52
l0000000000426C09:
	r9d = Mem0[rbp + 0xC<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	goto l0000000000426A88
	// succ:  l0000000000426A88
l0000000000426C12:
	rax = Mem0[rsp + 0xF0<64>:word64]
	SZO = cond(r14 & r14)
	C = false
	Mem0[rbp + 0<64>:word64] = rax
	eax = Mem0[rsp + 0xE0<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 8<64>:word32] = eax
	branch Test(SG,S) l0000000000426EF0
	// succ:  l0000000000426C31 l0000000000426EF0
l0000000000426C31:
	r14 = r14 + Mem0[rsp + 0xF0<64>:word64]
	SCZO = cond(r14)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rsp + 0x5A<64>:byte] = 0<8>
	SCZO = cond(Mem0[rsp + 0x100<64>:word64] - r14)
	al = CONVERT(Test(EQ,Z), bool, int8)
	eax = SLICE(rax + 1<64> + rax * 4<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x10<64>:word32] = eax
	// succ:  l0000000000426C52
l0000000000426C52:
	eax = CONVERT(Mem0[rsp + 0x5A<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000426970_exit
l0000000000426C70:
	SZO = cond(edi & edi)
	C = false
	esi = edi
	rsi = CONVERT(esi, word32, uint64)
	r11d = ebx
	r11 = CONVERT(r11d, word32, uint64)
	branch Test(LE,SZO) l0000000000426D14
	// succ:  l0000000000426C7D l0000000000426D14
l0000000000426C7D:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(GT,SZO) l0000000000426BE2
	// succ:  l0000000000426C85 l0000000000426BE2
l0000000000426C85:
	SCZO = cond(edi - 3<32>)
	branch Test(LE,SZO) l0000000000426C9E
	// succ:  l0000000000426C8A l0000000000426C9E
l0000000000426C8A:
	SZO = cond(dil & 1<8>)
	C = false
	branch Test(EQ,Z) l0000000000426D00
	// succ:  l0000000000426C90 l0000000000426D00
l0000000000426C90:
	rax = Mem0[rsp + 0xD0<64>:word64]
	SZO = cond(Mem0[rax + 0x10<64>:byte] & 2<8>)
	C = false
	branch Test(EQ,Z) l0000000000426D00
	// succ:  l0000000000426C9E l0000000000426D00
l0000000000426C9E:
	SCZO = cond(Mem0[rsp + 0xD8<64>:word64] - 0<64>)
	r8 = Mem0[rsp + 0x60<64>:word64]
	branch Test(SG,S) l0000000000426F10
	// succ:  l0000000000426CB2 l0000000000426F10
l0000000000426CB2:
	rax = r8
	rax = rax + Mem0[rsp + 0xD8<64>:word64]
	SCZO = cond(rax)
	SCZO = cond(Mem0[rsp + 0x100<64>:word64] - rax)
	branch Test(EQ,Z) l0000000000426FE2
	// succ:  l0000000000426CCB l0000000000426FE2
l0000000000426CCB:
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	edx = edx ^ 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l0000000000426CD0
l0000000000426CD0:
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 2<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(edx - 3<32>)
	branch Test(GT,SZO) l0000000000426BFD
	// succ:  l0000000000426CDE l0000000000426BFD
l0000000000426CDE:
	Mem0[rbp + 0<64>:word64] = 0<64>
	Mem0[rbp + 0x10<64>:word32] = 1<32>
	r9d = Mem0[rbp + 0xC<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x52<64>:byte] = 1<8>
	goto l0000000000426A88
	// succ:  l0000000000426A88
l0000000000426D00:
	eax = edi
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 3<32>)
	branch Test(LE,SZO) l0000000000426CDE
	// succ:  l0000000000426D0A l0000000000426CDE
l0000000000426D0A:
	eax = edi
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 2<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000426BFD
	// succ:  l0000000000426BFD
l0000000000426D14:
	SCZO = cond(ebx - 3<32>)
	branch Test(LE,SZO) l0000000000426DD0
	// succ:  l0000000000426D1D l0000000000426DD0
l0000000000426D1D:
	SZO = cond(bl & 1<8>)
	C = false
	branch Test(EQ,Z) l0000000000426D34
	// succ:  l0000000000426D22 l0000000000426D34
l0000000000426D22:
	rax = Mem0[rsp + 0xD0<64>:word64]
	SZO = cond(Mem0[rax + 0x10<64>:byte] & 2<8>)
	C = false
	branch Test(NE,Z) l0000000000426DD0
	// succ:  l0000000000426D34 l0000000000426DD0
l0000000000426D34:
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 3<32>)
	branch Test(GT,SZO) l0000000000426D90
	// succ:  l0000000000426D43 l0000000000426D90
l0000000000426D43:
	ebx = ebx & esi
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	// succ:  l0000000000426D45
l0000000000426D45:
	SCZO = cond(ebx - 3<32>)
	branch Test(LE,SZO) l0000000000426CDE
	// succ:  l0000000000426D4A l0000000000426CDE
l0000000000426D4A:
	Mem0[rbp + 0<64>:word64] = 0<64>
	Mem0[rbp + 0x10<64>:word32] = 2<32>
	Mem0[rsp + 0x5A<64>:byte] = 1<8>
	goto l0000000000426C52
	// succ:  l0000000000426C52
l0000000000426D63:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l0000000000426DB4
	// succ:  l0000000000426D67 l0000000000426DB4
l0000000000426D67:
	r11d = ebx
	r11 = CONVERT(r11d, word32, uint64)
	esi = edi
	rsi = CONVERT(esi, word32, uint64)
	goto l0000000000426BE2
	// succ:  l0000000000426BE2
l0000000000426D71:
	Mem0[rsp + 0x5B<64>:byte] = 1<8>
	goto l0000000000426A92
	// succ:  l0000000000426A92
l0000000000426D80:
	ecx = ecx & 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	branch Test(EQ,Z) l0000000000426A92
	// succ:  l0000000000426D89 l0000000000426A92
l0000000000426D89:
	goto l0000000000426B1F
	// succ:  l0000000000426B1F
l0000000000426D90:
	r8 = Mem0[rsp + 0x60<64>:word64]
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	eax = eax & 2<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000426D9A
l0000000000426D9A:
	edx = Mem0[rsp + 0x68<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbp + 0<64>:word64] = r8
	esi = r11d
	rsi = CONVERT(esi, word32, uint64)
	edi = ebx
	rdi = CONVERT(edi, word32, uint64)
	Mem0[rsp + 0x52<64>:byte] = 0<8>
	Mem0[rbp + 8<64>:word32] = edx
	goto l0000000000426BFD
	// succ:  l0000000000426BFD
l0000000000426DB4:
	esi = edi
	rsi = CONVERT(esi, word32, uint64)
	// succ:  l0000000000426DB6
l0000000000426DB6:
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	edx = edx ^ 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000426CD0
	// succ:  l0000000000426CD0
l0000000000426DC0:
	eax = Mem0[rsp + 0x68<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	v39 = Mem0[rbp + 8<64>:word32] | eax
	Mem0[rbp + 8<64>:word32] = v39
	SZO = cond(Mem0[rbp + 8<64>:word32])
	C = false
	goto l0000000000426A88
	// succ:  l0000000000426A88
l0000000000426DD0:
	SCZO = cond(Mem0[rsp + 0xD8<64>:word64] - 0<64>)
	branch Test(SG,S) l0000000000426F60
	// succ:  l0000000000426DDF l0000000000426F60
l0000000000426DDF:
	rcx = rcx + Mem0[rsp + 0xD8<64>:word64]
	SCZO = cond(rcx)
	SCZO = cond(Mem0[rsp + 0x100<64>:word64] - rcx)
	branch Test(EQ,Z) l0000000000426FCB
	// succ:  l0000000000426DF5 l0000000000426FCB
l0000000000426DF5:
	SZO = cond(ebx & ebx)
	C = false
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	branch Test(GT,SZO) l0000000000426BE2
	// succ:  l0000000000426E07 l0000000000426BE2
l0000000000426E07:
	r8 = Mem0[rsp + 0x60<64>:word64]
	rax = r8
	rax = rax + Mem0[rsp + 0xD8<64>:word64]
	SCZO = cond(rax)
	SCZO = cond(Mem0[rsp + 0x100<64>:word64] - rax)
	branch Test(NE,Z) l0000000000426CCB
	// succ:  l0000000000426E25 l0000000000426CCB
l0000000000426E25:
	eax = 2<32>
	rax = CONVERT(eax, word32, uint64)
	r11d = 6<32>
	r11 = CONVERT(r11d, word32, uint64)
	ebx = 6<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000426D9A
	// succ:  l0000000000426D9A
l0000000000426E40:
	rdx = Mem0[rsp + 0x60<64>:word64]
	ecx = Mem0[rsp + 0x68<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	Mem0[rbp + 0<64>:word64] = rdx
	Mem0[rbp + 8<64>:word32] = ecx
	branch Test(EQ,Z) l0000000000426E68
	// succ:  l0000000000426E55 l0000000000426E68
l0000000000426E55:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l0000000000426E68
	// succ:  l0000000000426E5A l0000000000426E68
l0000000000426E5A:
	rbx = Mem0[rsp + 0xD0<64>:word64]
	SZO = cond(Mem0[rbx + 0x10<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l0000000000426E95
	// succ:  l0000000000426E68 l0000000000426E95
l0000000000426E68:
	Mem0[rsp + 0x52<64>:byte] = al
	goto l0000000000426A88
	// succ:  l0000000000426A88
l0000000000426E71:
	eax = CONVERT(Mem0[rsp + 0x5B<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x5B<64>:byte] = 1<8>
	al = al & Mem0[rsp + 0x53<64>:byte]
	SZO = cond(al)
	C = false
	Mem0[rsp + 0x53<64>:byte] = 0<8>
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000426A3A
	// succ:  l0000000000426E8C l0000000000426A3A
l0000000000426E8C:
	// succ:  l0000000000426E90
l0000000000426E90:
	eax = CONVERT(Mem0[rsp + 0x52<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000426E95
l0000000000426E95:
	Mem0[rsp + 0x5A<64>:byte] = al
	goto l0000000000426C52
	// succ:  l0000000000426C52
l0000000000426EA0:
	rdx = Mem0[rsp + 0xF8<64>:word64]
	rcx = Mem0[rsp + 0xD0<64>:word64]
	call fn0000000000448CF0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004269C8
	// succ:  l0000000000426EBD l00000000004269C8
l0000000000426EBD:
	eax = Mem0[rsp + 0xE0<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x5A<64>:byte] = 0<8>
	Mem0[rbp + 0xC<64>:word32] = eax
	goto l0000000000426C52
	// succ:  l0000000000426C52
l0000000000426ED1:
	rdx = Mem0[rsp + 0x60<64>:word64]
	Mem0[rbp + 0x10<64>:word32] = ebx
	Mem0[rsp + 0x5A<64>:byte] = al
	Mem0[rbp + 0<64>:word64] = rdx
	edx = Mem0[rsp + 0x68<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbp + 8<64>:word32] = edx
	goto l0000000000426C52
	// succ:  l0000000000426C52
l0000000000426EF0:
	SCZO = cond(r14 - 0xFFFFFFFFFFFFFFFE<64>)
	Mem0[rsp + 0x5A<64>:byte] = 0<8>
	branch Test(NE,Z) l0000000000426C52
	// succ:  l0000000000426EFF l0000000000426C52
l0000000000426EFF:
	Mem0[rbp + 0x10<64>:word32] = 1<32>
	goto l0000000000426C52
	// succ:  l0000000000426C52
l0000000000426F10:
	SCZO = cond(Mem0[rsp + 0xD8<64>:word64] - 0xFFFFFFFFFFFFFFFE<64>)
	branch Test(EQ,Z) l0000000000426DB6
	// succ:  l0000000000426F1F l0000000000426DB6
l0000000000426F1F:
	rax = Mem0[rsp + 0xE8<64>:word64]
	rbx = Mem0[rsp + 0x100<64>:word64]
	r9 = Mem0[rsp + 0xF8<64>:word64]
	rdx = Mem0[rsp + 0xD8<64>:word64]
	rcx = Mem0[rsp + 0xE8<64>:word64]
	rax = Mem0[rax:word64]
	Mem0[rsp + 0x20<64>:word64] = rbx
	call Mem0[rax + 0x40<64>:word64] (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	r11d = eax
	r11 = CONVERT(r11d, word32, uint64)
	goto l0000000000426BE2
	// succ:  l0000000000426BE2
l0000000000426F60:
	SCZO = cond(Mem0[rsp + 0xD8<64>:word64] - 0xFFFFFFFFFFFFFFFE<64>)
	branch Test(EQ,Z) l0000000000426FB4
	// succ:  l0000000000426F6B l0000000000426FB4
l0000000000426F6B:
	rax = Mem0[rsp + 0xE8<64>:word64]
	rsi = Mem0[rsp + 0x100<64>:word64]
	r8 = rcx
	Mem0[rsp + 0x5C<64>:word32] = r11d
	r9 = Mem0[rsp + 0xF8<64>:word64]
	rdx = Mem0[rsp + 0xD8<64>:word64]
	rcx = Mem0[rsp + 0xE8<64>:word64]
	rax = Mem0[rax:word64]
	Mem0[rsp + 0x20<64>:word64] = rsi
	call Mem0[rax + 0x40<64>:word64] (retsize: 8;)
	r11d = Mem0[rsp + 0x5C<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	goto l0000000000426C7D
	// succ:  l0000000000426C7D
l0000000000426FB4:
	SZO = cond(ebx & ebx)
	C = false
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	branch Test(GT,SZO) l0000000000426BE2
	// succ:  l0000000000426FC6 l0000000000426BE2
l0000000000426FC6:
	goto l0000000000426CDE
	// succ:  l0000000000426CDE
l0000000000426FCB:
	SZO = cond(ebx & ebx)
	C = false
	esi = 6<32>
	rsi = CONVERT(esi, word32, uint64)
	edi = 6<32>
	rdi = CONVERT(edi, word32, uint64)
	branch Test(GT,SZO) l0000000000426BE2
	// succ:  l0000000000426FDD l0000000000426BE2
l0000000000426FDD:
	goto l0000000000426BF8
	// succ:  l0000000000426BF8
l0000000000426FE2:
	eax = edi
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 6<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 3<32>)
	branch Test(GT,SZO) l0000000000426E25
	// succ:  l0000000000426FF0 l0000000000426E25
l0000000000426FF0:
	ebx = edi
	rbx = CONVERT(ebx, word32, uint64)
	ebx = ebx & 6<32>
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l0000000000426D45
	// succ:  l0000000000426D45
fn0000000000426970_exit:


// fn0000000000427000
// Return size: 8
define fn0000000000427000
fn0000000000427000_entry:
	rsp = fp
	// succ:  l0000000000427000
l0000000000427000:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	r12 = Mem0[rsp + 0xA0<64>:word64]
	rbx = rcx
	rbp = rdx
	r15 = r8
	r13 = r9
	SCZO = cond(r8 - r12)
	branch Test(EQ,Z) l00000000004270C0
	// succ:  l000000000042702D l00000000004270C0
l000000000042702D:
	r14d = Mem0[rbx + 0x14<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	rax = r14
	rax = rax << 4<64>
	SCZO = cond(rax)
	rbx = rbx + 8<64> + rax
	goto l000000000042708E
	// succ:  l000000000042708E
l0000000000427041:
	rax = Mem0[rbx + 8<64>:word64]
	SZO = cond(al & 2<8>)
	C = false
	branch Test(EQ,Z) l0000000000427086
	// succ:  l0000000000427049 l0000000000427086
l0000000000427049:
	r10 = rax
	r10 = r10 >> 8<64>
	SCZO = cond(r10)
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsi = rax
	branch Test(EQ,Z) l000000000042705E
	// succ:  l0000000000427058 l000000000042705E
l0000000000427058:
	SCZO = cond(rbp - 0xFFFFFFFFFFFFFFFD<64>)
	branch Test(EQ,Z) l0000000000427086
	// succ:  l000000000042705E l0000000000427086
l000000000042705E:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000427069
	// succ:  l0000000000427063 l0000000000427069
l0000000000427063:
	r10 = r10 + Mem0[r15:word64]
	SCZO = cond(r10)
	r10 = Mem0[r10:word64]
	// succ:  l0000000000427069
l0000000000427069:
	rcx = Mem0[rbx:word64]
	r9 = r13
	r8 = r15 + r10
	rdx = rbp
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x20<64>:word64] = r12
	call Mem0[rax + 0x40<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 3<32>)
	branch Test(GT,SZO) l00000000004270B0
	// succ:  l0000000000427086 l00000000004270B0
l0000000000427086:
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	rbx = rbx - 0x10<64>
	SCZO = cond(rbx)
	// succ:  l000000000042708E
l000000000042708E:
	SCZO = cond(rdi - r14)
	branch Test(NE,Z) l0000000000427041
	// succ:  l0000000000427093 l0000000000427041
l0000000000427093:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000427098
l0000000000427098:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000427000_exit
l00000000004270B0:
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx | 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l00000000004270BB
	// succ:  l00000000004270B8_1 l00000000004270BB
l00000000004270B8_1:
	eax = edx
	// succ:  l00000000004270BB
l00000000004270BB:
	goto l0000000000427098
	// succ:  l0000000000427098
l00000000004270C0:
	rdx = r9
	call fn0000000000448CF0 (retsize: 8;)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	eax = 6<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l0000000000427098
	// succ:  l00000000004270D3 l0000000000427098
l00000000004270D3:
	goto l000000000042702D
	// succ:  l000000000042702D
fn0000000000427000_exit:


// fn00000000004270E0
// Return size: 8
define fn00000000004270E0
fn00000000004270E0_entry:
	rsp = fp
	// succ:  l00000000004270E0
l00000000004270E0:
	rax = 0x000000000048E0A0<p64>
	return
	// succ:  fn00000000004270E0_exit
fn00000000004270E0_exit:


// fn00000000004270F0
// Return size: 8
define fn00000000004270F0
fn00000000004270F0_entry:
	rsp = fp
	// succ:  l00000000004270F0
l00000000004270F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rdi = rsp + 0x2F<64>
	rbx = rcx
	esi = r8d
	rsi = CONVERT(esi, word32, uint64)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rdi
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(esi - 2<32>)
	Mem0[rbx:word64] = rax
	branch Test(EQ,Z) l00000000004271B5
	// succ:  l000000000042711A l00000000004271B5
l000000000042711A:
	branch Test(LE,SZO) l0000000000427170
	// succ:  l000000000042711C l0000000000427170
l000000000042711C:
	SCZO = cond(esi - 3<32>)
	branch Test(EQ,Z) l0000000000427150
	// succ:  l0000000000427121 l0000000000427150
l0000000000427121:
	SCZO = cond(esi - 4<32>)
	branch Test(NE,Z) l0000000000427195
	// succ:  l0000000000427126 l0000000000427195
l0000000000427126:
	rdx = 0x000000000048E0A7<p64>
	r8d = 0xE<32>
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rbx
	call fn00000000004511C0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004270F0_exit
l0000000000427150:
	rdx = 0x000000000048E0E9<p64>
	r8d = 0x13<32>
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rbx
	call fn00000000004511C0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004270F0_exit
l0000000000427170:
	SCZO = cond(esi - 1<32>)
	branch Test(NE,Z) l0000000000427195
	// succ:  l0000000000427175 l0000000000427195
l0000000000427175:
	rdx = 0x000000000048E0B6<p64>
	r8d = 0x18<32>
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rbx
	call fn00000000004511C0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004270F0_exit
l0000000000427195:
	rdx = 0x000000000048E0FD<p64>
	r8d = 0xD<32>
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rbx
	call fn00000000004511C0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004270F0_exit
l00000000004271B5:
	rdx = 0x000000000048E0CF<p64>
	r8d = 0x19<32>
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rbx
	call fn00000000004511C0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004270F0_exit
fn00000000004270F0_exit:


// fn00000000004271F0
// Return size: 8
define fn00000000004271F0
fn00000000004271F0_entry:
	rsp = fp
	// succ:  l00000000004271F0
l00000000004271F0:
	rax = 0x000000000048E098<p64>
	return
	// succ:  fn00000000004271F0_exit
fn00000000004271F0_exit:


// fn0000000000427200
// Return size: 8
define fn0000000000427200
fn0000000000427200_entry:
	rsp = fp
	// succ:  l0000000000427200
l0000000000427200:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rbx = rcx
	ecx = r8d
	rcx = CONVERT(ecx, word32, uint64)
	rax = strerror(rcx)
	r8 = rsp + 0x2F<64>
	rdx = rax
	rcx = rbx
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000427200_exit
fn0000000000427200_exit:


// fn0000000000427230
// Return size: 8
define fn0000000000427230
fn0000000000427230_entry:
	rsp = fp
	// succ:  l0000000000427230
l0000000000427230:
	rax = 0x000000000048E090<p64>
	return
	// succ:  fn0000000000427230_exit
fn0000000000427230_exit:


// fn0000000000427240
// Return size: 8
define fn0000000000427240
fn0000000000427240_entry:
	rsp = fp
	// succ:  l0000000000427240
l0000000000427240:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rbx = rcx
	ecx = r8d
	rcx = CONVERT(ecx, word32, uint64)
	rax = strerror(rcx)
	r8 = rsp + 0x2F<64>
	rdx = rax
	rcx = rbx
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000427240_exit
fn0000000000427240_exit:


// fn0000000000427270
// Return size: 8
define fn0000000000427270
fn0000000000427270_entry:
	rsp = fp
	// succ:  l0000000000427270
l0000000000427270:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = 0x1FFFFFFFFFFFFFFF<64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000427270_exit
fn0000000000427270_exit:


// fn0000000000427290
// Return size: 8
define fn0000000000427290
fn0000000000427290_entry:
	rsp = fp
	// succ:  l0000000000427290
l0000000000427290:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = 0xFFFFFFFFFFFFFFFF<64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000427290_exit
fn0000000000427290_exit:


// fn00000000004272B0
// Return size: 8
define fn00000000004272B0
fn00000000004272B0_entry:
	rsp = fp
	// succ:  l00000000004272B0
l00000000004272B0:
	rax = 0x000000000048D7C0<p64>
	return
	// succ:  fn00000000004272B0_exit
fn00000000004272B0_exit:


// fn00000000004272C0
// Return size: 8
define fn00000000004272C0
fn00000000004272C0_entry:
	rsp = fp
	// succ:  l00000000004272C0
l00000000004272C0:
	rax = 0x000000000048E340<p64>
	return
	// succ:  fn00000000004272C0_exit
fn00000000004272C0_exit:


// fn00000000004272D0
// Return size: 8
define fn00000000004272D0
fn00000000004272D0_entry:
	rsp = fp
	// succ:  l00000000004272D0
l00000000004272D0:
	rax = 0x000000000048D7E8<p64>
	return
	// succ:  fn00000000004272D0_exit
fn00000000004272D0_exit:


// fn00000000004272E0
// Return size: 8
define fn00000000004272E0
fn00000000004272E0_entry:
	rsp = fp
	// succ:  l00000000004272E0
l00000000004272E0:
	rax = 0x000000000048E310<p64>
	return
	// succ:  fn00000000004272E0_exit
fn00000000004272E0_exit:


// fn00000000004272F0
// Return size: 8
define fn00000000004272F0
fn00000000004272F0_entry:
	rsp = fp
	// succ:  l00000000004272F0
l00000000004272F0:
	rcx = Mem0[rcx:word64]
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(rdx - rcx)
	branch Test(ULT,C) l000000000042730B
	// succ:  l00000000004272FD l000000000042730B
l00000000004272FD:
	rax = Mem0[rcx - 0x18<64>:word64]
	rax = rcx + rax * 2<64>
	SCZO = cond(rdx - rax)
	al = CONVERT(Test(UGT,CZ), bool, int8)
	// succ:  l000000000042730B
l000000000042730B:
	return
	// succ:  fn00000000004272F0_exit
fn00000000004272F0_exit:


// fn0000000000427310
// Return size: 0
define fn0000000000427310
fn0000000000427310_entry:
	rsp = fp
	// succ:  l0000000000427310
l0000000000427310:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = rdx
	rbx = rdx
	Mem0[rsp + 0x28<64>:word64] = r8
	eax = wcslen(rcx)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	rdx = rbx
	rcx = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000042733D_thunk_fn0000000000427350
l000000000042733D_thunk_fn0000000000427350:
	call fn0000000000427350 (retsize: 0;)
	return
	// succ:  fn0000000000427310_exit
fn0000000000427310_exit:


// fn0000000000427350
// Return size: 0
define fn0000000000427350
fn0000000000427350_entry:
	rsp = fp
	// succ:  l0000000000427350
l0000000000427350:
	r11 = Mem0[rcx:word64]
	SZO = cond(r9 & r9)
	C = false
	rax = Mem0[r11 - 0x18<64>:word64]
	branch Test(EQ,Z) l0000000000427361
	// succ:  l000000000042735C l0000000000427361
l000000000042735C:
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000042736A
	// succ:  l0000000000427361 l000000000042736A
l0000000000427361:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	// succ:  l0000000000427368
l0000000000427368:
	return
	// succ:  fn0000000000427350_exit
l000000000042736A:
	rax = rax - 1<64>
	SCZO = cond(rax)
	SCZO = cond(r8 - rax)
	branch Test(UGT,CZ) l0000000000427375
	// succ:  l0000000000427371_1 l0000000000427375
l0000000000427371_1:
	rax = r8
	// succ:  l0000000000427375
l0000000000427375:
	SZO = cond(rdx & rdx)
	C = false
	r10d = CONVERT(Mem0[r11 + rax * 2<64>:word16], word16, word32)
	r10 = CONVERT(r10d, word32, uint64)
	branch Test(EQ,Z) l0000000000427395
	// succ:  l000000000042737F l0000000000427395
l000000000042737F:
	r8 = r9
	rcx = rdx
	// succ:  l0000000000427385
l0000000000427385:
	SCZO = cond(r10w - Mem0[rcx:word16])
	branch Test(EQ,Z) l0000000000427368
	// succ:  l000000000042738B l0000000000427368
l000000000042738B:
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	r8 = r8 - 1<64>
	SCZO = cond(r8)
	branch Test(NE,Z) l0000000000427385
	// succ:  l0000000000427395 l0000000000427385
l0000000000427395:
	SZO = cond(rax & rax)
	C = false
	rcx = rax - 1<64>
	branch Test(EQ,Z) l0000000000427361
	// succ:  l000000000042739E l0000000000427361
l000000000042739E:
	rax = rcx
	goto l0000000000427375
	// succ:  l0000000000427375
fn0000000000427350_exit:


// fn00000000004273B0
// Return size: 8
define fn00000000004273B0
fn00000000004273B0_entry:
	rsp = fp
	// succ:  l00000000004273B0
l00000000004273B0:
	rdx = Mem0[rdx:word64]
	r9 = Mem0[rdx - 0x18<64>:word64]
	// succ:  l00000000004273B7_thunk_fn0000000000427350
l00000000004273B7_thunk_fn0000000000427350:
	call fn0000000000427350 (retsize: 0;)
	return
	// succ:  fn00000000004273B0_exit
fn00000000004273B0_exit:


// fn00000000004273C0
// Return size: 8
define fn00000000004273C0
fn00000000004273C0_entry:
	rsp = fp
	// succ:  l00000000004273C0
l00000000004273C0:
	r9 = Mem0[rcx:word64]
	rax = 0xFFFFFFFFFFFFFFFF<64>
	rcx = Mem0[r9 - 0x18<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l00000000004273D5
	// succ:  l00000000004273D3 l00000000004273D5
l00000000004273D3:
	return
	// succ:  fn00000000004273C0_exit
l00000000004273D5:
	rax = rax + rcx
	SCZO = cond(rax)
	SCZO = cond(r8 - rax)
	branch Test(UGT,CZ) l00000000004273DF
	// succ:  l00000000004273DB_1 l00000000004273DF
l00000000004273DB_1:
	rax = r8
	// succ:  l00000000004273DF
l00000000004273DF:
	goto l00000000004273F0
	// succ:  l00000000004273F0
l00000000004273E1:
	rcx = rax - 1<64>
	SCZO = cond(dx - Mem0[(r9 + 2<64>) + rcx * 2<64>:word16])
	branch Test(EQ,Z) l00000000004273D3
	// succ:  l00000000004273ED l00000000004273D3
l00000000004273ED:
	rax = rcx
	// succ:  l00000000004273F0
l00000000004273F0:
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l00000000004273E1
	// succ:  l00000000004273F6 l00000000004273E1
l00000000004273F6:
	return
	// succ:  fn00000000004273C0_exit
fn00000000004273C0_exit:


// fn0000000000427400
// Return size: 0
define fn0000000000427400
fn0000000000427400_entry:
	rsp = fp
	// succ:  l0000000000427400
l0000000000427400:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = rdx
	rbx = rdx
	Mem0[rsp + 0x28<64>:word64] = r8
	eax = wcslen(rcx)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	rdx = rbx
	rcx = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000042742D_thunk_fn0000000000427440
l000000000042742D_thunk_fn0000000000427440:
	call fn0000000000427440 (retsize: 0;)
	return
	// succ:  fn0000000000427400_exit
fn0000000000427400_exit:


// fn0000000000427440
// Return size: 0
define fn0000000000427440
fn0000000000427440_entry:
	rsp = fp
	// succ:  l0000000000427440
l0000000000427440:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	SZO = cond(r9 & r9)
	C = false
	branch Test(EQ,Z) l0000000000427492
	// succ:  l000000000042744C l0000000000427492
l000000000042744C:
	r11 = Mem0[rcx:word64]
	r10 = Mem0[r11 - 0x18<64>:word64]
	SCZO = cond(r8 - r10)
	branch Test(UGE,C) l0000000000427494
	// succ:  l0000000000427458 l0000000000427494
l0000000000427458:
	r9 = r9 - 1<64>
	SCZO = cond(r9)
	// succ:  l0000000000427460
l0000000000427460:
	SZO = cond(rdx & rdx)
	C = false
	ecx = CONVERT(Mem0[r11 + r8 * 2<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(EQ,Z) l0000000000427482
	// succ:  l000000000042746A l0000000000427482
l000000000042746A:
	SCZO = cond(cx - Mem0[rdx:word16])
	branch Test(EQ,Z) l00000000004274A0
	// succ:  l000000000042746F l00000000004274A0
l000000000042746F:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000042747D
	// succ:  l000000000042747D
l0000000000427473:
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(cx - Mem0[rdx + rax * 2<64>:word16])
	branch Test(EQ,Z) l00000000004274A0
	// succ:  l000000000042747D l00000000004274A0
l000000000042747D:
	SCZO = cond(rax - r9)
	branch Test(NE,Z) l0000000000427473
	// succ:  l0000000000427482 l0000000000427473
l0000000000427482:
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	SCZO = cond(r8 - r10)
	branch Test(ULT,C) l0000000000427460
	// succ:  l000000000042748B l0000000000427460
l000000000042748B:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	// succ:  l0000000000427492
l0000000000427492:
	return
	// succ:  fn0000000000427440_exit
l0000000000427494:
	return
	// succ:  fn0000000000427440_exit
l00000000004274A0:
	rax = r8
	return
	// succ:  fn0000000000427440_exit
fn0000000000427440_exit:


// fn00000000004274B0
// Return size: 8
define fn00000000004274B0
fn00000000004274B0_entry:
	rsp = fp
	// succ:  l00000000004274B0
l00000000004274B0:
	rdx = Mem0[rdx:word64]
	r9 = Mem0[rdx - 0x18<64>:word64]
	// succ:  l00000000004274B7_thunk_fn0000000000427440
l00000000004274B7_thunk_fn0000000000427440:
	call fn0000000000427440 (retsize: 0;)
	return
	// succ:  fn00000000004274B0_exit
fn00000000004274B0_exit:


// fn00000000004274C0
// Return size: 8
define fn00000000004274C0
fn00000000004274C0_entry:
	rsp = fp
	// succ:  l00000000004274C0
l00000000004274C0:
	edx = CONVERT(dx, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l00000000004274C3_thunk_fn0000000000427940
l00000000004274C3_thunk_fn0000000000427940:
	call fn0000000000427940 (retsize: 0;)
	return
	// succ:  fn00000000004274C0_exit
fn00000000004274C0_exit:


// fn00000000004274D0
// Return size: 8
define fn00000000004274D0
fn00000000004274D0_entry:
	rsp = fp
	// succ:  l00000000004274D0
l00000000004274D0:
	rax = rcx
	return
	// succ:  fn00000000004274D0_exit
fn00000000004274D0_exit:


// fn00000000004274E0
// Return size: 8
define fn00000000004274E0
fn00000000004274E0_entry:
	rsp = fp
	// succ:  l00000000004274E0
l00000000004274E0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = Mem0[rcx:word64]
	rax = 0x1FFFFFFFFFFFFFFC<64>
	rax = rax - Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(rax)
	rdx = rdx + rax
	SCZO = cond(rdx)
	SCZO = cond(rdx - r8)
	branch Test(ULT,C) l0000000000427502
	// succ:  l00000000004274FD l0000000000427502
l00000000004274FD:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004274E0_exit
l0000000000427502:
	rcx = r9
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l000000000042750F_thunk_fn0000000000427510
l000000000042750F_thunk_fn0000000000427510:
	call fn0000000000427510 (retsize: 0;)
	return
	// succ:  fn00000000004274E0_exit
fn00000000004274E0_exit:


// fn0000000000427510
// Return size: 0
define fn0000000000427510
fn0000000000427510_entry:
	rsp = fp
	// succ:  l0000000000427510
l0000000000427510:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = rdx
	rbx = rdx
	Mem0[rsp + 0x28<64>:word64] = r8
	eax = wcslen(rcx)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	rdx = rbx
	rcx = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000042753D_thunk_fn0000000000427550
l000000000042753D_thunk_fn0000000000427550:
	call fn0000000000427550 (retsize: 0;)
	return
	// succ:  fn0000000000427510_exit
fn0000000000427510_exit:


// fn0000000000427550
// Return size: 0
define fn0000000000427550
fn0000000000427550_entry:
	rsp = fp
	// succ:  l0000000000427550
l0000000000427550:
	r11 = Mem0[rcx:word64]
	rax = 0xFFFFFFFFFFFFFFFF<64>
	rcx = Mem0[r11 - 0x18<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000427565
	// succ:  l0000000000427563 l0000000000427565
l0000000000427563:
	return
	// succ:  fn0000000000427550_exit
l0000000000427565:
	rcx = rcx + rax
	SCZO = cond(rcx)
	r10 = r9 - 1<64>
	SCZO = cond(r8 - rcx)
	rax = rcx
	branch Test(UGT,CZ) l0000000000427576
	// succ:  l0000000000427572_1 l0000000000427576
l0000000000427572_1:
	rax = r8
	// succ:  l0000000000427576
l0000000000427576:
	// succ:  l0000000000427580
l0000000000427580:
	SZO = cond(rdx & rdx)
	C = false
	r8d = CONVERT(Mem0[r11 + rax * 2<64>:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	branch Test(EQ,Z) l0000000000427563
	// succ:  l000000000042758A l0000000000427563
l000000000042758A:
	SZO = cond(r9 & r9)
	C = false
	branch Test(EQ,Z) l0000000000427563
	// succ:  l000000000042758F l0000000000427563
l000000000042758F:
	SCZO = cond(r8w - Mem0[rdx:word16])
	branch Test(EQ,Z) l00000000004275B2
	// succ:  l0000000000427595 l00000000004275B2
l0000000000427595:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	goto l00000000004275AB
	// succ:  l00000000004275AB
l00000000004275A0:
	rcx = rcx + 1<64>
	SCZO = cond(rcx)
	SCZO = cond(r8w - Mem0[rdx + rcx * 2<64>:word16])
	branch Test(EQ,Z) l00000000004275B2
	// succ:  l00000000004275AB l00000000004275B2
l00000000004275AB:
	SCZO = cond(rcx - r10)
	branch Test(NE,Z) l00000000004275A0
	// succ:  l00000000004275B0 l00000000004275A0
l00000000004275B0:
	return
	// succ:  fn0000000000427550_exit
l00000000004275B2:
	SZO = cond(rax & rax)
	C = false
	rcx = rax - 1<64>
	branch Test(EQ,Z) l00000000004275C0
	// succ:  l00000000004275BB l00000000004275C0
l00000000004275BB:
	rax = rcx
	goto l0000000000427580
	// succ:  l0000000000427580
l00000000004275C0:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	return
	// succ:  fn0000000000427550_exit
fn0000000000427550_exit:


// fn00000000004275D0
// Return size: 8
define fn00000000004275D0
fn00000000004275D0_entry:
	rsp = fp
	// succ:  l00000000004275D0
l00000000004275D0:
	rdx = Mem0[rdx:word64]
	r9 = Mem0[rdx - 0x18<64>:word64]
	// succ:  l00000000004275D7_thunk_fn0000000000427550
l00000000004275D7_thunk_fn0000000000427550:
	call fn0000000000427550 (retsize: 0;)
	return
	// succ:  fn00000000004275D0_exit
fn00000000004275D0_exit:


// fn00000000004275E0
// Return size: 8
define fn00000000004275E0
fn00000000004275E0_entry:
	rsp = fp
	// succ:  l00000000004275E0
l00000000004275E0:
	r9 = Mem0[rcx:word64]
	rax = 0xFFFFFFFFFFFFFFFF<64>
	rcx = Mem0[r9 - 0x18<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l00000000004275F5
	// succ:  l00000000004275F3 l00000000004275F5
l00000000004275F3:
	return
	// succ:  fn00000000004275E0_exit
l00000000004275F5:
	rcx = rcx + rax
	SCZO = cond(rcx)
	SCZO = cond(r8 - rcx)
	rax = rcx
	branch Test(UGT,CZ) l0000000000427602
	// succ:  l00000000004275FE_1 l0000000000427602
l00000000004275FE_1:
	rax = r8
	// succ:  l0000000000427602
l0000000000427602:
	goto l0000000000427610
	// succ:  l0000000000427610
l0000000000427604:
	SZO = cond(rax & rax)
	C = false
	rcx = rax - 1<64>
	branch Test(EQ,Z) l0000000000427620
	// succ:  l000000000042760D l0000000000427620
l000000000042760D:
	rax = rcx
	// succ:  l0000000000427610
l0000000000427610:
	SCZO = cond(Mem0[r9 + rax * 2<64>:word16] - dx)
	branch Test(EQ,Z) l0000000000427604
	// succ:  l0000000000427617 l0000000000427604
l0000000000427617:
	goto l00000000004275F3
	// succ:  l00000000004275F3
l0000000000427620:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	return
	// succ:  fn00000000004275E0_exit
fn00000000004275E0_exit:


// fn0000000000427630
// Return size: 0
define fn0000000000427630
fn0000000000427630_entry:
	rsp = fp
	// succ:  l0000000000427630
l0000000000427630:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = rdx
	rbx = rdx
	Mem0[rsp + 0x28<64>:word64] = r8
	eax = wcslen(rcx)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	rdx = rbx
	rcx = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000042765D_thunk_fn0000000000427670
l000000000042765D_thunk_fn0000000000427670:
	call fn0000000000427670 (retsize: 0;)
	return
	// succ:  fn0000000000427630_exit
fn0000000000427630_exit:


// fn0000000000427670
// Return size: 0
define fn0000000000427670
fn0000000000427670_entry:
	rsp = fp
	// succ:  l0000000000427670
l0000000000427670:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rbx = Mem0[rcx:word64]
	rax = 0xFFFFFFFFFFFFFFFF<64>
	r11 = Mem0[rbx - 0x18<64>:word64]
	SCZO = cond(r8 - r11)
	branch Test(UGE,C) l00000000004276B4
	// succ:  l0000000000427684 l00000000004276B4
l0000000000427684:
	SZO = cond(rdx & rdx)
	C = false
	r10d = CONVERT(Mem0[rbx + r8 * 2<64>:word16], word16, word32)
	r10 = CONVERT(r10d, word32, uint64)
	branch Test(EQ,Z) l00000000004276B1
	// succ:  l000000000042768E l00000000004276B1
l000000000042768E:
	rcx = r9 + rax
	// succ:  l0000000000427692
l0000000000427692:
	SZO = cond(r9 & r9)
	C = false
	branch Test(EQ,Z) l00000000004276B1
	// succ:  l0000000000427697 l00000000004276B1
l0000000000427697:
	SCZO = cond(r10w - Mem0[rdx:word16])
	branch Test(EQ,Z) l00000000004276C0
	// succ:  l000000000042769D l00000000004276C0
l000000000042769D:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004276AC
	// succ:  l00000000004276AC
l00000000004276A1:
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(r10w - Mem0[rdx + rax * 2<64>:word16])
	branch Test(EQ,Z) l00000000004276C0
	// succ:  l00000000004276AC l00000000004276C0
l00000000004276AC:
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l00000000004276A1
	// succ:  l00000000004276B1 l00000000004276A1
l00000000004276B1:
	rax = r8
	// succ:  l00000000004276B4
l00000000004276B4:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000427670_exit
l00000000004276C0:
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	SCZO = cond(r11 - r8)
	branch Test(ULE,CZ) l00000000004276D0
	// succ:  l00000000004276C9 l00000000004276D0
l00000000004276C9:
	r10d = CONVERT(Mem0[rbx + r8 * 2<64>:word16], word16, word32)
	r10 = CONVERT(r10d, word32, uint64)
	goto l0000000000427692
	// succ:  l0000000000427692
l00000000004276D0:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000427670_exit
fn0000000000427670_exit:


// fn00000000004276E0
// Return size: 8
define fn00000000004276E0
fn00000000004276E0_entry:
	rsp = fp
	// succ:  l00000000004276E0
l00000000004276E0:
	rdx = Mem0[rdx:word64]
	r9 = Mem0[rdx - 0x18<64>:word64]
	// succ:  l00000000004276E7_thunk_fn0000000000427670
l00000000004276E7_thunk_fn0000000000427670:
	call fn0000000000427670 (retsize: 0;)
	return
	// succ:  fn00000000004276E0_exit
fn00000000004276E0_exit:


// fn00000000004276F0
// Return size: 8
define fn00000000004276F0
fn00000000004276F0_entry:
	rsp = fp
	// succ:  l00000000004276F0
l00000000004276F0:
	rcx = Mem0[rcx:word64]
	rax = 0xFFFFFFFFFFFFFFFF<64>
	r9 = Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(r8 - r9)
	branch Test(UGE,C) l0000000000427727
	// succ:  l0000000000427703 l0000000000427727
l0000000000427703:
	eax = CONVERT(Mem0[rcx + r8 * 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - dx)
	branch Test(EQ,Z) l0000000000427717
	// succ:  l000000000042770D l0000000000427717
l000000000042770D:
	goto l0000000000427730
	// succ:  l0000000000427730
l0000000000427710:
	SCZO = cond(Mem0[rcx + r8 * 2<64>:word16] - ax)
	branch Test(NE,Z) l0000000000427730
	// succ:  l0000000000427717 l0000000000427730
l0000000000427717:
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	SCZO = cond(r8 - r9)
	branch Test(ULT,C) l0000000000427710
	// succ:  l0000000000427720 l0000000000427710
l0000000000427720:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	// succ:  l0000000000427727
l0000000000427727:
	return
	// succ:  fn00000000004276F0_exit
l0000000000427730:
	rax = r8
	return
	// succ:  fn00000000004276F0_exit
fn00000000004276F0_exit:


// fn0000000000427740
// Return size: 8
define fn0000000000427740
fn0000000000427740_entry:
	rsp = fp
	// succ:  l0000000000427740
l0000000000427740:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r8 = Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx - r8)
	branch Test(UGE,C) l0000000000427759
	// succ:  l0000000000427750 l0000000000427759
l0000000000427750:
	rax = rax + rdx * 2<64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000427740_exit
l0000000000427759:
	rcx = 0x000000000048D9A8<p64>
	call fn0000000000471560 (retsize: 8;)
	// succ:  l000000000042776F_thunk_fn0000000000427770
l000000000042776F_thunk_fn0000000000427770:
	call fn0000000000427770 (retsize: 0;)
	return
	// succ:  fn0000000000427740_exit
fn0000000000427740_exit:


// fn0000000000427770
// Return size: 8
define fn0000000000427770
fn0000000000427770_entry:
	rsp = fp
	// succ:  l0000000000427770
l0000000000427770:
	rax = Mem0[rcx:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	rax = rax + rdx * 2<64>
	return
	// succ:  fn0000000000427770_exit
fn0000000000427770_exit:


// fn0000000000427780
// Return size: 8
define fn0000000000427780
fn0000000000427780_entry:
	rsp = fp
	// succ:  l0000000000427780
l0000000000427780:
	eax = Mem0[rcx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax >>u 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	return
	// succ:  fn0000000000427780_exit
fn0000000000427780_exit:


// fn0000000000427790
// Return size: 8
define fn0000000000427790
fn0000000000427790_entry:
	rsp = fp
	// succ:  l0000000000427790
l0000000000427790:
	eax = Mem0[rcx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	al = CONVERT(Test(GT,SZO), bool, int8)
	return
	// succ:  fn0000000000427790_exit
fn0000000000427790_exit:


// fn00000000004277A0
// Return size: 8
define fn00000000004277A0
fn00000000004277A0_entry:
	rsp = fp
	// succ:  l00000000004277A0
l00000000004277A0:
	rax = Mem0[rcx:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	rax = rax - 2<64> + rdx * 2<64>
	return
	// succ:  fn00000000004277A0_exit
fn00000000004277A0_exit:


// fn00000000004277B0
// Return size: 8
define fn00000000004277B0
fn00000000004277B0_entry:
	rsp = fp
	// succ:  l00000000004277B0
l00000000004277B0:
	rax = Mem0[rcx:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	rax = rax + rdx * 2<64>
	return
	// succ:  fn00000000004277B0_exit
fn00000000004277B0_exit:


// fn00000000004277C0
// Return size: 0
define fn00000000004277C0
fn00000000004277C0_entry:
	rsp = fp
	// succ:  l00000000004277C0
l00000000004277C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = r9
	r9 = Mem0[rcx:word64]
	r10 = rdx
	rbx = Mem0[r9 - 0x18<64>:word64]
	SCZO = cond(rax - rbx)
	branch Test(UGT,CZ) l0000000000427815
	// succ:  l00000000004277D7 l0000000000427815
l00000000004277D7:
	rbx = rbx - rax
	SCZO = cond(rbx)
	SCZO = cond(rbx - r8)
	branch Test(ULE,CZ) l00000000004277E1
	// succ:  l00000000004277DD_1 l00000000004277E1
l00000000004277DD_1:
	rbx = r8
	// succ:  l00000000004277E1
l00000000004277E1:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l00000000004277FC
	// succ:  l00000000004277E6 l00000000004277FC
l00000000004277E6:
	SCZO = cond(rbx - 1<64>)
	rdx = r9 + rax * 2<64>
	branch Test(EQ,Z) l0000000000427805
	// succ:  l00000000004277F0 l0000000000427805
l00000000004277F0:
	r8 = rbx + rbx
	rcx = r10
	rax = memcpy(rcx, rdx, r8)
	// succ:  l00000000004277FC
l00000000004277FC:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004277C0_exit
l0000000000427805:
	eax = CONVERT(Mem0[rdx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r10:word16] = ax
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004277C0_exit
l0000000000427815:
	rdx = 0x000000000048D9EC<p64>
	rcx = 0x000000000048D970<p64>
	r9 = rbx
	r8 = rax
	call fn0000000000471560 (retsize: 8;)
fn00000000004277C0_exit:


// fn0000000000427830
// Return size: 8
define fn0000000000427830
fn0000000000427830_entry:
	rsp = fp
	// succ:  l0000000000427830
l0000000000427830:
	rax = Mem0[rcx:word64]
	return
	// succ:  fn0000000000427830_exit
fn0000000000427830_exit:


// fn0000000000427840
// Return size: 8
define fn0000000000427840
fn0000000000427840_entry:
	rsp = fp
	// succ:  l0000000000427840
l0000000000427840:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = rdx
	rbx = rdx
	Mem0[rsp + 0x28<64>:word64] = r8
	eax = wcslen(rcx)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	rdx = rbx
	rcx = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000042786D_thunk_fn0000000000427880
l000000000042786D_thunk_fn0000000000427880:
	call fn0000000000427880 (retsize: 0;)
	return
	// succ:  fn0000000000427840_exit
fn0000000000427840_exit:


// fn0000000000427880
// Return size: 8
define fn0000000000427880
fn0000000000427880_entry:
	rsp = fp
	// succ:  l0000000000427880
l0000000000427880:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	r11 = Mem0[rcx:word64]
	SZO = cond(r9 & r9)
	C = false
	rcx = Mem0[r11 - 0x18<64>:word64]
	branch Test(NE,Z) l00000000004278A5
	goto l0000000000427891
	// succ:  l0000000000427891 l00000000004278A5
l0000000000427880:
l0000000000427891:
	SCZO = cond(r8 - rcx)
	rax = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(UGT,CZ) l000000000042789F
	// succ:  l000000000042789B_1 l000000000042789F
l000000000042789B_1:
	rax = r8
	// succ:  l000000000042789F
l000000000042789F:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000427880_exit
l00000000004278A5:
	SCZO = cond(r9 - rcx)
	rax = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(UGT,CZ) l000000000042789F
	// succ:  l00000000004278B1 l000000000042789F
l00000000004278B1:
	rcx = rcx - r9
	SCZO = cond(rcx)
	SCZO = cond(r8 - rcx)
	r10 = rcx
	branch Test(UGT,CZ) l000000000042789F
	// succ:  l00000000004278BC l000000000042789F
l00000000004278BC:
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	esi = CONVERT(Mem0[rdx:word16], word16, word32)
	rsi = CONVERT(esi, word32, uint64)
	r9 = r9 + rax
	SCZO = cond(r9)
	rcx = r11 + r8 * 2<64>
	rdi = rdx + 2<64>
	goto l00000000004278DD
	// succ:  l00000000004278DD
l00000000004278D0:
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	SCZO = cond(r11 - r10)
	branch Test(UGT,CZ) l0000000000427920
	// succ:  l00000000004278DD l0000000000427920
l00000000004278DD:
	SCZO = cond(Mem0[rcx - 2<64>:word16] - si)
	rax = r8 - 1<64>
	r11 = r8
	branch Test(NE,Z) l00000000004278D0
	// succ:  l00000000004278EA l00000000004278D0
l00000000004278EA:
	SCZO = cond(rdi - rcx)
	rbx = r9
	branch Test(EQ,Z) l000000000042789F
	// succ:  l00000000004278F2 l000000000042789F
l00000000004278F2:
	SZO = cond(r9 & r9)
	C = false
	branch Test(EQ,Z) l000000000042789F
	// succ:  l00000000004278F7 l000000000042789F
l00000000004278F7:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l00000000004278D0
	// succ:  l00000000004278FC l00000000004278D0
l00000000004278FC:
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	goto l000000000042790B
	// succ:  l000000000042790B
l0000000000427901:
	r11 = r11 + 2<64>
	SCZO = cond(r11)
	rbx = rbx - 1<64>
	SCZO = cond(rbx)
	branch Test(EQ,Z) l000000000042789F
	// succ:  l000000000042790B l000000000042789F
l000000000042790B:
	r14d = CONVERT(Mem0[rdx + 2<64> + r11:word16], word16, word32)
	r14 = CONVERT(r14d, word32, uint64)
	SCZO = cond(Mem0[rcx + r11:word16] - r14w)
	branch Test(EQ,Z) l0000000000427901
	// succ:  l0000000000427918 l0000000000427901
l0000000000427918:
	r11 = r8
	goto l00000000004278D0
	// succ:  l00000000004278D0
l0000000000427920:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	goto l000000000042789F
	// succ:  l000000000042789F
fn0000000000427880_exit:


// fn0000000000427930
// Return size: 0
define fn0000000000427930
fn0000000000427930_entry:
	rsp = fp
	// succ:  l0000000000427930
l0000000000427930:
	rdx = Mem0[rdx:word64]
	r9 = Mem0[rdx - 0x18<64>:word64]
	// succ:  l0000000000427937_thunk_fn0000000000427880
l0000000000427937_thunk_fn0000000000427880:
	call fn0000000000427880 (retsize: 0;)
	return
	// succ:  fn0000000000427930_exit
fn0000000000427930_exit:


// fn0000000000427940
// Return size: 8
define fn0000000000427940
fn0000000000427940_entry:
	rsp = fp
	// succ:  l0000000000427940
l0000000000427940:
	r10 = Mem0[rcx:word64]
	rax = 0xFFFFFFFFFFFFFFFF<64>
	r9d = edx
	r9 = CONVERT(r9d, word32, uint64)
	rcx = Mem0[r10 - 0x18<64>:word64]
	SCZO = cond(r8 - rcx)
	branch Test(ULT,C) l0000000000427960
	// succ:  l0000000000427956 l0000000000427960
l0000000000427956:
	return
	// succ:  fn0000000000427940_exit
l0000000000427960:
	rcx = rcx - r8
	SCZO = cond(rcx)
	r8 = r10 + r8 * 2<64>
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l0000000000427956
	// succ:  l000000000042796C l0000000000427956
l000000000042796C:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000427956
	// succ:  l0000000000427971 l0000000000427956
l0000000000427971:
	SCZO = cond(Mem0[r8:word16] - dx)
	branch Test(EQ,Z) l00000000004279A0
	// succ:  l0000000000427977 l00000000004279A0
l0000000000427977:
	rdx = rcx
	goto l0000000000427986
	// succ:  l0000000000427986
l0000000000427980:
	SCZO = cond(Mem0[r8:word16] - r9w)
	branch Test(EQ,Z) l00000000004279A0
	// succ:  l0000000000427986 l00000000004279A0
l0000000000427986:
	r8 = r8 + 2<64>
	SCZO = cond(r8)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	branch Test(NE,Z) l0000000000427980
	// succ:  l0000000000427990 l0000000000427980
l0000000000427990:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	return
	// succ:  fn0000000000427940_exit
l00000000004279A0:
	r8 = r8 - r10
	SCZO = cond(r8)
	rax = r8
	rax = rax >> 1<64>
	SCZO = cond(rax)
	return
	// succ:  fn0000000000427940_exit
fn0000000000427940_exit:


// fn00000000004279B0
// Return size: 8
define fn00000000004279B0
fn00000000004279B0_entry:
	rsp = fp
	// succ:  l00000000004279B0
l00000000004279B0:
	rdx = Mem0[rdx:word64]
	rax = rcx
	Mem0[rcx:word64] = rdx
	return
	// succ:  fn00000000004279B0_exit
fn00000000004279B0_exit:


// fn00000000004279C0
// Return size: 8
define fn00000000004279C0
fn00000000004279C0_entry:
	rsp = fp
	// succ:  l00000000004279C0
l00000000004279C0:
	rax = Mem0[rcx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	return
	// succ:  fn00000000004279C0_exit
fn00000000004279C0_exit:


// fn00000000004279D0
// Return size: 8
define fn00000000004279D0
fn00000000004279D0_entry:
	rsp = fp
	// succ:  l00000000004279D0
l00000000004279D0:
	rax = Mem0[rcx:word64]
	return
	// succ:  fn00000000004279D0_exit
fn00000000004279D0_exit:


// fn00000000004279E0
// Return size: 8
define fn00000000004279E0
fn00000000004279E0_entry:
	rsp = fp
	// succ:  l00000000004279E0
l00000000004279E0:
	rax = Mem0[rcx:word64]
	return
	// succ:  fn00000000004279E0_exit
fn00000000004279E0_exit:


// fn00000000004279F0
// Return size: 8
define fn00000000004279F0
fn00000000004279F0_entry:
	rsp = fp
	// succ:  l00000000004279F0
l00000000004279F0:
	rdx = Mem0[rdx:word64]
	rax = rcx
	Mem0[rcx:word64] = rdx
	return
	// succ:  fn00000000004279F0_exit
fn00000000004279F0_exit:


// fn0000000000427A00
// Return size: 8
define fn0000000000427A00
fn0000000000427A00_entry:
	rsp = fp
	// succ:  l0000000000427A00
l0000000000427A00:
	rax = Mem0[rcx:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	return
	// succ:  fn0000000000427A00_exit
fn0000000000427A00_exit:


// fn0000000000427A10
// Return size: 8
define fn0000000000427A10
fn0000000000427A10_entry:
	rsp = fp
	// succ:  l0000000000427A10
l0000000000427A10:
	rax = Mem0[rcx:word64]
	return
	// succ:  fn0000000000427A10_exit
fn0000000000427A10_exit:


// fn0000000000427A20
// Return size: 8
define fn0000000000427A20
fn0000000000427A20_entry:
	rsp = fp
	// succ:  l0000000000427A20
l0000000000427A20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = rdx
	rbx = rdx
	Mem0[rsp + 0x28<64>:word64] = r8
	eax = wcslen(rcx)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	rdx = rbx
	rcx = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000427A4D_thunk_fn0000000000427A60
l0000000000427A4D_thunk_fn0000000000427A60:
	call fn0000000000427A60 (retsize: 0;)
	return
	// succ:  fn0000000000427A20_exit
fn0000000000427A20_exit:


// fn0000000000427A60
// Return size: 8
define fn0000000000427A60
fn0000000000427A60_entry:
	rsp = fp
	// succ:  l0000000000427A60
l0000000000427A60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	r10 = Mem0[rcx:word64]
	rax = 0xFFFFFFFFFFFFFFFF<64>
	rcx = Mem0[r10 - 0x18<64>:word64]
	SCZO = cond(r9 - rcx)
	branch Test(ULE,CZ) l0000000000427A80
	goto l0000000000427A75
	// succ:  l0000000000427A75 l0000000000427A80
l0000000000427A60:
l0000000000427A75:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000427A60_exit
l0000000000427A80:
	rcx = rcx - r9
	SCZO = cond(rcx)
	rax = r8
	SCZO = cond(rcx - r8)
	branch Test(UGT,CZ) l0000000000427A8D
	// succ:  l0000000000427A89_1 l0000000000427A8D
l0000000000427A89_1:
	rax = rcx
	// succ:  l0000000000427A8D
l0000000000427A8D:
	SZO = cond(r9 & r9)
	C = false
	bl = CONVERT(Test(EQ,Z), bool, int8)
	r8 = r10 + rax * 2<64>
	goto l0000000000427AB0
	// succ:  l0000000000427AB0
l0000000000427AA0:
	r8 = r8 - 2<64>
	SCZO = cond(r8)
	SZO = cond(rax & rax)
	C = false
	rcx = rax - 1<64>
	branch Test(EQ,Z) l0000000000427AF0
	// succ:  l0000000000427AAD l0000000000427AF0
l0000000000427AAD:
	rax = rcx
	// succ:  l0000000000427AB0
l0000000000427AB0:
	SCZO = cond(rdx - r8)
	rcx = r8
	branch Test(EQ,Z) l0000000000427A75
	// succ:  l0000000000427AB8 l0000000000427A75
l0000000000427AB8:
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l0000000000427A75
	// succ:  l0000000000427ABC l0000000000427A75
l0000000000427ABC:
	SZO = cond(r8 & r8)
	C = false
	r11b = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(rdx & rdx)
	C = false
	r10b = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(r11b - r10b)
	branch Test(NE,Z) l0000000000427AA0
	// succ:  l0000000000427ACF l0000000000427AA0
l0000000000427ACF:
	r11 = r9
	r10 = rdx
	// succ:  l0000000000427AD5
l0000000000427AD5:
	esi = CONVERT(Mem0[r10:word16], word16, word32)
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(Mem0[rcx:word16] - si)
	branch Test(NE,Z) l0000000000427AA0
	// succ:  l0000000000427ADE l0000000000427AA0
l0000000000427ADE:
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	r10 = r10 + 2<64>
	SCZO = cond(r10)
	r11 = r11 - 1<64>
	SCZO = cond(r11)
	branch Test(NE,Z) l0000000000427AD5
	// succ:  l0000000000427AEC l0000000000427AD5
l0000000000427AEC:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000427A60_exit
l0000000000427AF0:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000427A60_exit
fn0000000000427A60_exit:


// fn0000000000427B00
// Return size: 0
define fn0000000000427B00
fn0000000000427B00_entry:
	rsp = fp
	// succ:  l0000000000427B00
l0000000000427B00:
	rdx = Mem0[rdx:word64]
	r9 = Mem0[rdx - 0x18<64>:word64]
	// succ:  l0000000000427B07_thunk_fn0000000000427A60
l0000000000427B07_thunk_fn0000000000427A60:
	call fn0000000000427A60 (retsize: 0;)
	return
	// succ:  fn0000000000427B00_exit
fn0000000000427B00_exit:


// fn0000000000427B10
// Return size: 8
define fn0000000000427B10
fn0000000000427B10_entry:
	rsp = fp
	// succ:  l0000000000427B10
l0000000000427B10:
	r9 = Mem0[rcx:word64]
	rax = 0xFFFFFFFFFFFFFFFF<64>
	rcx = Mem0[r9 - 0x18<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000427B25
	// succ:  l0000000000427B23 l0000000000427B25
l0000000000427B23:
	return
	// succ:  fn0000000000427B10_exit
l0000000000427B25:
	rax = rax + rcx
	SCZO = cond(rax)
	SCZO = cond(r8 - rax)
	branch Test(UGT,CZ) l0000000000427B2F
	// succ:  l0000000000427B2B_1 l0000000000427B2F
l0000000000427B2B_1:
	rax = r8
	// succ:  l0000000000427B2F
l0000000000427B2F:
	goto l0000000000427B40
	// succ:  l0000000000427B40
l0000000000427B31:
	rcx = rax - 1<64>
	SCZO = cond(Mem0[r9 + 2<64> + rcx * 2<64>:word16] - dx)
	branch Test(EQ,Z) l0000000000427B23
	// succ:  l0000000000427B3D l0000000000427B23
l0000000000427B3D:
	rax = rcx
	// succ:  l0000000000427B40
l0000000000427B40:
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l0000000000427B31
	// succ:  l0000000000427B46 l0000000000427B31
l0000000000427B46:
	return
	// succ:  fn0000000000427B10_exit
fn0000000000427B10_exit:


// fn0000000000427B50
// Return size: 8
define fn0000000000427B50
fn0000000000427B50_entry:
	rsp = fp
	// succ:  l0000000000427B50
l0000000000427B50:
	rax = Mem0[rcx:word64]
	rax = rax - 0x18<64>
	SCZO = cond(rax)
	return
	// succ:  fn0000000000427B50_exit
fn0000000000427B50_exit:


// fn0000000000427B60
// Return size: 8
define fn0000000000427B60
fn0000000000427B60_entry:
	rsp = fp
	// succ:  l0000000000427B60
l0000000000427B60:
	rax = Mem0[rcx:word64]
	return
	// succ:  fn0000000000427B60_exit
fn0000000000427B60_exit:


// fn0000000000427B70
// Return size: 8
define fn0000000000427B70
fn0000000000427B70_entry:
	rsp = fp
	// succ:  l0000000000427B70
l0000000000427B70:
	rax = Mem0[rcx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	return
	// succ:  fn0000000000427B70_exit
fn0000000000427B70_exit:


// fn0000000000427B80
// Return size: 8
define fn0000000000427B80
fn0000000000427B80_entry:
	rsp = fp
	// succ:  l0000000000427B80
l0000000000427B80:
	rdx = Mem0[rdx:word64]
	rax = rcx
	rcx = Mem0[rdx - 0x18<64>:word64]
	rdx = rdx + rcx * 2<64>
	Mem0[rax:word64] = rdx
	return
	// succ:  fn0000000000427B80_exit
fn0000000000427B80_exit:


// fn0000000000427BA0
// Return size: 8
define fn0000000000427BA0
fn0000000000427BA0_entry:
	rsp = fp
	// succ:  l0000000000427BA0
l0000000000427BA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rax = Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8 - rax)
	branch Test(UGT,CZ) l0000000000427BC2
	// succ:  l0000000000427BB4 l0000000000427BC2
l0000000000427BB4:
	call fn000000000044A990 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000427BA0_exit
l0000000000427BC2:
	rdx = 0x000000000048DB0D<p64>
	rcx = 0x000000000048D970<p64>
	r9 = rax
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000427BDF_thunk_fn0000000000427BE0
l0000000000427BDF_thunk_fn0000000000427BE0:
	call fn0000000000427BE0 (retsize: 0;)
	return
	// succ:  fn0000000000427BA0_exit
fn0000000000427BA0_exit:


// fn0000000000427BE0
// Return size: 8
define fn0000000000427BE0
fn0000000000427BE0_entry:
	rsp = fp
	// succ:  l0000000000427BE0
l0000000000427BE0:
	rax = Mem0[rcx:word64]
	return
	// succ:  fn0000000000427BE0_exit
fn0000000000427BE0_exit:


// fn0000000000427BF0
// Return size: 8
define fn0000000000427BF0
fn0000000000427BF0_entry:
	rsp = fp
	// succ:  l0000000000427BF0
l0000000000427BF0:
	rax = Mem0[rcx:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	rax = rax + rdx * 2<64>
	return
	// succ:  fn0000000000427BF0_exit
fn0000000000427BF0_exit:


// fn0000000000427C00
// Return size: 8
define fn0000000000427C00
fn0000000000427C00_entry:
	rsp = fp
	// succ:  l0000000000427C00
l0000000000427C00:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdi = rcx
	rcx = rdx
	rbx = rdx
	rsi = Mem0[rax - 0x18<64>:word64]
	eax = wcslen(rcx)
	rdx = Mem0[rdi:word64]
	SCZO = cond(rax - rsi)
	r8 = rsi
	branch Test(UGT,CZ) l0000000000427C29
	// succ:  l0000000000427C25_1 l0000000000427C29
l0000000000427C25_1:
	r8 = rax
	// succ:  l0000000000427C29
l0000000000427C29:
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l0000000000427C80
	// succ:  l0000000000427C2E l0000000000427C80
l0000000000427C2E:
	SCZO = cond(rbx - rdx)
	branch Test(EQ,Z) l0000000000427C80
	// succ:  l0000000000427C33 l0000000000427C80
l0000000000427C33:
	SZO = cond(rdx & rdx)
	C = false
	r9b = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(rbx & rbx)
	C = false
	cl = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(r9b - cl)
	branch Test(EQ,Z) l0000000000427C60
	// succ:  l0000000000427C45 l0000000000427C60
l0000000000427C45:
	SCZO = cond(rbx - 1<64>)
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & 2<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	// succ:  l0000000000427C51
l0000000000427C51:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000427C00_exit
l0000000000427C60:
	rcx = r8
	// succ:  l0000000000427C63
l0000000000427C63:
	edi = CONVERT(Mem0[rbx:word16], word16, word32)
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(Mem0[rdx:word16] - di)
	branch Test(NE,Z) l0000000000427CB0
	// succ:  l0000000000427C6B l0000000000427CB0
l0000000000427C6B:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rbx = rbx + 2<64>
	SCZO = cond(rbx)
	rcx = rcx - 1<64>
	SCZO = cond(rcx)
	branch Test(NE,Z) l0000000000427C63
	// succ:  l0000000000427C79 l0000000000427C63
l0000000000427C79:
	// succ:  l0000000000427C80
l0000000000427C80:
	rsi = rsi - rax
	SCZO = cond(rsi)
	eax = 0x7FFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(rsi - 0x7FFFFFFF<64>)
	branch Test(GT,SZO) l0000000000427C51
	// succ:  l0000000000427C91 l0000000000427C51
l0000000000427C91:
	SCZO = cond(rsi - 0xFFFFFFFF80000000<64>)
	eax = 0x80000000<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(LT,SO) l0000000000427CA0
	// succ:  l0000000000427C9D_1 l0000000000427CA0
l0000000000427C9D_1:
	eax = esi
	// succ:  l0000000000427CA0
l0000000000427CA0:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000427C00_exit
l0000000000427CB0:
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax | 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000427C51
	// succ:  l0000000000427C51
fn0000000000427C00_exit:


// fn0000000000427CC0
// Return size: 8
define fn0000000000427CC0
fn0000000000427CC0_entry:
	rsp = fp
	// succ:  l0000000000427CC0
l0000000000427CC0:
	rax = Mem0[rdx:word64]
	rcx = Mem0[rcx:word64]
	r9 = Mem0[rax - 0x18<64>:word64]
	r8 = Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(r9 - r8)
	rdx = r8
	branch Test(UGT,CZ) l0000000000427CD8
	// succ:  l0000000000427CD4_1 l0000000000427CD8
l0000000000427CD4_1:
	rdx = r9
	// succ:  l0000000000427CD8
l0000000000427CD8:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l0000000000427D00
	// succ:  l0000000000427CDD l0000000000427D00
l0000000000427CDD:
	SCZO = cond(rcx - rax)
	branch Test(EQ,Z) l0000000000427D00
	// succ:  l0000000000427CE2 l0000000000427D00
l0000000000427CE2:
	r10d = CONVERT(Mem0[rax:word16], word16, word32)
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(Mem0[rcx:word16] - r10w)
	branch Test(NE,Z) l0000000000427D24
	// succ:  l0000000000427CEC l0000000000427D24
l0000000000427CEC:
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	rax = rax + 2<64>
	SCZO = cond(rax)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	branch Test(NE,Z) l0000000000427CE2
	// succ:  l0000000000427CFA l0000000000427CE2
l0000000000427CFA:
	// succ:  l0000000000427D00
l0000000000427D00:
	r8 = r8 - r9
	SCZO = cond(r8)
	eax = 0x7FFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8 - 0x7FFFFFFF<64>)
	branch Test(LE,SZO) l0000000000427D13
	// succ:  l0000000000427D11 l0000000000427D13
l0000000000427D11:
	return
	// succ:  fn0000000000427CC0_exit
l0000000000427D13:
	SCZO = cond(r8 - 0xFFFFFFFF80000000<64>)
	eax = 0x80000000<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(LT,SO) l0000000000427D23
	// succ:  l0000000000427D1F_1 l0000000000427D23
l0000000000427D1F_1:
	eax = r8d
	// succ:  l0000000000427D23
l0000000000427D23:
	return
	// succ:  fn0000000000427CC0_exit
l0000000000427D24:
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax | 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000427CC0_exit
fn0000000000427CC0_exit:


// fn0000000000427D30
// Return size: 8
define fn0000000000427D30
fn0000000000427D30_entry:
	rsp = fp
	// succ:  l0000000000427D30
l0000000000427D30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rsi = r9
	rbp = rcx
	rdi = rdx
	r9 = Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx - r9)
	branch Test(UGT,CZ) l0000000000427E07
	// succ:  l0000000000427D51 l0000000000427E07
l0000000000427D51:
	rbx = r9
	rcx = rsi
	rbx = rbx - rdx
	SCZO = cond(rbx)
	SCZO = cond(rbx - r8)
	branch Test(ULE,CZ) l0000000000427D61
	// succ:  l0000000000427D5D_1 l0000000000427D61
l0000000000427D5D_1:
	rbx = r8
	// succ:  l0000000000427D61
l0000000000427D61:
	eax = wcslen(rcx)
	r9 = rbx
	SCZO = cond(rax - rbx)
	rdx = Mem0[rbp + 0<64>:word64]
	branch Test(UGT,CZ) l0000000000427D74
	// succ:  l0000000000427D70_1 l0000000000427D74
l0000000000427D70_1:
	r9 = rax
	// succ:  l0000000000427D74
l0000000000427D74:
	SZO = cond(r9 & r9)
	C = false
	rdx = rdx + rdi * 2<64>
	branch Test(EQ,Z) l0000000000427DD0
	// succ:  l0000000000427D7D l0000000000427DD0
l0000000000427D7D:
	SCZO = cond(rsi - rdx)
	branch Test(EQ,Z) l0000000000427DD0
	// succ:  l0000000000427D82 l0000000000427DD0
l0000000000427D82:
	SZO = cond(rdx & rdx)
	C = false
	r8b = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(rsi & rsi)
	C = false
	cl = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(r8b - cl)
	branch Test(EQ,Z) l0000000000427DB0
	// succ:  l0000000000427D94 l0000000000427DB0
l0000000000427D94:
	SCZO = cond(rsi - 1<64>)
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & 2<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	// succ:  l0000000000427DA0
l0000000000427DA0:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000427D30_exit
l0000000000427DB0:
	rcx = r9
	// succ:  l0000000000427DB3
l0000000000427DB3:
	edi = CONVERT(Mem0[rsi:word16], word16, word32)
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(Mem0[rdx:word16] - di)
	branch Test(NE,Z) l0000000000427E00
	// succ:  l0000000000427DBB l0000000000427E00
l0000000000427DBB:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rsi = rsi + 2<64>
	SCZO = cond(rsi)
	rcx = rcx - 1<64>
	SCZO = cond(rcx)
	branch Test(NE,Z) l0000000000427DB3
	// succ:  l0000000000427DC9 l0000000000427DB3
l0000000000427DC9:
	// succ:  l0000000000427DD0
l0000000000427DD0:
	rbx = rbx - rax
	SCZO = cond(rbx)
	eax = 0x7FFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(rbx - 0x7FFFFFFF<64>)
	branch Test(GT,SZO) l0000000000427DA0
	// succ:  l0000000000427DE1 l0000000000427DA0
l0000000000427DE1:
	SCZO = cond(rbx - 0xFFFFFFFF80000000<64>)
	eax = 0x80000000<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(LT,SO) l0000000000427DF0
	// succ:  l0000000000427DED_1 l0000000000427DF0
l0000000000427DED_1:
	eax = ebx
	// succ:  l0000000000427DF0
l0000000000427DF0:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000427D30_exit
l0000000000427E00:
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax | 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000427DA0
	// succ:  l0000000000427DA0
l0000000000427E07:
	r8 = rdx
	rcx = 0x000000000048D970<p64>
	rdx = 0x000000000048D9FF<p64>
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000427E1F_thunk_fn0000000000427E20
l0000000000427E1F_thunk_fn0000000000427E20:
	call fn0000000000427E20 (retsize: 0;)
	return
	// succ:  fn0000000000427D30_exit
fn0000000000427D30_exit:


// fn0000000000427E20
// Return size: 8
define fn0000000000427E20
fn0000000000427E20_entry:
	rsp = fp
	// succ:  l0000000000427E20
l0000000000427E20:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r11 = Mem0[rcx:word64]
	r10 = Mem0[rsp + 0x50<64>:word64]
	rax = Mem0[r11 - 0x18<64>:word64]
	SCZO = cond(rdx - rax)
	branch Test(UGT,CZ) l0000000000427ED7
	// succ:  l0000000000427E39 l0000000000427ED7
l0000000000427E39:
	rax = rax - rdx
	SCZO = cond(rax)
	rcx = r10
	SCZO = cond(rax - r8)
	branch Test(UGT,CZ) l0000000000427E46
	// succ:  l0000000000427E42_1 l0000000000427E46
l0000000000427E42_1:
	r8 = rax
	// succ:  l0000000000427E46
l0000000000427E46:
	rax = r11 + rdx * 2<64>
	SCZO = cond(r8 - r10)
	branch Test(UGT,CZ) l0000000000427E51
	// succ:  l0000000000427E4D_1 l0000000000427E51
l0000000000427E4D_1:
	rcx = r8
	// succ:  l0000000000427E51
l0000000000427E51:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000427EA0
	// succ:  l0000000000427E56 l0000000000427EA0
l0000000000427E56:
	SCZO = cond(rax - r9)
	branch Test(EQ,Z) l0000000000427EA0
	// succ:  l0000000000427E5B l0000000000427EA0
l0000000000427E5B:
	SZO = cond(rax & rax)
	C = false
	r11b = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(r9 & r9)
	C = false
	dl = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(r11b - dl)
	branch Test(EQ,Z) l0000000000427E80
	// succ:  l0000000000427E6D l0000000000427E80
l0000000000427E6D:
	SCZO = cond(r9 - 1<64>)
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & 2<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	// succ:  l0000000000427E79
l0000000000427E79:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000427E20_exit
l0000000000427E80:
	rdx = rcx
	// succ:  l0000000000427E83
l0000000000427E83:
	ecx = CONVERT(Mem0[r9:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(Mem0[rax:word16] - cx)
	branch Test(NE,Z) l0000000000427ED0
	// succ:  l0000000000427E8C l0000000000427ED0
l0000000000427E8C:
	rax = rax + 2<64>
	SCZO = cond(rax)
	r9 = r9 + 2<64>
	SCZO = cond(r9)
	rdx = rdx - 1<64>
	SCZO = cond(rdx)
	branch Test(NE,Z) l0000000000427E83
	// succ:  l0000000000427E9A l0000000000427E83
l0000000000427E9A:
	// succ:  l0000000000427EA0
l0000000000427EA0:
	r8 = r8 - r10
	SCZO = cond(r8)
	eax = 0x7FFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8 - 0x7FFFFFFF<64>)
	branch Test(GT,SZO) l0000000000427E79
	// succ:  l0000000000427EB1 l0000000000427E79
l0000000000427EB1:
	SCZO = cond(r8 - 0xFFFFFFFF80000000<64>)
	eax = 0x80000000<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(LT,SO) l0000000000427EC1
	// succ:  l0000000000427EBD_1 l0000000000427EC1
l0000000000427EBD_1:
	eax = r8d
	// succ:  l0000000000427EC1
l0000000000427EC1:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000427E20_exit
l0000000000427ED0:
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax | 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000427E79
	// succ:  l0000000000427E79
l0000000000427ED7:
	r8 = rdx
	rcx = 0x000000000048D970<p64>
	rdx = 0x000000000048D9FF<p64>
	r9 = rax
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000427EFF_thunk_fn0000000000427F00
l0000000000427EFF_thunk_fn0000000000427F00:
	call fn0000000000427F00 (retsize: 0;)
	return
	// succ:  fn0000000000427E20_exit
fn0000000000427E20_exit:


// fn0000000000427F00
// Return size: 8
define fn0000000000427F00
fn0000000000427F00_entry:
	rsp = fp
	// succ:  l0000000000427F00
l0000000000427F00:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r11 = Mem0[rcx:word64]
	rax = Mem0[r11 - 0x18<64>:word64]
	SCZO = cond(rdx - rax)
	branch Test(UGT,CZ) l0000000000427FA7
	// succ:  l0000000000427F14 l0000000000427FA7
l0000000000427F14:
	rcx = Mem0[r9:word64]
	rax = rax - rdx
	SCZO = cond(rax)
	rdx = r11 + rdx * 2<64>
	SCZO = cond(rax - r8)
	branch Test(UGT,CZ) l0000000000427F25
	// succ:  l0000000000427F21_1 l0000000000427F25
l0000000000427F21_1:
	r8 = rax
	// succ:  l0000000000427F25
l0000000000427F25:
	r10 = Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(r8 - r10)
	r9 = r10
	branch Test(UGT,CZ) l0000000000427F33
	// succ:  l0000000000427F2F_1 l0000000000427F33
l0000000000427F2F_1:
	r9 = r8
	// succ:  l0000000000427F33
l0000000000427F33:
	SZO = cond(r9 & r9)
	C = false
	branch Test(EQ,Z) l0000000000427F70
	// succ:  l0000000000427F38 l0000000000427F70
l0000000000427F38:
	SCZO = cond(rdx - rcx)
	branch Test(EQ,Z) l0000000000427F70
	// succ:  l0000000000427F3D l0000000000427F70
l0000000000427F3D:
	SZO = cond(rdx & rdx)
	C = false
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l0000000000427F50
	// succ:  l0000000000427F47 l0000000000427F50
l0000000000427F47:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000427F00_exit
l0000000000427F50:
	rax = r9
	// succ:  l0000000000427F53
l0000000000427F53:
	r11d = CONVERT(Mem0[rcx:word16], word16, word32)
	r11 = CONVERT(r11d, word32, uint64)
	SCZO = cond(Mem0[rdx:word16] - r11w)
	branch Test(NE,Z) l0000000000427FA0
	// succ:  l0000000000427F5D l0000000000427FA0
l0000000000427F5D:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	rax = rax - 1<64>
	SCZO = cond(rax)
	branch Test(NE,Z) l0000000000427F53
	// succ:  l0000000000427F6B l0000000000427F53
l0000000000427F6B:
	// succ:  l0000000000427F70
l0000000000427F70:
	r8 = r8 - r10
	SCZO = cond(r8)
	eax = 0x7FFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8 - 0x7FFFFFFF<64>)
	branch Test(GT,SZO) l0000000000427F47
	// succ:  l0000000000427F81 l0000000000427F47
l0000000000427F81:
	SCZO = cond(r8 - 0xFFFFFFFF80000000<64>)
	eax = 0x80000000<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(LT,SO) l0000000000427F91
	// succ:  l0000000000427F8D_1 l0000000000427F91
l0000000000427F8D_1:
	eax = r8d
	// succ:  l0000000000427F91
l0000000000427F91:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000427F00_exit
l0000000000427FA0:
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax | 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000427F47
	// succ:  l0000000000427F47
l0000000000427FA7:
	r8 = rdx
	rcx = 0x000000000048D970<p64>
	rdx = 0x000000000048D9FF<p64>
	r9 = rax
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000427FCF_thunk_fn0000000000427FD0
l0000000000427FCF_thunk_fn0000000000427FD0:
	call fn0000000000427FD0 (retsize: 0;)
	return
	// succ:  fn0000000000427F00_exit
fn0000000000427F00_exit:


// fn0000000000427FD0
// Return size: 8
define fn0000000000427FD0
fn0000000000427FD0_entry:
	rsp = fp
	// succ:  l0000000000427FD0
l0000000000427FD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r11 = Mem0[rcx:word64]
	r10 = Mem0[rsp + 0x60<64>:word64]
	rsi = Mem0[rsp + 0x68<64>:word64]
	rax = Mem0[r11 - 0x18<64>:word64]
	SCZO = cond(rdx - rax)
	branch Test(UGT,CZ) l00000000004280B7
	// succ:  l0000000000427FF0 l00000000004280B7
l0000000000427FF0:
	rbx = Mem0[r9:word64]
	r9 = Mem0[rbx - 0x18<64>:word64]
	SCZO = cond(r10 - r9)
	branch Test(UGT,CZ) l00000000004280D0
	// succ:  l0000000000428000 l00000000004280D0
l0000000000428000:
	rax = rax - rdx
	SCZO = cond(rax)
	rdx = r11 + rdx * 2<64>
	SCZO = cond(rax - r8)
	branch Test(UGT,CZ) l000000000042800E
	// succ:  l000000000042800A_1 l000000000042800E
l000000000042800A_1:
	r8 = rax
	// succ:  l000000000042800E
l000000000042800E:
	r9 = r9 - r10
	SCZO = cond(r9)
	rax = rbx + r10 * 2<64>
	SCZO = cond(r9 - rsi)
	branch Test(ULE,CZ) l000000000042801C
	// succ:  l0000000000428018_1 l000000000042801C
l0000000000428018_1:
	r9 = rsi
	// succ:  l000000000042801C
l000000000042801C:
	SCZO = cond(r8 - r9)
	rcx = r9
	branch Test(UGT,CZ) l0000000000428026
	// succ:  l0000000000428022_1 l0000000000428026
l0000000000428022_1:
	rcx = r8
	// succ:  l0000000000428026
l0000000000428026:
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000428080
	// succ:  l000000000042802B l0000000000428080
l000000000042802B:
	SCZO = cond(rax - rdx)
	branch Test(EQ,Z) l0000000000428080
	// succ:  l0000000000428030 l0000000000428080
l0000000000428030:
	SZO = cond(rdx & rdx)
	C = false
	r11b = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(rax & rax)
	C = false
	r10b = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(r11b - r10b)
	branch Test(EQ,Z) l0000000000428060
	// succ:  l0000000000428043 l0000000000428060
l0000000000428043:
	SCZO = cond(rax - 1<64>)
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & 2<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	// succ:  l000000000042804F
l000000000042804F:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000427FD0_exit
l0000000000428060:
	ebx = CONVERT(Mem0[rax:word16], word16, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(Mem0[rdx:word16] - bx)
	branch Test(NE,Z) l00000000004280B0
	// succ:  l0000000000428068 l00000000004280B0
l0000000000428068:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rax = rax + 2<64>
	SCZO = cond(rax)
	rcx = rcx - 1<64>
	SCZO = cond(rcx)
	branch Test(NE,Z) l0000000000428060
	// succ:  l0000000000428076 l0000000000428060
l0000000000428076:
	// succ:  l0000000000428080
l0000000000428080:
	r8 = r8 - r9
	SCZO = cond(r8)
	eax = 0x7FFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(r8 - 0x7FFFFFFF<64>)
	branch Test(GT,SZO) l000000000042804F
	// succ:  l0000000000428091 l000000000042804F
l0000000000428091:
	SCZO = cond(r8 - 0xFFFFFFFF80000000<64>)
	eax = 0x80000000<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(LT,SO) l00000000004280A1
	// succ:  l000000000042809D_1 l00000000004280A1
l000000000042809D_1:
	eax = r8d
	// succ:  l00000000004280A1
l00000000004280A1:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000427FD0_exit
l00000000004280B0:
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax | 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000042804F
	// succ:  l000000000042804F
l00000000004280B7:
	r8 = rdx
	rcx = 0x000000000048D970<p64>
	rdx = 0x000000000048D9FF<p64>
	r9 = rax
	call fn0000000000471560 (retsize: 8;)
	// succ:  l00000000004280D0
l00000000004280D0:
	rdx = 0x000000000048D9FF<p64>
	rcx = 0x000000000048D970<p64>
	r8 = r10
	call fn0000000000471560 (retsize: 8;)
	// succ:  l00000000004280EF_thunk_fn00000000004280F0
l00000000004280EF_thunk_fn00000000004280F0:
	call fn00000000004280F0 (retsize: 0;)
	return
	// succ:  fn0000000000427FD0_exit
fn0000000000427FD0_exit:


// fn00000000004280F0
// Return size: 8
define fn00000000004280F0
fn00000000004280F0_entry:
	rsp = fp
	// succ:  l00000000004280F0
l00000000004280F0:
	rdx = Mem0[rdx:word64]
	rax = rcx
	rcx = Mem0[rdx - 0x18<64>:word64]
	rdx = rdx + rcx * 2<64>
	Mem0[rax:word64] = rdx
	return
	// succ:  fn00000000004280F0_exit
fn00000000004280F0_exit:


// fn0000000000428110
// Return size: 8
define fn0000000000428110
fn0000000000428110_entry:
	rsp = fp
	// succ:  l0000000000428110
l0000000000428110:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = rdx
	rdx = Mem0[rcx:word64]
	r9 = Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax - r9)
	branch Test(UGT,CZ) l0000000000428128
	// succ:  l0000000000428123 l0000000000428128
l0000000000428123:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000428110_exit
l0000000000428128:
	rcx = 0x000000000048D970<p64>
	rdx = r8
	r8 = rax
	call fn0000000000471560 (retsize: 8;)
	// succ:  l000000000042813F_thunk_fn0000000000428140
l000000000042813F_thunk_fn0000000000428140:
	call fn0000000000428140 (retsize: 0;)
	return
	// succ:  fn0000000000428110_exit
fn0000000000428110_exit:


// fn0000000000428140
// Return size: 8
define fn0000000000428140
fn0000000000428140_entry:
	rsp = fp
	// succ:  l0000000000428140
l0000000000428140:
	rax = Mem0[rcx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rax = rax - rdx
	SCZO = cond(rax)
	SCZO = cond(rax - r8)
	branch Test(ULE,CZ) l0000000000428151
	// succ:  l000000000042814D_1 l0000000000428151
l000000000042814D_1:
	rax = r8
	// succ:  l0000000000428151
l0000000000428151:
	return
	// succ:  fn0000000000428140_exit
fn0000000000428140_exit:


// fn0000000000428160
// Return size: 8
define fn0000000000428160
fn0000000000428160_entry:
	rsp = fp
	// succ:  l0000000000428160
l0000000000428160:
	rax = Mem0[rcx:word64]
	rax = Mem0[rax - 0x10<64>:word64]
	return
	// succ:  fn0000000000428160_exit
fn0000000000428160_exit:


// fn0000000000428170
// Return size: 8
define fn0000000000428170
fn0000000000428170_entry:
	rsp = fp
	// succ:  l0000000000428170
l0000000000428170:
	rax = 0x1FFFFFFFFFFFFFFC<64>
	return
	// succ:  fn0000000000428170_exit
fn0000000000428170_exit:


// fn0000000000428180
// Return size: 8
define fn0000000000428180
fn0000000000428180_entry:
	rsp = fp
	// succ:  l0000000000428180
l0000000000428180:
	rax = Mem0[rcx:word64]
	return
	// succ:  fn0000000000428180_exit
fn0000000000428180_exit:


// fn0000000000428190
// Return size: 8
define fn0000000000428190
fn0000000000428190_entry:
	rsp = fp
	// succ:  l0000000000428190
l0000000000428190:
	rax = Mem0[rcx:word64]
	rax = rax + rdx * 2<64>
	return
	// succ:  fn0000000000428190_exit
fn0000000000428190_exit:


// fn00000000004281A0
// Return size: 8
define fn00000000004281A0
fn00000000004281A0_entry:
	rsp = fp
	// succ:  l00000000004281A0
l00000000004281A0:
	rax = Mem0[rcx + 8<64>:word64]
	return
	// succ:  fn00000000004281A0_exit
fn00000000004281A0_exit:


// fn00000000004281B0
// Return size: 8
define fn00000000004281B0
fn00000000004281B0_entry:
	rsp = fp
	// succ:  l00000000004281B0
l00000000004281B0:
	eax = CONVERT(Mem0[rcx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004281B0_exit
fn00000000004281B0_exit:


// fn00000000004281C0
// Return size: 8
define fn00000000004281C0
fn00000000004281C0_entry:
	rsp = fp
	// succ:  l00000000004281C0
l00000000004281C0:
	eax = CONVERT(Mem0[rcx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004281C0_exit
fn00000000004281C0_exit:


// fn00000000004281D0
// Return size: 8
define fn00000000004281D0
fn00000000004281D0_entry:
	rsp = fp
	// succ:  l00000000004281D0
l00000000004281D0:
	rcx = Mem0[rcx:word64]
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(rdx - rcx)
	branch Test(ULT,C) l00000000004281E7
	// succ:  l00000000004281DD l00000000004281E7
l00000000004281DD:
	rcx = rcx + Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(rcx)
	SCZO = cond(rdx - rcx)
	al = CONVERT(Test(UGT,CZ), bool, int8)
	// succ:  l00000000004281E7
l00000000004281E7:
	return
	// succ:  fn00000000004281D0_exit
fn00000000004281D0_exit:


// fn00000000004281F0
// Return size: 8
define fn00000000004281F0
fn00000000004281F0_entry:
	rsp = fp
	// succ:  l00000000004281F0
l00000000004281F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = rdx
	rbx = rdx
	Mem0[rsp + 0x28<64>:word64] = r8
	eax = strlen(rcx)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	rdx = rbx
	rcx = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000042821D_thunk_fn0000000000428230
l000000000042821D_thunk_fn0000000000428230:
	call fn0000000000428230 (retsize: 0;)
	return
	// succ:  fn00000000004281F0_exit
fn00000000004281F0_exit:


// fn0000000000428230
// Return size: 8
define fn0000000000428230
fn0000000000428230_entry:
	rsp = fp
	// succ:  l0000000000428230
l0000000000428230:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdi = Mem0[rcx:word64]
	SZO = cond(r9 & r9)
	C = false
	rax = Mem0[rdi - 0x18<64>:word64]
	branch Test(EQ,Z) l0000000000428249
	goto l0000000000428244
	// succ:  l0000000000428244 l0000000000428249
l0000000000428230:
l0000000000428244:
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l0000000000428260
	// succ:  l0000000000428249 l0000000000428260
l0000000000428249:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428230_exit
l0000000000428260:
	rax = rax - 1<64>
	SCZO = cond(rax)
	rbx = r8
	rsi = r9
	SCZO = cond(r8 - rax)
	rbp = rdx
	branch Test(ULE,CZ) l0000000000428274
	// succ:  l0000000000428270_1 l0000000000428274
l0000000000428270_1:
	rbx = rax
	// succ:  l0000000000428274
l0000000000428274:
	goto l000000000042828C
	// succ:  l000000000042828C
l0000000000428280:
	SZO = cond(rbx & rbx)
	C = false
	rax = rbx - 1<64>
	branch Test(EQ,Z) l0000000000428249
	// succ:  l0000000000428289 l0000000000428249
l0000000000428289:
	rbx = rax
	// succ:  l000000000042828C
l000000000042828C:
	edx = CONVERT(Mem0[rdi + rbx:byte], byte, int32)
	r8 = rsi
	rcx = rbp
	rax = memchr(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000428280
	// succ:  l00000000004282A0 l0000000000428280
l00000000004282A0:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428230_exit
fn0000000000428230_exit:


// fn00000000004282B0
// Return size: 0
define fn00000000004282B0
fn00000000004282B0_entry:
	rsp = fp
	// succ:  l00000000004282B0
l00000000004282B0:
	rdx = Mem0[rdx:word64]
	r9 = Mem0[rdx - 0x18<64>:word64]
	// succ:  l00000000004282B7_thunk_fn0000000000428230
l00000000004282B7_thunk_fn0000000000428230:
	call fn0000000000428230 (retsize: 0;)
	return
	// succ:  fn00000000004282B0_exit
fn00000000004282B0_exit:


// fn00000000004282C0
// Return size: 8
define fn00000000004282C0
fn00000000004282C0_entry:
	rsp = fp
	// succ:  l00000000004282C0
l00000000004282C0:
	r9 = Mem0[rcx:word64]
	rax = 0xFFFFFFFFFFFFFFFF<64>
	rcx = Mem0[r9 - 0x18<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l00000000004282D5
	// succ:  l00000000004282D3 l00000000004282D5
l00000000004282D3:
	return
	// succ:  fn00000000004282C0_exit
l00000000004282D5:
	rax = rax + rcx
	SCZO = cond(rax)
	SCZO = cond(r8 - rax)
	branch Test(UGT,CZ) l00000000004282DF
	// succ:  l00000000004282DB_1 l00000000004282DF
l00000000004282DB_1:
	rax = r8
	// succ:  l00000000004282DF
l00000000004282DF:
	goto l00000000004282EE
	// succ:  l00000000004282EE
l00000000004282E1:
	SCZO = cond(dl - Mem0[r9 + rax:byte])
	rcx = rax - 1<64>
	branch Test(EQ,Z) l00000000004282D3
	// succ:  l00000000004282EB l00000000004282D3
l00000000004282EB:
	rax = rcx
	// succ:  l00000000004282EE
l00000000004282EE:
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l00000000004282E1
	// succ:  l00000000004282F4 l00000000004282E1
l00000000004282F4:
	return
	// succ:  fn00000000004282C0_exit
fn00000000004282C0_exit:


// fn0000000000428300
// Return size: 8
define fn0000000000428300
fn0000000000428300_entry:
	rsp = fp
	// succ:  l0000000000428300
l0000000000428300:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = rdx
	rbx = rdx
	Mem0[rsp + 0x28<64>:word64] = r8
	eax = strlen(rcx)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	rdx = rbx
	rcx = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000042832D_thunk_fn0000000000428340
l000000000042832D_thunk_fn0000000000428340:
	call fn0000000000428340 (retsize: 0;)
	return
	// succ:  fn0000000000428300_exit
fn0000000000428300_exit:


// fn0000000000428340
// Return size: 8
define fn0000000000428340
fn0000000000428340_entry:
	rsp = fp
	// succ:  l0000000000428340
l0000000000428340:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = 0xFFFFFFFFFFFFFFFF<64>
	SZO = cond(r9 & r9)
	C = false
	r12 = rdx
	rbx = r8
	rdi = r9
	branch Test(EQ,Z) l0000000000428395
	goto l000000000042835F
	// succ:  l000000000042835F l0000000000428395
l0000000000428340:
l000000000042835F:
	rbp = Mem0[rcx:word64]
	rsi = Mem0[rbp - 0x18<64>:word64]
	SCZO = cond(rsi - r8)
	branch Test(ULE,CZ) l0000000000428395
	// succ:  l000000000042836B l0000000000428395
l000000000042836B:
	// succ:  l0000000000428370
l0000000000428370:
	edx = CONVERT(Mem0[rbp + 0<64> + rbx:byte], byte, int32)
	r8 = rdi
	rcx = r12
	rax = memchr(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l00000000004283A0
	// succ:  l0000000000428385 l00000000004283A0
l0000000000428385:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	SCZO = cond(rsi - rbx)
	branch Test(UGT,CZ) l0000000000428370
	// succ:  l000000000042838E l0000000000428370
l000000000042838E:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	// succ:  l0000000000428395
l0000000000428395:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428340_exit
l00000000004283A0:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428340_exit
fn0000000000428340_exit:


// fn00000000004283B0
// Return size: 0
define fn00000000004283B0
fn00000000004283B0_entry:
	rsp = fp
	// succ:  l00000000004283B0
l00000000004283B0:
	rdx = Mem0[rdx:word64]
	r9 = Mem0[rdx - 0x18<64>:word64]
	// succ:  l00000000004283B7_thunk_fn0000000000428340
l00000000004283B7_thunk_fn0000000000428340:
	call fn0000000000428340 (retsize: 0;)
	return
	// succ:  fn00000000004283B0_exit
fn00000000004283B0_exit:


// fn00000000004283C0
// Return size: 8
define fn00000000004283C0
fn00000000004283C0_entry:
	rsp = fp
	// succ:  l00000000004283C0
l00000000004283C0:
	edx = CONVERT(dl, byte, int32)
	// succ:  l00000000004283C3_thunk_fn0000000000428860
l00000000004283C3_thunk_fn0000000000428860:
	call fn0000000000428860 (retsize: 0;)
	return
	// succ:  fn00000000004283C0_exit
fn00000000004283C0_exit:


// fn00000000004283D0
// Return size: 8
define fn00000000004283D0
fn00000000004283D0_entry:
	rsp = fp
	// succ:  l00000000004283D0
l00000000004283D0:
	rax = rcx
	return
	// succ:  fn00000000004283D0_exit
fn00000000004283D0_exit:


// fn00000000004283E0
// Return size: 8
define fn00000000004283E0
fn00000000004283E0_entry:
	rsp = fp
	// succ:  l00000000004283E0
l00000000004283E0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = Mem0[rcx:word64]
	rax = 0x3FFFFFFFFFFFFFF9<64>
	rax = rax - Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(rax)
	rdx = rdx + rax
	SCZO = cond(rdx)
	SCZO = cond(rdx - r8)
	branch Test(ULT,C) l0000000000428402
	// succ:  l00000000004283FD l0000000000428402
l00000000004283FD:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004283E0_exit
l0000000000428402:
	rcx = r9
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l000000000042840F_thunk_fn0000000000428410
l000000000042840F_thunk_fn0000000000428410:
	call fn0000000000428410 (retsize: 0;)
	return
	// succ:  fn00000000004283E0_exit
fn00000000004283E0_exit:


// fn0000000000428410
// Return size: 8
define fn0000000000428410
fn0000000000428410_entry:
	rsp = fp
	// succ:  l0000000000428410
l0000000000428410:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = rdx
	rbx = rdx
	Mem0[rsp + 0x28<64>:word64] = r8
	eax = strlen(rcx)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	rdx = rbx
	rcx = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000042843D_thunk_fn0000000000428450
l000000000042843D_thunk_fn0000000000428450:
	call fn0000000000428450 (retsize: 0;)
	return
	// succ:  fn0000000000428410_exit
fn0000000000428410_exit:


// fn0000000000428450
// Return size: 8
define fn0000000000428450
fn0000000000428450_entry:
	rsp = fp
	// succ:  l0000000000428450
l0000000000428450:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = Mem0[rcx:word64]
	rax = 0xFFFFFFFFFFFFFFFF<64>
	rcx = Mem0[rsi - 0x18<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000428474
	goto l000000000042846B
	// succ:  l000000000042846B l0000000000428474
l0000000000428450:
l000000000042846B:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428450_exit
l0000000000428474:
	rcx = rcx + rax
	SCZO = cond(rcx)
	rbp = r9
	rdi = rdx
	SCZO = cond(r8 - rcx)
	branch Test(UGT,CZ) l0000000000428484
	// succ:  l0000000000428480_1 l0000000000428484
l0000000000428480_1:
	rcx = r8
	// succ:  l0000000000428484
l0000000000428484:
	rbx = rcx
	goto l000000000042849C
	// succ:  l000000000042849C
l0000000000428490:
	SZO = cond(rbx & rbx)
	C = false
	rax = rbx - 1<64>
	branch Test(EQ,Z) l00000000004284C0
	// succ:  l0000000000428499 l00000000004284C0
l0000000000428499:
	rbx = rax
	// succ:  l000000000042849C
l000000000042849C:
	edx = CONVERT(Mem0[rsi + rbx:byte], byte, int32)
	r8 = rbp
	rcx = rdi
	rax = memchr(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l0000000000428490
	// succ:  l00000000004284B0 l0000000000428490
l00000000004284B0:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428450_exit
l00000000004284C0:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428450_exit
fn0000000000428450_exit:


// fn00000000004284D0
// Return size: 0
define fn00000000004284D0
fn00000000004284D0_entry:
	rsp = fp
	// succ:  l00000000004284D0
l00000000004284D0:
	rdx = Mem0[rdx:word64]
	r9 = Mem0[rdx - 0x18<64>:word64]
	// succ:  l00000000004284D7_thunk_fn0000000000428450
l00000000004284D7_thunk_fn0000000000428450:
	call fn0000000000428450 (retsize: 0;)
	return
	// succ:  fn00000000004284D0_exit
fn00000000004284D0_exit:


// fn00000000004284E0
// Return size: 8
define fn00000000004284E0
fn00000000004284E0_entry:
	rsp = fp
	// succ:  l00000000004284E0
l00000000004284E0:
	r9 = Mem0[rcx:word64]
	rax = 0xFFFFFFFFFFFFFFFF<64>
	rcx = Mem0[r9 - 0x18<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l00000000004284F5
	// succ:  l00000000004284F3 l00000000004284F5
l00000000004284F3:
	return
	// succ:  fn00000000004284E0_exit
l00000000004284F5:
	rcx = rcx + rax
	SCZO = cond(rcx)
	SCZO = cond(r8 - rcx)
	rax = rcx
	branch Test(UGT,CZ) l0000000000428502
	// succ:  l00000000004284FE_1 l0000000000428502
l00000000004284FE_1:
	rax = r8
	// succ:  l0000000000428502
l0000000000428502:
	goto l0000000000428510
	// succ:  l0000000000428510
l0000000000428504:
	SZO = cond(rax & rax)
	C = false
	rcx = rax - 1<64>
	branch Test(EQ,Z) l0000000000428520
	// succ:  l000000000042850D l0000000000428520
l000000000042850D:
	rax = rcx
	// succ:  l0000000000428510
l0000000000428510:
	SCZO = cond(Mem0[r9 + rax:byte] - dl)
	branch Test(EQ,Z) l0000000000428504
	// succ:  l0000000000428516 l0000000000428504
l0000000000428516:
	goto l00000000004284F3
	// succ:  l00000000004284F3
l0000000000428520:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	return
	// succ:  fn00000000004284E0_exit
fn00000000004284E0_exit:


// fn0000000000428530
// Return size: 8
define fn0000000000428530
fn0000000000428530_entry:
	rsp = fp
	// succ:  l0000000000428530
l0000000000428530:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = rdx
	rbx = rdx
	Mem0[rsp + 0x28<64>:word64] = r8
	eax = strlen(rcx)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	rdx = rbx
	rcx = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000042855D_thunk_fn0000000000428570
l000000000042855D_thunk_fn0000000000428570:
	call fn0000000000428570 (retsize: 0;)
	return
	// succ:  fn0000000000428530_exit
fn0000000000428530_exit:


// fn0000000000428570
// Return size: 8
define fn0000000000428570
fn0000000000428570_entry:
	rsp = fp
	goto l0000000000428570
	// succ:  l0000000000428570
l000000000042782F_thunk_fn0000000000427830:
	call fn0000000000427830 (retsize: 0;)
	return
	// succ:  fn0000000000428570_exit
l0000000000428570:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = Mem0[rcx:word64]
	rax = 0xFFFFFFFFFFFFFFFF<64>
	r12 = rdx
	rbx = r8
	rbp = r9
	rdi = Mem0[rsi - 0x18<64>:word64]
	SCZO = cond(r8 - rdi)
	branch Test(ULT,C) l00000000004285A9
	goto l0000000000428596
	// succ:  l0000000000428596 l00000000004285A9
l0000000000428570:
	goto l000000000042782F_thunk_fn0000000000427830
	// succ:  l000000000042782F_thunk_fn0000000000427830
l0000000000428596:
	goto l00000000004285C0
	// succ:  l00000000004285C0
l00000000004285A0:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	SCZO = cond(rbx - rdi)
	branch Test(UGE,C) l00000000004285D0
	// succ:  l00000000004285A9 l00000000004285D0
l00000000004285A9:
	edx = CONVERT(Mem0[rsi + rbx:byte], byte, int32)
	r8 = rbp
	rcx = r12
	rax = memchr(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l00000000004285A0
	// succ:  l00000000004285BD l00000000004285A0
l00000000004285BD:
	rax = rbx
	// succ:  l00000000004285C0
l00000000004285C0:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428570_exit
l00000000004285D0:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428570_exit
fn0000000000428570_exit:


// fn00000000004285F0
// Return size: 0
define fn00000000004285F0
fn00000000004285F0_entry:
	rsp = fp
	// succ:  l00000000004285F0
l00000000004285F0:
	rdx = Mem0[rdx:word64]
	r9 = Mem0[rdx - 0x18<64>:word64]
	// succ:  l00000000004285F7_thunk_fn0000000000428570
l00000000004285F7_thunk_fn0000000000428570:
	call fn0000000000428570 (retsize: 0;)
	return
	// succ:  fn00000000004285F0_exit
fn00000000004285F0_exit:


// fn0000000000428600
// Return size: 8
define fn0000000000428600
fn0000000000428600_entry:
	rsp = fp
	// succ:  l0000000000428600
l0000000000428600:
	rcx = Mem0[rcx:word64]
	rax = 0xFFFFFFFFFFFFFFFF<64>
	r9 = Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(r8 - r9)
	branch Test(UGE,C) l0000000000428636
	// succ:  l0000000000428613 l0000000000428636
l0000000000428613:
	eax = CONVERT(Mem0[rcx + r8:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - dl)
	branch Test(EQ,Z) l0000000000428626
	// succ:  l000000000042861C l0000000000428626
l000000000042861C:
	goto l0000000000428640
	// succ:  l0000000000428640
l0000000000428620:
	SCZO = cond(Mem0[rcx + r8:byte] - al)
	branch Test(NE,Z) l0000000000428640
	// succ:  l0000000000428626 l0000000000428640
l0000000000428626:
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	SCZO = cond(r8 - r9)
	branch Test(ULT,C) l0000000000428620
	// succ:  l000000000042862F l0000000000428620
l000000000042862F:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	// succ:  l0000000000428636
l0000000000428636:
	return
	// succ:  fn0000000000428600_exit
l0000000000428640:
	rax = r8
	return
	// succ:  fn0000000000428600_exit
fn0000000000428600_exit:


// fn0000000000428650
// Return size: 8
define fn0000000000428650
fn0000000000428650_entry:
	rsp = fp
	// succ:  l0000000000428650
l0000000000428650:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r8 = Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdx - r8)
	branch Test(UGE,C) l0000000000428668
	// succ:  l0000000000428660 l0000000000428668
l0000000000428660:
	rax = rax + rdx
	SCZO = cond(rax)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000428650_exit
l0000000000428668:
	rcx = 0x000000000048D608<p64>
	call fn0000000000471560 (retsize: 8;)
	// succ:  l000000000042867F_thunk_fn0000000000428680
l000000000042867F_thunk_fn0000000000428680:
	call fn0000000000428680 (retsize: 0;)
	return
	// succ:  fn0000000000428650_exit
fn0000000000428650_exit:


// fn0000000000428680
// Return size: 8
define fn0000000000428680
fn0000000000428680_entry:
	rsp = fp
	// succ:  l0000000000428680
l0000000000428680:
	rax = Mem0[rcx:word64]
	rax = rax + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rax)
	return
	// succ:  fn0000000000428680_exit
fn0000000000428680_exit:


// fn0000000000428690
// Return size: 8
define fn0000000000428690
fn0000000000428690_entry:
	rsp = fp
	// succ:  l0000000000428690
l0000000000428690:
	eax = Mem0[rcx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax >>u 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	return
	// succ:  fn0000000000428690_exit
fn0000000000428690_exit:


// fn00000000004286A0
// Return size: 8
define fn00000000004286A0
fn00000000004286A0_entry:
	rsp = fp
	// succ:  l00000000004286A0
l00000000004286A0:
	eax = Mem0[rcx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	al = CONVERT(Test(GT,SZO), bool, int8)
	return
	// succ:  fn00000000004286A0_exit
fn00000000004286A0_exit:


// fn00000000004286B0
// Return size: 8
define fn00000000004286B0
fn00000000004286B0_entry:
	rsp = fp
	// succ:  l00000000004286B0
l00000000004286B0:
	rax = Mem0[rcx:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	rax = rax - 1<64> + rdx
	return
	// succ:  fn00000000004286B0_exit
fn00000000004286B0_exit:


// fn00000000004286C0
// Return size: 8
define fn00000000004286C0
fn00000000004286C0_entry:
	rsp = fp
	// succ:  l00000000004286C0
l00000000004286C0:
	rax = Mem0[rcx:word64]
	rax = rax + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rax)
	return
	// succ:  fn00000000004286C0_exit
fn00000000004286C0_exit:


// fn00000000004286D0
// Return size: 0
define fn00000000004286D0
fn00000000004286D0_entry:
	rsp = fp
	// succ:  l00000000004286D0
l00000000004286D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = r9
	r9 = Mem0[rcx:word64]
	r10 = rdx
	rbx = Mem0[r9 - 0x18<64>:word64]
	SCZO = cond(rax - rbx)
	branch Test(UGT,CZ) l0000000000428723
	// succ:  l00000000004286E7 l0000000000428723
l00000000004286E7:
	rbx = rbx - rax
	SCZO = cond(rbx)
	SCZO = cond(rbx - r8)
	branch Test(ULE,CZ) l00000000004286F1
	// succ:  l00000000004286ED_1 l00000000004286F1
l00000000004286ED_1:
	rbx = r8
	// succ:  l00000000004286F1
l00000000004286F1:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000042870B
	// succ:  l00000000004286F6 l000000000042870B
l00000000004286F6:
	SCZO = cond(rbx - 1<64>)
	rdx = r9 + rax
	branch Test(EQ,Z) l0000000000428714
	// succ:  l0000000000428700 l0000000000428714
l0000000000428700:
	r8 = rbx
	rcx = r10
	rax = memcpy(rcx, rdx, r8)
	// succ:  l000000000042870B
l000000000042870B:
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004286D0_exit
l0000000000428714:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[r10:byte] = al
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004286D0_exit
l0000000000428723:
	rdx = 0x000000000048D64C<p64>
	rcx = 0x000000000048D5D0<p64>
	r9 = rbx
	r8 = rax
	call fn0000000000471560 (retsize: 8;)
fn00000000004286D0_exit:


// fn0000000000428740
// Return size: 8
define fn0000000000428740
fn0000000000428740_entry:
	rsp = fp
	// succ:  l0000000000428740
l0000000000428740:
	rax = Mem0[rcx:word64]
	return
	// succ:  fn0000000000428740_exit
fn0000000000428740_exit:


// fn0000000000428750
// Return size: 8
define fn0000000000428750
fn0000000000428750_entry:
	rsp = fp
	// succ:  l0000000000428750
l0000000000428750:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = rdx
	rbx = rdx
	Mem0[rsp + 0x28<64>:word64] = r8
	eax = strlen(rcx)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	rdx = rbx
	rcx = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000042877D_thunk_fn0000000000428790
l000000000042877D_thunk_fn0000000000428790:
	call fn0000000000428790 (retsize: 0;)
	return
	// succ:  fn0000000000428750_exit
fn0000000000428750_exit:


// fn0000000000428790
// Return size: 8
define fn0000000000428790
fn0000000000428790_entry:
	rsp = fp
	// succ:  l0000000000428790
l0000000000428790:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = Mem0[rcx:word64]
	SZO = cond(r9 & r9)
	C = false
	rbp = Mem0[rsi - 0x18<64>:word64]
	branch Test(NE,Z) l00000000004287D0
	goto l00000000004287AA
	// succ:  l00000000004287AA l00000000004287D0
l0000000000428790:
l00000000004287AA:
	SCZO = cond(r8 - rbp)
	rax = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(UGT,CZ) l00000000004287B8
	// succ:  l00000000004287B4_1 l00000000004287B8
l00000000004287B4_1:
	rax = r8
	// succ:  l00000000004287B8
l00000000004287B8:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428790_exit
l00000000004287D0:
	SCZO = cond(r9 - rbp)
	rax = 0xFFFFFFFFFFFFFFFF<64>
	branch Test(UGT,CZ) l00000000004287B8
	// succ:  l00000000004287DC l00000000004287B8
l00000000004287DC:
	rbp = rbp - r9
	SCZO = cond(rbp)
	SCZO = cond(r8 - rbp)
	branch Test(UGT,CZ) l00000000004287B8
	// succ:  l00000000004287E4 l00000000004287B8
l00000000004287E4:
	rbx = r8 + 1<64>
	r14d = CONVERT(Mem0[rdx:byte], byte, word32)
	r14 = CONVERT(r14d, word32, uint64)
	r12 = r9 + rax
	r13 = rdx + 1<64>
	rsi = rsi + rbx
	SCZO = cond(rsi)
	goto l000000000042880D
	// succ:  l000000000042880D
l0000000000428800:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	SCZO = cond(rax - rbp)
	branch Test(UGT,CZ) l0000000000428831
	// succ:  l000000000042880D l0000000000428831
l000000000042880D:
	SCZO = cond(Mem0[rsi - 1<64>:byte] - r14b)
	rdi = rbx - 1<64>
	rax = rbx
	branch Test(NE,Z) l0000000000428800
	// succ:  l000000000042881A l0000000000428800
l000000000042881A:
	r8 = r12
	rdx = r13
	rcx = rsi
	eax = memcmp(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000428840
	// succ:  l000000000042882C l0000000000428840
l000000000042882C:
	rax = rbx
	goto l0000000000428800
	// succ:  l0000000000428800
l0000000000428831:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	goto l00000000004287B8
	// succ:  l00000000004287B8
l0000000000428840:
	rax = rdi
	goto l00000000004287B8
	// succ:  l00000000004287B8
fn0000000000428790_exit:


// fn0000000000428850
// Return size: 0
define fn0000000000428850
fn0000000000428850_entry:
	rsp = fp
	// succ:  l0000000000428850
l0000000000428850:
	rdx = Mem0[rdx:word64]
	r9 = Mem0[rdx - 0x18<64>:word64]
	// succ:  l0000000000428857_thunk_fn0000000000428790
l0000000000428857_thunk_fn0000000000428790:
	call fn0000000000428790 (retsize: 0;)
	return
	// succ:  fn0000000000428850_exit
fn0000000000428850_exit:


// fn0000000000428860
// Return size: 8
define fn0000000000428860
fn0000000000428860_entry:
	rsp = fp
	// succ:  l0000000000428860
l0000000000428860:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = Mem0[rcx:word64]
	rbx = 0xFFFFFFFFFFFFFFFF<64>
	rax = Mem0[rsi - 0x18<64>:word64]
	SCZO = cond(r8 - rax)
	branch Test(ULT,C) l0000000000428883
	// succ:  l0000000000428879 l0000000000428883
l0000000000428879:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428860_exit
l0000000000428883:
	rcx = rsi + r8
	rax = rax - r8
	SCZO = cond(rax)
	edx = CONVERT(dl, byte, int32)
	r8 = rax
	rax = memchr(rcx, rdx, r8)
	rdx = rax
	rdx = rdx - rsi
	SCZO = cond(rdx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004288A2
	// succ:  l000000000042889E_1 l00000000004288A2
l000000000042889E_1:
	rbx = rdx
	// succ:  l00000000004288A2
l00000000004288A2:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428860_exit
fn0000000000428860_exit:


// fn00000000004288B0
// Return size: 8
define fn00000000004288B0
fn00000000004288B0_entry:
	rsp = fp
	// succ:  l00000000004288B0
l00000000004288B0:
	rdx = Mem0[rdx:word64]
	rax = rcx
	Mem0[rcx:word64] = rdx
	return
	// succ:  fn00000000004288B0_exit
fn00000000004288B0_exit:


// fn00000000004288C0
// Return size: 8
define fn00000000004288C0
fn00000000004288C0_entry:
	rsp = fp
	// succ:  l00000000004288C0
l00000000004288C0:
	rax = Mem0[rcx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	return
	// succ:  fn00000000004288C0_exit
fn00000000004288C0_exit:


// fn00000000004288D0
// Return size: 8
define fn00000000004288D0
fn00000000004288D0_entry:
	rsp = fp
	// succ:  l00000000004288D0
l00000000004288D0:
	rax = Mem0[rcx:word64]
	return
	// succ:  fn00000000004288D0_exit
fn00000000004288D0_exit:


// fn00000000004288E0
// Return size: 8
define fn00000000004288E0
fn00000000004288E0_entry:
	rsp = fp
	// succ:  l00000000004288E0
l00000000004288E0:
	rax = Mem0[rcx:word64]
	return
	// succ:  fn00000000004288E0_exit
fn00000000004288E0_exit:


// fn00000000004288F0
// Return size: 8
define fn00000000004288F0
fn00000000004288F0_entry:
	rsp = fp
	// succ:  l00000000004288F0
l00000000004288F0:
	rdx = Mem0[rdx:word64]
	rax = rcx
	Mem0[rcx:word64] = rdx
	return
	// succ:  fn00000000004288F0_exit
fn00000000004288F0_exit:


// fn0000000000428900
// Return size: 8
define fn0000000000428900
fn0000000000428900_entry:
	rsp = fp
	// succ:  l0000000000428900
l0000000000428900:
	rax = Mem0[rcx:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	return
	// succ:  fn0000000000428900_exit
fn0000000000428900_exit:


// fn0000000000428910
// Return size: 8
define fn0000000000428910
fn0000000000428910_entry:
	rsp = fp
	// succ:  l0000000000428910
l0000000000428910:
	rax = Mem0[rcx:word64]
	return
	// succ:  fn0000000000428910_exit
fn0000000000428910_exit:


// fn0000000000428920
// Return size: 8
define fn0000000000428920
fn0000000000428920_entry:
	rsp = fp
	// succ:  l0000000000428920
l0000000000428920:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = rdx
	rbx = rdx
	Mem0[rsp + 0x28<64>:word64] = r8
	eax = strlen(rcx)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	rdx = rbx
	rcx = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000042894D_thunk_fn0000000000428960
l000000000042894D_thunk_fn0000000000428960:
	call fn0000000000428960 (retsize: 0;)
	return
	// succ:  fn0000000000428920_exit
fn0000000000428920_exit:


// fn0000000000428960
// Return size: 8
define fn0000000000428960
fn0000000000428960_entry:
	rsp = fp
	goto l0000000000428960
	// succ:  l0000000000428960
l000000000042873F_thunk_fn0000000000428740:
	call fn0000000000428740 (retsize: 0;)
	return
	// succ:  fn0000000000428960_exit
l0000000000428960:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdi = Mem0[rcx:word64]
	rax = 0xFFFFFFFFFFFFFFFF<64>
	rcx = Mem0[rdi - 0x18<64>:word64]
	SCZO = cond(r9 - rcx)
	branch Test(ULE,CZ) l0000000000428984
	goto l000000000042897B
	// succ:  l000000000042897B l0000000000428984
l0000000000428960:
	goto l000000000042873F_thunk_fn0000000000428740
	// succ:  l000000000042873F_thunk_fn0000000000428740
l000000000042897B:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428960_exit
l0000000000428984:
	rcx = rcx - r9
	SCZO = cond(rcx)
	rbx = r8
	rsi = r9
	SCZO = cond(rcx - r8)
	rbp = rdx
	branch Test(UGT,CZ) l0000000000428997
	// succ:  l0000000000428993_1 l0000000000428997
l0000000000428993_1:
	rbx = rcx
	// succ:  l0000000000428997
l0000000000428997:
	goto l00000000004289AC
	// succ:  l00000000004289AC
l00000000004289A0:
	SZO = cond(rbx & rbx)
	C = false
	rax = rbx - 1<64>
	branch Test(EQ,Z) l00000000004289D0
	// succ:  l00000000004289A9 l00000000004289D0
l00000000004289A9:
	rbx = rax
	// succ:  l00000000004289AC
l00000000004289AC:
	rcx = rdi + rbx
	r8 = rsi
	rdx = rbp
	eax = memcmp(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00000000004289A0
	// succ:  l00000000004289BF l00000000004289A0
l00000000004289BF:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428960_exit
l00000000004289D0:
	rax = 0xFFFFFFFFFFFFFFFF<64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428960_exit
fn0000000000428960_exit:


// fn00000000004289E0
// Return size: 0
define fn00000000004289E0
fn00000000004289E0_entry:
	rsp = fp
	// succ:  l00000000004289E0
l00000000004289E0:
	rdx = Mem0[rdx:word64]
	r9 = Mem0[rdx - 0x18<64>:word64]
	// succ:  l00000000004289E7_thunk_fn0000000000428960
l00000000004289E7_thunk_fn0000000000428960:
	call fn0000000000428960 (retsize: 0;)
	return
	// succ:  fn00000000004289E0_exit
fn00000000004289E0_exit:


// fn00000000004289F0
// Return size: 8
define fn00000000004289F0
fn00000000004289F0_entry:
	rsp = fp
	// succ:  l00000000004289F0
l00000000004289F0:
	r9 = Mem0[rcx:word64]
	rax = 0xFFFFFFFFFFFFFFFF<64>
	rcx = Mem0[r9 - 0x18<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000428A05
	// succ:  l0000000000428A03 l0000000000428A05
l0000000000428A03:
	return
	// succ:  fn00000000004289F0_exit
l0000000000428A05:
	rax = rax + rcx
	SCZO = cond(rax)
	SCZO = cond(r8 - rax)
	branch Test(UGT,CZ) l0000000000428A0F
	// succ:  l0000000000428A0B_1 l0000000000428A0F
l0000000000428A0B_1:
	rax = r8
	// succ:  l0000000000428A0F
l0000000000428A0F:
	goto l0000000000428A1E
	// succ:  l0000000000428A1E
l0000000000428A11:
	SCZO = cond(Mem0[r9 + rax:byte] - dl)
	rcx = rax - 1<64>
	branch Test(EQ,Z) l0000000000428A03
	// succ:  l0000000000428A1B l0000000000428A03
l0000000000428A1B:
	rax = rcx
	// succ:  l0000000000428A1E
l0000000000428A1E:
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l0000000000428A11
	// succ:  l0000000000428A24 l0000000000428A11
l0000000000428A24:
	return
	// succ:  fn00000000004289F0_exit
fn00000000004289F0_exit:


// fn0000000000428A30
// Return size: 8
define fn0000000000428A30
fn0000000000428A30_entry:
	rsp = fp
	// succ:  l0000000000428A30
l0000000000428A30:
	rax = Mem0[rcx:word64]
	rax = rax - 0x18<64>
	SCZO = cond(rax)
	return
	// succ:  fn0000000000428A30_exit
fn0000000000428A30_exit:


// fn0000000000428A40
// Return size: 8
define fn0000000000428A40
fn0000000000428A40_entry:
	rsp = fp
	// succ:  l0000000000428A40
l0000000000428A40:
	rax = Mem0[rcx:word64]
	return
	// succ:  fn0000000000428A40_exit
fn0000000000428A40_exit:


// fn0000000000428A50
// Return size: 8
define fn0000000000428A50
fn0000000000428A50_entry:
	rsp = fp
	// succ:  l0000000000428A50
l0000000000428A50:
	rax = Mem0[rcx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	return
	// succ:  fn0000000000428A50_exit
fn0000000000428A50_exit:


// fn0000000000428A60
// Return size: 8
define fn0000000000428A60
fn0000000000428A60_entry:
	rsp = fp
	// succ:  l0000000000428A60
l0000000000428A60:
	rdx = Mem0[rdx:word64]
	rax = rcx
	rdx = rdx + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rdx)
	Mem0[rcx:word64] = rdx
	return
	// succ:  fn0000000000428A60_exit
fn0000000000428A60_exit:


// fn0000000000428A70
// Return size: 8
define fn0000000000428A70
fn0000000000428A70_entry:
	rsp = fp
	// succ:  l0000000000428A70
l0000000000428A70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rax = Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r8 - rax)
	branch Test(UGT,CZ) l0000000000428A92
	// succ:  l0000000000428A84 l0000000000428A92
l0000000000428A84:
	call fn0000000000451F80 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428A70_exit
l0000000000428A92:
	rdx = 0x000000000048D76D<p64>
	rcx = 0x000000000048D5D0<p64>
	r9 = rax
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000428AAF_thunk_fn0000000000428AB0
l0000000000428AAF_thunk_fn0000000000428AB0:
	call fn0000000000428AB0 (retsize: 0;)
	return
	// succ:  fn0000000000428A70_exit
fn0000000000428A70_exit:


// fn0000000000428AB0
// Return size: 8
define fn0000000000428AB0
fn0000000000428AB0_entry:
	rsp = fp
	// succ:  l0000000000428AB0
l0000000000428AB0:
	rax = Mem0[rcx:word64]
	return
	// succ:  fn0000000000428AB0_exit
fn0000000000428AB0_exit:


// fn0000000000428AC0
// Return size: 8
define fn0000000000428AC0
fn0000000000428AC0_entry:
	rsp = fp
	// succ:  l0000000000428AC0
l0000000000428AC0:
	rax = Mem0[rcx:word64]
	rax = rax + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rax)
	return
	// succ:  fn0000000000428AC0_exit
fn0000000000428AC0_exit:


// fn0000000000428AD0
// Return size: 8
define fn0000000000428AD0
fn0000000000428AD0_entry:
	rsp = fp
	// succ:  l0000000000428AD0
l0000000000428AD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdi = Mem0[rcx:word64]
	rcx = rdx
	rbp = rdx
	eax = strlen(rcx)
	rbx = Mem0[rdi - 0x18<64>:word64]
	rdx = rbp
	rcx = rdi
	rsi = rax
	SCZO = cond(rax - rbx)
	r8 = rbx
	branch Test(UGT,CZ) l0000000000428AFD
	// succ:  l0000000000428AF9_1 l0000000000428AFD
l0000000000428AF9_1:
	r8 = rax
	// succ:  l0000000000428AFD
l0000000000428AFD:
	eax = memcmp(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000428B17
	// succ:  l0000000000428B06 l0000000000428B17
l0000000000428B06:
	rbx = rbx - rsi
	SCZO = cond(rbx)
	eax = 0x7FFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(rbx - 0x7FFFFFFF<64>)
	branch Test(LE,SZO) l0000000000428B20
	// succ:  l0000000000428B17 l0000000000428B20
l0000000000428B17:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428AD0_exit
l0000000000428B20:
	edx = 0x80000000<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(rbx - 0xFFFFFFFF80000000<64>)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	branch Test(LT,SO) l0000000000428B31
	// succ:  l0000000000428B2E_1 l0000000000428B31
l0000000000428B2E_1:
	eax = ebx
	// succ:  l0000000000428B31
l0000000000428B31:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428AD0_exit
fn0000000000428AD0_exit:


// fn0000000000428B40
// Return size: 8
define fn0000000000428B40
fn0000000000428B40_entry:
	rsp = fp
	// succ:  l0000000000428B40
l0000000000428B40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = Mem0[rcx:word64]
	rdx = Mem0[rdx:word64]
	rbx = Mem0[rcx - 0x18<64>:word64]
	rsi = Mem0[rdx - 0x18<64>:word64]
	r8 = rbx
	SCZO = cond(rsi - rbx)
	branch Test(UGT,CZ) l0000000000428B5E
	// succ:  l0000000000428B5A_1 l0000000000428B5E
l0000000000428B5A_1:
	r8 = rsi
	// succ:  l0000000000428B5E
l0000000000428B5E:
	eax = memcmp(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000428B78
	// succ:  l0000000000428B67 l0000000000428B78
l0000000000428B67:
	rbx = rbx - rsi
	SCZO = cond(rbx)
	eax = 0x7FFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(rbx - 0x7FFFFFFF<64>)
	branch Test(LE,SZO) l0000000000428B80
	// succ:  l0000000000428B78 l0000000000428B80
l0000000000428B78:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428B40_exit
l0000000000428B80:
	SCZO = cond(rbx - 0xFFFFFFFF80000000<64>)
	eax = 0x80000000<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(LT,SO) l0000000000428B8F
	// succ:  l0000000000428B8C_1 l0000000000428B8F
l0000000000428B8C_1:
	eax = ebx
	// succ:  l0000000000428B8F
l0000000000428B8F:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428B40_exit
fn0000000000428B40_exit:


// fn0000000000428BA0
// Return size: 8
define fn0000000000428BA0
fn0000000000428BA0_entry:
	rsp = fp
	// succ:  l0000000000428BA0
l0000000000428BA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rcx:word64]
	r12 = r9
	rsi = rdx
	r9 = Mem0[rbp - 0x18<64>:word64]
	SCZO = cond(rdx - r9)
	branch Test(UGT,CZ) l0000000000428C2C
	// succ:  l0000000000428BBC l0000000000428C2C
l0000000000428BBC:
	rbx = r9
	rcx = r12
	rbx = rbx - rdx
	SCZO = cond(rbx)
	SCZO = cond(rbx - r8)
	branch Test(ULE,CZ) l0000000000428BCC
	// succ:  l0000000000428BC8_1 l0000000000428BCC
l0000000000428BC8_1:
	rbx = r8
	// succ:  l0000000000428BCC
l0000000000428BCC:
	eax = strlen(rcx)
	r8 = rbx
	SCZO = cond(rax - rbx)
	rcx = rbp + 0<64> + rsi
	branch Test(UGT,CZ) l0000000000428BE0
	// succ:  l0000000000428BDC_1 l0000000000428BE0
l0000000000428BDC_1:
	r8 = rax
	// succ:  l0000000000428BE0
l0000000000428BE0:
	rdx = r12
	rdi = rax
	eax = memcmp(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000428C00
	// succ:  l0000000000428BEF l0000000000428C00
l0000000000428BEF:
	rbx = rbx - rdi
	SCZO = cond(rbx)
	eax = 0x7FFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(rbx - 0x7FFFFFFF<64>)
	branch Test(LE,SZO) l0000000000428C10
	// succ:  l0000000000428C00 l0000000000428C10
l0000000000428C00:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428BA0_exit
l0000000000428C10:
	edx = 0x80000000<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(rbx - 0xFFFFFFFF80000000<64>)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	branch Test(LT,SO) l0000000000428C21
	// succ:  l0000000000428C1E_1 l0000000000428C21
l0000000000428C1E_1:
	eax = ebx
	// succ:  l0000000000428C21
l0000000000428C21:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428BA0_exit
l0000000000428C2C:
	r8 = rdx
	rcx = 0x000000000048D5D0<p64>
	rdx = 0x000000000048D65F<p64>
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000428C4F_thunk_fn0000000000428C50
l0000000000428C4F_thunk_fn0000000000428C50:
	call fn0000000000428C50 (retsize: 0;)
	return
	// succ:  fn0000000000428BA0_exit
fn0000000000428BA0_exit:


// fn0000000000428C50
// Return size: 8
define fn0000000000428C50
fn0000000000428C50_entry:
	rsp = fp
	// succ:  l0000000000428C50
l0000000000428C50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = Mem0[rcx:word64]
	rsi = Mem0[rsp + 0x60<64>:word64]
	rbx = Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(rdx - rbx)
	branch Test(UGT,CZ) l0000000000428CB8
	// succ:  l0000000000428C67 l0000000000428CB8
l0000000000428C67:
	rbx = rbx - rdx
	SCZO = cond(rbx)
	SCZO = cond(rbx - r8)
	branch Test(ULE,CZ) l0000000000428C71
	// succ:  l0000000000428C6D_1 l0000000000428C71
l0000000000428C6D_1:
	rbx = r8
	// succ:  l0000000000428C71
l0000000000428C71:
	r8 = rsi
	SCZO = cond(rbx - rsi)
	branch Test(UGT,CZ) l0000000000428C7B
	// succ:  l0000000000428C77_1 l0000000000428C7B
l0000000000428C77_1:
	r8 = rbx
	// succ:  l0000000000428C7B
l0000000000428C7B:
	rcx = rcx + rdx
	SCZO = cond(rcx)
	rdx = r9
	eax = memcmp(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000428C9B
	// succ:  l0000000000428C8A l0000000000428C9B
l0000000000428C8A:
	rbx = rbx - rsi
	SCZO = cond(rbx)
	eax = 0x7FFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(rbx - 0x7FFFFFFF<64>)
	branch Test(LE,SZO) l0000000000428CA2
	// succ:  l0000000000428C9B l0000000000428CA2
l0000000000428C9B:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428C50_exit
l0000000000428CA2:
	SCZO = cond(rbx - 0xFFFFFFFF80000000<64>)
	eax = 0x80000000<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(LT,SO) l0000000000428CB1
	// succ:  l0000000000428CAE_1 l0000000000428CB1
l0000000000428CAE_1:
	eax = ebx
	// succ:  l0000000000428CB1
l0000000000428CB1:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428C50_exit
l0000000000428CB8:
	r8 = rdx
	rcx = 0x000000000048D5D0<p64>
	rdx = 0x000000000048D65F<p64>
	r9 = rbx
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000428CDF_thunk_fn0000000000428CE0
l0000000000428CDF_thunk_fn0000000000428CE0:
	call fn0000000000428CE0 (retsize: 0;)
	return
	// succ:  fn0000000000428C50_exit
fn0000000000428C50_exit:


// fn0000000000428CE0
// Return size: 8
define fn0000000000428CE0
fn0000000000428CE0_entry:
	rsp = fp
	// succ:  l0000000000428CE0
l0000000000428CE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = Mem0[rcx:word64]
	rax = rdx
	rbx = Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(rdx - rbx)
	branch Test(UGT,CZ) l0000000000428D4A
	// succ:  l0000000000428CF5 l0000000000428D4A
l0000000000428CF5:
	rbx = rbx - rdx
	SCZO = cond(rbx)
	rdx = Mem0[r9:word64]
	SCZO = cond(rbx - r8)
	branch Test(ULE,CZ) l0000000000428D02
	// succ:  l0000000000428CFE_1 l0000000000428D02
l0000000000428CFE_1:
	rbx = r8
	// succ:  l0000000000428D02
l0000000000428D02:
	rsi = Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rbx - rsi)
	r8 = rsi
	branch Test(UGT,CZ) l0000000000428D10
	// succ:  l0000000000428D0C_1 l0000000000428D10
l0000000000428D0C_1:
	r8 = rbx
	// succ:  l0000000000428D10
l0000000000428D10:
	rcx = rcx + rax
	SCZO = cond(rcx)
	eax = memcmp(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000428D2D
	// succ:  l0000000000428D1C l0000000000428D2D
l0000000000428D1C:
	rbx = rbx - rsi
	SCZO = cond(rbx)
	eax = 0x7FFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(rbx - 0x7FFFFFFF<64>)
	branch Test(LE,SZO) l0000000000428D34
	// succ:  l0000000000428D2D l0000000000428D34
l0000000000428D2D:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428CE0_exit
l0000000000428D34:
	SCZO = cond(rbx - 0xFFFFFFFF80000000<64>)
	eax = 0x80000000<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(LT,SO) l0000000000428D43
	// succ:  l0000000000428D40_1 l0000000000428D43
l0000000000428D40_1:
	eax = ebx
	// succ:  l0000000000428D43
l0000000000428D43:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428CE0_exit
l0000000000428D4A:
	r8 = rdx
	rcx = 0x000000000048D5D0<p64>
	rdx = 0x000000000048D65F<p64>
	r9 = rbx
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000428D6F_thunk_fn0000000000428D70
l0000000000428D6F_thunk_fn0000000000428D70:
	call fn0000000000428D70 (retsize: 0;)
	return
	// succ:  fn0000000000428CE0_exit
fn0000000000428CE0_exit:


// fn0000000000428D70
// Return size: 8
define fn0000000000428D70
fn0000000000428D70_entry:
	rsp = fp
	// succ:  l0000000000428D70
l0000000000428D70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = Mem0[rcx:word64]
	r10 = Mem0[rsp + 0x60<64>:word64]
	rax = rdx
	r11 = Mem0[rsp + 0x68<64>:word64]
	rbx = Mem0[rcx - 0x18<64>:word64]
	SCZO = cond(rdx - rbx)
	branch Test(UGT,CZ) l0000000000428E1C
	// succ:  l0000000000428D93 l0000000000428E1C
l0000000000428D93:
	rdx = Mem0[r9:word64]
	r9 = Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(r10 - r9)
	branch Test(UGT,CZ) l0000000000428E06
	// succ:  l0000000000428D9F l0000000000428E06
l0000000000428D9F:
	rbx = rbx - rax
	SCZO = cond(rbx)
	rsi = r9
	SCZO = cond(rbx - r8)
	branch Test(ULE,CZ) l0000000000428DAC
	// succ:  l0000000000428DA8_1 l0000000000428DAC
l0000000000428DA8_1:
	rbx = r8
	// succ:  l0000000000428DAC
l0000000000428DAC:
	rsi = rsi - r10
	SCZO = cond(rsi)
	SCZO = cond(rsi - r11)
	branch Test(ULE,CZ) l0000000000428DB6
	// succ:  l0000000000428DB2_1 l0000000000428DB6
l0000000000428DB2_1:
	rsi = r11
	// succ:  l0000000000428DB6
l0000000000428DB6:
	SCZO = cond(rbx - rsi)
	r8 = rsi
	branch Test(UGT,CZ) l0000000000428DC0
	// succ:  l0000000000428DBC_1 l0000000000428DC0
l0000000000428DBC_1:
	r8 = rbx
	// succ:  l0000000000428DC0
l0000000000428DC0:
	rdx = rdx + r10
	SCZO = cond(rdx)
	rcx = rcx + rax
	SCZO = cond(rcx)
	eax = memcmp(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000428DE0
	// succ:  l0000000000428DCF l0000000000428DE0
l0000000000428DCF:
	rbx = rbx - rsi
	SCZO = cond(rbx)
	eax = 0x7FFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(rbx - 0x7FFFFFFF<64>)
	branch Test(LE,SZO) l0000000000428DF0
	// succ:  l0000000000428DE0 l0000000000428DF0
l0000000000428DE0:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428D70_exit
l0000000000428DF0:
	SCZO = cond(rbx - 0xFFFFFFFF80000000<64>)
	eax = 0x80000000<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(LT,SO) l0000000000428DFF
	// succ:  l0000000000428DFC_1 l0000000000428DFF
l0000000000428DFC_1:
	eax = ebx
	// succ:  l0000000000428DFF
l0000000000428DFF:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428D70_exit
l0000000000428E06:
	rdx = 0x000000000048D65F<p64>
	rcx = 0x000000000048D5D0<p64>
	r8 = r10
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000428E1C
l0000000000428E1C:
	r8 = rdx
	rcx = 0x000000000048D5D0<p64>
	rdx = 0x000000000048D65F<p64>
	r9 = rbx
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000428E3F_thunk_fn0000000000428E40
l0000000000428E3F_thunk_fn0000000000428E40:
	call fn0000000000428E40 (retsize: 0;)
	return
	// succ:  fn0000000000428D70_exit
fn0000000000428D70_exit:


// fn0000000000428E40
// Return size: 8
define fn0000000000428E40
fn0000000000428E40_entry:
	rsp = fp
	// succ:  l0000000000428E40
l0000000000428E40:
	rdx = Mem0[rdx:word64]
	rax = rcx
	rdx = rdx + Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rdx)
	Mem0[rcx:word64] = rdx
	return
	// succ:  fn0000000000428E40_exit
fn0000000000428E40_exit:


// fn0000000000428E50
// Return size: 8
define fn0000000000428E50
fn0000000000428E50_entry:
	rsp = fp
	// succ:  l0000000000428E50
l0000000000428E50:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = rdx
	rdx = Mem0[rcx:word64]
	r9 = Mem0[rdx - 0x18<64>:word64]
	SCZO = cond(rax - r9)
	branch Test(UGT,CZ) l0000000000428E68
	// succ:  l0000000000428E63 l0000000000428E68
l0000000000428E63:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000428E50_exit
l0000000000428E68:
	rcx = 0x000000000048D5D0<p64>
	rdx = r8
	r8 = rax
	call fn0000000000471560 (retsize: 8;)
	// succ:  l0000000000428E7F_thunk_fn0000000000428E80
l0000000000428E7F_thunk_fn0000000000428E80:
	call fn0000000000428E80 (retsize: 0;)
	return
	// succ:  fn0000000000428E50_exit
fn0000000000428E50_exit:


// fn0000000000428E80
// Return size: 8
define fn0000000000428E80
fn0000000000428E80_entry:
	rsp = fp
	// succ:  l0000000000428E80
l0000000000428E80:
	rax = Mem0[rcx:word64]
	rax = Mem0[rax - 0x18<64>:word64]
	rax = rax - rdx
	SCZO = cond(rax)
	SCZO = cond(rax - r8)
	branch Test(ULE,CZ) l0000000000428E91
	// succ:  l0000000000428E8D_1 l0000000000428E91
l0000000000428E8D_1:
	rax = r8
	// succ:  l0000000000428E91
l0000000000428E91:
	return
	// succ:  fn0000000000428E80_exit
fn0000000000428E80_exit:


// fn0000000000428EA0
// Return size: 8
define fn0000000000428EA0
fn0000000000428EA0_entry:
	rsp = fp
	// succ:  l0000000000428EA0
l0000000000428EA0:
	rax = Mem0[rcx:word64]
	rax = Mem0[rax - 0x10<64>:word64]
	return
	// succ:  fn0000000000428EA0_exit
fn0000000000428EA0_exit:


// fn0000000000428EB0
// Return size: 8
define fn0000000000428EB0
fn0000000000428EB0_entry:
	rsp = fp
	// succ:  l0000000000428EB0
l0000000000428EB0:
	rax = 0x3FFFFFFFFFFFFFF9<64>
	return
	// succ:  fn0000000000428EB0_exit
fn0000000000428EB0_exit:


// fn0000000000428EC0
// Return size: 8
define fn0000000000428EC0
fn0000000000428EC0_entry:
	rsp = fp
	// succ:  l0000000000428EC0
l0000000000428EC0:
	rax = Mem0[rcx:word64]
	return
	// succ:  fn0000000000428EC0_exit
fn0000000000428EC0_exit:


// fn0000000000428ED0
// Return size: 8
define fn0000000000428ED0
fn0000000000428ED0_entry:
	rsp = fp
	// succ:  l0000000000428ED0
l0000000000428ED0:
	rax = rdx
	rax = rax + Mem0[rcx:word64]
	SCZO = cond(rax)
	return
	// succ:  fn0000000000428ED0_exit
fn0000000000428ED0_exit:


// fn0000000000428EE0
// Return size: 8
define fn0000000000428EE0
fn0000000000428EE0_entry:
	rsp = fp
	// succ:  l0000000000428EE0
l0000000000428EE0:
	rax = 0x000000000048E080<p64>
	return
	// succ:  fn0000000000428EE0_exit
fn0000000000428EE0_exit:


// fn0000000000428EF0
// Return size: 8
define fn0000000000428EF0
fn0000000000428EF0_entry:
	rsp = fp
	// succ:  l0000000000428EF0
l0000000000428EF0:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = rcx
	rcx = Mem0[rdx + 8<64>:word64]
	r8 = Mem0[rcx:word64]
	r9 = Mem0[r8 + 0x20<64>:word64]
	r8d = Mem0[rdx:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rdx = 0x000000000042ADD0<p64>
	SCZO = cond(r9 - rdx)
	branch Test(NE,Z) l0000000000428F20
	// succ:  l0000000000428F11 l0000000000428F20
l0000000000428F11:
	Mem0[rax:word32] = r8d
	Mem0[rax + 8<64>:word64] = rcx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000428EF0_exit
l0000000000428F20:
	rdx = rcx
	Mem0[rsp + 0x28<64>:word64] = rax
	rcx = rax
	call r9 (retsize: 8;)
	rax = Mem0[rsp + 0x28<64>:word64]
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000428EF0_exit
fn0000000000428EF0_exit:


// fn0000000000428F40
// Return size: 8
define fn0000000000428F40
fn0000000000428F40_entry:
	rsp = fp
	// succ:  l0000000000428F40
l0000000000428F40:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdx = 0x0000000000429080<p64>
	rax = Mem0[rax + 0x50<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000428F63
	// succ:  l0000000000428F57 l0000000000428F63
l0000000000428F57:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000428F40_exit
l0000000000428F63:
	call rax (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000428F40_exit
fn0000000000428F40_exit:


// fn0000000000428F70
// Return size: 8
define fn0000000000428F70
fn0000000000428F70_entry:
	rsp = fp
	// succ:  l0000000000428F70
l0000000000428F70:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdx = 0x0000000000429090<p64>
	rax = Mem0[rax + 0x48<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000428F93
	// succ:  l0000000000428F87 l0000000000428F93
l0000000000428F87:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000428F70_exit
l0000000000428F93:
	call rax (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000428F70_exit
fn0000000000428F70_exit:


// fn0000000000428FA0
// Return size: 8
define fn0000000000428FA0
fn0000000000428FA0_entry:
	rsp = fp
	// succ:  l0000000000428FA0
l0000000000428FA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x0000000000429170<p64>
	rax = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000428FE0
	// succ:  l0000000000428FBB l0000000000428FE0
l0000000000428FBB:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428FA0_exit
l0000000000428FE0:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428FA0_exit
fn0000000000428FA0_exit:


// fn0000000000428FF0
// Return size: 8
define fn0000000000428FF0
fn0000000000428FF0_entry:
	rsp = fp
	// succ:  l0000000000428FF0
l0000000000428FF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000428FF0_exit
fn0000000000428FF0_exit:


// fn0000000000429020
// Return size: 8
define fn0000000000429020
fn0000000000429020_entry:
	rsp = fp
	// succ:  l0000000000429020
l0000000000429020:
	rax = Mem0[rcx:word64]
	rdx = 0x00000000004291A0<p64>
	rax = Mem0[rax + 0x40<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000429040
	// succ:  l0000000000429033 l0000000000429040
l0000000000429033:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429020_exit
l0000000000429040:
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000429020_exit
fn0000000000429020_exit:


// fn0000000000429050
// Return size: 8
define fn0000000000429050
fn0000000000429050_entry:
	rsp = fp
	// succ:  l0000000000429050
l0000000000429050:
	rax = Mem0[rcx:word64]
	rdx = 0x00000000004291B0<p64>
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000429070
	// succ:  l0000000000429063 l0000000000429070
l0000000000429063:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x21<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429050_exit
l0000000000429070:
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000429050_exit
fn0000000000429050_exit:


// fn0000000000429080
// Return size: 8
define fn0000000000429080
fn0000000000429080_entry:
	rsp = fp
	// succ:  l0000000000429080
l0000000000429080:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429080_exit
fn0000000000429080_exit:


// fn0000000000429090
// Return size: 8
define fn0000000000429090
fn0000000000429090_entry:
	rsp = fp
	// succ:  l0000000000429090
l0000000000429090:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429090_exit
fn0000000000429090_exit:


// fn00000000004290A0
// Return size: 8
define fn00000000004290A0
fn00000000004290A0_entry:
	rsp = fp
	// succ:  l00000000004290A0
l00000000004290A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x00000000004291C0<p64>
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l00000000004290E0
	// succ:  l00000000004290BB l00000000004290E0
l00000000004290BB:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x48<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004290A0_exit
l00000000004290E0:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004290A0_exit
fn00000000004290A0_exit:


// fn00000000004290F0
// Return size: 8
define fn00000000004290F0
fn00000000004290F0_entry:
	rsp = fp
	// succ:  l00000000004290F0
l00000000004290F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x00000000004291F0<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000429130
	// succ:  l000000000042910B l0000000000429130
l000000000042910B:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004290F0_exit
l0000000000429130:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004290F0_exit
fn00000000004290F0_exit:


// fn0000000000429140
// Return size: 8
define fn0000000000429140
fn0000000000429140_entry:
	rsp = fp
	// succ:  l0000000000429140
l0000000000429140:
	rax = Mem0[rcx:word64]
	rdx = 0x0000000000429220<p64>
	rax = Mem0[rax + 0x18<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000429160
	// succ:  l0000000000429153 l0000000000429160
l0000000000429153:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x22<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429140_exit
l0000000000429160:
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000429140_exit
fn0000000000429140_exit:


// fn0000000000429170
// Return size: 8
define fn0000000000429170
fn0000000000429170_entry:
	rsp = fp
	// succ:  l0000000000429170
l0000000000429170:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429170_exit
fn0000000000429170_exit:


// fn00000000004291A0
// Return size: 8
define fn00000000004291A0
fn00000000004291A0_entry:
	rsp = fp
	// succ:  l00000000004291A0
l00000000004291A0:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004291A0_exit
fn00000000004291A0_exit:


// fn00000000004291B0
// Return size: 8
define fn00000000004291B0
fn00000000004291B0_entry:
	rsp = fp
	// succ:  l00000000004291B0
l00000000004291B0:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x21<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004291B0_exit
fn00000000004291B0_exit:


// fn00000000004291C0
// Return size: 8
define fn00000000004291C0
fn00000000004291C0_entry:
	rsp = fp
	// succ:  l00000000004291C0
l00000000004291C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x48<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004291C0_exit
fn00000000004291C0_exit:


// fn00000000004291F0
// Return size: 8
define fn00000000004291F0
fn00000000004291F0_entry:
	rsp = fp
	// succ:  l00000000004291F0
l00000000004291F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004291F0_exit
fn00000000004291F0_exit:


// fn0000000000429220
// Return size: 8
define fn0000000000429220
fn0000000000429220_entry:
	rsp = fp
	// succ:  l0000000000429220
l0000000000429220:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x22<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429220_exit
fn0000000000429220_exit:


// fn0000000000429230
// Return size: 8
define fn0000000000429230
fn0000000000429230_entry:
	rsp = fp
	// succ:  l0000000000429230
l0000000000429230:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x0000000000428FF0<p64>
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000429270
	// succ:  l000000000042924B l0000000000429270
l000000000042924B:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429230_exit
l0000000000429270:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429230_exit
fn0000000000429230_exit:


// fn0000000000429280
// Return size: 8
define fn0000000000429280
fn0000000000429280_entry:
	rsp = fp
	// succ:  l0000000000429280
l0000000000429280:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdx = 0x00000000004293C0<p64>
	rax = Mem0[rax + 0x50<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000004292A3
	// succ:  l0000000000429297 l00000000004292A3
l0000000000429297:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000429280_exit
l00000000004292A3:
	call rax (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000429280_exit
fn0000000000429280_exit:


// fn00000000004292B0
// Return size: 8
define fn00000000004292B0
fn00000000004292B0_entry:
	rsp = fp
	// succ:  l00000000004292B0
l00000000004292B0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdx = 0x00000000004293D0<p64>
	rax = Mem0[rax + 0x48<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000004292D3
	// succ:  l00000000004292C7 l00000000004292D3
l00000000004292C7:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004292B0_exit
l00000000004292D3:
	call rax (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004292B0_exit
fn00000000004292B0_exit:


// fn00000000004292E0
// Return size: 8
define fn00000000004292E0
fn00000000004292E0_entry:
	rsp = fp
	// succ:  l00000000004292E0
l00000000004292E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x00000000004294B0<p64>
	rax = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000429320
	// succ:  l00000000004292FB l0000000000429320
l00000000004292FB:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004292E0_exit
l0000000000429320:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004292E0_exit
fn00000000004292E0_exit:


// fn0000000000429330
// Return size: 8
define fn0000000000429330
fn0000000000429330_entry:
	rsp = fp
	// succ:  l0000000000429330
l0000000000429330:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429330_exit
fn0000000000429330_exit:


// fn0000000000429360
// Return size: 8
define fn0000000000429360
fn0000000000429360_entry:
	rsp = fp
	// succ:  l0000000000429360
l0000000000429360:
	rax = Mem0[rcx:word64]
	rdx = 0x00000000004294E0<p64>
	rax = Mem0[rax + 0x40<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000429380
	// succ:  l0000000000429373 l0000000000429380
l0000000000429373:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429360_exit
l0000000000429380:
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000429360_exit
fn0000000000429360_exit:


// fn0000000000429390
// Return size: 8
define fn0000000000429390
fn0000000000429390_entry:
	rsp = fp
	// succ:  l0000000000429390
l0000000000429390:
	rax = Mem0[rcx:word64]
	rdx = 0x00000000004294F0<p64>
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000004293B0
	// succ:  l00000000004293A3 l00000000004293B0
l00000000004293A3:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x21<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429390_exit
l00000000004293B0:
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000429390_exit
fn0000000000429390_exit:


// fn00000000004293C0
// Return size: 8
define fn00000000004293C0
fn00000000004293C0_entry:
	rsp = fp
	// succ:  l00000000004293C0
l00000000004293C0:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004293C0_exit
fn00000000004293C0_exit:


// fn00000000004293D0
// Return size: 8
define fn00000000004293D0
fn00000000004293D0_entry:
	rsp = fp
	// succ:  l00000000004293D0
l00000000004293D0:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004293D0_exit
fn00000000004293D0_exit:


// fn00000000004293E0
// Return size: 8
define fn00000000004293E0
fn00000000004293E0_entry:
	rsp = fp
	// succ:  l00000000004293E0
l00000000004293E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x0000000000429500<p64>
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000429420
	// succ:  l00000000004293FB l0000000000429420
l00000000004293FB:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x48<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004293E0_exit
l0000000000429420:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004293E0_exit
fn00000000004293E0_exit:


// fn0000000000429430
// Return size: 8
define fn0000000000429430
fn0000000000429430_entry:
	rsp = fp
	// succ:  l0000000000429430
l0000000000429430:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x0000000000429530<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000429470
	// succ:  l000000000042944B l0000000000429470
l000000000042944B:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429430_exit
l0000000000429470:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429430_exit
fn0000000000429430_exit:


// fn0000000000429480
// Return size: 8
define fn0000000000429480
fn0000000000429480_entry:
	rsp = fp
	// succ:  l0000000000429480
l0000000000429480:
	rax = Mem0[rcx:word64]
	rdx = 0x0000000000429560<p64>
	rax = Mem0[rax + 0x18<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000004294A0
	// succ:  l0000000000429493 l00000000004294A0
l0000000000429493:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x22<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429480_exit
l00000000004294A0:
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000429480_exit
fn0000000000429480_exit:


// fn00000000004294B0
// Return size: 8
define fn00000000004294B0
fn00000000004294B0_entry:
	rsp = fp
	// succ:  l00000000004294B0
l00000000004294B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004294B0_exit
fn00000000004294B0_exit:


// fn00000000004294E0
// Return size: 8
define fn00000000004294E0
fn00000000004294E0_entry:
	rsp = fp
	// succ:  l00000000004294E0
l00000000004294E0:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004294E0_exit
fn00000000004294E0_exit:


// fn00000000004294F0
// Return size: 8
define fn00000000004294F0
fn00000000004294F0_entry:
	rsp = fp
	// succ:  l00000000004294F0
l00000000004294F0:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x21<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004294F0_exit
fn00000000004294F0_exit:


// fn0000000000429500
// Return size: 8
define fn0000000000429500
fn0000000000429500_entry:
	rsp = fp
	// succ:  l0000000000429500
l0000000000429500:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x48<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429500_exit
fn0000000000429500_exit:


// fn0000000000429530
// Return size: 8
define fn0000000000429530
fn0000000000429530_entry:
	rsp = fp
	// succ:  l0000000000429530
l0000000000429530:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429530_exit
fn0000000000429530_exit:


// fn0000000000429560
// Return size: 8
define fn0000000000429560
fn0000000000429560_entry:
	rsp = fp
	// succ:  l0000000000429560
l0000000000429560:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x22<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429560_exit
fn0000000000429560_exit:


// fn0000000000429570
// Return size: 8
define fn0000000000429570
fn0000000000429570_entry:
	rsp = fp
	// succ:  l0000000000429570
l0000000000429570:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x0000000000429330<p64>
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l00000000004295B0
	// succ:  l000000000042958B l00000000004295B0
l000000000042958B:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429570_exit
l00000000004295B0:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429570_exit
fn0000000000429570_exit:


// fn00000000004295C0
// Return size: 8
define fn00000000004295C0
fn00000000004295C0_entry:
	rsp = fp
	// succ:  l00000000004295C0
l00000000004295C0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdx = 0x0000000000429700<p64>
	rax = Mem0[rax + 0x50<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000004295E3
	// succ:  l00000000004295D7 l00000000004295E3
l00000000004295D7:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004295C0_exit
l00000000004295E3:
	call rax (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004295C0_exit
fn00000000004295C0_exit:


// fn00000000004295F0
// Return size: 8
define fn00000000004295F0
fn00000000004295F0_entry:
	rsp = fp
	// succ:  l00000000004295F0
l00000000004295F0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdx = 0x0000000000429710<p64>
	rax = Mem0[rax + 0x48<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000429613
	// succ:  l0000000000429607 l0000000000429613
l0000000000429607:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004295F0_exit
l0000000000429613:
	call rax (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004295F0_exit
fn00000000004295F0_exit:


// fn0000000000429620
// Return size: 8
define fn0000000000429620
fn0000000000429620_entry:
	rsp = fp
	// succ:  l0000000000429620
l0000000000429620:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x00000000004297F0<p64>
	rax = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000429660
	// succ:  l000000000042963B l0000000000429660
l000000000042963B:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429620_exit
l0000000000429660:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429620_exit
fn0000000000429620_exit:


// fn0000000000429670
// Return size: 8
define fn0000000000429670
fn0000000000429670_entry:
	rsp = fp
	// succ:  l0000000000429670
l0000000000429670:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429670_exit
fn0000000000429670_exit:


// fn00000000004296A0
// Return size: 8
define fn00000000004296A0
fn00000000004296A0_entry:
	rsp = fp
	// succ:  l00000000004296A0
l00000000004296A0:
	rax = Mem0[rcx:word64]
	rdx = 0x0000000000429820<p64>
	rax = Mem0[rax + 0x40<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000004296C0
	// succ:  l00000000004296B3 l00000000004296C0
l00000000004296B3:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004296A0_exit
l00000000004296C0:
	call rax (retsize: 0;)
	return
	// succ:  fn00000000004296A0_exit
fn00000000004296A0_exit:


// fn00000000004296D0
// Return size: 8
define fn00000000004296D0
fn00000000004296D0_entry:
	rsp = fp
	// succ:  l00000000004296D0
l00000000004296D0:
	rax = Mem0[rcx:word64]
	rdx = 0x0000000000429830<p64>
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000004296F0
	// succ:  l00000000004296E3 l00000000004296F0
l00000000004296E3:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x22<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004296D0_exit
l00000000004296F0:
	call rax (retsize: 0;)
	return
	// succ:  fn00000000004296D0_exit
fn00000000004296D0_exit:


// fn0000000000429700
// Return size: 8
define fn0000000000429700
fn0000000000429700_entry:
	rsp = fp
	// succ:  l0000000000429700
l0000000000429700:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429700_exit
fn0000000000429700_exit:


// fn0000000000429710
// Return size: 8
define fn0000000000429710
fn0000000000429710_entry:
	rsp = fp
	// succ:  l0000000000429710
l0000000000429710:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429710_exit
fn0000000000429710_exit:


// fn0000000000429720
// Return size: 8
define fn0000000000429720
fn0000000000429720_entry:
	rsp = fp
	// succ:  l0000000000429720
l0000000000429720:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x0000000000429840<p64>
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000429760
	// succ:  l000000000042973B l0000000000429760
l000000000042973B:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x48<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429720_exit
l0000000000429760:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429720_exit
fn0000000000429720_exit:


// fn0000000000429770
// Return size: 8
define fn0000000000429770
fn0000000000429770_entry:
	rsp = fp
	// succ:  l0000000000429770
l0000000000429770:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x0000000000429870<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l00000000004297B0
	// succ:  l000000000042978B l00000000004297B0
l000000000042978B:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429770_exit
l00000000004297B0:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429770_exit
fn0000000000429770_exit:


// fn00000000004297C0
// Return size: 8
define fn00000000004297C0
fn00000000004297C0_entry:
	rsp = fp
	// succ:  l00000000004297C0
l00000000004297C0:
	rax = Mem0[rcx:word64]
	rdx = 0x00000000004298A0<p64>
	rax = Mem0[rax + 0x18<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l00000000004297E0
	// succ:  l00000000004297D3 l00000000004297E0
l00000000004297D3:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x24<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004297C0_exit
l00000000004297E0:
	call rax (retsize: 0;)
	return
	// succ:  fn00000000004297C0_exit
fn00000000004297C0_exit:


// fn00000000004297F0
// Return size: 8
define fn00000000004297F0
fn00000000004297F0_entry:
	rsp = fp
	// succ:  l00000000004297F0
l00000000004297F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004297F0_exit
fn00000000004297F0_exit:


// fn0000000000429820
// Return size: 8
define fn0000000000429820
fn0000000000429820_entry:
	rsp = fp
	// succ:  l0000000000429820
l0000000000429820:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429820_exit
fn0000000000429820_exit:


// fn0000000000429830
// Return size: 8
define fn0000000000429830
fn0000000000429830_entry:
	rsp = fp
	// succ:  l0000000000429830
l0000000000429830:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x22<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429830_exit
fn0000000000429830_exit:


// fn0000000000429840
// Return size: 8
define fn0000000000429840
fn0000000000429840_entry:
	rsp = fp
	// succ:  l0000000000429840
l0000000000429840:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x48<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429840_exit
fn0000000000429840_exit:


// fn0000000000429870
// Return size: 8
define fn0000000000429870
fn0000000000429870_entry:
	rsp = fp
	// succ:  l0000000000429870
l0000000000429870:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429870_exit
fn0000000000429870_exit:


// fn00000000004298A0
// Return size: 8
define fn00000000004298A0
fn00000000004298A0_entry:
	rsp = fp
	// succ:  l00000000004298A0
l00000000004298A0:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x24<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004298A0_exit
fn00000000004298A0_exit:


// fn00000000004298B0
// Return size: 8
define fn00000000004298B0
fn00000000004298B0_entry:
	rsp = fp
	// succ:  l00000000004298B0
l00000000004298B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x0000000000429670<p64>
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l00000000004298F0
	// succ:  l00000000004298CB l00000000004298F0
l00000000004298CB:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004298B0_exit
l00000000004298F0:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004298B0_exit
fn00000000004298B0_exit:


// fn0000000000429900
// Return size: 8
define fn0000000000429900
fn0000000000429900_entry:
	rsp = fp
	// succ:  l0000000000429900
l0000000000429900:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdx = 0x0000000000429A40<p64>
	rax = Mem0[rax + 0x50<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000429923
	// succ:  l0000000000429917 l0000000000429923
l0000000000429917:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000429900_exit
l0000000000429923:
	call rax (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000429900_exit
fn0000000000429900_exit:


// fn0000000000429930
// Return size: 8
define fn0000000000429930
fn0000000000429930_entry:
	rsp = fp
	// succ:  l0000000000429930
l0000000000429930:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rdx = 0x0000000000429A50<p64>
	rax = Mem0[rax + 0x48<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000429953
	// succ:  l0000000000429947 l0000000000429953
l0000000000429947:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000429930_exit
l0000000000429953:
	call rax (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000429930_exit
fn0000000000429930_exit:


// fn0000000000429960
// Return size: 8
define fn0000000000429960
fn0000000000429960_entry:
	rsp = fp
	// succ:  l0000000000429960
l0000000000429960:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x0000000000429B30<p64>
	rax = Mem0[rax + 0x28<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l00000000004299A0
	// succ:  l000000000042997B l00000000004299A0
l000000000042997B:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429960_exit
l00000000004299A0:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429960_exit
fn0000000000429960_exit:


// fn00000000004299B0
// Return size: 8
define fn00000000004299B0
fn00000000004299B0_entry:
	rsp = fp
	// succ:  l00000000004299B0
l00000000004299B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004299B0_exit
fn00000000004299B0_exit:


// fn00000000004299E0
// Return size: 8
define fn00000000004299E0
fn00000000004299E0_entry:
	rsp = fp
	// succ:  l00000000004299E0
l00000000004299E0:
	rax = Mem0[rcx:word64]
	rdx = 0x0000000000429B60<p64>
	rax = Mem0[rax + 0x40<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000429A00
	// succ:  l00000000004299F3 l0000000000429A00
l00000000004299F3:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn00000000004299E0_exit
l0000000000429A00:
	call rax (retsize: 0;)
	return
	// succ:  fn00000000004299E0_exit
fn00000000004299E0_exit:


// fn0000000000429A10
// Return size: 8
define fn0000000000429A10
fn0000000000429A10_entry:
	rsp = fp
	// succ:  l0000000000429A10
l0000000000429A10:
	rax = Mem0[rcx:word64]
	rdx = 0x0000000000429B70<p64>
	rax = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000429A30
	// succ:  l0000000000429A23 l0000000000429A30
l0000000000429A23:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x22<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429A10_exit
l0000000000429A30:
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000429A10_exit
fn0000000000429A10_exit:


// fn0000000000429A40
// Return size: 8
define fn0000000000429A40
fn0000000000429A40_entry:
	rsp = fp
	// succ:  l0000000000429A40
l0000000000429A40:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429A40_exit
fn0000000000429A40_exit:


// fn0000000000429A50
// Return size: 8
define fn0000000000429A50
fn0000000000429A50_entry:
	rsp = fp
	// succ:  l0000000000429A50
l0000000000429A50:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429A50_exit
fn0000000000429A50_exit:


// fn0000000000429A60
// Return size: 8
define fn0000000000429A60
fn0000000000429A60_entry:
	rsp = fp
	// succ:  l0000000000429A60
l0000000000429A60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x0000000000429B80<p64>
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000429AA0
	// succ:  l0000000000429A7B l0000000000429AA0
l0000000000429A7B:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x48<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429A60_exit
l0000000000429AA0:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429A60_exit
fn0000000000429A60_exit:


// fn0000000000429AB0
// Return size: 8
define fn0000000000429AB0
fn0000000000429AB0_entry:
	rsp = fp
	// succ:  l0000000000429AB0
l0000000000429AB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x0000000000429BB0<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000429AF0
	// succ:  l0000000000429ACB l0000000000429AF0
l0000000000429ACB:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429AB0_exit
l0000000000429AF0:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429AB0_exit
fn0000000000429AB0_exit:


// fn0000000000429B00
// Return size: 8
define fn0000000000429B00
fn0000000000429B00_entry:
	rsp = fp
	// succ:  l0000000000429B00
l0000000000429B00:
	rax = Mem0[rcx:word64]
	rdx = 0x0000000000429BE0<p64>
	rax = Mem0[rax + 0x18<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l0000000000429B20
	// succ:  l0000000000429B13 l0000000000429B20
l0000000000429B13:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x24<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429B00_exit
l0000000000429B20:
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000429B00_exit
fn0000000000429B00_exit:


// fn0000000000429B30
// Return size: 8
define fn0000000000429B30
fn0000000000429B30_entry:
	rsp = fp
	// succ:  l0000000000429B30
l0000000000429B30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x28<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429B30_exit
fn0000000000429B30_exit:


// fn0000000000429B60
// Return size: 8
define fn0000000000429B60
fn0000000000429B60_entry:
	rsp = fp
	// succ:  l0000000000429B60
l0000000000429B60:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = Mem0[rax + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429B60_exit
fn0000000000429B60_exit:


// fn0000000000429B70
// Return size: 8
define fn0000000000429B70
fn0000000000429B70_entry:
	rsp = fp
	// succ:  l0000000000429B70
l0000000000429B70:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x22<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429B70_exit
fn0000000000429B70_exit:


// fn0000000000429B80
// Return size: 8
define fn0000000000429B80
fn0000000000429B80_entry:
	rsp = fp
	// succ:  l0000000000429B80
l0000000000429B80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x48<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429B80_exit
fn0000000000429B80_exit:


// fn0000000000429BB0
// Return size: 8
define fn0000000000429BB0
fn0000000000429BB0_entry:
	rsp = fp
	// succ:  l0000000000429BB0
l0000000000429BB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rbx = rcx
	rdx = Mem0[rax + 0x38<64>:word64]
	call fn000000000044A8B0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429BB0_exit
fn0000000000429BB0_exit:


// fn0000000000429BE0
// Return size: 8
define fn0000000000429BE0
fn0000000000429BE0_entry:
	rsp = fp
	// succ:  l0000000000429BE0
l0000000000429BE0:
	rax = Mem0[rcx + 0x10<64>:word64]
	eax = CONVERT(Mem0[rax + 0x24<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn0000000000429BE0_exit
fn0000000000429BE0_exit:


// fn0000000000429BF0
// Return size: 8
define fn0000000000429BF0
fn0000000000429BF0_entry:
	rsp = fp
	// succ:  l0000000000429BF0
l0000000000429BF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	rcx = 0x00000000004299B0<p64>
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l0000000000429C30
	// succ:  l0000000000429C0B l0000000000429C30
l0000000000429C0B:
	rax = Mem0[rdx + 0x10<64>:word64]
	r8 = rsp + 0x2F<64>
	rcx = rbx
	rdx = Mem0[rax + 0x10<64>:word64]
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429BF0_exit
l0000000000429C30:
	rcx = rbx
	call rax (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429BF0_exit
fn0000000000429BF0_exit:


// fn0000000000429C40
// Return size: 8
define fn0000000000429C40
fn0000000000429C40_entry:
	rsp = fp
	// succ:  l0000000000429C40
l0000000000429C40:
	return
	// succ:  fn0000000000429C40_exit
fn0000000000429C40_exit:


// fn0000000000429C50
// Return size: 8
define fn0000000000429C50
fn0000000000429C50_entry:
	rsp = fp
	// succ:  l0000000000429C50
l0000000000429C50:
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x10<64>:word64]
	Mem0[rdx:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	Mem0[rdx + 8<64>:word64] = rax
	return
	// succ:  fn0000000000429C50_exit
fn0000000000429C50_exit:


// fn0000000000429C70
// Return size: 8
define fn0000000000429C70
fn0000000000429C70_entry:
	rsp = fp
	// succ:  l0000000000429C70
l0000000000429C70:
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x20<64>:word64]
	Mem0[rdx:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x28<64>:word64]
	Mem0[rdx + 8<64>:word64] = rax
	return
	// succ:  fn0000000000429C70_exit
fn0000000000429C70_exit:


// fn0000000000429C90
// Return size: 8
define fn0000000000429C90
fn0000000000429C90_entry:
	rsp = fp
	// succ:  l0000000000429C90
l0000000000429C90:
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x90<64>:word64]
	Mem0[rdx:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x98<64>:word64]
	Mem0[rdx + 8<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xA0<64>:word64]
	Mem0[rdx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xA8<64>:word64]
	Mem0[rdx + 0x18<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xB0<64>:word64]
	Mem0[rdx + 0x20<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xB8<64>:word64]
	Mem0[rdx + 0x28<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xC0<64>:word64]
	Mem0[rdx + 0x30<64>:word64] = rax
	return
	// succ:  fn0000000000429C90_exit
fn0000000000429C90_exit:


// fn0000000000429D00
// Return size: 8
define fn0000000000429D00
fn0000000000429D00_entry:
	rsp = fp
	// succ:  l0000000000429D00
l0000000000429D00:
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x30<64>:word64]
	Mem0[rdx:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x38<64>:word64]
	Mem0[rdx + 8<64>:word64] = rax
	return
	// succ:  fn0000000000429D00_exit
fn0000000000429D00_exit:


// fn0000000000429D20
// Return size: 8
define fn0000000000429D20
fn0000000000429D20_entry:
	rsp = fp
	// succ:  l0000000000429D20
l0000000000429D20:
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x128<64>:word64]
	Mem0[rdx:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x130<64>:word64]
	Mem0[rdx + 8<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x138<64>:word64]
	Mem0[rdx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x140<64>:word64]
	Mem0[rdx + 0x18<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x148<64>:word64]
	Mem0[rdx + 0x20<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x150<64>:word64]
	Mem0[rdx + 0x28<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x158<64>:word64]
	Mem0[rdx + 0x30<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x160<64>:word64]
	Mem0[rdx + 0x38<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x168<64>:word64]
	Mem0[rdx + 0x40<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x170<64>:word64]
	Mem0[rdx + 0x48<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x178<64>:word64]
	Mem0[rdx + 0x50<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x180<64>:word64]
	Mem0[rdx + 0x58<64>:word64] = rax
	return
	// succ:  fn0000000000429D20_exit
fn0000000000429D20_exit:


// fn0000000000429DE0
// Return size: 8
define fn0000000000429DE0
fn0000000000429DE0_entry:
	rsp = fp
	// succ:  l0000000000429DE0
l0000000000429DE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r14 = rcx
	rbp = rdx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r12 = r8
	r13 = r9
	rax = setlocale(rcx, rdx)
	rcx = rax
	rdi = rax
	eax = strlen(rcx)
	rbx = rax + 1<64>
	rcx = rbx
	call fn0000000000475560 (retsize: 8;)
	r8 = rbx
	rdx = rdi
	rcx = rax
	rsi = rax
	rax = memcpy(rcx, rdx, r8)
	rdx = Mem0[r14 + 0x20<64>:word64]
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rax = setlocale(rcx, rdx)
	r9 = Mem0[rsp + 0x80<64>:word64]
	r8 = r13
	rdx = r12
	rcx = rbp
	call msvcrt.dll!strftime (retsize: 8;)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rdx = rsi
	rbx = rax
	rax = setlocale(rcx, rdx)
	rcx = rsi
	call fn0000000000475540 (retsize: 8;)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l0000000000429E6A
	// succ:  l0000000000429E66 l0000000000429E6A
l0000000000429E66:
	Mem0[rbp + 0<64>:byte] = 0<8>
	// succ:  l0000000000429E6A
l0000000000429E6A:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000429DE0_exit
fn0000000000429DE0_exit:


// fn0000000000429E90
// Return size: 8
define fn0000000000429E90
fn0000000000429E90_entry:
	rsp = fp
	// succ:  l0000000000429E90
l0000000000429E90:
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x58<64>:word64]
	Mem0[rdx:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x60<64>:word64]
	Mem0[rdx + 8<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x68<64>:word64]
	Mem0[rdx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x70<64>:word64]
	Mem0[rdx + 0x18<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x78<64>:word64]
	Mem0[rdx + 0x20<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x80<64>:word64]
	Mem0[rdx + 0x28<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x88<64>:word64]
	Mem0[rdx + 0x30<64>:word64] = rax
	return
	// succ:  fn0000000000429E90_exit
fn0000000000429E90_exit:


// fn0000000000429EF0
// Return size: 8
define fn0000000000429EF0
fn0000000000429EF0_entry:
	rsp = fp
	// succ:  l0000000000429EF0
l0000000000429EF0:
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x40<64>:word64]
	Mem0[rdx:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x48<64>:word64]
	Mem0[rdx + 8<64>:word64] = rax
	return
	// succ:  fn0000000000429EF0_exit
fn0000000000429EF0_exit:


// fn0000000000429F10
// Return size: 8
define fn0000000000429F10
fn0000000000429F10_entry:
	rsp = fp
	// succ:  l0000000000429F10
l0000000000429F10:
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xC8<64>:word64]
	Mem0[rdx:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xD0<64>:word64]
	Mem0[rdx + 8<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xD8<64>:word64]
	Mem0[rdx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xE0<64>:word64]
	Mem0[rdx + 0x18<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xE8<64>:word64]
	Mem0[rdx + 0x20<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xF0<64>:word64]
	Mem0[rdx + 0x28<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xF8<64>:word64]
	Mem0[rdx + 0x30<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x100<64>:word64]
	Mem0[rdx + 0x38<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x108<64>:word64]
	Mem0[rdx + 0x40<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x110<64>:word64]
	Mem0[rdx + 0x48<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x118<64>:word64]
	Mem0[rdx + 0x50<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x120<64>:word64]
	Mem0[rdx + 0x58<64>:word64] = rax
	return
	// succ:  fn0000000000429F10_exit
fn0000000000429F10_exit:


// fn0000000000429FD0
// Return size: 8
define fn0000000000429FD0
fn0000000000429FD0_entry:
	rsp = fp
	// succ:  l0000000000429FD0
l0000000000429FD0:
	return
	// succ:  fn0000000000429FD0_exit
fn0000000000429FD0_exit:


// fn0000000000429FE0
// Return size: 8
define fn0000000000429FE0
fn0000000000429FE0_entry:
	rsp = fp
	// succ:  l0000000000429FE0
l0000000000429FE0:
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x10<64>:word64]
	Mem0[rdx:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	Mem0[rdx + 8<64>:word64] = rax
	return
	// succ:  fn0000000000429FE0_exit
fn0000000000429FE0_exit:


// fn000000000042A000
// Return size: 8
define fn000000000042A000
fn000000000042A000_entry:
	rsp = fp
	// succ:  l000000000042A000
l000000000042A000:
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x20<64>:word64]
	Mem0[rdx:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x28<64>:word64]
	Mem0[rdx + 8<64>:word64] = rax
	return
	// succ:  fn000000000042A000_exit
fn000000000042A000_exit:


// fn000000000042A020
// Return size: 8
define fn000000000042A020
fn000000000042A020_entry:
	rsp = fp
	// succ:  l000000000042A020
l000000000042A020:
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x90<64>:word64]
	Mem0[rdx:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x98<64>:word64]
	Mem0[rdx + 8<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xA0<64>:word64]
	Mem0[rdx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xA8<64>:word64]
	Mem0[rdx + 0x18<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xB0<64>:word64]
	Mem0[rdx + 0x20<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xB8<64>:word64]
	Mem0[rdx + 0x28<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xC0<64>:word64]
	Mem0[rdx + 0x30<64>:word64] = rax
	return
	// succ:  fn000000000042A020_exit
fn000000000042A020_exit:


// fn000000000042A090
// Return size: 8
define fn000000000042A090
fn000000000042A090_entry:
	rsp = fp
	// succ:  l000000000042A090
l000000000042A090:
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x30<64>:word64]
	Mem0[rdx:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x38<64>:word64]
	Mem0[rdx + 8<64>:word64] = rax
	return
	// succ:  fn000000000042A090_exit
fn000000000042A090_exit:


// fn000000000042A0B0
// Return size: 8
define fn000000000042A0B0
fn000000000042A0B0_entry:
	rsp = fp
	// succ:  l000000000042A0B0
l000000000042A0B0:
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x128<64>:word64]
	Mem0[rdx:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x130<64>:word64]
	Mem0[rdx + 8<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x138<64>:word64]
	Mem0[rdx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x140<64>:word64]
	Mem0[rdx + 0x18<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x148<64>:word64]
	Mem0[rdx + 0x20<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x150<64>:word64]
	Mem0[rdx + 0x28<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x158<64>:word64]
	Mem0[rdx + 0x30<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x160<64>:word64]
	Mem0[rdx + 0x38<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x168<64>:word64]
	Mem0[rdx + 0x40<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x170<64>:word64]
	Mem0[rdx + 0x48<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x178<64>:word64]
	Mem0[rdx + 0x50<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x180<64>:word64]
	Mem0[rdx + 0x58<64>:word64] = rax
	return
	// succ:  fn000000000042A0B0_exit
fn000000000042A0B0_exit:


// fn000000000042A170
// Return size: 8
define fn000000000042A170
fn000000000042A170_entry:
	rsp = fp
	// succ:  l000000000042A170
l000000000042A170:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	r14 = rcx
	rbp = rdx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r12 = r8
	r13 = r9
	rax = setlocale(rcx, rdx)
	rcx = rax
	rdi = rax
	eax = strlen(rcx)
	rbx = rax + 1<64>
	rcx = rbx
	call fn0000000000475560 (retsize: 8;)
	r8 = rbx
	rdx = rdi
	rcx = rax
	rsi = rax
	rax = memcpy(rcx, rdx, r8)
	rdx = Mem0[r14 + 0x20<64>:word64]
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rax = setlocale(rcx, rdx)
	r9 = Mem0[rsp + 0x80<64>:word64]
	r8 = r13
	rdx = r12
	rcx = rbp
	call msvcrt.dll!wcsftime (retsize: 8;)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	rdx = rsi
	rbx = rax
	rax = setlocale(rcx, rdx)
	rcx = rsi
	call fn0000000000475540 (retsize: 8;)
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l000000000042A1FC
	// succ:  l000000000042A1F6 l000000000042A1FC
l000000000042A1F6:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbp + 0<64>:word16] = ax
	// succ:  l000000000042A1FC
l000000000042A1FC:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042A170_exit
fn000000000042A170_exit:


// fn000000000042A220
// Return size: 8
define fn000000000042A220
fn000000000042A220_entry:
	rsp = fp
	// succ:  l000000000042A220
l000000000042A220:
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x58<64>:word64]
	Mem0[rdx:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x60<64>:word64]
	Mem0[rdx + 8<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x68<64>:word64]
	Mem0[rdx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x70<64>:word64]
	Mem0[rdx + 0x18<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x78<64>:word64]
	Mem0[rdx + 0x20<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x80<64>:word64]
	Mem0[rdx + 0x28<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x88<64>:word64]
	Mem0[rdx + 0x30<64>:word64] = rax
	return
	// succ:  fn000000000042A220_exit
fn000000000042A220_exit:


// fn000000000042A280
// Return size: 8
define fn000000000042A280
fn000000000042A280_entry:
	rsp = fp
	// succ:  l000000000042A280
l000000000042A280:
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x40<64>:word64]
	Mem0[rdx:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x48<64>:word64]
	Mem0[rdx + 8<64>:word64] = rax
	return
	// succ:  fn000000000042A280_exit
fn000000000042A280_exit:


// fn000000000042A2A0
// Return size: 8
define fn000000000042A2A0
fn000000000042A2A0_entry:
	rsp = fp
	// succ:  l000000000042A2A0
l000000000042A2A0:
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xC8<64>:word64]
	Mem0[rdx:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xD0<64>:word64]
	Mem0[rdx + 8<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xD8<64>:word64]
	Mem0[rdx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xE0<64>:word64]
	Mem0[rdx + 0x18<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xE8<64>:word64]
	Mem0[rdx + 0x20<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xF0<64>:word64]
	Mem0[rdx + 0x28<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0xF8<64>:word64]
	Mem0[rdx + 0x30<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x100<64>:word64]
	Mem0[rdx + 0x38<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x108<64>:word64]
	Mem0[rdx + 0x40<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x110<64>:word64]
	Mem0[rdx + 0x48<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x118<64>:word64]
	Mem0[rdx + 0x50<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	rax = Mem0[rax + 0x120<64>:word64]
	Mem0[rdx + 0x58<64>:word64] = rax
	return
	// succ:  fn000000000042A2A0_exit
fn000000000042A2A0_exit:


// fn000000000042A360
// Return size: 8
define fn000000000042A360
fn000000000042A360_entry:
	rsp = fp
	// succ:  l000000000042A360
l000000000042A360:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = 0x000000000048B580<p64>
	rbx = rdx
	call fn000000000042BB80 (retsize: 8;)
	rdi = rax
	rax = Mem0[rbx:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	rsi = rax + rdi * 8<64>
	rax = Mem0[rsi:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000042A3A0
	// succ:  l000000000042A38D l000000000042A3A0
l000000000042A38D:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042A360_exit
l000000000042A3A0:
	ecx = 0x90<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rbp = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = 0x0000000000497350<p64>
	Mem0[rbp + 0x10<64>:word64] = 0<64>
	Mem0[rbp + 0x18<64>:word64] = 0<64>
	rdx = rbx
	Mem0[rbp + 0<64>:word64] = rax
	Mem0[rbp + 0x20<64>:byte] = 0<8>
	rcx = rbp
	Mem0[rbp + 0x28<64>:word64] = 0<64>
	Mem0[rbp + 0x30<64>:word64] = 0<64>
	Mem0[rbp + 0x38<64>:word64] = 0<64>
	Mem0[rbp + 0x40<64>:word64] = 0<64>
	Mem0[rbp + 0x48<64>:byte] = 0<8>
	Mem0[rbp + 0x49<64>:byte] = 0<8>
	Mem0[rbp + 0x88<64>:byte] = 0<8>
	call fn0000000000463E50 (retsize: 8;)
	rcx = Mem0[rbx:word64]
	r8 = rdi
	rdx = rbp
	call fn0000000000469430 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042A360_exit
fn000000000042A360_exit:


// fn000000000042A460
// Return size: 8
define fn000000000042A460
fn000000000042A460_entry:
	rsp = fp
	// succ:  l000000000042A460
l000000000042A460:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = 0x000000000048B590<p64>
	rbx = rdx
	call fn000000000042BB80 (retsize: 8;)
	rdi = rax
	rax = Mem0[rbx:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	rsi = rax + rdi * 8<64>
	rax = Mem0[rsi:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000042A4A0
	// succ:  l000000000042A48D l000000000042A4A0
l000000000042A48D:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042A460_exit
l000000000042A4A0:
	ecx = 0xD0<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rbp = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = 0x0000000000497370<p64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbp + 0x10<64>:word64] = 0<64>
	Mem0[rbp + 0x18<64>:word64] = 0<64>
	Mem0[rbp + 0<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbp + 0x4A<64>:word16] = dx
	Mem0[rbp + 0x20<64>:byte] = 0<8>
	Mem0[rbp + 0x28<64>:word64] = 0<64>
	rdx = rbx
	Mem0[rbp + 0x30<64>:word64] = 0<64>
	Mem0[rbp + 0x38<64>:word64] = 0<64>
	rcx = rbp
	Mem0[rbp + 0x40<64>:word64] = 0<64>
	Mem0[rbp + 0x48<64>:word16] = ax
	Mem0[rbp + 0xC8<64>:byte] = 0<8>
	call fn00000000004645D0 (retsize: 8;)
	rcx = Mem0[rbx:word64]
	r8 = rdi
	rdx = rbp
	call fn0000000000469430 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042A460_exit
fn000000000042A460_exit:


// fn000000000042A560
// Return size: 8
define fn000000000042A560
fn000000000042A560_entry:
	rsp = fp
	// succ:  l000000000042A560
l000000000042A560:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = 0x000000000048B2B0<p64>
	rsi = rdx
	call fn000000000042BB80 (retsize: 8;)
	rbp = rax
	rax = Mem0[rsi:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	rdi = rax + rbp * 8<64>
	rax = Mem0[rdi:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000042A5A0
	// succ:  l000000000042A58D l000000000042A5A0
l000000000042A58D:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042A560_exit
l000000000042A5A0:
	ecx = 0x70<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rbx = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = 0x0000000000497690<p64>
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	Mem0[rbx + 0x18<64>:word64] = 0<64>
	rdx = rsi
	Mem0[rbx:word64] = rax
	Mem0[rbx + 0x20<64>:byte] = 0<8>
	rcx = rbx
	Mem0[rbx + 0x21<64>:byte] = 0<8>
	Mem0[rbx + 0x22<64>:byte] = 0<8>
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0x38<64>:word64] = 0<64>
	Mem0[rbx + 0x40<64>:word64] = 0<64>
	Mem0[rbx + 0x48<64>:word64] = 0<64>
	Mem0[rbx + 0x50<64>:word64] = 0<64>
	Mem0[rbx + 0x58<64>:word32] = 0<32>
	Mem0[rbx + 0x5C<64>:byte] = 0<8>
	Mem0[rbx + 0x5D<64>:byte] = 0<8>
	Mem0[rbx + 0x5E<64>:byte] = 0<8>
	Mem0[rbx + 0x5F<64>:byte] = 0<8>
	Mem0[rbx + 0x60<64>:byte] = 0<8>
	Mem0[rbx + 0x61<64>:byte] = 0<8>
	Mem0[rbx + 0x62<64>:byte] = 0<8>
	Mem0[rbx + 0x63<64>:byte] = 0<8>
	Mem0[rbx + 0x6F<64>:byte] = 0<8>
	call fn00000000004661A0 (retsize: 8;)
	rcx = Mem0[rsi:word64]
	r8 = rbp
	rdx = rbx
	call fn0000000000469430 (retsize: 8;)
	rax = Mem0[rdi:word64]
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042A560_exit
fn000000000042A560_exit:


// fn000000000042A690
// Return size: 8
define fn000000000042A690
fn000000000042A690_entry:
	rsp = fp
	// succ:  l000000000042A690
l000000000042A690:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = 0x000000000048B2C0<p64>
	rsi = rdx
	call fn000000000042BB80 (retsize: 8;)
	rbp = rax
	rax = Mem0[rsi:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	rdi = rax + rbp * 8<64>
	rax = Mem0[rdi:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000042A6D0
	// succ:  l000000000042A6BD l000000000042A6D0
l000000000042A6BD:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042A690_exit
l000000000042A6D0:
	ecx = 0x70<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rbx = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = 0x00000000004976B0<p64>
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	Mem0[rbx + 0x18<64>:word64] = 0<64>
	rdx = rsi
	Mem0[rbx:word64] = rax
	Mem0[rbx + 0x20<64>:byte] = 0<8>
	rcx = rbx
	Mem0[rbx + 0x21<64>:byte] = 0<8>
	Mem0[rbx + 0x22<64>:byte] = 0<8>
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	Mem0[rbx + 0x38<64>:word64] = 0<64>
	Mem0[rbx + 0x40<64>:word64] = 0<64>
	Mem0[rbx + 0x48<64>:word64] = 0<64>
	Mem0[rbx + 0x50<64>:word64] = 0<64>
	Mem0[rbx + 0x58<64>:word32] = 0<32>
	Mem0[rbx + 0x5C<64>:byte] = 0<8>
	Mem0[rbx + 0x5D<64>:byte] = 0<8>
	Mem0[rbx + 0x5E<64>:byte] = 0<8>
	Mem0[rbx + 0x5F<64>:byte] = 0<8>
	Mem0[rbx + 0x60<64>:byte] = 0<8>
	Mem0[rbx + 0x61<64>:byte] = 0<8>
	Mem0[rbx + 0x62<64>:byte] = 0<8>
	Mem0[rbx + 0x63<64>:byte] = 0<8>
	Mem0[rbx + 0x6F<64>:byte] = 0<8>
	call fn0000000000466B10 (retsize: 8;)
	rcx = Mem0[rsi:word64]
	r8 = rbp
	rdx = rbx
	call fn0000000000469430 (retsize: 8;)
	rax = Mem0[rdi:word64]
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042A690_exit
fn000000000042A690_exit:


// fn000000000042A7C0
// Return size: 8
define fn000000000042A7C0
fn000000000042A7C0_entry:
	rsp = fp
	// succ:  l000000000042A7C0
l000000000042A7C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = 0x000000000048B2D0<p64>
	rsi = rdx
	call fn000000000042BB80 (retsize: 8;)
	rbp = rax
	rax = Mem0[rsi:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	rdi = rax + rbp * 8<64>
	rax = Mem0[rdi:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000042A800
	// succ:  l000000000042A7ED l000000000042A800
l000000000042A7ED:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042A7C0_exit
l000000000042A800:
	ecx = 0x80<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rbx = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = 0x00000000004976D0<p64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	Mem0[rbx + 0x18<64>:word64] = 0<64>
	Mem0[rbx:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x24<64>:word16] = dx
	Mem0[rbx + 0x20<64>:byte] = 0<8>
	Mem0[rbx + 0x22<64>:word16] = ax
	rdx = rsi
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	rcx = rbx
	Mem0[rbx + 0x38<64>:word64] = 0<64>
	Mem0[rbx + 0x40<64>:word64] = 0<64>
	Mem0[rbx + 0x48<64>:word64] = 0<64>
	Mem0[rbx + 0x50<64>:word64] = 0<64>
	Mem0[rbx + 0x58<64>:word32] = 0<32>
	Mem0[rbx + 0x5C<64>:byte] = 0<8>
	Mem0[rbx + 0x5D<64>:byte] = 0<8>
	Mem0[rbx + 0x5E<64>:byte] = 0<8>
	Mem0[rbx + 0x5F<64>:byte] = 0<8>
	Mem0[rbx + 0x60<64>:byte] = 0<8>
	Mem0[rbx + 0x61<64>:byte] = 0<8>
	Mem0[rbx + 0x62<64>:byte] = 0<8>
	Mem0[rbx + 0x63<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	call fn0000000000467480 (retsize: 8;)
	rcx = Mem0[rsi:word64]
	r8 = rbp
	rdx = rbx
	call fn0000000000469430 (retsize: 8;)
	rax = Mem0[rdi:word64]
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042A7C0_exit
fn000000000042A7C0_exit:


// fn000000000042A8F0
// Return size: 8
define fn000000000042A8F0
fn000000000042A8F0_entry:
	rsp = fp
	// succ:  l000000000042A8F0
l000000000042A8F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = 0x000000000048B2E0<p64>
	rsi = rdx
	call fn000000000042BB80 (retsize: 8;)
	rbp = rax
	rax = Mem0[rsi:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	rdi = rax + rbp * 8<64>
	rax = Mem0[rdi:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000042A930
	// succ:  l000000000042A91D l000000000042A930
l000000000042A91D:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042A8F0_exit
l000000000042A930:
	ecx = 0x80<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000475590 (retsize: 8;)
	rbx = rax
	Mem0[rax + 8<64>:word32] = 0<32>
	rax = 0x00000000004976F0<p64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x10<64>:word64] = 0<64>
	Mem0[rbx + 0x18<64>:word64] = 0<64>
	Mem0[rbx:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x24<64>:word16] = dx
	Mem0[rbx + 0x20<64>:byte] = 0<8>
	Mem0[rbx + 0x22<64>:word16] = ax
	rdx = rsi
	Mem0[rbx + 0x28<64>:word64] = 0<64>
	Mem0[rbx + 0x30<64>:word64] = 0<64>
	rcx = rbx
	Mem0[rbx + 0x38<64>:word64] = 0<64>
	Mem0[rbx + 0x40<64>:word64] = 0<64>
	Mem0[rbx + 0x48<64>:word64] = 0<64>
	Mem0[rbx + 0x50<64>:word64] = 0<64>
	Mem0[rbx + 0x58<64>:word32] = 0<32>
	Mem0[rbx + 0x5C<64>:byte] = 0<8>
	Mem0[rbx + 0x5D<64>:byte] = 0<8>
	Mem0[rbx + 0x5E<64>:byte] = 0<8>
	Mem0[rbx + 0x5F<64>:byte] = 0<8>
	Mem0[rbx + 0x60<64>:byte] = 0<8>
	Mem0[rbx + 0x61<64>:byte] = 0<8>
	Mem0[rbx + 0x62<64>:byte] = 0<8>
	Mem0[rbx + 0x63<64>:byte] = 0<8>
	Mem0[rbx + 0x7A<64>:byte] = 0<8>
	call fn0000000000467E10 (retsize: 8;)
	rcx = Mem0[rsi:word64]
	r8 = rbp
	rdx = rbx
	call fn0000000000469430 (retsize: 8;)
	rax = Mem0[rdi:word64]
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042A8F0_exit
fn000000000042A8F0_exit:


// fn000000000042AA20
// Return size: 8
define fn000000000042AA20
fn000000000042AA20_entry:
	rsp = fp
	// succ:  l000000000042AA20
l000000000042AA20:
	rax = Mem0[rcx + 8<64>:word64]
	return
	// succ:  fn000000000042AA20_exit
fn000000000042AA20_exit:


// fn000000000042AA30
// Return size: 8
define fn000000000042AA30
fn000000000042AA30_entry:
	rsp = fp
	// succ:  l000000000042AA30
l000000000042AA30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042AA30_exit
fn000000000042AA30_exit:


// fn000000000042AA40
// Return size: 8
define fn000000000042AA40
fn000000000042AA40_entry:
	rsp = fp
	// succ:  l000000000042AA40
l000000000042AA40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042AA40_exit
fn000000000042AA40_exit:


// fn000000000042AA50
// Return size: 8
define fn000000000042AA50
fn000000000042AA50_entry:
	rsp = fp
	// succ:  l000000000042AA50
l000000000042AA50:
	SCZO = cond(Mem0[rcx:word64] - 0<64>)
	al = CONVERT(Test(NE,Z), bool, int8)
	return
	// succ:  fn000000000042AA50_exit
fn000000000042AA50_exit:


// fn000000000042AA60
// Return size: 8
define fn000000000042AA60
fn000000000042AA60_entry:
	rsp = fp
	// succ:  l000000000042AA60
l000000000042AA60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	rdx = Mem0[rcx + 0x18<64>:word64]
	ebx = Mem0[rcx + 0x10<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	rcx = 0x00000000004270F0<p64>
	rax = Mem0[rdx:word64]
	rax = Mem0[rax + 0x18<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l000000000042AAF0
	// succ:  l000000000042AA80 l000000000042AAF0
l000000000042AA80:
	rsi = rsp + 0x3F<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rsi
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(ebx - 2<32>)
	Mem0[rsp + 0x40<64>:word64] = rax
	branch Test(EQ,Z) l000000000042AB70
	// succ:  l000000000042AA9F l000000000042AB70
l000000000042AA9F:
	branch Test(LE,SZO) l000000000042AAD0
	// succ:  l000000000042AAA1 l000000000042AAD0
l000000000042AAA1:
	SCZO = cond(ebx - 3<32>)
	branch Test(EQ,Z) l000000000042AB50
	// succ:  l000000000042AAAA l000000000042AB50
l000000000042AAAA:
	SCZO = cond(ebx - 4<32>)
	branch Test(NE,Z) l000000000042AB14
	// succ:  l000000000042AAAF l000000000042AB14
l000000000042AAAF:
	rcx = rsp + 0x40<64>
	rdx = 0x000000000048E0A7<p64>
	r8d = 0xE<32>
	r8 = CONVERT(r8d, word32, uint64)
	call fn00000000004511C0 (retsize: 8;)
	goto l000000000042AAFA
	// succ:  l000000000042AAFA
l000000000042AAD0:
	SCZO = cond(ebx - 1<32>)
	branch Test(NE,Z) l000000000042AB14
	// succ:  l000000000042AAD5 l000000000042AB14
l000000000042AAD5:
	rcx = rsp + 0x40<64>
	rdx = 0x000000000048E0B6<p64>
	r8d = 0x18<32>
	r8 = CONVERT(r8d, word32, uint64)
	call fn00000000004511C0 (retsize: 8;)
	goto l000000000042AAFA
	// succ:  l000000000042AAFA
l000000000042AAF0:
	rcx = rsp + 0x40<64>
	r8d = ebx
	r8 = CONVERT(r8d, word32, uint64)
	call rax (retsize: 8;)
	// succ:  l000000000042AAFA
l000000000042AAFA:
	rax = Mem0[rsp + 0x40<64>:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[rax - 8<64>:word32] = __xadd(Mem0[rax - 8<64>:word32], edx)
	SCZO = cond(Mem0[rax - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l000000000042AB30
	// succ:  l000000000042AB0D l000000000042AB30
l000000000042AB0D:
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042AA60_exit
l000000000042AB14:
	rcx = rsp + 0x40<64>
	rdx = 0x000000000048E0FD<p64>
	r8d = 0xD<32>
	r8 = CONVERT(r8d, word32, uint64)
	call fn00000000004511C0 (retsize: 8;)
	goto l000000000042AAFA
	// succ:  l000000000042AAFA
l000000000042AB30:
	rcx = rax - 0x18<64>
	rdx = rsp + 0x3F<64>
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn0000000000450A50 (retsize: 8;)
	rax = Mem0[rsp + 0x28<64>:word64]
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042AA60_exit
l000000000042AB50:
	rcx = rsp + 0x40<64>
	rdx = 0x000000000048E0E9<p64>
	r8d = 0x13<32>
	r8 = CONVERT(r8d, word32, uint64)
	call fn00000000004511C0 (retsize: 8;)
	goto l000000000042AAFA
	// succ:  l000000000042AAFA
l000000000042AB70:
	rcx = rsp + 0x40<64>
	rdx = 0x000000000048E0CF<p64>
	r8d = 0x19<32>
	r8 = CONVERT(r8d, word32, uint64)
	call fn00000000004511C0 (retsize: 8;)
	goto l000000000042AAFA
	// succ:  l000000000042AAFA
fn000000000042AA60_exit:


// fn000000000042ABB0
// Return size: 8
define fn000000000042ABB0
fn000000000042ABB0_entry:
	rsp = fp
	// succ:  l000000000042ABB0
l000000000042ABB0:
	rax = 0x000000000048D81F<p64>
	return
	// succ:  fn000000000042ABB0_exit
fn000000000042ABB0_exit:


// fn000000000042ABC0
// Return size: 8
define fn000000000042ABC0
fn000000000042ABC0_entry:
	rsp = fp
	// succ:  l000000000042ABC0
l000000000042ABC0:
	rcx = rcx + 0x48<64>
	SCZO = cond(rcx)
	// succ:  l000000000042ABC4_thunk_fn000000000042AA50
l000000000042ABC4_thunk_fn000000000042AA50:
	call fn000000000042AA50 (retsize: 0;)
	return
	// succ:  fn000000000042ABC0_exit
fn000000000042ABC0_exit:


// fn000000000042ABD0
// Return size: 8
define fn000000000042ABD0
fn000000000042ABD0_entry:
	rsp = fp
	// succ:  l000000000042ABD0
l000000000042ABD0:
	rcx = rcx + 0x48<64>
	SCZO = cond(rcx)
	// succ:  l000000000042ABD4_thunk_fn000000000042AA50
l000000000042ABD4_thunk_fn000000000042AA50:
	call fn000000000042AA50 (retsize: 0;)
	return
	// succ:  fn000000000042ABD0_exit
fn000000000042ABD0_exit:


// fn000000000042ABE0
// Return size: 8
define fn000000000042ABE0
fn000000000042ABE0_entry:
	rsp = fp
	// succ:  l000000000042ABE0
l000000000042ABE0:
	rax = rcx + 0x18<64>
	return
	// succ:  fn000000000042ABE0_exit
fn000000000042ABE0_exit:


// fn000000000042ABF0
// Return size: 8
define fn000000000042ABF0
fn000000000042ABF0_entry:
	rsp = fp
	// succ:  l000000000042ABF0
l000000000042ABF0:
	rcx = rcx + 0x60<64>
	SCZO = cond(rcx)
	// succ:  l000000000042ABF4_thunk_fn000000000042AA50
l000000000042ABF4_thunk_fn000000000042AA50:
	call fn000000000042AA50 (retsize: 0;)
	return
	// succ:  fn000000000042ABF0_exit
fn000000000042ABF0_exit:


// fn000000000042AC00
// Return size: 8
define fn000000000042AC00
fn000000000042AC00_entry:
	rsp = fp
	// succ:  l000000000042AC00
l000000000042AC00:
	rax = rcx + 0x18<64>
	return
	// succ:  fn000000000042AC00_exit
fn000000000042AC00_exit:


// fn000000000042AC10
// Return size: 8
define fn000000000042AC10
fn000000000042AC10_entry:
	rsp = fp
	// succ:  l000000000042AC10
l000000000042AC10:
	rcx = rcx + 0x60<64>
	SCZO = cond(rcx)
	// succ:  l000000000042AC14_thunk_fn000000000042AA50
l000000000042AC14_thunk_fn000000000042AA50:
	call fn000000000042AA50 (retsize: 0;)
	return
	// succ:  fn000000000042AC10_exit
fn000000000042AC10_exit:


// fn000000000042AC20
// Return size: 8
define fn000000000042AC20
fn000000000042AC20_entry:
	rsp = fp
	// succ:  l000000000042AC20
l000000000042AC20:
	rax = Mem0[rcx + 8<64>:word64]
	return
	// succ:  fn000000000042AC20_exit
fn000000000042AC20_exit:


// fn000000000042AC30
// Return size: 8
define fn000000000042AC30
fn000000000042AC30_entry:
	rsp = fp
	// succ:  l000000000042AC30
l000000000042AC30:
	eax = CONVERT(Mem0[rcx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000042AC30_exit
fn000000000042AC30_exit:


// fn000000000042AC40
// Return size: 8
define fn000000000042AC40
fn000000000042AC40_entry:
	rsp = fp
	// succ:  l000000000042AC40
l000000000042AC40:
	eax = CONVERT(Mem0[rcx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000042AC40_exit
fn000000000042AC40_exit:


// fn000000000042AC50
// Return size: 8
define fn000000000042AC50
fn000000000042AC50_entry:
	rsp = fp
	// succ:  l000000000042AC50
l000000000042AC50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax:word64]
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042AC50_exit
fn000000000042AC50_exit:


// fn000000000042AC70
// Return size: 8
define fn000000000042AC70
fn000000000042AC70_entry:
	rsp = fp
	// succ:  l000000000042AC70
l000000000042AC70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax:word64]
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042AC70_exit
fn000000000042AC70_exit:


// fn000000000042AC90
// Return size: 8
define fn000000000042AC90
fn000000000042AC90_entry:
	rsp = fp
	// succ:  l000000000042AC90
l000000000042AC90:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax:word64]
	rcx = rax
	call fn0000000000471B30 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042AC90_exit
fn000000000042AC90_exit:


// fn000000000042ACC0
// Return size: 8
define fn000000000042ACC0
fn000000000042ACC0_entry:
	rsp = fp
	// succ:  l000000000042ACC0
l000000000042ACC0:
	rax = Mem0[rcx + 8<64>:word64]
	return
	// succ:  fn000000000042ACC0_exit
fn000000000042ACC0_exit:


// fn000000000042ACD0
// Return size: 8
define fn000000000042ACD0
fn000000000042ACD0_entry:
	rsp = fp
	// succ:  l000000000042ACD0
l000000000042ACD0:
	rax = rcx + 0x10<64>
	return
	// succ:  fn000000000042ACD0_exit
fn000000000042ACD0_exit:


// fn000000000042ACE0
// Return size: 8
define fn000000000042ACE0
fn000000000042ACE0_entry:
	rsp = fp
	// succ:  l000000000042ACE0
l000000000042ACE0:
	rcx = rcx + 0x58<64>
	SCZO = cond(rcx)
	// succ:  l000000000042ACE4_thunk_fn000000000042AA50
l000000000042ACE4_thunk_fn000000000042AA50:
	call fn000000000042AA50 (retsize: 0;)
	return
	// succ:  fn000000000042ACE0_exit
fn000000000042ACE0_exit:


// fn000000000042ACF0
// Return size: 8
define fn000000000042ACF0
fn000000000042ACF0_entry:
	rsp = fp
	// succ:  l000000000042ACF0
l000000000042ACF0:
	rax = rcx + 0x10<64>
	return
	// succ:  fn000000000042ACF0_exit
fn000000000042ACF0_exit:


// fn000000000042AD00
// Return size: 8
define fn000000000042AD00
fn000000000042AD00_entry:
	rsp = fp
	// succ:  l000000000042AD00
l000000000042AD00:
	rcx = rcx + 0x58<64>
	SCZO = cond(rcx)
	// succ:  l000000000042AD04_thunk_fn000000000042AA50
l000000000042AD04_thunk_fn000000000042AA50:
	call fn000000000042AA50 (retsize: 0;)
	return
	// succ:  fn000000000042AD00_exit
fn000000000042AD00_exit:


// fn000000000042AD10
// Return size: 8
define fn000000000042AD10
fn000000000042AD10_entry:
	rsp = fp
	// succ:  l000000000042AD10
l000000000042AD10:
	rax = rcx + 8<64>
	return
	// succ:  fn000000000042AD10_exit
fn000000000042AD10_exit:


// fn000000000042AD20
// Return size: 8
define fn000000000042AD20
fn000000000042AD20_entry:
	rsp = fp
	// succ:  l000000000042AD20
l000000000042AD20:
	rcx = rcx + 0x50<64>
	SCZO = cond(rcx)
	// succ:  l000000000042AD24_thunk_fn000000000042AA50
l000000000042AD24_thunk_fn000000000042AA50:
	call fn000000000042AA50 (retsize: 0;)
	return
	// succ:  fn000000000042AD20_exit
fn000000000042AD20_exit:


// fn000000000042AD30
// Return size: 8
define fn000000000042AD30
fn000000000042AD30_entry:
	rsp = fp
	// succ:  l000000000042AD30
l000000000042AD30:
	rax = rcx + 8<64>
	return
	// succ:  fn000000000042AD30_exit
fn000000000042AD30_exit:


// fn000000000042AD40
// Return size: 8
define fn000000000042AD40
fn000000000042AD40_entry:
	rsp = fp
	// succ:  l000000000042AD40
l000000000042AD40:
	rcx = rcx + 0x50<64>
	SCZO = cond(rcx)
	// succ:  l000000000042AD44_thunk_fn000000000042AA50
l000000000042AD44_thunk_fn000000000042AA50:
	call fn000000000042AA50 (retsize: 0;)
	return
	// succ:  fn000000000042AD40_exit
fn000000000042AD40_exit:


// fn000000000042AD50
// Return size: 8
define fn000000000042AD50
fn000000000042AD50_entry:
	rsp = fp
	// succ:  l000000000042AD50
l000000000042AD50:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rdx + 8<64>:word64] - rcx)
	branch Test(EQ,Z) l000000000042AD60
	// succ:  l000000000042AD58 l000000000042AD60
l000000000042AD58:
	return
	// succ:  fn000000000042AD50_exit
l000000000042AD60:
	SCZO = cond(Mem0[rdx:word32] - r8d)
	al = CONVERT(Test(EQ,Z), bool, int8)
	return
	// succ:  fn000000000042AD50_exit
fn000000000042AD50_exit:


// fn000000000042AD70
// Return size: 8
define fn000000000042AD70
fn000000000042AD70_entry:
	rsp = fp
	// succ:  l000000000042AD70
l000000000042AD70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	rbx = r8
	r8 = 0x000000000042ADD0<p64>
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - r8)
	branch Test(NE,Z) l000000000042ADA0
	// succ:  l000000000042AD8B l000000000042ADA0
l000000000042AD8B:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbx + 8<64>:word64] - rcx)
	branch Test(EQ,Z) l000000000042ADC1
	// succ:  l000000000042AD93 l000000000042ADC1
l000000000042AD93:
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042AD70_exit
l000000000042ADA0:
	r9 = rsp + 0x20<64>
	r8d = edx
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rcx
	rcx = r9
	call rax (retsize: 8;)
	rcx = Mem0[rsp + 0x28<64>:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbx + 8<64>:word64] - rcx)
	edx = Mem0[rsp + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l000000000042AD93
	// succ:  l000000000042ADC1 l000000000042AD93
l000000000042ADC1:
	SCZO = cond(Mem0[rbx:word32] - edx)
	al = CONVERT(Test(EQ,Z), bool, int8)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042AD70_exit
fn000000000042AD70_exit:


// fn000000000042ADD0
// Return size: 8
define fn000000000042ADD0
fn000000000042ADD0_entry:
	rsp = fp
	// succ:  l000000000042ADD0
l000000000042ADD0:
	rax = rcx
	Mem0[rcx:word32] = r8d
	Mem0[rcx + 8<64>:word64] = rdx
	return
	// succ:  fn000000000042ADD0_exit
fn000000000042ADD0_exit:


// fn000000000042ADE0
// Return size: 8
define fn000000000042ADE0
fn000000000042ADE0_entry:
	rsp = fp
	// succ:  l000000000042ADE0
l000000000042ADE0:
	rax = Mem0[rcx:word64]
	rax = Mem0[rax - 0x90<64>:word64]
	return
	// succ:  fn000000000042ADE0_exit
fn000000000042ADE0_exit:


// fn000000000042ADF0
// Return size: 8
define fn000000000042ADF0
fn000000000042ADF0_entry:
	rsp = fp
	// succ:  l000000000042ADF0
l000000000042ADF0:
	rax = Mem0[rcx:word64]
	return
	// succ:  fn000000000042ADF0_exit
fn000000000042ADF0_exit:


// fn000000000042AE00
// Return size: 8
define fn000000000042AE00
fn000000000042AE00_entry:
	rsp = fp
	// succ:  l000000000042AE00
l000000000042AE00:
	SCZO = cond(Mem0[rdx:word64] - 0<64>)
	rax = rcx
	branch Test(EQ,Z) l000000000042AE20
	// succ:  l000000000042AE09 l000000000042AE20
l000000000042AE09:
	rcx = 0x0000000000462160<p64>
	Mem0[rax + 8<64>:word64] = 0<64>
	Mem0[rax:word64] = rcx
	return
	// succ:  fn000000000042AE00_exit
l000000000042AE20:
	Mem0[rcx:word64] = 0<64>
	Mem0[rcx + 8<64>:word64] = 0<64>
	return
	// succ:  fn000000000042AE00_exit
fn000000000042AE00_exit:


// fn000000000042AE30
// Return size: 8
define fn000000000042AE30
fn000000000042AE30_entry:
	rsp = fp
	// succ:  l000000000042AE30
l000000000042AE30:
	SCZO = cond(Mem0[rcx:word64] - 0<64>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	return
	// succ:  fn000000000042AE30_exit
fn000000000042AE30_exit:


// fn000000000042AE40
// Return size: 8
define fn000000000042AE40
fn000000000042AE40_entry:
	rsp = fp
	// succ:  l000000000042AE40
l000000000042AE40:
	rax = Mem0[rcx + 0x10<64>:word64]
	return
	// succ:  fn000000000042AE40_exit
fn000000000042AE40_exit:


// fn000000000042AE50
// Return size: 8
define fn000000000042AE50
fn000000000042AE50_entry:
	rsp = fp
	// succ:  l000000000042AE50
l000000000042AE50:
	rax = Mem0[rcx + 0x28<64>:word64]
	return
	// succ:  fn000000000042AE50_exit
fn000000000042AE50_exit:


// fn000000000042AE60
// Return size: 8
define fn000000000042AE60
fn000000000042AE60_entry:
	rsp = fp
	// succ:  l000000000042AE60
l000000000042AE60:
	rax = Mem0[rcx + 8<64>:word64]
	return
	// succ:  fn000000000042AE60_exit
fn000000000042AE60_exit:


// fn000000000042AE70
// Return size: 8
define fn000000000042AE70
fn000000000042AE70_entry:
	rsp = fp
	// succ:  l000000000042AE70
l000000000042AE70:
	rax = Mem0[rcx + 0x18<64>:word64]
	return
	// succ:  fn000000000042AE70_exit
fn000000000042AE70_exit:


// fn000000000042AE80
// Return size: 8
define fn000000000042AE80
fn000000000042AE80_entry:
	rsp = fp
	// succ:  l000000000042AE80
l000000000042AE80:
	rax = Mem0[rcx + 0x30<64>:word64]
	return
	// succ:  fn000000000042AE80_exit
fn000000000042AE80_exit:


// fn000000000042AE90
// Return size: 8
define fn000000000042AE90
fn000000000042AE90_entry:
	rsp = fp
	// succ:  l000000000042AE90
l000000000042AE90:
	rax = Mem0[rcx + 0x20<64>:word64]
	return
	// succ:  fn000000000042AE90_exit
fn000000000042AE90_exit:


// fn000000000042AEA0
// Return size: 8
define fn000000000042AEA0
fn000000000042AEA0_entry:
	rsp = fp
	// succ:  l000000000042AEA0
l000000000042AEA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rdx = rdx + 0x38<64>
	SCZO = cond(rdx)
	call fn000000000046AE80 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042AEA0_exit
fn000000000042AEA0_exit:


// fn000000000042AEC0
// Return size: 8
define fn000000000042AEC0
fn000000000042AEC0_entry:
	rsp = fp
	// succ:  l000000000042AEC0
l000000000042AEC0:
	rax = Mem0[rcx + 0x10<64>:word64]
	return
	// succ:  fn000000000042AEC0_exit
fn000000000042AEC0_exit:


// fn000000000042AED0
// Return size: 8
define fn000000000042AED0
fn000000000042AED0_entry:
	rsp = fp
	// succ:  l000000000042AED0
l000000000042AED0:
	rax = Mem0[rcx + 0x28<64>:word64]
	return
	// succ:  fn000000000042AED0_exit
fn000000000042AED0_exit:


// fn000000000042AEE0
// Return size: 8
define fn000000000042AEE0
fn000000000042AEE0_entry:
	rsp = fp
	// succ:  l000000000042AEE0
l000000000042AEE0:
	rax = Mem0[rcx + 8<64>:word64]
	return
	// succ:  fn000000000042AEE0_exit
fn000000000042AEE0_exit:


// fn000000000042AEF0
// Return size: 8
define fn000000000042AEF0
fn000000000042AEF0_entry:
	rsp = fp
	// succ:  l000000000042AEF0
l000000000042AEF0:
	rax = Mem0[rcx + 0x18<64>:word64]
	return
	// succ:  fn000000000042AEF0_exit
fn000000000042AEF0_exit:


// fn000000000042AF00
// Return size: 8
define fn000000000042AF00
fn000000000042AF00_entry:
	rsp = fp
	// succ:  l000000000042AF00
l000000000042AF00:
	rax = Mem0[rcx + 0x30<64>:word64]
	return
	// succ:  fn000000000042AF00_exit
fn000000000042AF00_exit:


// fn000000000042AF10
// Return size: 8
define fn000000000042AF10
fn000000000042AF10_entry:
	rsp = fp
	// succ:  l000000000042AF10
l000000000042AF10:
	rax = Mem0[rcx + 0x20<64>:word64]
	return
	// succ:  fn000000000042AF10_exit
fn000000000042AF10_exit:


// fn000000000042AF20
// Return size: 8
define fn000000000042AF20
fn000000000042AF20_entry:
	rsp = fp
	// succ:  l000000000042AF20
l000000000042AF20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rdx = rdx + 0x38<64>
	SCZO = cond(rdx)
	call fn000000000046AE80 (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042AF20_exit
fn000000000042AF20_exit:


// fn000000000042AF40
// Return size: 8
define fn000000000042AF40
fn000000000042AF40_entry:
	rsp = fp
	// succ:  l000000000042AF40
l000000000042AF40:
	rax = 0x000000000048E790<p64>
	return
	// succ:  fn000000000042AF40_exit
fn000000000042AF40_exit:


// fn000000000042AF50
// Return size: 8
define fn000000000042AF50
fn000000000042AF50_entry:
	rsp = fp
	// succ:  l000000000042AF50
l000000000042AF50:
	rax = 0x000000000048E110<p64>
	return
	// succ:  fn000000000042AF50_exit
fn000000000042AF50_exit:


// fn000000000042AF60
// Return size: 8
define fn000000000042AF60
fn000000000042AF60_entry:
	rsp = fp
	// succ:  l000000000042AF60
l000000000042AF60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[rcx:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042B02E
	// succ:  l000000000042AF75 l000000000042B02E
l000000000042AF75:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SCZO = cond(Mem0[rbx + 8<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042AFA0
	// succ:  l000000000042AF7D l000000000042AFA0
l000000000042AF7D:
	rcx = Mem0[rdx:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042B038
	// succ:  l000000000042AF89 l000000000042B038
l000000000042AF89:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rdx + 8<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042AFB4
	// succ:  l000000000042AF91 l000000000042AFB4
l000000000042AF91:
	SCZO = cond(al - sil)
	al = CONVERT(Test(EQ,Z), bool, int8)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042AF60_exit
l000000000042AFA0:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042AFD3
	// succ:  l000000000042AFAA l000000000042AFD3
l000000000042AFAA:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042AFAD
l000000000042AFAD:
	Mem0[rbx + 8<64>:word32] = eax
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l000000000042AF7D
	// succ:  l000000000042AF7D
l000000000042AFB4:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042B000
	// succ:  l000000000042AFBE l000000000042B000
l000000000042AFBE:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042AFC1
l000000000042AFC1:
	Mem0[rdx + 8<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - sil)
	al = CONVERT(Test(EQ,Z), bool, int8)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042AF60_exit
l000000000042AFD3:
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x28<64>:word64] = rdx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	rdx = Mem0[rsp + 0x28<64>:word64]
	branch Test(NE,Z) l000000000042AFAD
	// succ:  l000000000042AFE8 l000000000042AFAD
l000000000042AFE8:
	Mem0[rbx:word64] = 0<64>
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	goto l000000000042AF7D
	// succ:  l000000000042AF7D
l000000000042B000:
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x28<64>:word64] = rdx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	rdx = Mem0[rsp + 0x28<64>:word64]
	branch Test(NE,Z) l000000000042AFC1
	// succ:  l000000000042B015 l000000000042AFC1
l000000000042B015:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdx:word64] = 0<64>
	SCZO = cond(al - sil)
	al = CONVERT(Test(EQ,Z), bool, int8)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042AF60_exit
l000000000042B02E:
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	goto l000000000042AF7D
	// succ:  l000000000042AF7D
l000000000042B038:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042AF91
	// succ:  l000000000042AF91
fn000000000042AF60_exit:


// fn000000000042B050
// Return size: 8
define fn000000000042B050
fn000000000042B050_entry:
	rsp = fp
	// succ:  l000000000042B050
l000000000042B050:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdx = Mem0[rcx:word64]
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l000000000042B0AB
	// succ:  l000000000042B05D l000000000042B0AB
l000000000042B05D:
	eax = Mem0[rcx + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042B070
	// succ:  l000000000042B065 l000000000042B070
l000000000042B065:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B050_exit
l000000000042B070:
	rax = Mem0[rdx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rdx + 0x18<64>:word64])
	rbx = rcx
	branch Test(UGE,C) l000000000042B090
	// succ:  l000000000042B07D l000000000042B090
l000000000042B07D:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042B080
l000000000042B080:
	Mem0[rbx + 8<64>:word32] = eax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B050_exit
l000000000042B090:
	rax = Mem0[rdx:word64]
	rcx = rdx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042B080
	// succ:  l000000000042B09E l000000000042B080
l000000000042B09E:
	Mem0[rbx:word64] = 0<64>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B050_exit
l000000000042B0AB:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042B065
	// succ:  l000000000042B065
fn000000000042B050_exit:


// fn000000000042B0C0
// Return size: 8
define fn000000000042B0C0
fn000000000042B0C0_entry:
	rsp = fp
	// succ:  l000000000042B0C0
l000000000042B0C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	rsi = rcx
	rcx = Mem0[rcx:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042B0DF
	// succ:  l000000000042B0D6 l000000000042B0DF
l000000000042B0D6:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	SCZO = cond(Mem0[rsi + 8<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000042B130
	// succ:  l000000000042B0DF l000000000042B130
l000000000042B0DF:
	rcx = Mem0[rdx:word64]
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042B0F5
	// succ:  l000000000042B0EC l000000000042B0F5
l000000000042B0EC:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rdx + 8<64>:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000042B101
	// succ:  l000000000042B0F5 l000000000042B101
l000000000042B0F5:
	SCZO = cond(al - bl)
	al = CONVERT(Test(EQ,Z), bool, int8)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B0C0_exit
l000000000042B101:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042B193
	// succ:  l000000000042B10F l000000000042B193
l000000000042B10F:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042B112
l000000000042B112:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000042B150
	// succ:  l000000000042B118 l000000000042B150
l000000000042B118:
	Mem0[rdx + 8<64>:word16] = ax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - bl)
	al = CONVERT(Test(EQ,Z), bool, int8)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B0C0_exit
l000000000042B130:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042B181
	// succ:  l000000000042B13A l000000000042B181
l000000000042B13A:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042B13D
l000000000042B13D:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000042B170
	// succ:  l000000000042B143 l000000000042B170
l000000000042B143:
	Mem0[rsi + 8<64>:word16] = ax
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l000000000042B0DF
	// succ:  l000000000042B0DF
l000000000042B150:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	Mem0[rdx:word64] = 0<64>
	SCZO = cond(al - bl)
	al = CONVERT(Test(EQ,Z), bool, int8)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B0C0_exit
l000000000042B170:
	Mem0[rsi:word64] = 0<64>
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042B0DF
	// succ:  l000000000042B0DF
l000000000042B181:
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x28<64>:word64] = rdx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	rdx = Mem0[rsp + 0x28<64>:word64]
	goto l000000000042B13D
	// succ:  l000000000042B13D
l000000000042B193:
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x28<64>:word64] = rdx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	rdx = Mem0[rsp + 0x28<64>:word64]
	goto l000000000042B112
	// succ:  l000000000042B112
fn000000000042B0C0_exit:


// fn000000000042B1B0
// Return size: 8
define fn000000000042B1B0
fn000000000042B1B0_entry:
	rsp = fp
	// succ:  l000000000042B1B0
l000000000042B1B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdx = Mem0[rcx:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l000000000042B1CC
	// succ:  l000000000042B1C2 l000000000042B1CC
l000000000042B1C2:
	eax = CONVERT(Mem0[rcx + 8<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000042B1D2
	// succ:  l000000000042B1CC l000000000042B1D2
l000000000042B1CC:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B1B0_exit
l000000000042B1D2:
	rax = Mem0[rdx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rdx + 0x18<64>:word64])
	rbx = rcx
	branch Test(UGE,C) l000000000042B200
	// succ:  l000000000042B1DF l000000000042B200
l000000000042B1DF:
	eax = CONVERT(Mem0[rax:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042B1E2
l000000000042B1E2:
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(EQ,Z) l000000000042B1F2
	// succ:  l000000000042B1E8 l000000000042B1F2
l000000000042B1E8:
	Mem0[rbx + 8<64>:word16] = ax
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B1B0_exit
l000000000042B1F2:
	Mem0[rbx:word64] = 0<64>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B1B0_exit
l000000000042B200:
	rax = Mem0[rdx:word64]
	rcx = rdx
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	goto l000000000042B1E2
	// succ:  l000000000042B1E2
fn000000000042B1B0_exit:


// fn000000000042B210
// Return size: 8
define fn000000000042B210
fn000000000042B210_entry:
	rsp = fp
	// succ:  l000000000042B210
l000000000042B210:
	rax = 0x000000000048E770<p64>
	return
	// succ:  fn000000000042B210_exit
fn000000000042B210_exit:


// fn000000000042B220
// Return size: 8
define fn000000000042B220
fn000000000042B220_entry:
	rsp = fp
	// succ:  l000000000042B220
l000000000042B220:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbp = 0x000000000042B280<p64>
	SCZO = cond(rdx - r8)
	rsi = rcx
	rbx = rdx
	rdi = r8
	branch Test(ULT,C) l000000000042B251
	// succ:  l000000000042B23D l000000000042B251
l000000000042B23D:
	goto l000000000042B272
	// succ:  l000000000042B272
l000000000042B240:
	call fn000000000042B280 (retsize: 8;)
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	Mem0[rbx - 1<64>:byte] = al
	SCZO = cond(rbx - rdi)
	branch Test(EQ,Z) l000000000042B272
	// succ:  l000000000042B251 l000000000042B272
l000000000042B251:
	rdx = Mem0[rsi:word64]
	rcx = rsi
	r9 = Mem0[rdx + 0x20<64>:word64]
	edx = CONVERT(Mem0[rbx:byte], byte, int32)
	SCZO = cond(r9 - rbp)
	branch Test(EQ,Z) l000000000042B240
	// succ:  l000000000042B263 l000000000042B240
l000000000042B263:
	call r9 (retsize: 8;)
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	Mem0[rbx - 1<64>:byte] = al
	SCZO = cond(rbx - rdi)
	branch Test(NE,Z) l000000000042B251
	// succ:  l000000000042B272 l000000000042B251
l000000000042B272:
	rax = rdi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B220_exit
fn000000000042B220_exit:


// fn000000000042B280
// Return size: 8
define fn000000000042B280
fn000000000042B280_entry:
	rsp = fp
	// succ:  l000000000042B280
l000000000042B280:
	rcx = Mem0[rcx + 0x30<64>:word64]
	r8d = CONVERT(dl, byte, word32)
	r8 = CONVERT(r8d, word32, uint64)
	eax = SLICE(rdx + 0x20<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(Mem0[rcx + r8 * 2<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l000000000042B293
	// succ:  l000000000042B290_1 l000000000042B293
l000000000042B290_1:
	eax = edx
	// succ:  l000000000042B293
l000000000042B293:
	return
	// succ:  fn000000000042B280_exit
fn000000000042B280_exit:


// fn000000000042B2A0
// Return size: 8
define fn000000000042B2A0
fn000000000042B2A0_entry:
	rsp = fp
	// succ:  l000000000042B2A0
l000000000042B2A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbp = 0x000000000042B300<p64>
	SCZO = cond(rdx - r8)
	rsi = rcx
	rbx = rdx
	rdi = r8
	branch Test(ULT,C) l000000000042B2D1
	// succ:  l000000000042B2BD l000000000042B2D1
l000000000042B2BD:
	goto l000000000042B2F2
	// succ:  l000000000042B2F2
l000000000042B2C0:
	call fn000000000042B300 (retsize: 8;)
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	Mem0[rbx - 1<64>:byte] = al
	SCZO = cond(rbx - rdi)
	branch Test(EQ,Z) l000000000042B2F2
	// succ:  l000000000042B2D1 l000000000042B2F2
l000000000042B2D1:
	rdx = Mem0[rsi:word64]
	rcx = rsi
	r9 = Mem0[rdx + 0x10<64>:word64]
	edx = CONVERT(Mem0[rbx:byte], byte, int32)
	SCZO = cond(r9 - rbp)
	branch Test(EQ,Z) l000000000042B2C0
	// succ:  l000000000042B2E3 l000000000042B2C0
l000000000042B2E3:
	call r9 (retsize: 8;)
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	Mem0[rbx - 1<64>:byte] = al
	SCZO = cond(rbx - rdi)
	branch Test(NE,Z) l000000000042B2D1
	// succ:  l000000000042B2F2 l000000000042B2D1
l000000000042B2F2:
	rax = rdi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B2A0_exit
fn000000000042B2A0_exit:


// fn000000000042B300
// Return size: 8
define fn000000000042B300
fn000000000042B300_entry:
	rsp = fp
	// succ:  l000000000042B300
l000000000042B300:
	rcx = Mem0[rcx + 0x30<64>:word64]
	r8d = CONVERT(dl, byte, word32)
	r8 = CONVERT(r8d, word32, uint64)
	eax = SLICE(rdx - 0x20<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(Mem0[rcx + r8 * 2<64>:byte] & 2<8>)
	C = false
	branch Test(NE,Z) l000000000042B313
	// succ:  l000000000042B310_1 l000000000042B313
l000000000042B310_1:
	eax = edx
	// succ:  l000000000042B313
l000000000042B313:
	return
	// succ:  fn000000000042B300_exit
fn000000000042B300_exit:


// fn000000000042B320
// Return size: 8
define fn000000000042B320
fn000000000042B320_entry:
	rsp = fp
	// succ:  l000000000042B320
l000000000042B320:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x120<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rbx = rsp + 0x20<64>
	rbp = rcx
	// succ:  l000000000042B340
l000000000042B340:
	Mem0[rbx + rax:byte] = al
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 0x100<64>)
	branch Test(NE,Z) l000000000042B340
	// succ:  l000000000042B34F l000000000042B340
l000000000042B34F:
	rax = Mem0[rbp + 0<64>:word64]
	rdx = 0x000000000042B5D0<p64>
	r12 = rbp + 0x39<64>
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l000000000042B3C9
	// succ:  l000000000042B367 l000000000042B3C9
l000000000042B367:
	rax = Mem0[rbx:word64]
	rdi = rbp + 0x41<64>
	rsi = rbx
	rdi = rdi & 0xFFFFFFFFFFFFFFF8<64>
	SZO = cond(rdi)
	C = false
	Mem0[rbp + 0x39<64>:word64] = rax
	rax = Mem0[rsp + 0x118<64>:word64]
	Mem0[rbp + 0x131<64>:word64] = rax
	rax = r12
	rax = rax - rdi
	SCZO = cond(rax)
	rsi = rsi - rax
	SCZO = cond(rsi)
	eax = eax + 0x100<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax >>u 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	// succ:  l000000000042B39B
l000000000042B39B:
	branch rcx == 0<64> l000000000042B39E
	// succ:  l000000000042B39B_1 l000000000042B39E
l000000000042B39B_1:
	v18 = Mem0[rsi:word64]
	Mem0[rdi:word64] = v18
	rsi = rsi + 8<i64>
	rdi = rdi + 8<i64>
	rcx = rcx - 1<64>
	goto l000000000042B39B
	// succ:  l000000000042B39B
l000000000042B39E:
	Mem0[rbp + 0x38<64>:byte] = 1<8>
	r8d = 0x100<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = r12
	rcx = rbx
	eax = memcmp(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000042B3BB
	// succ:  l000000000042B3B7 l000000000042B3BB
l000000000042B3B7:
	Mem0[rbp + 0x38<64>:byte] = 2<8>
	// succ:  l000000000042B3BB
l000000000042B3BB:
	rsp = rsp + 0x120<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B320_exit
l000000000042B3C9:
	r9 = r12
	r8 = rsp + 0x120<64>
	rdx = rbx
	rcx = rbp
	call rax (retsize: 8;)
	goto l000000000042B39E
	// succ:  l000000000042B39E
fn000000000042B320_exit:


// fn000000000042B3E0
// Return size: 8
define fn000000000042B3E0
fn000000000042B3E0_entry:
	rsp = fp
	// succ:  l000000000042B3E0
l000000000042B3E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x148<64>
	SCZO = cond(rsp)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rbx = rsp + 0x40<64>
	r12 = rcx
	// succ:  l000000000042B400
l000000000042B400:
	Mem0[rbx + rax:byte] = al
	rax = rax + 1<64>
	SCZO = cond(rax)
	SCZO = cond(rax - 0x100<64>)
	branch Test(NE,Z) l000000000042B400
	// succ:  l000000000042B40F l000000000042B400
l000000000042B40F:
	rax = Mem0[r12:word64]
	rbp = 0x000000000042B600<p64>
	r13 = r12 + 0x139<64>
	rax = Mem0[rax + 0x48<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l000000000042B4CC
	// succ:  l000000000042B42F l000000000042B4CC
l000000000042B42F:
	rax = Mem0[rbx:word64]
	rdi = r12 + 0x141<64>
	rsi = rbx
	rdi = rdi & 0xFFFFFFFFFFFFFFF8<64>
	SZO = cond(rdi)
	C = false
	Mem0[r12 + 0x139<64>:word64] = rax
	rax = Mem0[rsp + 0x138<64>:word64]
	Mem0[r12 + 0x231<64>:word64] = rax
	rax = r13
	rax = rax - rdi
	SCZO = cond(rax)
	rsi = rsi - rax
	SCZO = cond(rsi)
	eax = eax + 0x100<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax >>u 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	// succ:  l000000000042B46C
l000000000042B46C:
	branch rcx == 0<64> l000000000042B46F
	// succ:  l000000000042B46C_1 l000000000042B46F
l000000000042B46C_1:
	v18 = Mem0[rsi:word64]
	Mem0[rdi:word64] = v18
	rsi = rsi + 8<i64>
	rdi = rdi + 8<i64>
	rcx = rcx - 1<64>
	goto l000000000042B46C
	// succ:  l000000000042B46C
l000000000042B46F:
	Mem0[r12 + 0x239<64>:byte] = 1<8>
	r8d = 0x100<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = r13
	rcx = rbx
	eax = memcmp(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000042B4A6
	// succ:  l000000000042B48D l000000000042B4A6
l000000000042B48D:
	Mem0[r12 + 0x239<64>:byte] = 2<8>
	rsp = rsp + 0x148<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B3E0_exit
l000000000042B4A6:
	rax = Mem0[r12:word64]
	rax = Mem0[rax + 0x48<64>:word64]
	SCZO = cond(rax - rbp)
	branch Test(NE,Z) l000000000042B4E6
	// succ:  l000000000042B4B3 l000000000042B4E6
l000000000042B4B3:
	eax = CONVERT(Mem0[rsp + 0x40<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042B4B8
l000000000042B4B8:
	SCZO = cond(al - 1<8>)
	branch Test(EQ,Z) l000000000042B48D
	// succ:  l000000000042B4BC l000000000042B48D
l000000000042B4BC:
	rsp = rsp + 0x148<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B3E0_exit
l000000000042B4CC:
	Mem0[rsp + 0x20<64>:word64] = r13
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rsp + 0x140<64>
	rdx = rbx
	rcx = r12
	call rax (retsize: 8;)
	goto l000000000042B46F
	// succ:  l000000000042B46F
l000000000042B4E6:
	rdx = rsp + 0x3F<64>
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	r8 = rbx + 1<64>
	rcx = r12
	Mem0[rsp + 0x20<64>:word64] = rdx
	rdx = rbx
	call rax (retsize: 8;)
	eax = CONVERT(Mem0[rsp + 0x3F<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042B4B8
	// succ:  l000000000042B4B8
fn000000000042B3E0_exit:


// fn000000000042B510
// Return size: 8
define fn000000000042B510
fn000000000042B510_entry:
	rsp = fp
	// succ:  l000000000042B510
l000000000042B510:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	r10d = CONVERT(Mem0[rcx + 0x38<64>:byte], byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	rbx = rcx
	rsi = r8
	SCZO = cond(r10b - 1<8>)
	branch Test(EQ,Z) l000000000042B53F
	// succ:  l000000000042B527 l000000000042B53F
l000000000042B527:
	SZO = cond(r10b & r10b)
	C = false
	branch Test(EQ,Z) l000000000042B560
	// succ:  l000000000042B52C l000000000042B560
l000000000042B52C:
	rax = Mem0[rbx:word64]
	rcx = 0x000000000042B5D0<p64>
	rax = Mem0[rax + 0x38<64>:word64]
	SCZO = cond(rax - rcx)
	branch Test(NE,Z) l000000000042B580
	// succ:  l000000000042B53F l000000000042B580
l000000000042B53F:
	r8 = rsi
	rcx = r9
	r8 = r8 - rdx
	SCZO = cond(r8)
	rax = memcpy(rcx, rdx, r8)
	rax = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B510_exit
l000000000042B560:
	Mem0[rsp + 0x28<64>:word64] = r9
	Mem0[rsp + 0x20<64>:word64] = rdx
	call fn000000000042B320 (retsize: 8;)
	r9 = Mem0[rsp + 0x28<64>:word64]
	rdx = Mem0[rsp + 0x20<64>:word64]
	goto l000000000042B52C
	// succ:  l000000000042B52C
l000000000042B580:
	r8 = rsi
	rcx = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call rax (retsize: 0;)
	return
	// succ:  fn000000000042B510_exit
fn000000000042B510_exit:


// fn000000000042B590
// Return size: 8
define fn000000000042B590
fn000000000042B590_entry:
	rsp = fp
	// succ:  l000000000042B590
l000000000042B590:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = rcx
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	call fn000000000042B320 (retsize: 8;)
	rax = Mem0[rbx:word64]
	rdx = 0x000000000042B5F0<p64>
	rax = Mem0[rax + 0x30<64>:word64]
	SCZO = cond(rax - rdx)
	branch Test(NE,Z) l000000000042B5C0
	// succ:  l000000000042B5B3 l000000000042B5C0
l000000000042B5B3:
	eax = esi
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B590_exit
l000000000042B5C0:
	edx = CONVERT(sil, byte, int32)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call rax (retsize: 0;)
	return
	// succ:  fn000000000042B590_exit
fn000000000042B590_exit:


// fn000000000042B5D0
// Return size: 8
define fn000000000042B5D0
fn000000000042B5D0_entry:
	rsp = fp
	// succ:  l000000000042B5D0
l000000000042B5D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = r8
	rcx = r9
	r8 = r8 - rdx
	SCZO = cond(r8)
	rax = memcpy(rcx, rdx, r8)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B5D0_exit
fn000000000042B5D0_exit:


// fn000000000042B5F0
// Return size: 8
define fn000000000042B5F0
fn000000000042B5F0_entry:
	rsp = fp
	// succ:  l000000000042B5F0
l000000000042B5F0:
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000042B5F0_exit
fn000000000042B5F0_exit:


// fn000000000042B600
// Return size: 8
define fn000000000042B600
fn000000000042B600_entry:
	rsp = fp
	// succ:  l000000000042B600
l000000000042B600:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rcx = Mem0[rsp + 0x50<64>:word64]
	rbx = r8
	r8 = r8 - rdx
	SCZO = cond(r8)
	rax = memcpy(rcx, rdx, r8)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B600_exit
fn000000000042B600_exit:


// fn000000000042B620
// Return size: 8
define fn000000000042B620
fn000000000042B620_entry:
	rsp = fp
	// succ:  l000000000042B620
l000000000042B620:
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000042B620_exit
fn000000000042B620_exit:


// fn000000000042B630
// Return size: 8
define fn000000000042B630
fn000000000042B630_entry:
	rsp = fp
	// succ:  l000000000042B630
l000000000042B630:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(r8 - r9)
	rdi = rcx
	rbx = r8
	rsi = r9
	ebp = CONVERT(dx, word16, word32)
	rbp = CONVERT(ebp, word32, uint64)
	branch Test(ULT,C) l000000000042B655
	// succ:  l000000000042B649 l000000000042B655
l000000000042B649:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B630_exit
l000000000042B655:
	rax = Mem0[rdi:word64]
	r8d = CONVERT(Mem0[rbx:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000042B649
	// succ:  l000000000042B668 l000000000042B649
l000000000042B668:
	rbx = rbx + 2<64>
	SCZO = cond(rbx)
	SCZO = cond(rsi - rbx)
	branch Test(UGT,CZ) l000000000042B655
	// succ:  l000000000042B671 l000000000042B655
l000000000042B671:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B630_exit
fn000000000042B630_exit:


// fn000000000042B680
// Return size: 8
define fn000000000042B680
fn000000000042B680_entry:
	rsp = fp
	// succ:  l000000000042B680
l000000000042B680:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(rdx - r8)
	rsi = rdx
	rbp = r8
	branch Test(UGE,C) l000000000042B6C7
	// succ:  l000000000042B693 l000000000042B6C7
l000000000042B693:
	rdx = r8 + 1<64>
	rbx = rsi + 2<64>
	rdx = rdx - rbx
	SCZO = cond(rdx)
	rdx = rdx >>u 1<64>
	SCZO = cond(rdx)
	rdi = rsi + 2<64> + rdx * 2<64>
	goto l000000000042B6B4
	// succ:  l000000000042B6B4
l000000000042B6B0:
	rbx = rbx + 2<64>
	SCZO = cond(rbx)
	// succ:  l000000000042B6B4
l000000000042B6B4:
	ecx = CONVERT(Mem0[rsi:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	ax = towlower(rcx)
	SCZO = cond(rbx - rdi)
	Mem0[rsi:word16] = ax
	rsi = rbx
	branch Test(NE,Z) l000000000042B6B0
	// succ:  l000000000042B6C7 l000000000042B6B0
l000000000042B6C7:
	rax = rbp
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B680_exit
fn000000000042B680_exit:


// fn000000000042B6E0
// Return size: 0
define fn000000000042B6E0
fn000000000042B6E0_entry:
	rsp = fp
	// succ:  l000000000042B6E0
l000000000042B6E0:
	ecx = CONVERT(dx, word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	ax = towlower(rcx)
	return
	// succ:  fn000000000042B6E0_exit
fn000000000042B6E0_exit:


// fn000000000042B6F0
// Return size: 8
define fn000000000042B6F0
fn000000000042B6F0_entry:
	rsp = fp
	// succ:  l000000000042B6F0
l000000000042B6F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(rdx - r8)
	rsi = rdx
	rbp = r8
	branch Test(UGE,C) l000000000042B737
	// succ:  l000000000042B703 l000000000042B737
l000000000042B703:
	rdx = r8 + 1<64>
	rbx = rsi + 2<64>
	rdx = rdx - rbx
	SCZO = cond(rdx)
	rdx = rdx >>u 1<64>
	SCZO = cond(rdx)
	rdi = rsi + 2<64> + rdx * 2<64>
	goto l000000000042B724
	// succ:  l000000000042B724
l000000000042B720:
	rbx = rbx + 2<64>
	SCZO = cond(rbx)
	// succ:  l000000000042B724
l000000000042B724:
	ecx = CONVERT(Mem0[rsi:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	ax = towupper(rcx)
	SCZO = cond(rbx - rdi)
	Mem0[rsi:word16] = ax
	rsi = rbx
	branch Test(NE,Z) l000000000042B720
	// succ:  l000000000042B737 l000000000042B720
l000000000042B737:
	rax = rbp
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B6F0_exit
fn000000000042B6F0_exit:


// fn000000000042B750
// Return size: 0
define fn000000000042B750
fn000000000042B750_entry:
	rsp = fp
	// succ:  l000000000042B750
l000000000042B750:
	ecx = CONVERT(dx, word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	ax = towupper(rcx)
	return
	// succ:  fn000000000042B750_exit
fn000000000042B750_exit:


// fn000000000042B760
// Return size: 8
define fn000000000042B760
fn000000000042B760_entry:
	rsp = fp
	// succ:  l000000000042B760
l000000000042B760:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(r8 - r9)
	rdi = rcx
	rbx = r8
	rsi = r9
	ebp = CONVERT(dx, word16, word32)
	rbp = CONVERT(ebp, word32, uint64)
	branch Test(ULT,C) l000000000042B785
	// succ:  l000000000042B779 l000000000042B785
l000000000042B779:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B760_exit
l000000000042B785:
	rax = Mem0[rdi:word64]
	r8d = CONVERT(Mem0[rbx:word16], word16, word32)
	r8 = CONVERT(r8d, word32, uint64)
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call Mem0[rax + 0x10<64>:word64] (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000042B779
	// succ:  l000000000042B798 l000000000042B779
l000000000042B798:
	rbx = rbx + 2<64>
	SCZO = cond(rbx)
	SCZO = cond(rsi - rbx)
	branch Test(UGT,CZ) l000000000042B785
	// succ:  l000000000042B7A1 l000000000042B785
l000000000042B7A1:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B760_exit
fn000000000042B760_exit:


// fn000000000042B7B0
// Return size: 8
define fn000000000042B7B0
fn000000000042B7B0_entry:
	rsp = fp
	// succ:  l000000000042B7B0
l000000000042B7B0:
	SCZO = cond(dx - 0x10<16>)
	branch Test(EQ,Z) l000000000042B890
	// succ:  l000000000042B7BA l000000000042B890
l000000000042B7BA:
	branch Test(UGT,CZ) l000000000042B7F0
	// succ:  l000000000042B7BC l000000000042B7F0
l000000000042B7BC:
	SCZO = cond(dx - 4<16>)
	branch Test(EQ,Z) l000000000042B860
	// succ:  l000000000042B7C6 l000000000042B860
l000000000042B7C6:
	branch Test(ULE,CZ) l000000000042B820
	// succ:  l000000000042B7C8 l000000000042B820
l000000000042B7C8:
	SCZO = cond(dx - 8<16>)
	branch Test(EQ,Z) l000000000042B8A0
	// succ:  l000000000042B7D2 l000000000042B8A0
l000000000042B7D2:
	SCZO = cond(dx - 0xC<16>)
	branch Test(NE,Z) l000000000042B880
	// succ:  l000000000042B7DC l000000000042B880
l000000000042B7DC:
	rcx = 0x000000000048E2AF<p64>
	// succ:  l000000000042B7E3_thunk_fn0000000000412AA0
l000000000042B7E3_thunk_fn0000000000412AA0:
	call fn0000000000412AA0 (retsize: 0;)
	return
	// succ:  fn000000000042B7B0_exit
l000000000042B7F0:
	SCZO = cond(dx - 0x100<16>)
	branch Test(EQ,Z) l000000000042B8B0
	// succ:  l000000000042B7FB l000000000042B8B0
l000000000042B7FB:
	branch Test(ULE,CZ) l000000000042B840
	// succ:  l000000000042B7FD l000000000042B840
l000000000042B7FD:
	SCZO = cond(dx - 0x200<16>)
	branch Test(EQ,Z) l000000000042B870
	// succ:  l000000000042B804 l000000000042B870
l000000000042B804:
	SCZO = cond(dx - 0x20C<16>)
	branch Test(NE,Z) l000000000042B880
	// succ:  l000000000042B80B l000000000042B880
l000000000042B80B:
	rcx = 0x000000000048E2B5<p64>
	// succ:  l000000000042B812_thunk_fn0000000000412AA0
l000000000042B812_thunk_fn0000000000412AA0:
	call fn0000000000412AA0 (retsize: 0;)
	return
	// succ:  fn000000000042B7B0_exit
l000000000042B820:
	SCZO = cond(dx - 1<16>)
	branch Test(EQ,Z) l000000000042B883
	// succ:  l000000000042B826 l000000000042B883
l000000000042B826:
	SCZO = cond(dx - 2<16>)
	branch Test(NE,Z) l000000000042B880
	// succ:  l000000000042B82C l000000000042B880
l000000000042B82C:
	rcx = 0x000000000048E290<p64>
	// succ:  l000000000042B833_thunk_fn0000000000412AA0
l000000000042B833_thunk_fn0000000000412AA0:
	call fn0000000000412AA0 (retsize: 0;)
	return
	// succ:  fn000000000042B7B0_exit
l000000000042B840:
	SCZO = cond(dx - 0x20<16>)
	branch Test(EQ,Z) l000000000042B8C0
	// succ:  l000000000042B846 l000000000042B8C0
l000000000042B846:
	SCZO = cond(dx - 0x40<16>)
	branch Test(NE,Z) l000000000042B880
	// succ:  l000000000042B84C l000000000042B880
l000000000042B84C:
	rcx = 0x000000000048E27E<p64>
	// succ:  l000000000042B853_thunk_fn0000000000412AA0
l000000000042B853_thunk_fn0000000000412AA0:
	call fn0000000000412AA0 (retsize: 0;)
	return
	// succ:  fn000000000042B7B0_exit
l000000000042B860:
	rcx = 0x000000000048E296<p64>
	// succ:  l000000000042B867_thunk_fn0000000000412AA0
l000000000042B867_thunk_fn0000000000412AA0:
	call fn0000000000412AA0 (retsize: 0;)
	return
	// succ:  fn000000000042B7B0_exit
l000000000042B870:
	rcx = 0x000000000048E2A2<p64>
	// succ:  l000000000042B877_thunk_fn0000000000412AA0
l000000000042B877_thunk_fn0000000000412AA0:
	call fn0000000000412AA0 (retsize: 0;)
	return
	// succ:  fn000000000042B7B0_exit
l000000000042B880:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000042B7B0_exit
l000000000042B883:
	rcx = 0x000000000048E28A<p64>
	// succ:  l000000000042B88A_thunk_fn0000000000412AA0
l000000000042B88A_thunk_fn0000000000412AA0:
	call fn0000000000412AA0 (retsize: 0;)
	return
	// succ:  fn000000000042B7B0_exit
l000000000042B890:
	rcx = 0x000000000048E2A8<p64>
	// succ:  l000000000042B897_thunk_fn0000000000412AA0
l000000000042B897_thunk_fn0000000000412AA0:
	call fn0000000000412AA0 (retsize: 0;)
	return
	// succ:  fn000000000042B7B0_exit
l000000000042B8A0:
	rcx = 0x000000000048E29C<p64>
	// succ:  l000000000042B8A7_thunk_fn0000000000412AA0
l000000000042B8A7_thunk_fn0000000000412AA0:
	call fn0000000000412AA0 (retsize: 0;)
	return
	// succ:  fn000000000042B7B0_exit
l000000000042B8B0:
	rcx = 0x000000000048E284<p64>
	// succ:  l000000000042B8B7_thunk_fn0000000000412AA0
l000000000042B8B7_thunk_fn0000000000412AA0:
	call fn0000000000412AA0 (retsize: 0;)
	return
	// succ:  fn000000000042B7B0_exit
l000000000042B8C0:
	rcx = 0x000000000048E278<p64>
	// succ:  l000000000042B8C7_thunk_fn0000000000412AA0
l000000000042B8C7_thunk_fn0000000000412AA0:
	call fn0000000000412AA0 (retsize: 0;)
	return
	// succ:  fn000000000042B7B0_exit
fn000000000042B7B0_exit:


// fn000000000042B8D0
// Return size: 8
define fn000000000042B8D0
fn000000000042B8D0_entry:
	rsp = fp
	// succ:  l000000000042B8D0
l000000000042B8D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(rdx - r8)
	rdi = rdx
	Mem0[rsp + 0x80<64>:word64] = r8
	r14 = r9
	branch Test(UGE,C) l000000000042B952
	// succ:  l000000000042B8F3 l000000000042B952
l000000000042B8F3:
	rsi = Mem0[rsp + 0x80<64>:word64]
	rax = rdx
	r13 = rcx + 0x2BA<64>
	rax = ~rax
	rbp = rcx + 0x2DA<64>
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r12 = rax + rsi
	r12 = r12 >>u 1<64>
	SCZO = cond(r12)
	r12 = r12 + 1<64>
	SCZO = cond(r12)
	// succ:  l000000000042B920
l000000000042B920:
	r15 = r13
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	// succ:  l000000000042B925
l000000000042B925:
	edx = CONVERT(Mem0[r15:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	ecx = CONVERT(Mem0[rdi + rbx * 2<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = iswctype(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000042B93B
	// succ:  l000000000042B936 l000000000042B93B
l000000000042B936:
	si = si | Mem0[r15 - 0x20<64>:word16]
	SZO = cond(si)
	C = false
	// succ:  l000000000042B93B
l000000000042B93B:
	r15 = r15 + 2<64>
	SCZO = cond(r15)
	SCZO = cond(r15 - rbp)
	branch Test(NE,Z) l000000000042B925
	// succ:  l000000000042B944 l000000000042B925
l000000000042B944:
	Mem0[r14 + rbx * 2<64>:word16] = si
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	SCZO = cond(rbx - r12)
	branch Test(NE,Z) l000000000042B920
	// succ:  l000000000042B952 l000000000042B920
l000000000042B952:
	rax = Mem0[rsp + 0x80<64>:word64]
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B8D0_exit
fn000000000042B8D0_exit:


// fn000000000042B970
// Return size: 8
define fn000000000042B970
fn000000000042B970_entry:
	rsp = fp
	// succ:  l000000000042B970
l000000000042B970:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	rbx = rcx + 0x29A<64>
	rsi = rcx + 0x2BA<64>
	ebp = CONVERT(r8w, word16, word32)
	rbp = CONVERT(ebp, word32, uint64)
	goto l000000000042B999
	// succ:  l000000000042B999
l000000000042B990:
	rbx = rbx + 2<64>
	SCZO = cond(rbx)
	SCZO = cond(rbx - rsi)
	branch Test(EQ,Z) l000000000042B9C0
	// succ:  l000000000042B999 l000000000042B9C0
l000000000042B999:
	SZO = cond(Mem0[rbx:word16] & di)
	C = false
	branch Test(EQ,Z) l000000000042B990
	// succ:  l000000000042B99E l000000000042B990
l000000000042B99E:
	edx = CONVERT(Mem0[rbx + 0x20<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	ecx = ebp
	rcx = CONVERT(ecx, word32, uint64)
	eax = iswctype(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000042B990
	// succ:  l000000000042B9AD l000000000042B990
l000000000042B9AD:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B970_exit
l000000000042B9C0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042B970_exit
fn000000000042B970_exit:


// fn000000000042B9D0
// Return size: 8
define fn000000000042B9D0
fn000000000042B9D0_entry:
	rsp = fp
	// succ:  l000000000042B9D0
l000000000042B9D0:
	SCZO = cond(rdx - r8)
	branch Test(UGE,C) l000000000042B9F4
	// succ:  l000000000042B9D5 l000000000042B9F4
l000000000042B9D5:
	r10d = CONVERT(Mem0[rdx:byte], byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	r9 = r9 + 2<64>
	SCZO = cond(r9)
	r10d = CONVERT(Mem0[rcx + 0x9A<64> + r10 * 2<64>:word16], word16, word32)
	r10 = CONVERT(r10d, word32, uint64)
	Mem0[r9 - 2<64>:word16] = r10w
	SCZO = cond(rdx - r8)
	branch Test(NE,Z) l000000000042B9D5
	// succ:  l000000000042B9F4 l000000000042B9D5
l000000000042B9F4:
	rax = r8
	return
	// succ:  fn000000000042B9D0_exit
fn000000000042B9D0_exit:


// fn000000000042BA00
// Return size: 8
define fn000000000042BA00
fn000000000042BA00_entry:
	rsp = fp
	// succ:  l000000000042BA00
l000000000042BA00:
	edx = CONVERT(dl, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(Mem0[rcx + 0x9A<64> + rdx * 2<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000042BA00_exit
fn000000000042BA00_exit:


// fn000000000042BA10
// Return size: 8
define fn000000000042BA10
fn000000000042BA10_entry:
	rsp = fp
	// succ:  l000000000042BA10
l000000000042BA10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[rcx + 0x18<64>:byte] - 0<8>)
	rbx = Mem0[rsp + 0x80<64>:word64]
	r12 = rcx
	rbp = r8
	edi = r9d
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l000000000042BA83
	// succ:  l000000000042BA33 l000000000042BA83
l000000000042BA33:
	SCZO = cond(rdx - r8)
	branch Test(UGE,C) l000000000042BA73
	// succ:  l000000000042BA38 l000000000042BA73
l000000000042BA38:
	rax = r8 + 1<64>
	rsi = rdx + 2<64>
	rax = rax - rsi
	SCZO = cond(rax)
	rax = rax >>u 1<64>
	SCZO = cond(rax)
	r12 = rbx + 1<64> + rax
	goto l000000000042BA54
	// succ:  l000000000042BA54
l000000000042BA50:
	rsi = rsi + 2<64>
	SCZO = cond(rsi)
	// succ:  l000000000042BA54
l000000000042BA54:
	ecx = CONVERT(Mem0[rdx:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000412B10 (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l000000000042BA64
	// succ:  l000000000042BA61_1 l000000000042BA64
l000000000042BA61_1:
	edx = edi
	// succ:  l000000000042BA64
l000000000042BA64:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	Mem0[rbx - 1<64>:byte] = dl
	SCZO = cond(rbx - r12)
	rdx = rsi
	branch Test(NE,Z) l000000000042BA50
	// succ:  l000000000042BA73 l000000000042BA50
l000000000042BA73:
	rax = rbp
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042BA10_exit
l000000000042BA83:
	SCZO = cond(rdx - r8)
	branch Test(UGE,C) l000000000042BA73
	// succ:  l000000000042BA88 l000000000042BA73
l000000000042BA88:
	rax = r8 + 1<64>
	rsi = rdx + 2<64>
	rax = rax - rsi
	SCZO = cond(rax)
	rax = rax >>u 1<64>
	SCZO = cond(rax)
	r13 = rbx + 1<64> + rax
	goto l000000000042BAB8
	// succ:  l000000000042BAB8
l000000000042BAA0:
	eax = CONVERT(Mem0[r12 + 0x19<64> + rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbx:byte] = al
	// succ:  l000000000042BAA8
l000000000042BAA8:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	rdx = rsi
	SCZO = cond(rbx - r13)
	branch Test(EQ,Z) l000000000042BA73
	// succ:  l000000000042BAB4 l000000000042BA73
l000000000042BAB4:
	rsi = rsi + 2<64>
	SCZO = cond(rsi)
	// succ:  l000000000042BAB8
l000000000042BAB8:
	edx = CONVERT(Mem0[rdx:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dx - 0x7F<16>)
	branch Test(ULE,CZ) l000000000042BAA0
	// succ:  l000000000042BAC1 l000000000042BAA0
l000000000042BAC1:
	ecx = CONVERT(dx, word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000412B10 (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042BACF
	// succ:  l000000000042BACC_1 l000000000042BACF
l000000000042BACC_1:
	eax = edi
	// succ:  l000000000042BACF
l000000000042BACF:
	Mem0[rbx:byte] = al
	goto l000000000042BAA8
	// succ:  l000000000042BAA8
fn000000000042BA10_exit:


// fn000000000042BAE0
// Return size: 8
define fn000000000042BAE0
fn000000000042BAE0_entry:
	rsp = fp
	// succ:  l000000000042BAE0
l000000000042BAE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(dx - 0x7F<16>)
	ebx = r8d
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(UGT,CZ) l000000000042BAF4
	// succ:  l000000000042BAEE l000000000042BAF4
l000000000042BAEE:
	SCZO = cond(Mem0[rcx + 0x18<64>:byte] - 0<8>)
	branch Test(NE,Z) l000000000042BB10
	// succ:  l000000000042BAF4 l000000000042BB10
l000000000042BAF4:
	ecx = CONVERT(dx, word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	call fn0000000000412B10 (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042BB02
	// succ:  l000000000042BAFF_1 l000000000042BB02
l000000000042BAFF_1:
	eax = ebx
	// succ:  l000000000042BB02
l000000000042BB02:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042BAE0_exit
l000000000042BB10:
	edx = CONVERT(dx, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(Mem0[rcx + 0x19<64> + rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042BAE0_exit
fn000000000042BAE0_exit:


// fn000000000042BB20
// Return size: 8
define fn000000000042BB20
fn000000000042BB20_entry:
	rsp = fp
	// succ:  l000000000042BB20
l000000000042BB20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax:word64]
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042BB20_exit
fn000000000042BB20_exit:


// fn000000000042BB40
// Return size: 8
define fn000000000042BB40
fn000000000042BB40_entry:
	rsp = fp
	// succ:  l000000000042BB40
l000000000042BB40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax:word64]
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042BB40_exit
fn000000000042BB40_exit:


// fn000000000042BB60
// Return size: 8
define fn000000000042BB60
fn000000000042BB60_entry:
	rsp = fp
	// succ:  l000000000042BB60
l000000000042BB60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax:word64]
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042BB60_exit
fn000000000042BB60_exit:


// fn000000000042BB80
// Return size: 8
define fn000000000042BB80
fn000000000042BB80_entry:
	rsp = fp
	// succ:  l000000000042BB80
l000000000042BB80:
	rax = Mem0[rcx:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000042BB9A
	// succ:  l000000000042BB88 l000000000042BB9A
l000000000042BB88:
	al = 1<8>
	__lock()
	Mem0[0x000000000048B470<p64>:word32] = __xadd(Mem0[0x000000000048B470<p64>:word32], eax)
	SCZO = cond(Mem0[0x000000000048B470<p64>:word32])
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rax = CONVERT(eax, int32, int64)
	Mem0[rcx:word64] = rax
	// succ:  l000000000042BB9A
l000000000042BB9A:
	rax = rax - 1<64>
	SCZO = cond(rax)
	return
	// succ:  fn000000000042BB80_exit
fn000000000042BB80_exit:


// fn000000000042BBA0
// Return size: 8
define fn000000000042BBA0
fn000000000042BBA0_entry:
	rsp = fp
	// succ:  l000000000042BBA0
l000000000042BBA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	r14 = rsp + 0x3F<64>
	rsi = rcx
	r12 = rdx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r8 = r14
	call fn00000000004505D0 (retsize: 8;)
	rdx = Mem0[r12:word64]
	Mem0[rsi:word64] = rax
	rbp = Mem0[rdx + 0x20<64>:word64]
	r13 = Mem0[rbp + 0<64>:word64]
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l000000000042BDA8
	// succ:  l000000000042BBDD l000000000042BDA8
l000000000042BBDD:
	SCZO = cond(Mem0[rbp + 8<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000042BD90
	// succ:  l000000000042BBE8 l000000000042BD90
l000000000042BBE8:
	rcx = r13
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l000000000042BBFA
	// succ:  l000000000042BBFA
l000000000042BBF0:
	SCZO = cond(rbx - 4<64>)
	branch Test(UGT,CZ) l000000000042BD90
	// succ:  l000000000042BBFA l000000000042BD90
l000000000042BBFA:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	rdi = Mem0[rbp + 0<64> + rbx * 8<64>:word64]
	rdx = rdi
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	rcx = rdi
	branch Test(EQ,Z) l000000000042BBF0
	// succ:  l000000000042BC12 l000000000042BBF0
l000000000042BC12:
	edx = 0x80<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[0x00000000004918E0<p64>:word64]
	rbp = Mem0[rax:word64]
	rbx = Mem0[rbp + 0<64>:word64]
	rcx = rbx
	eax = strlen(rcx)
	rdx = rbx
	r8 = rax
	rcx = rsi
	call fn0000000000450E00 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	rbx = rdx + 1<64>
	SCZO = cond(rbx - Mem0[rax - 0x10<64>:word64])
	branch Test(UGT,CZ) l000000000042BC5D
	// succ:  l000000000042BC54 l000000000042BC5D
l000000000042BC54:
	r9d = Mem0[rax - 8<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(LE,SZO) l000000000042BC6F
	// succ:  l000000000042BC5D l000000000042BC6F
l000000000042BC5D:
	rdx = rbx
	rcx = rsi
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	// succ:  l000000000042BC6F
l000000000042BC6F:
	Mem0[rax + rdx:byte] = 0x3D<8>
	rax = Mem0[rsi:word64]
	Mem0[rax - 0x18<64>:word64] = rbx
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax + rbx:byte] = 0<8>
	rax = Mem0[r12:word64]
	rax = Mem0[rax + 0x20<64>:word64]
	rbx = Mem0[rax:word64]
	rcx = rbx
	eax = strlen(rcx)
	rdx = rbx
	r8 = rax
	rcx = rsi
	call fn0000000000450E00 (retsize: 8;)
	ebx = 8<32>
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l000000000042BCAB
l000000000042BCAB:
	rax = Mem0[rsi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	rdi = rdx + 1<64>
	SCZO = cond(rdi - Mem0[rax - 0x10<64>:word64])
	branch Test(UGT,CZ) l000000000042BCC5
	// succ:  l000000000042BCBC l000000000042BCC5
l000000000042BCBC:
	r8d = Mem0[rax - 8<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d & r8d)
	C = false
	branch Test(LE,SZO) l000000000042BCD7
	// succ:  l000000000042BCC5 l000000000042BCD7
l000000000042BCC5:
	rdx = rdi
	rcx = rsi
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	// succ:  l000000000042BCD7
l000000000042BCD7:
	Mem0[rax + rdx:byte] = 0x3B<8>
	rax = Mem0[rsi:word64]
	Mem0[rax - 0x18<64>:word64] = rdi
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax + rdi:byte] = 0<8>
	rdi = Mem0[rbp + 0<64> + rbx:word64]
	rcx = rdi
	eax = strlen(rcx)
	rdx = rdi
	r8 = rax
	rcx = rsi
	call fn0000000000450E00 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	rdi = rdx + 1<64>
	SCZO = cond(rdi - Mem0[rax - 0x10<64>:word64])
	branch Test(UGT,CZ) l000000000042BD20
	// succ:  l000000000042BD19 l000000000042BD20
l000000000042BD19:
	ecx = Mem0[rax - 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(LE,SZO) l000000000042BD32
	// succ:  l000000000042BD20 l000000000042BD32
l000000000042BD20:
	rdx = rdi
	rcx = rsi
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	// succ:  l000000000042BD32
l000000000042BD32:
	Mem0[rax + rdx:byte] = 0x3D<8>
	rax = Mem0[rsi:word64]
	Mem0[rax - 0x18<64>:word64] = rdi
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax + rdi:byte] = 0<8>
	rax = Mem0[r12:word64]
	rax = Mem0[rax + 0x20<64>:word64]
	rdi = Mem0[rax + rbx:word64]
	rcx = rdi
	eax = strlen(rcx)
	rdx = rdi
	r8 = rax
	rcx = rsi
	call fn0000000000450E00 (retsize: 8;)
	rbx = rbx + 8<64>
	SCZO = cond(rbx)
	SCZO = cond(rbx - 0x30<64>)
	branch Test(NE,Z) l000000000042BCAB
	// succ:  l000000000042BD78 l000000000042BCAB
l000000000042BD78:
	rax = rsi
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042BBA0_exit
l000000000042BD90:
	rcx = r13
	eax = strlen(rcx)
	rdx = r13
	r8 = rax
	rcx = rsi
	call fn00000000004511C0 (retsize: 8;)
	goto l000000000042BD78
	// succ:  l000000000042BD78
l000000000042BDA8:
	r8 = Mem0[rax - 0x18<64>:word64]
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = 0x2A<32>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rsi
	call fn00000000004508E0 (retsize: 8;)
	rsp = rsp + 8<64>
	goto l000000000042BD78
	// succ:  l000000000042BD78
fn000000000042BBA0_exit:


// fn000000000042BDF0
// Return size: 8
define fn000000000042BDF0
fn000000000042BDF0_entry:
	rsp = fp
	// succ:  l000000000042BDF0
l000000000042BDF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x68<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx:word64]
	r8 = Mem0[rdx:word64]
	r9 = rcx
	SCZO = cond(rax - r8)
	branch Test(EQ,Z) l000000000042BEC0
	// succ:  l000000000042BE0A l000000000042BEC0
l000000000042BE0A:
	rdi = Mem0[rax + 0x20<64>:word64]
	rcx = Mem0[rdi:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042BEA0
	// succ:  l000000000042BE1A l000000000042BEA0
l000000000042BE1A:
	rbp = Mem0[r8 + 0x20<64>:word64]
	rax = Mem0[rbp + 0<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000042BEA0
	// succ:  l000000000042BE27 l000000000042BEA0
l000000000042BE27:
	rsi = rdx
	rdx = rax
	rbx = r9
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000042BEA0
	// succ:  l000000000042BE39 l000000000042BEA0
l000000000042BE39:
	SCZO = cond(Mem0[rdi + 8<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000042BEB0
	// succ:  l000000000042BE40 l000000000042BEB0
l000000000042BE40:
	rcx = rsp + 0x50<64>
	rdx = rsi
	call fn000000000042BBA0 (retsize: 8;)
	rsi = rsp + 0x40<64>
	rdx = rbx
	rcx = rsi
	call fn000000000042BBA0 (retsize: 8;)
	rbx = Mem0[rsp + 0x40<64>:word64]
	rdx = Mem0[rsp + 0x50<64>:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	r8 = Mem0[rbx - 0x18<64>:word64]
	SCZO = cond(r8 - Mem0[rdx - 0x18<64>:word64])
	branch Test(EQ,Z) l000000000042BED0
	// succ:  l000000000042BE73 l000000000042BED0
l000000000042BE73:
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[rbx - 8<64>:word32] = __xadd(Mem0[rbx - 8<64>:word32], edx)
	SCZO = cond(Mem0[rbx - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l000000000042BF00
	// succ:  l000000000042BE81 l000000000042BF00
l000000000042BE81:
	r8 = Mem0[rsp + 0x50<64>:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[r8 - 8<64>:word32] = __xadd(Mem0[r8 - 8<64>:word32], edx)
	SCZO = cond(Mem0[r8 - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l000000000042BEE0
	// succ:  l000000000042BE95 l000000000042BEE0
l000000000042BE95:
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042BDF0_exit
l000000000042BEA0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042BDF0_exit
l000000000042BEB0:
	SCZO = cond(Mem0[rbp + 8<64>:word64] - 0<64>)
	branch Test(NE,Z) l000000000042BE40
	// succ:  l000000000042BEB7 l000000000042BE40
l000000000042BEB7:
	// succ:  l000000000042BEC0
l000000000042BEC0:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042BDF0_exit
l000000000042BED0:
	rcx = rbx
	eax = memcmp(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	goto l000000000042BE73
	// succ:  l000000000042BE73
l000000000042BEE0:
	rcx = r8 - 0x18<64>
	rdx = rsi
	Mem0[rsp + 0x2F<64>:byte] = al
	call fn0000000000450A50 (retsize: 8;)
	eax = CONVERT(Mem0[rsp + 0x2F<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042BE95
	// succ:  l000000000042BE95
l000000000042BF00:
	rdx = rsp + 0x3F<64>
	rcx = rbx - 0x18<64>
	Mem0[rsp + 0x2F<64>:byte] = al
	call fn0000000000450A50 (retsize: 8;)
	eax = CONVERT(Mem0[rsp + 0x2F<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042BE81
	// succ:  l000000000042BE81
fn000000000042BDF0_exit:


// fn000000000042BF60
// Return size: 8
define fn000000000042BF60
fn000000000042BF60_entry:
	rsp = fp
	// succ:  l000000000042BF60
l000000000042BF60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x30<64>:word64] = rcx
	Mem0[rbp - 0x28<64>:word64] = rdx
	Mem0[rbp - 0x20<64>:word64] = r8
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C080 (retsize: 8;)
	rbx = rax
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C020 (retsize: 8;)
	rbx = rbx - rax
	SCZO = cond(rbx)
	rdx = rbx
	rax = Mem0[rbp - 0x28<64>:word64]
	SCZO = cond(rdx - rax)
	al = CONVERT(Test(ULT,C), bool, int8)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000042BFAF
	// succ:  l000000000042BFA3 l000000000042BFAF
l000000000042BFA3:
	rax = Mem0[rbp - 0x20<64>:word64]
	rcx = rax
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l000000000042BFAF
l000000000042BFAF:
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C020 (retsize: 8;)
	rbx = rax
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C020 (retsize: 8;)
	Mem0[rbp - 0x60<64>:word64] = rax
	rdx = rbp - 0x28<64>
	rax = rbp - 0x60<64>
	rcx = rax
	call fn00000000004719C0 (retsize: 8;)
	rax = Mem0[rax:word64]
	rax = rax + rbx
	SCZO = cond(rax)
	Mem0[rbp - 0x58<64>:word64] = rax
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C020 (retsize: 8;)
	SCZO = cond(rax - Mem0[rbp - 0x58<64>:word64])
	branch Test(UGT,CZ) l000000000042C000
	// succ:  l000000000042BFF1 l000000000042C000
l000000000042BFF1:
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C080 (retsize: 8;)
	SCZO = cond(rax - Mem0[rbp - 0x58<64>:word64])
	branch Test(UGE,C) l000000000042C00B
	// succ:  l000000000042C000 l000000000042C00B
l000000000042C000:
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C080 (retsize: 8;)
	goto l000000000042C00F
	// succ:  l000000000042C00F
l000000000042C00B:
	rax = Mem0[rbp - 0x58<64>:word64]
	// succ:  l000000000042C00F
l000000000042C00F:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042BF60_exit
fn000000000042BF60_exit:


// fn000000000042C020
// Return size: 8
define fn000000000042C020
fn000000000042C020_entry:
	rsp = fp
	// succ:  l000000000042C020
l000000000042C020:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax + 8<64>:word64]
	rdx = rax
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax:word64]
	rdx = rdx - rax
	SCZO = cond(rdx)
	rax = rdx
	rax = rax >> 3<64>
	SCZO = cond(rax)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042C020_exit
fn000000000042C020_exit:


// fn000000000042C050
// Return size: 8
define fn000000000042C050
fn000000000042C050_entry:
	rsp = fp
	// succ:  l000000000042C050
l000000000042C050:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax + 0x10<64>:word64]
	rdx = rax
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax:word64]
	rdx = rdx - rax
	SCZO = cond(rdx)
	rax = rdx
	rax = rax >> 3<64>
	SCZO = cond(rax)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042C050_exit
fn000000000042C050_exit:


// fn000000000042C080
// Return size: 8
define fn000000000042C080
fn000000000042C080_entry:
	rsp = fp
	// succ:  l000000000042C080
l000000000042C080:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rcx = rax
	call fn000000000042AA30 (retsize: 8;)
	rcx = rax
	call fn0000000000464E30 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042C080_exit
fn000000000042C080_exit:


// fn000000000042C0B0
// Return size: 8
define fn000000000042C0B0
fn000000000042C0B0_entry:
	rsp = fp
	// succ:  l000000000042C0B0
l000000000042C0B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	Mem0[rbp + 0x18<64>:word64] = rdx
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax:word64]
	rdx = Mem0[rbp + 0x18<64>:word64]
	rdx = rdx << 3<64>
	SCZO = cond(rdx)
	rax = rax + rdx
	SCZO = cond(rax)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042C0B0_exit
fn000000000042C0B0_exit:


// fn000000000042C0D0
// Return size: 8
define fn000000000042C0D0
fn000000000042C0D0_entry:
	rsp = fp
	// succ:  l000000000042C0D0
l000000000042C0D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x30<64>:word64] = rcx
	Mem0[rbp - 0x28<64>:word64] = rdx
	Mem0[rbp - 0x20<64>:word64] = r8
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C1F0 (retsize: 8;)
	rbx = rax
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C190 (retsize: 8;)
	rbx = rbx - rax
	SCZO = cond(rbx)
	rdx = rbx
	rax = Mem0[rbp - 0x28<64>:word64]
	SCZO = cond(rdx - rax)
	al = CONVERT(Test(ULT,C), bool, int8)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000042C11F
	// succ:  l000000000042C113 l000000000042C11F
l000000000042C113:
	rax = Mem0[rbp - 0x20<64>:word64]
	rcx = rax
	call fn0000000000470E60 (retsize: 8;)
	// succ:  l000000000042C11F
l000000000042C11F:
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C190 (retsize: 8;)
	rbx = rax
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C190 (retsize: 8;)
	Mem0[rbp - 0x60<64>:word64] = rax
	rdx = rbp - 0x28<64>
	rax = rbp - 0x60<64>
	rcx = rax
	call fn00000000004719C0 (retsize: 8;)
	rax = Mem0[rax:word64]
	rax = rax + rbx
	SCZO = cond(rax)
	Mem0[rbp - 0x58<64>:word64] = rax
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C190 (retsize: 8;)
	SCZO = cond(rax - Mem0[rbp - 0x58<64>:word64])
	branch Test(UGT,CZ) l000000000042C170
	// succ:  l000000000042C161 l000000000042C170
l000000000042C161:
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C1F0 (retsize: 8;)
	SCZO = cond(rax - Mem0[rbp - 0x58<64>:word64])
	branch Test(UGE,C) l000000000042C17B
	// succ:  l000000000042C170 l000000000042C17B
l000000000042C170:
	rcx = Mem0[rbp - 0x30<64>:word64]
	call fn000000000042C1F0 (retsize: 8;)
	goto l000000000042C17F
	// succ:  l000000000042C17F
l000000000042C17B:
	rax = Mem0[rbp - 0x58<64>:word64]
	// succ:  l000000000042C17F
l000000000042C17F:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042C0D0_exit
fn000000000042C0D0_exit:


// fn000000000042C190
// Return size: 8
define fn000000000042C190
fn000000000042C190_entry:
	rsp = fp
	// succ:  l000000000042C190
l000000000042C190:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax + 8<64>:word64]
	rdx = rax
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax:word64]
	rdx = rdx - rax
	SCZO = cond(rdx)
	rax = rdx
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042C190_exit
fn000000000042C190_exit:


// fn000000000042C1C0
// Return size: 8
define fn000000000042C1C0
fn000000000042C1C0_entry:
	rsp = fp
	// succ:  l000000000042C1C0
l000000000042C1C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax + 0x10<64>:word64]
	rdx = rax
	rax = Mem0[rbp + 0x10<64>:word64]
	rax = Mem0[rax:word64]
	rdx = rdx - rax
	SCZO = cond(rdx)
	rax = rdx
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042C1C0_exit
fn000000000042C1C0_exit:


// fn000000000042C1F0
// Return size: 8
define fn000000000042C1F0
fn000000000042C1F0_entry:
	rsp = fp
	// succ:  l000000000042C1F0
l000000000042C1F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word64] = rcx
	rax = Mem0[rbp + 0x10<64>:word64]
	rcx = rax
	call fn000000000042AA40 (retsize: 8;)
	rcx = rax
	call fn0000000000465000 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042C1F0_exit
fn000000000042C1F0_exit:


// fn000000000042C220
// Return size: 8
define fn000000000042C220
fn000000000042C220_entry:
	rsp = fp
	// succ:  l000000000042C220
l000000000042C220:
	rax = Mem0[rsp + 0x28<64>:word64]
	Mem0[rax:word64] = r8
	eax = 3<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000042C220_exit
fn000000000042C220_exit:


// fn000000000042C230
// Return size: 8
define fn000000000042C230
fn000000000042C230_entry:
	rsp = fp
	// succ:  l000000000042C230
l000000000042C230:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000042C230_exit
fn000000000042C230_exit:


// fn000000000042C240
// Return size: 8
define fn000000000042C240
fn000000000042C240_entry:
	rsp = fp
	// succ:  l000000000042C240
l000000000042C240:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000042C240_exit
fn000000000042C240_exit:


// fn000000000042C250
// Return size: 8
define fn000000000042C250
fn000000000042C250_entry:
	rsp = fp
	// succ:  l000000000042C250
l000000000042C250:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000042C250_exit
fn000000000042C250_exit:


// fn000000000042C260
// Return size: 8
define fn000000000042C260
fn000000000042C260_entry:
	rsp = fp
	// succ:  l000000000042C260
l000000000042C260:
	rax = Mem0[rsp + 0x28<64>:word64]
	rdx = Mem0[rsp + 0x30<64>:word64]
	Mem0[rax:word64] = r8
	rax = Mem0[rsp + 0x40<64>:word64]
	Mem0[rax:word64] = rdx
	eax = 3<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000042C260_exit
fn000000000042C260_exit:


// fn000000000042C280
// Return size: 8
define fn000000000042C280
fn000000000042C280_entry:
	rsp = fp
	// succ:  l000000000042C280
l000000000042C280:
	rax = Mem0[rsp + 0x28<64>:word64]
	rdx = Mem0[rsp + 0x30<64>:word64]
	Mem0[rax:word64] = r8
	rax = Mem0[rsp + 0x40<64>:word64]
	Mem0[rax:word64] = rdx
	eax = 3<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000042C280_exit
fn000000000042C280_exit:


// fn000000000042C2A0
// Return size: 8
define fn000000000042C2A0
fn000000000042C2A0_entry:
	rsp = fp
	// succ:  l000000000042C2A0
l000000000042C2A0:
	rax = Mem0[rsp + 0x28<64>:word64]
	r9 = r9 - r8
	SCZO = cond(r9)
	SCZO = cond(r9 - rax)
	branch Test(UGT,CZ) l000000000042C2AF
	// succ:  l000000000042C2AB_1 l000000000042C2AF
l000000000042C2AB_1:
	rax = r9
	// succ:  l000000000042C2AF
l000000000042C2AF:
	return
	// succ:  fn000000000042C2A0_exit
fn000000000042C2A0_exit:


// fn000000000042C2B0
// Return size: 8
define fn000000000042C2B0
fn000000000042C2B0_entry:
	rsp = fp
	// succ:  l000000000042C2B0
l000000000042C2B0:
	rax = Mem0[rsp + 0x28<64>:word64]
	Mem0[rax:word64] = r8
	eax = 3<32>
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000042C2B0_exit
fn000000000042C2B0_exit:


// fn000000000042C2C0
// Return size: 8
define fn000000000042C2C0
fn000000000042C2C0_entry:
	rsp = fp
	// succ:  l000000000042C2C0
l000000000042C2C0:
	rax = Mem0[0x0000000000491F00<p64>:word64]
	rax = Mem0[rax:word64]
	SCZO = cond(Mem0[rax:word32] - 1<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000042C2C0_exit
fn000000000042C2C0_exit:


// fn000000000042C2E0
// Return size: 8
define fn000000000042C2E0
fn000000000042C2E0_entry:
	rsp = fp
	// succ:  l000000000042C2E0
l000000000042C2E0:
	rax = Mem0[0x0000000000491F00<p64>:word64]
	rax = Mem0[rax:word64]
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	return
	// succ:  fn000000000042C2E0_exit
fn000000000042C2E0_exit:


// fn000000000042C2F0
// Return size: 8
define fn000000000042C2F0
fn000000000042C2F0_entry:
	rsp = fp
	// succ:  l000000000042C2F0
l000000000042C2F0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000042C2F0_exit
fn000000000042C2F0_exit:


// fn000000000042C300
// Return size: 8
define fn000000000042C300
fn000000000042C300_entry:
	rsp = fp
	// succ:  l000000000042C300
l000000000042C300:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = Mem0[rdx:word32]
	rax = CONVERT(eax, word32, uint64)
	rsi = Mem0[rsp + 0x98<64>:word64]
	SCZO = cond(r8 - r9)
	rbp = rdx
	rbx = r8
	rdi = r9
	r12 = Mem0[rsp + 0xA0<64>:word64]
	Mem0[rsp + 0x2C<64>:word32] = eax
	al = CONVERT(Test(ULT,C), bool, int8)
	branch Test(UGE,C) l000000000042C3B0
	// succ:  l000000000042C333 l000000000042C3B0
l000000000042C333:
	SCZO = cond(rsi - r12)
	branch Test(UGE,C) l000000000042C3B0
	// succ:  l000000000042C338 l000000000042C3B0
l000000000042C338:
	r13 = rsp + 0x2C<64>
	goto l000000000042C36D
	// succ:  l000000000042C36D
l000000000042C340:
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFE<64>)
	branch Test(EQ,Z) l000000000042C3B5
	// succ:  l000000000042C346 l000000000042C3B5
l000000000042C346:
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000042C352
	// succ:  l000000000042C34B l000000000042C352
l000000000042C34B:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	al = 1<8>
	Mem0[rsi:word16] = dx
	// succ:  l000000000042C352
l000000000042C352:
	ecx = Mem0[rsp + 0x2C<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	rbx = rbx + rax
	SCZO = cond(rbx)
	rsi = rsi + 2<64>
	SCZO = cond(rsi)
	SCZO = cond(rdi - rbx)
	al = CONVERT(Test(UGT,CZ), bool, int8)
	Mem0[rbp + 0<64>:word32] = ecx
	branch Test(ULE,CZ) l000000000042C3B0
	// succ:  l000000000042C368 l000000000042C3B0
l000000000042C368:
	SCZO = cond(r12 - rsi)
	branch Test(ULE,CZ) l000000000042C3B0
	// succ:  l000000000042C36D l000000000042C3B0
l000000000042C36D:
	r8 = rdi
	r9 = r13
	rdx = rbx
	r8 = r8 - rbx
	SCZO = cond(r8)
	rcx = rsi
	call fn0000000000412F70 (retsize: 8;)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l000000000042C340
	// succ:  l000000000042C387 l000000000042C340
l000000000042C387:
	eax = 2<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042C38C
l000000000042C38C:
	rdx = Mem0[rsp + 0x90<64>:word64]
	Mem0[rdx:word64] = rbx
	rdx = Mem0[rsp + 0xA8<64>:word64]
	Mem0[rdx:word64] = rsi
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042C300_exit
l000000000042C3B0:
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042C38C
	// succ:  l000000000042C38C
l000000000042C3B5:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042C38C
	// succ:  l000000000042C38C
fn000000000042C300_exit:


// fn000000000042C3C0
// Return size: 8
define fn000000000042C3C0
fn000000000042C3C0_entry:
	rsp = fp
	// succ:  l000000000042C3C0
l000000000042C3C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	eax = Mem0[rdx:word32]
	rax = CONVERT(eax, word32, uint64)
	rbx = Mem0[rsp + 0xB8<64>:word64]
	r14 = rdx
	rbp = Mem0[rsp + 0xC0<64>:word64]
	rsi = r8
	r13 = r9
	Mem0[rsp + 0x2C<64>:word32] = eax
	rax = Mem0[0x0000000000491F00<p64>:word64]
	rax = Mem0[rax:word64]
	rdx = CONVERT(Mem0[rax:word32], word32, int64)
	rax = r9
	rax = rax - r8
	SCZO = cond(rax)
	rax = rax >> 1<64>
	SCZO = cond(rax)
	rax = rax *s rdx
	SCZO = cond(rax)
	rdx = rbx
	rdx = rdx - rbp
	SCZO = cond(rdx)
	rax = rax + rdx
	SCZO = cond(rax)
	SZO = cond(rax & rax)
	C = false
	branch Test(LE,SZO) l000000000042C4C0
	// succ:  l000000000042C41B l000000000042C4C0
l000000000042C41B:
	SCZO = cond(r9 - r8)
	al = CONVERT(Test(UGT,CZ), bool, int8)
	branch Test(ULE,CZ) l000000000042C496
	// succ:  l000000000042C423 l000000000042C496
l000000000042C423:
	SCZO = cond(rbx - rbp)
	branch Test(UGE,C) l000000000042C496
	// succ:  l000000000042C428 l000000000042C496
l000000000042C428:
	r15 = rsp + 0x2C<64>
	r12 = rsp + 0x30<64>
	goto l000000000042C469
	// succ:  l000000000042C469
l000000000042C434:
	rax = rbp
	rax = rax - rbx
	SCZO = cond(rax)
	SCZO = cond(rdi - rax)
	branch Test(UGT,CZ) l000000000042C500
	// succ:  l000000000042C443 l000000000042C500
l000000000042C443:
	rcx = rbx
	r8 = rdi
	rdx = r12
	rax = memcpy(rcx, rdx, r8)
	eax = Mem0[rsp + 0x2C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rbx = rbx + rdi
	SCZO = cond(rbx)
	rsi = rsi + 2<64>
	SCZO = cond(rsi)
	SCZO = cond(rbp - rbx)
	Mem0[r14:word32] = eax
	branch Test(ULE,CZ) l000000000042C490
	// succ:  l000000000042C464 l000000000042C490
l000000000042C464:
	SCZO = cond(r13 - rsi)
	branch Test(ULE,CZ) l000000000042C490
	// succ:  l000000000042C469 l000000000042C490
l000000000042C469:
	edx = CONVERT(Mem0[rsi:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8 = r15
	rcx = r12
	call fn0000000000412C60 (retsize: 8;)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	rdi = rax
	branch Test(NE,Z) l000000000042C434
	// succ:  l000000000042C480 l000000000042C434
l000000000042C480:
	eax = 2<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042C499
	// succ:  l000000000042C499
l000000000042C490:
	SCZO = cond(r13 - rsi)
	al = CONVERT(Test(UGT,CZ), bool, int8)
	// succ:  l000000000042C496
l000000000042C496:
	eax = eax & 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000042C499
l000000000042C499:
	rdx = Mem0[rsp + 0xB0<64>:word64]
	Mem0[rdx:word64] = rsi
	rdx = Mem0[rsp + 0xC8<64>:word64]
	Mem0[rdx:word64] = rbx
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042C3C0_exit
l000000000042C4C0:
	SCZO = cond(r9 - r8)
	branch Test(ULE,CZ) l000000000042C510
	// succ:  l000000000042C4C5 l000000000042C510
l000000000042C4C5:
	r15 = rsp + 0x2C<64>
	goto l000000000042C4E3
	// succ:  l000000000042C4E3
l000000000042C4D0:
	edx = Mem0[rsp + 0x2C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rsi = rsi + 2<64>
	SCZO = cond(rsi)
	rbx = rbx + rax
	SCZO = cond(rbx)
	SCZO = cond(r13 - rsi)
	Mem0[r14:word32] = edx
	branch Test(ULE,CZ) l000000000042C510
	// succ:  l000000000042C4E3 l000000000042C510
l000000000042C4E3:
	edx = CONVERT(Mem0[rsi:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	r8 = r15
	rcx = rbx
	call fn0000000000412C60 (retsize: 8;)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	branch Test(NE,Z) l000000000042C4D0
	// succ:  l000000000042C4F7 l000000000042C4D0
l000000000042C4F7:
	goto l000000000042C480
	// succ:  l000000000042C480
l000000000042C500:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042C499
	// succ:  l000000000042C499
l000000000042C510:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000042C499
	// succ:  l000000000042C499
fn000000000042C3C0_exit:


// fn000000000042C520
// Return size: 8
define fn000000000042C520
fn000000000042C520_entry:
	rsp = fp
	// succ:  l000000000042C520
l000000000042C520:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	eax = Mem0[rdx:word32]
	rax = CONVERT(eax, word32, uint64)
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	rsi = Mem0[rsp + 0x90<64>:word64]
	SCZO = cond(r8 - r9)
	r12 = rdx
	rbx = r8
	rdi = r9
	Mem0[rsp + 0x2C<64>:word32] = eax
	branch Test(UGE,C) l000000000042C5AC
	// succ:  l000000000042C54A l000000000042C5AC
l000000000042C54A:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000042C5AC
	// succ:  l000000000042C54F l000000000042C5AC
l000000000042C54F:
	r13 = rsp + 0x2C<64>
	goto l000000000042C58C
	// succ:  l000000000042C58C
l000000000042C560:
	SZO = cond(rcx & rcx)
	C = false
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l000000000042C571
	// succ:  l000000000042C567 l000000000042C571
l000000000042C567:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	// succ:  l000000000042C571
l000000000042C571:
	edx = Mem0[rsp + 0x2C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rbx = rbx + rcx
	SCZO = cond(rbx)
	ebp = ebp + eax
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	rsi = rsi - 1<64>
	SCZO = cond(rsi)
	SCZO = cond(rdi - rbx)
	Mem0[r12:word32] = edx
	branch Test(ULE,CZ) l000000000042C5AC
	// succ:  l000000000042C587 l000000000042C5AC
l000000000042C587:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000042C5AC
	// succ:  l000000000042C58C l000000000042C5AC
l000000000042C58C:
	r8 = rdi
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r9 = r13
	r8 = r8 - rbx
	SCZO = cond(r8)
	rdx = rbx
	call fn0000000000412F70 (retsize: 8;)
	rcx = rax
	rax = rax + 2<64>
	SCZO = cond(rax - 1<64>)
	branch Test(UGT,CZ) l000000000042C560
	// succ:  l000000000042C5AC l000000000042C560
l000000000042C5AC:
	eax = ebp
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042C520_exit
fn000000000042C520_exit:


// fn000000000042C5C0
// Return size: 8
define fn000000000042C5C0
fn000000000042C5C0_entry:
	rsp = fp
	// succ:  l000000000042C5C0
l000000000042C5C0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = rdx
	rdx = r8
	eax = strcoll(rcx, rdx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SZO = cond(eax & eax)
	C = false
	dl = CONVERT(Test(NE,Z), bool, int8)
	eax = eax >> 0x1E<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax | edx
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000042C5C0_exit
fn000000000042C5C0_exit:


// fn000000000042C5E0
// Return size: 8
define fn000000000042C5E0
fn000000000042C5E0_entry:
	rsp = fp
	// succ:  l000000000042C5E0
l000000000042C5E0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	r14 = rsp + 0x3F<64>
	rsi = rcx
	rcx = rdx
	rdx = r8
	rbx = r9
	r8 = r14
	call fn0000000000450710 (retsize: 8;)
	rdx = Mem0[rsp + 0xB0<64>:word64]
	r8 = r14
	rcx = rbx
	r12 = rax
	call fn0000000000450710 (retsize: 8;)
	rbp = r12
	rdi = rax
	rbp = rbp + Mem0[r12 - 0x18<64>:word64]
	SCZO = cond(rbp)
	rdi = rdi + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(rdi)
	r13 = rax
	r15 = rax
	rbx = r12
	// succ:  l000000000042C640
l000000000042C640:
	r8 = r15
	rdx = rbx
	rcx = rsi
	call fn000000000042C5C0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000042C67C
	// succ:  l000000000042C652 l000000000042C67C
l000000000042C652:
	rcx = rbx
	eax = strlen(rcx)
	rcx = r15
	rbx = rbx + rax
	SCZO = cond(rbx)
	eax = strlen(rcx)
	r9 = r15 + rax
	SCZO = cond(rbx - rbp)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(r9 - rdi)
	branch Test(NE,Z) l000000000042C6B0
	// succ:  l000000000042C674 l000000000042C6B0
l000000000042C674:
	SZO = cond(al & al)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042C67C
l000000000042C67C:
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[r13 - 8<64>:word32] = __xadd(Mem0[r13 - 8<64>:word32], edx)
	SCZO = cond(Mem0[r13 - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l000000000042C6F0
	// succ:  l000000000042C68B l000000000042C6F0
l000000000042C68B:
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[r12 - 8<64>:word32] = __xadd(Mem0[r12 - 8<64>:word32], edx)
	SCZO = cond(Mem0[r12 - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l000000000042C6D0
	// succ:  l000000000042C69B l000000000042C6D0
l000000000042C69B:
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042C5E0_exit
l000000000042C6B0:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000042C6C0
	// succ:  l000000000042C6B4 l000000000042C6C0
l000000000042C6B4:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	r15 = r9 + 1<64>
	goto l000000000042C640
	// succ:  l000000000042C640
l000000000042C6C0:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042C67C
	// succ:  l000000000042C67C
l000000000042C6D0:
	rcx = r12 - 0x18<64>
	rdx = r14
	Mem0[rsp + 0x2C<64>:word32] = eax
	call fn0000000000450A50 (retsize: 8;)
	eax = Mem0[rsp + 0x2C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042C69B
	// succ:  l000000000042C69B
l000000000042C6F0:
	rcx = r13 - 0x18<64>
	rdx = r14
	Mem0[rsp + 0x2C<64>:word32] = eax
	call fn0000000000450A50 (retsize: 8;)
	eax = Mem0[rsp + 0x2C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042C68B
	// succ:  l000000000042C68B
fn000000000042C5E0_exit:


// fn000000000042C720
// Return size: 0
define fn000000000042C720
fn000000000042C720_entry:
	rsp = fp
	// succ:  l000000000042C720
l000000000042C720:
	rcx = rdx
	rdx = r8
	r8 = r9
	eax = strxfrm(rcx, rdx, r8)
	return
	// succ:  fn000000000042C720_exit
fn000000000042C720_exit:


// fn000000000042C730
// Return size: 8
define fn000000000042C730
fn000000000042C730_entry:
	rsp = fp
	// succ:  l000000000042C730
l000000000042C730:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rax = rsp + 0x3F<64>
	rsi = rcx
	rbx = r8
	rbp = r9
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r13 = rdx
	rdi = rax
	r8 = rax
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	r8 = rdi
	Mem0[rsi:word64] = rax
	rdx = rbp
	rcx = rbx
	call fn0000000000450710 (retsize: 8;)
	rbp = rbp - rbx
	SCZO = cond(rbp)
	r14 = rax
	r15 = rax
	rbp = rbp + rbp
	SCZO = cond(rbp)
	r14 = r14 + Mem0[rax - 0x18<64>:word64]
	SCZO = cond(r14)
	rcx = rbp
	call fn0000000000475560 (retsize: 8;)
	r12 = rax
	rdi = r15
	goto l000000000042C7E4
	// succ:  l000000000042C7E4
l000000000042C7A0:
	rax = Mem0[rsi:word64]
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	rdx = Mem0[rax - 0x18<64>:word64]
	rbx = rdx + 1<64>
	SCZO = cond(rbx - Mem0[rax - 0x10<64>:word64])
	branch Test(UGT,CZ) l000000000042C7BC
	// succ:  l000000000042C7B5 l000000000042C7BC
l000000000042C7B5:
	ecx = Mem0[rax - 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(LE,SZO) l000000000042C7CE
	// succ:  l000000000042C7BC l000000000042C7CE
l000000000042C7BC:
	rdx = rbx
	rcx = rsi
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rsi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	// succ:  l000000000042C7CE
l000000000042C7CE:
	Mem0[rax + rdx:byte] = 0<8>
	rax = Mem0[rsi:word64]
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = rbx
	Mem0[rax + rbx:byte] = 0<8>
	// succ:  l000000000042C7E4
l000000000042C7E4:
	r9 = rbp
	r8 = rdi
	rdx = r12
	rcx = r13
	call fn000000000042C720 (retsize: 8;)
	SCZO = cond(rbp - rax)
	branch Test(UGT,CZ) l000000000042C822
	// succ:  l000000000042C7FA l000000000042C822
l000000000042C7FA:
	rbp = rax + 1<64>
	rcx = r12
	call fn0000000000475540 (retsize: 8;)
	rcx = rbp
	call fn0000000000475560 (retsize: 8;)
	r9 = rbp
	r8 = rdi
	rdx = rax
	rcx = r13
	r12 = rax
	call fn000000000042C720 (retsize: 8;)
	// succ:  l000000000042C822
l000000000042C822:
	r8 = rax
	rdx = r12
	rcx = rsi
	call fn0000000000450E00 (retsize: 8;)
	rcx = rdi
	eax = strlen(rcx)
	rdi = rdi + rax
	SCZO = cond(rdi)
	SCZO = cond(rdi - r14)
	branch Test(NE,Z) l000000000042C7A0
	// succ:  l000000000042C844 l000000000042C7A0
l000000000042C844:
	rcx = r12
	call fn0000000000475540 (retsize: 8;)
	rdx = Mem0[rsp + 0x28<64>:word64]
	rcx = r15 - 0x18<64>
	call fn0000000000450A60 (retsize: 8;)
	rax = rsi
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042C730_exit
fn000000000042C730_exit:


// fn000000000042C8D0
// Return size: 8
define fn000000000042C8D0
fn000000000042C8D0_entry:
	rsp = fp
	// succ:  l000000000042C8D0
l000000000042C8D0:
	rax = Mem0[rcx:word64]
	r9 = 0x000000000042C920<p64>
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - r9)
	branch Test(NE,Z) l000000000042C903
	// succ:  l000000000042C8E3 l000000000042C903
l000000000042C8E3:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(rdx - r8)
	branch Test(UGE,C) l000000000042C906
	// succ:  l000000000042C8EA l000000000042C906
l000000000042C8EA:
	// succ:  l000000000042C8F0
l000000000042C8F0:
	ecx = CONVERT(Mem0[rdx:byte], byte, int32)
	v14 = (eax & 1<32> << 0x20<8> - 7<8>) != 0<32>
	eax = __rol(eax, 7<8>)
	C = v14
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	eax = eax + ecx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(rdx - r8)
	branch Test(NE,Z) l000000000042C8F0
	// succ:  l000000000042C901 l000000000042C8F0
l000000000042C901:
	return
	// succ:  fn000000000042C8D0_exit
l000000000042C903:
	call rax (retsize: 0;)
	return
	// succ:  fn000000000042C8D0_exit
l000000000042C906:
	return
	// succ:  fn000000000042C8D0_exit
fn000000000042C8D0_exit:


// fn000000000042C910
// Return size: 0
define fn000000000042C910
fn000000000042C910_entry:
	rsp = fp
	// succ:  l000000000042C910
l000000000042C910:
	rax = Mem0[rcx:word64]
	rax = Mem0[rax + 0x10<64>:word64]
	call rax (retsize: 0;)
	return
	// succ:  fn000000000042C910_exit
fn000000000042C910_exit:


// fn000000000042C920
// Return size: 8
define fn000000000042C920
fn000000000042C920_entry:
	rsp = fp
	// succ:  l000000000042C920
l000000000042C920:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(rdx - r8)
	branch Test(UGE,C) l000000000042C943
	// succ:  l000000000042C927 l000000000042C943
l000000000042C927:
	// succ:  l000000000042C930
l000000000042C930:
	ecx = CONVERT(Mem0[rdx:byte], byte, int32)
	v11 = (eax & 1<32> << 0x20<8> - 7<8>) != 0<32>
	eax = __rol(eax, 7<8>)
	C = v11
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	eax = eax + ecx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(rdx - r8)
	branch Test(NE,Z) l000000000042C930
	// succ:  l000000000042C941 l000000000042C930
l000000000042C941:
	return
	// succ:  fn000000000042C920_exit
l000000000042C943:
	return
	// succ:  fn000000000042C920_exit
fn000000000042C920_exit:


// fn000000000042C950
// Return size: 8
define fn000000000042C950
fn000000000042C950_entry:
	rsp = fp
	// succ:  l000000000042C950
l000000000042C950:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	call Mem0[rax + 0x18<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042C950_exit
fn000000000042C950_exit:


// fn000000000042C970
// Return size: 8
define fn000000000042C970
fn000000000042C970_entry:
	rsp = fp
	// succ:  l000000000042C970
l000000000042C970:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = rdx
	rdx = r8
	eax = wcscoll(rcx, rdx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SZO = cond(eax & eax)
	C = false
	dl = CONVERT(Test(NE,Z), bool, int8)
	eax = eax >> 0x1E<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax | edx
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000042C970_exit
fn000000000042C970_exit:


// fn000000000042C990
// Return size: 8
define fn000000000042C990
fn000000000042C990_entry:
	rsp = fp
	// succ:  l000000000042C990
l000000000042C990:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	r15 = rsp + 0x3F<64>
	rdi = rcx
	rcx = rdx
	rdx = r8
	rbx = r9
	r8 = r15
	call fn0000000000449010 (retsize: 8;)
	rdx = Mem0[rsp + 0xB0<64>:word64]
	r8 = r15
	rcx = rbx
	r13 = rax
	call fn0000000000449010 (retsize: 8;)
	r14 = rax
	rax = Mem0[r13 - 0x18<64>:word64]
	rbx = r13
	rsi = r14
	r12 = r13 + 0<64> + rax * 2<64>
	rax = Mem0[r14 - 0x18<64>:word64]
	rbp = r14 + rax * 2<64>
	// succ:  l000000000042C9F0
l000000000042C9F0:
	r8 = rsi
	rdx = rbx
	rcx = rdi
	call fn000000000042C970 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000042CA2D
	// succ:  l000000000042CA02 l000000000042CA2D
l000000000042CA02:
	rcx = rbx
	eax = wcslen(rcx)
	rcx = rsi
	rbx = rbx + rax * 2<64>
	eax = wcslen(rcx)
	rsi = rsi + rax * 2<64>
	SCZO = cond(rbx - r12)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(rsi - rbp)
	branch Test(NE,Z) l000000000042CA60
	// succ:  l000000000042CA25 l000000000042CA60
l000000000042CA25:
	SZO = cond(al & al)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042CA2D
l000000000042CA2D:
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[r14 - 8<64>:word32] = __xadd(Mem0[r14 - 8<64>:word32], edx)
	SCZO = cond(Mem0[r14 - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l000000000042CAA0
	// succ:  l000000000042CA3C l000000000042CAA0
l000000000042CA3C:
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	__lock()
	Mem0[r13 - 8<64>:word32] = __xadd(Mem0[r13 - 8<64>:word32], edx)
	SCZO = cond(Mem0[r13 - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l000000000042CA80
	// succ:  l000000000042CA4B l000000000042CA80
l000000000042CA4B:
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042C990_exit
l000000000042CA60:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000042CA70
	// succ:  l000000000042CA64 l000000000042CA70
l000000000042CA64:
	rbx = rbx + 2<64>
	SCZO = cond(rbx)
	rsi = rsi + 2<64>
	SCZO = cond(rsi)
	goto l000000000042C9F0
	// succ:  l000000000042C9F0
l000000000042CA70:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042CA2D
	// succ:  l000000000042CA2D
l000000000042CA80:
	rcx = r13 - 0x18<64>
	rdx = r15
	Mem0[rsp + 0x2C<64>:word32] = eax
	call fn0000000000449360 (retsize: 8;)
	eax = Mem0[rsp + 0x2C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042CA4B
	// succ:  l000000000042CA4B
l000000000042CAA0:
	rcx = r14 - 0x18<64>
	rdx = r15
	Mem0[rsp + 0x2C<64>:word32] = eax
	call fn0000000000449360 (retsize: 8;)
	eax = Mem0[rsp + 0x2C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042CA3C
	// succ:  l000000000042CA3C
fn000000000042C990_exit:


// fn000000000042CAD0
// Return size: 0
define fn000000000042CAD0
fn000000000042CAD0_entry:
	rsp = fp
	// succ:  l000000000042CAD0
l000000000042CAD0:
	rcx = rdx
	rdx = r8
	r8 = r9
	eax = wcsxfrm(rcx, rdx, r8)
	return
	// succ:  fn000000000042CAD0_exit
fn000000000042CAD0_exit:


// fn000000000042CAE0
// Return size: 8
define fn000000000042CAE0
fn000000000042CAE0_entry:
	rsp = fp
	// succ:  l000000000042CAE0
l000000000042CAE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rax = rsp + 0x3F<64>
	r12 = rcx
	rbx = r8
	rsi = r9
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r13 = rdx
	rdi = rax
	r8 = rax
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn0000000000448EB0 (retsize: 8;)
	r8 = rdi
	Mem0[r12:word64] = rax
	rdx = rsi
	rcx = rbx
	call fn0000000000449010 (retsize: 8;)
	rdi = rax
	Mem0[rsp + 0x20<64>:word64] = rax
	rax = Mem0[rax - 0x18<64>:word64]
	rsi = rsi - rbx
	SCZO = cond(rsi)
	rdx = 0x3F80000000000000<64>
	rcx = 0xFFFFFFFFFFFFFFFF<64>
	SCZO = cond(rsi - rdx)
	r14 = rdi + rax * 2<64>
	rax = rsi + rsi
	branch Test(UGT,CZ) l000000000042CB56
	// succ:  l000000000042CB52_1 l000000000042CB56
l000000000042CB52_1:
	rcx = rax
	// succ:  l000000000042CB56
l000000000042CB56:
	call fn0000000000475560 (retsize: 8;)
	rbp = rax
	rbx = rdi
	r15 = 0xFFFFFFFFFFFFFFFF<64>
	goto l000000000042CBBB
	// succ:  l000000000042CBBB
l000000000042CB70:
	rax = Mem0[r12:word64]
	rbx = rbx + 2<64>
	SCZO = cond(rbx)
	rdx = Mem0[rax - 0x18<64>:word64]
	rdi = rdx + 1<64>
	SCZO = cond(rdi - Mem0[rax - 0x10<64>:word64])
	branch Test(UGT,CZ) l000000000042CB8F
	// succ:  l000000000042CB86 l000000000042CB8F
l000000000042CB86:
	r9d = Mem0[rax - 8<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(LE,SZO) l000000000042CBA2
	// succ:  l000000000042CB8F l000000000042CBA2
l000000000042CB8F:
	rdx = rdi
	rcx = r12
	call fn000000000044A5D0 (retsize: 8;)
	rax = Mem0[r12:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	// succ:  l000000000042CBA2
l000000000042CBA2:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	Mem0[rax + rdx * 2<64>:word16] = cx
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = rdi
	Mem0[rax + rdi * 2<64>:word16] = r8w
	// succ:  l000000000042CBBB
l000000000042CBBB:
	r9 = rsi
	r8 = rbx
	rdx = rbp
	rcx = r13
	call fn000000000042CAD0 (retsize: 8;)
	SCZO = cond(rsi - rax)
	branch Test(UGT,CZ) l000000000042CC0B
	// succ:  l000000000042CBD1 l000000000042CC0B
l000000000042CBD1:
	rsi = rax + 1<64>
	rcx = rbp
	call fn0000000000475540 (retsize: 8;)
	rcx = rsi + rsi
	rax = 0x3F80000000000000<64>
	SCZO = cond(rsi - rax)
	branch Test(ULE,CZ) l000000000042CBF2
	// succ:  l000000000042CBEE_1 l000000000042CBF2
l000000000042CBEE_1:
	rcx = r15
	// succ:  l000000000042CBF2
l000000000042CBF2:
	call fn0000000000475560 (retsize: 8;)
	r9 = rsi
	r8 = rbx
	rdx = rax
	rcx = r13
	rbp = rax
	call fn000000000042CAD0 (retsize: 8;)
	// succ:  l000000000042CC0B
l000000000042CC0B:
	r8 = rax
	rdx = rbp
	rcx = r12
	call fn0000000000449740 (retsize: 8;)
	rcx = rbx
	eax = wcslen(rcx)
	rbx = rbx + rax * 2<64>
	SCZO = cond(rbx - r14)
	branch Test(NE,Z) l000000000042CB70
	// succ:  l000000000042CC2E l000000000042CB70
l000000000042CC2E:
	rcx = rbp
	call fn0000000000475540 (retsize: 8;)
	rsi = Mem0[rsp + 0x20<64>:word64]
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	__lock()
	Mem0[rsi - 8<64>:word32] = __xadd(Mem0[rsi - 8<64>:word32], eax)
	SCZO = cond(Mem0[rsi - 8<64>:word32])
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000042CC5D
	// succ:  l000000000042CC49 l000000000042CC5D
l000000000042CC49:
	rax = r12
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042CAE0_exit
l000000000042CC5D:
	rcx = Mem0[rsp + 0x20<64>:word64]
	rdx = Mem0[rsp + 0x28<64>:word64]
	rcx = rcx - 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000449360 (retsize: 8;)
	goto l000000000042CC49
	// succ:  l000000000042CC49
fn000000000042CAE0_exit:


// fn000000000042CCD0
// Return size: 8
define fn000000000042CCD0
fn000000000042CCD0_entry:
	rsp = fp
	// succ:  l000000000042CCD0
l000000000042CCD0:
	rax = Mem0[rcx:word64]
	r9 = 0x000000000042CD20<p64>
	rax = Mem0[rax + 0x20<64>:word64]
	SCZO = cond(rax - r9)
	branch Test(NE,Z) l000000000042CD03
	// succ:  l000000000042CCE3 l000000000042CD03
l000000000042CCE3:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(rdx - r8)
	branch Test(UGE,C) l000000000042CD06
	// succ:  l000000000042CCEA l000000000042CD06
l000000000042CCEA:
	// succ:  l000000000042CCF0
l000000000042CCF0:
	ecx = CONVERT(Mem0[rdx:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	v14 = (eax & 1<32> << 0x20<8> - 7<8>) != 0<32>
	eax = __rol(eax, 7<8>)
	C = v14
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	eax = eax + ecx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(r8 - rdx)
	branch Test(UGT,CZ) l000000000042CCF0
	// succ:  l000000000042CD01 l000000000042CCF0
l000000000042CD01:
	return
	// succ:  fn000000000042CCD0_exit
l000000000042CD03:
	call rax (retsize: 0;)
	return
	// succ:  fn000000000042CCD0_exit
l000000000042CD06:
	return
	// succ:  fn000000000042CCD0_exit
fn000000000042CCD0_exit:


// fn000000000042CD10
// Return size: 0
define fn000000000042CD10
fn000000000042CD10_entry:
	rsp = fp
	// succ:  l000000000042CD10
l000000000042CD10:
	rax = Mem0[rcx:word64]
	rax = Mem0[rax + 0x10<64>:word64]
	call rax (retsize: 0;)
	return
	// succ:  fn000000000042CD10_exit
fn000000000042CD10_exit:


// fn000000000042CD20
// Return size: 8
define fn000000000042CD20
fn000000000042CD20_entry:
	rsp = fp
	// succ:  l000000000042CD20
l000000000042CD20:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(rdx - r8)
	branch Test(UGE,C) l000000000042CD43
	// succ:  l000000000042CD27 l000000000042CD43
l000000000042CD27:
	// succ:  l000000000042CD30
l000000000042CD30:
	ecx = CONVERT(Mem0[rdx:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	v12 = (eax & 1<32> << 0x20<8> - 7<8>) != 0<32>
	eax = __rol(eax, 7<8>)
	C = v12
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	eax = eax + ecx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(r8 - rdx)
	branch Test(UGT,CZ) l000000000042CD30
	// succ:  l000000000042CD41 l000000000042CD30
l000000000042CD41:
	return
	// succ:  fn000000000042CD20_exit
l000000000042CD43:
	return
	// succ:  fn000000000042CD20_exit
fn000000000042CD20_exit:


// fn000000000042CD50
// Return size: 8
define fn000000000042CD50
fn000000000042CD50_entry:
	rsp = fp
	// succ:  l000000000042CD50
l000000000042CD50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rdx:word64]
	rbx = rcx
	call Mem0[rax + 0x18<64>:word64] (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042CD50_exit
fn000000000042CD50_exit:


// fn000000000042CD70
// Return size: 8
define fn000000000042CD70
fn000000000042CD70_entry:
	rsp = fp
	// succ:  l000000000042CD70
l000000000042CD70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	rdx = Mem0[r8 + 8<64>:word64]
	rax = Mem0[r8:word64]
	rbx = Mem0[rsp + 0xF0<64>:word64]
	Mem0[rsp + 0xD0<64>:word64] = rcx
	rcx = rsp + 0x6E<64>
	Mem0[rsp + 0x58<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0x50<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0x48<64>:word64] = rdx
	rdx = rbx + 0xD0<64>
	Mem0[rsp + 0x40<64>:word64] = rax
	call fn000000000042A360 (retsize: 8;)
	esi = Mem0[rbx + 0x18<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	rbp = rax
	Mem0[rsp + 0x24<64>:word32] = 8<32>
	esi = esi & 0x4A<32>
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SCZO = cond(esi - 0x40<32>)
	branch Test(EQ,Z) l000000000042CDF0
	// succ:  l000000000042CDDC l000000000042CDF0
l000000000042CDDC:
	SCZO = cond(esi - 8<32>)
	eax = 0xA<32>
	rax = CONVERT(eax, word32, uint64)
	edx = 0x10<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l000000000042CDEC
	// succ:  l000000000042CDE9_1 l000000000042CDEC
l000000000042CDE9_1:
	eax = edx
	// succ:  l000000000042CDEC
l000000000042CDEC:
	Mem0[rsp + 0x24<64>:word32] = eax
	// succ:  l000000000042CDF0
l000000000042CDF0:
	r12 = rsp + 0x40<64>
	rdi = rsp + 0x50<64>
	rdx = r12
	rcx = rdi
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(NE,Z) l000000000042D66F
	// succ:  l000000000042CE10 l000000000042D66F
l000000000042CE10:
	rcx = rdi
	call fn000000000042B050 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x6E<64>:byte] - al)
	ebx = CONVERT(al, byte, int32)
	Mem0[rsp + 0x37<64>:byte] = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(NE,Z) l000000000042D3A0
	// succ:  l000000000042CE29 l000000000042D3A0
l000000000042CE29:
	edx = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l000000000042D3B2
	// succ:  l000000000042CE35 l000000000042D3B2
l000000000042CE35:
	SCZO = cond(Mem0[rbp + 0x48<64>:byte] - al)
	branch Test(EQ,Z) l000000000042D69D
	// succ:  l000000000042CE3E l000000000042D69D
l000000000042CE3E:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042CE55
	// succ:  l000000000042CE48 l000000000042CE55
l000000000042CE48:
	call fn0000000000462490 (retsize: 8;)
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l000000000042CE55
l000000000042CE55:
	rdx = r12
	rcx = rdi
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000042D440
	// succ:  l000000000042CE68 l000000000042D440
l000000000042CE68:
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	Mem0[rsp + 0x35<64>:byte] = 0<8>
	// succ:  l000000000042CE76
l000000000042CE76:
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 0x10<32>)
	r12d = 0x16<32>
	r12 = CONVERT(r12d, word32, uint64)
	branch Test(EQ,Z) l000000000042CE88
	// succ:  l000000000042CE83 l000000000042CE88
l000000000042CE83:
	r12 = CONVERT(Mem0[rsp + 0x24<64>:word32], word32, int64)
	// succ:  l000000000042CE88
l000000000042CE88:
	rax = rsp + 0x6F<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x38<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x20<64>:byte] - 0<8>)
	Mem0[rsp + 0x70<64>:word64] = rax
	branch Test(NE,Z) l000000000042D425
	// succ:  l000000000042CEAD l000000000042D425
l000000000042CEAD:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	r15 = rbp + 0x72<64>
	v31 = edx_eax
	edx = CONVERT(v31 % Mem0[rsp + 0x24<64>:word32], word64, uint32)
	eax = CONVERT(v31 /u Mem0[rsp + 0x24<64>:word32], word32, uint32)
	SCZO = cond(eax)
	Mem0[rsp + 0x30<64>:word32] = eax
	eax = CONVERT(Mem0[rbp + 0x88<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	Mem0[rsp + 0x36<64>:byte] = al
	branch Test(NE,Z) l000000000042D095
	// succ:  l000000000042CED3 l000000000042D095
l000000000042CED3:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(r14b & r14b)
	C = false
	branch Test(NE,Z) l000000000042D0A2
	// succ:  l000000000042CEE0 l000000000042D0A2
l000000000042CEE0:
	r15d = SLICE(r12 + 0x30<64>, word32, 0)
	r15 = CONVERT(r15d, word32, uint64)
	// succ:  l000000000042CEE5
l000000000042CEE5:
	SCZO = cond(r12 - 0xA<64>)
	branch Test(UGT,CZ) l000000000042D0B0
	// succ:  l000000000042CEEF l000000000042D0B0
l000000000042CEEF:
	SCZO = cond(bl - 0x2F<8>)
	branch Test(LE,SZO) l000000000042D0A2
	// succ:  l000000000042CEF8 l000000000042D0A2
l000000000042CEF8:
	SCZO = cond(r15b - bl)
	branch Test(LE,SZO) l000000000042D0A2
	// succ:  l000000000042CF01 l000000000042D0A2
l000000000042CF01:
	ebx = ebx - 0x30<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	// succ:  l000000000042CF04
l000000000042CF04:
	SCZO = cond(Mem0[rsp + 0x30<64>:word32] - esi)
	branch Test(UGE,C) l000000000042D0DA
	// succ:  l000000000042CF0E l000000000042D0DA
l000000000042CF0E:
	rcx = Mem0[rsp + 0x50<64>:word64]
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042D0FE
	// succ:  l000000000042CF21 l000000000042D0FE
l000000000042CF21:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042D190
	// succ:  l000000000042CF2F l000000000042D190
l000000000042CF2F:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042D1C0
	// succ:  l000000000042CF4D l000000000042D1C0
l000000000042CF4D:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042CF50
l000000000042CF50:
	rcx = Mem0[rsp + 0x40<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042D13D
	// succ:  l000000000042CF62 l000000000042D13D
l000000000042CF62:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042D11E
	// succ:  l000000000042CF71 l000000000042D11E
l000000000042CF71:
	SCZO = cond(al - bl)
	branch Test(NE,Z) l000000000042D13D
	// succ:  l000000000042CF79 l000000000042D13D
l000000000042CF79:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	// succ:  l000000000042CF81
l000000000042CF81:
	rax = Mem0[rsp + 0x70<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(NE,Z) l000000000042D014
	// succ:  l000000000042CF91 l000000000042D014
l000000000042CF91:
	SZO = cond(r13d & r13d)
	C = false
	dl = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(Mem0[rsp + 0x35<64>:byte] - dl)
	branch Test(UGE,C) l000000000042D063
	// succ:  l000000000042CFA1 l000000000042D063
l000000000042CFA1:
	rdi = Mem0[rsp + 0x100<64>:word64]
	Mem0[rdi:word32] = 0<32>
	rdi = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rdi:word32] = 4<32>
	// succ:  l000000000042CFBD
l000000000042CFBD:
	SZO = cond(r14b & r14b)
	C = false
	branch Test(EQ,Z) l000000000042CFCD
	// succ:  l000000000042CFC2 l000000000042CFCD
l000000000042CFC2:
	rdi = Mem0[rsp + 0xF8<64>:word64]
	v38 = Mem0[rdi:word32] | 2<32>
	Mem0[rdi:word32] = v38
	SZO = cond(Mem0[rdi:word32])
	C = false
	// succ:  l000000000042CFCD
l000000000042CFCD:
	rdi = Mem0[rsp + 0xD0<64>:word64]
	rcx = Mem0[rsp + 0x50<64>:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rbx = Mem0[rsp + 0x58<64>:word64]
	Mem0[rdi:word64] = rcx
	Mem0[rdi + 8<64>:word64] = rbx
	__lock()
	Mem0[rax - 8<64>:word32] = __xadd(Mem0[rax - 8<64>:word32], edx)
	SCZO = cond(Mem0[rax - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l000000000042D5C0
	// succ:  l000000000042CFF8 l000000000042D5C0
l000000000042CFF8:
	rax = Mem0[rsp + 0xD0<64>:word64]
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042CD70_exit
l000000000042D014:
	r12 = rsp + 0x70<64>
	edx = CONVERT(r13b, byte, int32)
	rcx = r12
	call fn0000000000451E10 (retsize: 8;)
	rdx = Mem0[rbp + 0x18<64>:word64]
	rcx = Mem0[rbp + 0x10<64>:word64]
	r8 = r12
	call fn00000000004708F0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000042D047
	// succ:  l000000000042D039 l000000000042D047
l000000000042D039:
	rax = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rax:word32] = 4<32>
	// succ:  l000000000042D047
l000000000042D047:
	SZO = cond(r13d & r13d)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(Mem0[rsp + 0x35<64>:byte] - al)
	rax = Mem0[rsp + 0x70<64>:word64]
	branch Test(UGE,C) l000000000042D063
	// succ:  l000000000042D058 l000000000042D063
l000000000042D058:
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000042CFA1
	// succ:  l000000000042D063 l000000000042CFA1
l000000000042D063:
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l000000000042CFA1
	// succ:  l000000000042D06B l000000000042CFA1
l000000000042D06B:
	SZO = cond(dil & dil)
	C = false
	branch Test(EQ,Z) l000000000042D3C5
	// succ:  l000000000042D074 l000000000042D3C5
l000000000042D074:
	rdi = Mem0[rsp + 0x100<64>:word64]
	Mem0[rdi:word32] = 0xFFFFFFFF<32>
	rdi = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rdi:word32] = 4<32>
	goto l000000000042CFBD
	// succ:  l000000000042CFBD
l000000000042D095:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(r14b & r14b)
	C = false
	branch Test(EQ,Z) l000000000042D1E0
	// succ:  l000000000042D0A2 l000000000042D1E0
l000000000042D0A2:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l000000000042CF81
	// succ:  l000000000042CF81
l000000000042D0B0:
	eax = SLICE(rbx - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 9<8>)
	branch Test(ULE,CZ) l000000000042CF01
	// succ:  l000000000042D0BB l000000000042CF01
l000000000042D0BB:
	eax = SLICE(rbx - 0x61<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(ULE,CZ) l000000000042D160
	// succ:  l000000000042D0C6 l000000000042D160
l000000000042D0C6:
	eax = SLICE(rbx - 0x41<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(UGT,CZ) l000000000042D0A2
	// succ:  l000000000042D0CD l000000000042D0A2
l000000000042D0CD:
	ebx = ebx - 0x37<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SCZO = cond(Mem0[rsp + 0x30<64>:word32] - esi)
	branch Test(ULT,C) l000000000042CF0E
	// succ:  l000000000042D0DA l000000000042CF0E
l000000000042D0DA:
	esi = esi *s Mem0[rsp + 0x24<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	rcx = Mem0[rsp + 0x50<64>:word64]
	eax = ~eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - esi)
	al = CONVERT(Test(ULT,C), bool, int8)
	esi = esi + ebx
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	edi = edi | eax
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000042CF21
	// succ:  l000000000042D0FE l000000000042CF21
l000000000042D0FE:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042CF79
	// succ:  l000000000042D10C l000000000042CF79
l000000000042D10C:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l000000000042CF71
	// succ:  l000000000042D11E l000000000042CF71
l000000000042D11E:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042D3E1
	// succ:  l000000000042D12C l000000000042D3E1
l000000000042D12C:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042D12F
l000000000042D12F:
	Mem0[rsp + 0x48<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l000000000042CF79
	// succ:  l000000000042D13D l000000000042CF79
l000000000042D13D:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042D6AE
	// succ:  l000000000042D14B l000000000042D6AE
l000000000042D14B:
	eax = Mem0[rsp + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042D170
	// succ:  l000000000042D154 l000000000042D170
l000000000042D154:
	ebx = CONVERT(al, byte, int32)
	goto l000000000042CEE5
	// succ:  l000000000042CEE5
l000000000042D160:
	ebx = ebx - 0x57<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	goto l000000000042CF04
	// succ:  l000000000042CF04
l000000000042D170:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042D630
	// succ:  l000000000042D17E l000000000042D630
l000000000042D17E:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042D181
l000000000042D181:
	Mem0[rsp + 0x58<64>:word32] = eax
	goto l000000000042D154
	// succ:  l000000000042D154
l000000000042D190:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042D0FE
	// succ:  l000000000042D1AC l000000000042D0FE
l000000000042D1AC:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l000000000042CF4D
	// succ:  l000000000042D1BA l000000000042CF4D
l000000000042D1BA:
	// succ:  l000000000042D1C0
l000000000042D1C0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042CF50
	// succ:  l000000000042D1CF l000000000042CF50
l000000000042D1CF:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l000000000042D0FE
	// succ:  l000000000042D0FE
l000000000042D1E0:
	rax = rsp + 0x70<64>
	Mem0[rsp + 0x28<64>:word64] = rax
	// succ:  l000000000042D1EA
l000000000042D1EA:
	SCZO = cond(Mem0[rbp + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000042D1F9
	// succ:  l000000000042D1F0 l000000000042D1F9
l000000000042D1F0:
	SCZO = cond(bl - Mem0[rbp + 0x49<64>:byte])
	branch Test(EQ,Z) l000000000042D330
	// succ:  l000000000042D1F9 l000000000042D330
l000000000042D1F9:
	SCZO = cond(bl - Mem0[rbp + 0x48<64>:byte])
	branch Test(EQ,Z) l000000000042D0A2
	// succ:  l000000000042D202 l000000000042D0A2
l000000000042D202:
	edx = CONVERT(bl, byte, int32)
	r8 = r12
	rcx = r15
	rax = memchr(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000042D0A2
	// succ:  l000000000042D219 l000000000042D0A2
l000000000042D219:
	rax = rax - r15
	SCZO = cond(rax)
	edx = SLICE(rax - 6<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(eax - 0x10<32>)
	branch Test(LT,SO) l000000000042D225
	// succ:  l000000000042D222_1 l000000000042D225
l000000000042D222_1:
	eax = edx
	// succ:  l000000000042D225
l000000000042D225:
	SCZO = cond(Mem0[rsp + 0x30<64>:word32] - esi)
	branch Test(ULT,C) l000000000042D2E0
	// succ:  l000000000042D22F l000000000042D2E0
l000000000042D22F:
	esi = esi *s Mem0[rsp + 0x24<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = ~edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - esi)
	dl = CONVERT(Test(ULT,C), bool, int8)
	esi = esi + eax
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	edi = edi | edx
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	// succ:  l000000000042D245
l000000000042D245:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042D2F3
	// succ:  l000000000042D253 l000000000042D2F3
l000000000042D253:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042D350
	// succ:  l000000000042D261 l000000000042D350
l000000000042D261:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042D380
	// succ:  l000000000042D27F l000000000042D380
l000000000042D27F:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042D282
l000000000042D282:
	rcx = Mem0[rsp + 0x40<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042D2A3
	// succ:  l000000000042D290 l000000000042D2A3
l000000000042D290:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042D30F
	// succ:  l000000000042D29B l000000000042D30F
l000000000042D29B:
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l000000000042CF79
	// succ:  l000000000042D2A3 l000000000042CF79
l000000000042D2A3:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042D6C2
	// succ:  l000000000042D2B1 l000000000042D6C2
l000000000042D2B1:
	eax = Mem0[rsp + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042D2C1
	// succ:  l000000000042D2BA l000000000042D2C1
l000000000042D2BA:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042D1EA
	// succ:  l000000000042D1EA
l000000000042D2C1:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042D650
	// succ:  l000000000042D2CF l000000000042D650
l000000000042D2CF:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042D2D2
l000000000042D2D2:
	Mem0[rsp + 0x58<64>:word32] = eax
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042D1EA
	// succ:  l000000000042D1EA
l000000000042D2E0:
	rcx = Mem0[rsp + 0x50<64>:word64]
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000042D253
	// succ:  l000000000042D2F3 l000000000042D253
l000000000042D2F3:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042CF79
	// succ:  l000000000042D301 l000000000042CF79
l000000000042D301:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	ebx = CONVERT(Mem0[rsp + 0x36<64>:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l000000000042D29B
	// succ:  l000000000042D30F l000000000042D29B
l000000000042D30F:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042D403
	// succ:  l000000000042D31D l000000000042D403
l000000000042D31D:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042D320
l000000000042D320:
	Mem0[rsp + 0x48<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000042D29B
	// succ:  l000000000042D29B
l000000000042D330:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000042D6B8
	// succ:  l000000000042D339 l000000000042D6B8
l000000000042D339:
	rcx = Mem0[rsp + 0x28<64>:word64]
	edx = CONVERT(r13b, byte, int32)
	call fn0000000000451E10 (retsize: 8;)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	goto l000000000042D245
	// succ:  l000000000042D245
l000000000042D350:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042D2F3
	// succ:  l000000000042D368 l000000000042D2F3
l000000000042D368:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l000000000042D27F
	// succ:  l000000000042D376 l000000000042D27F
l000000000042D376:
	// succ:  l000000000042D380
l000000000042D380:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042D282
	// succ:  l000000000042D38F l000000000042D282
l000000000042D38F:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l000000000042D2F3
	// succ:  l000000000042D2F3
l000000000042D3A0:
	SCZO = cond(Mem0[rbp + 0x6F<64>:byte] - al)
	branch Test(EQ,Z) l000000000042CE29
	// succ:  l000000000042D3A9 l000000000042CE29
l000000000042D3A9:
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042D44F
	// succ:  l000000000042D44F
l000000000042D3B2:
	SCZO = cond(Mem0[rbp + 0x49<64>:byte] - al)
	branch Test(NE,Z) l000000000042CE35
	// succ:  l000000000042D3BB l000000000042CE35
l000000000042D3BB:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042D44F
	// succ:  l000000000042D44F
l000000000042D3C5:
	edx = CONVERT(Mem0[rsp + 0x37<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rdi = Mem0[rsp + 0x100<64>:word64]
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	ecx = -ecx
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	C = ecx == 0<32>
	esi = esi ^ ecx
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edx = edx + esi
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	Mem0[rdi:word32] = edx
	goto l000000000042CFBD
	// succ:  l000000000042CFBD
l000000000042D3E1:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042D12F
	// succ:  l000000000042D3F0 l000000000042D12F
l000000000042D3F0:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042CF71
	// succ:  l000000000042CF71
l000000000042D403:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042D320
	// succ:  l000000000042D412 l000000000042D320
l000000000042D412:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = CONVERT(Mem0[rsp + 0x36<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042D29B
	// succ:  l000000000042D29B
l000000000042D425:
	rcx = rsp + 0x70<64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000451BE0 (retsize: 8;)
	goto l000000000042CEAD
	// succ:  l000000000042CEAD
l000000000042D440:
	rcx = rdi
	call fn000000000042B050 (retsize: 8;)
	ebx = CONVERT(al, byte, int32)
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042D44F
l000000000042D44F:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	// succ:  l000000000042D455
l000000000042D455:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000042D462
	// succ:  l000000000042D459 l000000000042D462
l000000000042D459:
	SCZO = cond(Mem0[rbp + 0x49<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042D5D3
	// succ:  l000000000042D462 l000000000042D5D3
l000000000042D462:
	SCZO = cond(Mem0[rbp + 0x48<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042D5D3
	// succ:  l000000000042D46B l000000000042D5D3
l000000000042D46B:
	SCZO = cond(Mem0[rbp + 0x72<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042D520
	// succ:  l000000000042D474 l000000000042D520
l000000000042D474:
	SZO = cond(r12b & r12b)
	C = false
	branch Test(EQ,Z) l000000000042D5D3
	// succ:  l000000000042D47D l000000000042D5D3
l000000000042D47D:
	SCZO = cond(Mem0[rbp + 0x70<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042D48B
	// succ:  l000000000042D482 l000000000042D48B
l000000000042D482:
	SCZO = cond(Mem0[rbp + 0x71<64>:byte] - bl)
	branch Test(NE,Z) l000000000042D5B2
	// succ:  l000000000042D48B l000000000042D5B2
l000000000042D48B:
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 0x10<32>)
	branch Test(EQ,Z) l000000000042D49A
	// succ:  l000000000042D492 l000000000042D49A
l000000000042D492:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l000000000042D6A4
	// succ:  l000000000042D49A l000000000042D6A4
l000000000042D49A:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	Mem0[rsp + 0x24<64>:word32] = 0x10<32>
	// succ:  l000000000042D4A8
l000000000042D4A8:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042D560
	// succ:  l000000000042D4B6 l000000000042D560
l000000000042D4B6:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042D5E0
	// succ:  l000000000042D4C4 l000000000042D5E0
l000000000042D4C4:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rdx
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042D610
	// succ:  l000000000042D4E2 l000000000042D610
l000000000042D4E2:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042D4E5
l000000000042D4E5:
	rcx = Mem0[rsp + 0x40<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042D599
	// succ:  l000000000042D4F7 l000000000042D599
l000000000042D4F7:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042D579
	// succ:  l000000000042D503 l000000000042D579
l000000000042D503:
	SCZO = cond(r15b - al)
	branch Test(NE,Z) l000000000042D599
	// succ:  l000000000042D50C l000000000042D599
l000000000042D50C:
	Mem0[rsp + 0x35<64>:byte] = r12b
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	goto l000000000042CE76
	// succ:  l000000000042CE76
l000000000042D520:
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 0xA<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - r12b)
	branch Test(ULT,C) l000000000042D47D
	// succ:  l000000000042D531 l000000000042D47D
l000000000042D531:
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 8<32>)
	branch Test(EQ,Z) l000000000042D6CC
	// succ:  l000000000042D540 l000000000042D6CC
l000000000042D540:
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l000000000042D6CC
	// succ:  l000000000042D548 l000000000042D6CC
l000000000042D548:
	rcx = Mem0[rsp + 0x50<64>:word64]
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000042D4B6
	// succ:  l000000000042D55C l000000000042D4B6
l000000000042D55C:
	// succ:  l000000000042D560
l000000000042D560:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042D50C
	// succ:  l000000000042D56A l000000000042D50C
l000000000042D56A:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	branch Test(NE,Z) l000000000042D503
	// succ:  l000000000042D579 l000000000042D503
l000000000042D579:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042D67B
	// succ:  l000000000042D587 l000000000042D67B
l000000000042D587:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042D58A
l000000000042D58A:
	Mem0[rsp + 0x48<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r15b - al)
	branch Test(EQ,Z) l000000000042D50C
	// succ:  l000000000042D599 l000000000042D50C
l000000000042D599:
	rcx = rdi
	call fn000000000042B050 (retsize: 8;)
	SZO = cond(r12b & r12b)
	C = false
	ebx = CONVERT(al, byte, int32)
	branch Test(EQ,Z) l000000000042D5D3
	// succ:  l000000000042D5A9 l000000000042D5D3
l000000000042D5A9:
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042D455
	// succ:  l000000000042D455
l000000000042D5B2:
	Mem0[rsp + 0x35<64>:byte] = 1<8>
	goto l000000000042CE76
	// succ:  l000000000042CE76
l000000000042D5C0:
	rdx = Mem0[rsp + 0x38<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A50 (retsize: 8;)
	goto l000000000042CFF8
	// succ:  l000000000042CFF8
l000000000042D5D3:
	Mem0[rsp + 0x35<64>:byte] = r12b
	goto l000000000042CE76
	// succ:  l000000000042CE76
l000000000042D5E0:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042D560
	// succ:  l000000000042D5FC l000000000042D560
l000000000042D5FC:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l000000000042D4E2
	// succ:  l000000000042D60A l000000000042D4E2
l000000000042D60A:
	// succ:  l000000000042D610
l000000000042D610:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042D4E5
	// succ:  l000000000042D61F l000000000042D4E5
l000000000042D61F:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l000000000042D560
	// succ:  l000000000042D560
l000000000042D630:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042D181
	// succ:  l000000000042D63F l000000000042D181
l000000000042D63F:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	ebx = CONVERT(al, byte, int32)
	goto l000000000042CEE5
	// succ:  l000000000042CEE5
l000000000042D650:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042D2D2
	// succ:  l000000000042D65F l000000000042D2D2
l000000000042D65F:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042D1EA
	// succ:  l000000000042D1EA
l000000000042D66F:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x37<64>:byte] = 0<8>
	goto l000000000042CE68
	// succ:  l000000000042CE68
l000000000042D67B:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042D58A
	// succ:  l000000000042D68A l000000000042D58A
l000000000042D68A:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042D503
	// succ:  l000000000042D503
l000000000042D69D:
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042D44F
	// succ:  l000000000042D44F
l000000000042D6A4:
	Mem0[rsp + 0x35<64>:byte] = 1<8>
	goto l000000000042CE83
	// succ:  l000000000042CE83
l000000000042D6AE:
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042CEE5
	// succ:  l000000000042CEE5
l000000000042D6B8:
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042CF81
	// succ:  l000000000042CF81
l000000000042D6C2:
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042D1EA
	// succ:  l000000000042D1EA
l000000000042D6CC:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	Mem0[rsp + 0x24<64>:word32] = 8<32>
	goto l000000000042D4A8
	// succ:  l000000000042D4A8
fn000000000042CD70_exit:


// fn000000000042D710
// Return size: 8
define fn000000000042D710
fn000000000042D710_entry:
	rsp = fp
	// succ:  l000000000042D710
l000000000042D710:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	rdx = Mem0[r8 + 8<64>:word64]
	rax = Mem0[r8:word64]
	rbx = Mem0[rsp + 0xF0<64>:word64]
	Mem0[rsp + 0xD0<64>:word64] = rcx
	rcx = rsp + 0x6E<64>
	Mem0[rsp + 0x58<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0x50<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0x48<64>:word64] = rdx
	rdx = rbx + 0xD0<64>
	Mem0[rsp + 0x40<64>:word64] = rax
	call fn000000000042A360 (retsize: 8;)
	esi = Mem0[rbx + 0x18<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	rbp = rax
	Mem0[rsp + 0x20<64>:word32] = 8<32>
	esi = esi & 0x4A<32>
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SCZO = cond(esi - 0x40<32>)
	branch Test(EQ,Z) l000000000042D790
	// succ:  l000000000042D77C l000000000042D790
l000000000042D77C:
	SCZO = cond(esi - 8<32>)
	eax = 0xA<32>
	rax = CONVERT(eax, word32, uint64)
	edx = 0x10<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l000000000042D78C
	// succ:  l000000000042D789_1 l000000000042D78C
l000000000042D789_1:
	eax = edx
	// succ:  l000000000042D78C
l000000000042D78C:
	Mem0[rsp + 0x20<64>:word32] = eax
	// succ:  l000000000042D790
l000000000042D790:
	r12 = rsp + 0x40<64>
	rdi = rsp + 0x50<64>
	rdx = r12
	rcx = rdi
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(NE,Z) l000000000042E02F
	// succ:  l000000000042D7B0 l000000000042E02F
l000000000042D7B0:
	rcx = rdi
	call fn000000000042B050 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x6E<64>:byte] - al)
	ebx = CONVERT(al, byte, int32)
	Mem0[rsp + 0x37<64>:byte] = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(NE,Z) l000000000042DD60
	// succ:  l000000000042D7C9 l000000000042DD60
l000000000042D7C9:
	edx = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l000000000042DD72
	// succ:  l000000000042D7D5 l000000000042DD72
l000000000042D7D5:
	SCZO = cond(Mem0[rbp + 0x48<64>:byte] - al)
	branch Test(EQ,Z) l000000000042E05D
	// succ:  l000000000042D7DE l000000000042E05D
l000000000042D7DE:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042D7F5
	// succ:  l000000000042D7E8 l000000000042D7F5
l000000000042D7E8:
	call fn0000000000462490 (retsize: 8;)
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l000000000042D7F5
l000000000042D7F5:
	rdx = r12
	rcx = rdi
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000042DE00
	// succ:  l000000000042D808 l000000000042DE00
l000000000042D808:
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	Mem0[rsp + 0x35<64>:byte] = 0<8>
	// succ:  l000000000042D816
l000000000042D816:
	SCZO = cond(Mem0[rsp + 0x20<64>:word32] - 0x10<32>)
	r12d = 0x16<32>
	r12 = CONVERT(r12d, word32, uint64)
	branch Test(EQ,Z) l000000000042D828
	// succ:  l000000000042D823 l000000000042D828
l000000000042D823:
	r12 = CONVERT(Mem0[rsp + 0x20<64>:word32], word32, int64)
	// succ:  l000000000042D828
l000000000042D828:
	rax = rsp + 0x6F<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x38<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x20<64>:byte] - 0<8>)
	Mem0[rsp + 0x70<64>:word64] = rax
	branch Test(NE,Z) l000000000042DDE4
	// succ:  l000000000042D84D l000000000042DDE4
l000000000042D84D:
	SCZO = cond(Mem0[rsp + 0x37<64>:byte] - 1<8>)
	r15 = rbp + 0x72<64>
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = eax + 0x80000000<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rsp + 0x30<64>:word32] = eax
	v31 = edx_eax
	edx = CONVERT(v31 % Mem0[rsp + 0x20<64>:word32], word64, uint32)
	eax = CONVERT(v31 /u Mem0[rsp + 0x20<64>:word32], word32, uint32)
	SCZO = cond(eax)
	Mem0[rsp + 0x24<64>:word32] = eax
	eax = CONVERT(Mem0[rbp + 0x88<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	Mem0[rsp + 0x36<64>:byte] = al
	branch Test(NE,Z) l000000000042DA50
	// succ:  l000000000042D87E l000000000042DA50
l000000000042D87E:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(r14b & r14b)
	C = false
	branch Test(NE,Z) l000000000042DA60
	// succ:  l000000000042D88B l000000000042DA60
l000000000042D88B:
	r15d = SLICE(r12 + 0x30<64>, word32, 0)
	r15 = CONVERT(r15d, word32, uint64)
	// succ:  l000000000042D890
l000000000042D890:
	SCZO = cond(r12 - 0xA<64>)
	branch Test(UGT,CZ) l000000000042DA70
	// succ:  l000000000042D89A l000000000042DA70
l000000000042D89A:
	SCZO = cond(bl - 0x2F<8>)
	branch Test(LE,SZO) l000000000042DA60
	// succ:  l000000000042D8A3 l000000000042DA60
l000000000042D8A3:
	SCZO = cond(r15b - bl)
	branch Test(LE,SZO) l000000000042DA60
	// succ:  l000000000042D8AC l000000000042DA60
l000000000042D8AC:
	ebx = ebx - 0x30<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	// succ:  l000000000042D8AF
l000000000042D8AF:
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - esi)
	branch Test(UGE,C) l000000000042DA9A
	// succ:  l000000000042D8B9 l000000000042DA9A
l000000000042D8B9:
	rcx = Mem0[rsp + 0x50<64>:word64]
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042DAC0
	// succ:  l000000000042D8CC l000000000042DAC0
l000000000042D8CC:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042DB50
	// succ:  l000000000042D8DA l000000000042DB50
l000000000042D8DA:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042DB80
	// succ:  l000000000042D8F8 l000000000042DB80
l000000000042D8F8:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042D8FB
l000000000042D8FB:
	rcx = Mem0[rsp + 0x40<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042DAFF
	// succ:  l000000000042D90D l000000000042DAFF
l000000000042D90D:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042DAE0
	// succ:  l000000000042D91C l000000000042DAE0
l000000000042D91C:
	SCZO = cond(al - bl)
	branch Test(NE,Z) l000000000042DAFF
	// succ:  l000000000042D924 l000000000042DAFF
l000000000042D924:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	// succ:  l000000000042D92C
l000000000042D92C:
	rax = Mem0[rsp + 0x70<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(NE,Z) l000000000042D9C0
	// succ:  l000000000042D93C l000000000042D9C0
l000000000042D93C:
	SZO = cond(r13d & r13d)
	C = false
	dl = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(Mem0[rsp + 0x35<64>:byte] - dl)
	branch Test(UGE,C) l000000000042DA0F
	// succ:  l000000000042D94C l000000000042DA0F
l000000000042D94C:
	rdi = Mem0[rsp + 0x100<64>:word64]
	Mem0[rdi:word32] = 0<32>
	rdi = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rdi:word32] = 4<32>
	// succ:  l000000000042D968
l000000000042D968:
	SZO = cond(r14b & r14b)
	C = false
	branch Test(EQ,Z) l000000000042D978
	// succ:  l000000000042D96D l000000000042D978
l000000000042D96D:
	rdi = Mem0[rsp + 0xF8<64>:word64]
	v38 = Mem0[rdi:word32] | 2<32>
	Mem0[rdi:word32] = v38
	SZO = cond(Mem0[rdi:word32])
	C = false
	// succ:  l000000000042D978
l000000000042D978:
	rdi = Mem0[rsp + 0xD0<64>:word64]
	rcx = Mem0[rsp + 0x50<64>:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rbx = Mem0[rsp + 0x58<64>:word64]
	Mem0[rdi:word64] = rcx
	Mem0[rdi + 8<64>:word64] = rbx
	__lock()
	Mem0[rax - 8<64>:word32] = __xadd(Mem0[rax - 8<64>:word32], edx)
	SCZO = cond(Mem0[rax - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l000000000042DF80
	// succ:  l000000000042D9A3 l000000000042DF80
l000000000042D9A3:
	rax = Mem0[rsp + 0xD0<64>:word64]
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042D710_exit
l000000000042D9C0:
	r12 = rsp + 0x70<64>
	edx = CONVERT(r13b, byte, int32)
	rcx = r12
	call fn0000000000451E10 (retsize: 8;)
	rdx = Mem0[rbp + 0x18<64>:word64]
	rcx = Mem0[rbp + 0x10<64>:word64]
	r8 = r12
	call fn00000000004708F0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000042D9F3
	// succ:  l000000000042D9E5 l000000000042D9F3
l000000000042D9E5:
	rax = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rax:word32] = 4<32>
	// succ:  l000000000042D9F3
l000000000042D9F3:
	SZO = cond(r13d & r13d)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - Mem0[rsp + 0x35<64>:byte])
	rax = Mem0[rsp + 0x70<64>:word64]
	branch Test(ULE,CZ) l000000000042DA0F
	// succ:  l000000000042DA04 l000000000042DA0F
l000000000042DA04:
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000042D94C
	// succ:  l000000000042DA0F l000000000042D94C
l000000000042DA0F:
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l000000000042D94C
	// succ:  l000000000042DA17 l000000000042D94C
l000000000042DA17:
	SZO = cond(dil & dil)
	C = false
	branch Test(EQ,Z) l000000000042DD85
	// succ:  l000000000042DA20 l000000000042DD85
l000000000042DA20:
	SCZO = cond(Mem0[rsp + 0x37<64>:byte] - 1<8>)
	rdi = Mem0[rsp + 0x100<64>:word64]
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx + 0x80000000<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	Mem0[rdi:word32] = edx
	rdi = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rdi:word32] = 4<32>
	goto l000000000042D968
	// succ:  l000000000042D968
l000000000042DA50:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(r14b & r14b)
	C = false
	branch Test(EQ,Z) l000000000042DBA0
	// succ:  l000000000042DA5D l000000000042DBA0
l000000000042DA5D:
	// succ:  l000000000042DA60
l000000000042DA60:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l000000000042D92C
	// succ:  l000000000042D92C
l000000000042DA70:
	eax = SLICE(rbx - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 9<8>)
	branch Test(ULE,CZ) l000000000042D8AC
	// succ:  l000000000042DA7B l000000000042D8AC
l000000000042DA7B:
	eax = SLICE(rbx - 0x61<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(ULE,CZ) l000000000042DB20
	// succ:  l000000000042DA86 l000000000042DB20
l000000000042DA86:
	eax = SLICE(rbx - 0x41<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(UGT,CZ) l000000000042DA60
	// succ:  l000000000042DA8D l000000000042DA60
l000000000042DA8D:
	ebx = ebx - 0x37<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - esi)
	branch Test(ULT,C) l000000000042D8B9
	// succ:  l000000000042DA9A l000000000042D8B9
l000000000042DA9A:
	esi = esi *s Mem0[rsp + 0x20<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	eax = Mem0[rsp + 0x30<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rcx = Mem0[rsp + 0x50<64>:word64]
	eax = eax - ebx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - esi)
	al = CONVERT(Test(ULT,C), bool, int8)
	esi = esi + ebx
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	edi = edi | eax
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000042D8CC
	// succ:  l000000000042DAC0 l000000000042D8CC
l000000000042DAC0:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042D924
	// succ:  l000000000042DACE l000000000042D924
l000000000042DACE:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l000000000042D91C
	// succ:  l000000000042DAE0 l000000000042D91C
l000000000042DAE0:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042DDA0
	// succ:  l000000000042DAEE l000000000042DDA0
l000000000042DAEE:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042DAF1
l000000000042DAF1:
	Mem0[rsp + 0x48<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l000000000042D924
	// succ:  l000000000042DAFF l000000000042D924
l000000000042DAFF:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042E06E
	// succ:  l000000000042DB0D l000000000042E06E
l000000000042DB0D:
	eax = Mem0[rsp + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042DB30
	// succ:  l000000000042DB16 l000000000042DB30
l000000000042DB16:
	ebx = CONVERT(al, byte, int32)
	goto l000000000042D890
	// succ:  l000000000042D890
l000000000042DB20:
	ebx = ebx - 0x57<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	goto l000000000042D8AF
	// succ:  l000000000042D8AF
l000000000042DB30:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042DFF0
	// succ:  l000000000042DB3E l000000000042DFF0
l000000000042DB3E:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042DB41
l000000000042DB41:
	Mem0[rsp + 0x58<64>:word32] = eax
	goto l000000000042DB16
	// succ:  l000000000042DB16
l000000000042DB50:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042DAC0
	// succ:  l000000000042DB6C l000000000042DAC0
l000000000042DB6C:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l000000000042D8F8
	// succ:  l000000000042DB7A l000000000042D8F8
l000000000042DB7A:
	// succ:  l000000000042DB80
l000000000042DB80:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042D8FB
	// succ:  l000000000042DB8F l000000000042D8FB
l000000000042DB8F:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l000000000042DAC0
	// succ:  l000000000042DAC0
l000000000042DBA0:
	rax = rsp + 0x70<64>
	Mem0[rsp + 0x28<64>:word64] = rax
	// succ:  l000000000042DBAA
l000000000042DBAA:
	SCZO = cond(Mem0[rbp + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000042DBB9
	// succ:  l000000000042DBB0 l000000000042DBB9
l000000000042DBB0:
	SCZO = cond(bl - Mem0[rbp + 0x49<64>:byte])
	branch Test(EQ,Z) l000000000042DCF0
	// succ:  l000000000042DBB9 l000000000042DCF0
l000000000042DBB9:
	SCZO = cond(bl - Mem0[rbp + 0x48<64>:byte])
	branch Test(EQ,Z) l000000000042DA60
	// succ:  l000000000042DBC2 l000000000042DA60
l000000000042DBC2:
	edx = CONVERT(bl, byte, int32)
	r8 = r12
	rcx = r15
	rax = memchr(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000042DA60
	// succ:  l000000000042DBD9 l000000000042DA60
l000000000042DBD9:
	rax = rax - r15
	SCZO = cond(rax)
	edx = SLICE(rax - 6<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(eax - 0x10<32>)
	branch Test(LT,SO) l000000000042DBE5
	// succ:  l000000000042DBE2_1 l000000000042DBE5
l000000000042DBE2_1:
	eax = edx
	// succ:  l000000000042DBE5
l000000000042DBE5:
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - esi)
	branch Test(ULT,C) l000000000042DCA0
	// succ:  l000000000042DBEF l000000000042DCA0
l000000000042DBEF:
	esi = esi *s Mem0[rsp + 0x20<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	edx = Mem0[rsp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx - eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(edx - esi)
	dl = CONVERT(Test(ULT,C), bool, int8)
	esi = esi + eax
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	edi = edi | edx
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	// succ:  l000000000042DC07
l000000000042DC07:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042DCB3
	// succ:  l000000000042DC15 l000000000042DCB3
l000000000042DC15:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042DD10
	// succ:  l000000000042DC23 l000000000042DD10
l000000000042DC23:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042DD40
	// succ:  l000000000042DC41 l000000000042DD40
l000000000042DC41:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042DC44
l000000000042DC44:
	rcx = Mem0[rsp + 0x40<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042DC65
	// succ:  l000000000042DC52 l000000000042DC65
l000000000042DC52:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042DCCF
	// succ:  l000000000042DC5D l000000000042DCCF
l000000000042DC5D:
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l000000000042D924
	// succ:  l000000000042DC65 l000000000042D924
l000000000042DC65:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042E082
	// succ:  l000000000042DC73 l000000000042E082
l000000000042DC73:
	eax = Mem0[rsp + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042DC83
	// succ:  l000000000042DC7C l000000000042DC83
l000000000042DC7C:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042DBAA
	// succ:  l000000000042DBAA
l000000000042DC83:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042E010
	// succ:  l000000000042DC91 l000000000042E010
l000000000042DC91:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042DC94
l000000000042DC94:
	Mem0[rsp + 0x58<64>:word32] = eax
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042DBAA
	// succ:  l000000000042DBAA
l000000000042DCA0:
	rcx = Mem0[rsp + 0x50<64>:word64]
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000042DC15
	// succ:  l000000000042DCB3 l000000000042DC15
l000000000042DCB3:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042D924
	// succ:  l000000000042DCC1 l000000000042D924
l000000000042DCC1:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	ebx = CONVERT(Mem0[rsp + 0x36<64>:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l000000000042DC5D
	// succ:  l000000000042DCCF l000000000042DC5D
l000000000042DCCF:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042DDC2
	// succ:  l000000000042DCDD l000000000042DDC2
l000000000042DCDD:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042DCE0
l000000000042DCE0:
	Mem0[rsp + 0x48<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000042DC5D
	// succ:  l000000000042DC5D
l000000000042DCF0:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000042E078
	// succ:  l000000000042DCF9 l000000000042E078
l000000000042DCF9:
	rcx = Mem0[rsp + 0x28<64>:word64]
	edx = CONVERT(r13b, byte, int32)
	call fn0000000000451E10 (retsize: 8;)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	goto l000000000042DC07
	// succ:  l000000000042DC07
l000000000042DD10:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042DCB3
	// succ:  l000000000042DD28 l000000000042DCB3
l000000000042DD28:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l000000000042DC41
	// succ:  l000000000042DD36 l000000000042DC41
l000000000042DD36:
	// succ:  l000000000042DD40
l000000000042DD40:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042DC44
	// succ:  l000000000042DD4F l000000000042DC44
l000000000042DD4F:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l000000000042DCB3
	// succ:  l000000000042DCB3
l000000000042DD60:
	SCZO = cond(Mem0[rbp + 0x6F<64>:byte] - al)
	branch Test(EQ,Z) l000000000042D7C9
	// succ:  l000000000042DD69 l000000000042D7C9
l000000000042DD69:
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042DE0F
	// succ:  l000000000042DE0F
l000000000042DD72:
	SCZO = cond(Mem0[rbp + 0x49<64>:byte] - al)
	branch Test(NE,Z) l000000000042D7D5
	// succ:  l000000000042DD7B l000000000042D7D5
l000000000042DD7B:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042DE0F
	// succ:  l000000000042DE0F
l000000000042DD85:
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	rdi = Mem0[rsp + 0x100<64>:word64]
	edx = -edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	C = edx == 0<32>
	SCZO = cond(Mem0[rsp + 0x37<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000042DD99
	// succ:  l000000000042DD96_1 l000000000042DD99
l000000000042DD96_1:
	esi = edx
	// succ:  l000000000042DD99
l000000000042DD99:
	Mem0[rdi:word32] = esi
	goto l000000000042D968
	// succ:  l000000000042D968
l000000000042DDA0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042DAF1
	// succ:  l000000000042DDAF l000000000042DAF1
l000000000042DDAF:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042D91C
	// succ:  l000000000042D91C
l000000000042DDC2:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042DCE0
	// succ:  l000000000042DDD1 l000000000042DCE0
l000000000042DDD1:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = CONVERT(Mem0[rsp + 0x36<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042DC5D
	// succ:  l000000000042DC5D
l000000000042DDE4:
	rcx = rsp + 0x70<64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000451BE0 (retsize: 8;)
	goto l000000000042D84D
	// succ:  l000000000042D84D
l000000000042DE00:
	rcx = rdi
	call fn000000000042B050 (retsize: 8;)
	ebx = CONVERT(al, byte, int32)
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042DE0F
l000000000042DE0F:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	// succ:  l000000000042DE15
l000000000042DE15:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000042DE22
	// succ:  l000000000042DE19 l000000000042DE22
l000000000042DE19:
	SCZO = cond(Mem0[rbp + 0x49<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042DF93
	// succ:  l000000000042DE22 l000000000042DF93
l000000000042DE22:
	SCZO = cond(Mem0[rbp + 0x48<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042DF93
	// succ:  l000000000042DE2B l000000000042DF93
l000000000042DE2B:
	SCZO = cond(Mem0[rbp + 0x72<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042DEE0
	// succ:  l000000000042DE34 l000000000042DEE0
l000000000042DE34:
	SZO = cond(r12b & r12b)
	C = false
	branch Test(EQ,Z) l000000000042DF93
	// succ:  l000000000042DE3D l000000000042DF93
l000000000042DE3D:
	SCZO = cond(Mem0[rbp + 0x70<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042DE4B
	// succ:  l000000000042DE42 l000000000042DE4B
l000000000042DE42:
	SCZO = cond(Mem0[rbp + 0x71<64>:byte] - bl)
	branch Test(NE,Z) l000000000042DF72
	// succ:  l000000000042DE4B l000000000042DF72
l000000000042DE4B:
	SCZO = cond(Mem0[rsp + 0x20<64>:word32] - 0x10<32>)
	branch Test(EQ,Z) l000000000042DE5A
	// succ:  l000000000042DE52 l000000000042DE5A
l000000000042DE52:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l000000000042E064
	// succ:  l000000000042DE5A l000000000042E064
l000000000042DE5A:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	Mem0[rsp + 0x20<64>:word32] = 0x10<32>
	// succ:  l000000000042DE68
l000000000042DE68:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042DF20
	// succ:  l000000000042DE76 l000000000042DF20
l000000000042DE76:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042DFA0
	// succ:  l000000000042DE84 l000000000042DFA0
l000000000042DE84:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rdx
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042DFD0
	// succ:  l000000000042DEA2 l000000000042DFD0
l000000000042DEA2:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042DEA5
l000000000042DEA5:
	rcx = Mem0[rsp + 0x40<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042DF59
	// succ:  l000000000042DEB7 l000000000042DF59
l000000000042DEB7:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042DF39
	// succ:  l000000000042DEC3 l000000000042DF39
l000000000042DEC3:
	SCZO = cond(al - r15b)
	branch Test(NE,Z) l000000000042DF59
	// succ:  l000000000042DECC l000000000042DF59
l000000000042DECC:
	Mem0[rsp + 0x35<64>:byte] = r12b
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	goto l000000000042D816
	// succ:  l000000000042D816
l000000000042DEE0:
	SCZO = cond(Mem0[rsp + 0x20<64>:word32] - 0xA<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - r12b)
	branch Test(ULT,C) l000000000042DE3D
	// succ:  l000000000042DEF1 l000000000042DE3D
l000000000042DEF1:
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	SCZO = cond(Mem0[rsp + 0x20<64>:word32] - 8<32>)
	branch Test(EQ,Z) l000000000042E08C
	// succ:  l000000000042DF00 l000000000042E08C
l000000000042DF00:
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l000000000042E08C
	// succ:  l000000000042DF08 l000000000042E08C
l000000000042DF08:
	rcx = Mem0[rsp + 0x50<64>:word64]
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000042DE76
	// succ:  l000000000042DF1C l000000000042DE76
l000000000042DF1C:
	// succ:  l000000000042DF20
l000000000042DF20:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042DECC
	// succ:  l000000000042DF2A l000000000042DECC
l000000000042DF2A:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	branch Test(NE,Z) l000000000042DEC3
	// succ:  l000000000042DF39 l000000000042DEC3
l000000000042DF39:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042E03B
	// succ:  l000000000042DF47 l000000000042E03B
l000000000042DF47:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042DF4A
l000000000042DF4A:
	Mem0[rsp + 0x48<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - r15b)
	branch Test(EQ,Z) l000000000042DECC
	// succ:  l000000000042DF59 l000000000042DECC
l000000000042DF59:
	rcx = rdi
	call fn000000000042B050 (retsize: 8;)
	SZO = cond(r12b & r12b)
	C = false
	ebx = CONVERT(al, byte, int32)
	branch Test(EQ,Z) l000000000042DF93
	// succ:  l000000000042DF69 l000000000042DF93
l000000000042DF69:
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042DE15
	// succ:  l000000000042DE15
l000000000042DF72:
	Mem0[rsp + 0x35<64>:byte] = 1<8>
	goto l000000000042D816
	// succ:  l000000000042D816
l000000000042DF80:
	rdx = Mem0[rsp + 0x38<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A50 (retsize: 8;)
	goto l000000000042D9A3
	// succ:  l000000000042D9A3
l000000000042DF93:
	Mem0[rsp + 0x35<64>:byte] = r12b
	goto l000000000042D816
	// succ:  l000000000042D816
l000000000042DFA0:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042DF20
	// succ:  l000000000042DFBC l000000000042DF20
l000000000042DFBC:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l000000000042DEA2
	// succ:  l000000000042DFCA l000000000042DEA2
l000000000042DFCA:
	// succ:  l000000000042DFD0
l000000000042DFD0:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042DEA5
	// succ:  l000000000042DFDF l000000000042DEA5
l000000000042DFDF:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l000000000042DF20
	// succ:  l000000000042DF20
l000000000042DFF0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042DB41
	// succ:  l000000000042DFFF l000000000042DB41
l000000000042DFFF:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	ebx = CONVERT(al, byte, int32)
	goto l000000000042D890
	// succ:  l000000000042D890
l000000000042E010:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042DC94
	// succ:  l000000000042E01F l000000000042DC94
l000000000042E01F:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042DBAA
	// succ:  l000000000042DBAA
l000000000042E02F:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x37<64>:byte] = 0<8>
	goto l000000000042D808
	// succ:  l000000000042D808
l000000000042E03B:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042DF4A
	// succ:  l000000000042E04A l000000000042DF4A
l000000000042E04A:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042DEC3
	// succ:  l000000000042DEC3
l000000000042E05D:
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042DE0F
	// succ:  l000000000042DE0F
l000000000042E064:
	Mem0[rsp + 0x35<64>:byte] = 1<8>
	goto l000000000042D823
	// succ:  l000000000042D823
l000000000042E06E:
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042D890
	// succ:  l000000000042D890
l000000000042E078:
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042D92C
	// succ:  l000000000042D92C
l000000000042E082:
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042DBAA
	// succ:  l000000000042DBAA
l000000000042E08C:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	Mem0[rsp + 0x20<64>:word32] = 8<32>
	goto l000000000042DE68
	// succ:  l000000000042DE68
fn000000000042D710_exit:


// fn000000000042E0D0
// Return size: 8
define fn000000000042E0D0
fn000000000042E0D0_entry:
	rsp = fp
	// succ:  l000000000042E0D0
l000000000042E0D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	rdx = Mem0[r8 + 8<64>:word64]
	rax = Mem0[r8:word64]
	rbx = Mem0[rsp + 0xF0<64>:word64]
	Mem0[rsp + 0xD0<64>:word64] = rcx
	rcx = rsp + 0x6E<64>
	Mem0[rsp + 0x58<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0x50<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0x48<64>:word64] = rdx
	rdx = rbx + 0xD0<64>
	Mem0[rsp + 0x40<64>:word64] = rax
	call fn000000000042A360 (retsize: 8;)
	esi = Mem0[rbx + 0x18<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	rbp = rax
	Mem0[rsp + 0x24<64>:word32] = 8<32>
	esi = esi & 0x4A<32>
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SCZO = cond(esi - 0x40<32>)
	branch Test(EQ,Z) l000000000042E150
	// succ:  l000000000042E13C l000000000042E150
l000000000042E13C:
	SCZO = cond(esi - 8<32>)
	eax = 0xA<32>
	rax = CONVERT(eax, word32, uint64)
	edx = 0x10<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l000000000042E14C
	// succ:  l000000000042E149_1 l000000000042E14C
l000000000042E149_1:
	eax = edx
	// succ:  l000000000042E14C
l000000000042E14C:
	Mem0[rsp + 0x24<64>:word32] = eax
	// succ:  l000000000042E150
l000000000042E150:
	r12 = rsp + 0x40<64>
	rdi = rsp + 0x50<64>
	rdx = r12
	rcx = rdi
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(NE,Z) l000000000042E9CF
	// succ:  l000000000042E170 l000000000042E9CF
l000000000042E170:
	rcx = rdi
	call fn000000000042B050 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x6E<64>:byte] - al)
	ebx = CONVERT(al, byte, int32)
	Mem0[rsp + 0x37<64>:byte] = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(NE,Z) l000000000042E700
	// succ:  l000000000042E189 l000000000042E700
l000000000042E189:
	edx = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l000000000042E712
	// succ:  l000000000042E195 l000000000042E712
l000000000042E195:
	SCZO = cond(Mem0[rbp + 0x48<64>:byte] - al)
	branch Test(EQ,Z) l000000000042E9FD
	// succ:  l000000000042E19E l000000000042E9FD
l000000000042E19E:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042E1B5
	// succ:  l000000000042E1A8 l000000000042E1B5
l000000000042E1A8:
	call fn0000000000462490 (retsize: 8;)
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l000000000042E1B5
l000000000042E1B5:
	rdx = r12
	rcx = rdi
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000042E7A0
	// succ:  l000000000042E1C8 l000000000042E7A0
l000000000042E1C8:
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	Mem0[rsp + 0x35<64>:byte] = 0<8>
	// succ:  l000000000042E1D6
l000000000042E1D6:
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 0x10<32>)
	r12d = 0x16<32>
	r12 = CONVERT(r12d, word32, uint64)
	branch Test(EQ,Z) l000000000042E1E8
	// succ:  l000000000042E1E3 l000000000042E1E8
l000000000042E1E3:
	r12 = CONVERT(Mem0[rsp + 0x24<64>:word32], word32, int64)
	// succ:  l000000000042E1E8
l000000000042E1E8:
	rax = rsp + 0x6F<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x38<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x20<64>:byte] - 0<8>)
	Mem0[rsp + 0x70<64>:word64] = rax
	branch Test(NE,Z) l000000000042E785
	// succ:  l000000000042E20D l000000000042E785
l000000000042E20D:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	r15 = rbp + 0x72<64>
	v31 = edx_eax
	edx = CONVERT(v31 % Mem0[rsp + 0x24<64>:word32], word64, uint32)
	eax = CONVERT(v31 /u Mem0[rsp + 0x24<64>:word32], word32, uint32)
	SCZO = cond(eax)
	Mem0[rsp + 0x30<64>:word32] = eax
	eax = CONVERT(Mem0[rbp + 0x88<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	Mem0[rsp + 0x36<64>:byte] = al
	branch Test(NE,Z) l000000000042E3F5
	// succ:  l000000000042E233 l000000000042E3F5
l000000000042E233:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(r14b & r14b)
	C = false
	branch Test(NE,Z) l000000000042E402
	// succ:  l000000000042E240 l000000000042E402
l000000000042E240:
	r15d = SLICE(r12 + 0x30<64>, word32, 0)
	r15 = CONVERT(r15d, word32, uint64)
	// succ:  l000000000042E245
l000000000042E245:
	SCZO = cond(r12 - 0xA<64>)
	branch Test(UGT,CZ) l000000000042E410
	// succ:  l000000000042E24F l000000000042E410
l000000000042E24F:
	SCZO = cond(bl - 0x2F<8>)
	branch Test(LE,SZO) l000000000042E402
	// succ:  l000000000042E258 l000000000042E402
l000000000042E258:
	SCZO = cond(r15b - bl)
	branch Test(LE,SZO) l000000000042E402
	// succ:  l000000000042E261 l000000000042E402
l000000000042E261:
	ebx = ebx - 0x30<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	// succ:  l000000000042E264
l000000000042E264:
	SCZO = cond(Mem0[rsp + 0x30<64>:word32] - esi)
	branch Test(UGE,C) l000000000042E43A
	// succ:  l000000000042E26E l000000000042E43A
l000000000042E26E:
	rcx = Mem0[rsp + 0x50<64>:word64]
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042E45E
	// succ:  l000000000042E281 l000000000042E45E
l000000000042E281:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042E4F0
	// succ:  l000000000042E28F l000000000042E4F0
l000000000042E28F:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042E520
	// succ:  l000000000042E2AD l000000000042E520
l000000000042E2AD:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042E2B0
l000000000042E2B0:
	rcx = Mem0[rsp + 0x40<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042E49D
	// succ:  l000000000042E2C2 l000000000042E49D
l000000000042E2C2:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042E47E
	// succ:  l000000000042E2D1 l000000000042E47E
l000000000042E2D1:
	SCZO = cond(al - bl)
	branch Test(NE,Z) l000000000042E49D
	// succ:  l000000000042E2D9 l000000000042E49D
l000000000042E2D9:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	// succ:  l000000000042E2E1
l000000000042E2E1:
	rax = Mem0[rsp + 0x70<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(NE,Z) l000000000042E374
	// succ:  l000000000042E2F1 l000000000042E374
l000000000042E2F1:
	SZO = cond(r13d & r13d)
	C = false
	dl = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(Mem0[rsp + 0x35<64>:byte] - dl)
	branch Test(UGE,C) l000000000042E3C3
	// succ:  l000000000042E301 l000000000042E3C3
l000000000042E301:
	rdi = Mem0[rsp + 0x100<64>:word64]
	Mem0[rdi:word32] = 0<32>
	rdi = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rdi:word32] = 4<32>
	// succ:  l000000000042E31D
l000000000042E31D:
	SZO = cond(r14b & r14b)
	C = false
	branch Test(EQ,Z) l000000000042E32D
	// succ:  l000000000042E322 l000000000042E32D
l000000000042E322:
	rdi = Mem0[rsp + 0xF8<64>:word64]
	v38 = Mem0[rdi:word32] | 2<32>
	Mem0[rdi:word32] = v38
	SZO = cond(Mem0[rdi:word32])
	C = false
	// succ:  l000000000042E32D
l000000000042E32D:
	rdi = Mem0[rsp + 0xD0<64>:word64]
	rcx = Mem0[rsp + 0x50<64>:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rbx = Mem0[rsp + 0x58<64>:word64]
	Mem0[rdi:word64] = rcx
	Mem0[rdi + 8<64>:word64] = rbx
	__lock()
	Mem0[rax - 8<64>:word32] = __xadd(Mem0[rax - 8<64>:word32], edx)
	SCZO = cond(Mem0[rax - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l000000000042E920
	// succ:  l000000000042E358 l000000000042E920
l000000000042E358:
	rax = Mem0[rsp + 0xD0<64>:word64]
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042E0D0_exit
l000000000042E374:
	r12 = rsp + 0x70<64>
	edx = CONVERT(r13b, byte, int32)
	rcx = r12
	call fn0000000000451E10 (retsize: 8;)
	rdx = Mem0[rbp + 0x18<64>:word64]
	rcx = Mem0[rbp + 0x10<64>:word64]
	r8 = r12
	call fn00000000004708F0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000042E3A7
	// succ:  l000000000042E399 l000000000042E3A7
l000000000042E399:
	rax = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rax:word32] = 4<32>
	// succ:  l000000000042E3A7
l000000000042E3A7:
	SZO = cond(r13d & r13d)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(Mem0[rsp + 0x35<64>:byte] - al)
	rax = Mem0[rsp + 0x70<64>:word64]
	branch Test(UGE,C) l000000000042E3C3
	// succ:  l000000000042E3B8 l000000000042E3C3
l000000000042E3B8:
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000042E301
	// succ:  l000000000042E3C3 l000000000042E301
l000000000042E3C3:
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l000000000042E301
	// succ:  l000000000042E3CB l000000000042E301
l000000000042E3CB:
	SZO = cond(dil & dil)
	C = false
	branch Test(EQ,Z) l000000000042E725
	// succ:  l000000000042E3D4 l000000000042E725
l000000000042E3D4:
	rdi = Mem0[rsp + 0x100<64>:word64]
	Mem0[rdi:word32] = 0xFFFFFFFF<32>
	rdi = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rdi:word32] = 4<32>
	goto l000000000042E31D
	// succ:  l000000000042E31D
l000000000042E3F5:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(r14b & r14b)
	C = false
	branch Test(EQ,Z) l000000000042E540
	// succ:  l000000000042E402 l000000000042E540
l000000000042E402:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l000000000042E2E1
	// succ:  l000000000042E2E1
l000000000042E410:
	eax = SLICE(rbx - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 9<8>)
	branch Test(ULE,CZ) l000000000042E261
	// succ:  l000000000042E41B l000000000042E261
l000000000042E41B:
	eax = SLICE(rbx - 0x61<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(ULE,CZ) l000000000042E4C0
	// succ:  l000000000042E426 l000000000042E4C0
l000000000042E426:
	eax = SLICE(rbx - 0x41<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(UGT,CZ) l000000000042E402
	// succ:  l000000000042E42D l000000000042E402
l000000000042E42D:
	ebx = ebx - 0x37<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SCZO = cond(Mem0[rsp + 0x30<64>:word32] - esi)
	branch Test(ULT,C) l000000000042E26E
	// succ:  l000000000042E43A l000000000042E26E
l000000000042E43A:
	esi = esi *s Mem0[rsp + 0x24<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	rcx = Mem0[rsp + 0x50<64>:word64]
	eax = ~eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - esi)
	al = CONVERT(Test(ULT,C), bool, int8)
	esi = esi + ebx
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	edi = edi | eax
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000042E281
	// succ:  l000000000042E45E l000000000042E281
l000000000042E45E:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042E2D9
	// succ:  l000000000042E46C l000000000042E2D9
l000000000042E46C:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l000000000042E2D1
	// succ:  l000000000042E47E l000000000042E2D1
l000000000042E47E:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042E741
	// succ:  l000000000042E48C l000000000042E741
l000000000042E48C:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042E48F
l000000000042E48F:
	Mem0[rsp + 0x48<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l000000000042E2D9
	// succ:  l000000000042E49D l000000000042E2D9
l000000000042E49D:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042EA0E
	// succ:  l000000000042E4AB l000000000042EA0E
l000000000042E4AB:
	eax = Mem0[rsp + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042E4D0
	// succ:  l000000000042E4B4 l000000000042E4D0
l000000000042E4B4:
	ebx = CONVERT(al, byte, int32)
	goto l000000000042E245
	// succ:  l000000000042E245
l000000000042E4C0:
	ebx = ebx - 0x57<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	goto l000000000042E264
	// succ:  l000000000042E264
l000000000042E4D0:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042E990
	// succ:  l000000000042E4DE l000000000042E990
l000000000042E4DE:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042E4E1
l000000000042E4E1:
	Mem0[rsp + 0x58<64>:word32] = eax
	goto l000000000042E4B4
	// succ:  l000000000042E4B4
l000000000042E4F0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042E45E
	// succ:  l000000000042E50C l000000000042E45E
l000000000042E50C:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l000000000042E2AD
	// succ:  l000000000042E51A l000000000042E2AD
l000000000042E51A:
	// succ:  l000000000042E520
l000000000042E520:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042E2B0
	// succ:  l000000000042E52F l000000000042E2B0
l000000000042E52F:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l000000000042E45E
	// succ:  l000000000042E45E
l000000000042E540:
	rax = rsp + 0x70<64>
	Mem0[rsp + 0x28<64>:word64] = rax
	// succ:  l000000000042E54A
l000000000042E54A:
	SCZO = cond(Mem0[rbp + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000042E559
	// succ:  l000000000042E550 l000000000042E559
l000000000042E550:
	SCZO = cond(bl - Mem0[rbp + 0x49<64>:byte])
	branch Test(EQ,Z) l000000000042E690
	// succ:  l000000000042E559 l000000000042E690
l000000000042E559:
	SCZO = cond(bl - Mem0[rbp + 0x48<64>:byte])
	branch Test(EQ,Z) l000000000042E402
	// succ:  l000000000042E562 l000000000042E402
l000000000042E562:
	edx = CONVERT(bl, byte, int32)
	r8 = r12
	rcx = r15
	rax = memchr(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000042E402
	// succ:  l000000000042E579 l000000000042E402
l000000000042E579:
	rax = rax - r15
	SCZO = cond(rax)
	edx = SLICE(rax - 6<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(eax - 0x10<32>)
	branch Test(LT,SO) l000000000042E585
	// succ:  l000000000042E582_1 l000000000042E585
l000000000042E582_1:
	eax = edx
	// succ:  l000000000042E585
l000000000042E585:
	SCZO = cond(Mem0[rsp + 0x30<64>:word32] - esi)
	branch Test(ULT,C) l000000000042E640
	// succ:  l000000000042E58F l000000000042E640
l000000000042E58F:
	esi = esi *s Mem0[rsp + 0x24<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = ~edx
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - esi)
	dl = CONVERT(Test(ULT,C), bool, int8)
	esi = esi + eax
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	edi = edi | edx
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	// succ:  l000000000042E5A5
l000000000042E5A5:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042E653
	// succ:  l000000000042E5B3 l000000000042E653
l000000000042E5B3:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042E6B0
	// succ:  l000000000042E5C1 l000000000042E6B0
l000000000042E5C1:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042E6E0
	// succ:  l000000000042E5DF l000000000042E6E0
l000000000042E5DF:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042E5E2
l000000000042E5E2:
	rcx = Mem0[rsp + 0x40<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042E603
	// succ:  l000000000042E5F0 l000000000042E603
l000000000042E5F0:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042E66F
	// succ:  l000000000042E5FB l000000000042E66F
l000000000042E5FB:
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l000000000042E2D9
	// succ:  l000000000042E603 l000000000042E2D9
l000000000042E603:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042EA22
	// succ:  l000000000042E611 l000000000042EA22
l000000000042E611:
	eax = Mem0[rsp + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042E621
	// succ:  l000000000042E61A l000000000042E621
l000000000042E61A:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042E54A
	// succ:  l000000000042E54A
l000000000042E621:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042E9B0
	// succ:  l000000000042E62F l000000000042E9B0
l000000000042E62F:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042E632
l000000000042E632:
	Mem0[rsp + 0x58<64>:word32] = eax
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042E54A
	// succ:  l000000000042E54A
l000000000042E640:
	rcx = Mem0[rsp + 0x50<64>:word64]
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000042E5B3
	// succ:  l000000000042E653 l000000000042E5B3
l000000000042E653:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042E2D9
	// succ:  l000000000042E661 l000000000042E2D9
l000000000042E661:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	ebx = CONVERT(Mem0[rsp + 0x36<64>:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l000000000042E5FB
	// succ:  l000000000042E66F l000000000042E5FB
l000000000042E66F:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042E763
	// succ:  l000000000042E67D l000000000042E763
l000000000042E67D:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042E680
l000000000042E680:
	Mem0[rsp + 0x48<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000042E5FB
	// succ:  l000000000042E5FB
l000000000042E690:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000042EA18
	// succ:  l000000000042E699 l000000000042EA18
l000000000042E699:
	rcx = Mem0[rsp + 0x28<64>:word64]
	edx = CONVERT(r13b, byte, int32)
	call fn0000000000451E10 (retsize: 8;)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	goto l000000000042E5A5
	// succ:  l000000000042E5A5
l000000000042E6B0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042E653
	// succ:  l000000000042E6C8 l000000000042E653
l000000000042E6C8:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l000000000042E5DF
	// succ:  l000000000042E6D6 l000000000042E5DF
l000000000042E6D6:
	// succ:  l000000000042E6E0
l000000000042E6E0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042E5E2
	// succ:  l000000000042E6EF l000000000042E5E2
l000000000042E6EF:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l000000000042E653
	// succ:  l000000000042E653
l000000000042E700:
	SCZO = cond(Mem0[rbp + 0x6F<64>:byte] - al)
	branch Test(EQ,Z) l000000000042E189
	// succ:  l000000000042E709 l000000000042E189
l000000000042E709:
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042E7AF
	// succ:  l000000000042E7AF
l000000000042E712:
	SCZO = cond(Mem0[rbp + 0x49<64>:byte] - al)
	branch Test(NE,Z) l000000000042E195
	// succ:  l000000000042E71B l000000000042E195
l000000000042E71B:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042E7AF
	// succ:  l000000000042E7AF
l000000000042E725:
	edx = CONVERT(Mem0[rsp + 0x37<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rdi = Mem0[rsp + 0x100<64>:word64]
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	ecx = -ecx
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	C = ecx == 0<32>
	esi = esi ^ ecx
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edx = edx + esi
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	Mem0[rdi:word32] = edx
	goto l000000000042E31D
	// succ:  l000000000042E31D
l000000000042E741:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042E48F
	// succ:  l000000000042E750 l000000000042E48F
l000000000042E750:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042E2D1
	// succ:  l000000000042E2D1
l000000000042E763:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042E680
	// succ:  l000000000042E772 l000000000042E680
l000000000042E772:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = CONVERT(Mem0[rsp + 0x36<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042E5FB
	// succ:  l000000000042E5FB
l000000000042E785:
	rcx = rsp + 0x70<64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000451BE0 (retsize: 8;)
	goto l000000000042E20D
	// succ:  l000000000042E20D
l000000000042E7A0:
	rcx = rdi
	call fn000000000042B050 (retsize: 8;)
	ebx = CONVERT(al, byte, int32)
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042E7AF
l000000000042E7AF:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	// succ:  l000000000042E7B5
l000000000042E7B5:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000042E7C2
	// succ:  l000000000042E7B9 l000000000042E7C2
l000000000042E7B9:
	SCZO = cond(Mem0[rbp + 0x49<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042E933
	// succ:  l000000000042E7C2 l000000000042E933
l000000000042E7C2:
	SCZO = cond(Mem0[rbp + 0x48<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042E933
	// succ:  l000000000042E7CB l000000000042E933
l000000000042E7CB:
	SCZO = cond(Mem0[rbp + 0x72<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042E880
	// succ:  l000000000042E7D4 l000000000042E880
l000000000042E7D4:
	SZO = cond(r12b & r12b)
	C = false
	branch Test(EQ,Z) l000000000042E933
	// succ:  l000000000042E7DD l000000000042E933
l000000000042E7DD:
	SCZO = cond(Mem0[rbp + 0x70<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042E7EB
	// succ:  l000000000042E7E2 l000000000042E7EB
l000000000042E7E2:
	SCZO = cond(Mem0[rbp + 0x71<64>:byte] - bl)
	branch Test(NE,Z) l000000000042E912
	// succ:  l000000000042E7EB l000000000042E912
l000000000042E7EB:
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 0x10<32>)
	branch Test(EQ,Z) l000000000042E7FA
	// succ:  l000000000042E7F2 l000000000042E7FA
l000000000042E7F2:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l000000000042EA04
	// succ:  l000000000042E7FA l000000000042EA04
l000000000042E7FA:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	Mem0[rsp + 0x24<64>:word32] = 0x10<32>
	// succ:  l000000000042E808
l000000000042E808:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042E8C0
	// succ:  l000000000042E816 l000000000042E8C0
l000000000042E816:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042E940
	// succ:  l000000000042E824 l000000000042E940
l000000000042E824:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rdx
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042E970
	// succ:  l000000000042E842 l000000000042E970
l000000000042E842:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042E845
l000000000042E845:
	rcx = Mem0[rsp + 0x40<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042E8F9
	// succ:  l000000000042E857 l000000000042E8F9
l000000000042E857:
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042E8D9
	// succ:  l000000000042E863 l000000000042E8D9
l000000000042E863:
	SCZO = cond(r15b - al)
	branch Test(NE,Z) l000000000042E8F9
	// succ:  l000000000042E86C l000000000042E8F9
l000000000042E86C:
	Mem0[rsp + 0x35<64>:byte] = r12b
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	goto l000000000042E1D6
	// succ:  l000000000042E1D6
l000000000042E880:
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 0xA<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - r12b)
	branch Test(ULT,C) l000000000042E7DD
	// succ:  l000000000042E891 l000000000042E7DD
l000000000042E891:
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 8<32>)
	branch Test(EQ,Z) l000000000042EA2C
	// succ:  l000000000042E8A0 l000000000042EA2C
l000000000042E8A0:
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l000000000042EA2C
	// succ:  l000000000042E8A8 l000000000042EA2C
l000000000042E8A8:
	rcx = Mem0[rsp + 0x50<64>:word64]
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000042E816
	// succ:  l000000000042E8BC l000000000042E816
l000000000042E8BC:
	// succ:  l000000000042E8C0
l000000000042E8C0:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042E86C
	// succ:  l000000000042E8CA l000000000042E86C
l000000000042E8CA:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	branch Test(NE,Z) l000000000042E863
	// succ:  l000000000042E8D9 l000000000042E863
l000000000042E8D9:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042E9DB
	// succ:  l000000000042E8E7 l000000000042E9DB
l000000000042E8E7:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042E8EA
l000000000042E8EA:
	Mem0[rsp + 0x48<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r15b - al)
	branch Test(EQ,Z) l000000000042E86C
	// succ:  l000000000042E8F9 l000000000042E86C
l000000000042E8F9:
	rcx = rdi
	call fn000000000042B050 (retsize: 8;)
	SZO = cond(r12b & r12b)
	C = false
	ebx = CONVERT(al, byte, int32)
	branch Test(EQ,Z) l000000000042E933
	// succ:  l000000000042E909 l000000000042E933
l000000000042E909:
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042E7B5
	// succ:  l000000000042E7B5
l000000000042E912:
	Mem0[rsp + 0x35<64>:byte] = 1<8>
	goto l000000000042E1D6
	// succ:  l000000000042E1D6
l000000000042E920:
	rdx = Mem0[rsp + 0x38<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A50 (retsize: 8;)
	goto l000000000042E358
	// succ:  l000000000042E358
l000000000042E933:
	Mem0[rsp + 0x35<64>:byte] = r12b
	goto l000000000042E1D6
	// succ:  l000000000042E1D6
l000000000042E940:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042E8C0
	// succ:  l000000000042E95C l000000000042E8C0
l000000000042E95C:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l000000000042E842
	// succ:  l000000000042E96A l000000000042E842
l000000000042E96A:
	// succ:  l000000000042E970
l000000000042E970:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042E845
	// succ:  l000000000042E97F l000000000042E845
l000000000042E97F:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l000000000042E8C0
	// succ:  l000000000042E8C0
l000000000042E990:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042E4E1
	// succ:  l000000000042E99F l000000000042E4E1
l000000000042E99F:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	ebx = CONVERT(al, byte, int32)
	goto l000000000042E245
	// succ:  l000000000042E245
l000000000042E9B0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042E632
	// succ:  l000000000042E9BF l000000000042E632
l000000000042E9BF:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042E54A
	// succ:  l000000000042E54A
l000000000042E9CF:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x37<64>:byte] = 0<8>
	goto l000000000042E1C8
	// succ:  l000000000042E1C8
l000000000042E9DB:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042E8EA
	// succ:  l000000000042E9EA l000000000042E8EA
l000000000042E9EA:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042E863
	// succ:  l000000000042E863
l000000000042E9FD:
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042E7AF
	// succ:  l000000000042E7AF
l000000000042EA04:
	Mem0[rsp + 0x35<64>:byte] = 1<8>
	goto l000000000042E1E3
	// succ:  l000000000042E1E3
l000000000042EA0E:
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042E245
	// succ:  l000000000042E245
l000000000042EA18:
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042E2E1
	// succ:  l000000000042E2E1
l000000000042EA22:
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042E54A
	// succ:  l000000000042E54A
l000000000042EA2C:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	Mem0[rsp + 0x24<64>:word32] = 8<32>
	goto l000000000042E808
	// succ:  l000000000042E808
fn000000000042E0D0_exit:


// fn000000000042EA70
// Return size: 8
define fn000000000042EA70
fn000000000042EA70_entry:
	rsp = fp
	// succ:  l000000000042EA70
l000000000042EA70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x88<64>
	SCZO = cond(rsp)
	rdx = Mem0[r8 + 8<64>:word64]
	rax = Mem0[r8:word64]
	rbx = Mem0[rsp + 0xF0<64>:word64]
	Mem0[rsp + 0xD0<64>:word64] = rcx
	rcx = rsp + 0x6E<64>
	Mem0[rsp + 0x58<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0x50<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0x48<64>:word64] = rdx
	rdx = rbx + 0xD0<64>
	Mem0[rsp + 0x40<64>:word64] = rax
	call fn000000000042A360 (retsize: 8;)
	esi = Mem0[rbx + 0x18<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	rbp = rax
	Mem0[rsp + 0x24<64>:word32] = 8<32>
	esi = esi & 0x4A<32>
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SCZO = cond(esi - 0x40<32>)
	branch Test(EQ,Z) l000000000042EAF0
	// succ:  l000000000042EADC l000000000042EAF0
l000000000042EADC:
	SCZO = cond(esi - 8<32>)
	eax = 0xA<32>
	rax = CONVERT(eax, word32, uint64)
	edx = 0x10<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l000000000042EAEC
	// succ:  l000000000042EAE9_1 l000000000042EAEC
l000000000042EAE9_1:
	eax = edx
	// succ:  l000000000042EAEC
l000000000042EAEC:
	Mem0[rsp + 0x24<64>:word32] = eax
	// succ:  l000000000042EAF0
l000000000042EAF0:
	r12 = rsp + 0x40<64>
	rdi = rsp + 0x50<64>
	rdx = r12
	rcx = rdi
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	r15d = eax
	r15 = CONVERT(r15d, word32, uint64)
	branch Test(NE,Z) l000000000042F38F
	// succ:  l000000000042EB10 l000000000042F38F
l000000000042EB10:
	rcx = rdi
	call fn000000000042B050 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x6E<64>:byte] - al)
	ebx = CONVERT(al, byte, int32)
	Mem0[rsp + 0x37<64>:byte] = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(NE,Z) l000000000042F0C0
	// succ:  l000000000042EB29 l000000000042F0C0
l000000000042EB29:
	edx = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l000000000042F0D2
	// succ:  l000000000042EB35 l000000000042F0D2
l000000000042EB35:
	SCZO = cond(Mem0[rbp + 0x48<64>:byte] - al)
	branch Test(EQ,Z) l000000000042F3BD
	// succ:  l000000000042EB3E l000000000042F3BD
l000000000042EB3E:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042EB55
	// succ:  l000000000042EB48 l000000000042EB55
l000000000042EB48:
	call fn0000000000462490 (retsize: 8;)
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l000000000042EB55
l000000000042EB55:
	rdx = r12
	rcx = rdi
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000042F164
	// succ:  l000000000042EB68 l000000000042F164
l000000000042EB68:
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	Mem0[rsp + 0x35<64>:byte] = 0<8>
	// succ:  l000000000042EB76
l000000000042EB76:
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 0x10<32>)
	r12d = 0x16<32>
	r12 = CONVERT(r12d, word32, uint64)
	branch Test(EQ,Z) l000000000042EB88
	// succ:  l000000000042EB83 l000000000042EB88
l000000000042EB83:
	r12 = CONVERT(Mem0[rsp + 0x24<64>:word32], word32, int64)
	// succ:  l000000000042EB88
l000000000042EB88:
	rax = rsp + 0x6F<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x38<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x20<64>:byte] - 0<8>)
	Mem0[rsp + 0x70<64>:word64] = rax
	branch Test(NE,Z) l000000000042F150
	// succ:  l000000000042EBAD l000000000042F150
l000000000042EBAD:
	eax = 0xFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	r14 = rbp + 0x72<64>
	edx_eax = CONVERT(eax, int32, int64)
	v31 = edx_eax
	edx = CONVERT(v31 % Mem0[rsp + 0x24<64>:word32], int64, int32)
	eax = CONVERT(v31 / Mem0[rsp + 0x24<64>:word32], word32, int32)
	SCZO = cond(eax)
	Mem0[rsp + 0x32<64>:word16] = ax
	eax = CONVERT(Mem0[rbp + 0x88<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	Mem0[rsp + 0x36<64>:byte] = al
	branch Test(NE,Z) l000000000042EDA3
	// succ:  l000000000042EBD3 l000000000042EDA3
l000000000042EBD3:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l000000000042EDB0
	// succ:  l000000000042EBE0 l000000000042EDB0
l000000000042EBE0:
	eax = SLICE(r12 + 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	r14d = 0xFFFF<32>
	r14 = CONVERT(r14d, word32, uint64)
	Mem0[rsp + 0x28<64>:byte] = al
	// succ:  l000000000042EBEF
l000000000042EBEF:
	SCZO = cond(r12 - 0xA<64>)
	branch Test(UGT,CZ) l000000000042EDC0
	// succ:  l000000000042EBF9 l000000000042EDC0
l000000000042EBF9:
	SCZO = cond(bl - 0x2F<8>)
	branch Test(LE,SZO) l000000000042EDB0
	// succ:  l000000000042EC02 l000000000042EDB0
l000000000042EC02:
	SCZO = cond(Mem0[rsp + 0x28<64>:byte] - bl)
	branch Test(LE,SZO) l000000000042EDB0
	// succ:  l000000000042EC0C l000000000042EDB0
l000000000042EC0C:
	ebx = ebx - 0x30<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	// succ:  l000000000042EC0F
l000000000042EC0F:
	SCZO = cond(Mem0[rsp + 0x32<64>:word16] - si)
	branch Test(UGE,C) l000000000042EDEB
	// succ:  l000000000042EC1A l000000000042EDEB
l000000000042EC1A:
	rcx = Mem0[rsp + 0x50<64>:word64]
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042EE14
	// succ:  l000000000042EC2D l000000000042EE14
l000000000042EC2D:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042EEA0
	// succ:  l000000000042EC3B l000000000042EEA0
l000000000042EC3B:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042EED0
	// succ:  l000000000042EC59 l000000000042EED0
l000000000042EC59:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042EC5C
l000000000042EC5C:
	rcx = Mem0[rsp + 0x40<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042EE53
	// succ:  l000000000042EC6E l000000000042EE53
l000000000042EC6E:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042EE34
	// succ:  l000000000042EC7D l000000000042EE34
l000000000042EC7D:
	SCZO = cond(al - bl)
	branch Test(NE,Z) l000000000042EE53
	// succ:  l000000000042EC85 l000000000042EE53
l000000000042EC85:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	// succ:  l000000000042EC8D
l000000000042EC8D:
	rax = Mem0[rsp + 0x70<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(NE,Z) l000000000042ED20
	// succ:  l000000000042EC9D l000000000042ED20
l000000000042EC9D:
	SZO = cond(r13d & r13d)
	C = false
	dl = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(Mem0[rsp + 0x35<64>:byte] - dl)
	branch Test(UGE,C) l000000000042ED6F
	// succ:  l000000000042ECAD l000000000042ED6F
l000000000042ECAD:
	rdi = Mem0[rsp + 0x100<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rdi:word16] = dx
	rdi = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rdi:word32] = 4<32>
	// succ:  l000000000042ECC8
l000000000042ECC8:
	SZO = cond(r15b & r15b)
	C = false
	branch Test(EQ,Z) l000000000042ECD8
	// succ:  l000000000042ECCD l000000000042ECD8
l000000000042ECCD:
	rdi = Mem0[rsp + 0xF8<64>:word64]
	v40 = Mem0[rdi:word32] | 2<32>
	Mem0[rdi:word32] = v40
	SZO = cond(Mem0[rdi:word32])
	C = false
	// succ:  l000000000042ECD8
l000000000042ECD8:
	rdi = Mem0[rsp + 0xD0<64>:word64]
	rcx = Mem0[rsp + 0x50<64>:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rbx = Mem0[rsp + 0x58<64>:word64]
	Mem0[rdi:word64] = rcx
	Mem0[rdi + 8<64>:word64] = rbx
	__lock()
	Mem0[rax - 8<64>:word32] = __xadd(Mem0[rax - 8<64>:word32], edx)
	SCZO = cond(Mem0[rax - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l000000000042F2E0
	// succ:  l000000000042ED03 l000000000042F2E0
l000000000042ED03:
	rax = Mem0[rsp + 0xD0<64>:word64]
	rsp = rsp + 0x88<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042EA70_exit
l000000000042ED20:
	r12 = rsp + 0x70<64>
	edx = CONVERT(r13b, byte, int32)
	rcx = r12
	call fn0000000000451E10 (retsize: 8;)
	rdx = Mem0[rbp + 0x18<64>:word64]
	rcx = Mem0[rbp + 0x10<64>:word64]
	r8 = r12
	call fn00000000004708F0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000042ED53
	// succ:  l000000000042ED45 l000000000042ED53
l000000000042ED45:
	rax = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rax:word32] = 4<32>
	// succ:  l000000000042ED53
l000000000042ED53:
	SZO = cond(r13d & r13d)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(Mem0[rsp + 0x35<64>:byte] - al)
	rax = Mem0[rsp + 0x70<64>:word64]
	branch Test(UGE,C) l000000000042ED6F
	// succ:  l000000000042ED64 l000000000042ED6F
l000000000042ED64:
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000042ECAD
	// succ:  l000000000042ED6F l000000000042ECAD
l000000000042ED6F:
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l000000000042ECAD
	// succ:  l000000000042ED77 l000000000042ECAD
l000000000042ED77:
	SZO = cond(dil & dil)
	C = false
	branch Test(EQ,Z) l000000000042F0E5
	// succ:  l000000000042ED80 l000000000042F0E5
l000000000042ED80:
	rdi = Mem0[rsp + 0x100<64>:word64]
	ecx = 0xFFFFFFFF<32>
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[rdi:word16] = cx
	rdi = Mem0[rsp + 0xF8<64>:word64]
	Mem0[rdi:word32] = 4<32>
	goto l000000000042ECC8
	// succ:  l000000000042ECC8
l000000000042EDA3:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(r15b & r15b)
	C = false
	branch Test(EQ,Z) l000000000042EEF0
	// succ:  l000000000042EDB0 l000000000042EEF0
l000000000042EDB0:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l000000000042EC8D
	// succ:  l000000000042EC8D
l000000000042EDC0:
	eax = SLICE(rbx - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 9<8>)
	branch Test(ULE,CZ) l000000000042EC0C
	// succ:  l000000000042EDCB l000000000042EC0C
l000000000042EDCB:
	eax = SLICE(rbx - 0x61<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(ULE,CZ) l000000000042EE72
	// succ:  l000000000042EDD6 l000000000042EE72
l000000000042EDD6:
	eax = SLICE(rbx - 0x41<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(UGT,CZ) l000000000042EDB0
	// succ:  l000000000042EDDD l000000000042EDB0
l000000000042EDDD:
	ebx = ebx - 0x37<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SCZO = cond(Mem0[rsp + 0x32<64>:word16] - si)
	branch Test(ULT,C) l000000000042EC1A
	// succ:  l000000000042EDEB l000000000042EC1A
l000000000042EDEB:
	si = si *s Mem0[rsp + 0x24<64>:word16]
	SCZO = cond(si)
	eax = r14d
	rax = CONVERT(eax, word32, uint64)
	rcx = Mem0[rsp + 0x50<64>:word64]
	eax = eax - ebx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = CONVERT(si, word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - eax)
	al = CONVERT(Test(GT,SZO), bool, int8)
	esi = esi + ebx
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	edi = edi | eax
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000042EC2D
	// succ:  l000000000042EE14 l000000000042EC2D
l000000000042EE14:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042EC85
	// succ:  l000000000042EE22 l000000000042EC85
l000000000042EE22:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l000000000042EC7D
	// succ:  l000000000042EE34 l000000000042EC7D
l000000000042EE34:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042F102
	// succ:  l000000000042EE42 l000000000042F102
l000000000042EE42:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042EE45
l000000000042EE45:
	Mem0[rsp + 0x48<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l000000000042EC85
	// succ:  l000000000042EE53 l000000000042EC85
l000000000042EE53:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042F3CE
	// succ:  l000000000042EE61 l000000000042F3CE
l000000000042EE61:
	eax = Mem0[rsp + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042EE80
	// succ:  l000000000042EE6A l000000000042EE80
l000000000042EE6A:
	ebx = CONVERT(al, byte, int32)
	goto l000000000042EBEF
	// succ:  l000000000042EBEF
l000000000042EE72:
	ebx = ebx - 0x57<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	goto l000000000042EC0F
	// succ:  l000000000042EC0F
l000000000042EE80:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042F350
	// succ:  l000000000042EE8E l000000000042F350
l000000000042EE8E:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042EE91
l000000000042EE91:
	Mem0[rsp + 0x58<64>:word32] = eax
	goto l000000000042EE6A
	// succ:  l000000000042EE6A
l000000000042EEA0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042EE14
	// succ:  l000000000042EEBC l000000000042EE14
l000000000042EEBC:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l000000000042EC59
	// succ:  l000000000042EECA l000000000042EC59
l000000000042EECA:
	// succ:  l000000000042EED0
l000000000042EED0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042EC5C
	// succ:  l000000000042EEDF l000000000042EC5C
l000000000042EEDF:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l000000000042EE14
	// succ:  l000000000042EE14
l000000000042EEF0:
	rax = rsp + 0x70<64>
	Mem0[rsp + 0x28<64>:word64] = rax
	// succ:  l000000000042EEFA
l000000000042EEFA:
	SCZO = cond(Mem0[rbp + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000042EF09
	// succ:  l000000000042EF00 l000000000042EF09
l000000000042EF00:
	SCZO = cond(bl - Mem0[rbp + 0x49<64>:byte])
	branch Test(EQ,Z) l000000000042F050
	// succ:  l000000000042EF09 l000000000042F050
l000000000042EF09:
	SCZO = cond(bl - Mem0[rbp + 0x48<64>:byte])
	branch Test(EQ,Z) l000000000042EDB0
	// succ:  l000000000042EF12 l000000000042EDB0
l000000000042EF12:
	edx = CONVERT(bl, byte, int32)
	r8 = r12
	rcx = r14
	rax = memchr(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000042EDB0
	// succ:  l000000000042EF29 l000000000042EDB0
l000000000042EF29:
	rax = rax - r14
	SCZO = cond(rax)
	edx = SLICE(rax - 6<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(eax - 0x10<32>)
	branch Test(LT,SO) l000000000042EF35
	// succ:  l000000000042EF32_1 l000000000042EF35
l000000000042EF32_1:
	eax = edx
	// succ:  l000000000042EF35
l000000000042EF35:
	SCZO = cond(Mem0[rsp + 0x32<64>:word16] - si)
	branch Test(ULT,C) l000000000042F000
	// succ:  l000000000042EF40 l000000000042F000
l000000000042EF40:
	si = si *s Mem0[rsp + 0x24<64>:word16]
	SCZO = cond(si)
	edx = 0xFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	edx = edx - eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	ecx = CONVERT(si, word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx - edx)
	dl = CONVERT(Test(GT,SZO), bool, int8)
	esi = esi + eax
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	edi = edi | edx
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	// succ:  l000000000042EF5D
l000000000042EF5D:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042F013
	// succ:  l000000000042EF6B l000000000042F013
l000000000042EF6B:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042F070
	// succ:  l000000000042EF79 l000000000042F070
l000000000042EF79:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042F0A0
	// succ:  l000000000042EF97 l000000000042F0A0
l000000000042EF97:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042EF9A
l000000000042EF9A:
	rcx = Mem0[rsp + 0x40<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042EFBB
	// succ:  l000000000042EFA8 l000000000042EFBB
l000000000042EFA8:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042F02F
	// succ:  l000000000042EFB3 l000000000042F02F
l000000000042EFB3:
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l000000000042EC85
	// succ:  l000000000042EFBB l000000000042EC85
l000000000042EFBB:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042F3E2
	// succ:  l000000000042EFC9 l000000000042F3E2
l000000000042EFC9:
	eax = Mem0[rsp + 0x58<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042EFE0
	// succ:  l000000000042EFD2 l000000000042EFE0
l000000000042EFD2:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042EEFA
	// succ:  l000000000042EEFA
l000000000042EFE0:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042F370
	// succ:  l000000000042EFEE l000000000042F370
l000000000042EFEE:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042EFF1
l000000000042EFF1:
	Mem0[rsp + 0x58<64>:word32] = eax
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042EEFA
	// succ:  l000000000042EEFA
l000000000042F000:
	rcx = Mem0[rsp + 0x50<64>:word64]
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000042EF6B
	// succ:  l000000000042F013 l000000000042EF6B
l000000000042F013:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042EC85
	// succ:  l000000000042F021 l000000000042EC85
l000000000042F021:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	ebx = CONVERT(Mem0[rsp + 0x36<64>:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l000000000042EFB3
	// succ:  l000000000042F02F l000000000042EFB3
l000000000042F02F:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042F124
	// succ:  l000000000042F03D l000000000042F124
l000000000042F03D:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042F040
l000000000042F040:
	Mem0[rsp + 0x48<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000042EFB3
	// succ:  l000000000042EFB3
l000000000042F050:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000042F3D8
	// succ:  l000000000042F059 l000000000042F3D8
l000000000042F059:
	rcx = Mem0[rsp + 0x28<64>:word64]
	edx = CONVERT(r13b, byte, int32)
	call fn0000000000451E10 (retsize: 8;)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	goto l000000000042EF5D
	// succ:  l000000000042EF5D
l000000000042F070:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042F013
	// succ:  l000000000042F088 l000000000042F013
l000000000042F088:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l000000000042EF97
	// succ:  l000000000042F096 l000000000042EF97
l000000000042F096:
	// succ:  l000000000042F0A0
l000000000042F0A0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042EF9A
	// succ:  l000000000042F0AF l000000000042EF9A
l000000000042F0AF:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l000000000042F013
	// succ:  l000000000042F013
l000000000042F0C0:
	SCZO = cond(Mem0[rbp + 0x6F<64>:byte] - al)
	branch Test(EQ,Z) l000000000042EB29
	// succ:  l000000000042F0C9 l000000000042EB29
l000000000042F0C9:
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042F173
	// succ:  l000000000042F173
l000000000042F0D2:
	SCZO = cond(Mem0[rbp + 0x49<64>:byte] - al)
	branch Test(NE,Z) l000000000042EB35
	// succ:  l000000000042F0DB l000000000042EB35
l000000000042F0DB:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042F173
	// succ:  l000000000042F173
l000000000042F0E5:
	edx = CONVERT(Mem0[rsp + 0x37<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rdi = Mem0[rsp + 0x100<64>:word64]
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	ecx = -ecx
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	C = ecx == 0<32>
	esi = esi ^ ecx
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edx = edx + esi
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	Mem0[rdi:word16] = dx
	goto l000000000042ECC8
	// succ:  l000000000042ECC8
l000000000042F102:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042EE45
	// succ:  l000000000042F111 l000000000042EE45
l000000000042F111:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042EC7D
	// succ:  l000000000042EC7D
l000000000042F124:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042F040
	// succ:  l000000000042F133 l000000000042F040
l000000000042F133:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = CONVERT(Mem0[rsp + 0x36<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042EFB3
	// succ:  l000000000042EFB3
l000000000042F150:
	rcx = rsp + 0x70<64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000451BE0 (retsize: 8;)
	goto l000000000042EBAD
	// succ:  l000000000042EBAD
l000000000042F164:
	rcx = rdi
	call fn000000000042B050 (retsize: 8;)
	ebx = CONVERT(al, byte, int32)
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042F173
l000000000042F173:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	// succ:  l000000000042F179
l000000000042F179:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000042F186
	// succ:  l000000000042F17D l000000000042F186
l000000000042F17D:
	SCZO = cond(Mem0[rbp + 0x49<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042F2F3
	// succ:  l000000000042F186 l000000000042F2F3
l000000000042F186:
	SCZO = cond(Mem0[rbp + 0x48<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042F2F3
	// succ:  l000000000042F18F l000000000042F2F3
l000000000042F18F:
	SCZO = cond(Mem0[rbp + 0x72<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042F240
	// succ:  l000000000042F198 l000000000042F240
l000000000042F198:
	SZO = cond(r12b & r12b)
	C = false
	branch Test(EQ,Z) l000000000042F2F3
	// succ:  l000000000042F1A1 l000000000042F2F3
l000000000042F1A1:
	SCZO = cond(Mem0[rbp + 0x70<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042F1AF
	// succ:  l000000000042F1A6 l000000000042F1AF
l000000000042F1A6:
	SCZO = cond(Mem0[rbp + 0x71<64>:byte] - bl)
	branch Test(NE,Z) l000000000042F2D2
	// succ:  l000000000042F1AF l000000000042F2D2
l000000000042F1AF:
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 0x10<32>)
	branch Test(EQ,Z) l000000000042F1BE
	// succ:  l000000000042F1B6 l000000000042F1BE
l000000000042F1B6:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l000000000042F3C4
	// succ:  l000000000042F1BE l000000000042F3C4
l000000000042F1BE:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	Mem0[rsp + 0x24<64>:word32] = 0x10<32>
	// succ:  l000000000042F1CC
l000000000042F1CC:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042F280
	// succ:  l000000000042F1DA l000000000042F280
l000000000042F1DA:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042F300
	// succ:  l000000000042F1E8 l000000000042F300
l000000000042F1E8:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rdx
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042F330
	// succ:  l000000000042F206 l000000000042F330
l000000000042F206:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042F209
l000000000042F209:
	rcx = Mem0[rsp + 0x40<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042F2B9
	// succ:  l000000000042F21B l000000000042F2B9
l000000000042F21B:
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042F299
	// succ:  l000000000042F227 l000000000042F299
l000000000042F227:
	SCZO = cond(r14b - al)
	branch Test(NE,Z) l000000000042F2B9
	// succ:  l000000000042F230 l000000000042F2B9
l000000000042F230:
	Mem0[rsp + 0x35<64>:byte] = r12b
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l000000000042EB76
	// succ:  l000000000042EB76
l000000000042F240:
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 0xA<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - r12b)
	branch Test(ULT,C) l000000000042F1A1
	// succ:  l000000000042F251 l000000000042F1A1
l000000000042F251:
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	SCZO = cond(Mem0[rsp + 0x24<64>:word32] - 8<32>)
	branch Test(EQ,Z) l000000000042F3EC
	// succ:  l000000000042F260 l000000000042F3EC
l000000000042F260:
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l000000000042F3EC
	// succ:  l000000000042F268 l000000000042F3EC
l000000000042F268:
	rcx = Mem0[rsp + 0x50<64>:word64]
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000042F1DA
	// succ:  l000000000042F27C l000000000042F1DA
l000000000042F27C:
	// succ:  l000000000042F280
l000000000042F280:
	rcx = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042F230
	// succ:  l000000000042F28A l000000000042F230
l000000000042F28A:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x48<64>:word32] - 0xFFFFFFFF<32>)
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(NE,Z) l000000000042F227
	// succ:  l000000000042F299 l000000000042F227
l000000000042F299:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042F39B
	// succ:  l000000000042F2A7 l000000000042F39B
l000000000042F2A7:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042F2AA
l000000000042F2AA:
	Mem0[rsp + 0x48<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r14b - al)
	branch Test(EQ,Z) l000000000042F230
	// succ:  l000000000042F2B9 l000000000042F230
l000000000042F2B9:
	rcx = rdi
	call fn000000000042B050 (retsize: 8;)
	SZO = cond(r12b & r12b)
	C = false
	ebx = CONVERT(al, byte, int32)
	branch Test(EQ,Z) l000000000042F2F3
	// succ:  l000000000042F2C9 l000000000042F2F3
l000000000042F2C9:
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042F179
	// succ:  l000000000042F179
l000000000042F2D2:
	Mem0[rsp + 0x35<64>:byte] = 1<8>
	goto l000000000042EB76
	// succ:  l000000000042EB76
l000000000042F2E0:
	rdx = Mem0[rsp + 0x38<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A50 (retsize: 8;)
	goto l000000000042ED03
	// succ:  l000000000042ED03
l000000000042F2F3:
	Mem0[rsp + 0x35<64>:byte] = r12b
	goto l000000000042EB76
	// succ:  l000000000042EB76
l000000000042F300:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x58<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042F280
	// succ:  l000000000042F31C l000000000042F280
l000000000042F31C:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l000000000042F206
	// succ:  l000000000042F32A l000000000042F206
l000000000042F32A:
	// succ:  l000000000042F330
l000000000042F330:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042F209
	// succ:  l000000000042F33F l000000000042F209
l000000000042F33F:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	goto l000000000042F280
	// succ:  l000000000042F280
l000000000042F350:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042EE91
	// succ:  l000000000042F35F l000000000042EE91
l000000000042F35F:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	ebx = CONVERT(al, byte, int32)
	goto l000000000042EBEF
	// succ:  l000000000042EBEF
l000000000042F370:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042EFF1
	// succ:  l000000000042F37F l000000000042EFF1
l000000000042F37F:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042EEFA
	// succ:  l000000000042EEFA
l000000000042F38F:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x37<64>:byte] = 0<8>
	goto l000000000042EB68
	// succ:  l000000000042EB68
l000000000042F39B:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042F2AA
	// succ:  l000000000042F3AA l000000000042F2AA
l000000000042F3AA:
	Mem0[rsp + 0x40<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042F227
	// succ:  l000000000042F227
l000000000042F3BD:
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042F173
	// succ:  l000000000042F173
l000000000042F3C4:
	Mem0[rsp + 0x35<64>:byte] = 1<8>
	goto l000000000042EB83
	// succ:  l000000000042EB83
l000000000042F3CE:
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042EBEF
	// succ:  l000000000042EBEF
l000000000042F3D8:
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042EC8D
	// succ:  l000000000042EC8D
l000000000042F3E2:
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042EEFA
	// succ:  l000000000042EEFA
l000000000042F3EC:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	Mem0[rsp + 0x24<64>:word32] = 8<32>
	goto l000000000042F1CC
	// succ:  l000000000042F1CC
fn000000000042EA70_exit:


// fn000000000042F430
// Return size: 8
define fn000000000042F430
fn000000000042F430_entry:
	rsp = fp
	// succ:  l000000000042F430
l000000000042F430:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x98<64>
	SCZO = cond(rsp)
	rdx = Mem0[r8 + 8<64>:word64]
	rax = Mem0[r8:word64]
	esi = 8<32>
	rsi = CONVERT(esi, word32, uint64)
	rbx = Mem0[rsp + 0x100<64>:word64]
	Mem0[rsp + 0xE0<64>:word64] = rcx
	rcx = rsp + 0x7E<64>
	Mem0[rsp + 0x68<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0x60<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0x58<64>:word64] = rdx
	rdx = rbx + 0xD0<64>
	Mem0[rsp + 0x50<64>:word64] = rax
	call fn000000000042A360 (retsize: 8;)
	edi = Mem0[rbx + 0x18<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	rbp = rax
	edi = edi & 0x4A<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SCZO = cond(edi - 0x40<32>)
	branch Test(EQ,Z) l000000000042F4A7
	// succ:  l000000000042F499 l000000000042F4A7
l000000000042F499:
	SCZO = cond(edi - 8<32>)
	eax = 0xA<32>
	rax = CONVERT(eax, word32, uint64)
	sil = 0x10<8>
	branch Test(EQ,Z) l000000000042F4A7
	// succ:  l000000000042F4A4_1 l000000000042F4A7
l000000000042F4A4_1:
	esi = eax
	// succ:  l000000000042F4A7
l000000000042F4A7:
	r13 = rsp + 0x50<64>
	r12 = rsp + 0x60<64>
	rdx = r13
	rcx = r12
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(NE,Z) l000000000042FD8F
	// succ:  l000000000042F4C7 l000000000042FD8F
l000000000042F4C7:
	rcx = r12
	call fn000000000042B050 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x6E<64>:byte] - al)
	ebx = CONVERT(al, byte, int32)
	Mem0[rsp + 0x47<64>:byte] = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(NE,Z) l000000000042FAC0
	// succ:  l000000000042F4E0 l000000000042FAC0
l000000000042F4E0:
	edx = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l000000000042FAD2
	// succ:  l000000000042F4EC l000000000042FAD2
l000000000042F4EC:
	SCZO = cond(Mem0[rbp + 0x48<64>:byte] - al)
	branch Test(EQ,Z) l000000000042FDC6
	// succ:  l000000000042F4F5 l000000000042FDC6
l000000000042F4F5:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042F50C
	// succ:  l000000000042F4FF l000000000042F50C
l000000000042F4FF:
	call fn0000000000462490 (retsize: 8;)
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l000000000042F50C
l000000000042F50C:
	rdx = r13
	rcx = r12
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000042FB70
	// succ:  l000000000042F51F l000000000042FB70
l000000000042F51F:
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	Mem0[rsp + 0x45<64>:byte] = 0<8>
	// succ:  l000000000042F52D
l000000000042F52D:
	SCZO = cond(esi - 0x10<32>)
	r12d = 0x16<32>
	r12 = CONVERT(r12d, word32, uint64)
	branch Test(EQ,Z) l000000000042F53B
	// succ:  l000000000042F538 l000000000042F53B
l000000000042F538:
	r12 = CONVERT(esi, word32, int64)
	// succ:  l000000000042F53B
l000000000042F53B:
	rax = rsp + 0x7F<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x48<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x20<64>:byte] - 0<8>)
	Mem0[rsp + 0x80<64>:word64] = rax
	branch Test(NE,Z) l000000000042FB52
	// succ:  l000000000042F563 l000000000042FB52
l000000000042F563:
	SCZO = cond(Mem0[rsp + 0x47<64>:byte] - 0<8>)
	rdx = 0x7FFFFFFFFFFFFFFF<64>
	rax = 0x8000000000000000<64>
	rdi = CONVERT(esi, word32, int64)
	r15 = rbp + 0x72<64>
	Mem0[rsp + 0x30<64>:word64] = rdi
	branch Test(NE,Z) l000000000042F58C
	// succ:  l000000000042F588_1 l000000000042F58C
l000000000042F588_1:
	rax = rdx
	// succ:  l000000000042F58C
l000000000042F58C:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x28<64>:word64] = rax
	v36 = rdx_rax
	rdx = CONVERT(v36 % rdi, word128, uint64)
	rax = CONVERT(v36 /u rdi, word64, uint64)
	SCZO = cond(rax)
	Mem0[rsp + 0x20<64>:word64] = rax
	eax = CONVERT(Mem0[rbp + 0x88<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	Mem0[rsp + 0x46<64>:byte] = al
	branch Test(NE,Z) l000000000042F795
	// succ:  l000000000042F5AE l000000000042F795
l000000000042F5AE:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(r14b & r14b)
	C = false
	branch Test(NE,Z) l000000000042F7A2
	// succ:  l000000000042F5BB l000000000042F7A2
l000000000042F5BB:
	r15d = SLICE(r12 + 0x30<64>, word32, 0)
	r15 = CONVERT(r15d, word32, uint64)
	// succ:  l000000000042F5C0
l000000000042F5C0:
	SCZO = cond(r12 - 0xA<64>)
	branch Test(UGT,CZ) l000000000042F7B0
	// succ:  l000000000042F5CA l000000000042F7B0
l000000000042F5CA:
	SCZO = cond(bl - 0x2F<8>)
	branch Test(LE,SZO) l000000000042F7A2
	// succ:  l000000000042F5D3 l000000000042F7A2
l000000000042F5D3:
	SCZO = cond(r15b - bl)
	branch Test(LE,SZO) l000000000042F7A2
	// succ:  l000000000042F5DC l000000000042F7A2
l000000000042F5DC:
	ebx = ebx - 0x30<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	// succ:  l000000000042F5DF
l000000000042F5DF:
	SCZO = cond(Mem0[rsp + 0x20<64>:word64] - rsi)
	branch Test(UGE,C) l000000000042F7DB
	// succ:  l000000000042F5EA l000000000042F7DB
l000000000042F5EA:
	rcx = Mem0[rsp + 0x60<64>:word64]
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042F809
	// succ:  l000000000042F5FD l000000000042F809
l000000000042F5FD:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042F8A0
	// succ:  l000000000042F60B l000000000042F8A0
l000000000042F60B:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042F8D0
	// succ:  l000000000042F629 l000000000042F8D0
l000000000042F629:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042F62C
l000000000042F62C:
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042F848
	// succ:  l000000000042F63E l000000000042F848
l000000000042F63E:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042F829
	// succ:  l000000000042F64D l000000000042F829
l000000000042F64D:
	SCZO = cond(al - bl)
	branch Test(NE,Z) l000000000042F848
	// succ:  l000000000042F655 l000000000042F848
l000000000042F655:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	// succ:  l000000000042F65D
l000000000042F65D:
	rax = Mem0[rsp + 0x80<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(NE,Z) l000000000042F6F4
	// succ:  l000000000042F670 l000000000042F6F4
l000000000042F670:
	SZO = cond(r13d & r13d)
	C = false
	dl = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(Mem0[rsp + 0x45<64>:byte] - dl)
	branch Test(UGE,C) l000000000042F749
	// succ:  l000000000042F680 l000000000042F749
l000000000042F680:
	rdi = Mem0[rsp + 0x110<64>:word64]
	Mem0[rdi:word64] = 0<64>
	rdi = Mem0[rsp + 0x108<64>:word64]
	Mem0[rdi:word32] = 4<32>
	// succ:  l000000000042F69D
l000000000042F69D:
	SZO = cond(r14b & r14b)
	C = false
	branch Test(EQ,Z) l000000000042F6AD
	// succ:  l000000000042F6A2 l000000000042F6AD
l000000000042F6A2:
	rdi = Mem0[rsp + 0x108<64>:word64]
	v39 = Mem0[rdi:word32] | 2<32>
	Mem0[rdi:word32] = v39
	SZO = cond(Mem0[rdi:word32])
	C = false
	// succ:  l000000000042F6AD
l000000000042F6AD:
	rdi = Mem0[rsp + 0xE0<64>:word64]
	rcx = Mem0[rsp + 0x60<64>:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rbx = Mem0[rsp + 0x68<64>:word64]
	Mem0[rdi:word64] = rcx
	Mem0[rdi + 8<64>:word64] = rbx
	__lock()
	Mem0[rax - 8<64>:word32] = __xadd(Mem0[rax - 8<64>:word32], edx)
	SCZO = cond(Mem0[rax - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l000000000042FCE0
	// succ:  l000000000042F6D8 l000000000042FCE0
l000000000042F6D8:
	rax = Mem0[rsp + 0xE0<64>:word64]
	rsp = rsp + 0x98<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042F430_exit
l000000000042F6F4:
	r12 = rsp + 0x80<64>
	edx = CONVERT(r13b, byte, int32)
	rcx = r12
	call fn0000000000451E10 (retsize: 8;)
	rdx = Mem0[rbp + 0x18<64>:word64]
	rcx = Mem0[rbp + 0x10<64>:word64]
	r8 = r12
	call fn00000000004708F0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000042F72A
	// succ:  l000000000042F71C l000000000042F72A
l000000000042F71C:
	rax = Mem0[rsp + 0x108<64>:word64]
	Mem0[rax:word32] = 4<32>
	// succ:  l000000000042F72A
l000000000042F72A:
	SZO = cond(r13d & r13d)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - Mem0[rsp + 0x45<64>:byte])
	rax = Mem0[rsp + 0x80<64>:word64]
	branch Test(ULE,CZ) l000000000042F749
	// succ:  l000000000042F73E l000000000042F749
l000000000042F73E:
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000042F680
	// succ:  l000000000042F749 l000000000042F680
l000000000042F749:
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l000000000042F680
	// succ:  l000000000042F751 l000000000042F680
l000000000042F751:
	SZO = cond(dil & dil)
	C = false
	branch Test(EQ,Z) l000000000042FAE5
	// succ:  l000000000042F75A l000000000042FAE5
l000000000042F75A:
	SCZO = cond(Mem0[rsp + 0x47<64>:byte] - 0<8>)
	rdi = Mem0[rsp + 0x110<64>:word64]
	rcx = 0x8000000000000000<64>
	rdx = 0x7FFFFFFFFFFFFFFF<64>
	branch Test(EQ,Z) l000000000042F77F
	// succ:  l000000000042F77B_1 l000000000042F77F
l000000000042F77B_1:
	rdx = rcx
	// succ:  l000000000042F77F
l000000000042F77F:
	Mem0[rdi:word64] = rdx
	rdi = Mem0[rsp + 0x108<64>:word64]
	Mem0[rdi:word32] = 4<32>
	goto l000000000042F69D
	// succ:  l000000000042F69D
l000000000042F795:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(r14b & r14b)
	C = false
	branch Test(EQ,Z) l000000000042F8F0
	// succ:  l000000000042F7A2 l000000000042F8F0
l000000000042F7A2:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l000000000042F65D
	// succ:  l000000000042F65D
l000000000042F7B0:
	eax = SLICE(rbx - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 9<8>)
	branch Test(ULE,CZ) l000000000042F5DC
	// succ:  l000000000042F7BB l000000000042F5DC
l000000000042F7BB:
	eax = SLICE(rbx - 0x61<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(ULE,CZ) l000000000042F870
	// succ:  l000000000042F7C6 l000000000042F870
l000000000042F7C6:
	eax = SLICE(rbx - 0x41<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(UGT,CZ) l000000000042F7A2
	// succ:  l000000000042F7CD l000000000042F7A2
l000000000042F7CD:
	ebx = ebx - 0x37<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SCZO = cond(Mem0[rsp + 0x20<64>:word64] - rsi)
	branch Test(ULT,C) l000000000042F5EA
	// succ:  l000000000042F7DB l000000000042F5EA
l000000000042F7DB:
	rsi = rsi *s Mem0[rsp + 0x30<64>:word64]
	SCZO = cond(rsi)
	rax = Mem0[rsp + 0x28<64>:word64]
	rbx = CONVERT(ebx, word32, int64)
	rcx = Mem0[rsp + 0x60<64>:word64]
	rax = rax - rbx
	SCZO = cond(rax)
	SCZO = cond(rax - rsi)
	al = CONVERT(Test(ULT,C), bool, int8)
	rsi = rsi + rbx
	SCZO = cond(rsi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	edi = edi | eax
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000042F5FD
	// succ:  l000000000042F809 l000000000042F5FD
l000000000042F809:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042F655
	// succ:  l000000000042F817 l000000000042F655
l000000000042F817:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word32] - 0xFFFFFFFF<32>)
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l000000000042F64D
	// succ:  l000000000042F829 l000000000042F64D
l000000000042F829:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042FB04
	// succ:  l000000000042F837 l000000000042FB04
l000000000042F837:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042F83A
l000000000042F83A:
	Mem0[rsp + 0x58<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l000000000042F655
	// succ:  l000000000042F848 l000000000042F655
l000000000042F848:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042FDD7
	// succ:  l000000000042F856 l000000000042FDD7
l000000000042F856:
	eax = Mem0[rsp + 0x68<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042F880
	// succ:  l000000000042F85F l000000000042F880
l000000000042F85F:
	ebx = CONVERT(al, byte, int32)
	goto l000000000042F5C0
	// succ:  l000000000042F5C0
l000000000042F870:
	ebx = ebx - 0x57<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	goto l000000000042F5DF
	// succ:  l000000000042F5DF
l000000000042F880:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042FD50
	// succ:  l000000000042F88E l000000000042FD50
l000000000042F88E:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042F891
l000000000042F891:
	Mem0[rsp + 0x68<64>:word32] = eax
	goto l000000000042F85F
	// succ:  l000000000042F85F
l000000000042F8A0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042F809
	// succ:  l000000000042F8BC l000000000042F809
l000000000042F8BC:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l000000000042F629
	// succ:  l000000000042F8CA l000000000042F629
l000000000042F8CA:
	// succ:  l000000000042F8D0
l000000000042F8D0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042F62C
	// succ:  l000000000042F8DF l000000000042F62C
l000000000042F8DF:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l000000000042F809
	// succ:  l000000000042F809
l000000000042F8F0:
	rax = rsp + 0x80<64>
	Mem0[rsp + 0x38<64>:word64] = rax
	// succ:  l000000000042F8FD
l000000000042F8FD:
	SCZO = cond(Mem0[rbp + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000042F90C
	// succ:  l000000000042F903 l000000000042F90C
l000000000042F903:
	SCZO = cond(bl - Mem0[rbp + 0x49<64>:byte])
	branch Test(EQ,Z) l000000000042FA50
	// succ:  l000000000042F90C l000000000042FA50
l000000000042F90C:
	SCZO = cond(bl - Mem0[rbp + 0x48<64>:byte])
	branch Test(EQ,Z) l000000000042F7A2
	// succ:  l000000000042F915 l000000000042F7A2
l000000000042F915:
	edx = CONVERT(bl, byte, int32)
	r8 = r12
	rcx = r15
	rax = memchr(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000042F7A2
	// succ:  l000000000042F92C l000000000042F7A2
l000000000042F92C:
	rax = rax - r15
	SCZO = cond(rax)
	edx = SLICE(rax - 6<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(eax - 0x10<32>)
	branch Test(LT,SO) l000000000042F938
	// succ:  l000000000042F935_1 l000000000042F938
l000000000042F935_1:
	eax = edx
	// succ:  l000000000042F938
l000000000042F938:
	SCZO = cond(Mem0[rsp + 0x20<64>:word64] - rsi)
	branch Test(ULT,C) l000000000042FA00
	// succ:  l000000000042F943 l000000000042FA00
l000000000042F943:
	rsi = rsi *s Mem0[rsp + 0x30<64>:word64]
	SCZO = cond(rsi)
	rdx = Mem0[rsp + 0x28<64>:word64]
	rax = CONVERT(eax, int32, int64)
	rdx = rdx - rax
	SCZO = cond(rdx)
	SCZO = cond(rdx - rsi)
	dl = CONVERT(Test(ULT,C), bool, int8)
	rsi = rsi + rax
	SCZO = cond(rsi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	edi = edi | edx
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	// succ:  l000000000042F962
l000000000042F962:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042FA13
	// succ:  l000000000042F970 l000000000042FA13
l000000000042F970:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042FA70
	// succ:  l000000000042F97E l000000000042FA70
l000000000042F97E:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042FAA0
	// succ:  l000000000042F99C l000000000042FAA0
l000000000042F99C:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042F99F
l000000000042F99F:
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042F9C0
	// succ:  l000000000042F9AD l000000000042F9C0
l000000000042F9AD:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042FA2F
	// succ:  l000000000042F9B8 l000000000042FA2F
l000000000042F9B8:
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l000000000042F655
	// succ:  l000000000042F9C0 l000000000042F655
l000000000042F9C0:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042FDEB
	// succ:  l000000000042F9CE l000000000042FDEB
l000000000042F9CE:
	eax = Mem0[rsp + 0x68<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042F9E0
	// succ:  l000000000042F9D7 l000000000042F9E0
l000000000042F9D7:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042F8FD
	// succ:  l000000000042F8FD
l000000000042F9E0:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042FD70
	// succ:  l000000000042F9EE l000000000042FD70
l000000000042F9EE:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042F9F1
l000000000042F9F1:
	Mem0[rsp + 0x68<64>:word32] = eax
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042F8FD
	// succ:  l000000000042F8FD
l000000000042FA00:
	rcx = Mem0[rsp + 0x60<64>:word64]
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000042F970
	// succ:  l000000000042FA13 l000000000042F970
l000000000042FA13:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042F655
	// succ:  l000000000042FA21 l000000000042F655
l000000000042FA21:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word32] - 0xFFFFFFFF<32>)
	ebx = CONVERT(Mem0[rsp + 0x46<64>:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l000000000042F9B8
	// succ:  l000000000042FA2F l000000000042F9B8
l000000000042FA2F:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042FB30
	// succ:  l000000000042FA3D l000000000042FB30
l000000000042FA3D:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042FA40
l000000000042FA40:
	Mem0[rsp + 0x58<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000042F9B8
	// succ:  l000000000042F9B8
l000000000042FA50:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000042FDE1
	// succ:  l000000000042FA59 l000000000042FDE1
l000000000042FA59:
	rcx = Mem0[rsp + 0x38<64>:word64]
	edx = CONVERT(r13b, byte, int32)
	call fn0000000000451E10 (retsize: 8;)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	goto l000000000042F962
	// succ:  l000000000042F962
l000000000042FA70:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042FA13
	// succ:  l000000000042FA88 l000000000042FA13
l000000000042FA88:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l000000000042F99C
	// succ:  l000000000042FA96 l000000000042F99C
l000000000042FA96:
	// succ:  l000000000042FAA0
l000000000042FAA0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042F99F
	// succ:  l000000000042FAAF l000000000042F99F
l000000000042FAAF:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l000000000042FA13
	// succ:  l000000000042FA13
l000000000042FAC0:
	SCZO = cond(Mem0[rbp + 0x6F<64>:byte] - al)
	branch Test(EQ,Z) l000000000042F4E0
	// succ:  l000000000042FAC9 l000000000042F4E0
l000000000042FAC9:
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042FB7F
	// succ:  l000000000042FB7F
l000000000042FAD2:
	SCZO = cond(Mem0[rbp + 0x49<64>:byte] - al)
	branch Test(NE,Z) l000000000042F4EC
	// succ:  l000000000042FADB l000000000042F4EC
l000000000042FADB:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042FB7F
	// succ:  l000000000042FB7F
l000000000042FAE5:
	rdx = rsi
	rdi = Mem0[rsp + 0x110<64>:word64]
	rdx = -rdx
	SCZO = cond(rdx)
	C = rdx == 0<64>
	SCZO = cond(Mem0[rsp + 0x47<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000042FAFC
	// succ:  l000000000042FAF8_1 l000000000042FAFC
l000000000042FAF8_1:
	rsi = rdx
	// succ:  l000000000042FAFC
l000000000042FAFC:
	Mem0[rdi:word64] = rsi
	goto l000000000042F69D
	// succ:  l000000000042F69D
l000000000042FB04:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042F83A
	// succ:  l000000000042FB13 l000000000042F83A
l000000000042FB13:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042F64D
	// succ:  l000000000042F64D
l000000000042FB30:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042FA40
	// succ:  l000000000042FB3F l000000000042FA40
l000000000042FB3F:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	eax = CONVERT(Mem0[rsp + 0x46<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042F9B8
	// succ:  l000000000042F9B8
l000000000042FB52:
	rcx = rsp + 0x80<64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000451BE0 (retsize: 8;)
	goto l000000000042F563
	// succ:  l000000000042F563
l000000000042FB70:
	rcx = r12
	call fn000000000042B050 (retsize: 8;)
	ebx = CONVERT(al, byte, int32)
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042FB7F
l000000000042FB7F:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	// succ:  l000000000042FB85
l000000000042FB85:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000042FB92
	// succ:  l000000000042FB89 l000000000042FB92
l000000000042FB89:
	SCZO = cond(Mem0[rbp + 0x49<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042FCF3
	// succ:  l000000000042FB92 l000000000042FCF3
l000000000042FB92:
	SCZO = cond(Mem0[rbp + 0x48<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042FCF3
	// succ:  l000000000042FB9B l000000000042FCF3
l000000000042FB9B:
	SCZO = cond(Mem0[rbp + 0x72<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042FC45
	// succ:  l000000000042FBA4 l000000000042FC45
l000000000042FBA4:
	SZO = cond(r15b & r15b)
	C = false
	branch Test(EQ,Z) l000000000042FCF3
	// succ:  l000000000042FBAD l000000000042FCF3
l000000000042FBAD:
	SCZO = cond(Mem0[rbp + 0x70<64>:byte] - bl)
	branch Test(EQ,Z) l000000000042FBBB
	// succ:  l000000000042FBB2 l000000000042FBBB
l000000000042FBB2:
	SCZO = cond(Mem0[rbp + 0x71<64>:byte] - bl)
	branch Test(NE,Z) l000000000042FCD0
	// succ:  l000000000042FBBB l000000000042FCD0
l000000000042FBBB:
	SCZO = cond(esi - 0x10<32>)
	branch Test(EQ,Z) l000000000042FBC8
	// succ:  l000000000042FBC0 l000000000042FBC8
l000000000042FBC0:
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l000000000042FDCD
	// succ:  l000000000042FBC8 l000000000042FDCD
l000000000042FBC8:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	esi = 0x10<32>
	rsi = CONVERT(esi, word32, uint64)
	// succ:  l000000000042FBD3
l000000000042FBD3:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042FC80
	// succ:  l000000000042FBE1 l000000000042FC80
l000000000042FBE1:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042FD00
	// succ:  l000000000042FBEF l000000000042FD00
l000000000042FBEF:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rdx
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042FD30
	// succ:  l000000000042FC0D l000000000042FD30
l000000000042FC0D:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042FC10
l000000000042FC10:
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042FCB7
	// succ:  l000000000042FC22 l000000000042FCB7
l000000000042FC22:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l000000000042FC98
	// succ:  l000000000042FC2D l000000000042FC98
l000000000042FC2D:
	SCZO = cond(al - dl)
	branch Test(NE,Z) l000000000042FCB7
	// succ:  l000000000042FC35 l000000000042FCB7
l000000000042FC35:
	Mem0[rsp + 0x45<64>:byte] = r15b
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	goto l000000000042F52D
	// succ:  l000000000042F52D
l000000000042FC45:
	SCZO = cond(esi - 0xA<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - r15b)
	branch Test(ULT,C) l000000000042FBAD
	// succ:  l000000000042FC54 l000000000042FBAD
l000000000042FC54:
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	SCZO = cond(esi - 8<32>)
	branch Test(EQ,Z) l000000000042FDF5
	// succ:  l000000000042FC61 l000000000042FDF5
l000000000042FC61:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000042FDF5
	// succ:  l000000000042FC69 l000000000042FDF5
l000000000042FC69:
	rcx = Mem0[rsp + 0x60<64>:word64]
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000042FBE1
	// succ:  l000000000042FC7D l000000000042FBE1
l000000000042FC7D:
	// succ:  l000000000042FC80
l000000000042FC80:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042FC35
	// succ:  l000000000042FC8A l000000000042FC35
l000000000042FC8A:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word32] - 0xFFFFFFFF<32>)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l000000000042FC2D
	// succ:  l000000000042FC98 l000000000042FC2D
l000000000042FC98:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000042FD9B
	// succ:  l000000000042FCA6 l000000000042FD9B
l000000000042FCA6:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000042FCA9
l000000000042FCA9:
	Mem0[rsp + 0x58<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - dl)
	branch Test(EQ,Z) l000000000042FC35
	// succ:  l000000000042FCB7 l000000000042FC35
l000000000042FCB7:
	rcx = r12
	call fn000000000042B050 (retsize: 8;)
	SZO = cond(r15b & r15b)
	C = false
	ebx = CONVERT(al, byte, int32)
	branch Test(EQ,Z) l000000000042FCF3
	// succ:  l000000000042FCC7 l000000000042FCF3
l000000000042FCC7:
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042FB85
	// succ:  l000000000042FB85
l000000000042FCD0:
	Mem0[rsp + 0x45<64>:byte] = 1<8>
	goto l000000000042F52D
	// succ:  l000000000042F52D
l000000000042FCE0:
	rdx = Mem0[rsp + 0x48<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A50 (retsize: 8;)
	goto l000000000042F6D8
	// succ:  l000000000042F6D8
l000000000042FCF3:
	Mem0[rsp + 0x45<64>:byte] = r15b
	goto l000000000042F52D
	// succ:  l000000000042F52D
l000000000042FD00:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042FC80
	// succ:  l000000000042FD1C l000000000042FC80
l000000000042FD1C:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l000000000042FC0D
	// succ:  l000000000042FD2A l000000000042FC0D
l000000000042FD2A:
	// succ:  l000000000042FD30
l000000000042FD30:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042FC10
	// succ:  l000000000042FD3F l000000000042FC10
l000000000042FD3F:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l000000000042FC80
	// succ:  l000000000042FC80
l000000000042FD50:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042F891
	// succ:  l000000000042FD5F l000000000042F891
l000000000042FD5F:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	ebx = CONVERT(al, byte, int32)
	goto l000000000042F5C0
	// succ:  l000000000042F5C0
l000000000042FD70:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000042F9F1
	// succ:  l000000000042FD7F l000000000042F9F1
l000000000042FD7F:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042F8FD
	// succ:  l000000000042F8FD
l000000000042FD8F:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x47<64>:byte] = 0<8>
	goto l000000000042F51F
	// succ:  l000000000042F51F
l000000000042FD9B:
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x20<64>:byte] = dl
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	edx = CONVERT(Mem0[rsp + 0x20<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l000000000042FCA9
	// succ:  l000000000042FDB3 l000000000042FCA9
l000000000042FDB3:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042FC2D
	// succ:  l000000000042FC2D
l000000000042FDC6:
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	goto l000000000042FB7F
	// succ:  l000000000042FB7F
l000000000042FDCD:
	Mem0[rsp + 0x45<64>:byte] = 1<8>
	goto l000000000042F538
	// succ:  l000000000042F538
l000000000042FDD7:
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042F5C0
	// succ:  l000000000042F5C0
l000000000042FDE1:
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042F65D
	// succ:  l000000000042F65D
l000000000042FDEB:
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042F8FD
	// succ:  l000000000042F8FD
l000000000042FDF5:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	esi = 8<32>
	rsi = CONVERT(esi, word32, uint64)
	goto l000000000042FBD3
	// succ:  l000000000042FBD3
fn000000000042F430_exit:


// fn000000000042FE30
// Return size: 8
define fn000000000042FE30
fn000000000042FE30_entry:
	rsp = fp
	// succ:  l000000000042FE30
l000000000042FE30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x98<64>
	SCZO = cond(rsp)
	rdx = Mem0[r8 + 8<64>:word64]
	rax = Mem0[r8:word64]
	esi = 8<32>
	rsi = CONVERT(esi, word32, uint64)
	rbx = Mem0[rsp + 0x100<64>:word64]
	Mem0[rsp + 0xE0<64>:word64] = rcx
	rcx = rsp + 0x7E<64>
	Mem0[rsp + 0x68<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0x60<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0x58<64>:word64] = rdx
	rdx = rbx + 0xD0<64>
	Mem0[rsp + 0x50<64>:word64] = rax
	call fn000000000042A360 (retsize: 8;)
	edi = Mem0[rbx + 0x18<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	rbp = rax
	edi = edi & 0x4A<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SCZO = cond(edi - 0x40<32>)
	branch Test(EQ,Z) l000000000042FEA7
	// succ:  l000000000042FE99 l000000000042FEA7
l000000000042FE99:
	SCZO = cond(edi - 8<32>)
	eax = 0xA<32>
	rax = CONVERT(eax, word32, uint64)
	sil = 0x10<8>
	branch Test(EQ,Z) l000000000042FEA7
	// succ:  l000000000042FEA4_1 l000000000042FEA7
l000000000042FEA4_1:
	esi = eax
	// succ:  l000000000042FEA7
l000000000042FEA7:
	r13 = rsp + 0x50<64>
	r12 = rsp + 0x60<64>
	rdx = r13
	rcx = r12
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	r14d = eax
	r14 = CONVERT(r14d, word32, uint64)
	branch Test(NE,Z) l000000000043075F
	// succ:  l000000000042FEC7 l000000000043075F
l000000000042FEC7:
	rcx = r12
	call fn000000000042B050 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x6E<64>:byte] - al)
	ebx = CONVERT(al, byte, int32)
	Mem0[rsp + 0x47<64>:byte] = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(NE,Z) l0000000000430490
	// succ:  l000000000042FEE0 l0000000000430490
l000000000042FEE0:
	edx = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l00000000004304A2
	// succ:  l000000000042FEEC l00000000004304A2
l000000000042FEEC:
	SCZO = cond(Mem0[rbp + 0x48<64>:byte] - al)
	branch Test(EQ,Z) l0000000000430796
	// succ:  l000000000042FEF5 l0000000000430796
l000000000042FEF5:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000042FF0C
	// succ:  l000000000042FEFF l000000000042FF0C
l000000000042FEFF:
	call fn0000000000462490 (retsize: 8;)
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l000000000042FF0C
l000000000042FF0C:
	rdx = r13
	rcx = r12
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000430540
	// succ:  l000000000042FF1F l0000000000430540
l000000000042FF1F:
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	Mem0[rsp + 0x45<64>:byte] = 0<8>
	// succ:  l000000000042FF2D
l000000000042FF2D:
	SCZO = cond(esi - 0x10<32>)
	r12d = 0x16<32>
	r12 = CONVERT(r12d, word32, uint64)
	branch Test(EQ,Z) l000000000042FF3B
	// succ:  l000000000042FF38 l000000000042FF3B
l000000000042FF38:
	r12 = CONVERT(esi, word32, int64)
	// succ:  l000000000042FF3B
l000000000042FF3B:
	rax = rsp + 0x7F<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x48<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x20<64>:byte] - 0<8>)
	Mem0[rsp + 0x80<64>:word64] = rax
	branch Test(NE,Z) l0000000000430524
	// succ:  l000000000042FF63 l0000000000430524
l000000000042FF63:
	rax = CONVERT(esi, word32, int64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r15 = rbp + 0x72<64>
	rdi = rax
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = 0xFFFFFFFFFFFFFFFF<64>
	v36 = rdx_rax
	rdx = CONVERT(v36 % rdi, word128, uint64)
	rax = CONVERT(v36 /u rdi, word64, uint64)
	SCZO = cond(rax)
	Mem0[rsp + 0x28<64>:word64] = rax
	eax = CONVERT(Mem0[rbp + 0x88<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	Mem0[rsp + 0x46<64>:byte] = al
	branch Test(NE,Z) l0000000000430170
	// succ:  l000000000042FF96 l0000000000430170
l000000000042FF96:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(r14b & r14b)
	C = false
	branch Test(NE,Z) l0000000000430180
	// succ:  l000000000042FFA3 l0000000000430180
l000000000042FFA3:
	r15d = SLICE(r12 + 0x30<64>, word32, 0)
	r15 = CONVERT(r15d, word32, uint64)
	// succ:  l000000000042FFA8
l000000000042FFA8:
	SCZO = cond(r12 - 0xA<64>)
	branch Test(UGT,CZ) l0000000000430190
	// succ:  l000000000042FFB2 l0000000000430190
l000000000042FFB2:
	SCZO = cond(bl - 0x2F<8>)
	branch Test(LE,SZO) l0000000000430180
	// succ:  l000000000042FFBB l0000000000430180
l000000000042FFBB:
	SCZO = cond(r15b - bl)
	branch Test(LE,SZO) l0000000000430180
	// succ:  l000000000042FFC4 l0000000000430180
l000000000042FFC4:
	ebx = ebx - 0x30<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	// succ:  l000000000042FFC7
l000000000042FFC7:
	SCZO = cond(Mem0[rsp + 0x28<64>:word64] - rsi)
	branch Test(UGE,C) l00000000004301BB
	// succ:  l000000000042FFD2 l00000000004301BB
l000000000042FFD2:
	rcx = Mem0[rsp + 0x60<64>:word64]
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004301E7
	// succ:  l000000000042FFE5 l00000000004301E7
l000000000042FFE5:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000430270
	// succ:  l000000000042FFF3 l0000000000430270
l000000000042FFF3:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004302A0
	// succ:  l0000000000430011 l00000000004302A0
l0000000000430011:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000430014
l0000000000430014:
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000430226
	// succ:  l0000000000430026 l0000000000430226
l0000000000430026:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000430207
	// succ:  l0000000000430035 l0000000000430207
l0000000000430035:
	SCZO = cond(al - bl)
	branch Test(NE,Z) l0000000000430226
	// succ:  l000000000043003D l0000000000430226
l000000000043003D:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	// succ:  l0000000000430045
l0000000000430045:
	rax = Mem0[rsp + 0x80<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(NE,Z) l00000000004300E0
	// succ:  l0000000000430058 l00000000004300E0
l0000000000430058:
	SZO = cond(r13d & r13d)
	C = false
	dl = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(Mem0[rsp + 0x45<64>:byte] - dl)
	branch Test(UGE,C) l0000000000430135
	// succ:  l0000000000430068 l0000000000430135
l0000000000430068:
	rdi = Mem0[rsp + 0x110<64>:word64]
	Mem0[rdi:word64] = 0<64>
	rdi = Mem0[rsp + 0x108<64>:word64]
	Mem0[rdi:word32] = 4<32>
	// succ:  l0000000000430085
l0000000000430085:
	SZO = cond(r14b & r14b)
	C = false
	branch Test(EQ,Z) l0000000000430095
	// succ:  l000000000043008A l0000000000430095
l000000000043008A:
	rdi = Mem0[rsp + 0x108<64>:word64]
	v39 = Mem0[rdi:word32] | 2<32>
	Mem0[rdi:word32] = v39
	SZO = cond(Mem0[rdi:word32])
	C = false
	// succ:  l0000000000430095
l0000000000430095:
	rdi = Mem0[rsp + 0xE0<64>:word64]
	rcx = Mem0[rsp + 0x60<64>:word64]
	edx = 0xFFFFFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rbx = Mem0[rsp + 0x68<64>:word64]
	Mem0[rdi:word64] = rcx
	Mem0[rdi + 8<64>:word64] = rbx
	__lock()
	Mem0[rax - 8<64>:word32] = __xadd(Mem0[rax - 8<64>:word32], edx)
	SCZO = cond(Mem0[rax - 8<64>:word32])
	SZO = cond(edx & edx)
	C = false
	branch Test(LE,SZO) l00000000004306B0
	// succ:  l00000000004300C0 l00000000004306B0
l00000000004300C0:
	rax = Mem0[rsp + 0xE0<64>:word64]
	rsp = rsp + 0x98<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000042FE30_exit
l00000000004300E0:
	r12 = rsp + 0x80<64>
	edx = CONVERT(r13b, byte, int32)
	rcx = r12
	call fn0000000000451E10 (retsize: 8;)
	rdx = Mem0[rbp + 0x18<64>:word64]
	rcx = Mem0[rbp + 0x10<64>:word64]
	r8 = r12
	call fn00000000004708F0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000430116
	// succ:  l0000000000430108 l0000000000430116
l0000000000430108:
	rax = Mem0[rsp + 0x108<64>:word64]
	Mem0[rax:word32] = 4<32>
	// succ:  l0000000000430116
l0000000000430116:
	SZO = cond(r13d & r13d)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(Mem0[rsp + 0x45<64>:byte] - al)
	rax = Mem0[rsp + 0x80<64>:word64]
	branch Test(UGE,C) l0000000000430135
	// succ:  l000000000043012A l0000000000430135
l000000000043012A:
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000430068
	// succ:  l0000000000430135 l0000000000430068
l0000000000430135:
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l0000000000430068
	// succ:  l000000000043013D l0000000000430068
l000000000043013D:
	SZO = cond(dil & dil)
	C = false
	branch Test(EQ,Z) l00000000004304B5
	// succ:  l0000000000430146 l00000000004304B5
l0000000000430146:
	rdi = Mem0[rsp + 0x110<64>:word64]
	Mem0[rdi:word64] = 0xFFFFFFFFFFFFFFFF<64>
	rdi = Mem0[rsp + 0x108<64>:word64]
	Mem0[rdi:word32] = 4<32>
	goto l0000000000430085
	// succ:  l0000000000430085
l0000000000430170:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(r14b & r14b)
	C = false
	branch Test(EQ,Z) l00000000004302C0
	// succ:  l000000000043017D l00000000004302C0
l000000000043017D:
	// succ:  l0000000000430180
l0000000000430180:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l0000000000430045
	// succ:  l0000000000430045
l0000000000430190:
	eax = SLICE(rbx - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 9<8>)
	branch Test(ULE,CZ) l000000000042FFC4
	// succ:  l000000000043019B l000000000042FFC4
l000000000043019B:
	eax = SLICE(rbx - 0x61<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(ULE,CZ) l0000000000430245
	// succ:  l00000000004301A6 l0000000000430245
l00000000004301A6:
	eax = SLICE(rbx - 0x41<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 5<8>)
	branch Test(UGT,CZ) l0000000000430180
	// succ:  l00000000004301AD l0000000000430180
l00000000004301AD:
	ebx = ebx - 0x37<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	SCZO = cond(Mem0[rsp + 0x28<64>:word64] - rsi)
	branch Test(ULT,C) l000000000042FFD2
	// succ:  l00000000004301BB l000000000042FFD2
l00000000004301BB:
	rsi = rsi *s Mem0[rsp + 0x30<64>:word64]
	SCZO = cond(rsi)
	rbx = CONVERT(ebx, word32, int64)
	rcx = Mem0[rsp + 0x60<64>:word64]
	rax = rbx
	rax = ~rax
	SCZO = cond(rax - rsi)
	al = CONVERT(Test(ULT,C), bool, int8)
	rsi = rsi + rbx
	SCZO = cond(rsi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	edi = edi | eax
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000042FFE5
	// succ:  l00000000004301E7 l000000000042FFE5
l00000000004301E7:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043003D
	// succ:  l00000000004301F5 l000000000043003D
l00000000004301F5:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word32] - 0xFFFFFFFF<32>)
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l0000000000430035
	// succ:  l0000000000430207 l0000000000430035
l0000000000430207:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004304E0
	// succ:  l0000000000430215 l00000000004304E0
l0000000000430215:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000430218
l0000000000430218:
	Mem0[rsp + 0x58<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l000000000043003D
	// succ:  l0000000000430226 l000000000043003D
l0000000000430226:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004307A7
	// succ:  l0000000000430234 l00000000004307A7
l0000000000430234:
	eax = Mem0[rsp + 0x68<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000430250
	// succ:  l000000000043023D l0000000000430250
l000000000043023D:
	ebx = CONVERT(al, byte, int32)
	goto l000000000042FFA8
	// succ:  l000000000042FFA8
l0000000000430245:
	ebx = ebx - 0x57<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	goto l000000000042FFC7
	// succ:  l000000000042FFC7
l0000000000430250:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000430720
	// succ:  l000000000043025E l0000000000430720
l000000000043025E:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000430261
l0000000000430261:
	Mem0[rsp + 0x68<64>:word32] = eax
	goto l000000000043023D
	// succ:  l000000000043023D
l0000000000430270:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004301E7
	// succ:  l000000000043028C l00000000004301E7
l000000000043028C:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l0000000000430011
	// succ:  l000000000043029A l0000000000430011
l000000000043029A:
	// succ:  l00000000004302A0
l00000000004302A0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000430014
	// succ:  l00000000004302AF l0000000000430014
l00000000004302AF:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l00000000004301E7
	// succ:  l00000000004301E7
l00000000004302C0:
	rax = rsp + 0x80<64>
	Mem0[rsp + 0x38<64>:word64] = rax
	// succ:  l00000000004302CD
l00000000004302CD:
	SCZO = cond(Mem0[rbp + 0x20<64>:byte] - 0<8>)
	branch Test(EQ,Z) l00000000004302DC
	// succ:  l00000000004302D3 l00000000004302DC
l00000000004302D3:
	SCZO = cond(bl - Mem0[rbp + 0x49<64>:byte])
	branch Test(EQ,Z) l0000000000430420
	// succ:  l00000000004302DC l0000000000430420
l00000000004302DC:
	SCZO = cond(bl - Mem0[rbp + 0x48<64>:byte])
	branch Test(EQ,Z) l0000000000430180
	// succ:  l00000000004302E5 l0000000000430180
l00000000004302E5:
	edx = CONVERT(bl, byte, int32)
	r8 = r12
	rcx = r15
	rax = memchr(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000430180
	// succ:  l00000000004302FC l0000000000430180
l00000000004302FC:
	rax = rax - r15
	SCZO = cond(rax)
	edx = SLICE(rax - 6<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(eax - 0x10<32>)
	branch Test(LT,SO) l0000000000430308
	// succ:  l0000000000430305_1 l0000000000430308
l0000000000430305_1:
	eax = edx
	// succ:  l0000000000430308
l0000000000430308:
	SCZO = cond(Mem0[rsp + 0x28<64>:word64] - rsi)
	branch Test(ULT,C) l00000000004303D0
	// succ:  l0000000000430313 l00000000004303D0
l0000000000430313:
	rsi = rsi *s Mem0[rsp + 0x30<64>:word64]
	SCZO = cond(rsi)
	rax = CONVERT(eax, int32, int64)
	rdx = rax
	rdx = ~rdx
	SCZO = cond(rdx - rsi)
	dl = CONVERT(Test(ULT,C), bool, int8)
	rsi = rsi + rax
	SCZO = cond(rsi)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	edi = edi | edx
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	// succ:  l0000000000430330
l0000000000430330:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004303E3
	// succ:  l000000000043033E l00000000004303E3
l000000000043033E:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000430440
	// succ:  l000000000043034C l0000000000430440
l000000000043034C:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000430470
	// succ:  l000000000043036A l0000000000430470
l000000000043036A:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043036D
l000000000043036D:
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043038E
	// succ:  l000000000043037B l000000000043038E
l000000000043037B:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l00000000004303FF
	// succ:  l0000000000430386 l00000000004303FF
l0000000000430386:
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l000000000043003D
	// succ:  l000000000043038E l000000000043003D
l000000000043038E:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004307BB
	// succ:  l000000000043039C l00000000004307BB
l000000000043039C:
	eax = Mem0[rsp + 0x68<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l00000000004303B0
	// succ:  l00000000004303A5 l00000000004303B0
l00000000004303A5:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l00000000004302CD
	// succ:  l00000000004302CD
l00000000004303B0:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000430740
	// succ:  l00000000004303BE l0000000000430740
l00000000004303BE:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004303C1
l00000000004303C1:
	Mem0[rsp + 0x68<64>:word32] = eax
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l00000000004302CD
	// succ:  l00000000004302CD
l00000000004303D0:
	rcx = Mem0[rsp + 0x60<64>:word64]
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000043033E
	// succ:  l00000000004303E3 l000000000043033E
l00000000004303E3:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000043003D
	// succ:  l00000000004303F1 l000000000043003D
l00000000004303F1:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word32] - 0xFFFFFFFF<32>)
	ebx = CONVERT(Mem0[rsp + 0x46<64>:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l0000000000430386
	// succ:  l00000000004303FF l0000000000430386
l00000000004303FF:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000430502
	// succ:  l000000000043040D l0000000000430502
l000000000043040D:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000430410
l0000000000430410:
	Mem0[rsp + 0x58<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000430386
	// succ:  l0000000000430386
l0000000000430420:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l00000000004307B1
	// succ:  l0000000000430429 l00000000004307B1
l0000000000430429:
	rcx = Mem0[rsp + 0x38<64>:word64]
	edx = CONVERT(r13b, byte, int32)
	call fn0000000000451E10 (retsize: 8;)
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	goto l0000000000430330
	// succ:  l0000000000430330
l0000000000430440:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004303E3
	// succ:  l0000000000430458 l00000000004303E3
l0000000000430458:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l000000000043036A
	// succ:  l0000000000430466 l000000000043036A
l0000000000430466:
	// succ:  l0000000000430470
l0000000000430470:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000043036D
	// succ:  l000000000043047F l000000000043036D
l000000000043047F:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l00000000004303E3
	// succ:  l00000000004303E3
l0000000000430490:
	SCZO = cond(Mem0[rbp + 0x6F<64>:byte] - al)
	branch Test(EQ,Z) l000000000042FEE0
	// succ:  l0000000000430499 l000000000042FEE0
l0000000000430499:
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043054F
	// succ:  l000000000043054F
l00000000004304A2:
	SCZO = cond(Mem0[rbp + 0x49<64>:byte] - al)
	branch Test(NE,Z) l000000000042FEEC
	// succ:  l00000000004304AB l000000000042FEEC
l00000000004304AB:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043054F
	// succ:  l000000000043054F
l00000000004304B5:
	edx = CONVERT(Mem0[rsp + 0x47<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rdi = Mem0[rsp + 0x110<64>:word64]
	rcx = rdx
	rcx = -rcx
	SCZO = cond(rcx)
	C = rcx == 0<64>
	rsi = rsi ^ rcx
	SZO = cond(rsi)
	C = false
	rdx = rdx + rsi
	SCZO = cond(rdx)
	Mem0[rdi:word64] = rdx
	goto l0000000000430085
	// succ:  l0000000000430085
l00000000004304E0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000430218
	// succ:  l00000000004304EF l0000000000430218
l00000000004304EF:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000430035
	// succ:  l0000000000430035
l0000000000430502:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000430410
	// succ:  l0000000000430511 l0000000000430410
l0000000000430511:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	eax = CONVERT(Mem0[rsp + 0x46<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000430386
	// succ:  l0000000000430386
l0000000000430524:
	rcx = rsp + 0x80<64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000451BE0 (retsize: 8;)
	goto l000000000042FF63
	// succ:  l000000000042FF63
l0000000000430540:
	rcx = r12
	call fn000000000042B050 (retsize: 8;)
	ebx = CONVERT(al, byte, int32)
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043054F
l000000000043054F:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	// succ:  l0000000000430555
l0000000000430555:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000430562
	// succ:  l0000000000430559 l0000000000430562
l0000000000430559:
	SCZO = cond(Mem0[rbp + 0x49<64>:byte] - bl)
	branch Test(EQ,Z) l00000000004306C3
	// succ:  l0000000000430562 l00000000004306C3
l0000000000430562:
	SCZO = cond(Mem0[rbp + 0x48<64>:byte] - bl)
	branch Test(EQ,Z) l00000000004306C3
	// succ:  l000000000043056B l00000000004306C3
l000000000043056B:
	SCZO = cond(Mem0[rbp + 0x72<64>:byte] - bl)
	branch Test(EQ,Z) l0000000000430615
	// succ:  l0000000000430574 l0000000000430615
l0000000000430574:
	SZO = cond(r15b & r15b)
	C = false
	branch Test(EQ,Z) l00000000004306C3
	// succ:  l000000000043057D l00000000004306C3
l000000000043057D:
	SCZO = cond(Mem0[rbp + 0x70<64>:byte] - bl)
	branch Test(EQ,Z) l000000000043058B
	// succ:  l0000000000430582 l000000000043058B
l0000000000430582:
	SCZO = cond(Mem0[rbp + 0x71<64>:byte] - bl)
	branch Test(NE,Z) l00000000004306A0
	// succ:  l000000000043058B l00000000004306A0
l000000000043058B:
	SCZO = cond(esi - 0x10<32>)
	branch Test(EQ,Z) l0000000000430598
	// succ:  l0000000000430590 l0000000000430598
l0000000000430590:
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l000000000043079D
	// succ:  l0000000000430598 l000000000043079D
l0000000000430598:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	esi = 0x10<32>
	rsi = CONVERT(esi, word32, uint64)
	// succ:  l00000000004305A3
l00000000004305A3:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000430650
	// succ:  l00000000004305B1 l0000000000430650
l00000000004305B1:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004306D0
	// succ:  l00000000004305BF l00000000004306D0
l00000000004305BF:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rdx
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000430700
	// succ:  l00000000004305DD l0000000000430700
l00000000004305DD:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004305E0
l00000000004305E0:
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000430687
	// succ:  l00000000004305F2 l0000000000430687
l00000000004305F2:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000430668
	// succ:  l00000000004305FD l0000000000430668
l00000000004305FD:
	SCZO = cond(dl - al)
	branch Test(NE,Z) l0000000000430687
	// succ:  l0000000000430605 l0000000000430687
l0000000000430605:
	Mem0[rsp + 0x45<64>:byte] = r15b
	r14d = 1<32>
	r14 = CONVERT(r14d, word32, uint64)
	goto l000000000042FF2D
	// succ:  l000000000042FF2D
l0000000000430615:
	SCZO = cond(esi - 0xA<32>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - r15b)
	branch Test(ULT,C) l000000000043057D
	// succ:  l0000000000430624 l000000000043057D
l0000000000430624:
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	SCZO = cond(esi - 8<32>)
	branch Test(EQ,Z) l00000000004307C5
	// succ:  l0000000000430631 l00000000004307C5
l0000000000430631:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l00000000004307C5
	// succ:  l0000000000430639 l00000000004307C5
l0000000000430639:
	rcx = Mem0[rsp + 0x60<64>:word64]
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l00000000004305B1
	// succ:  l000000000043064D l00000000004305B1
l000000000043064D:
	// succ:  l0000000000430650
l0000000000430650:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000430605
	// succ:  l000000000043065A l0000000000430605
l000000000043065A:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word32] - 0xFFFFFFFF<32>)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l00000000004305FD
	// succ:  l0000000000430668 l00000000004305FD
l0000000000430668:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l000000000043076B
	// succ:  l0000000000430676 l000000000043076B
l0000000000430676:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000430679
l0000000000430679:
	Mem0[rsp + 0x58<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(dl - al)
	branch Test(EQ,Z) l0000000000430605
	// succ:  l0000000000430687 l0000000000430605
l0000000000430687:
	rcx = r12
	call fn000000000042B050 (retsize: 8;)
	SZO = cond(r15b & r15b)
	C = false
	ebx = CONVERT(al, byte, int32)
	branch Test(EQ,Z) l00000000004306C3
	// succ:  l0000000000430697 l00000000004306C3
l0000000000430697:
	eax = CONVERT(Mem0[rbp + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000430555
	// succ:  l0000000000430555
l00000000004306A0:
	Mem0[rsp + 0x45<64>:byte] = 1<8>
	goto l000000000042FF2D
	// succ:  l000000000042FF2D
l00000000004306B0:
	rdx = Mem0[rsp + 0x48<64>:word64]
	rcx = rax - 0x18<64>
	call fn0000000000450A50 (retsize: 8;)
	goto l00000000004300C0
	// succ:  l00000000004300C0
l00000000004306C3:
	Mem0[rsp + 0x45<64>:byte] = r15b
	goto l000000000042FF2D
	// succ:  l000000000042FF2D
l00000000004306D0:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000430650
	// succ:  l00000000004306EC l0000000000430650
l00000000004306EC:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l00000000004305DD
	// succ:  l00000000004306FA l00000000004305DD
l00000000004306FA:
	// succ:  l0000000000430700
l0000000000430700:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l00000000004305E0
	// succ:  l000000000043070F l00000000004305E0
l000000000043070F:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l0000000000430650
	// succ:  l0000000000430650
l0000000000430720:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000430261
	// succ:  l000000000043072F l0000000000430261
l000000000043072F:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	ebx = CONVERT(al, byte, int32)
	goto l000000000042FFA8
	// succ:  l000000000042FFA8
l0000000000430740:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l00000000004303C1
	// succ:  l000000000043074F l00000000004303C1
l000000000043074F:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l00000000004302CD
	// succ:  l00000000004302CD
l000000000043075F:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0x47<64>:byte] = 0<8>
	goto l000000000042FF1F
	// succ:  l000000000042FF1F
l000000000043076B:
	rax = Mem0[rcx:word64]
	Mem0[rsp + 0x28<64>:byte] = dl
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	edx = CONVERT(Mem0[rsp + 0x28<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l0000000000430679
	// succ:  l0000000000430783 l0000000000430679
l0000000000430783:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000004305FD
	// succ:  l00000000004305FD
l0000000000430796:
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043054F
	// succ:  l000000000043054F
l000000000043079D:
	Mem0[rsp + 0x45<64>:byte] = 1<8>
	goto l000000000042FF38
	// succ:  l000000000042FF38
l00000000004307A7:
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000042FFA8
	// succ:  l000000000042FFA8
l00000000004307B1:
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000430045
	// succ:  l0000000000430045
l00000000004307BB:
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l00000000004302CD
	// succ:  l00000000004302CD
l00000000004307C5:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	esi = 8<32>
	rsi = CONVERT(esi, word32, uint64)
	goto l00000000004305A3
	// succ:  l00000000004305A3
fn000000000042FE30_exit:


// fn0000000000430800
// Return size: 8
define fn0000000000430800
fn0000000000430800_entry:
	rsp = fp
	// succ:  l0000000000430800
l0000000000430800:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x98<64>
	SCZO = cond(rsp)
	rax = Mem0[r8:word64]
	rdx = Mem0[r8 + 8<64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	Mem0[rsp + 0xE0<64>:word64] = rcx
	rcx = rsp + 0x7E<64>
	rdi = Mem0[rsp + 0x110<64>:word64]
	r14 = rsp + 0x60<64>
	Mem0[rsp + 0x60<64>:word64] = rax
	rax = Mem0[r9:word64]
	Mem0[rsp + 0x68<64>:word64] = rdx
	rdx = Mem0[r9 + 8<64>:word64]
	Mem0[rsp + 0x50<64>:word64] = rax
	rax = Mem0[rsp + 0x100<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = rdx
	rdx = rax + 0xD0<64>
	call fn000000000042A360 (retsize: 8;)
	rsi = rax
	rax = rsp + 0x50<64>
	rcx = r14
	rdx = rax
	Mem0[rsp + 0x40<64>:word64] = rax
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	r15d = eax
	r15 = CONVERT(r15d, word32, uint64)
	branch Test(EQ,Z) l0000000000431040
	// succ:  l0000000000430888 l0000000000431040
l0000000000430888:
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	// succ:  l0000000000430893
l0000000000430893:
	rax = rsp + 0x7F<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	r8 = rax
	Mem0[rsp + 0x48<64>:word64] = rax
	call fn00000000004505D0 (retsize: 8;)
	SCZO = cond(Mem0[rsi + 0x20<64>:byte] - 0<8>)
	Mem0[rsp + 0x80<64>:word64] = rax
	branch Test(NE,Z) l0000000000431022
	// succ:  l00000000004308BB l0000000000431022
l00000000004308BB:
	eax = CONVERT(Mem0[rsi + 0x88<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	Mem0[rsp + 0x3F<64>:byte] = al
	branch Test(NE,Z) l0000000000430C90
	// succ:  l00000000004308CE l0000000000430C90
l00000000004308CE:
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l0000000000431140
	// succ:  l00000000004308D7 l0000000000431140
l00000000004308D7:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	// succ:  l00000000004308DA
l00000000004308DA:
	eax = SLICE(rbx - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 9<8>)
	branch Test(UGT,CZ) l0000000000430A20
	// succ:  l00000000004308E5 l0000000000430A20
l00000000004308E5:
	rax = Mem0[rdi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	r12 = rdx + 1<64>
	SCZO = cond(r12 - Mem0[rax - 0x10<64>:word64])
	branch Test(UGT,CZ) l00000000004308FF
	// succ:  l00000000004308F6 l00000000004308FF
l00000000004308F6:
	r9d = Mem0[rax - 8<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(LE,SZO) l0000000000430911
	// succ:  l00000000004308FF l0000000000430911
l00000000004308FF:
	rdx = r12
	rcx = rdi
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rdi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	// succ:  l0000000000430911
l0000000000430911:
	Mem0[rax + rdx:byte] = bl
	rax = Mem0[rdi:word64]
	Mem0[rax - 0x18<64>:word64] = r12
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax:byte] = 0<8>
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	// succ:  l000000000043092D
l000000000043092D:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000430B40
	// succ:  l000000000043093B l0000000000430B40
l000000000043093B:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000430C10
	// succ:  l0000000000430949 l0000000000430C10
l0000000000430949:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000430C40
	// succ:  l0000000000430967 l0000000000430C40
l0000000000430967:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000043096A
l000000000043096A:
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000430B7F
	// succ:  l000000000043097C l0000000000430B7F
l000000000043097C:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000430B60
	// succ:  l000000000043098B l0000000000430B60
l000000000043098B:
	SCZO = cond(al - bl)
	branch Test(NE,Z) l0000000000430B7F
	// succ:  l0000000000430993 l0000000000430B7F
l0000000000430993:
	rbx = Mem0[rsp + 0x80<64>:word64]
	SCZO = cond(Mem0[rbx - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l00000000004309DB
	// succ:  l00000000004309A2 l00000000004309DB
l00000000004309A2:
	eax = r13d
	rax = CONVERT(eax, word32, uint64)
	r13 = rsp + 0x80<64>
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r15b - al)
	branch Test(ULT,C) l0000000000431153
	// succ:  l00000000004309B9 l0000000000431153
l00000000004309B9:
	rdx = Mem0[rsi + 0x18<64>:word64]
	rcx = Mem0[rsi + 0x10<64>:word64]
	r8 = r13
	call fn00000000004708F0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004309DB
	// succ:  l00000000004309CD l00000000004309DB
l00000000004309CD:
	rax = Mem0[rsp + 0x108<64>:word64]
	Mem0[rax:word32] = 4<32>
	// succ:  l00000000004309DB
l00000000004309DB:
	rdx = Mem0[rsp + 0x68<64>:word64]
	rdi = Mem0[rsp + 0xE0<64>:word64]
	rcx = rbx - 0x18<64>
	rax = Mem0[rsp + 0x60<64>:word64]
	Mem0[rdi + 8<64>:word64] = rdx
	rdx = Mem0[rsp + 0x48<64>:word64]
	Mem0[rdi:word64] = rax
	call fn0000000000450A60 (retsize: 8;)
	rax = Mem0[rsp + 0xE0<64>:word64]
	rsp = rsp + 0x98<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000430800_exit
l0000000000430A20:
	SCZO = cond(Mem0[rsi + 0x48<64>:byte] - bl)
	branch Test(EQ,Z) l0000000000430BE0
	// succ:  l0000000000430A29 l0000000000430BE0
l0000000000430A29:
	SCZO = cond(Mem0[rsi + 0x80<64>:byte] - bl)
	branch Test(EQ,Z) l0000000000430A3D
	// succ:  l0000000000430A31 l0000000000430A3D
l0000000000430A31:
	SCZO = cond(Mem0[rsi + 0x86<64>:byte] - bl)
	branch Test(NE,Z) l0000000000430993
	// succ:  l0000000000430A3D l0000000000430993
l0000000000430A3D:
	SCZO = cond(r13b - r12b)
	branch Test(UGE,C) l0000000000430993
	// succ:  l0000000000430A46 l0000000000430993
l0000000000430A46:
	rax = Mem0[rdi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	rbx = rdx + 1<64>
	SCZO = cond(rbx - Mem0[rax - 0x10<64>:word64])
	branch Test(UGT,CZ) l0000000000430A60
	// succ:  l0000000000430A57 l0000000000430A60
l0000000000430A57:
	r8d = Mem0[rax - 8<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d & r8d)
	C = false
	branch Test(LE,SZO) l0000000000430A72
	// succ:  l0000000000430A60 l0000000000430A72
l0000000000430A60:
	rdx = rbx
	rcx = rdi
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rdi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	// succ:  l0000000000430A72
l0000000000430A72:
	Mem0[rax + rdx:byte] = 0x65<8>
	rax = Mem0[rdi:word64]
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax - 0x18<64>:word64] = rbx
	Mem0[rax + rbx:byte] = 0<8>
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000430C78
	// succ:  l0000000000430A96 l0000000000430C78
l0000000000430A96:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000430FB0
	// succ:  l0000000000430AA4 l0000000000430FB0
l0000000000430AA4:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l0000000000430AB4
l0000000000430AB4:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000430C60
	// succ:  l0000000000430AC2 l0000000000430C60
l0000000000430AC2:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000430AC5
l0000000000430AC5:
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000430AEA
	// succ:  l0000000000430AD3 l0000000000430AEA
l0000000000430AD3:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	// succ:  l0000000000430AD5
l0000000000430AD5:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000430BC0
	// succ:  l0000000000430AE2 l0000000000430BC0
l0000000000430AE2:
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l0000000000431120
	// succ:  l0000000000430AEA l0000000000431120
l0000000000430AEA:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000431346
	// succ:  l0000000000430AF8 l0000000000431346
l0000000000430AF8:
	eax = Mem0[rsp + 0x68<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000430B90
	// succ:  l0000000000430B05 l0000000000430B90
l0000000000430B05:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000430B07
l0000000000430B07:
	SCZO = cond(bl - Mem0[rsi + 0x6F<64>:byte])
	branch Test(EQ,Z) l0000000000430BB0
	// succ:  l0000000000430B10 l0000000000430BB0
l0000000000430B10:
	SCZO = cond(bl - Mem0[rsi + 0x6E<64>:byte])
	r13d = 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	edx = 0x2D<32>
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l00000000004308DA
	// succ:  l0000000000430B24 l00000000004308DA
l0000000000430B24:
	rcx = rdi
	call fn0000000000451E10 (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	r13d = 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l000000000043093B
	// succ:  l0000000000430B40 l000000000043093B
l0000000000430B40:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000430993
	// succ:  l0000000000430B4E l0000000000430993
l0000000000430B4E:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word32] - 0xFFFFFFFF<32>)
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l000000000043098B
	// succ:  l0000000000430B60 l000000000043098B
l0000000000430B60:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000430FF3
	// succ:  l0000000000430B6E l0000000000430FF3
l0000000000430B6E:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000430B71
l0000000000430B71:
	Mem0[rsp + 0x58<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l0000000000430993
	// succ:  l0000000000430B7F l0000000000430993
l0000000000430B7F:
	rcx = r14
	call fn000000000042B050 (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l00000000004308DA
	// succ:  l00000000004308DA
l0000000000430B90:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000431322
	// succ:  l0000000000430B9E l0000000000431322
l0000000000430B9E:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000430BA1
l0000000000430BA1:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bl - Mem0[rsi + 0x6F<64>:byte])
	Mem0[rsp + 0x68<64>:word32] = eax
	branch Test(NE,Z) l0000000000430B10
	// succ:  l0000000000430BB0 l0000000000430B10
l0000000000430BB0:
	edx = 0x2B<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000430B24
	// succ:  l0000000000430B24
l0000000000430BC0:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000431300
	// succ:  l0000000000430BCE l0000000000431300
l0000000000430BCE:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000430BD1
l0000000000430BD1:
	Mem0[rsp + 0x58<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000430AE2
	// succ:  l0000000000430AE2
l0000000000430BE0:
	eax = r13d
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - r15b)
	branch Test(ULE,CZ) l0000000000430A29
	// succ:  l0000000000430BEF l0000000000430A29
l0000000000430BEF:
	edx = 0x2E<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call fn0000000000451E10 (retsize: 8;)
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l000000000043092D
	// succ:  l000000000043092D
l0000000000430C10:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000430B40
	// succ:  l0000000000430C2C l0000000000430B40
l0000000000430C2C:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l0000000000430967
	// succ:  l0000000000430C3A l0000000000430967
l0000000000430C3A:
	// succ:  l0000000000430C40
l0000000000430C40:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l000000000043096A
	// succ:  l0000000000430C4F l000000000043096A
l0000000000430C4F:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l0000000000430B40
	// succ:  l0000000000430B40
l0000000000430C60:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000430AC5
	// succ:  l0000000000430C6F l0000000000430AC5
l0000000000430C6F:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	// succ:  l0000000000430C78
l0000000000430C78:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000431120
	// succ:  l0000000000430C86 l0000000000431120
l0000000000430C86:
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000430AD5
	// succ:  l0000000000430AD5
l0000000000430C90:
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l0000000000431140
	// succ:  l0000000000430C99 l0000000000431140
l0000000000430C99:
	rax = rsi + 0x72<64>
	rdx = rsp + 0x80<64>
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	Mem0[rsp + 0x28<64>:word64] = rax
	eax = CONVERT(Mem0[rsi + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rsp + 0x30<64>:word64] = rdx
	// succ:  l0000000000430CB9
l0000000000430CB9:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000430CC6
	// succ:  l0000000000430CBD l0000000000430CC6
l0000000000430CBD:
	SCZO = cond(bl - Mem0[rsi + 0x49<64>:byte])
	branch Test(EQ,Z) l0000000000430DB9
	// succ:  l0000000000430CC6 l0000000000430DB9
l0000000000430CC6:
	SCZO = cond(bl - Mem0[rsi + 0x48<64>:byte])
	branch Test(EQ,Z) l0000000000430E30
	// succ:  l0000000000430CCF l0000000000430E30
l0000000000430CCF:
	rcx = Mem0[rsp + 0x28<64>:word64]
	edx = CONVERT(bl, byte, int32)
	r8d = 0xA<32>
	r8 = CONVERT(r8d, word32, uint64)
	rax = memchr(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000430E74
	// succ:  l0000000000430CEB l0000000000430E74
l0000000000430CEB:
	rax = rax - Mem0[rsp + 0x28<64>:word64]
	SCZO = cond(rax)
	ebx = SLICE(rax + 0x30<64>, word32, 0)
	rbx = CONVERT(ebx, word32, uint64)
	rax = Mem0[rdi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	r12 = rdx + 1<64>
	SCZO = cond(r12 - Mem0[rax - 0x10<64>:word64])
	branch Test(UGT,CZ) l0000000000430D0B
	// succ:  l0000000000430D04 l0000000000430D0B
l0000000000430D04:
	ecx = Mem0[rax - 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(LE,SZO) l0000000000430D1D
	// succ:  l0000000000430D0B l0000000000430D1D
l0000000000430D0B:
	rdx = r12
	rcx = rdi
	call fn0000000000451BE0 (retsize: 8;)
	rax = Mem0[rdi:word64]
	rdx = Mem0[rax - 0x18<64>:word64]
	// succ:  l0000000000430D1D
l0000000000430D1D:
	Mem0[rax + rdx:byte] = bl
	rax = Mem0[rdi:word64]
	ebp = ebp + 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	Mem0[rax - 0x18<64>:word64] = r12
	Mem0[rax - 8<64>:word32] = 0<32>
	Mem0[rax:byte] = 0<8>
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	// succ:  l0000000000430D3C
l0000000000430D3C:
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000430DF1
	// succ:  l0000000000430D4A l0000000000430DF1
l0000000000430D4A:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000430F60
	// succ:  l0000000000430D58 l0000000000430F60
l0000000000430D58:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rax
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000430F90
	// succ:  l0000000000430D76 l0000000000430F90
l0000000000430D76:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000430D79
l0000000000430D79:
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000430D9A
	// succ:  l0000000000430D87 l0000000000430D9A
l0000000000430D87:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l0000000000430E0D
	// succ:  l0000000000430D92 l0000000000430E0D
l0000000000430D92:
	SCZO = cond(al - bl)
	branch Test(EQ,Z) l0000000000430993
	// succ:  l0000000000430D9A l0000000000430993
l0000000000430D9A:
	rcx = r14
	call fn000000000042B050 (retsize: 8;)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	eax = CONVERT(Mem0[rsi + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000430CC6
	// succ:  l0000000000430DB0 l0000000000430CC6
l0000000000430DB0:
	SCZO = cond(bl - Mem0[rsi + 0x49<64>:byte])
	branch Test(NE,Z) l0000000000430CC6
	// succ:  l0000000000430DB9 l0000000000430CC6
l0000000000430DB9:
	eax = r13d
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - r15b)
	branch Test(ULE,CZ) l0000000000431120
	// succ:  l0000000000430DC8 l0000000000431120
l0000000000430DC8:
	SZO = cond(ebp & ebp)
	C = false
	branch Test(EQ,Z) l0000000000431350
	// succ:  l0000000000430DD0 l0000000000431350
l0000000000430DD0:
	rcx = Mem0[rsp + 0x30<64>:word64]
	edx = CONVERT(bpl, byte, int32)
	call fn0000000000451E10 (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000430D4A
	// succ:  l0000000000430DF1 l0000000000430D4A
l0000000000430DF1:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000430993
	// succ:  l0000000000430DFF l0000000000430993
l0000000000430DFF:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word32] - 0xFFFFFFFF<32>)
	ebx = CONVERT(Mem0[rsp + 0x3F<64>:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(NE,Z) l0000000000430D92
	// succ:  l0000000000430E0D l0000000000430D92
l0000000000430E0D:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000430FD1
	// succ:  l0000000000430E1B l0000000000430FD1
l0000000000430E1B:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000430E1E
l0000000000430E1E:
	Mem0[rsp + 0x58<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000430D92
	// succ:  l0000000000430D92
l0000000000430E30:
	eax = r13d
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - r15b)
	branch Test(ULE,CZ) l0000000000431120
	// succ:  l0000000000430E3F l0000000000431120
l0000000000430E3F:
	rax = Mem0[rsp + 0x80<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000430E5C
	// succ:  l0000000000430E4E l0000000000430E5C
l0000000000430E4E:
	rcx = Mem0[rsp + 0x30<64>:word64]
	edx = CONVERT(bpl, byte, int32)
	call fn0000000000451E10 (retsize: 8;)
	// succ:  l0000000000430E5C
l0000000000430E5C:
	edx = 0x2E<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call fn0000000000451E10 (retsize: 8;)
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l0000000000430D3C
	// succ:  l0000000000430D3C
l0000000000430E74:
	SCZO = cond(bl - Mem0[rsi + 0x80<64>:byte])
	branch Test(EQ,Z) l0000000000430E88
	// succ:  l0000000000430E7C l0000000000430E88
l0000000000430E7C:
	SCZO = cond(bl - Mem0[rsi + 0x86<64>:byte])
	branch Test(NE,Z) l0000000000430993
	// succ:  l0000000000430E88 l0000000000430993
l0000000000430E88:
	SCZO = cond(r13b - r12b)
	branch Test(UGE,C) l0000000000430993
	// succ:  l0000000000430E91 l0000000000430993
l0000000000430E91:
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l0000000000430EB3
	// succ:  l0000000000430E96 l0000000000430EB3
l0000000000430E96:
	rax = Mem0[rsp + 0x80<64>:word64]
	SCZO = cond(Mem0[rax - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000430EB3
	// succ:  l0000000000430EA5 l0000000000430EB3
l0000000000430EA5:
	rcx = Mem0[rsp + 0x30<64>:word64]
	edx = CONVERT(bpl, byte, int32)
	call fn0000000000451E10 (retsize: 8;)
	// succ:  l0000000000430EB3
l0000000000430EB3:
	edx = 0x65<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	call fn0000000000451E10 (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000430EE8
	// succ:  l0000000000430ECA l0000000000430EE8
l0000000000430ECA:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004312F0
	// succ:  l0000000000430ED8 l00000000004312F0
l0000000000430ED8:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x10<64>:word64] = rax
	// succ:  l0000000000430EE0
l0000000000430EE0:
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l0000000000430EE8
l0000000000430EE8:
	rdx = Mem0[rsp + 0x40<64>:word64]
	rcx = r14
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000431120
	// succ:  l0000000000430EFD l0000000000431120
l0000000000430EFD:
	rcx = r14
	call fn000000000042B050 (retsize: 8;)
	SCZO = cond(Mem0[rsi + 0x6F<64>:byte] - al)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(EQ,Z) l0000000000430F23
	// succ:  l0000000000430F0F l0000000000430F23
l0000000000430F0F:
	SCZO = cond(Mem0[rsi + 0x6E<64>:byte] - al)
	branch Test(EQ,Z) l0000000000430F23
	// succ:  l0000000000430F14 l0000000000430F23
l0000000000430F14:
	eax = CONVERT(Mem0[rsi + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	r13d = 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	goto l0000000000430CB9
	// succ:  l0000000000430CB9
l0000000000430F23:
	edx = CONVERT(Mem0[rsi + 0x20<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l0000000000430F34
	// succ:  l0000000000430F2B l0000000000430F34
l0000000000430F2B:
	SCZO = cond(Mem0[rsi + 0x49<64>:byte] - al)
	branch Test(EQ,Z) l00000000004312E2
	// succ:  l0000000000430F34 l00000000004312E2
l0000000000430F34:
	SCZO = cond(Mem0[rsi + 0x48<64>:byte] - al)
	branch Test(EQ,Z) l0000000000431015
	// succ:  l0000000000430F3D l0000000000431015
l0000000000430F3D:
	SCZO = cond(cl - 1<8>)
	rcx = rdi
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx & 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 0x2B<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	call fn0000000000451E10 (retsize: 8;)
	r13d = 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	goto l0000000000430D3C
	// succ:  l0000000000430D3C
l0000000000430F60:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000430DF1
	// succ:  l0000000000430F7C l0000000000430DF1
l0000000000430F7C:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l0000000000430D76
	// succ:  l0000000000430F8A l0000000000430D76
l0000000000430F8A:
	// succ:  l0000000000430F90
l0000000000430F90:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000430D79
	// succ:  l0000000000430F9F l0000000000430D79
l0000000000430F9F:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l0000000000430DF1
	// succ:  l0000000000430DF1
l0000000000430FB0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l0000000000430AB4
	// succ:  l0000000000430FCC l0000000000430AB4
l0000000000430FCC:
	goto l0000000000430C78
	// succ:  l0000000000430C78
l0000000000430FD1:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000430E1E
	// succ:  l0000000000430FE0 l0000000000430E1E
l0000000000430FE0:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	eax = CONVERT(Mem0[rsp + 0x3F<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000430D92
	// succ:  l0000000000430D92
l0000000000430FF3:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000430B71
	// succ:  l0000000000431002 l0000000000430B71
l0000000000431002:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000043098B
	// succ:  l000000000043098B
l0000000000431015:
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	r13d = 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	goto l0000000000430CB9
	// succ:  l0000000000430CB9
l0000000000431022:
	r13 = rsp + 0x80<64>
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = r13
	call fn0000000000451BE0 (retsize: 8;)
	goto l00000000004308BB
	// succ:  l00000000004308BB
l0000000000431040:
	rcx = r14
	call fn000000000042B050 (retsize: 8;)
	SCZO = cond(Mem0[rsi + 0x6F<64>:byte] - al)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	al = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(EQ,Z) l0000000000431174
	// succ:  l0000000000431058 l0000000000431174
l0000000000431058:
	SCZO = cond(Mem0[rsi + 0x6E<64>:byte] - bl)
	branch Test(EQ,Z) l0000000000431174
	// succ:  l0000000000431061 l0000000000431174
l0000000000431061:
	eax = CONVERT(Mem0[rsi + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000431065
l0000000000431065:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000431070
l0000000000431070:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l000000000043107D
	// succ:  l0000000000431074 l000000000043107D
l0000000000431074:
	SCZO = cond(Mem0[rsi + 0x49<64>:byte] - al)
	branch Test(EQ,Z) l00000000004312B0
	// succ:  l000000000043107D l00000000004312B0
l000000000043107D:
	SCZO = cond(Mem0[rsi + 0x48<64>:byte] - al)
	branch Test(EQ,Z) l00000000004312B0
	// succ:  l0000000000431086 l00000000004312B0
l0000000000431086:
	ebx = CONVERT(Mem0[rsi + 0x72<64>:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(bl - al)
	branch Test(NE,Z) l00000000004312B0
	// succ:  l0000000000431092 l00000000004312B0
l0000000000431092:
	SZO = cond(r12b & r12b)
	C = false
	branch Test(EQ,Z) l0000000000431220
	// succ:  l000000000043109B l0000000000431220
l000000000043109B:
	rcx = Mem0[rsp + 0x60<64>:word64]
	ebp = ebp + 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000431240
	// succ:  l00000000004310AC l0000000000431240
l00000000004310AC:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000431260
	// succ:  l00000000004310BA l0000000000431260
l00000000004310BA:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	Mem0[rcx + 0x10<64>:word64] = rdx
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l0000000000431290
	// succ:  l00000000004310D8 l0000000000431290
l00000000004310D8:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004310DB
l00000000004310DB:
	rcx = Mem0[rsp + 0x50<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = eax
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000431200
	// succ:  l00000000004310ED l0000000000431200
l00000000004310ED:
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	// succ:  l00000000004310F0
l00000000004310F0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rsp + 0x58<64>:word32] - 0xFFFFFFFF<32>)
	branch Test(EQ,Z) l00000000004311E0
	// succ:  l00000000004310FD l00000000004311E0
l00000000004310FD:
	SCZO = cond(al - r12b)
	branch Test(NE,Z) l0000000000431200
	// succ:  l0000000000431106 l0000000000431200
l0000000000431106:
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	r15d = 1<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l0000000000430893
	// succ:  l0000000000430893
l0000000000431120:
	rbx = Mem0[rsp + 0x80<64>:word64]
	r13 = rsp + 0x80<64>
	SCZO = cond(Mem0[rbx - 0x18<64>:word64] - 0<64>)
	branch Test(NE,Z) l00000000004309B9
	// succ:  l000000000043113B l00000000004309B9
l000000000043113B:
	goto l00000000004309DB
	// succ:  l00000000004309DB
l0000000000431140:
	rbx = Mem0[rsp + 0x80<64>:word64]
	SCZO = cond(Mem0[rbx - 0x18<64>:word64] - 0<64>)
	branch Test(EQ,Z) l00000000004309DB
	// succ:  l0000000000431153 l00000000004309DB
l0000000000431153:
	r13 = rsp + 0x80<64>
	edx = CONVERT(bpl, byte, int32)
	rcx = r13
	call fn0000000000451E10 (retsize: 8;)
	rbx = Mem0[rsp + 0x80<64>:word64]
	goto l00000000004309B9
	// succ:  l00000000004309B9
l0000000000431174:
	ecx = CONVERT(Mem0[rsi + 0x20<64>:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l0000000000431185
	// succ:  l000000000043117C l0000000000431185
l000000000043117C:
	SCZO = cond(Mem0[rsi + 0x49<64>:byte] - bl)
	branch Test(EQ,Z) l000000000043136C
	// succ:  l0000000000431185 l000000000043136C
l0000000000431185:
	SCZO = cond(Mem0[rsi + 0x48<64>:byte] - bl)
	branch Test(EQ,Z) l000000000043133F
	// succ:  l000000000043118E l000000000043133F
l000000000043118E:
	SCZO = cond(al - 1<8>)
	rcx = rdi
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx & 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 0x2B<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	call fn0000000000451E10 (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l00000000004311B7
	// succ:  l00000000004311AA l00000000004311B7
l00000000004311AA:
	call fn0000000000462490 (retsize: 8;)
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	// succ:  l00000000004311B7
l00000000004311B7:
	rdx = Mem0[rsp + 0x40<64>:word64]
	rcx = r14
	call fn000000000042AF60 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000430888
	// succ:  l00000000004311CC l0000000000430888
l00000000004311CC:
	rcx = r14
	call fn000000000042B050 (retsize: 8;)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	eax = CONVERT(Mem0[rsi + 0x20<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000431065
	// succ:  l0000000000431065
l00000000004311E0:
	rax = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rax - Mem0[rcx + 0x18<64>:word64])
	branch Test(UGE,C) l00000000004312C0
	// succ:  l00000000004311EE l00000000004312C0
l00000000004311EE:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l00000000004311F1
l00000000004311F1:
	Mem0[rsp + 0x58<64>:word32] = eax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - r12b)
	branch Test(EQ,Z) l0000000000431106
	// succ:  l0000000000431200 l0000000000431106
l0000000000431200:
	rcx = r14
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	call fn000000000042B050 (retsize: 8;)
	edx = CONVERT(Mem0[rsi + 0x20<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000431070
	// succ:  l0000000000431070
l0000000000431220:
	rcx = rdi
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	ebp = ebp + 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	call fn0000000000451E10 (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(NE,Z) l00000000004310AC
	// succ:  l000000000043123E l00000000004310AC
l000000000043123E:
	// succ:  l0000000000431240
l0000000000431240:
	rcx = Mem0[rsp + 0x50<64>:word64]
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000431106
	// succ:  l000000000043124E l0000000000431106
l000000000043124E:
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	goto l00000000004310F0
	// succ:  l00000000004310F0
l0000000000431260:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x50<64>:word64] (retsize: 8;)
	rcx = Mem0[rsp + 0x60<64>:word64]
	Mem0[rsp + 0x68<64>:word32] = 0xFFFFFFFF<32>
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l0000000000431240
	// succ:  l0000000000431278 l0000000000431240
l0000000000431278:
	rdx = Mem0[rcx + 0x10<64>:word64]
	SCZO = cond(rdx - Mem0[rcx + 0x18<64>:word64])
	branch Test(ULT,C) l00000000004310D8
	// succ:  l0000000000431286 l00000000004310D8
l0000000000431286:
	// succ:  l0000000000431290
l0000000000431290:
	rdx = Mem0[rcx:word64]
	call Mem0[rdx + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l00000000004310DB
	// succ:  l000000000043129F l00000000004310DB
l000000000043129F:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l0000000000431240
	// succ:  l0000000000431240
l00000000004312B0:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000430893
	// succ:  l0000000000430893
l00000000004312C0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l00000000004311F1
	// succ:  l00000000004312CF l00000000004311F1
l00000000004312CF:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l00000000004310FD
	// succ:  l00000000004310FD
l00000000004312E2:
	r13d = 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	goto l0000000000430CBD
	// succ:  l0000000000430CBD
l00000000004312F0:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x50<64>:word64] (retsize: 8;)
	goto l0000000000430EE0
	// succ:  l0000000000430EE0
l0000000000431300:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000430BD1
	// succ:  l000000000043130F l0000000000430BD1
l000000000043130F:
	Mem0[rsp + 0x50<64>:word64] = 0<64>
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000430AE2
	// succ:  l0000000000430AE2
l0000000000431322:
	rax = Mem0[rcx:word64]
	call Mem0[rax + 0x48<64>:word64] (retsize: 8;)
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	branch Test(NE,Z) l0000000000430BA1
	// succ:  l0000000000431331 l0000000000430BA1
l0000000000431331:
	Mem0[rsp + 0x60<64>:word64] = 0<64>
	goto l0000000000430B05
	// succ:  l0000000000430B05
l000000000043133F:
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000431065
	// succ:  l0000000000431065
l0000000000431346:
	ebx = 0xFFFFFFFF<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000430B07
	// succ:  l0000000000430B07
l0000000000431350:
	rax = Mem0[rdi:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rdi
	r8 = Mem0[rax - 0x18<64>:word64]
	call fn0000000000451CC0 (retsize: 8;)
	r15d = r15d ^ r15d
	r15 = CONVERT(r15d, word32, uint64)
	SZO = cond(r15d)
	C = false
	goto l0000000000430993
	// succ:  l0000000000430993
l000000000043136C:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000431065
	// succ:  l0000000000431065
fn0000000000430800_exit:


