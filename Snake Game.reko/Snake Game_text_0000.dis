// fn0000000000401000
// Return size: 8
define fn0000000000401000
fn0000000000401000_entry:
	rsp = fp
	// succ:  l0000000000401000
l0000000000401000:
	return
	// succ:  fn0000000000401000_exit
fn0000000000401000_exit:


// fn0000000000401010
// Return size: 8
define fn0000000000401010
fn0000000000401010_entry:
	rsp = fp
	// succ:  l0000000000401010
l0000000000401010:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000492070<p64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rax:word32] = 1<32>
	rax = Mem0[0x0000000000492080<p64>:word64]
	Mem0[rax:word32] = 1<32>
	rax = Mem0[0x0000000000492090<p64>:word64]
	Mem0[rax:word32] = 1<32>
	rax = Mem0[0x0000000000492060<p64>:word64]
	Mem0[rax:word32] = 1<32>
	rax = Mem0[0x0000000000491EE0<p64>:word64]
	SCZO = cond(Mem0[rax:word16] - 0x5A4D<16>)
	branch Test(EQ,Z) l00000000004010D0
	// succ:  l0000000000401058 l00000000004010D0
l0000000000401058:
	rax = Mem0[0x0000000000492050<p64>:word64]
	Mem0[0x00000000004AD008<p64>:word32] = edx
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000000004010C2
	// succ:  l000000000040106B l00000000004010C2
l000000000040106B:
	ecx = 2<32>
	rcx = CONVERT(ecx, word32, uint64)
	__set_app_type(rcx)
	// succ:  l0000000000401075
l0000000000401075:
	rcx = 0xFFFFFFFFFFFFFFFF<64>
	call fn000000000040FD20 (retsize: 8;)
	rdx = Mem0[0x0000000000491F90<p64>:word64]
	Mem0[rdx:word64] = rax
	rdx = Mem0[0x0000000000491F80<p64>:word64]
	Mem0[rdx:word64] = rax
	rax = Mem0[0x0000000000492010<p64>:word64]
	edx = Mem0[rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[0x0000000000491F30<p64>:word64]
	rax = Mem0[rax:word64]
	Mem0[rax:word32] = edx
	call fn000000000040FD30 (retsize: 8;)
	rax = Mem0[0x00000000004915E0<p64>:word64]
	SCZO = cond(Mem0[rax:word32] - 1<32>)
	branch Test(EQ,Z) l0000000000401120
	// succ:  l00000000004010BB l0000000000401120
l00000000004010BB:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000401010_exit
l00000000004010C2:
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	__set_app_type(rcx)
	goto l0000000000401075
	// succ:  l0000000000401075
l00000000004010D0:
	rcx = CONVERT(Mem0[rax + 0x3C<64>:word32], word32, int64)
	rax = rax + rcx
	SCZO = cond(rax)
	SCZO = cond(Mem0[rax:word32] - 0x4550<32>)
	branch Test(NE,Z) l0000000000401058
	// succ:  l00000000004010E3 l0000000000401058
l00000000004010E3:
	ecx = CONVERT(Mem0[rax + 0x18<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cx - 0x10B<16>)
	branch Test(EQ,Z) l0000000000401133
	// succ:  l00000000004010EE l0000000000401133
l00000000004010EE:
	SCZO = cond(cx - 0x20B<16>)
	branch Test(NE,Z) l0000000000401058
	// succ:  l00000000004010F9 l0000000000401058
l00000000004010F9:
	SCZO = cond(Mem0[rax + 0x84<64>:word32] - 0xE<32>)
	branch Test(ULE,CZ) l0000000000401058
	// succ:  l0000000000401106 l0000000000401058
l0000000000401106:
	ecx = Mem0[rax + 0xF8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SZO = cond(ecx & ecx)
	C = false
	dl = CONVERT(Test(NE,Z), bool, int8)
	goto l0000000000401058
	// succ:  l0000000000401058
l0000000000401120:
	rcx = 0x000000000040FDA0<p64>
	call fn000000000040FD90 (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000401010_exit
l0000000000401133:
	SCZO = cond(Mem0[rax + 0x74<64>:word32] - 0xE<32>)
	branch Test(ULE,CZ) l0000000000401058
	// succ:  l000000000040113D l0000000000401058
l000000000040113D:
	r8d = Mem0[rax + 0xE8<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SZO = cond(r8d & r8d)
	C = false
	dl = CONVERT(Test(NE,Z), bool, int8)
	goto l0000000000401058
	// succ:  l0000000000401058
fn0000000000401010_exit:


// fn0000000000401160
// Return size: 8
define fn0000000000401160
fn0000000000401160_entry:
	rsp = fp
	// succ:  l0000000000401160
l0000000000401160:
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000492040<p64>:word64]
	r8 = 0x00000000004AD018<p64>
	rdx = 0x00000000004AD020<p64>
	rcx = 0x00000000004AD028<p64>
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[0x00000000004AD000<p64>:word32] = eax
	rax = 0x00000000004AD000<p64>
	Mem0[rsp + 0x20<64>:word64] = rax
	rax = Mem0[0x0000000000492000<p64>:word64]
	r9d = Mem0[rax:word32]
	r9 = CONVERT(r9d, word32, uint64)
	eax = __getmainargs(rcx, rdx, r8, r9)
	Mem0[0x00000000004AD010<p64>:word32] = eax
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000401160_exit
fn0000000000401160_exit:


// fn00000000004011B0
// Return size: 8
define fn00000000004011B0
fn00000000004011B0_entry:
	rsp = fp
	// succ:  l00000000004011B0
l00000000004011B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x98<64>
	SCZO = cond(rsp)
	rbp = Mem0[0x0000000000492050<p64>:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	ecx = 0xD<32>
	rcx = CONVERT(ecx, word32, uint64)
	rdx = rsp + 0x20<64>
	r9d = Mem0[rbp + 0<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	rdi = rdx
	// succ:  l00000000004011D9
l00000000004011D9:
	branch rcx == 0<64> l00000000004011DC
	// succ:  l00000000004011D9_1 l00000000004011DC
l00000000004011D9_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 8<i64>
	rcx = rcx - 1<64>
	goto l00000000004011D9
	// succ:  l00000000004011D9
l00000000004011DC:
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NE,Z) l0000000000401490
	// succ:  l00000000004011E5 l0000000000401490
l00000000004011E5:
	rax = Mem0[gs:0x30<32>:word64]
	rbx = Mem0[0x0000000000491F60<p64>:word64]
	rsi = Mem0[rax + 8<64>:word64]
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	r12 = Sleep
	goto l0000000000401215
	// succ:  l0000000000401215
l0000000000401204:
	SCZO = cond(rsi - rax)
	branch Test(EQ,Z) l0000000000401430
	// succ:  l000000000040120D l0000000000401430
l000000000040120D:
	ecx = 0x3E8<32>
	rcx = CONVERT(ecx, word32, uint64)
	Sleep(rcx)
	// succ:  l0000000000401215
l0000000000401215:
	rax = rdi
	__lock()
	Z = __cmpxchg(Mem0[rbx:word64], rsi, rax, out rax)
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l0000000000401204
	// succ:  l0000000000401222 l0000000000401204
l0000000000401222:
	rsi = Mem0[0x0000000000491F70<p64>:word64]
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	eax = Mem0[rsi:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l0000000000401447
	// succ:  l0000000000401236 l0000000000401447
l0000000000401236:
	eax = Mem0[rsi:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000000004014A0
	// succ:  l0000000000401240 l00000000004014A0
l0000000000401240:
	Mem0[0x00000000004AD004<p64>:word32] = 1<32>
	// succ:  l000000000040124A
l000000000040124A:
	eax = Mem0[rsi:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040145C
	// succ:  l0000000000401255 l000000000040145C
l0000000000401255:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l0000000000401480
	// succ:  l000000000040125D l0000000000401480
l000000000040125D:
	rax = Mem0[0x0000000000491EC0<p64>:word64]
	rax = Mem0[rax:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000401278
	// succ:  l000000000040126C l0000000000401278
l000000000040126C:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	call fn0000000000410AC0 (retsize: 8;)
	// succ:  l0000000000401278
l0000000000401278:
	call fn0000000000410080 (retsize: 8;)
	rcx = 0x0000000000410620<p64>
	rax = SetUnhandledExceptionFilter(rcx)
	rdx = Mem0[0x0000000000491F50<p64>:word64]
	Mem0[rdx:word64] = rax
	call fn0000000000410530 (retsize: 8;)
	rcx = 0x0000000000401000<p64>
	call fn000000000041BCA0 (retsize: 8;)
	call fn00000000004107E0 (retsize: 8;)
	rax = Mem0[0x0000000000491EE0<p64>:word64]
	Mem0[0x00000000004AE5F0<p64>:word64] = rax
	rax = Mem0[0x0000000000491F20<p64>:word64]
	rax = Mem0[rax:word64]
	rax = Mem0[rax:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000401317
	// succ:  l00000000004012CA l0000000000401317
l00000000004012CA:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	goto l00000000004012E2
	// succ:  l00000000004012E2
l00000000004012D0:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l0000000000401310
	// succ:  l00000000004012D4 l0000000000401310
l00000000004012D4:
	ecx = ecx & 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	branch Test(EQ,Z) l0000000000401304
	// succ:  l00000000004012D9 l0000000000401304
l00000000004012D9:
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	// succ:  l00000000004012DE
l00000000004012DE:
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l00000000004012E2
l00000000004012E2:
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x20<8>)
	branch Test(LE,SZO) l00000000004012D0
	// succ:  l00000000004012EA l00000000004012D0
l00000000004012EA:
	r8d = ecx
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d ^ 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(dl - 0x22<8>)
	branch Test(NE,Z) l00000000004012F8
	// succ:  l00000000004012F4_1 l00000000004012F8
l00000000004012F4_1:
	ecx = r8d
	// succ:  l00000000004012F8
l00000000004012F8:
	goto l00000000004012DE
	// succ:  l00000000004012DE
l0000000000401300:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l0000000000401310
	// succ:  l0000000000401304 l0000000000401310
l0000000000401304:
	rax = rax + 1<64>
	SCZO = cond(rax)
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x20<8>)
	branch Test(LE,SZO) l0000000000401300
	// succ:  l0000000000401310 l0000000000401300
l0000000000401310:
	Mem0[0x00000000004AE5F8<p64>:word64] = rax
	// succ:  l0000000000401317
l0000000000401317:
	r8d = Mem0[rbp + 0<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d & r8d)
	C = false
	branch Test(EQ,Z) l0000000000401336
	// succ:  l0000000000401320 l0000000000401336
l0000000000401320:
	SZO = cond(Mem0[rsp + 0x5C<64>:byte] & 1<8>)
	C = false
	eax = 0xA<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l0000000000401421
	// succ:  l0000000000401330 l0000000000401421
l0000000000401330:
	Mem0[0x0000000000477000<p64>:word32] = eax
	// succ:  l0000000000401336
l0000000000401336:
	r12d = Mem0[0x00000000004AD028<p64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	r13d = SLICE(r12 + 1<64>, word32, 0)
	r13 = CONVERT(r13d, word32, uint64)
	r13 = CONVERT(r13d, word32, int64)
	r13 = r13 << 3<64>
	SCZO = cond(r13)
	rcx = r13
	rax = malloc(rcx)
	SZO = cond(r12d & r12d)
	C = false
	rbp = rax
	rdi = Mem0[0x00000000004AD020<p64>:word64]
	branch Test(LE,SZO) l00000000004014BE
	// succ:  l0000000000401364 l00000000004014BE
l0000000000401364:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	// succ:  l0000000000401370
l0000000000401370:
	rcx = Mem0[rdi + rbx * 8<64>:word64]
	eax = strlen(rcx)
	rsi = rax + 1<64>
	rcx = rsi
	rax = malloc(rcx)
	Mem0[rbp + 0<64> + rbx * 8<64>:word64] = rax
	rdx = Mem0[rdi + rbx * 8<64>:word64]
	rcx = rax
	r8 = rsi
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	rax = memcpy(rcx, rdx, r8)
	SCZO = cond(r12d - ebx)
	branch Test(GT,SZO) l0000000000401370
	// succ:  l00000000004013A2 l0000000000401370
l00000000004013A2:
	r13 = r13 - 8<64>
	SCZO = cond(r13)
	// succ:  l00000000004013A6
l00000000004013A6:
	Mem0[rbp + 0<64> + r13:word64] = 0<64>
	Mem0[0x00000000004AD020<p64>:word64] = rbp
	call fn0000000000410890 (retsize: 8;)
	rax = Mem0[0x0000000000491EF0<p64>:word64]
	rdx = Mem0[0x00000000004AD018<p64>:word64]
	ecx = Mem0[0x00000000004AD028<p64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	rax = Mem0[rax:word64]
	Mem0[rax:word64] = rdx
	r8 = Mem0[0x00000000004AD018<p64>:word64]
	rdx = Mem0[0x00000000004AD020<p64>:word64]
	call fn00000000004024FC (retsize: 8;)
	ecx = Mem0[0x00000000004AD008<p64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[0x00000000004AD00C<p64>:word32] = eax
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l00000000004014C6
	// succ:  l00000000004013FC l00000000004014C6
l00000000004013FC:
	edx = Mem0[0x00000000004AD004<p64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000401411
	// succ:  l0000000000401406 l0000000000401411
l0000000000401406:
	call cexit (retsize: 8;)
	eax = Mem0[0x00000000004AD00C<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000401411
l0000000000401411:
	rsp = rsp + 0x98<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004011B0_exit
l0000000000401421:
	eax = CONVERT(Mem0[rsp + 0x60<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000401330
	// succ:  l0000000000401330
l0000000000401430:
	rsi = Mem0[0x0000000000491F70<p64>:word64]
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	eax = Mem0[rsi:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(NE,Z) l0000000000401236
	// succ:  l0000000000401447 l0000000000401236
l0000000000401447:
	ecx = 0x1F<32>
	rcx = CONVERT(ecx, word32, uint64)
	_amsg_exit(rcx)
	eax = Mem0[rsi:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(NE,Z) l0000000000401255
	// succ:  l000000000040145C l0000000000401255
l000000000040145C:
	rdx = Mem0[0x0000000000491FD0<p64>:word64]
	rcx = Mem0[0x0000000000491FC0<p64>:word64]
	_initterm(rcx, rdx)
	SZO = cond(edi & edi)
	C = false
	Mem0[rsi:word32] = 2<32>
	branch Test(NE,Z) l000000000040125D
	// succ:  l000000000040147D l000000000040125D
l000000000040147D:
	// succ:  l0000000000401480
l0000000000401480:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	v26 = Mem0[rbx:word64]
	Mem0[rbx:word64] = rax
	rax = v26
	goto l000000000040125D
	// succ:  l000000000040125D
l0000000000401490:
	rcx = rdx
	GetStartupInfoA(rcx)
	goto l00000000004011E5
	// succ:  l00000000004011E5
l00000000004014A0:
	rdx = Mem0[0x0000000000491FF0<p64>:word64]
	rcx = Mem0[0x0000000000491FE0<p64>:word64]
	Mem0[rsi:word32] = 1<32>
	_initterm(rcx, rdx)
	goto l000000000040124A
	// succ:  l000000000040124A
l00000000004014BE:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	goto l00000000004013A6
	// succ:  l00000000004013A6
l00000000004014C6:
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	exit(rcx)
fn00000000004011B0_exit:


// fn00000000004014D0
// Return size: 8
define fn00000000004014D0
fn00000000004014D0_entry:
	rsp = fp
	// succ:  l00000000004014D0
l00000000004014D0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000492050<p64>:word64]
	Mem0[rax:word32] = 1<32>
	call fn00000000004108B0 (retsize: 8;)
	call fn00000000004011B0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004014D0_exit
fn00000000004014D0_exit:


// Win32CrtStartup
// Return size: 8
DWORD Win32CrtStartup()
Win32CrtStartup_entry:
	rsp = fp
	// succ:  l0000000000401500
l0000000000401500:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000492050<p64>:word64]
	Mem0[rax:word32] = 0<32>
	call fn00000000004108B0 (retsize: 8;)
	call fn00000000004011B0 (retsize: 8;)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  Win32CrtStartup_exit
Win32CrtStartup_exit:


// fn0000000000401530
// Return size: 8
define fn0000000000401530
fn0000000000401530_entry:
	rsp = fp
	// succ:  l0000000000401530
l0000000000401530:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x128<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp + 0xC0<64>:word64] = rcx
	rcx = 0x000000000048D003<p64>
	eax = system(rcx)
	Mem0[rbp + 0x3C<64>:word32] = 0<32>
	ecx = 0xFFFFFFF5<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = GetStdHandle
	rax = GetStdHandle(rcx)
	Mem0[rbp + 0x60<64>:word64] = rax
	Mem0[rbp + 0x30<64>:word16] = 0<16>
	Mem0[rbp + 0x32<64>:word16] = 2<16>
	Mem0[rbp + 0x9C<64>:word32] = 1<32>
	goto l00000000004015BC
	// succ:  l00000000004015BC
l0000000000401585:
	eax = Mem0[rbp + 0x9C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x30<64>:word16] = ax
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x000000000048D007<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	v14 = Mem0[rbp + 0x9C<64>:word32] + 1<32>
	Mem0[rbp + 0x9C<64>:word32] = v14
	SCZO = cond(v14)
	// succ:  l00000000004015BC
l00000000004015BC:
	SCZO = cond(Mem0[rbp + 0x9C<64>:word32] - 0x4D<32>)
	branch Test(LE,SZO) l0000000000401585
	// succ:  l00000000004015C5 l0000000000401585
l00000000004015C5:
	Mem0[rbp + 0x98<64>:word32] = 3<32>
	goto l000000000040163A
	// succ:  l000000000040163A
l00000000004015D1:
	eax = Mem0[rbp + 0x98<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x32<64>:word16] = ax
	Mem0[rbp + 0x30<64>:word16] = 1<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x000000000048D009<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	Mem0[rbp + 0x30<64>:word16] = 0x4D<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x000000000048D009<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	v15 = Mem0[rbp + 0x98<64>:word32] + 1<32>
	Mem0[rbp + 0x98<64>:word32] = v15
	SCZO = cond(v15)
	// succ:  l000000000040163A
l000000000040163A:
	SCZO = cond(Mem0[rbp + 0x98<64>:word32] - 0x14<32>)
	branch Test(LE,SZO) l00000000004015D1
	// succ:  l0000000000401643 l00000000004015D1
l0000000000401643:
	Mem0[rbp + 0x32<64>:word16] = 0x15<16>
	Mem0[rbp + 0x94<64>:word32] = 1<32>
	goto l000000000040168C
	// succ:  l000000000040168C
l0000000000401655:
	eax = Mem0[rbp + 0x94<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x30<64>:word16] = ax
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x000000000048D007<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	v21 = Mem0[rbp + 0x94<64>:word32] + 1<32>
	Mem0[rbp + 0x94<64>:word32] = v21
	SCZO = cond(v21)
	// succ:  l000000000040168C
l000000000040168C:
	SCZO = cond(Mem0[rbp + 0x94<64>:word32] - 0x4D<32>)
	branch Test(LE,SZO) l0000000000401655
	// succ:  l0000000000401695 l0000000000401655
l0000000000401695:
	Mem0[rbp + 0x1F<64>:byte] = 0x52<8>
	rax = rbp - 0x60<64>
	rcx = rax
	call fn00000000004248F0 (retsize: 8;)
	rdx = 0x000000000048D00B<p64>
	rcx = Mem0[rbp + 0xC0<64>:word64]
	call fn0000000000473840 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000401729
	// succ:  l00000000004016BC l0000000000401729
l00000000004016BC:
	r8 = rbp - 0x60<64>
	rcx = rbp + 0x1F<64>
	rdx = rbp + 0x20<64>
	rax = rbp + 0x3C<64>
	r9 = r8
	r8 = rcx
	rcx = rax
	call fn0000000000402C4E (retsize: 8;)
	Mem0[rbp + 0x5F<64>:byte] = al
	eax = CONVERT(Mem0[rbp + 0x5F<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000401724
	// succ:  l00000000004016E8 l0000000000401724
l00000000004016E8:
	Mem0[rbp + 0x30<64>:word16] = 0xA<16>
	Mem0[rbp + 0x32<64>:word16] = 0xA<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x000000000048D018<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	call getch (retsize: 8;)
	goto l00000000004024C9
	// succ:  l00000000004024C9
l0000000000401724:
	goto l000000000040189C
	// succ:  l000000000040189C
l0000000000401729:
	rax = 0xFFFFFFFF00000000<64>
	rax = rax & rbx
	SZO = cond(rax)
	C = false
	rax = rax | 0x14<64>
	SZO = cond(rax)
	C = false
	rbx = rax
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x500000000<64>
	rax = rax | rdx
	SZO = cond(rax)
	C = false
	rbx = rax
	rax = rbp - 0x60<64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rbx
	rcx = rax
	call fn0000000000424480 (retsize: 8;)
	ecx = 0<32>
	rcx = CONVERT(ecx, word32, uint64)
	call time64 (retsize: 8;)
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	srand(rcx)
	// succ:  l0000000000401775
l0000000000401775:
	eax = rand()
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	edx = 0xDD67C8A7<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	edx_eax = edx *s eax
	SCZO = cond(edx_eax)
	eax = SLICE(rdx + rcx, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	eax = eax >> 6<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	eax = eax >> 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = edx - eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	eax = eax *s 0x4A<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = ecx - eax
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbp + 0x20<64>:word32] = eax
	eax = rand()
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	edx = 0x78787879<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	edx_eax = edx *s eax
	SCZO = cond(edx_eax)
	edx = edx >> 3<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	eax = eax >> 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = edx - eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx << 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx + eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	eax = eax - edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbp + 0x24<64>:word32] = eax
	Mem0[rbp + 0x93<64>:byte] = 1<8>
	edx = Mem0[rbp + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(edx - eax)
	branch Test(NE,Z) l00000000004017F7
	// succ:  l00000000004017E1 l00000000004017F7
l00000000004017E1:
	edx = Mem0[rbp + 0x24<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(edx - eax)
	branch Test(NE,Z) l00000000004017F7
	// succ:  l00000000004017EB l00000000004017F7
l00000000004017EB:
	Mem0[rbp + 0x93<64>:byte] = 0<8>
	goto l000000000040188C
	// succ:  l000000000040188C
l00000000004017F7:
	edx = Mem0[rbp + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 0x3C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(edx - eax)
	branch Test(NE,Z) l0000000000401814
	// succ:  l0000000000401801 l0000000000401814
l0000000000401801:
	edx = Mem0[rbp + 0x24<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(edx - eax)
	branch Test(NE,Z) l0000000000401814
	// succ:  l000000000040180B l0000000000401814
l000000000040180B:
	Mem0[rbp + 0x93<64>:byte] = 0<8>
	goto l000000000040188C
	// succ:  l000000000040188C
l0000000000401814:
	Mem0[rbp + 0x8C<64>:word32] = 0<32>
	goto l0000000000401881
	// succ:  l0000000000401881
l0000000000401820:
	ebx = Mem0[rbp + 0x20<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	eax = Mem0[rbp + 0x8C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = rbp - 0x60<64>
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B700 (retsize: 8;)
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ebx - eax)
	branch Test(NE,Z) l000000000040186A
	// succ:  l0000000000401841 l000000000040186A
l0000000000401841:
	ebx = Mem0[rbp + 0x24<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	eax = Mem0[rbp + 0x8C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = rbp - 0x60<64>
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B700 (retsize: 8;)
	eax = Mem0[rax + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ebx - eax)
	branch Test(NE,Z) l000000000040186A
	// succ:  l0000000000401863 l000000000040186A
l0000000000401863:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000040186F
	// succ:  l000000000040186F
l000000000040186A:
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000040186F
l000000000040186F:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000040187A
	// succ:  l0000000000401873 l000000000040187A
l0000000000401873:
	Mem0[rbp + 0x93<64>:byte] = 0<8>
	// succ:  l000000000040187A
l000000000040187A:
	v26 = Mem0[rbp + 0x8C<64>:word32] + 1<32>
	Mem0[rbp + 0x8C<64>:word32] = v26
	SCZO = cond(v26)
	// succ:  l0000000000401881
l0000000000401881:
	eax = Mem0[rbp - 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - Mem0[rbp + 0x8C<64>:word32])
	branch Test(GT,SZO) l0000000000401820
	// succ:  l000000000040188C l0000000000401820
l000000000040188C:
	SCZO = cond(Mem0[rbp + 0x93<64>:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000401897
	// succ:  l0000000000401895 l0000000000401897
l0000000000401895:
	goto l000000000040189C
	// succ:  l000000000040189C
l0000000000401897:
	goto l0000000000401775
	// succ:  l0000000000401775
l000000000040189C:
	Mem0[rbp + 0x30<64>:word16] = 0xF<16>
	Mem0[rbp + 0x32<64>:word16] = 1<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	ebx = Mem0[rbp + 0x3C<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	rdx = 0x00000000004AD040<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473B00 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	call fn00000000004504B0 (retsize: 8;)
	Mem0[rbp + 0x30<64>:word16] = 0x28<16>
	Mem0[rbp + 0x32<64>:word16] = 1<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x00000000004AD058<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473B00 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rdx = 0x000000000048D071<p64>
	rcx = rax
	call fn00000000004738C0 (retsize: 8;)
	Mem0[rbp + 0x30<64>:word16] = 0x1E<16>
	Mem0[rbp + 0x32<64>:word16] = 0x16<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x00000000004AD048<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473B00 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	eax = Mem0[rbp - 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x30<64>:word16] = ax
	eax = Mem0[rbp - 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x32<64>:word16] = ax
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	eax = CONVERT(Mem0[rbp - 0x34<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, int32)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473980 (retsize: 8;)
	Mem0[rbp + 0x88<64>:word32] = 0<32>
	goto l0000000000401A16
	// succ:  l0000000000401A16
l0000000000401993:
	eax = Mem0[rbp + 0x88<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = rbp - 0x60<64>
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B700 (retsize: 8;)
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x30<64>:word16] = ax
	eax = Mem0[rbp + 0x88<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = rbp - 0x60<64>
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B700 (retsize: 8;)
	eax = Mem0[rax + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x32<64>:word16] = ax
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	eax = Mem0[rbp + 0x88<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = rbp - 0x60<64>
	rcx = rdx + 0x38<64>
	rdx = rax
	call fn000000000046BBA0 (retsize: 8;)
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, int32)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473980 (retsize: 8;)
	v25 = Mem0[rbp + 0x88<64>:word32] + 1<32>
	Mem0[rbp + 0x88<64>:word32] = v25
	SCZO = cond(v25)
	// succ:  l0000000000401A16
l0000000000401A16:
	eax = Mem0[rbp - 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - Mem0[rbp + 0x88<64>:word32])
	branch Test(GT,SZO) l0000000000401993
	// succ:  l0000000000401A25 l0000000000401993
l0000000000401A25:
	eax = Mem0[rbp - 0x3C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x30<64>:word16] = ax
	eax = Mem0[rbp - 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x32<64>:word16] = ax
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	eax = CONVERT(Mem0[rbp - 0x10<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, int32)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473980 (retsize: 8;)
	eax = Mem0[rbp + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x30<64>:word16] = ax
	eax = Mem0[rbp + 0x24<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x32<64>:word16] = ax
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	edx = 0xFFFFFFA6<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473980 (retsize: 8;)
	rdx = 0x000000000048D00B<p64>
	rcx = Mem0[rbp + 0xC0<64>:word64]
	call fn0000000000473840 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000401B93
	// succ:  l0000000000401AA8 l0000000000401B93
l0000000000401AA8:
	Mem0[rbp + 0x30<64>:word16] = 0x28<16>
	Mem0[rbp + 0x32<64>:word16] = 1<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x00000000004AD058<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473B00 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rdx = 0x000000000048D079<p64>
	rcx = rax
	call fn00000000004738C0 (retsize: 8;)
	Mem0[rbp + 0x30<64>:word16] = 0x1E<16>
	Mem0[rbp + 0x32<64>:word16] = 0x16<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x00000000004AD050<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473B00 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	call getch (retsize: 8;)
	Mem0[rbp + 0x30<64>:word16] = 0x28<16>
	Mem0[rbp + 0x32<64>:word16] = 1<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x00000000004AD058<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473B00 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rdx = 0x000000000048D071<p64>
	rcx = rax
	call fn00000000004738C0 (retsize: 8;)
	Mem0[rbp + 0x30<64>:word16] = 0x1E<16>
	Mem0[rbp + 0x32<64>:word16] = 0x16<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x00000000004AD048<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473B00 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	// succ:  l0000000000401B93
l0000000000401B93:
	eax = Mem0[0x00000000004AD034<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x84<64>:word32] = eax
	// succ:  l0000000000401B9F
l0000000000401B9F:
	Mem0[rbp + 0x83<64>:byte] = 0<8>
	Mem0[rbp + 0x7C<64>:word32] = 0<32>
	goto l0000000000401E1E
	// succ:  l0000000000401E1E
l0000000000401BB2:
	call kbhit (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	al = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000401DE0
	// succ:  l0000000000401BC4 l0000000000401DE0
l0000000000401BC4:
	call getch (retsize: 8;)
	Mem0[rbp + 0x5E<64>:byte] = al
	SCZO = cond(Mem0[rbp + 0x5E<64>:byte] - 0x4D<8>)
	branch Test(NE,Z) l0000000000401BF8
	// succ:  l0000000000401BD2 l0000000000401BF8
l0000000000401BD2:
	eax = CONVERT(Mem0[rbp + 0x1F<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x4C<8>)
	branch Test(EQ,Z) l0000000000401BF8
	// succ:  l0000000000401BDA l0000000000401BF8
l0000000000401BDA:
	eax = CONVERT(Mem0[rbp + 0x83<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000401BF8
	// succ:  l0000000000401BE8 l0000000000401BF8
l0000000000401BE8:
	Mem0[rbp + 0x1F<64>:byte] = 0x52<8>
	Mem0[rbp + 0x83<64>:byte] = 1<8>
	goto l0000000000401DE0
	// succ:  l0000000000401DE0
l0000000000401BF8:
	SCZO = cond(Mem0[rbp + 0x5E<64>:byte] - 0x48<8>)
	branch Test(NE,Z) l0000000000401C24
	// succ:  l0000000000401BFE l0000000000401C24
l0000000000401BFE:
	eax = CONVERT(Mem0[rbp + 0x1F<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x44<8>)
	branch Test(EQ,Z) l0000000000401C24
	// succ:  l0000000000401C06 l0000000000401C24
l0000000000401C06:
	eax = CONVERT(Mem0[rbp + 0x83<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000401C24
	// succ:  l0000000000401C14 l0000000000401C24
l0000000000401C14:
	Mem0[rbp + 0x1F<64>:byte] = 0x55<8>
	Mem0[rbp + 0x83<64>:byte] = 1<8>
	goto l0000000000401DE0
	// succ:  l0000000000401DE0
l0000000000401C24:
	SCZO = cond(Mem0[rbp + 0x5E<64>:byte] - 0x4B<8>)
	branch Test(NE,Z) l0000000000401C50
	// succ:  l0000000000401C2A l0000000000401C50
l0000000000401C2A:
	eax = CONVERT(Mem0[rbp + 0x1F<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x52<8>)
	branch Test(EQ,Z) l0000000000401C50
	// succ:  l0000000000401C32 l0000000000401C50
l0000000000401C32:
	eax = CONVERT(Mem0[rbp + 0x83<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000401C50
	// succ:  l0000000000401C40 l0000000000401C50
l0000000000401C40:
	Mem0[rbp + 0x1F<64>:byte] = 0x4C<8>
	Mem0[rbp + 0x83<64>:byte] = 1<8>
	goto l0000000000401DE0
	// succ:  l0000000000401DE0
l0000000000401C50:
	SCZO = cond(Mem0[rbp + 0x5E<64>:byte] - 0x50<8>)
	branch Test(NE,Z) l0000000000401C7C
	// succ:  l0000000000401C56 l0000000000401C7C
l0000000000401C56:
	eax = CONVERT(Mem0[rbp + 0x1F<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x55<8>)
	branch Test(EQ,Z) l0000000000401C7C
	// succ:  l0000000000401C5E l0000000000401C7C
l0000000000401C5E:
	eax = CONVERT(Mem0[rbp + 0x83<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000401C7C
	// succ:  l0000000000401C6C l0000000000401C7C
l0000000000401C6C:
	Mem0[rbp + 0x1F<64>:byte] = 0x44<8>
	Mem0[rbp + 0x83<64>:byte] = 1<8>
	goto l0000000000401DE0
	// succ:  l0000000000401DE0
l0000000000401C7C:
	SCZO = cond(Mem0[rbp + 0x5E<64>:byte] - 0x1B<8>)
	branch Test(NE,Z) l0000000000401CA6
	// succ:  l0000000000401C82 l0000000000401CA6
l0000000000401C82:
	r8 = rbp - 0x60<64>
	rcx = rbp + 0x1F<64>
	rdx = rbp + 0x20<64>
	rax = rbp + 0x3C<64>
	r9 = r8
	r8 = rcx
	rcx = rax
	call fn0000000000402A94 (retsize: 8;)
	goto l00000000004024C9
	// succ:  l00000000004024C9
l0000000000401CA6:
	SCZO = cond(Mem0[rbp + 0x5E<64>:byte] - 0x70<8>)
	branch Test(NE,Z) l0000000000401DE0
	// succ:  l0000000000401CB0 l0000000000401DE0
l0000000000401CB0:
	Mem0[rbp + 0x30<64>:word16] = 0x28<16>
	Mem0[rbp + 0x32<64>:word16] = 1<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x00000000004AD058<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473B00 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rdx = 0x000000000048D079<p64>
	rcx = rax
	call fn00000000004738C0 (retsize: 8;)
	Mem0[rbp + 0x30<64>:word16] = 0x1E<16>
	Mem0[rbp + 0x32<64>:word16] = 0x16<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x00000000004AD050<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473B00 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	ecx = Mem0[rbp + 0x84<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	edx = 0x66666667<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	edx_eax = edx *s eax
	SCZO = cond(edx_eax)
	edx = edx >> 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	eax = eax >> 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = edx - eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x4C<64>:word32] = eax
	rdx = rbp + 0x4C<64>
	rax = rbp + 0x40<64>
	rcx = rax
	call fn00000000004691C0 (retsize: 8;)
	rax = rbp + 0x40<64>
	rcx = rax
	call fn0000000000454950 (retsize: 8;)
	// succ:  l0000000000401D5E
l0000000000401D5E:
	call getch (retsize: 8;)
	SCZO = cond(eax - 0x70<32>)
	al = CONVERT(Test(NE,Z), bool, int8)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000401D5E
	// succ:  l0000000000401D6D l0000000000401D5E
l0000000000401D6D:
	Mem0[rbp + 0x30<64>:word16] = 0x28<16>
	Mem0[rbp + 0x32<64>:word16] = 1<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x00000000004AD058<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473B00 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rdx = 0x000000000048D082<p64>
	rcx = rax
	call fn00000000004738C0 (retsize: 8;)
	Mem0[rbp + 0x30<64>:word16] = 0x1E<16>
	Mem0[rbp + 0x32<64>:word16] = 0x16<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x00000000004AD048<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473B00 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	// succ:  l0000000000401DE0
l0000000000401DE0:
	ecx = Mem0[rbp + 0x84<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	edx = 0x66666667<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	edx_eax = edx *s eax
	SCZO = cond(edx_eax)
	edx = edx >> 2<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	eax = eax >> 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = edx - eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x58<64>:word32] = eax
	rdx = rbp + 0x58<64>
	rax = rbp + 0x50<64>
	rcx = rax
	call fn00000000004691C0 (retsize: 8;)
	rax = rbp + 0x50<64>
	rcx = rax
	call fn0000000000454950 (retsize: 8;)
	v29 = Mem0[rbp + 0x7C<64>:word32] + 1<32>
	Mem0[rbp + 0x7C<64>:word32] = v29
	SCZO = cond(v29)
	// succ:  l0000000000401E1E
l0000000000401E1E:
	SCZO = cond(Mem0[rbp + 0x7C<64>:word32] - 9<32>)
	branch Test(LE,SZO) l0000000000401BB2
	// succ:  l0000000000401E28 l0000000000401BB2
l0000000000401E28:
	eax = Mem0[rbp - 0x3C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x10<64>:word32] = eax
	eax = Mem0[rbp - 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x14<64>:word32] = eax
	eax = CONVERT(Mem0[rbp + 0x1F<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, int32)
	SCZO = cond(eax - 0x4C<32>)
	branch Test(EQ,Z) l0000000000401F00
	// succ:  l0000000000401E44 l0000000000401F00
l0000000000401E44:
	SCZO = cond(eax - 0x4C<32>)
	branch Test(GT,SZO) l0000000000401E57
	// succ:  l0000000000401E49 l0000000000401E57
l0000000000401E49:
	SCZO = cond(eax - 0x44<32>)
	branch Test(EQ,Z) l000000000040202C
	// succ:  l0000000000401E52 l000000000040202C
l0000000000401E52:
	goto l00000000004020BB
	// succ:  l00000000004020BB
l0000000000401E57:
	SCZO = cond(eax - 0x52<32>)
	branch Test(EQ,Z) l0000000000401E6A
	// succ:  l0000000000401E5C l0000000000401E6A
l0000000000401E5C:
	SCZO = cond(eax - 0x55<32>)
	branch Test(EQ,Z) l0000000000401F96
	// succ:  l0000000000401E65 l0000000000401F96
l0000000000401E65:
	goto l00000000004020BB
	// succ:  l00000000004020BB
l0000000000401E6A:
	eax = Mem0[0x00000000004AD038<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x84<64>:word32] = eax
	eax = Mem0[rbp - 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x4C<32>)
	branch Test(NE,Z) l0000000000401EEC
	// succ:  l0000000000401E7E l0000000000401EEC
l0000000000401E7E:
	eax = CONVERT(Mem0[0x00000000004AD030<p64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000401EE0
	// succ:  l0000000000401E89 l0000000000401EE0
l0000000000401E89:
	Mem0[rbp + 0x30<64>:word16] = 0x28<16>
	Mem0[rbp + 0x32<64>:word16] = 1<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x00000000004AD058<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473B00 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rdx = 0x000000000048D08C<p64>
	rcx = rax
	call fn00000000004738C0 (retsize: 8;)
	rcx = 0x000000000048D096<p64>
	call msvcrt.dll!remove (retsize: 8;)
	call getch (retsize: 8;)
	goto l00000000004024C9
	// succ:  l00000000004024C9
l0000000000401EE0:
	Mem0[rbp + 0<64>:word32] = 2<32>
	goto l00000000004020BB
	// succ:  l00000000004020BB
l0000000000401EEC:
	eax = Mem0[rbp - 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0<64>:word32] = edx
	Mem0[rbp + 4<64>:word32] = eax
	goto l00000000004020BB
	// succ:  l00000000004020BB
l0000000000401F00:
	eax = Mem0[0x00000000004AD038<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x84<64>:word32] = eax
	eax = Mem0[rbp - 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 2<32>)
	branch Test(NE,Z) l0000000000401F82
	// succ:  l0000000000401F14 l0000000000401F82
l0000000000401F14:
	eax = CONVERT(Mem0[0x00000000004AD030<p64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000401F76
	// succ:  l0000000000401F1F l0000000000401F76
l0000000000401F1F:
	Mem0[rbp + 0x30<64>:word16] = 0x28<16>
	Mem0[rbp + 0x32<64>:word16] = 1<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x00000000004AD058<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473B00 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rdx = 0x000000000048D08C<p64>
	rcx = rax
	call fn00000000004738C0 (retsize: 8;)
	rcx = 0x000000000048D096<p64>
	call msvcrt.dll!remove (retsize: 8;)
	call getch (retsize: 8;)
	goto l00000000004024C9
	// succ:  l00000000004024C9
l0000000000401F76:
	Mem0[rbp + 0<64>:word32] = 0x4C<32>
	goto l00000000004020BB
	// succ:  l00000000004020BB
l0000000000401F82:
	eax = Mem0[rbp - 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0<64>:word32] = edx
	Mem0[rbp + 4<64>:word32] = eax
	goto l00000000004020BB
	// succ:  l00000000004020BB
l0000000000401F96:
	eax = Mem0[0x00000000004AD034<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x84<64>:word32] = eax
	eax = Mem0[rbp - 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 3<32>)
	branch Test(NE,Z) l0000000000402018
	// succ:  l0000000000401FAA l0000000000402018
l0000000000401FAA:
	eax = CONVERT(Mem0[0x00000000004AD030<p64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000040200C
	// succ:  l0000000000401FB5 l000000000040200C
l0000000000401FB5:
	Mem0[rbp + 0x30<64>:word16] = 0x28<16>
	Mem0[rbp + 0x32<64>:word16] = 1<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x00000000004AD058<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473B00 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rdx = 0x000000000048D08C<p64>
	rcx = rax
	call fn00000000004738C0 (retsize: 8;)
	rcx = 0x000000000048D096<p64>
	call msvcrt.dll!remove (retsize: 8;)
	call getch (retsize: 8;)
	goto l00000000004024C9
	// succ:  l00000000004024C9
l000000000040200C:
	Mem0[rbp + 4<64>:word32] = 0x14<32>
	goto l00000000004020BB
	// succ:  l00000000004020BB
l0000000000402018:
	eax = Mem0[rbp - 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = Mem0[rbp - 0x5C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx - 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	Mem0[rbp + 0<64>:word32] = eax
	Mem0[rbp + 4<64>:word32] = edx
	goto l00000000004020BB
	// succ:  l00000000004020BB
l000000000040202C:
	eax = Mem0[0x00000000004AD034<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x84<64>:word32] = eax
	eax = Mem0[rbp - 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x14<32>)
	branch Test(NE,Z) l00000000004020AB
	// succ:  l0000000000402040 l00000000004020AB
l0000000000402040:
	eax = CONVERT(Mem0[0x00000000004AD030<p64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004020A2
	// succ:  l000000000040204B l00000000004020A2
l000000000040204B:
	Mem0[rbp + 0x30<64>:word16] = 0x28<16>
	Mem0[rbp + 0x32<64>:word16] = 1<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x00000000004AD058<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473B00 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rdx = 0x000000000048D08C<p64>
	rcx = rax
	call fn00000000004738C0 (retsize: 8;)
	rcx = 0x000000000048D096<p64>
	call msvcrt.dll!remove (retsize: 8;)
	call getch (retsize: 8;)
	goto l00000000004024C9
	// succ:  l00000000004024C9
l00000000004020A2:
	Mem0[rbp + 4<64>:word32] = 3<32>
	goto l00000000004020BB
	// succ:  l00000000004020BB
l00000000004020AB:
	eax = Mem0[rbp - 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = Mem0[rbp - 0x5C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	Mem0[rbp + 0<64>:word32] = eax
	Mem0[rbp + 4<64>:word32] = edx
	// succ:  l00000000004020BB
l00000000004020BB:
	rdx = Mem0[rbp + 0<64>:word64]
	rax = rbp - 0x60<64>
	rcx = rax
	call fn0000000000424550 (retsize: 8;)
	rax = rbp - 0x60<64>
	rdx = rax + 0x24<64>
	rax = rbp - 0x60<64>
	rcx = rax
	call fn0000000000424400 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000040213A
	// succ:  l00000000004020E3 l000000000040213A
l00000000004020E3:
	Mem0[rbp + 0x30<64>:word16] = 0x28<16>
	Mem0[rbp + 0x32<64>:word16] = 1<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x00000000004AD058<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473B00 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rdx = 0x000000000048D08C<p64>
	rcx = rax
	call fn00000000004738C0 (retsize: 8;)
	rcx = 0x000000000048D096<p64>
	call msvcrt.dll!remove (retsize: 8;)
	call getch (retsize: 8;)
	goto l00000000004024C9
	// succ:  l00000000004024C9
l000000000040213A:
	Mem0[rbp + 0x78<64>:word32] = 0<32>
	goto l00000000004021C9
	// succ:  l00000000004021C9
l0000000000402146:
	eax = Mem0[rbp + 0x78<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = rbp - 0x60<64>
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B700 (retsize: 8;)
	rdx = rax
	rax = rbp - 0x60<64>
	rcx = rax
	call fn0000000000424400 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004021C5
	// succ:  l000000000040216E l00000000004021C5
l000000000040216E:
	Mem0[rbp + 0x30<64>:word16] = 0x28<16>
	Mem0[rbp + 0x32<64>:word16] = 1<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x00000000004AD058<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473B00 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	rdx = 0x000000000048D08C<p64>
	rcx = rax
	call fn00000000004738C0 (retsize: 8;)
	rcx = 0x000000000048D096<p64>
	call msvcrt.dll!remove (retsize: 8;)
	call getch (retsize: 8;)
	goto l00000000004024C9
	// succ:  l00000000004024C9
l00000000004021C5:
	v28 = Mem0[rbp + 0x78<64>:word32] + 1<32>
	Mem0[rbp + 0x78<64>:word32] = v28
	SCZO = cond(v28)
	// succ:  l00000000004021C9
l00000000004021C9:
	eax = Mem0[rbp - 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - Mem0[rbp + 0x78<64>:word32])
	branch Test(GT,SZO) l0000000000402146
	// succ:  l00000000004021D5 l0000000000402146
l00000000004021D5:
	eax = Mem0[rbp + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x30<64>:word16] = ax
	eax = Mem0[rbp + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x32<64>:word16] = ax
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x000000000048D0AB<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	eax = Mem0[rbp - 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x30<64>:word16] = ax
	eax = Mem0[rbp - 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x32<64>:word16] = ax
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	eax = CONVERT(Mem0[rbp - 0x34<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, int32)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473980 (retsize: 8;)
	Mem0[rbp + 0x74<64>:word32] = 0<32>
	goto l00000000004022BF
	// succ:  l00000000004022BF
l0000000000402248:
	eax = Mem0[rbp + 0x74<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = rbp - 0x60<64>
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B700 (retsize: 8;)
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x30<64>:word16] = ax
	eax = Mem0[rbp + 0x74<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = rbp - 0x60<64>
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B700 (retsize: 8;)
	eax = Mem0[rax + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x32<64>:word16] = ax
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	eax = Mem0[rbp + 0x74<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = rbp - 0x60<64>
	rcx = rdx + 0x38<64>
	rdx = rax
	call fn000000000046BBA0 (retsize: 8;)
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, int32)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473980 (retsize: 8;)
	v27 = Mem0[rbp + 0x74<64>:word32] + 1<32>
	Mem0[rbp + 0x74<64>:word32] = v27
	SCZO = cond(v27)
	// succ:  l00000000004022BF
l00000000004022BF:
	eax = Mem0[rbp - 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - Mem0[rbp + 0x74<64>:word32])
	branch Test(GT,SZO) l0000000000402248
	// succ:  l00000000004022C7 l0000000000402248
l00000000004022C7:
	eax = Mem0[rbp - 0x3C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x30<64>:word16] = ax
	eax = Mem0[rbp - 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x32<64>:word16] = ax
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	eax = CONVERT(Mem0[rbp - 0x10<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = CONVERT(al, byte, int32)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473980 (retsize: 8;)
	rdx = rbp + 0x20<64>
	rax = rbp - 0x60<64>
	rcx = rax
	call fn0000000000424400 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004024A5
	// succ:  l0000000000402315 l00000000004024A5
l0000000000402315:
	eax = Mem0[rbp + 0x3C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbp + 0x3C<64>:word32] = eax
	Mem0[rbp + 0x30<64>:word16] = 0xF<16>
	Mem0[rbp + 0x32<64>:word16] = 1<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	ebx = Mem0[rbp + 0x3C<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	rdx = 0x00000000004AD040<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473B00 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	edx = ebx
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	call fn00000000004504B0 (retsize: 8;)
	rax = rbp - 0x60<64>
	rcx = rax
	call fn0000000000424440 (retsize: 8;)
	// succ:  l0000000000402369
l0000000000402369:
	eax = rand()
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	edx = 0xDD67C8A7<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	edx_eax = edx *s eax
	SCZO = cond(edx_eax)
	eax = SLICE(rdx + rcx, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	eax = eax >> 6<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	eax = eax >> 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = edx - eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	eax = eax *s 0x4A<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = ecx - eax
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbp + 0x20<64>:word32] = eax
	eax = rand()
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	edx = 0x78787879<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	edx_eax = edx *s eax
	SCZO = cond(edx_eax)
	edx = edx >> 3<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	eax = eax >> 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = edx - eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx << 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	edx = edx + eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	eax = eax - edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbp + 0x24<64>:word32] = eax
	Mem0[rbp + 0x73<64>:byte] = 1<8>
	edx = Mem0[rbp + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 0x60<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(edx - eax)
	branch Test(NE,Z) l00000000004023E5
	// succ:  l00000000004023D2 l00000000004023E5
l00000000004023D2:
	edx = Mem0[rbp + 0x24<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 0x5C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(edx - eax)
	branch Test(NE,Z) l00000000004023E5
	// succ:  l00000000004023DC l00000000004023E5
l00000000004023DC:
	Mem0[rbp + 0x73<64>:byte] = 0<8>
	goto l0000000000402465
	// succ:  l0000000000402465
l00000000004023E5:
	edx = Mem0[rbp + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 0x3C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(edx - eax)
	branch Test(NE,Z) l00000000004023FF
	// succ:  l00000000004023EF l00000000004023FF
l00000000004023EF:
	edx = Mem0[rbp + 0x24<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[rbp - 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(edx - eax)
	branch Test(NE,Z) l00000000004023FF
	// succ:  l00000000004023F9 l00000000004023FF
l00000000004023F9:
	Mem0[rbp + 0x73<64>:byte] = 0<8>
	goto l0000000000402465
	// succ:  l0000000000402465
l00000000004023FF:
	Mem0[rbp + 0x6C<64>:word32] = 0<32>
	goto l000000000040245D
	// succ:  l000000000040245D
l0000000000402408:
	ebx = Mem0[rbp + 0x20<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	eax = Mem0[rbp + 0x6C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = rbp - 0x60<64>
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B700 (retsize: 8;)
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ebx - eax)
	branch Test(NE,Z) l000000000040244C
	// succ:  l0000000000402426 l000000000040244C
l0000000000402426:
	ebx = Mem0[rbp + 0x24<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	eax = Mem0[rbp + 0x6C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = rbp - 0x60<64>
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000046B700 (retsize: 8;)
	eax = Mem0[rax + 4<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(ebx - eax)
	branch Test(NE,Z) l000000000040244C
	// succ:  l0000000000402445 l000000000040244C
l0000000000402445:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000402451
	// succ:  l0000000000402451
l000000000040244C:
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000402451
l0000000000402451:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000402459
	// succ:  l0000000000402455 l0000000000402459
l0000000000402455:
	Mem0[rbp + 0x73<64>:byte] = 0<8>
	// succ:  l0000000000402459
l0000000000402459:
	v30 = Mem0[rbp + 0x6C<64>:word32] + 1<32>
	Mem0[rbp + 0x6C<64>:word32] = v30
	SCZO = cond(v30)
	// succ:  l000000000040245D
l000000000040245D:
	eax = Mem0[rbp - 0x40<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - Mem0[rbp + 0x6C<64>:word32])
	branch Test(GT,SZO) l0000000000402408
	// succ:  l0000000000402465 l0000000000402408
l0000000000402465:
	SCZO = cond(Mem0[rbp + 0x73<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000040248F
	// succ:  l000000000040246B l000000000040248F
l000000000040246B:
	eax = Mem0[rbp + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x30<64>:word16] = ax
	eax = Mem0[rbp + 0x24<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp + 0x32<64>:word16] = ax
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	goto l0000000000402494
	// succ:  l0000000000402494
l000000000040248F:
	goto l0000000000402369
	// succ:  l0000000000402369
l0000000000402494:
	edx = 0xFFFFFFA6<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473980 (retsize: 8;)
	// succ:  l00000000004024A5
l00000000004024A5:
	Mem0[rbp + 0x30<64>:word16] = 0<16>
	Mem0[rbp + 0x32<64>:word16] = 0<16>
	edx = Mem0[rbp + 0x30<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x60<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	goto l0000000000401B9F
	// succ:  l0000000000401B9F
l00000000004024C9:
	rax = rbp - 0x60<64>
	rcx = rax
	call fn0000000000424980 (retsize: 8;)
	// succ:  l00000000004024F2
l00000000004024F2:
	rsp = rsp + 0x128<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000401530_exit
fn0000000000401530_exit:


// fn00000000004024FC
// Return size: 8
define fn00000000004024FC
fn00000000004024FC_entry:
	rsp = fp
	// succ:  l00000000004024FC
l00000000004024FC:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	Mem0[rbp + 0x10<64>:word32] = ecx
	Mem0[rbp + 0x18<64>:word64] = rdx
	call fn0000000000410890 (retsize: 8;)
	rcx = 0x000000000048D0AD<p64>
	eax = _mkdir(rcx)
	call fn000000000040252C (retsize: 8;)
	eax = 0<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004024FC_exit
fn00000000004024FC_exit:


// fn000000000040252C
// Return size: 8
define fn000000000040252C
fn000000000040252C_entry:
	rsp = fp
	// succ:  l000000000040252C
l000000000040252C:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x258<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	// succ:  l000000000040253D
l000000000040253D:
	ecx = 0xFFFFFFF5<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = GetStdHandle
	rax = GetStdHandle(rcx)
	Mem0[rbp + 0x1C0<64>:word64] = rax
	Mem0[rbp + 0x1BC<64>:word32] = 0xE<32>
	Mem0[rbp + 0x1B8<64>:word32] = 0xA<32>
	Mem0[rbp + 0x1B4<64>:word32] = 4<32>
	rcx = 0x000000000048D003<p64>
	eax = system(rcx)
	Mem0[rbp + 0x180<64>:word16] = 0<16>
	Mem0[rbp + 0x182<64>:word16] = 0<16>
	rdx = 0x000000000048D0B4<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	rdx = 0x000000000048D0B8<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	rdx = 0x000000000048D211<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	rdx = 0x000000000048D220<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	rdx = 0x000000000048D230<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	rdx = 0x000000000048D23D<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	Mem0[rbp + 0x180<64>:word16] = 0x24<16>
	Mem0[rbp + 0x182<64>:word16] = 0xA<16>
	edx = Mem0[rbp + 0x180<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x1C0<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x000000000048D246<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	Mem0[rbp + 0x180<64>:word16] = 0x2C<16>
	Mem0[rbp + 0x182<64>:word16] = 0xC<16>
	edx = Mem0[rbp + 0x180<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x1C0<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x000000000048D255<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	rax = rbp - 0x60<64>
	r8d = 4<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = 0x000000000048D26F<p64>
	rcx = rax
	call fn000000000045F530 (retsize: 8;)
	rax = rbp - 0x60<64>
	rax = rax + 0xD0<64>
	SCZO = cond(rax)
	rcx = rax
	call fn00000000004423E0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004026E9
	// succ:  l00000000004026AB l00000000004026E9
l00000000004026AB:
	Mem0[rbp + 0x180<64>:word16] = 0xE<16>
	Mem0[rbp + 0x182<64>:word16] = 0x16<16>
	edx = Mem0[rbp + 0x180<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x1C0<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x000000000048D283<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	// succ:  l00000000004026E9
l00000000004026E9:
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0x60<64>
	r8 = rdx
	rdx = 0x0000000000477010<p64>
	rcx = rax
	call fn000000000044CAB0 (retsize: 8;)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0x60<64>
	r8 = rdx
	rdx = 0x00000000004AD030<p64>
	rcx = rax
	call fn000000000044CAB0 (retsize: 8;)
	eax = Mem0[0x0000000000477010<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(NE,Z) l0000000000402753
	// succ:  l000000000040272A l0000000000402753
l000000000040272A:
	eax = Mem0[0x0000000000477010<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax *s 0x64<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x00000000004AD034<p64>:word32] = eax
	edx = Mem0[0x0000000000477010<p64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[0x00000000004AD034<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax *s edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax - 0x1E<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x00000000004AD038<p64>:word32] = eax
	goto l000000000040278E
	// succ:  l000000000040278E
l0000000000402753:
	eax = Mem0[0x0000000000477010<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax *s 0x64<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x00000000004AD034<p64>:word32] = eax
	edx = Mem0[0x0000000000477010<p64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[0x00000000004AD034<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ecx = edx
	rcx = CONVERT(ecx, word32, uint64)
	ecx = ecx *s eax
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	edx = 0x55555556<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	edx_eax = edx *s eax
	SCZO = cond(edx_eax)
	eax = ecx
	rax = CONVERT(eax, word32, uint64)
	eax = eax >> 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = edx - eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	eax = edx
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 0x32<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x00000000004AD038<p64>:word32] = eax
	// succ:  l000000000040278E
l000000000040278E:
	rax = rbp - 0x60<64>
	rcx = rax
	call fn000000000045FBD0 (retsize: 8;)
	Mem0[rbp + 0x1CC<64>:word32] = 1<32>
	// succ:  l00000000004027A4
l00000000004027A4:
	Mem0[rbp + 0x180<64>:word16] = 0xE<16>
	eax = Mem0[rbp + 0x1CC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 5<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbp + 0x182<64>:word16] = ax
	edx = Mem0[rbp + 0x180<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x1C0<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x000000000048D2A0<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	call getch (retsize: 8;)
	Mem0[rbp + 0x1B3<64>:byte] = al
	eax = CONVERT(Mem0[rbp + 0x1B3<64>:byte], byte, int32)
	SCZO = cond(eax - 0x48<32>)
	branch Test(EQ,Z) l0000000000402819
	// succ:  l0000000000402802 l0000000000402819
l0000000000402802:
	SCZO = cond(eax - 0x50<32>)
	branch Test(EQ,Z) l0000000000402890
	// succ:  l000000000040280B l0000000000402890
l000000000040280B:
	SCZO = cond(eax - 0xD<32>)
	branch Test(EQ,Z) l0000000000402907
	// succ:  l0000000000402814 l0000000000402907
l0000000000402814:
	goto l0000000000402A08
	// succ:  l0000000000402A08
l0000000000402819:
	Mem0[rbp + 0x180<64>:word16] = 0xE<16>
	eax = Mem0[rbp + 0x1CC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 5<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbp + 0x182<64>:word16] = ax
	edx = Mem0[rbp + 0x180<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x1C0<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x000000000048D2A3<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x1CC<64>:word32] - 1<32>)
	branch Test(NE,Z) l0000000000402875
	// succ:  l0000000000402869 l0000000000402875
l0000000000402869:
	Mem0[rbp + 0x1CC<64>:word32] = 4<32>
	goto l000000000040287C
	// succ:  l000000000040287C
l0000000000402875:
	v21 = Mem0[rbp + 0x1CC<64>:word32] - 1<32>
	Mem0[rbp + 0x1CC<64>:word32] = v21
	SCZO = cond(v21)
	// succ:  l000000000040287C
l000000000040287C:
	eax = Mem0[rbp + 0x1CC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbp + 0x182<64>:word16] = ax
	goto l0000000000402A08
	// succ:  l0000000000402A08
l0000000000402890:
	Mem0[rbp + 0x180<64>:word16] = 0xE<16>
	eax = Mem0[rbp + 0x1CC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 5<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbp + 0x182<64>:word16] = ax
	edx = Mem0[rbp + 0x180<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x1C0<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x000000000048D2A3<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x1CC<64>:word32] - 4<32>)
	branch Test(NE,Z) l00000000004028EC
	// succ:  l00000000004028E0 l00000000004028EC
l00000000004028E0:
	Mem0[rbp + 0x1CC<64>:word32] = 1<32>
	goto l00000000004028F3
	// succ:  l00000000004028F3
l00000000004028EC:
	v20 = Mem0[rbp + 0x1CC<64>:word32] + 1<32>
	Mem0[rbp + 0x1CC<64>:word32] = v20
	SCZO = cond(v20)
	// succ:  l00000000004028F3
l00000000004028F3:
	eax = Mem0[rbp + 0x1CC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbp + 0x182<64>:word16] = ax
	goto l0000000000402A08
	// succ:  l0000000000402A08
l0000000000402907:
	eax = Mem0[rbp + 0x1CC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000040299D
	// succ:  l0000000000402916 l000000000040299D
l0000000000402916:
	SCZO = cond(eax - 2<32>)
	branch Test(GT,SZO) l0000000000402925
	// succ:  l000000000040291B l0000000000402925
l000000000040291B:
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040293C
	// succ:  l0000000000402920 l000000000040293C
l0000000000402920:
	goto l0000000000402A08
	// succ:  l0000000000402A08
l0000000000402925:
	SCZO = cond(eax - 3<32>)
	branch Test(EQ,Z) l00000000004029FE
	// succ:  l000000000040292E l00000000004029FE
l000000000040292E:
	SCZO = cond(eax - 4<32>)
	branch Test(EQ,Z) l0000000000402A89
	// succ:  l0000000000402937 l0000000000402A89
l0000000000402937:
	goto l0000000000402A08
	// succ:  l0000000000402A08
l000000000040293C:
	rax = rbp + 0x19F<64>
	rcx = rax
	call fn0000000000448D80 (retsize: 8;)
	rdx = rbp + 0x19F<64>
	rax = rbp + 0x190<64>
	r8 = rdx
	rdx = 0x000000000048D2A6<p64>
	rcx = rax
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbp + 0x190<64>
	rcx = rax
	call fn0000000000401530 (retsize: 8;)
	rax = rbp + 0x190<64>
	rcx = rax
	call fn0000000000452410 (retsize: 8;)
	rax = rbp + 0x19F<64>
	rcx = rax
	call fn0000000000448DB0 (retsize: 8;)
	goto l000000000040253D
	// succ:  l000000000040253D
l000000000040299D:
	rax = rbp + 0x1B2<64>
	rcx = rax
	call fn0000000000448D80 (retsize: 8;)
	rdx = rbp + 0x1B2<64>
	rax = rbp + 0x1A0<64>
	r8 = rdx
	rdx = 0x000000000048D00B<p64>
	rcx = rax
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbp + 0x1A0<64>
	rcx = rax
	call fn0000000000401530 (retsize: 8;)
	rax = rbp + 0x1A0<64>
	rcx = rax
	call fn0000000000452410 (retsize: 8;)
	rax = rbp + 0x1B2<64>
	rcx = rax
	call fn0000000000448DB0 (retsize: 8;)
	goto l000000000040253D
	// succ:  l000000000040253D
l00000000004029FE:
	call fn0000000000402E6F (retsize: 8;)
	goto l000000000040253D
	// succ:  l000000000040253D
l0000000000402A08:
	goto l00000000004027A4
	// succ:  l00000000004027A4
l0000000000402A89:
	rsp = rsp + 0x258<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000040252C_exit
fn000000000040252C_exit:


// fn0000000000402A94
// Return size: 8
define fn0000000000402A94
fn0000000000402A94_entry:
	rsp = fp
	// succ:  l0000000000402A94
l0000000000402A94:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x208<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp + 0x1A0<64>:word64] = rcx
	Mem0[rbp + 0x1A8<64>:word64] = rdx
	Mem0[rbp + 0x1B0<64>:word64] = r8
	Mem0[rbp + 0x1B8<64>:word64] = r9
	rax = rbp - 0x60<64>
	r8d = 4<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = 0x000000000048D096<p64>
	rcx = rax
	call fn0000000000460A00 (retsize: 8;)
	rax = rbp - 0x60<64>
	rax = rax + 0xC8<64>
	SCZO = cond(rax)
	rcx = rax
	call fn00000000004423E0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000402B0D
	// succ:  l0000000000402AF0 l0000000000402B0D
l0000000000402AF0:
	rdx = 0x000000000048D2B0<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	ebx = 0<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000402C13
	// succ:  l0000000000402C13
l0000000000402B0D:
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0x60<64>
	r8 = rdx
	rdx = Mem0[rbp + 0x1A0<64>:word64]
	rcx = rax
	call fn000000000044EC10 (retsize: 8;)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	rdx = Mem0[rbp + 0x1A8<64>:word64]
	rax = rbp - 0x60<64>
	r8 = rcx
	rcx = rax
	call fn000000000044EC10 (retsize: 8;)
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	rdx = Mem0[rbp + 0x1B0<64>:word64]
	rax = rbp - 0x60<64>
	r8 = rcx
	rcx = rax
	call fn000000000044EC10 (retsize: 8;)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	rdx = Mem0[rbp + 0x1B8<64>:word64]
	rax = rbp - 0x60<64>
	r8 = rcx
	rcx = rax
	call fn000000000044EC10 (retsize: 8;)
	ecx = 4<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = Mem0[rbp + 0x1B8<64>:word64]
	rdx = rax + 0x20<64>
	rax = rbp - 0x60<64>
	r8 = rcx
	rcx = rax
	call fn000000000044EC10 (retsize: 8;)
	Mem0[rbp + 0x17C<64>:word32] = 0<32>
	goto l0000000000402BDD
	// succ:  l0000000000402BDD
l0000000000402BA4:
	ebx = 8<32>
	rbx = CONVERT(ebx, word32, uint64)
	eax = Mem0[rbp + 0x17C<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(eax, int32, int64)
	rdx = Mem0[rbp + 0x1B8<64>:word64]
	rcx = rdx + 8<64>
	rdx = rax
	call fn000000000042C0B0 (retsize: 8;)
	rdx = rax
	rax = rbp - 0x60<64>
	r8 = rbx
	rcx = rax
	call fn000000000044EC10 (retsize: 8;)
	v20 = Mem0[rbp + 0x17C<64>:word32] + 1<32>
	Mem0[rbp + 0x17C<64>:word32] = v20
	SCZO = cond(v20)
	// succ:  l0000000000402BDD
l0000000000402BDD:
	rax = Mem0[rbp + 0x1B8<64>:word64]
	eax = Mem0[rax + 0x20<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - Mem0[rbp + 0x17C<64>:word32])
	branch Test(GT,SZO) l0000000000402BA4
	// succ:  l0000000000402BEF l0000000000402BA4
l0000000000402BEF:
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = Mem0[rbp + 0x1B8<64>:word64]
	rdx = rax + 0x24<64>
	rax = rbp - 0x60<64>
	r8 = rcx
	rcx = rax
	call fn000000000044EC10 (retsize: 8;)
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000402C13
l0000000000402C13:
	rax = rbp - 0x60<64>
	rcx = rax
	call fn0000000000461040 (retsize: 8;)
	SCZO = cond(ebx - 1<32>)
	branch Test(EQ,Z) l0000000000402C26
	// succ:  l0000000000402C24 l0000000000402C26
l0000000000402C24:
	goto l0000000000402C44
	// succ:  l0000000000402C44
l0000000000402C26:
	// succ:  l0000000000402C44
l0000000000402C44:
	rsp = rsp + 0x208<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000402A94_exit
fn0000000000402A94_exit:


// fn0000000000402C4E
// Return size: 8
define fn0000000000402C4E
fn0000000000402C4E_entry:
	rsp = fp
	// succ:  l0000000000402C4E
l0000000000402C4E:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x268<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp + 0x200<64>:word64] = rcx
	Mem0[rbp + 0x208<64>:word64] = rdx
	Mem0[rbp + 0x210<64>:word64] = r8
	Mem0[rbp + 0x218<64>:word64] = r9
	rax = rbp - 0x50<64>
	r8d = 4<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = 0x000000000048D096<p64>
	rcx = rax
	call fn000000000045F530 (retsize: 8;)
	rax = rbp - 0x50<64>
	rax = rax + 0xD0<64>
	SCZO = cond(rax)
	rcx = rax
	call fn00000000004423E0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000402CB4
	// succ:  l0000000000402CAA l0000000000402CB4
l0000000000402CAA:
	ebx = 0<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000402E27
	// succ:  l0000000000402E27
l0000000000402CB4:
	Mem0[rbp + 0x1D8<64>:word32] = 0<32>
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0x50<64>
	r8 = rdx
	rdx = Mem0[rbp + 0x200<64>:word64]
	rcx = rax
	call fn000000000044CAB0 (retsize: 8;)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	rdx = Mem0[rbp + 0x208<64>:word64]
	rax = rbp - 0x50<64>
	r8 = rcx
	rcx = rax
	call fn000000000044CAB0 (retsize: 8;)
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	rdx = Mem0[rbp + 0x210<64>:word64]
	rax = rbp - 0x50<64>
	r8 = rcx
	rcx = rax
	call fn000000000044CAB0 (retsize: 8;)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	rdx = rbp + 0x1D0<64>
	rax = rbp - 0x50<64>
	r8 = rcx
	rcx = rax
	call fn000000000044CAB0 (retsize: 8;)
	Mem0[rbp + 0x1CC<64>:word32] = 0<32>
	ecx = 4<32>
	rcx = CONVERT(ecx, word32, uint64)
	rdx = rbp + 0x1CC<64>
	rax = rbp - 0x50<64>
	r8 = rcx
	rcx = rax
	call fn000000000044CAB0 (retsize: 8;)
	rax = rbp + 0x1B0<64>
	rcx = rax
	call fn000000000046B690 (retsize: 8;)
	eax = Mem0[rbp + 0x1CC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = CONVERT(eax, word32, int64)
	rax = rbp + 0x1B0<64>
	rcx = rax
	call fn000000000046B4B0 (retsize: 8;)
	Mem0[rbp + 0x1DC<64>:word32] = 0<32>
	goto l0000000000402DBA
	// succ:  l0000000000402DBA
l0000000000402D82:
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	rdx = rbp + 0x190<64>
	rax = rbp - 0x50<64>
	r8 = rcx
	rcx = rax
	call fn000000000044CAB0 (retsize: 8;)
	rdx = rbp + 0x190<64>
	rax = rbp + 0x1B0<64>
	rcx = rax
	call fn000000000046B620 (retsize: 8;)
	v21 = Mem0[rbp + 0x1DC<64>:word32] + 1<32>
	Mem0[rbp + 0x1DC<64>:word32] = v21
	SCZO = cond(v21)
	// succ:  l0000000000402DBA
l0000000000402DBA:
	eax = Mem0[rbp + 0x1CC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[rbp + 0x1DC<64>:word32] - eax)
	branch Test(LT,SO) l0000000000402D82
	// succ:  l0000000000402DC8 l0000000000402D82
l0000000000402DC8:
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	rdx = rbp + 0x1A0<64>
	rax = rbp - 0x50<64>
	r8 = rcx
	rcx = rax
	call fn000000000044CAB0 (retsize: 8;)
	r8d = Mem0[rbp + 0x1CC<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	r9 = rbp + 0x1B0<64>
	rdx = rbp + 0x1D0<64>
	rax = Mem0[rbp + 0x218<64>:word64]
	rcx = rbp + 0x1A0<64>
	Mem0[rsp + 0x20<64>:word64] = rcx
	rcx = rax
	call fn00000000004247F0 (retsize: 8;)
	ebx = 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	rax = rbp + 0x1B0<64>
	rcx = rax
	call fn000000000046B6B0 (retsize: 8;)
	// succ:  l0000000000402E27
l0000000000402E27:
	rax = rbp - 0x50<64>
	rcx = rax
	call fn000000000045FBD0 (retsize: 8;)
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000402E65
l0000000000402E65:
	rsp = rsp + 0x268<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000402C4E_exit
fn0000000000402C4E_exit:


// fn0000000000402E6F
// Return size: 8
define fn0000000000402E6F
fn0000000000402E6F_entry:
	rsp = fp
	// succ:  l0000000000402E6F
l0000000000402E6F:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x248<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	rcx = 0x000000000048D003<p64>
	eax = system(rcx)
	Mem0[rbp + 0x1B8<64>:word32] = 6<32>
	Mem0[rbp + 0x1B4<64>:word32] = 3<32>
	Mem0[rbp + 0x1B0<64>:word32] = 3<32>
	rbx = rbp + 0x180<64>
	esi = 2<32>
	rsi = CONVERT(esi, word32, uint64)
	rax = rbp + 0x1A4<64>
	rcx = rax
	call fn0000000000448D80 (retsize: 8;)
	rax = rbp + 0x1A4<64>
	r8 = rax
	rdx = 0x000000000048D2E9<p64>
	rcx = rbx
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbp + 0x1A4<64>
	rcx = rax
	call fn0000000000448DB0 (retsize: 8;)
	rdi = rbx + 8<64>
	rsi = rsi - 1<64>
	SCZO = cond(rsi)
	rax = rbp + 0x1A5<64>
	rcx = rax
	call fn0000000000448D80 (retsize: 8;)
	rax = rbp + 0x1A5<64>
	r8 = rax
	rdx = 0x000000000048D2F0<p64>
	rcx = rdi
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbp + 0x1A5<64>
	rcx = rax
	call fn0000000000448DB0 (retsize: 8;)
	rdi = rdi + 8<64>
	SCZO = cond(rdi)
	rsi = rsi - 1<64>
	SCZO = cond(rsi)
	rax = rbp + 0x1A6<64>
	rcx = rax
	call fn0000000000448D80 (retsize: 8;)
	rax = rbp + 0x1A6<64>
	r8 = rax
	rdx = 0x000000000048D2F8<p64>
	rcx = rdi
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbp + 0x1A6<64>
	rcx = rax
	call fn0000000000448DB0 (retsize: 8;)
	ecx = 0xFFFFFFF5<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = GetStdHandle
	rax = GetStdHandle(rcx)
	Mem0[rbp + 0x1A8<64>:word64] = rax
	Mem0[rbp + 0x170<64>:word16] = 0<16>
	Mem0[rbp + 0x172<64>:word16] = 0<16>
	rdx = 0x000000000048D300<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	rdx = 0x000000000048D312<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	rdx = 0x000000000048D321<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	rdx = 0x000000000048D335<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	Mem0[rbp + 0x1BC<64>:word32] = 1<32>
	// succ:  l0000000000402FEA
l0000000000402FEA:
	rax = rbp - 0x60<64>
	r8d = 4<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = 0x000000000048D26F<p64>
	rcx = rax
	call fn0000000000460A00 (retsize: 8;)
	rax = rbp - 0x60<64>
	rax = rax + 0xC8<64>
	SCZO = cond(rax)
	rcx = rax
	call fn00000000004423E0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000403057
	// succ:  l0000000000403019 l0000000000403057
l0000000000403019:
	Mem0[rbp + 0x170<64>:word16] = 6<16>
	Mem0[rbp + 0x172<64>:word16] = 0xD<16>
	edx = Mem0[rbp + 0x170<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x1A8<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x000000000048D340<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	// succ:  l0000000000403057
l0000000000403057:
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0x60<64>
	r8 = rdx
	rdx = 0x0000000000477010<p64>
	rcx = rax
	call fn000000000044EC10 (retsize: 8;)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp - 0x60<64>
	r8 = rdx
	rdx = 0x00000000004AD030<p64>
	rcx = rax
	call fn000000000044EC10 (retsize: 8;)
	rax = rbp - 0x60<64>
	rcx = rax
	call fn0000000000461040 (retsize: 8;)
	Mem0[rbp + 0x170<64>:word16] = 0x24<16>
	Mem0[rbp + 0x172<64>:word16] = 5<16>
	edx = Mem0[rbp + 0x170<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x1A8<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	eax = Mem0[0x0000000000477010<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	rax = rbp + 0x180<64>
	rdx = CONVERT(edx, word32, int64)
	rdx = rdx << 3<64>
	SCZO = cond(rdx)
	rax = rax + rdx
	SCZO = cond(rax)
	rdx = rax
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn0000000000473B00 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	Mem0[rbp + 0x170<64>:word16] = 0x24<16>
	Mem0[rbp + 0x172<64>:word16] = 7<16>
	edx = Mem0[rbp + 0x170<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x1A8<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	eax = CONVERT(Mem0[0x00000000004AD030<p64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000040312F
	// succ:  l0000000000403126 l000000000040312F
l0000000000403126:
	rax = 0x000000000048D372<p64>
	goto l0000000000403136
	// succ:  l0000000000403136
l000000000040312F:
	rax = 0x000000000048D376<p64>
	// succ:  l0000000000403136
l0000000000403136:
	rdx = rax
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	Mem0[rbp + 0x170<64>:word16] = 6<16>
	eax = Mem0[rbp + 0x1BC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbp + 0x172<64>:word16] = ax
	edx = Mem0[rbp + 0x170<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x1A8<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x000000000048D2A0<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	call getch (retsize: 8;)
	Mem0[rbp + 0x1A7<64>:byte] = al
	eax = CONVERT(Mem0[rbp + 0x1A7<64>:byte], byte, int32)
	SCZO = cond(eax - 0x48<32>)
	branch Test(EQ,Z) l00000000004031EE
	// succ:  l00000000004031A3 l00000000004031EE
l00000000004031A3:
	SCZO = cond(eax - 0x48<32>)
	branch Test(GT,SZO) l00000000004031BB
	// succ:  l00000000004031A8 l00000000004031BB
l00000000004031A8:
	SCZO = cond(eax - 0xD<32>)
	branch Test(EQ,Z) l00000000004031DB
	// succ:  l00000000004031AD l00000000004031DB
l00000000004031AD:
	SCZO = cond(eax - 0x1B<32>)
	branch Test(EQ,Z) l00000000004033C9
	// succ:  l00000000004031B6 l00000000004033C9
l00000000004031B6:
	goto l00000000004033C4
	// succ:  l00000000004033C4
l00000000004031BB:
	SCZO = cond(eax - 0x4D<32>)
	branch Test(EQ,Z) l0000000000403352
	// succ:  l00000000004031C4 l0000000000403352
l00000000004031C4:
	SCZO = cond(eax - 0x50<32>)
	branch Test(EQ,Z) l0000000000403265
	// succ:  l00000000004031CD l0000000000403265
l00000000004031CD:
	SCZO = cond(eax - 0x4B<32>)
	branch Test(EQ,Z) l00000000004032DC
	// succ:  l00000000004031D6 l00000000004032DC
l00000000004031D6:
	goto l00000000004033C4
	// succ:  l00000000004033C4
l00000000004031DB:
	SCZO = cond(Mem0[rbp + 0x1BC<64>:word32] - 3<32>)
	branch Test(NE,Z) l00000000004031E9
	// succ:  l00000000004031E4 l00000000004031E9
l00000000004031E4:
	goto l00000000004033CA
	// succ:  l00000000004033CA
l00000000004031E9:
	goto l00000000004033C4
	// succ:  l00000000004033C4
l00000000004031EE:
	Mem0[rbp + 0x170<64>:word16] = 6<16>
	eax = Mem0[rbp + 0x1BC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbp + 0x172<64>:word16] = ax
	edx = Mem0[rbp + 0x170<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x1A8<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x000000000048D2A3<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x1BC<64>:word32] - 1<32>)
	branch Test(NE,Z) l000000000040324A
	// succ:  l000000000040323E l000000000040324A
l000000000040323E:
	Mem0[rbp + 0x1BC<64>:word32] = 3<32>
	goto l0000000000403251
	// succ:  l0000000000403251
l000000000040324A:
	v23 = Mem0[rbp + 0x1BC<64>:word32] - 1<32>
	Mem0[rbp + 0x1BC<64>:word32] = v23
	SCZO = cond(v23)
	// succ:  l0000000000403251
l0000000000403251:
	eax = Mem0[rbp + 0x1BC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbp + 0x172<64>:word16] = ax
	goto l00000000004033C4
	// succ:  l00000000004033C4
l0000000000403265:
	Mem0[rbp + 0x170<64>:word16] = 6<16>
	eax = Mem0[rbp + 0x1BC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax + 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbp + 0x172<64>:word16] = ax
	edx = Mem0[rbp + 0x170<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbp + 0x1A8<64>:word64]
	rcx = rax
	rax = SetConsoleCursorPosition
	eax = SetConsoleCursorPosition(rcx, rdx)
	rdx = 0x000000000048D2A3<p64>
	rcx = Mem0[0x0000000000491AD0<p64>:word64]
	call fn00000000004738C0 (retsize: 8;)
	SCZO = cond(Mem0[rbp + 0x1BC<64>:word32] - 3<32>)
	branch Test(NE,Z) l00000000004032C1
	// succ:  l00000000004032B5 l00000000004032C1
l00000000004032B5:
	Mem0[rbp + 0x1BC<64>:word32] = 1<32>
	goto l00000000004032C8
	// succ:  l00000000004032C8
l00000000004032C1:
	v22 = Mem0[rbp + 0x1BC<64>:word32] + 1<32>
	Mem0[rbp + 0x1BC<64>:word32] = v22
	SCZO = cond(v22)
	// succ:  l00000000004032C8
l00000000004032C8:
	eax = Mem0[rbp + 0x1BC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbp + 0x172<64>:word16] = ax
	goto l00000000004033C4
	// succ:  l00000000004033C4
l00000000004032DC:
	eax = Mem0[rbp + 0x1BC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l00000000004032F1
	// succ:  l00000000004032E7 l00000000004032F1
l00000000004032E7:
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l0000000000403325
	// succ:  l00000000004032EC l0000000000403325
l00000000004032EC:
	goto l00000000004033C4
	// succ:  l00000000004033C4
l00000000004032F1:
	eax = Mem0[0x0000000000477010<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 2<32>)
	branch Test(LE,SZO) l0000000000403308
	// succ:  l00000000004032FC l0000000000403308
l00000000004032FC:
	Mem0[0x0000000000477010<p64>:word32] = 1<32>
	goto l0000000000403317
	// succ:  l0000000000403317
l0000000000403308:
	eax = Mem0[0x0000000000477010<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000477010<p64>:word32] = eax
	// succ:  l0000000000403317
l0000000000403317:
	rcx = 0x000000000048D096<p64>
	call msvcrt.dll!remove (retsize: 8;)
	goto l0000000000403350
	// succ:  l0000000000403350
l0000000000403325:
	eax = CONVERT(Mem0[0x00000000004AD030<p64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000000040333C
	// succ:  l0000000000403333 l000000000040333C
l0000000000403333:
	Mem0[0x00000000004AD030<p64>:byte] = 1<8>
	goto l0000000000403343
	// succ:  l0000000000403343
l000000000040333C:
	Mem0[0x00000000004AD030<p64>:byte] = 0<8>
	// succ:  l0000000000403343
l0000000000403343:
	rcx = 0x000000000048D096<p64>
	call msvcrt.dll!remove (retsize: 8;)
	// succ:  l0000000000403350
l0000000000403350:
	goto l00000000004033C4
	// succ:  l00000000004033C4
l0000000000403352:
	eax = Mem0[rbp + 0x1BC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l0000000000403364
	// succ:  l000000000040335D l0000000000403364
l000000000040335D:
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l0000000000403398
	// succ:  l0000000000403362 l0000000000403398
l0000000000403362:
	goto l00000000004033C3
	// succ:  l00000000004033C3
l0000000000403364:
	eax = Mem0[0x0000000000477010<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(GT,SZO) l000000000040337B
	// succ:  l000000000040336F l000000000040337B
l000000000040336F:
	Mem0[0x0000000000477010<p64>:word32] = 3<32>
	goto l000000000040338A
	// succ:  l000000000040338A
l000000000040337B:
	eax = Mem0[0x0000000000477010<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x0000000000477010<p64>:word32] = eax
	// succ:  l000000000040338A
l000000000040338A:
	rcx = 0x000000000048D096<p64>
	call msvcrt.dll!remove (retsize: 8;)
	goto l00000000004033C3
	// succ:  l00000000004033C3
l0000000000403398:
	eax = CONVERT(Mem0[0x00000000004AD030<p64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax ^ 1<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004033AF
	// succ:  l00000000004033A6 l00000000004033AF
l00000000004033A6:
	Mem0[0x00000000004AD030<p64>:byte] = 1<8>
	goto l00000000004033B6
	// succ:  l00000000004033B6
l00000000004033AF:
	Mem0[0x00000000004AD030<p64>:byte] = 0<8>
	// succ:  l00000000004033B6
l00000000004033B6:
	rcx = 0x000000000048D096<p64>
	call msvcrt.dll!remove (retsize: 8;)
	// succ:  l00000000004033C3
l00000000004033C3:
	// succ:  l00000000004033C4
l00000000004033C4:
	goto l0000000000402FEA
	// succ:  l0000000000402FEA
l00000000004033C9:
	// succ:  l00000000004033CA
l00000000004033CA:
	rbx = rbp + 0x180<64>
	rbx = rbx + 0x18<64>
	SCZO = cond(rbx)
	// succ:  l00000000004033D5
l00000000004033D5:
	rax = rbp + 0x180<64>
	SCZO = cond(rbx - rax)
	branch Test(EQ,Z) l00000000004034A8
	// succ:  l00000000004033E5 l00000000004034A8
l00000000004033E5:
	rbx = rbx - 8<64>
	SCZO = cond(rbx)
	rcx = rbx
	call fn0000000000452410 (retsize: 8;)
	goto l00000000004033D5
	// succ:  l00000000004033D5
l00000000004034A8:
	rsp = rsp + 0x248<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000402E6F_exit
fn0000000000402E6F_exit:


// fn00000000004034B4
// Return size: 8
define fn00000000004034B4
fn00000000004034B4_entry:
	rsp = fp
	// succ:  l00000000004034B4
l00000000004034B4:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rcx = 0x00000000004AD03C<p64>
	call fn000000000046D120 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004034B4_exit
fn00000000004034B4_exit:


// fn00000000004034CF
// Return size: 8
define fn00000000004034CF
fn00000000004034CF_entry:
	rsp = fp
	// succ:  l00000000004034CF
l00000000004034CF:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rcx = 0x00000000004AD040<p64>
	call fn0000000000452410 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004034CF_exit
fn00000000004034CF_exit:


// fn00000000004034EA
// Return size: 8
define fn00000000004034EA
fn00000000004034EA_entry:
	rsp = fp
	// succ:  l00000000004034EA
l00000000004034EA:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rcx = 0x00000000004AD048<p64>
	call fn0000000000452410 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004034EA_exit
fn00000000004034EA_exit:


// fn0000000000403505
// Return size: 8
define fn0000000000403505
fn0000000000403505_entry:
	rsp = fp
	// succ:  l0000000000403505
l0000000000403505:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rcx = 0x00000000004AD050<p64>
	call fn0000000000452410 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000403505_exit
fn0000000000403505_exit:


// fn0000000000403520
// Return size: 8
define fn0000000000403520
fn0000000000403520_entry:
	rsp = fp
	// succ:  l0000000000403520
l0000000000403520:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rcx = 0x00000000004AD058<p64>
	call fn0000000000452410 (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000403520_exit
fn0000000000403520_exit:


// fn000000000040353B
// Return size: 8
define fn000000000040353B
fn000000000040353B_entry:
	rsp = fp
	// succ:  l000000000040353B
l000000000040353B:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	Mem0[rbp - 0x30<64>:word32] = ecx
	Mem0[rbp - 0x28<64>:word32] = edx
	SCZO = cond(Mem0[rbp - 0x30<64>:word32] - 1<32>)
	branch Test(NE,Z) l0000000000403708
	// succ:  l0000000000403559 l0000000000403708
l0000000000403559:
	SCZO = cond(Mem0[rbp - 0x28<64>:word32] - 0xFFFF<32>)
	branch Test(NE,Z) l0000000000403708
	// succ:  l0000000000403566 l0000000000403708
l0000000000403566:
	rcx = 0x00000000004AD03C<p64>
	call fn000000000046C940 (retsize: 8;)
	rcx = 0x00000000004034B4<p64>
	call fn0000000000410BF0 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = rbp - 0x54<64>
	rcx = rax
	call fn0000000000448D80 (retsize: 8;)
	rax = rbp - 0x54<64>
	r8 = rax
	rdx = 0x000000000048D3A6<p64>
	rcx = 0x00000000004AD040<p64>
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbp - 0x54<64>
	rcx = rax
	call fn0000000000448DB0 (retsize: 8;)
	rcx = 0x00000000004034CF<p64>
	call fn0000000000410BF0 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = rbp - 0x53<64>
	rcx = rax
	call fn0000000000448D80 (retsize: 8;)
	rax = rbp - 0x53<64>
	r8 = rax
	rdx = 0x000000000048D3AF<p64>
	rcx = 0x00000000004AD048<p64>
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbp - 0x53<64>
	rcx = rax
	call fn0000000000448DB0 (retsize: 8;)
	rcx = 0x00000000004034EA<p64>
	call fn0000000000410BF0 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = rbp - 0x52<64>
	rcx = rax
	call fn0000000000448D80 (retsize: 8;)
	rax = rbp - 0x52<64>
	r8 = rax
	rdx = 0x000000000048D3C1<p64>
	rcx = 0x00000000004AD050<p64>
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbp - 0x52<64>
	rcx = rax
	call fn0000000000448DB0 (retsize: 8;)
	rcx = 0x0000000000403505<p64>
	call fn0000000000410BF0 (retsize: 8;)
	rsp = rsp + 8<64>
	rax = rbp - 0x51<64>
	rcx = rax
	call fn0000000000448D80 (retsize: 8;)
	rax = rbp - 0x51<64>
	r8 = rax
	rdx = 0x000000000048D3D4<p64>
	rcx = 0x00000000004AD058<p64>
	call fn0000000000451EA0 (retsize: 8;)
	rax = rbp - 0x51<64>
	rcx = rax
	call fn0000000000448DB0 (retsize: 8;)
	rcx = 0x0000000000403520<p64>
	call fn0000000000410BF0 (retsize: 8;)
	rsp = rsp + 8<64>
	eax = Mem0[0x0000000000477010<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax *s 0x64<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x00000000004AD034<p64>:word32] = eax
	edx = Mem0[0x0000000000477010<p64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = Mem0[0x00000000004AD034<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax *s edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax - 0x1E<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[0x00000000004AD038<p64>:word32] = eax
	// succ:  l0000000000403708
l0000000000403708:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000040353B_exit
fn000000000040353B_exit:


// fn000000000040370F
// Return size: 8
define fn000000000040370F
fn000000000040370F_entry:
	rsp = fp
	// succ:  l000000000040370F
l000000000040370F:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	edx = 0xFFFF<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	call fn000000000040353B (retsize: 8;)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000040370F_exit
fn000000000040370F_exit:


// fn0000000000403730
// Return size: 8
define fn0000000000403730
fn0000000000403730_entry:
	rsp = fp
	// succ:  l0000000000403730
l0000000000403730:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	SCZO = cond(edx - 0x4B<32>)
	branch Test(UGT,CZ) l00000000004037A0
	// succ:  l0000000000403736 l00000000004037A0
l0000000000403736:
	rax = 0x000000000048E880<p64>
	r10d = edx
	r10 = CONVERT(r10d, word32, uint64)
	r10 = CONVERT(Mem0[rax + r10 * 4<64>:word32], word32, int64)
	rax = rax + r10
	SCZO = cond(rax)
	switch (edx) { l00000000004037A0 l0000000000403790 l0000000000403790 l0000000000403790 l0000000000403790 l00000000004037A0 l00000000004037A0 l00000000004037A0 l00000000004037A0 l0000000000403750 l0000000000403750 l0000000000403790 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l00000000004037A0 l0000000000403755 l0000000000403755 l0000000000403755 l0000000000403755 l0000000000403755 l0000000000403755 l0000000000403755 l0000000000403755 l0000000000403790 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l00000000004037A0 l0000000000403750 l0000000000403755 l0000000000403795 l0000000000403790 l00000000004037A0 l0000000000403790 l0000000000403755 l0000000000403755 l0000000000403795 l00000000004037A0 l00000000004037A0 l0000000000403750 l0000000000403750 l0000000000403790 l0000000000403790 l0000000000403790 l0000000000403790 l0000000000403790 l0000000000403750 l0000000000403790 l0000000000403790 l0000000000403750 l0000000000403790 l00000000004037A0 l00000000004037A0 l0000000000403750 l0000000000403750 l0000000000403750 l00000000004037A0 l00000000004037A0 l00000000004037A0 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403790 l0000000000403790 }
	// succ:  l00000000004037A0 l0000000000403790 l0000000000403790 l0000000000403790 l0000000000403790 l00000000004037A0 l00000000004037A0 l00000000004037A0 l00000000004037A0 l0000000000403750 l0000000000403750 l0000000000403790 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l00000000004037A0 l0000000000403755 l0000000000403755 l0000000000403755 l0000000000403755 l0000000000403755 l0000000000403755 l0000000000403755 l0000000000403755 l0000000000403790 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403750 l00000000004037A0 l0000000000403750 l0000000000403755 l0000000000403795 l0000000000403790 l00000000004037A0 l0000000000403790 l0000000000403755 l0000000000403755 l0000000000403795 l00000000004037A0 l00000000004037A0 l0000000000403750 l0000000000403750 l0000000000403790 l0000000000403790 l0000000000403790 l0000000000403790 l0000000000403790 l0000000000403750 l0000000000403790 l0000000000403790 l0000000000403750 l0000000000403790 l00000000004037A0 l00000000004037A0 l0000000000403750 l0000000000403750 l0000000000403750 l00000000004037A0 l00000000004037A0 l00000000004037A0 l0000000000403750 l0000000000403750 l0000000000403750 l0000000000403790 l0000000000403790
l0000000000403750:
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l00000000004037A0
	// succ:  l0000000000403755 l00000000004037A0
l0000000000403755:
	r11d = Mem0[rcx + 0x28<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(r11d - Mem0[rcx + 0x2C<64>:word32])
	branch Test(GE,SO) l000000000040378B
	// succ:  l0000000000403761 l000000000040378B
l0000000000403761:
	r10 = CONVERT(r11d, word32, int64)
	r11d = r11d + 1<32>
	r11 = CONVERT(r11d, word32, uint64)
	SCZO = cond(r11d)
	rbx = r10 + r10 * 2<64>
	r10 = Mem0[rcx + 0x20<64>:word64]
	Mem0[rcx + 0x28<64>:word32] = r11d
	r10 = r10 + rbx * 8<64>
	SZO = cond(r10 & r10)
	C = false
	branch Test(EQ,Z) l000000000040378B
	// succ:  l000000000040377D l000000000040378B
l000000000040377D:
	Mem0[r10:word32] = edx
	Mem0[r10 + 8<64>:word64] = r8
	rax = r10
	Mem0[r10 + 0x10<64>:word64] = r9
	// succ:  l000000000040378B
l000000000040378B:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000403730_exit
l0000000000403790:
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l00000000004037A0
	// succ:  l0000000000403795 l00000000004037A0
l0000000000403795:
	SZO = cond(r9 & r9)
	C = false
	branch Test(NE,Z) l0000000000403755
	// succ:  l000000000040379A l0000000000403755
l000000000040379A:
	// succ:  l00000000004037A0
l00000000004037A0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000403730_exit
fn0000000000403730_exit:


// fn00000000004037B0
// Return size: 8
define fn00000000004037B0
fn00000000004037B0_entry:
	rsp = fp
	// succ:  l00000000004037B0
l00000000004037B0:
	r9d = Mem0[rcx + 0x28<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d - Mem0[rcx + 0x2C<64>:word32])
	branch Test(GE,SO) l0000000000403800
	// succ:  l00000000004037BA l0000000000403800
l00000000004037BA:
	rax = CONVERT(r9d, word32, int64)
	r9d = r9d + 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	r10 = rax + rax * 2<64>
	rax = Mem0[rcx + 0x20<64>:word64]
	Mem0[rcx + 0x28<64>:word32] = r9d
	rax = rax + r10 * 8<64>
	SZO = cond(rax & rax)
	C = false
	r9b = CONVERT(Test(EQ,Z), bool, int8)
	SZO = cond(rdx & rdx)
	C = false
	cl = CONVERT(Test(EQ,Z), bool, int8)
	r9b = r9b | cl
	SZO = cond(r9b)
	C = false
	branch Test(NE,Z) l0000000000403800
	// succ:  l00000000004037E3 l0000000000403800
l00000000004037E3:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(EQ,Z) l0000000000403800
	// succ:  l00000000004037E8 l0000000000403800
l00000000004037E8:
	Mem0[rax:word32] = 0<32>
	Mem0[rax + 8<64>:word64] = rdx
	Mem0[rax + 0x10<64>:word32] = r8d
	return
	// succ:  fn00000000004037B0_exit
l0000000000403800:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn00000000004037B0_exit
fn00000000004037B0_exit:


// fn0000000000403810
// Return size: 8
define fn0000000000403810
fn0000000000403810_entry:
	rsp = fp
	// succ:  l0000000000403810
l0000000000403810:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x18<64>:word64]
	rbx = rcx
	rbp = rdx
	edi = r8d
	rdi = CONVERT(edi, word32, uint64)
	rsi = rdx
	ecx = CONVERT(Mem0[rax:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	goto l0000000000403872
	// succ:  l0000000000403872
l0000000000403830:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000403880
	// succ:  l0000000000403834 l0000000000403880
l0000000000403834:
	SCZO = cond(cl - 0x4B<8>)
	branch Test(NE,Z) l00000000004038C0
	// succ:  l000000000040383D l00000000004038C0
l000000000040383D:
	v23 = Mem0[rbx + 0x18<64>:word64] + 1<64>
	Mem0[rbx + 0x18<64>:word64] = v23
	SCZO = cond(v23)
	// succ:  l0000000000403842
l0000000000403842:
	SCZO = cond(edi - 1<32>)
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	v24 = Mem0[rbx + 0x50<64>:word32] + 6<32>
	Mem0[rbx + 0x50<64>:word32] = v24
	SCZO = cond(v24)
	edx = edx & 0xFFFFFFFD<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 0x1E<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	// succ:  l0000000000403851
l0000000000403851:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	Mem0[rsi:word64] = rax
	branch Test(EQ,Z) l00000000004038B5
	// succ:  l0000000000403867 l00000000004038B5
l0000000000403867:
	rsi = rax + 8<64>
	rax = Mem0[rbx + 0x18<64>:word64]
	ecx = CONVERT(Mem0[rax:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	// succ:  l0000000000403872
l0000000000403872:
	SCZO = cond(cl - 0x72<8>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(cl - 0x56<8>)
	dl = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(NE,Z) l0000000000403830
	// succ:  l0000000000403880 l0000000000403830
l0000000000403880:
	v18 = Mem0[rbx + 0x18<64>:word64] + 1<64>
	Mem0[rbx + 0x18<64>:word64] = v18
	SCZO = cond(v18)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000000004038A0
	// succ:  l0000000000403889 l00000000004038A0
l0000000000403889:
	SCZO = cond(edi - 1<32>)
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	v22 = Mem0[rbx + 0x50<64>:word32] + 9<32>
	Mem0[rbx + 0x50<64>:word32] = v22
	SCZO = cond(v22)
	edx = edx & 0xFFFFFFFD<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 0x1C<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	goto l0000000000403851
	// succ:  l0000000000403851
l00000000004038A0:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l0000000000403842
	// succ:  l00000000004038A4 l0000000000403842
l00000000004038A4:
	SCZO = cond(edi - 1<32>)
	edx = edx - edx - C
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	v29 = Mem0[rbx + 0x50<64>:word32] + 9<32>
	Mem0[rbx + 0x50<64>:word32] = v29
	SCZO = cond(v29)
	edx = edx & 0xFFFFFFFD<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edx = edx + 0x1D<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	goto l0000000000403851
	// succ:  l0000000000403851
l00000000004038B5:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000403810_exit
l00000000004038C0:
	SZO = cond(edi & edi)
	C = false
	branch Test(NE,Z) l0000000000403910
	// succ:  l00000000004038C4 l0000000000403910
l00000000004038C4:
	SCZO = cond(cl - 0x46<8>)
	branch Test(NE,Z) l0000000000403910
	// succ:  l00000000004038C9 l0000000000403910
l00000000004038C9:
	SCZO = cond(rbp - rsi)
	branch Test(NE,Z) l00000000004038EA
	// succ:  l00000000004038CE l00000000004038EA
l00000000004038CE:
	goto l0000000000403910
	// succ:  l0000000000403910
l00000000004038D0:
	SCZO = cond(eax - 0x1B<32>)
	branch Test(EQ,Z) l0000000000403920
	// succ:  l00000000004038D5 l0000000000403920
l00000000004038D5:
	SCZO = cond(eax - 0x19<32>)
	branch Test(NE,Z) l00000000004038E1
	// succ:  l00000000004038DA l00000000004038E1
l00000000004038DA:
	Mem0[rbp + 0<64>:word32] = 0x1C<32>
	// succ:  l00000000004038E1
l00000000004038E1:
	rbp = rbp + 8<64>
	SCZO = cond(rbp)
	SCZO = cond(rbp - rsi)
	branch Test(EQ,Z) l0000000000403910
	// succ:  l00000000004038EA l0000000000403910
l00000000004038EA:
	rbp = Mem0[rbp + 0<64>:word64]
	eax = Mem0[rbp + 0<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x1A<32>)
	branch Test(NE,Z) l00000000004038D0
	// succ:  l00000000004038F6 l00000000004038D0
l00000000004038F6:
	Mem0[rbp + 0<64>:word32] = 0x1D<32>
	rbp = rbp + 8<64>
	SCZO = cond(rbp)
	SCZO = cond(rbp - rsi)
	branch Test(NE,Z) l00000000004038EA
	// succ:  l0000000000403906 l00000000004038EA
l0000000000403906:
	// succ:  l0000000000403910
l0000000000403910:
	rax = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000403810_exit
l0000000000403920:
	Mem0[rbp + 0<64>:word32] = 0x1E<32>
	goto l00000000004038E1
	// succ:  l00000000004038E1
fn0000000000403810_exit:


// fn0000000000403930
// Return size: 8
define fn0000000000403930
fn0000000000403930_entry:
	rsp = fp
	// succ:  l0000000000403930
l0000000000403930:
	r9 = Mem0[rcx + 0x18<64>:word64]
	r8 = rdx
	r10d = CONVERT(Mem0[r9:byte], byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10b - 0x52<8>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(r10b - 0x4F<8>)
	branch Test(EQ,Z) l0000000000403950
	// succ:  l0000000000403948 l0000000000403950
l0000000000403948:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000403970
	// succ:  l000000000040394C l0000000000403970
l000000000040394C:
	rax = rdx
	return
	// succ:  fn0000000000403930_exit
l0000000000403950:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000403970
	// succ:  l0000000000403954 l0000000000403970
l0000000000403954:
	v16 = Mem0[rcx + 0x50<64>:word32] + 3<32>
	Mem0[rcx + 0x50<64>:word32] = v16
	SCZO = cond(v16)
	r9 = r9 + 1<64>
	SCZO = cond(r9)
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rcx + 0x18<64>:word64] = r9
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	// succ:  l0000000000403968_thunk_fn0000000000403730
l0000000000403968_thunk_fn0000000000403730:
	call fn0000000000403730 (retsize: 0;)
	return
	// succ:  fn0000000000403930_exit
l0000000000403970:
	v19 = Mem0[rcx + 0x50<64>:word32] + 2<32>
	Mem0[rcx + 0x50<64>:word32] = v19
	SCZO = cond(v19)
	r9 = r9 + 1<64>
	SCZO = cond(r9)
	edx = 0x1F<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rcx + 0x18<64>:word64] = r9
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	// succ:  l0000000000403984_thunk_fn0000000000403730
l0000000000403984_thunk_fn0000000000403730:
	call fn0000000000403730 (retsize: 0;)
	return
	// succ:  fn0000000000403930_exit
fn0000000000403930_exit:


// fn0000000000403990
// Return size: 8
define fn0000000000403990
fn0000000000403990_entry:
	rsp = fp
	// succ:  l0000000000403990
l0000000000403990:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rax = Mem0[rcx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x53<8>)
	branch Test(EQ,Z) l00000000004039A2
	// succ:  l000000000040399C l00000000004039A2
l000000000040399C:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000040399E
l000000000040399E:
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000403990_exit
l00000000004039A2:
	r8 = rax + 1<64>
	Mem0[rcx + 0x18<64>:word64] = r8
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0<8>)
	branch Test(NE,Z) l0000000000403A03
	// succ:  l00000000004039B0 l0000000000403A03
l00000000004039B0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l00000000004039B2
l00000000004039B2:
	r8d = Mem0[rcx + 0x10<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d >>u 3<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	r8d = r8d & 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SZO = cond(edx & edx)
	C = false
	dl = CONVERT(Test(NE,Z), bool, int8)
	SCZO = cond(r8b - dl)
	branch Test(UGE,C) l00000000004039D9
	// succ:  l00000000004039C8 l00000000004039D9
l00000000004039C8:
	rdx = Mem0[rcx + 0x18<64>:word64]
	edx = CONVERT(Mem0[rdx:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	edx = edx - 0x43<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(dl - 1<8>)
	r8b = CONVERT(Test(ULE,CZ), bool, int8)
	// succ:  l00000000004039D9
l00000000004039D9:
	rdx = 0x000000000048F640<p64>
	r9 = 0x000000000048F7C8<p64>
	r8d = CONVERT(r8b, byte, word32)
	r8 = CONVERT(r8d, word32, uint64)
	// succ:  l00000000004039F0
l00000000004039F0:
	SCZO = cond(al - Mem0[rdx:byte])
	branch Test(EQ,Z) l0000000000403AA7
	// succ:  l00000000004039F8 l0000000000403AA7
l00000000004039F8:
	rdx = rdx + 0x38<64>
	SCZO = cond(rdx)
	SCZO = cond(rdx - r9)
	branch Test(NE,Z) l00000000004039F0
	// succ:  l0000000000403A01 l00000000004039F0
l0000000000403A01:
	goto l000000000040399C
	// succ:  l000000000040399C
l0000000000403A03:
	r8 = rax + 2<64>
	Mem0[rcx + 0x18<64>:word64] = r8
	eax = CONVERT(Mem0[rax + 1<64>:byte], byte, int32)
	r8d = SLICE(rax - 0x30<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8b - 9<8>)
	branch Test(ULE,CZ) l0000000000403A21
	// succ:  l0000000000403A19 l0000000000403A21
l0000000000403A19:
	SCZO = cond(al - 0x5F<8>)
	branch Test(NE,Z) l0000000000403B53
	// succ:  l0000000000403A21 l0000000000403B53
l0000000000403A21:
	SCZO = cond(al - 0x5F<8>)
	branch Test(EQ,Z) l0000000000403A84
	// succ:  l0000000000403A25 l0000000000403A84
l0000000000403A25:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000403A5D
	// succ:  l0000000000403A5D
l0000000000403A30:
	r8d = SLICE(rdx + rdx * 8<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	r8d = SLICE(rax - 0x30<64> + r8 * 4<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	// succ:  l0000000000403A39
l0000000000403A39:
	SCZO = cond(edx - r8d)
	branch Test(UGT,CZ) l000000000040399C
	// succ:  l0000000000403A42 l000000000040399C
l0000000000403A42:
	rax = Mem0[rcx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000403A80
	// succ:  l0000000000403A4B l0000000000403A80
l0000000000403A4B:
	rdx = rax + 1<64>
	Mem0[rcx + 0x18<64>:word64] = rdx
	eax = CONVERT(Mem0[rax:byte], byte, int32)
	SCZO = cond(al - 0x5F<8>)
	branch Test(EQ,Z) l0000000000403AA1
	// succ:  l0000000000403A5A l0000000000403AA1
l0000000000403A5A:
	edx = r8d
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000403A5D
l0000000000403A5D:
	r8d = SLICE(rax - 0x30<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8b - 9<8>)
	branch Test(ULE,CZ) l0000000000403A30
	// succ:  l0000000000403A67 l0000000000403A30
l0000000000403A67:
	r8d = SLICE(rax - 0x41<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8b - 0x19<8>)
	branch Test(UGT,CZ) l000000000040399C
	// succ:  l0000000000403A75 l000000000040399C
l0000000000403A75:
	r8d = SLICE(rdx + rdx * 8<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	r8d = SLICE(rax - 0x37<64> + r8 * 4<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	goto l0000000000403A39
	// succ:  l0000000000403A39
l0000000000403A80:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000403A5A
	// succ:  l0000000000403A5A
l0000000000403A84:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	// succ:  l0000000000403A87
l0000000000403A87:
	SCZO = cond(r8d - Mem0[rcx + 0x38<64>:word32])
	branch Test(UGE,C) l000000000040399C
	// succ:  l0000000000403A91 l000000000040399C
l0000000000403A91:
	rax = Mem0[rcx + 0x30<64>:word64]
	v29 = Mem0[rcx + 0x40<64>:word32] + 1<32>
	Mem0[rcx + 0x40<64>:word32] = v29
	SCZO = cond(v29)
	rax = Mem0[rax + r8 * 8<64>:word64]
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000403990_exit
l0000000000403AA1:
	r8d = r8d + 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	goto l0000000000403A87
	// succ:  l0000000000403A87
l0000000000403AA7:
	r11 = Mem0[rdx + 0x28<64>:word64]
	SZO = cond(r11 & r11)
	C = false
	branch Test(EQ,Z) l0000000000403B40
	// succ:  l0000000000403AB4 l0000000000403B40
l0000000000403AB4:
	r9d = Mem0[rcx + 0x28<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	r10d = Mem0[rcx + 0x2C<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	esi = Mem0[rdx + 0x30<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(r9d - r10d)
	branch Test(GE,SO) l0000000000403AF2
	// succ:  l0000000000403AC6 l0000000000403AF2
l0000000000403AC6:
	rax = CONVERT(r9d, word32, int64)
	r9d = r9d + 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	rdi = rax + rax * 2<64>
	rax = Mem0[rcx + 0x20<64>:word64]
	Mem0[rcx + 0x28<64>:word32] = r9d
	rax = rax + rdi * 8<64>
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000403AF2
	// succ:  l0000000000403AE2 l0000000000403AF2
l0000000000403AE2:
	Mem0[rax:word32] = 0x18<32>
	Mem0[rax + 8<64>:word64] = r11
	rbx = rax
	Mem0[rax + 0x10<64>:word32] = esi
	// succ:  l0000000000403AF2
l0000000000403AF2:
	Mem0[rcx + 0x48<64>:word64] = rbx
	// succ:  l0000000000403AF6
l0000000000403AF6:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(EQ,Z) l0000000000403B4A
	// succ:  l0000000000403AFB l0000000000403B4A
l0000000000403AFB:
	r8 = Mem0[rdx + 0x18<64>:word64]
	edx = Mem0[rdx + 0x20<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000403B02
l0000000000403B02:
	v30 = Mem0[rcx + 0x50<64>:word32] + edx
	Mem0[rcx + 0x50<64>:word32] = v30
	SCZO = cond(v30)
	SCZO = cond(r10d - r9d)
	branch Test(LE,SZO) l000000000040399C
	// succ:  l0000000000403B0E l000000000040399C
l0000000000403B0E:
	rax = CONVERT(r9d, word32, int64)
	r9d = r9d + 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	r10 = rax + rax * 2<64>
	rax = Mem0[rcx + 0x20<64>:word64]
	Mem0[rcx + 0x28<64>:word32] = r9d
	rax = rax + r10 * 8<64>
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040399C
	// succ:  l0000000000403B2E l000000000040399C
l0000000000403B2E:
	Mem0[rax:word32] = 0x18<32>
	Mem0[rax + 8<64>:word64] = r8
	Mem0[rax + 0x10<64>:word32] = edx
	goto l000000000040399E
	// succ:  l000000000040399E
l0000000000403B40:
	r10d = Mem0[rcx + 0x2C<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	r9d = Mem0[rcx + 0x28<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	goto l0000000000403AF6
	// succ:  l0000000000403AF6
l0000000000403B4A:
	r8 = Mem0[rdx + 8<64>:word64]
	edx = Mem0[rdx + 0x10<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000403B02
	// succ:  l0000000000403B02
l0000000000403B53:
	r8d = SLICE(rax - 0x41<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8b - 0x19<8>)
	branch Test(ULE,CZ) l0000000000403A25
	// succ:  l0000000000403B61 l0000000000403A25
l0000000000403B61:
	goto l00000000004039B2
	// succ:  l00000000004039B2
fn0000000000403990_exit:


// fn0000000000403B70
// Return size: 8
define fn0000000000403B70
fn0000000000403B70_entry:
	rsp = fp
	// succ:  l0000000000403B70
l0000000000403B70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = 0x000000000048E9B0<p64>
	SZO = cond(r8 & r8)
	C = false
	rdi = rcx
	rbp = rdx
	rbx = r8
	branch Test(EQ,Z) l0000000000403BA9
	// succ:  l0000000000403B8D l0000000000403BA9
l0000000000403B8D:
	SCZO = cond(Mem0[rbx:word32] - 0x4B<32>)
	branch Test(UGT,CZ) l0000000000403BA9
	// succ:  l0000000000403B95 l0000000000403BA9
l0000000000403B95:
	eax = Mem0[rbx:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(Mem0[rsi + rax * 4<64>:word32], word32, int64)
	rax = rax + rsi
	SCZO = cond(rax)
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000403B70_exit
l0000000000403BA9:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000403B70_exit
fn0000000000403B70_exit:


// fn0000000000403BF0
// Return size: 8
define fn0000000000403BF0
fn0000000000403BF0_entry:
	rsp = fp
	// succ:  l0000000000403BF0
l0000000000403BF0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x100<64>:word64]
	rbx = rcx
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l0000000000403C30
	// succ:  l0000000000403C0A l0000000000403C30
l0000000000403C0A:
	rdx = rax + 1<64>
	// succ:  l0000000000403C0E
l0000000000403C0E:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = sil
	Mem0[rbx + 0x108<64>:byte] = sil
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000403BF0_exit
l0000000000403C30:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rcx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rcx + 0x118<64>:word64]
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v14 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v14
	SCZO = cond(v14)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000403C0E
	// succ:  l0000000000403C0E
fn0000000000403BF0_exit:


// fn0000000000403C60
// Return size: 8
define fn0000000000403C60
fn0000000000403C60_entry:
	rsp = fp
	// succ:  l0000000000403C60
l0000000000403C60:
	r8 = Mem0[rcx:word64]
	r11d = r11d ^ r11d
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d)
	C = false
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	edx = CONVERT(Mem0[r8:byte], byte, int32)
	SCZO = cond(dl - 0x6E<8>)
	branch Test(EQ,Z) l0000000000403CC0
	// succ:  l0000000000403C71 l0000000000403CC0
l0000000000403C71:
	r8d = SLICE(rdx - 0x30<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	SCZO = cond(r8b - 9<8>)
	branch Test(UGT,CZ) l0000000000403CAF
	// succ:  l0000000000403C7E l0000000000403CAF
l0000000000403C7E:
	r9 = Mem0[rcx:word64]
	r8 = r9 + 1<64>
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	// succ:  l0000000000403C90
l0000000000403C90:
	r10d = SLICE(r9 + r9 * 4<64>, word32, 0)
	r10 = CONVERT(r10d, word32, uint64)
	Mem0[rcx:word64] = r8
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	r9d = SLICE(rdx - 0x30<64> + r10 * 2<64>, word32, 0)
	r9 = CONVERT(r9d, word32, uint64)
	edx = CONVERT(Mem0[r8 - 1<64>:byte], byte, int32)
	r10d = SLICE(rdx - 0x30<64>, word32, 0)
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10b - 9<8>)
	branch Test(ULE,CZ) l0000000000403C90
	// succ:  l0000000000403CAF l0000000000403C90
l0000000000403CAF:
	eax = eax ^ r9d
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax + r11d
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	return
	// succ:  fn0000000000403C60_exit
l0000000000403CC0:
	rax = r8 + 1<64>
	r11b = 1<8>
	Mem0[rcx:word64] = rax
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(Mem0[r8 + 1<64>:byte], byte, int32)
	goto l0000000000403C71
	// succ:  l0000000000403C71
fn0000000000403C60_exit:


// fn0000000000403CE0
// Return size: 8
define fn0000000000403CE0
fn0000000000403CE0_entry:
	rsp = fp
	// succ:  l0000000000403CE0
l0000000000403CE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = Mem0[rcx + 0x28<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - Mem0[rcx + 0x2C<64>:word32])
	branch Test(GE,SO) l0000000000403D22
	// succ:  l0000000000403CED l0000000000403D22
l0000000000403CED:
	rdx = CONVERT(eax, word32, int64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	r8 = rdx + rdx * 2<64>
	rdx = Mem0[rcx + 0x20<64>:word64]
	Mem0[rcx + 0x28<64>:word32] = eax
	rbx = rdx + r8 * 8<64>
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000403D22
	// succ:  l0000000000403D07 l0000000000403D22
l0000000000403D07:
	Mem0[rbx:word32] = 0x40<32>
	rcx = rcx + 0x18<64>
	SCZO = cond(rcx)
	call fn0000000000403C60 (retsize: 8;)
	Mem0[rbx + 8<64>:word32] = eax
	rax = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000403CE0_exit
l0000000000403D22:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000403CE0_exit
fn0000000000403CE0_exit:


// fn0000000000403D30
// Return size: 8
define fn0000000000403D30
fn0000000000403D30_entry:
	rsp = fp
	// succ:  l0000000000403D30
l0000000000403D30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdx = Mem0[rcx + 0x18<64>:word64]
	rbx = rcx
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x5F<8>)
	branch Test(EQ,Z) l0000000000403D64
	// succ:  l0000000000403D43 l0000000000403D64
l0000000000403D43:
	SCZO = cond(al - 0x6E<8>)
	branch Test(EQ,Z) l0000000000403D59
	// succ:  l0000000000403D47 l0000000000403D59
l0000000000403D47:
	rcx = rcx + 0x18<64>
	call fn0000000000403C60 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rdx:byte] - 0x5F<8>)
	branch Test(EQ,Z) l0000000000403D74
	// succ:  l0000000000403D59 l0000000000403D74
l0000000000403D59:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000403D30_exit
l0000000000403D64:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000403D66
l0000000000403D66:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x18<64>:word64] = rdx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000403D30_exit
l0000000000403D74:
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	goto l0000000000403D66
	// succ:  l0000000000403D66
fn0000000000403D30_exit:


// fn0000000000403D80
// Return size: 0
define fn0000000000403D80
fn0000000000403D80_entry:
	rsp = fp
	// succ:  l0000000000403D80
l0000000000403D80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x54<8>)
	branch Test(EQ,Z) l0000000000403DA0
	// succ:  l0000000000403D8E l0000000000403DA0
l0000000000403D8E:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000403D80_exit
l0000000000403DA0:
	rax = rax + 1<64>
	SCZO = cond(rax)
	rbx = rcx
	Mem0[rcx + 0x18<64>:word64] = rax
	call fn0000000000403D30 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000403D8E
	// succ:  l0000000000403DB4 l0000000000403D8E
l0000000000403DB4:
	v12 = Mem0[rbx + 0x40<64>:word32] + 1<32>
	Mem0[rbx + 0x40<64>:word32] = v12
	SCZO = cond(v12)
	ecx = Mem0[rbx + 0x28<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx - Mem0[rbx + 0x2C<64>:word32])
	branch Test(GE,SO) l0000000000403D8E
	// succ:  l0000000000403DC0 l0000000000403D8E
l0000000000403DC0:
	rdx = CONVERT(ecx, word32, int64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r8 = rdx + rdx * 2<64>
	rdx = Mem0[rbx + 0x20<64>:word64]
	Mem0[rbx + 0x28<64>:word32] = ecx
	rdx = rdx + r8 * 8<64>
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l0000000000403D8E
	// succ:  l0000000000403DDA l0000000000403D8E
l0000000000403DDA:
	Mem0[rdx + 8<64>:word32] = eax
	rax = rdx
	Mem0[rdx:word32] = 5<32>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000403D80_exit
fn0000000000403D80_exit:


// fn0000000000403DF0
// Return size: 8
define fn0000000000403DF0
fn0000000000403DF0_entry:
	rsp = fp
	// succ:  l0000000000403DF0
l0000000000403DF0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdx = Mem0[rcx + 0x18<64>:word64]
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(Mem0[rdx:byte] - 0x5F<8>)
	branch Test(EQ,Z) l0000000000403E10
	// succ:  l0000000000403E02 l0000000000403E10
l0000000000403E02:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000403DF0_exit
l0000000000403E10:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	rcx = rcx + 0x18<64>
	SCZO = cond(rcx)
	Mem0[rcx:word64] = rdx
	call fn0000000000403C60 (retsize: 8;)
	eax = ~eax
	rax = CONVERT(eax, word32, uint64)
	eax = eax >>u 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000403DF0_exit
fn0000000000403DF0_exit:


// fn0000000000403E30
// Return size: 8
define fn0000000000403E30
fn0000000000403E30_entry:
	rsp = fp
	// succ:  l0000000000403E30
l0000000000403E30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = rcx + 0x18<64>
	call fn0000000000403C60 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	branch Test(LE,SZO) l0000000000403F00
	// succ:  l0000000000403E4D l0000000000403F00
l0000000000403E4D:
	rdi = Mem0[rbx + 0x18<64>:word64]
	rax = Mem0[rbx + 8<64>:word64]
	r9 = CONVERT(esi, word32, int64)
	rax = rax - rdi
	SCZO = cond(rax)
	SCZO = cond(rax - r9)
	branch Test(LT,SO) l0000000000403F04
	// succ:  l0000000000403E64 l0000000000403F04
l0000000000403E64:
	r9 = r9 + rdi
	SCZO = cond(r9)
	SZO = cond(Mem0[rbx + 0x10<64>:byte] & 4<8>)
	C = false
	Mem0[rbx + 0x18<64>:word64] = r9
	branch Test(NE,Z) l0000000000403EB0
	// succ:  l0000000000403E71 l0000000000403EB0
l0000000000403E71:
	SCZO = cond(esi - 9<32>)
	branch Test(LE,SZO) l0000000000403E8F
	// succ:  l0000000000403E76 l0000000000403E8F
l0000000000403E76:
	rdx = 0x000000000048EAE0<p64>
	r8d = 8<32>
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rdi
	eax = memcmp(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000403EC0
	// succ:  l0000000000403E8F l0000000000403EC0
l0000000000403E8F:
	r8d = esi
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rdi
	rcx = rbx
	call fn00000000004037B0 (retsize: 8;)
	// succ:  l0000000000403E9D
l0000000000403E9D:
	Mem0[rbx + 0x48<64>:word64] = rax
	// succ:  l0000000000403EA1
l0000000000403EA1:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000403E30_exit
l0000000000403EB0:
	SCZO = cond(Mem0[r9:byte] - 0x24<8>)
	branch Test(NE,Z) l0000000000403E71
	// succ:  l0000000000403EB6 l0000000000403E71
l0000000000403EB6:
	r9 = r9 + 1<64>
	SCZO = cond(r9)
	Mem0[rbx + 0x18<64>:word64] = r9
	goto l0000000000403E71
	// succ:  l0000000000403E71
l0000000000403EC0:
	eax = CONVERT(Mem0[rdi + 8<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x5F<8>)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - 0x2E<8>)
	dl = CONVERT(Test(EQ,Z), bool, int8)
	cl = cl | dl
	SZO = cond(cl)
	C = false
	branch Test(NE,Z) l0000000000403ED6
	// succ:  l0000000000403ED2 l0000000000403ED6
l0000000000403ED2:
	SCZO = cond(al - 0x24<8>)
	branch Test(NE,Z) l0000000000403E8F
	// succ:  l0000000000403ED6 l0000000000403E8F
l0000000000403ED6:
	SCZO = cond(Mem0[rdi + 9<64>:byte] - 0x4E<8>)
	branch Test(NE,Z) l0000000000403E8F
	// succ:  l0000000000403EDC l0000000000403E8F
l0000000000403EDC:
	eax = Mem0[rbx + 0x50<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = 0x000000000048EAE9<p64>
	r8d = 0x15<32>
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rbx
	eax = eax + 0x16<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax - esi
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx + 0x50<64>:word32] = eax
	call fn00000000004037B0 (retsize: 8;)
	goto l0000000000403E9D
	// succ:  l0000000000403E9D
l0000000000403F00:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000403EA1
	// succ:  l0000000000403EA1
l0000000000403F04:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000403E9D
	// succ:  l0000000000403E9D
fn0000000000403E30_exit:


// fn0000000000403F10
// Return size: 8
define fn0000000000403F10
fn0000000000403F10_entry:
	rsp = fp
	// succ:  l0000000000403F10
l0000000000403F10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SZO = cond(edx & edx)
	C = false
	rbx = rcx
	branch Test(NE,Z) l0000000000403F3B
	// succ:  l0000000000403F1D l0000000000403F3B
l0000000000403F1D:
	rax = Mem0[rcx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0<8>)
	branch Test(NE,Z) l0000000000403F30
	// succ:  l0000000000403F26 l0000000000403F30
l0000000000403F26:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000403F28
l0000000000403F28:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000403F10_exit
l0000000000403F30:
	rdx = rax + 1<64>
	Mem0[rcx + 0x18<64>:word64] = rdx
	edx = CONVERT(Mem0[rax:byte], byte, int32)
	// succ:  l0000000000403F3B
l0000000000403F3B:
	SCZO = cond(edx - 0x68<32>)
	branch Test(EQ,Z) l0000000000403F70
	// succ:  l0000000000403F40 l0000000000403F70
l0000000000403F40:
	SCZO = cond(edx - 0x76<32>)
	branch Test(NE,Z) l0000000000403F26
	// succ:  l0000000000403F45 l0000000000403F26
l0000000000403F45:
	rsi = rbx + 0x18<64>
	rcx = rsi
	call fn0000000000403C60 (retsize: 8;)
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(NE,Z) l0000000000403F26
	// succ:  l0000000000403F5A l0000000000403F26
l0000000000403F5A:
	rax = rax + 1<64>
	SCZO = cond(rax)
	rcx = rsi
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn0000000000403C60 (retsize: 8;)
	goto l0000000000403F79
	// succ:  l0000000000403F79
l0000000000403F70:
	rcx = rbx + 0x18<64>
	call fn0000000000403C60 (retsize: 8;)
	// succ:  l0000000000403F79
l0000000000403F79:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(NE,Z) l0000000000403F26
	// succ:  l0000000000403F82 l0000000000403F26
l0000000000403F82:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000403F28
	// succ:  l0000000000403F28
fn0000000000403F10_exit:


// fn0000000000403FA0
// Return size: 8
define fn0000000000403FA0
fn0000000000403FA0_entry:
	rsp = fp
	// succ:  l0000000000403FA0
l0000000000403FA0:
	rax = Mem0[rcx + 0x120<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000403FF8
	// succ:  l0000000000403FAC l0000000000403FF8
l0000000000403FAC:
	rax = Mem0[rax + 8<64>:word64]
	edx = Mem0[rdx:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rax + 0x10<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000403FF0
	// succ:  l0000000000403FBB l0000000000403FF0
l0000000000403FBB:
	SCZO = cond(Mem0[rax:word32] - 0x2F<32>)
	branch Test(NE,Z) l0000000000403FF0
	// succ:  l0000000000403FC0 l0000000000403FF0
l0000000000403FC0:
	SCZO = cond(edx - 0<32>)
	branch Test(GT,SZO) l0000000000403FD9
	// succ:  l0000000000403FC5 l0000000000403FD9
l0000000000403FC5:
	goto l0000000000403FE7
	// succ:  l0000000000403FE7
l0000000000403FD0:
	SCZO = cond(Mem0[rax:word32] - 0x2F<32>)
	branch Test(NE,Z) l0000000000403FF0
	// succ:  l0000000000403FD5 l0000000000403FF0
l0000000000403FD5:
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000403FF3
	// succ:  l0000000000403FD9 l0000000000403FF3
l0000000000403FD9:
	rax = Mem0[rax + 0x10<64>:word64]
	edx = edx - 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l0000000000403FD0
	// succ:  l0000000000403FE5 l0000000000403FD0
l0000000000403FE5:
	return
	// succ:  fn0000000000403FA0_exit
l0000000000403FE7:
	branch Test(EQ,Z) l0000000000403FF3
	// succ:  l0000000000403FE9 l0000000000403FF3
l0000000000403FE9:
	// succ:  l0000000000403FF0
l0000000000403FF0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000403FA0_exit
l0000000000403FF3:
	rax = Mem0[rax + 8<64>:word64]
	return
	// succ:  fn0000000000403FA0_exit
l0000000000403FF8:
	Mem0[rcx + 0x130<64>:word32] = 1<32>
	return
	// succ:  fn0000000000403FA0_exit
fn0000000000403FA0_exit:


// fn0000000000404010
// Return size: 8
define fn0000000000404010
fn0000000000404010_entry:
	rsp = fp
	// succ:  l0000000000404010
l0000000000404010:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = 0x000000000048EB00<p64>
	SZO = cond(rdx & rdx)
	C = false
	rdi = rcx
	rbx = rdx
	branch Test(EQ,Z) l0000000000404060
	// succ:  l0000000000404029 l0000000000404060
l0000000000404029:
	SCZO = cond(Mem0[rbx:word32] - 0x4A<32>)
	branch Test(UGT,CZ) l0000000000404040
	// succ:  l000000000040402E l0000000000404040
l000000000040402E:
	eax = Mem0[rbx:word32]
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(Mem0[rsi + rax * 4<64>:word32], word32, int64)
	rax = rax + rsi
	SCZO = cond(rax)
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000404010_exit
l0000000000404040:
	rdx = Mem0[rbx + 8<64>:word64]
	rcx = rdi
	call fn0000000000404010 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l0000000000404062
	// succ:  l0000000000404051 l0000000000404062
l0000000000404051:
	rbx = Mem0[rbx + 0x10<64>:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l0000000000404029
	// succ:  l000000000040405A l0000000000404029
l000000000040405A:
	// succ:  l0000000000404060
l0000000000404060:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000404062
l0000000000404062:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000404010_exit
fn0000000000404010_exit:


// fn0000000000404090
// Return size: 8
define fn0000000000404090
fn0000000000404090_entry:
	rsp = fp
	// succ:  l0000000000404090
l0000000000404090:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = rdx
	rbx = rdx
	eax = strlen(rcx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000404120
	// succ:  l00000000004040AB l0000000000404120
l00000000004040AB:
	r8 = Mem0[rsi + 0x100<64>:word64]
	rbp = rbx + rax
	goto l00000000004040E2
	// succ:  l00000000004040E2
l00000000004040C0:
	rdx = r8
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	// succ:  l00000000004040C7
l00000000004040C7:
	rbx = rbx + 1<64>
	SCZO = cond(rbx)
	Mem0[rsi + 0x100<64>:word64] = r8
	Mem0[rsi + rdx:byte] = dil
	SCZO = cond(rbx - rbp)
	Mem0[rsi + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000404120
	// succ:  l00000000004040E2 l0000000000404120
l00000000004040E2:
	SCZO = cond(r8 - 0xFF<64>)
	edi = CONVERT(Mem0[rbx:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l00000000004040C0
	// succ:  l00000000004040EE l00000000004040C0
l00000000004040EE:
	r8 = Mem0[rsi + 0x118<64>:word64]
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsi + 0xFF<64>:byte] = 0<8>
	rcx = rsi
	call Mem0[rsi + 0x110<64>:word64] (retsize: 8;)
	v18 = Mem0[rsi + 0x138<64>:word32] + 1<32>
	Mem0[rsi + 0x138<64>:word32] = v18
	SCZO = cond(v18)
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l00000000004040C7
	// succ:  l00000000004040C7
l0000000000404120:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000404090_exit
fn0000000000404090_exit:


// fn0000000000404130
// Return size: 8
define fn0000000000404130
fn0000000000404130_entry:
	rsp = fp
	// succ:  l0000000000404130
l0000000000404130:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	r12 = rsp + 0x20<64>
	r8d = edx
	r8 = CONVERT(r8d, word32, uint64)
	rdx = 0x000000000048EC2C<p64>
	rbx = rcx
	rbp = r12
	rcx = r12
	eax = sprintf(rcx, rdx, 0<32>)
	// succ:  l0000000000404157
l0000000000404157:
	edx = Mem0[rbp + 0<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rbp = rbp + 4<64>
	SCZO = cond(rbp)
	eax = SLICE(rdx + 0xFFFFFFFFFEFEFEFF<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	edx = ~edx
	rdx = CONVERT(edx, word32, uint64)
	eax = eax & edx
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax & 0x80808080<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000404157
	// succ:  l000000000040416F l0000000000404157
l000000000040416F:
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx >>u 0x10<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SZO = cond(eax & 0x8080<32>)
	C = false
	branch Test(NE,Z) l000000000040417C
	// succ:  l0000000000404179_1 l000000000040417C
l0000000000404179_1:
	eax = edx
	// succ:  l000000000040417C
l000000000040417C:
	rdx = rbp + 2<64>
	branch Test(NE,Z) l0000000000404184
	// succ:  l0000000000404180_1 l0000000000404184
l0000000000404180_1:
	rbp = rdx
	// succ:  l0000000000404184
l0000000000404184:
	al = al + al
	SCZO = cond(al)
	rbp = rbp - 3<64> - C
	SCZO = cond(rbp)
	rbp = rbp - r12
	SCZO = cond(rbp)
	branch Test(EQ,Z) l0000000000404200
	// succ:  l000000000040418F l0000000000404200
l000000000040418F:
	rax = Mem0[rbx + 0x100<64>:word64]
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l00000000004041C2
	// succ:  l00000000004041C2
l00000000004041A0:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l00000000004041A7
l00000000004041A7:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - rbp)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000404200
	// succ:  l00000000004041C2 l0000000000404200
l00000000004041C2:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[r12 + rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l00000000004041A0
	// succ:  l00000000004041CF l00000000004041A0
l00000000004041CF:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v22 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v22
	SCZO = cond(v22)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l00000000004041A7
	// succ:  l00000000004041A7
l0000000000404200:
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000404130_exit
fn0000000000404130_exit:


// fn0000000000404210
// Return size: 8
define fn0000000000404210
fn0000000000404210_entry:
	rsp = fp
	// succ:  l0000000000404210
l0000000000404210:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[r8 + 8<64>:word64]
	rbx = Mem0[r8 + 0x10<64>:word64]
	rbp = rcx
	rdi = rdx
	rsi = r8
	rax = rdx + 1<64> + rax
	SCZO = cond(rax - rbx)
	branch Test(UGT,CZ) l0000000000404272
	// succ:  l0000000000404233 l0000000000404272
l0000000000404233:
	eax = Mem0[rsi + 0x18<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000404243
	// succ:  l000000000040423A l0000000000404243
l000000000040423A:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000404210_exit
l0000000000404243:
	rax = Mem0[rsi + 8<64>:word64]
	rax = rax + Mem0[rsi:word64]
	SCZO = cond(rax)
	r8 = rdi
	rdx = rbp
	rcx = rax
	rax = memcpy(rcx, rdx, r8)
	rax = rdi
	rax = rax + Mem0[rsi:word64]
	SCZO = cond(rax)
	rax = rax + Mem0[rsi + 8<64>:word64]
	SCZO = cond(rax)
	Mem0[rax:byte] = 0<8>
	v20 = Mem0[rsi + 8<64>:word64] + rdi
	Mem0[rsi + 8<64>:word64] = v20
	SCZO = cond(v20)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000404210_exit
l0000000000404272:
	edx = Mem0[r8 + 0x18<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l000000000040423A
	// succ:  l000000000040427A l000000000040423A
l000000000040427A:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l0000000000404290
	// succ:  l000000000040427F l0000000000404290
l000000000040427F:
	SCZO = cond(rax - 2<64>)
	branch Test(ULE,CZ) l00000000004042B1
	// succ:  l0000000000404285 l00000000004042B1
l0000000000404285:
	bl = 2<8>
	// succ:  l0000000000404290
l0000000000404290:
	rbx = rbx + rbx
	SCZO = cond(rbx)
	SCZO = cond(rax - rbx)
	branch Test(UGT,CZ) l0000000000404290
	// succ:  l0000000000404298 l0000000000404290
l0000000000404298:
	rcx = Mem0[rsi:word64]
	rdx = rbx
	rax = realloc(rcx, rdx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004042B8
	// succ:  l00000000004042A8 l00000000004042B8
l00000000004042A8:
	Mem0[rsi:word64] = rax
	Mem0[rsi + 0x10<64>:word64] = rbx
	goto l0000000000404233
	// succ:  l0000000000404233
l00000000004042B1:
	ebx = 2<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l0000000000404298
	// succ:  l0000000000404298
l00000000004042B8:
	rcx = Mem0[rsi:word64]
	free(rcx)
	Mem0[rsi:word64] = 0<64>
	Mem0[rsi + 8<64>:word64] = 0<64>
	Mem0[rsi + 0x10<64>:word64] = 0<64>
	Mem0[rsi + 0x18<64>:word32] = 1<32>
	goto l000000000040423A
	// succ:  l000000000040423A
fn0000000000404210_exit:


// fn00000000004042F0
// Return size: 8
define fn00000000004042F0
fn00000000004042F0_entry:
	rsp = fp
	// succ:  l00000000004042F0
l00000000004042F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0xC8<64>
	SCZO = cond(rsp)
	SZO = cond(r8 & r8)
	C = false
	rbx = rcx
	r12d = edx
	r12 = CONVERT(r12d, word32, uint64)
	rbp = r8
	branch Test(EQ,Z) l0000000000404424
	// succ:  l0000000000404315 l0000000000404424
l0000000000404315:
	r9d = Mem0[rcx + 0x130<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NE,Z) l0000000000404405
	// succ:  l0000000000404325 l0000000000404405
l0000000000404325:
	ecx = Mem0[r8:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx - 0x4B<32>)
	branch Test(UGT,CZ) l0000000000405980
	// succ:  l0000000000404331 l0000000000405980
l0000000000404331:
	rax = 0x000000000048EE98<p64>
	edx = ecx
	rdx = CONVERT(edx, word32, uint64)
	rdx = CONVERT(Mem0[rax + rdx * 4<64>:word32], word32, int64)
	rax = rax + rdx
	SCZO = cond(rax)
	switch (ecx) { l000000000040532D l000000000040529C l000000000040529C l00000000004053B2 l00000000004051C7 l000000000040517E l000000000040515E l000000000040514A l000000000040510D l00000000004058E1 l000000000040586D l00000000004054AD l0000000000405434 l00000000004056B9 l0000000000405696 l000000000040595D l0000000000404FF2 l0000000000405745 l0000000000405722 l00000000004056FF l00000000004056DC l00000000004057FD l0000000000405768 l0000000000405090 l0000000000405015 l0000000000405652 l0000000000405652 l0000000000405652 l0000000000405647 l0000000000405647 l0000000000405647 l0000000000405647 l0000000000405647 l0000000000405647 l0000000000405647 l00000000004055AF l00000000004055AF l0000000000405647 l0000000000405647 l0000000000405521 l0000000000405859 l0000000000405820 l0000000000404EBC l0000000000404E53 l0000000000404D3F l0000000000404E53 l0000000000404C9A l0000000000404C9A l0000000000404C1D l0000000000404B97 l0000000000404E30 l0000000000404E0D l0000000000404B83 l0000000000404B44 l0000000000404A5F l0000000000404A50 l00000000004049AC l000000000040499D l000000000040499D l0000000000404343 l0000000000404343 l0000000000404922 l00000000004048FF l00000000004048CD l000000000040478D l000000000040470F l00000000004046EC l00000000004046C9 l000000000040467C l0000000000405980 l000000000040464D l000000000040484F l00000000004045D0 l00000000004044EF l000000000040446C l0000000000404430 }
	// succ:  l000000000040532D l000000000040529C l000000000040529C l00000000004053B2 l00000000004051C7 l000000000040517E l000000000040515E l000000000040514A l000000000040510D l00000000004058E1 l000000000040586D l00000000004054AD l0000000000405434 l00000000004056B9 l0000000000405696 l000000000040595D l0000000000404FF2 l0000000000405745 l0000000000405722 l00000000004056FF l00000000004056DC l00000000004057FD l0000000000405768 l0000000000405090 l0000000000405015 l0000000000405652 l0000000000405652 l0000000000405652 l0000000000405647 l0000000000405647 l0000000000405647 l0000000000405647 l0000000000405647 l0000000000405647 l0000000000405647 l00000000004055AF l00000000004055AF l0000000000405647 l0000000000405647 l0000000000405521 l0000000000405859 l0000000000405820 l0000000000404EBC l0000000000404E53 l0000000000404D3F l0000000000404E53 l0000000000404C9A l0000000000404C9A l0000000000404C1D l0000000000404B97 l0000000000404E30 l0000000000404E0D l0000000000404B83 l0000000000404B44 l0000000000404A5F l0000000000404A50 l00000000004049AC l000000000040499D l000000000040499D l0000000000404343 l0000000000404343 l0000000000404922 l00000000004048FF l00000000004048CD l000000000040478D l000000000040470F l00000000004046EC l00000000004046C9 l000000000040467C l0000000000405980 l000000000040464D l000000000040484F l00000000004045D0 l00000000004044EF l000000000040446C l0000000000404430
l0000000000404343:
	rax = Mem0[r8 + 8<64>:word64]
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SCZO = cond(Mem0[rax:word32] - 0x27<32>)
	branch Test(NE,Z) l0000000000404381
	// succ:  l000000000040434E l0000000000404381
l000000000040434E:
	rax = Mem0[rax + 8<64>:word64]
	esi = Mem0[rax + 0x1C<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi - 1<32>)
	branch Test(ULT,C) l0000000000404381
	// succ:  l000000000040435A l0000000000404381
l000000000040435A:
	SCZO = cond(esi - 6<32>)
	branch Test(ULE,CZ) l000000000040646E
	// succ:  l0000000000404363 l000000000040646E
l0000000000404363:
	SCZO = cond(esi - 7<32>)
	branch Test(NE,Z) l0000000000404381
	// succ:  l0000000000404368 l0000000000404381
l0000000000404368:
	rax = Mem0[r8 + 0x10<64>:word64]
	edx = Mem0[rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000404381
	// succ:  l0000000000404372 l0000000000404381
l0000000000404372:
	SCZO = cond(Mem0[rax + 0x10<64>:word32] - 1<32>)
	branch Test(NE,Z) l0000000000404381
	// succ:  l0000000000404378 l0000000000404381
l0000000000404378:
	SCZO = cond(ecx - 0x3B<32>)
	branch Test(EQ,Z) l0000000000406A50
	// succ:  l0000000000404381 l0000000000406A50
l0000000000404381:
	rax = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l00000000004063BD
	// succ:  l0000000000404394 l00000000004063BD
l0000000000404394:
	rdx = rax + 1<64>
	// succ:  l0000000000404398
l0000000000404398:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x28<8>
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0x108<64>:byte] = 0x28<8>
	r8 = Mem0[rbp + 8<64>:word64]
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	rax = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l000000000040638E
	// succ:  l00000000004043CC l000000000040638E
l00000000004043CC:
	rdx = rax + 1<64>
	// succ:  l00000000004043D0
l00000000004043D0:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x29<8>
	Mem0[rbx + 0x108<64>:byte] = 0x29<8>
	SCZO = cond(Mem0[rbp + 0<64>:word32] - 0x3C<32>)
	branch Test(EQ,Z) l000000000040668F
	// succ:  l00000000004043EC l000000000040668F
l00000000004043EC:
	SCZO = cond(esi - 8<32>)
	branch Test(EQ,Z) l0000000000406661
	// succ:  l00000000004043F5 l0000000000406661
l00000000004043F5:
	r8 = Mem0[rbp + 0x10<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	// succ:  l0000000000404405
l0000000000404405:
	rsp = rsp + 0xC8<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004042F0_exit
l0000000000404419:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l0000000000404424
	// succ:  l000000000040441D l0000000000404424
l000000000040441D:
	Mem0[rbx + 0x120<64>:word64] = rsi
	// succ:  l0000000000404424
l0000000000404424:
	Mem0[rbx + 0x130<64>:word32] = 1<32>
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000404430:
	r8 = Mem0[r8 + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	rdx = 0x000000000048EE8C<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	r8 = Mem0[rbp + 0x10<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	edx = 0x5D<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l000000000040446C:
	r8 = Mem0[r8 + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	rsi = 0x000000000048EC30<p64>
	r13 = 0x000000000048EC35<p64>
	call fn00000000004042F0 (retsize: 8;)
	rax = Mem0[rbx + 0x100<64>:word64]
	goto l00000000004044B8
	// succ:  l00000000004044B8
l0000000000404492:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000404499
l0000000000404499:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - r13)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l00000000004059B4
	// succ:  l00000000004044B8 l00000000004059B4
l00000000004044B8:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000404492
	// succ:  l00000000004044C3 l0000000000404492
l00000000004044C3:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v31 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v31
	SCZO = cond(v31)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000404499
	// succ:  l0000000000404499
l00000000004044EF:
	rdx = Mem0[r8 + 8<64>:word64]
	rcx = rbx
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	call fn0000000000404010 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004069DA
	// succ:  l0000000000404506 l00000000004069DA
l0000000000404506:
	// succ:  l0000000000404510
l0000000000404510:
	SCZO = cond(Mem0[rax:word32] - 0x2F<32>)
	branch Test(NE,Z) l0000000000405C82
	// succ:  l0000000000404519 l0000000000405C82
l0000000000404519:
	SCZO = cond(Mem0[rax + 8<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000405C82
	// succ:  l0000000000404524 l0000000000405C82
l0000000000404524:
	rax = Mem0[rax + 0x10<64>:word64]
	edi = edi + 1<32>
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l0000000000404510
	// succ:  l0000000000404530 l0000000000404510
l0000000000404530:
	r13 = Mem0[rbp + 8<64>:word64]
	// succ:  l0000000000404534
l0000000000404534:
	eax = SLICE(rdi - 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	r14 = 0x000000000048EDC8<p64>
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	Mem0[rsp + 0x28<64>:word32] = eax
	// succ:  l0000000000404544
l0000000000404544:
	Mem0[rbx + 0x134<64>:word32] = ebp
	r8 = r13
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x28<64>:word32] - ebp)
	branch Test(LE,SZO) l0000000000405990
	// succ:  l0000000000404562 l0000000000405990
l0000000000404562:
	rax = Mem0[rbx + 0x100<64>:word64]
	rsi = 0x000000000048EDC6<p64>
	goto l0000000000404598
	// succ:  l0000000000404598
l0000000000404572:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000404579
l0000000000404579:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = r15b
	SCZO = cond(rsi - r14)
	Mem0[rbx + 0x108<64>:byte] = r15b
	branch Test(EQ,Z) l0000000000405990
	// succ:  l0000000000404598 l0000000000405990
l0000000000404598:
	SCZO = cond(rax - 0xFF<64>)
	r15d = CONVERT(Mem0[rsi:byte], byte, word32)
	r15 = CONVERT(r15d, word32, uint64)
	branch Test(NE,Z) l0000000000404572
	// succ:  l00000000004045A4 l0000000000404572
l00000000004045A4:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v33 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v33
	SCZO = cond(v33)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000404579
	// succ:  l0000000000404579
l00000000004045D0:
	rax = Mem0[rbx + 0x100<64>:word64]
	rsi = 0x000000000048ED97<p64>
	r13 = 0x000000000048EDB1<p64>
	goto l0000000000404616
	// succ:  l0000000000404616
l00000000004045F0:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l00000000004045F7
l00000000004045F7:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - r13)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000405A2E
	// succ:  l0000000000404616 l0000000000405A2E
l0000000000404616:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l00000000004045F0
	// succ:  l0000000000404621 l00000000004045F0
l0000000000404621:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v34 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v34
	SCZO = cond(v34)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l00000000004045F7
	// succ:  l00000000004045F7
l000000000040464D:
	rdx = 0x000000000048EE7D<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	edx = Mem0[rbp + 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	call fn0000000000404130 (retsize: 8;)
	edx = 0x7D<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l000000000040467C:
	rdx = 0x000000000048EE71<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	rdx = 0x000000000048EE7A<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	edx = Mem0[rbp + 0x10<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	call fn0000000000404130 (retsize: 8;)
	edx = 0x7D<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l00000000004046C9:
	rdx = 0x000000000048EE54<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l00000000004046EC:
	rdx = 0x000000000048EE36<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l000000000040470F:
	rax = Mem0[rbx + 0x100<64>:word64]
	rsi = 0x000000000048EE1B<p64>
	r13 = 0x000000000048EE25<p64>
	goto l0000000000404756
	// succ:  l0000000000404756
l0000000000404730:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000404737
l0000000000404737:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - r13)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l00000000004059F1
	// succ:  l0000000000404756 l00000000004059F1
l0000000000404756:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000404730
	// succ:  l0000000000404761 l0000000000404730
l0000000000404761:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v43 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v43
	SCZO = cond(v43)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000404737
	// succ:  l0000000000404737
l000000000040478D:
	rdi = rsp + 0x40<64>
	r8d = Mem0[r8 + 8<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	rdx = 0x000000000048EC2C<p64>
	rcx = rdi
	r12 = rdi
	eax = sprintf(rcx, rdx, 0<32>)
	// succ:  l00000000004047A8
l00000000004047A8:
	edx = Mem0[r12:word32]
	rdx = CONVERT(edx, word32, uint64)
	r12 = r12 + 4<64>
	SCZO = cond(r12)
	eax = SLICE(rdx + 0xFFFFFFFFFEFEFEFF<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	edx = ~edx
	rdx = CONVERT(edx, word32, uint64)
	eax = eax & edx
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax & 0x80808080<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l00000000004047A8
	// succ:  l00000000004047C1 l00000000004047A8
l00000000004047C1:
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx >>u 0x10<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SZO = cond(eax & 0x8080<32>)
	C = false
	branch Test(NE,Z) l00000000004047CE
	// succ:  l00000000004047CB_1 l00000000004047CE
l00000000004047CB_1:
	eax = edx
	// succ:  l00000000004047CE
l00000000004047CE:
	rdx = r12 + 2<64>
	branch Test(NE,Z) l00000000004047D7
	// succ:  l00000000004047D3_1 l00000000004047D7
l00000000004047D3_1:
	r12 = rdx
	// succ:  l00000000004047D7
l00000000004047D7:
	al = al + al
	SCZO = cond(al)
	r12 = r12 - 3<64> - C
	SCZO = cond(r12)
	r12 = r12 - rdi
	SCZO = cond(r12)
	branch Test(EQ,Z) l0000000000404405
	// succ:  l00000000004047E6 l0000000000404405
l00000000004047E6:
	rax = Mem0[rbx + 0x100<64>:word64]
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l0000000000404817
	// succ:  l0000000000404817
l00000000004047F1:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l00000000004047F8
l00000000004047F8:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = bpl
	SCZO = cond(rsi - r12)
	Mem0[rbx + 0x108<64>:byte] = bpl
	branch Test(EQ,Z) l0000000000404405
	// succ:  l0000000000404817 l0000000000404405
l0000000000404817:
	SCZO = cond(rax - 0xFF<64>)
	ebp = CONVERT(Mem0[rdi + rsi:byte], byte, word32)
	rbp = CONVERT(ebp, word32, uint64)
	branch Test(NE,Z) l00000000004047F1
	// succ:  l0000000000404823 l00000000004047F1
l0000000000404823:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v46 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v46
	SCZO = cond(v46)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l00000000004047F8
	// succ:  l00000000004047F8
l000000000040484F:
	rax = Mem0[rbx + 0x100<64>:word64]
	rsi = 0x000000000048ED80<p64>
	r13 = 0x000000000048ED96<p64>
	goto l0000000000404896
	// succ:  l0000000000404896
l0000000000404870:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000404877
l0000000000404877:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - r13)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l00000000004059A0
	// succ:  l0000000000404896 l00000000004059A0
l0000000000404896:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000404870
	// succ:  l00000000004048A1 l0000000000404870
l00000000004048A1:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v38 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v38
	SCZO = cond(v38)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000404877
	// succ:  l0000000000404877
l00000000004048CD:
	rax = Mem0[rbx + 0x100<64>:word64]
	esi = Mem0[r8 + 8<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l00000000004062EB
	// succ:  l00000000004048E4 l00000000004062EB
l00000000004048E4:
	rdx = rax + 1<64>
	// succ:  l00000000004048E8
l00000000004048E8:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = sil
	Mem0[rbx + 0x108<64>:byte] = sil
	goto l0000000000404405
	// succ:  l0000000000404405
l00000000004048FF:
	r8 = Mem0[r8 + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	r8 = Mem0[rbp + 0x10<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000404922:
	rax = Mem0[rbx + 0x100<64>:word64]
	rsi = 0x000000000048EE0C<p64>
	r13 = 0x000000000048EE1A<p64>
	goto l0000000000404966
	// succ:  l0000000000404966
l0000000000404940:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000404947
l0000000000404947:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - r13)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000405ADD
	// succ:  l0000000000404966 l0000000000405ADD
l0000000000404966:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000404940
	// succ:  l0000000000404971 l0000000000404940
l0000000000404971:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v47 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v47
	SCZO = cond(v47)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000404947
	// succ:  l0000000000404947
l000000000040499D:
	Mem0[rbx + 0x130<64>:word32] = 1<32>
	goto l0000000000404405
	// succ:  l0000000000404405
l00000000004049AC:
	rax = Mem0[r8 + 0x10<64>:word64]
	SCZO = cond(Mem0[rax:word32] - 0x39<32>)
	branch Test(NE,Z) l0000000000404424
	// succ:  l00000000004049B9 l0000000000404424
l00000000004049B9:
	rdx = Mem0[rax + 0x10<64>:word64]
	SCZO = cond(Mem0[rdx:word32] - 0x3A<32>)
	branch Test(NE,Z) l0000000000404424
	// succ:  l00000000004049C6 l0000000000404424
l00000000004049C6:
	r15 = Mem0[r8 + 8<64>:word64]
	r13 = Mem0[rax + 8<64>:word64]
	rdi = 0x000000000048EDEB<p64>
	ecx = 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	r14 = Mem0[rdx + 8<64>:word64]
	rbp = Mem0[rdx + 0x10<64>:word64]
	rax = Mem0[r15 + 8<64>:word64]
	rsi = Mem0[rax:word64]
	// succ:  l00000000004049E9
l00000000004049E9:
	branch rcx == 0<64> l00000000004049EB
	// succ:  l00000000004049E9_1 l00000000004049EB
l00000000004049E9_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l00000000004049E9
	// succ:  l00000000004049EB l00000000004049E9
l00000000004049EB:
	branch Test(EQ,Z) l000000000040694A
	// succ:  l00000000004049F1 l000000000040694A
l00000000004049F1:
	rdx = 0x000000000048EDF2<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	SCZO = cond(Mem0[r13 + 8<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000404A22
	// succ:  l0000000000404A07 l0000000000404A22
l0000000000404A07:
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	r8 = r13
	call fn0000000000407E20 (retsize: 8;)
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	// succ:  l0000000000404A22
l0000000000404A22:
	r8 = r14
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l0000000000404405
	// succ:  l0000000000404A39 l0000000000404405
l0000000000404A39:
	r8 = rbp
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000407E20 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000404A50:
	Mem0[rbx + 0x130<64>:word32] = 1<32>
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000404A5F:
	rax = Mem0[r8 + 0x10<64>:word64]
	SCZO = cond(Mem0[rax:word32] - 0x37<32>)
	branch Test(NE,Z) l0000000000404424
	// succ:  l0000000000404A6C l0000000000404424
l0000000000404A6C:
	r8 = Mem0[r8 + 8<64>:word64]
	rcx = Mem0[r8 + 8<64>:word64]
	rdx = Mem0[rcx:word64]
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x63<8>)
	branch Test(EQ,Z) l00000000004066A1
	// succ:  l0000000000404A81 l00000000004066A1
l0000000000404A81:
	SCZO = cond(Mem0[r8:word32] - 0x31<32>)
	branch Test(EQ,Z) l00000000004068C3
	// succ:  l0000000000404A8B l00000000004068C3
l0000000000404A8B:
	rsi = rdx
	// succ:  l0000000000404A8E
l0000000000404A8E:
	r13 = 0x000000000048EDE5<p64>
	ecx = 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	r8 = Mem0[rax + 8<64>:word64]
	rdi = r13
	// succ:  l0000000000404AA1
l0000000000404AA1:
	branch rcx == 0<64> l0000000000404AA3
	// succ:  l0000000000404AA1_1 l0000000000404AA3
l0000000000404AA1_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000404AA1
	// succ:  l0000000000404AA3 l0000000000404AA1
l0000000000404AA3:
	cl = CONVERT(Test(UGT,CZ), bool, int8)
	dl = CONVERT(Test(ULT,C), bool, int8)
	SCZO = cond(cl - dl)
	branch Test(NE,Z) l0000000000404AB7
	// succ:  l0000000000404AAD l0000000000404AB7
l0000000000404AAD:
	SCZO = cond(Mem0[r8:word32] - 3<32>)
	branch Test(EQ,Z) l0000000000406996
	// succ:  l0000000000404AB7 l0000000000406996
l0000000000404AB7:
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000407E20 (retsize: 8;)
	// succ:  l0000000000404AC2
l0000000000404AC2:
	r8 = Mem0[rbp + 8<64>:word64]
	rdi = 0x000000000048EDE8<p64>
	ecx = 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = Mem0[r8 + 8<64>:word64]
	rax = Mem0[rax:word64]
	rsi = rax
	// succ:  l0000000000404ADC
l0000000000404ADC:
	branch rcx == 0<64> l0000000000404ADE
	// succ:  l0000000000404ADC_2 l0000000000404ADE
l0000000000404ADC_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000404ADC
	// succ:  l0000000000404ADE l0000000000404ADC
l0000000000404ADE:
	branch Test(EQ,Z) l0000000000406891
	// succ:  l0000000000404AE4 l0000000000406891
l0000000000404AE4:
	ecx = 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rax
	rdi = r13
	// succ:  l0000000000404AEF
l0000000000404AEF:
	branch rcx == 0<64> l0000000000404AF1
	// succ:  l0000000000404AEF_3 l0000000000404AF1
l0000000000404AEF_3:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000404AEF
	// succ:  l0000000000404AF1 l0000000000404AEF
l0000000000404AF1:
	branch Test(NE,Z) l000000000040693A
	// succ:  l0000000000404AF7 l000000000040693A
l0000000000404AF7:
	rax = Mem0[rbp + 0x10<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	r8 = Mem0[rax + 0x10<64>:word64]
	call fn0000000000407E20 (retsize: 8;)
	// succ:  l0000000000404B0A
l0000000000404B0A:
	rax = Mem0[rbp + 8<64>:word64]
	SCZO = cond(Mem0[rax:word32] - 0x31<32>)
	branch Test(NE,Z) l0000000000404405
	// succ:  l0000000000404B17 l0000000000404405
l0000000000404B17:
	rax = Mem0[rax + 8<64>:word64]
	SCZO = cond(Mem0[rax + 0x10<64>:word32] - 1<32>)
	branch Test(NE,Z) l0000000000404405
	// succ:  l0000000000404B25 l0000000000404405
l0000000000404B25:
	rax = Mem0[rax + 8<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x3E<8>)
	branch Test(NE,Z) l0000000000404405
	// succ:  l0000000000404B32 l0000000000404405
l0000000000404B32:
	edx = 0x29<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000404B44:
	r13 = Mem0[r8 + 8<64>:word64]
	r14 = Mem0[r8 + 0x10<64>:word64]
	eax = Mem0[r13 + 0<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x31<32>)
	branch Test(EQ,Z) l0000000000405E24
	// succ:  l0000000000404B59 l0000000000405E24
l0000000000404B59:
	SCZO = cond(eax - 0x33<32>)
	branch Test(EQ,Z) l0000000000406024
	// succ:  l0000000000404B62 l0000000000406024
l0000000000404B62:
	r8 = r13
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000407D70 (retsize: 8;)
	rsp = rsp + 8<64>
	// succ:  l0000000000404B70
l0000000000404B70:
	r8 = r14
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000407E20 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000404B83:
	r8 = Mem0[r8 + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000407D70 (retsize: 8;)
	rsp = rsp + 8<64>
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000404B97:
	rbp = Mem0[r8 + 8<64>:word64]
	rax = Mem0[rbx + 0x100<64>:word64]
	rsi = 0x000000000048EDC9<p64>
	r13 = 0x000000000048EDD1<p64>
	r12d = Mem0[rbp + 0x10<64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	goto l0000000000404BE6
	// succ:  l0000000000404BE6
l0000000000404BC0:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000404BC7
l0000000000404BC7:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - r13)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000405A42
	// succ:  l0000000000404BE6 l0000000000405A42
l0000000000404BE6:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000404BC0
	// succ:  l0000000000404BF1 l0000000000404BC0
l0000000000404BF1:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v54 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v54
	SCZO = cond(v54)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000404BC7
	// succ:  l0000000000404BC7
l0000000000404C1D:
	r8 = Mem0[r8 + 8<64>:word64]
	rsi = Mem0[rbp + 0x10<64>:word64]
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l0000000000404C35
	// succ:  l0000000000404C2A l0000000000404C35
l0000000000404C2A:
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	// succ:  l0000000000404C35
l0000000000404C35:
	rax = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l00000000004061F1
	// succ:  l0000000000404C48 l00000000004061F1
l0000000000404C48:
	rdx = rax + 1<64>
	// succ:  l0000000000404C4C
l0000000000404C4C:
	Mem0[rbx + 0x100<64>:word64] = rdx
	r8 = rsi
	Mem0[rbx + rax:byte] = 0x7B<8>
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0x108<64>:byte] = 0x7B<8>
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	rax = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l00000000004061C2
	// succ:  l0000000000404C7F l00000000004061C2
l0000000000404C7F:
	rdx = rax + 1<64>
	// succ:  l0000000000404C83
l0000000000404C83:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x7D<8>
	Mem0[rbx + 0x108<64>:byte] = 0x7D<8>
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000404C9A:
	r8 = Mem0[r8 + 8<64>:word64]
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l0000000000404CAE
	// succ:  l0000000000404CA3 l0000000000404CAE
l0000000000404CA3:
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	// succ:  l0000000000404CAE
l0000000000404CAE:
	SCZO = cond(Mem0[rbp + 0x10<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000404405
	// succ:  l0000000000404CB9 l0000000000404405
l0000000000404CB9:
	rsi = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rsi - 0xFD<64>)
	branch Test(UGT,CZ) l0000000000406052
	// succ:  l0000000000404CCD l0000000000406052
l0000000000404CCD:
	rdi = 0x000000000048EDC6<p64>
	r14 = 0x000000000048EDC8<p64>
	goto l0000000000404D06
	// succ:  l0000000000404D06
l0000000000404CE0:
	rax = rsi
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	// succ:  l0000000000404CE7
l0000000000404CE7:
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	Mem0[rbx + 0x100<64>:word64] = rsi
	Mem0[rbx + rax:byte] = r13b
	SCZO = cond(rdi - r14)
	Mem0[rbx + 0x108<64>:byte] = r13b
	branch Test(EQ,Z) l0000000000405C31
	// succ:  l0000000000404D06 l0000000000405C31
l0000000000404D06:
	SCZO = cond(rsi - 0xFF<64>)
	r13d = CONVERT(Mem0[rdi:byte], byte, word32)
	r13 = CONVERT(r13d, word32, uint64)
	branch Test(NE,Z) l0000000000404CE0
	// succ:  l0000000000404D13 l0000000000404CE0
l0000000000404D13:
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v67 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v67
	SCZO = cond(v67)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000404CE7
	// succ:  l0000000000404CE7
l0000000000404D3F:
	SCZO = cond(Mem0[r8 + 0x12<64>:word16] - 0<16>)
	branch Test(NE,Z) l0000000000405EBC
	// succ:  l0000000000404D4B l0000000000405EBC
l0000000000404D4B:
	r8 = Mem0[rbp + 8<64>:word64]
	rax = 0x0000000000490180<p64>
	SCZO = cond(Mem0[r8 + 8<64>:word64] - rax)
	branch Test(EQ,Z) l0000000000405DBE
	// succ:  l0000000000404D60 l0000000000405DBE
l0000000000404D60:
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	rdx = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rdx - 0xFF<64>)
	branch Test(EQ,Z) l0000000000406580
	// succ:  l0000000000404D7F l0000000000406580
l0000000000404D7F:
	rax = rdx + 1<64>
	// succ:  l0000000000404D83
l0000000000404D83:
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = 0x20<8>
	Mem0[rbx + 0x108<64>:byte] = 0x20<8>
	// succ:  l0000000000404D95
l0000000000404D95:
	SCZO = cond(Mem0[rbp + 0x10<64>:word16] - 0<16>)
	branch Test(EQ,Z) l0000000000405C93
	// succ:  l0000000000404DA0 l0000000000405C93
l0000000000404DA0:
	rsi = 0x000000000048EDB8<p64>
	rbp = 0x000000000048EDBE<p64>
	goto l0000000000404DD6
	// succ:  l0000000000404DD6
l0000000000404DB0:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000404DB7
l0000000000404DB7:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - rbp)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000404405
	// succ:  l0000000000404DD6 l0000000000404405
l0000000000404DD6:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000404DB0
	// succ:  l0000000000404DE1 l0000000000404DB0
l0000000000404DE1:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v62 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v62
	SCZO = cond(v62)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000404DB7
	// succ:  l0000000000404DB7
l0000000000404E0D:
	rdx = 0x000000000048EDD2<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	r8 = rbp + 8<64>
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000407B40 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000404E30:
	rdx = 0x000000000048EDD2<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	r8 = Mem0[rbp + 0x10<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000404E53:
	rax = Mem0[rbx + 0x128<64>:word64]
	Mem0[rsp + 0x48<64>:word64] = r8
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rsp + 0x50<64>:word32] = 0<32>
	Mem0[rsp + 0x40<64>:word64] = rax
	rax = rsp + 0x40<64>
	Mem0[rbx + 0x128<64>:word64] = rax
	rax = Mem0[rbx + 0x120<64>:word64]
	r8 = Mem0[r8 + 0x10<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = rax
	call fn00000000004042F0 (retsize: 8;)
	r10d = Mem0[rsp + 0x50<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d & r10d)
	C = false
	branch Test(NE,Z) l0000000000404EAB
	// succ:  l0000000000404E9D l0000000000404EAB
l0000000000404E9D:
	r8 = rbp
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000406AD0 (retsize: 8;)
	rsp = rsp + 8<64>
	// succ:  l0000000000404EAB
l0000000000404EAB:
	rax = Mem0[rsp + 0x40<64>:word64]
	Mem0[rbx + 0x128<64>:word64] = rax
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000404EBC:
	rcx = Mem0[rbx + 0x128<64>:word64]
	rax = Mem0[rbx + 0x120<64>:word64]
	rdi = rsp + 0x40<64>
	Mem0[rsp + 0x48<64>:word64] = r8
	Mem0[rsp + 0x50<64>:word32] = 0<32>
	Mem0[rbx + 0x128<64>:word64] = rdi
	r13 = rcx
	Mem0[rsp + 0x40<64>:word64] = rcx
	Mem0[rsp + 0x58<64>:word64] = rax
	SZO = cond(r13 & r13)
	C = false
	rcx = rdi
	branch Test(EQ,Z) l000000000040650E
	// succ:  l0000000000404EFC l000000000040650E
l0000000000404EFC:
	rax = Mem0[r13 + 8<64>:word64]
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 0x19<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - 2<32>)
	branch Test(UGT,CZ) l000000000040650E
	// succ:  l0000000000404F0E l000000000040650E
l0000000000404F0E:
	rax = r13
	esi = 1<32>
	rsi = CONVERT(esi, word32, uint64)
	goto l0000000000404F2E
	// succ:  l0000000000404F2E
l0000000000404F20:
	rdx = Mem0[rax + 8<64>:word64]
	edx = Mem0[rdx:word32]
	rdx = CONVERT(edx, word32, uint64)
	edx = edx - 0x19<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(edx - 2<32>)
	branch Test(UGT,CZ) l0000000000404F8B
	// succ:  l0000000000404F2E l0000000000404F8B
l0000000000404F2E:
	r14d = Mem0[rax + 0x10<64>:word32]
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d & r14d)
	C = false
	branch Test(NE,Z) l0000000000404F83
	// succ:  l0000000000404F37 l0000000000404F83
l0000000000404F37:
	SCZO = cond(esi - 3<32>)
	branch Test(UGT,CZ) l00000000004062DC
	// succ:  l0000000000404F40 l00000000004062DC
l0000000000404F40:
	r8 = Mem0[rax:word64]
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	esi = esi + 1<32>
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	rdx = rdx << 5<64>
	SCZO = cond(rdx)
	Mem0[rsp + 0x40<64> + rdx:word64] = r8
	r8 = Mem0[rax + 8<64>:word64]
	Mem0[rsp + 0x48<64> + rdx:word64] = r8
	r8 = Mem0[rax + 0x10<64>:word64]
	Mem0[rsp + 0x50<64> + rdx:word64] = r8
	r8 = Mem0[rax + 0x18<64>:word64]
	Mem0[rsp + 0x40<64> + rdx:word64] = rcx
	rcx = rdi + rdx
	Mem0[rsp + 0x58<64> + rdx:word64] = r8
	Mem0[rbx + 0x128<64>:word64] = rcx
	Mem0[rax + 0x10<64>:word32] = 1<32>
	// succ:  l0000000000404F83
l0000000000404F83:
	rax = Mem0[rax:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l0000000000404F20
	// succ:  l0000000000404F8B l0000000000404F20
l0000000000404F8B:
	r8 = Mem0[rbp + 0x10<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	r11d = Mem0[rsp + 0x50<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	Mem0[rbx + 0x128<64>:word64] = r13
	SZO = cond(r11d & r11d)
	C = false
	branch Test(NE,Z) l0000000000404405
	// succ:  l0000000000404FAF l0000000000404405
l0000000000404FAF:
	SCZO = cond(esi - 1<32>)
	branch Test(EQ,Z) l000000000040652F
	// succ:  l0000000000404FB8 l000000000040652F
l0000000000404FB8:
	eax = SLICE(rsi - 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	rsi = rax
	rax = rax << 5<64>
	SCZO = cond(rax)
	r8 = Mem0[rsp + 0x48<64> + rax:word64]
	call fn0000000000406AD0 (retsize: 8;)
	rsp = rsp + 8<64>
	SCZO = cond(esi - 1<32>)
	branch Test(NE,Z) l0000000000404FB8
	// succ:  l0000000000404FD7 l0000000000404FB8
l0000000000404FD7:
	r9 = Mem0[rbx + 0x128<64>:word64]
	// succ:  l0000000000404FDE
l0000000000404FDE:
	r8 = rbp + 8<64>
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000407580 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000404FF2:
	rdx = 0x000000000048ECD0<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405015:
	r12 = CONVERT(Mem0[r8 + 0x10<64>:word32], word32, int64)
	rbp = Mem0[r8 + 8<64>:word64]
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l0000000000404405
	// succ:  l0000000000405026 l0000000000404405
l0000000000405026:
	rax = Mem0[rbx + 0x100<64>:word64]
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l0000000000405057
	// succ:  l0000000000405057
l0000000000405031:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000405038
l0000000000405038:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(r12 - rsi)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000404405
	// succ:  l0000000000405057 l0000000000404405
l0000000000405057:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rbp + 0<64> + rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000405031
	// succ:  l0000000000405064 l0000000000405031
l0000000000405064:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v76 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v76
	SCZO = cond(v76)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000405038
	// succ:  l0000000000405038
l0000000000405090:
	rax = Mem0[rbx + 0x100<64>:word64]
	rsi = 0x000000000048ED6E<p64>
	r13 = 0x000000000048ED7F<p64>
	goto l00000000004050D6
	// succ:  l00000000004050D6
l00000000004050B0:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l00000000004050B7
l00000000004050B7:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - r13)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000405C1D
	// succ:  l00000000004050D6 l0000000000405C1D
l00000000004050D6:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l00000000004050B0
	// succ:  l00000000004050E1 l00000000004050B0
l00000000004050E1:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v77 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v77
	SCZO = cond(v77)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l00000000004050B7
	// succ:  l00000000004050B7
l000000000040510D:
	rax = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l000000000040631A
	// succ:  l0000000000405120 l000000000040631A
l0000000000405120:
	rdx = rax + 1<64>
	// succ:  l0000000000405124
l0000000000405124:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x7E<8>
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0x108<64>:byte] = 0x7E<8>
	r8 = Mem0[rbp + 0x10<64>:word64]
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l000000000040514A:
	r8 = Mem0[r8 + 0x10<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l000000000040515E:
	esi = Mem0[r8 + 8<64>:word32]
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l0000000000405D00
	// succ:  l000000000040516A l0000000000405D00
l000000000040516A:
	rdx = 0x000000000048EE2A<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l000000000040517E:
	rdx = r8 + 8<64>
	rcx = rbx
	call fn0000000000403FA0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000404424
	// succ:  l0000000000405193 l0000000000404424
l0000000000405193:
	SCZO = cond(Mem0[rax:word32] - 0x2F<32>)
	branch Test(EQ,Z) l0000000000406096
	// succ:  l000000000040519C l0000000000406096
l000000000040519C:
	rsi = Mem0[rbx + 0x120<64>:word64]
	r8 = rax
	rcx = rbx
	rdx = Mem0[rsi:word64]
	Mem0[rbx + 0x120<64>:word64] = rdx
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	call fn00000000004042F0 (retsize: 8;)
	Mem0[rbx + 0x120<64>:word64] = rsi
	goto l0000000000404405
	// succ:  l0000000000404405
l00000000004051C7:
	SZO = cond(r12b & 4<8>)
	C = false
	r13 = Mem0[rbx + 0x160<64>:word64]
	r14 = Mem0[rbx + 0x128<64>:word64]
	Mem0[rbx + 0x160<64>:word64] = r8
	Mem0[rbx + 0x128<64>:word64] = 0<64>
	r8 = Mem0[r8 + 8<64>:word64]
	branch Test(EQ,Z) l0000000000405203
	// succ:  l00000000004051F1 l0000000000405203
l00000000004051F1:
	ecx = Mem0[r8:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l0000000000405203
	// succ:  l00000000004051F8 l0000000000405203
l00000000004051F8:
	SCZO = cond(Mem0[r8 + 0x10<64>:word32] - 6<32>)
	branch Test(EQ,Z) l0000000000406856
	// succ:  l0000000000405203 l0000000000406856
l0000000000405203:
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	SCZO = cond(Mem0[rbx + 0x108<64>:byte] - 0x3C<8>)
	branch Test(EQ,Z) l000000000040663D
	// succ:  l000000000040521B l000000000040663D
l000000000040521B:
	rax = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l00000000004062AD
	// succ:  l000000000040522E l00000000004062AD
l000000000040522E:
	rdx = rax + 1<64>
	// succ:  l0000000000405232
l0000000000405232:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x3C<8>
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0x108<64>:byte] = 0x3C<8>
	r8 = Mem0[rbp + 0x10<64>:word64]
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	SCZO = cond(Mem0[rbx + 0x108<64>:byte] - 0x3E<8>)
	branch Test(EQ,Z) l000000000040664F
	// succ:  l0000000000405260 l000000000040664F
l0000000000405260:
	rax = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l000000000040627E
	// succ:  l0000000000405273 l000000000040627E
l0000000000405273:
	rdx = rax + 1<64>
	// succ:  l0000000000405277
l0000000000405277:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x3E<8>
	Mem0[rbx + 0x108<64>:byte] = 0x3E<8>
	// succ:  l0000000000405289
l0000000000405289:
	Mem0[rbx + 0x128<64>:word64] = r14
	Mem0[rbx + 0x160<64>:word64] = r13
	goto l0000000000404405
	// succ:  l0000000000404405
l000000000040529C:
	r8 = Mem0[r8 + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	SZO = cond(r12b & 4<8>)
	C = false
	rax = Mem0[rbx + 0x100<64>:word64]
	branch Test(NE,Z) l0000000000405B19
	// succ:  l00000000004052BC l0000000000405B19
l00000000004052BC:
	rsi = 0x000000000048EC36<p64>
	r13 = 0x000000000048EC38<p64>
	goto l00000000004052F6
	// succ:  l00000000004052F6
l00000000004052D0:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l00000000004052D7
l00000000004052D7:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - r13)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000405B3B
	// succ:  l00000000004052F6 l0000000000405B3B
l00000000004052F6:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l00000000004052D0
	// succ:  l0000000000405301 l00000000004052D0
l0000000000405301:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v29 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v29
	SCZO = cond(v29)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l00000000004052D7
	// succ:  l00000000004052D7
l000000000040532D:
	r12d = r12d & 4<32>
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	branch Test(NE,Z) l00000000004060E0
	// succ:  l0000000000405337 l00000000004060E0
l0000000000405337:
	r12 = CONVERT(Mem0[r8 + 0x10<64>:word32], word32, int64)
	rbp = Mem0[r8 + 8<64>:word64]
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l0000000000404405
	// succ:  l0000000000405348 l0000000000404405
l0000000000405348:
	rax = Mem0[rbx + 0x100<64>:word64]
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l0000000000405379
	// succ:  l0000000000405379
l0000000000405353:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l000000000040535A
l000000000040535A:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(r12 - rsi)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000404405
	// succ:  l0000000000405379 l0000000000404405
l0000000000405379:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rbp + 0<64> + rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000405353
	// succ:  l0000000000405386 l0000000000405353
l0000000000405386:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v86 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v86
	SCZO = cond(v86)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l000000000040535A
	// succ:  l000000000040535A
l00000000004053B2:
	r14 = Mem0[rbx + 0x128<64>:word64]
	Mem0[rbx + 0x128<64>:word64] = 0<64>
	rsi = Mem0[r8 + 8<64>:word64]
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000405425
	// succ:  l00000000004053CD l0000000000405425
l00000000004053CD:
	rdi = rsp + 0x40<64>
	r9 = Mem0[rbx + 0x120<64>:word64]
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	rax = rdi
	// succ:  l00000000004053E1
l00000000004053E1:
	Mem0[rax:word64] = rdx
	edx = Mem0[rsi:word32]
	rdx = CONVERT(edx, word32, uint64)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	r8 = rax
	Mem0[rbx + 0x128<64>:word64] = rax
	Mem0[rax + 8<64>:word64] = rsi
	Mem0[rax + 0x10<64>:word32] = 0<32>
	Mem0[rax + 0x18<64>:word64] = r9
	ecx = SLICE(rdx - 0x1C<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx - 4<32>)
	branch Test(UGT,CZ) l000000000040674B
	// succ:  l000000000040540F l000000000040674B
l000000000040540F:
	rsi = Mem0[rsi + 8<64>:word64]
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l0000000000405425
	// succ:  l0000000000405418 l0000000000405425
l0000000000405418:
	rax = rax + 0x20<64>
	SCZO = cond(rax)
	SCZO = cond(r13d - 4<32>)
	rdx = r8
	branch Test(NE,Z) l00000000004053E1
	// succ:  l0000000000405425 l00000000004053E1
l0000000000405425:
	Mem0[rbx + 0x130<64>:word32] = 1<32>
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405434:
	rax = Mem0[rbx + 0x100<64>:word64]
	rsi = 0x000000000048EC88<p64>
	r13 = 0x000000000048EC95<p64>
	goto l0000000000405476
	// succ:  l0000000000405476
l0000000000405450:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000405457
l0000000000405457:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - r13)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000405B6D
	// succ:  l0000000000405476 l0000000000405B6D
l0000000000405476:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000405450
	// succ:  l0000000000405481 l0000000000405450
l0000000000405481:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v79 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v79
	SCZO = cond(v79)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000405457
	// succ:  l0000000000405457
l00000000004054AD:
	rax = Mem0[rbx + 0x100<64>:word64]
	rsi = 0x000000000048EC6A<p64>
	r13 = 0x000000000048EC82<p64>
	goto l00000000004054EA
	// succ:  l00000000004054EA
l00000000004054C4:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l00000000004054CB
l00000000004054CB:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - r13)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000405B81
	// succ:  l00000000004054EA l0000000000405B81
l00000000004054EA:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l00000000004054C4
	// succ:  l00000000004054F5 l00000000004054C4
l00000000004054F5:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v80 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v80
	SCZO = cond(v80)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l00000000004054CB
	// succ:  l00000000004054CB
l0000000000405521:
	r12d = r12d & 4<32>
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	rax = Mem0[r8 + 8<64>:word64]
	branch Test(NE,Z) l0000000000405D2B
	// succ:  l000000000040552F l0000000000405D2B
l000000000040552F:
	rbp = CONVERT(Mem0[rax + 8<64>:word32], word32, int64)
	r12 = Mem0[rax:word64]
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l0000000000404405
	// succ:  l000000000040553F l0000000000404405
l000000000040553F:
	rax = Mem0[rbx + 0x100<64>:word64]
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l0000000000405576
	// succ:  l0000000000405576
l0000000000405550:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000405557
l0000000000405557:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rbp - rsi)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000404405
	// succ:  l0000000000405576 l0000000000404405
l0000000000405576:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[r12 + rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000405550
	// succ:  l0000000000405583 l0000000000405550
l0000000000405583:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v73 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v73
	SCZO = cond(v73)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000405557
	// succ:  l0000000000405557
l00000000004055AF:
	rax = Mem0[r8 + 8<64>:word64]
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	edx = Mem0[rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - 5<32>)
	branch Test(EQ,Z) l0000000000405F30
	// succ:  l00000000004055C0 l0000000000405F30
l00000000004055C0:
	SCZO = cond(edx - 0x23<32>)
	branch Test(EQ,Z) l0000000000405DAF
	// succ:  l00000000004055C9 l0000000000405DAF
l00000000004055C9:
	SCZO = cond(Mem0[rbp + 0<64>:word32] - edx)
	branch Test(EQ,Z) l0000000000405DAF
	// succ:  l00000000004055D2 l0000000000405DAF
l00000000004055D2:
	SCZO = cond(edx - 0x24<32>)
	branch Test(EQ,Z) l0000000000406537
	// succ:  l00000000004055DB l0000000000406537
l00000000004055DB:
	rdx = Mem0[rbx + 0x128<64>:word64]
	// succ:  l00000000004055E2
l00000000004055E2:
	rax = rsp + 0x40<64>
	Mem0[rsp + 0x40<64>:word64] = rdx
	Mem0[rsp + 0x48<64>:word64] = rbp
	Mem0[rsp + 0x50<64>:word32] = 0<32>
	Mem0[rbx + 0x128<64>:word64] = rax
	rax = Mem0[rbx + 0x120<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = rax
	// succ:  l000000000040560C
l000000000040560C:
	r8 = Mem0[rbp + 8<64>:word64]
	// succ:  l0000000000405610
l0000000000405610:
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	eax = Mem0[rsp + 0x50<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000405C6F
	// succ:  l0000000000405627 l0000000000405C6F
l0000000000405627:
	rax = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(edi & edi)
	C = false
	Mem0[rbx + 0x128<64>:word64] = rax
	branch Test(EQ,Z) l0000000000404405
	// succ:  l000000000040563B l0000000000404405
l000000000040563B:
	Mem0[rbx + 0x120<64>:word64] = rsi
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405647:
	rdx = Mem0[rbx + 0x128<64>:word64]
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	goto l00000000004055E2
	// succ:  l00000000004055E2
l0000000000405652:
	r9 = Mem0[rbx + 0x128<64>:word64]
	SZO = cond(r9 & r9)
	C = false
	branch Test(EQ,Z) l0000000000406A07
	// succ:  l0000000000405662 l0000000000406A07
l0000000000405662:
	rax = r9
	// succ:  l0000000000405665
l0000000000405665:
	edx = Mem0[rax + 0x10<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000405684
	// succ:  l000000000040566C l0000000000405684
l000000000040566C:
	rdx = Mem0[rax + 8<64>:word64]
	edx = Mem0[rdx:word32]
	rdx = CONVERT(edx, word32, uint64)
	r8d = SLICE(rdx - 0x19<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d - 2<32>)
	branch Test(UGT,CZ) l000000000040568C
	// succ:  l000000000040567C l000000000040568C
l000000000040567C:
	SCZO = cond(ecx - edx)
	branch Test(EQ,Z) l0000000000406082
	// succ:  l0000000000405684 l0000000000406082
l0000000000405684:
	rax = Mem0[rax:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l0000000000405665
	// succ:  l000000000040568C l0000000000405665
l000000000040568C:
	rdx = r9
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	goto l00000000004055E2
	// succ:  l00000000004055E2
l0000000000405696:
	rdx = 0x000000000048ECA9<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l00000000004056B9:
	rdx = 0x000000000048EC96<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l00000000004056DC:
	rdx = 0x000000000048ED21<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l00000000004056FF:
	rdx = 0x000000000048ED0D<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405722:
	rdx = 0x000000000048ECFD<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405745:
	rdx = 0x000000000048ECE2<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405768:
	rdx = 0x000000000048ED52<p64>
	rcx = rbx
	rsi = 0x000000000048ED68<p64>
	r13 = 0x000000000048ED6D<p64>
	call fn0000000000404090 (retsize: 8;)
	r8 = Mem0[rbp + 0x10<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	rax = Mem0[rbx + 0x100<64>:word64]
	goto l00000000004057C6
	// succ:  l00000000004057C6
l00000000004057A0:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l00000000004057A7
l00000000004057A7:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - r13)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000405B59
	// succ:  l00000000004057C6 l0000000000405B59
l00000000004057C6:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l00000000004057A0
	// succ:  l00000000004057D1 l00000000004057A0
l00000000004057D1:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v78 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v78
	SCZO = cond(v78)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l00000000004057A7
	// succ:  l00000000004057A7
l00000000004057FD:
	rdx = 0x000000000048ED38<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405820:
	SZO = cond(r12b & 0x20<8>)
	C = false
	branch Test(NE,Z) l0000000000405DCA
	// succ:  l000000000040582A l0000000000405DCA
l000000000040582A:
	SCZO = cond(Mem0[r8 + 8<64>:word64] - 0<64>)
	branch Test(EQ,Z) l000000000040583B
	// succ:  l0000000000405831 l000000000040583B
l0000000000405831:
	SZO = cond(r12b & 0x40<8>)
	C = false
	branch Test(EQ,Z) l00000000004063EC
	// succ:  l000000000040583B l00000000004063EC
l000000000040583B:
	r9 = Mem0[rbx + 0x128<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	r8 = rbp + 0x10<64>
	edx = edx & 0xFFFFFF9F<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rbx
	call fn0000000000407820 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405859:
	r8 = Mem0[r8 + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l000000000040586D:
	rax = Mem0[rbx + 0x100<64>:word64]
	rsi = 0x000000000048EC61<p64>
	r13 = 0x000000000048EC69<p64>
	goto l00000000004058AA
	// succ:  l00000000004058AA
l0000000000405884:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l000000000040588B
l000000000040588B:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - r13)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000405AF1
	// succ:  l00000000004058AA l0000000000405AF1
l00000000004058AA:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000405884
	// succ:  l00000000004058B5 l0000000000405884
l00000000004058B5:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v30 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v30
	SCZO = cond(v30)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l000000000040588B
	// succ:  l000000000040588B
l00000000004058E1:
	rax = Mem0[rbx + 0x100<64>:word64]
	rsi = 0x000000000048EC55<p64>
	r13 = 0x000000000048EC60<p64>
	goto l0000000000405926
	// succ:  l0000000000405926
l0000000000405900:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000405907
l0000000000405907:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - r13)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000405B05
	// succ:  l0000000000405926 l0000000000405B05
l0000000000405926:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000405900
	// succ:  l0000000000405931 l0000000000405900
l0000000000405931:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v81 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v81
	SCZO = cond(v81)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000405907
	// succ:  l0000000000405907
l000000000040595D:
	rdx = 0x000000000048ECBA<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405980:
	Mem0[rbx + 0x130<64>:word32] = 1<32>
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405990:
	ebp = ebp + 1<32>
	rbp = CONVERT(ebp, word32, uint64)
	SCZO = cond(ebp)
	SCZO = cond(ebp - edi)
	branch Test(NE,Z) l0000000000404544
	// succ:  l000000000040599B l0000000000404544
l000000000040599B:
	goto l0000000000404405
	// succ:  l0000000000404405
l00000000004059A0:
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l00000000004059B4:
	r8 = Mem0[rbp + 0x10<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	rax = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l0000000000406220
	// succ:  l00000000004059D6 l0000000000406220
l00000000004059D6:
	rdx = rax + 1<64>
	// succ:  l00000000004059DA
l00000000004059DA:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x5D<8>
	Mem0[rbx + 0x108<64>:byte] = 0x5D<8>
	goto l0000000000404405
	// succ:  l0000000000404405
l00000000004059F1:
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	rax = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l000000000040624F
	// succ:  l0000000000405A13 l000000000040624F
l0000000000405A13:
	rdx = rax + 1<64>
	// succ:  l0000000000405A17
l0000000000405A17:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x29<8>
	Mem0[rbx + 0x108<64>:byte] = 0x29<8>
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405A2E:
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405A42:
	rsi = Mem0[rbp + 8<64>:word64]
	eax = CONVERT(Mem0[rsi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 0x61<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 0x19<8>)
	branch Test(ULE,CZ) l0000000000405E01
	// succ:  l0000000000405A54 l0000000000405E01
l0000000000405A54:
	rbp = CONVERT(r12d, word32, int64)
	SCZO = cond(Mem0[rsi - 1<64> + rbp:byte] - 0x20<8>)
	branch Test(EQ,Z) l0000000000405E17
	// succ:  l0000000000405A62 l0000000000405E17
l0000000000405A62:
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l0000000000404405
	// succ:  l0000000000405A6B l0000000000404405
l0000000000405A6B:
	rax = Mem0[rbx + 0x100<64>:word64]
	rbp = rbp + rsi
	SCZO = cond(rbp)
	goto l0000000000405AA6
	// succ:  l0000000000405AA6
l0000000000405A80:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000405A87
l0000000000405A87:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - rbp)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000404405
	// succ:  l0000000000405AA6 l0000000000404405
l0000000000405AA6:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000405A80
	// succ:  l0000000000405AB1 l0000000000405A80
l0000000000405AB1:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v57 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v57
	SCZO = cond(v57)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000405A87
	// succ:  l0000000000405A87
l0000000000405ADD:
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405AF1:
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405B05:
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405B19:
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l000000000040671C
	// succ:  l0000000000405B25 l000000000040671C
l0000000000405B25:
	rdx = rax + 1<64>
	// succ:  l0000000000405B29
l0000000000405B29:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x2E<8>
	Mem0[rbx + 0x108<64>:byte] = 0x2E<8>
	// succ:  l0000000000405B3B
l0000000000405B3B:
	r8 = Mem0[rbp + 0x10<64>:word64]
	SCZO = cond(Mem0[r8:word32] - 0x45<32>)
	branch Test(EQ,Z) l0000000000406349
	// succ:  l0000000000405B49 l0000000000406349
l0000000000405B49:
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405B59:
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405B6D:
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405B81:
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	rsi = 0x000000000048EC83<p64>
	r13 = 0x000000000048EC87<p64>
	call fn00000000004042F0 (retsize: 8;)
	rax = Mem0[rbx + 0x100<64>:word64]
	goto l0000000000405BD2
	// succ:  l0000000000405BD2
l0000000000405BB0:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000405BB7
l0000000000405BB7:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - r13)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000405C09
	// succ:  l0000000000405BD2 l0000000000405C09
l0000000000405BD2:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000405BB0
	// succ:  l0000000000405BDD l0000000000405BB0
l0000000000405BDD:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v83 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v83
	SCZO = cond(v83)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000405BB7
	// succ:  l0000000000405BB7
l0000000000405C09:
	r8 = Mem0[rbp + 0x10<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405C1D:
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405C31:
	r8 = Mem0[rbp + 0x10<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edi = Mem0[rbx + 0x138<64>:word32]
	rdi = CONVERT(edi, word32, uint64)
	call fn00000000004042F0 (retsize: 8;)
	SCZO = cond(Mem0[rbx + 0x138<64>:word32] - edi)
	branch Test(NE,Z) l0000000000404405
	// succ:  l0000000000405C52 l0000000000404405
l0000000000405C52:
	SCZO = cond(Mem0[rbx + 0x100<64>:word64] - rsi)
	branch Test(NE,Z) l0000000000404405
	// succ:  l0000000000405C5F l0000000000404405
l0000000000405C5F:
	rsi = rsi - 2<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rsi
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405C6F:
	r8 = rbp
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000406AD0 (retsize: 8;)
	rsp = rsp + 8<64>
	goto l0000000000405627
	// succ:  l0000000000405627
l0000000000405C82:
	SZO = cond(edi & edi)
	C = false
	r13 = Mem0[rbp + 8<64>:word64]
	branch Test(NE,Z) l0000000000404534
	// succ:  l0000000000405C8E l0000000000404534
l0000000000405C8E:
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405C93:
	rsi = 0x000000000048EDBF<p64>
	rbp = 0x000000000048EDC5<p64>
	goto l0000000000405CC9
	// succ:  l0000000000405CC9
l0000000000405CA3:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000405CAA
l0000000000405CAA:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - rbp)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000404405
	// succ:  l0000000000405CC9 l0000000000404405
l0000000000405CC9:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000405CA3
	// succ:  l0000000000405CD4 l0000000000405CA3
l0000000000405CD4:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v64 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v64
	SCZO = cond(v64)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000405CAA
	// succ:  l0000000000405CAA
l0000000000405D00:
	rdx = 0x000000000048EE2F<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000404130 (retsize: 8;)
	edx = 0x7D<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405D2B:
	rbp = CONVERT(Mem0[rax + 0x18<64>:word32], word32, int64)
	r12 = Mem0[rax + 0x10<64>:word64]
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l0000000000404405
	// succ:  l0000000000405D3C l0000000000404405
l0000000000405D3C:
	rax = Mem0[rbx + 0x100<64>:word64]
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l0000000000405D76
	// succ:  l0000000000405D76
l0000000000405D50:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000405D57
l0000000000405D57:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rbp - rsi)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000404405
	// succ:  l0000000000405D76 l0000000000404405
l0000000000405D76:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[r12 + rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000405D50
	// succ:  l0000000000405D83 l0000000000405D50
l0000000000405D83:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v75 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v75
	SCZO = cond(v75)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000405D57
	// succ:  l0000000000405D57
l0000000000405DAF:
	rdx = Mem0[rbx + 0x128<64>:word64]
	rbp = rax
	goto l00000000004055E2
	// succ:  l00000000004055E2
l0000000000405DBE:
	rax = Mem0[rbx + 0x100<64>:word64]
	goto l0000000000404D95
	// succ:  l0000000000404D95
l0000000000405DCA:
	r9 = Mem0[rbx + 0x128<64>:word64]
	r12d = r12d & 0xFFFFFF9F<32>
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	r8 = r8 + 0x10<64>
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000407820 (retsize: 8;)
	r8 = Mem0[rbp + 8<64>:word64]
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l0000000000404405
	// succ:  l0000000000405DF1 l0000000000404405
l0000000000405DF1:
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405E01:
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	rsi = Mem0[rbp + 8<64>:word64]
	goto l0000000000405A54
	// succ:  l0000000000405A54
l0000000000405E17:
	ebp = SLICE(r12 - 1<64>, word32, 0)
	rbp = CONVERT(ebp, word32, uint64)
	rbp = CONVERT(ebp, word32, int64)
	goto l0000000000405A62
	// succ:  l0000000000405A62
l0000000000405E24:
	rax = Mem0[r13 + 8<64>:word64]
	rdi = 0x000000000048EDDC<p64>
	ecx = 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	rbp = Mem0[rax:word64]
	eax = Mem0[r14:word32]
	rax = CONVERT(eax, word32, uint64)
	rsi = rbp
	// succ:  l0000000000405E3D
l0000000000405E3D:
	branch rcx == 0<64> l0000000000405E3F
	// succ:  l0000000000405E3D_1 l0000000000405E3F
l0000000000405E3D_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000405E3D
	// succ:  l0000000000405E3F l0000000000405E3D
l0000000000405E3F:
	branch Test(NE,Z) l0000000000405E4A
	// succ:  l0000000000405E41 l0000000000405E4A
l0000000000405E41:
	SCZO = cond(eax - 3<32>)
	branch Test(EQ,Z) l00000000004069BD
	// succ:  l0000000000405E4A l00000000004069BD
l0000000000405E4A:
	SCZO = cond(eax - 0x37<32>)
	branch Test(EQ,Z) l0000000000406A19
	// succ:  l0000000000405E53 l0000000000406A19
l0000000000405E53:
	rcx = rbx
	r8 = r13
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rdi = 0x000000000048EDDF<p64>
	rsi = rbp
	call fn0000000000407D70 (retsize: 8;)
	rsp = rsp + 8<64>
	ecx = 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	// succ:  l0000000000405E70
l0000000000405E70:
	branch rcx == 0<64> l0000000000405E72
	// succ:  l0000000000405E70_2 l0000000000405E72
l0000000000405E70_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000405E70
	// succ:  l0000000000405E72 l0000000000405E70
l0000000000405E72:
	branch Test(EQ,Z) l000000000040645B
	// succ:  l0000000000405E78 l000000000040645B
l0000000000405E78:
	rdi = 0x000000000048EDE2<p64>
	ecx = 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = rbp
	// succ:  l0000000000405E87
l0000000000405E87:
	branch rcx == 0<64> l0000000000405E89
	// succ:  l0000000000405E87_3 l0000000000405E89
l0000000000405E87_3:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000405E87
	// succ:  l0000000000405E89 l0000000000405E87
l0000000000405E89:
	branch Test(NE,Z) l0000000000404B70
	// succ:  l0000000000405E8F l0000000000404B70
l0000000000405E8F:
	rcx = rbx
	edx = 0x28<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000403BF0 (retsize: 8;)
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	r8 = r14
	call fn00000000004042F0 (retsize: 8;)
	edx = 0x29<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000405EBC:
	rax = Mem0[rbx + 0x100<64>:word64]
	rsi = 0x000000000048EDB2<p64>
	r13 = 0x000000000048EDB7<p64>
	goto l0000000000405EF9
	// succ:  l0000000000405EF9
l0000000000405ED3:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000405EDA
l0000000000405EDA:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - r13)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000404D4B
	// succ:  l0000000000405EF9 l0000000000404D4B
l0000000000405EF9:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000405ED3
	// succ:  l0000000000405F04 l0000000000405ED3
l0000000000405F04:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v65 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v65
	SCZO = cond(v65)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000405EDA
	// succ:  l0000000000405EDA
l0000000000405F30:
	r8d = Mem0[rbx + 0x148<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	r10 = Mem0[rbx + 0x140<64>:word64]
	SZO = cond(r8d & r8d)
	C = false
	branch Test(LE,SZO) l0000000000405F6C
	// succ:  l0000000000405F43 l0000000000405F6C
l0000000000405F43:
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	SCZO = cond(rax - Mem0[r10:word64])
	rdx = r10 + 0x10<64>
	branch Test(NE,Z) l0000000000405F64
	// succ:  l0000000000405F4E l0000000000405F64
l0000000000405F4E:
	goto l00000000004065AF
	// succ:  l00000000004065AF
l0000000000405F53:
	r9 = rdx
	rdx = rdx + 0x10<64>
	SCZO = cond(rdx)
	SCZO = cond(rax - Mem0[rdx - 0x10<64>:word64])
	branch Test(EQ,Z) l00000000004065B2
	// succ:  l0000000000405F64 l00000000004065B2
l0000000000405F64:
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	SCZO = cond(ecx - r8d)
	branch Test(NE,Z) l0000000000405F53
	// succ:  l0000000000405F6C l0000000000405F53
l0000000000405F6C:
	SCZO = cond(r8d - Mem0[rbx + 0x14C<64>:word32])
	branch Test(GE,SO) l0000000000406A41
	// succ:  l0000000000405F79 l0000000000406A41
l0000000000405F79:
	rdx = CONVERT(r8d, word32, int64)
	r9 = Mem0[rbx + 0x120<64>:word64]
	r8d = r8d + 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	rdx = rdx << 4<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x148<64>:word32] = r8d
	rdx = rdx + r10
	SCZO = cond(rdx)
	Mem0[rdx:word64] = rax
	rdx = rdx + 8<64>
	SCZO = cond(rdx)
	SZO = cond(r9 & r9)
	C = false
	branch Test(EQ,Z) l0000000000406001
	// succ:  l0000000000405FA1 l0000000000406001
l0000000000405FA1:
	rcx = CONVERT(Mem0[rbx + 0x158<64>:word32], word32, int64)
	r10d = Mem0[rbx + 0x15C<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(ecx - r10d)
	branch Test(GE,SO) l0000000000406A41
	// succ:  l0000000000405FB8 l0000000000406A41
l0000000000405FB8:
	r8d = SLICE(rcx + 1<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	r10d = r10d + 1<32>
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10d)
	rcx = rcx << 4<64>
	SCZO = cond(rcx)
	goto l0000000000405FD7
	// succ:  l0000000000405FD7
l0000000000405FC6:
	r8d = r8d + 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	rcx = rcx + 0x10<64>
	SCZO = cond(rcx)
	SCZO = cond(r8d - r10d)
	branch Test(EQ,Z) l0000000000406A3B
	// succ:  l0000000000405FD7 l0000000000406A3B
l0000000000405FD7:
	r11 = rcx
	r11 = r11 + Mem0[rbx + 0x150<64>:word64]
	SCZO = cond(r11)
	r13 = Mem0[r9 + 8<64>:word64]
	edi = r8d
	rdi = CONVERT(edi, word32, uint64)
	Mem0[r11 + 8<64>:word64] = r13
	Mem0[rdx:word64] = r11
	rdx = r11
	r9 = Mem0[r9:word64]
	SZO = cond(r9 & r9)
	C = false
	branch Test(NE,Z) l0000000000405FC6
	// succ:  l0000000000405FFA l0000000000405FC6
l0000000000405FFA:
	Mem0[rbx + 0x158<64>:word32] = r8d
	// succ:  l0000000000406001
l0000000000406001:
	Mem0[rdx:word64] = 0<64>
	rdx = rax + 8<64>
	rcx = rbx
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	call fn0000000000403FA0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l00000000004065DE
	// succ:  l000000000040601F l00000000004065DE
l000000000040601F:
	goto l0000000000404424
	// succ:  l0000000000404424
l0000000000406024:
	rcx = rbx
	edx = 0x28<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000403BF0 (retsize: 8;)
	r8 = r13 + 8<64>
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000407B40 (retsize: 8;)
	edx = 0x29<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	goto l0000000000404B70
	// succ:  l0000000000404B70
l0000000000406052:
	Mem0[rbx + rsi:byte] = 0<8>
	rdx = rsi
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	Mem0[rbx + 0x100<64>:word64] = 0<64>
	v68 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v68
	SCZO = cond(v68)
	goto l0000000000404CCD
	// succ:  l0000000000404CCD
l0000000000406082:
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000406096:
	edx = Mem0[rbx + 0x134<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	goto l00000000004060B9
	// succ:  l00000000004060B9
l00000000004060A0:
	rax = Mem0[rax + 0x10<64>:word64]
	edx = edx - 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000404424
	// succ:  l00000000004060B0 l0000000000404424
l00000000004060B0:
	SCZO = cond(Mem0[rax:word32] - 0x2F<32>)
	branch Test(NE,Z) l0000000000404424
	// succ:  l00000000004060B9 l0000000000404424
l00000000004060B9:
	SCZO = cond(edx - 0<32>)
	branch Test(GT,SZO) l00000000004060A0
	// succ:  l00000000004060BE l00000000004060A0
l00000000004060BE:
	branch Test(NE,Z) l0000000000404424
	// succ:  l00000000004060C4 l0000000000404424
l00000000004060C4:
	rax = Mem0[rax + 8<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000040519C
	// succ:  l00000000004060D1 l000000000040519C
l00000000004060D1:
	goto l0000000000404424
	// succ:  l0000000000404424
l00000000004060E0:
	rbp = CONVERT(Mem0[r8 + 0x10<64>:word32], word32, int64)
	rsi = Mem0[r8 + 8<64>:word64]
	rbp = rbp + rsi
	SCZO = cond(rbp)
	SCZO = cond(rsi - rbp)
	branch Test(ULT,C) l000000000040612B
	// succ:  l00000000004060F0 l000000000040612B
l00000000004060F0:
	goto l0000000000404405
	// succ:  l0000000000404405
l00000000004060F5:
	rax = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l0000000000406193
	// succ:  l0000000000406108 l0000000000406193
l0000000000406108:
	rdx = rax + 1<64>
	// succ:  l000000000040610C
l000000000040610C:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = dil
	Mem0[rbx + 0x108<64>:byte] = dil
	// succ:  l000000000040611E
l000000000040611E:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	SCZO = cond(rbp - rsi)
	branch Test(ULE,CZ) l0000000000404405
	// succ:  l000000000040612B l0000000000404405
l000000000040612B:
	rax = rbp
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	rax = rax - rsi
	SCZO = cond(rax)
	SCZO = cond(rax - 3<64>)
	branch Test(LE,SZO) l00000000004060F5
	// succ:  l000000000040613A l00000000004060F5
l000000000040613A:
	SCZO = cond(dil - 0x5F<8>)
	branch Test(NE,Z) l00000000004060F5
	// succ:  l0000000000406140 l00000000004060F5
l0000000000406140:
	SCZO = cond(Mem0[rsi + 1<64>:byte] - 0x5F<8>)
	branch Test(NE,Z) l00000000004060F5
	// succ:  l0000000000406146 l00000000004060F5
l0000000000406146:
	SCZO = cond(Mem0[rsi + 2<64>:byte] - 0x55<8>)
	branch Test(NE,Z) l00000000004060F5
	// succ:  l000000000040614C l00000000004060F5
l000000000040614C:
	r12 = rsi + 3<64>
	SCZO = cond(rbp - r12)
	branch Test(ULE,CZ) l00000000004060F5
	// succ:  l0000000000406155 l00000000004060F5
l0000000000406155:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000406175
	// succ:  l0000000000406175
l0000000000406160:
	eax = eax - 0x30<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	// succ:  l0000000000406163
l0000000000406163:
	edx = edx << 4<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r12 = r12 + 1<64>
	SCZO = cond(r12)
	edx = edx + eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SCZO = cond(r12 - rbp)
	branch Test(EQ,Z) l00000000004069FD
	// succ:  l0000000000406175 l00000000004069FD
l0000000000406175:
	eax = CONVERT(Mem0[r12:byte], byte, int32)
	ecx = SLICE(rax - 0x30<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 9<8>)
	branch Test(ULE,CZ) l0000000000406160
	// succ:  l0000000000406182 l0000000000406160
l0000000000406182:
	ecx = SLICE(rax - 0x41<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 5<8>)
	branch Test(UGT,CZ) l0000000000406629
	// succ:  l000000000040618E l0000000000406629
l000000000040618E:
	eax = eax - 0x37<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	goto l0000000000406163
	// succ:  l0000000000406163
l0000000000406193:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v87 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v87
	SCZO = cond(v87)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000040610C
	// succ:  l000000000040610C
l00000000004061C2:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v55 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v55
	SCZO = cond(v55)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000404C83
	// succ:  l0000000000404C83
l00000000004061F1:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v56 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v56
	SCZO = cond(v56)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000404C4C
	// succ:  l0000000000404C4C
l0000000000406220:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v37 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v37
	SCZO = cond(v37)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004059DA
	// succ:  l00000000004059DA
l000000000040624F:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v51 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v51
	SCZO = cond(v51)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000405A17
	// succ:  l0000000000405A17
l000000000040627E:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v84 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v84
	SCZO = cond(v84)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000405277
	// succ:  l0000000000405277
l00000000004062AD:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v85 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v85
	SCZO = cond(v85)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000405232
	// succ:  l0000000000405232
l00000000004062DC:
	Mem0[rbx + 0x130<64>:word32] = 1<32>
	goto l0000000000404405
	// succ:  l0000000000404405
l00000000004062EB:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v44 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v44
	SCZO = cond(v44)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004048E8
	// succ:  l00000000004048E8
l000000000040631A:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v82 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v82
	SCZO = cond(v82)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000405124
	// succ:  l0000000000405124
l0000000000406349:
	rdx = 0x000000000048EC39<p64>
	rcx = rbx
	Mem0[rsp + 0x28<64>:word64] = r8
	call fn0000000000404090 (retsize: 8;)
	r8 = Mem0[rsp + 0x28<64>:word64]
	rcx = rbx
	eax = Mem0[r8 + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000404130 (retsize: 8;)
	rdx = 0x000000000048EC47<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r8 = Mem0[r8 + 8<64>:word64]
	goto l0000000000405B49
	// succ:  l0000000000405B49
l000000000040638E:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v49 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v49
	SCZO = cond(v49)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004043D0
	// succ:  l00000000004043D0
l00000000004063BD:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v50 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v50
	SCZO = cond(v50)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000404398
	// succ:  l0000000000404398
l00000000004063EC:
	rax = Mem0[rbx + 0x128<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	edx = edx & 0xFFFFFF9F<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rsp + 0x48<64>:word64] = rbp
	Mem0[rsp + 0x50<64>:word32] = 0<32>
	Mem0[rsp + 0x40<64>:word64] = rax
	rax = rsp + 0x40<64>
	Mem0[rbx + 0x128<64>:word64] = rax
	rax = Mem0[rbx + 0x120<64>:word64]
	r8 = Mem0[rbp + 8<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = rax
	call fn00000000004042F0 (retsize: 8;)
	r15d = Mem0[rsp + 0x50<64>:word32]
	r15 = CONVERT(r15d, word32, uint64)
	rax = Mem0[rsp + 0x40<64>:word64]
	SZO = cond(r15d & r15d)
	C = false
	Mem0[rbx + 0x128<64>:word64] = rax
	branch Test(NE,Z) l0000000000404405
	// succ:  l0000000000406449 l0000000000404405
l0000000000406449:
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	goto l000000000040583B
	// succ:  l000000000040583B
l000000000040645B:
	r8 = r14
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l000000000040646E:
	r8 = Mem0[r8 + 0x10<64>:word64]
	r9d = Mem0[r8:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NE,Z) l0000000000404381
	// succ:  l000000000040647E l0000000000404381
l000000000040647E:
	SCZO = cond(ecx - 0x3C<32>)
	branch Test(EQ,Z) l0000000000406AA3
	// succ:  l0000000000406487 l0000000000406AA3
l0000000000406487:
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	esi = esi - 2<32>
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	call fn00000000004042F0 (retsize: 8;)
	SCZO = cond(esi - 4<32>)
	branch Test(UGT,CZ) l0000000000404405
	// succ:  l000000000040649E l0000000000404405
l000000000040649E:
	rax = 0x000000000048EFC8<p64>
	rdx = CONVERT(Mem0[rax + rsi * 4<64>:word32], word32, int64)
	rax = rax + rdx
	SCZO = cond(rax)
	switch (esi) { l00000000004064E8 l00000000004064D6 l00000000004064C2 l00000000004064AE l00000000004064FA }
	// succ:  l00000000004064E8 l00000000004064D6 l00000000004064C2 l00000000004064AE l00000000004064FA
l00000000004064AE:
	rdx = 0x000000000048EDFA<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l00000000004064C2:
	rdx = 0x000000000048EDF7<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l00000000004064D6:
	edx = 0x6C<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l00000000004064E8:
	edx = 0x75<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l00000000004064FA:
	rdx = 0x000000000048EDFD<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l000000000040650E:
	r8 = Mem0[rbp + 0x10<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	SCZO = cond(Mem0[rsp + 0x50<64>:word32] - 0<32>)
	Mem0[rbx + 0x128<64>:word64] = r13
	branch Test(NE,Z) l0000000000404405
	// succ:  l000000000040652F l0000000000404405
l000000000040652F:
	r9 = r13
	goto l0000000000404FDE
	// succ:  l0000000000404FDE
l0000000000406537:
	r8 = Mem0[rax + 8<64>:word64]
	rax = Mem0[rbx + 0x128<64>:word64]
	Mem0[rsp + 0x48<64>:word64] = rbp
	Mem0[rsp + 0x50<64>:word32] = 0<32>
	Mem0[rsp + 0x40<64>:word64] = rax
	rax = rsp + 0x40<64>
	SZO = cond(r8 & r8)
	C = false
	Mem0[rbx + 0x128<64>:word64] = rax
	rax = Mem0[rbx + 0x120<64>:word64]
	Mem0[rsp + 0x58<64>:word64] = rax
	branch Test(NE,Z) l0000000000405610
	// succ:  l0000000000406575 l0000000000405610
l0000000000406575:
	goto l000000000040560C
	// succ:  l000000000040560C
l0000000000406580:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v63 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v63
	SCZO = cond(v63)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000404D83
	// succ:  l0000000000404D83
l00000000004065AF:
	r9 = r10
	// succ:  l00000000004065B2
l00000000004065B2:
	rdx = Mem0[r9 + 8<64>:word64]
	rsi = Mem0[rbx + 0x120<64>:word64]
	rcx = rbx
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	Mem0[rbx + 0x120<64>:word64] = rdx
	rdx = rax + 8<64>
	call fn0000000000403FA0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040441D
	// succ:  l00000000004065DE l000000000040441D
l00000000004065DE:
	edx = Mem0[rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - 0x2F<32>)
	branch Test(NE,Z) l00000000004055C0
	// succ:  l00000000004065E9 l00000000004055C0
l00000000004065E9:
	edx = Mem0[rbx + 0x134<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040660A
	// succ:  l000000000040660A
l00000000004065F1:
	rax = Mem0[rax + 0x10<64>:word64]
	edx = edx - 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000404419
	// succ:  l0000000000406601 l0000000000404419
l0000000000406601:
	SCZO = cond(Mem0[rax:word32] - 0x2F<32>)
	branch Test(NE,Z) l0000000000404419
	// succ:  l000000000040660A l0000000000404419
l000000000040660A:
	SCZO = cond(edx - 0<32>)
	branch Test(GT,SZO) l00000000004065F1
	// succ:  l000000000040660F l00000000004065F1
l000000000040660F:
	branch Test(NE,Z) l0000000000404419
	// succ:  l0000000000406615 l0000000000404419
l0000000000406615:
	rax = Mem0[rax + 8<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000404419
	// succ:  l0000000000406622 l0000000000404419
l0000000000406622:
	edx = Mem0[rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	goto l00000000004055C0
	// succ:  l00000000004055C0
l0000000000406629:
	ecx = SLICE(rax - 0x61<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 5<8>)
	branch Test(UGT,CZ) l0000000000406A77
	// succ:  l0000000000406635 l0000000000406A77
l0000000000406635:
	eax = eax - 0x57<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	goto l0000000000406163
	// succ:  l0000000000406163
l000000000040663D:
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	goto l000000000040521B
	// succ:  l000000000040521B
l000000000040664F:
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	goto l0000000000405260
	// succ:  l0000000000405260
l0000000000406661:
	rcx = rbx
	edx = 0x5B<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000403BF0 (retsize: 8;)
	r8 = Mem0[rbp + 0x10<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	edx = 0x5D<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l000000000040668F:
	edx = 0x2D<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	goto l00000000004043EC
	// succ:  l00000000004043EC
l00000000004066A1:
	r9d = CONVERT(Mem0[rdx:byte], byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	r10d = SLICE(r9 - 0x72<64>, word32, 0)
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10b - 1<8>)
	branch Test(ULE,CZ) l00000000004066BD
	// succ:  l00000000004066AF l00000000004066BD
l00000000004066AF:
	r9d = r9d - 0x63<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	SCZO = cond(r9b - 1<8>)
	branch Test(UGT,CZ) l0000000000404A81
	// succ:  l00000000004066BD l0000000000404A81
l00000000004066BD:
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000407D70 (retsize: 8;)
	rsp = rsp + 8<64>
	rcx = rbx
	edx = 0x3C<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000403BF0 (retsize: 8;)
	rax = Mem0[rbp + 0x10<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	r8 = Mem0[rax + 8<64>:word64]
	call fn00000000004042F0 (retsize: 8;)
	rdx = 0x000000000048EE95<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	rax = Mem0[rbp + 0x10<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	r8 = Mem0[rax + 0x10<64>:word64]
	call fn00000000004042F0 (retsize: 8;)
	edx = 0x29<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l000000000040671C:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v39 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v39
	SCZO = cond(v39)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000405B29
	// succ:  l0000000000405B29
l000000000040674B:
	SCZO = cond(edx - 4<32>)
	branch Test(EQ,Z) l00000000004068FB
	// succ:  l0000000000406754 l00000000004068FB
l0000000000406754:
	SCZO = cond(edx - 2<32>)
	branch Test(NE,Z) l0000000000406911
	// succ:  l000000000040675D l0000000000406911
l000000000040675D:
	rcx = Mem0[rsi + 0x10<64>:word64]
	SCZO = cond(Mem0[rcx:word32] - 0x45<32>)
	branch Test(EQ,Z) l0000000000406A10
	// succ:  l000000000040676A l0000000000406A10
l000000000040676A:
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 0x1C<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - 4<32>)
	branch Test(ULE,CZ) l00000000004067EE
	// succ:  l0000000000406774 l00000000004067EE
l0000000000406774:
	goto l0000000000406911
	// succ:  l0000000000406911
l0000000000406780:
	eax = SLICE(r13 - 1<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	edx = r13d
	rdx = CONVERT(edx, word32, uint64)
	r13d = r13d + 1<32>
	r13 = CONVERT(r13d, word32, uint64)
	SCZO = cond(r13d)
	rdx = rdx << 5<64>
	SCZO = cond(rdx)
	rax = rax << 5<64>
	SCZO = cond(rax)
	r8 = Mem0[rsp + 0x40<64> + rax:word64]
	Mem0[rsp + 0x40<64> + rdx:word64] = r8
	r8 = Mem0[rsp + 0x48<64> + rax:word64]
	Mem0[rsp + 0x48<64> + rdx:word64] = r8
	r8 = Mem0[rsp + 0x50<64> + rax:word64]
	Mem0[rsp + 0x50<64> + rdx:word64] = r8
	r8 = Mem0[rsp + 0x58<64> + rax:word64]
	Mem0[rsp + 0x58<64> + rdx:word64] = r8
	r8 = rdi + rax
	Mem0[rsp + 0x40<64> + rdx:word64] = r8
	rdx = rdx + rdi
	SCZO = cond(rdx)
	Mem0[rsp + 0x48<64> + rax:word64] = rcx
	Mem0[rsp + 0x50<64> + rax:word32] = 0<32>
	Mem0[rsp + 0x58<64> + rax:word64] = r9
	Mem0[rbx + 0x128<64>:word64] = rdx
	rcx = Mem0[rcx + 8<64>:word64]
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 0x1C<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - 4<32>)
	branch Test(UGT,CZ) l00000000004067F9
	// succ:  l00000000004067EE l00000000004067F9
l00000000004067EE:
	SCZO = cond(r13d - 4<32>)
	branch Test(NE,Z) l0000000000406780
	// succ:  l00000000004067F4 l0000000000406780
l00000000004067F4:
	goto l0000000000405425
	// succ:  l0000000000405425
l00000000004067F9:
	r8 = Mem0[rbp + 0x10<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	SCZO = cond(Mem0[rsi:word32] - 4<32>)
	branch Test(EQ,Z) l0000000000406929
	// succ:  l0000000000406811 l0000000000406929
l0000000000406811:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040684A
	// succ:  l0000000000406816 l000000000040684A
l0000000000406816:
	esi = SLICE(r13 - 1<64>, word32, 0)
	rsi = CONVERT(esi, word32, uint64)
	r13 = rsi
	rsi = rsi << 5<64>
	SCZO = cond(rsi)
	r8d = Mem0[rsp + 0x50<64> + rsi:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NE,Z) l0000000000406811
	// succ:  l000000000040682B l0000000000406811
l000000000040682B:
	rcx = rbx
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000403BF0 (retsize: 8;)
	r8 = Mem0[rsp + 0x48<64> + rsi:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000406AD0 (retsize: 8;)
	rsp = rsp + 8<64>
	goto l0000000000406811
	// succ:  l0000000000406811
l000000000040684A:
	Mem0[rbx + 0x128<64>:word64] = r14
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000406856:
	rsi = Mem0[r8 + 8<64>:word64]
	rdi = 0x000000000048EC4B<p64>
	ecx = 6<32>
	rcx = CONVERT(ecx, word32, uint64)
	// succ:  l0000000000406866
l0000000000406866:
	branch rcx == 0<64> l0000000000406868
	// succ:  l0000000000406866_1 l0000000000406868
l0000000000406866_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000406866
	// succ:  l0000000000406868 l0000000000406866
l0000000000406868:
	branch Test(NE,Z) l0000000000405203
	// succ:  l000000000040686E l0000000000405203
l000000000040686E:
	r8 = Mem0[rbp + 0x10<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	rdx = 0x000000000048EC52<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	goto l0000000000405289
	// succ:  l0000000000405289
l0000000000406891:
	rcx = rbx
	edx = 0x5B<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn0000000000403BF0 (retsize: 8;)
	rax = Mem0[rbp + 0x10<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	r8 = Mem0[rax + 0x10<64>:word64]
	call fn00000000004042F0 (retsize: 8;)
	edx = 0x5D<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	goto l0000000000404B0A
	// succ:  l0000000000404B0A
l00000000004068C3:
	SCZO = cond(Mem0[rcx + 0x10<64>:word32] - 1<32>)
	branch Test(NE,Z) l0000000000404A8B
	// succ:  l00000000004068CD l0000000000404A8B
l00000000004068CD:
	rcx = Mem0[rcx + 8<64>:word64]
	SCZO = cond(Mem0[rcx:byte] - 0x3E<8>)
	branch Test(NE,Z) l0000000000404A8B
	// succ:  l00000000004068DA l0000000000404A8B
l00000000004068DA:
	edx = 0x28<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	rax = Mem0[rbp + 8<64>:word64]
	rax = Mem0[rax + 8<64>:word64]
	rsi = Mem0[rax:word64]
	rax = Mem0[rbp + 0x10<64>:word64]
	goto l0000000000404A8E
	// succ:  l0000000000404A8E
l00000000004068FB:
	rax = rsp + 0x30<64>
	Mem0[rsp + 0x30<64>:word64] = r9
	Mem0[rsp + 0x38<64>:word64] = rsi
	Mem0[rbx + 0x120<64>:word64] = rax
	// succ:  l0000000000406911
l0000000000406911:
	r8 = Mem0[rbp + 0x10<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	SCZO = cond(Mem0[rsi:word32] - 4<32>)
	branch Test(NE,Z) l0000000000406816
	// succ:  l0000000000406929 l0000000000406816
l0000000000406929:
	rax = Mem0[rsp + 0x30<64>:word64]
	Mem0[rbx + 0x120<64>:word64] = rax
	goto l0000000000406811
	// succ:  l0000000000406811
l000000000040693A:
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000407D70 (retsize: 8;)
	rsp = rsp + 8<64>
	goto l0000000000404AF7
	// succ:  l0000000000404AF7
l000000000040694A:
	r8 = r13
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000407E20 (retsize: 8;)
	r8 = r15
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000407D70 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = r14
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000407E20 (retsize: 8;)
	rdx = 0x000000000048EDEE<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	r8 = rbp
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000407E20 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000406996:
	rax = Mem0[r8 + 0x10<64>:word64]
	SCZO = cond(Mem0[rax:word32] - 0x29<32>)
	branch Test(EQ,Z) l00000000004069A9
	// succ:  l000000000040699F l00000000004069A9
l000000000040699F:
	Mem0[rbx + 0x130<64>:word32] = 1<32>
	// succ:  l00000000004069A9
l00000000004069A9:
	r8 = Mem0[r8 + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000407E20 (retsize: 8;)
	goto l0000000000404AC2
	// succ:  l0000000000404AC2
l00000000004069BD:
	rax = Mem0[r14 + 8<64>:word64]
	SCZO = cond(Mem0[rax:word32] - 1<32>)
	branch Test(NE,Z) l0000000000405E53
	// succ:  l00000000004069CA l0000000000405E53
l00000000004069CA:
	rdx = Mem0[r14 + 0x10<64>:word64]
	SCZO = cond(Mem0[rdx:word32] - 0x29<32>)
	branch Test(NE,Z) l00000000004069D5
	// succ:  l00000000004069D1_1 l00000000004069D5
l00000000004069D1_1:
	r14 = rax
	// succ:  l00000000004069D5
l00000000004069D5:
	goto l0000000000405E53
	// succ:  l0000000000405E53
l00000000004069DA:
	r8 = Mem0[rbp + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000407E20 (retsize: 8;)
	rdx = 0x000000000048EE26<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l00000000004069FD:
	edi = 0x5F<32>
	rdi = CONVERT(edi, word32, uint64)
	goto l00000000004060F5
	// succ:  l00000000004060F5
l0000000000406A07:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	goto l00000000004055E2
	// succ:  l00000000004055E2
l0000000000406A10:
	rcx = Mem0[rcx + 8<64>:word64]
	goto l000000000040676A
	// succ:  l000000000040676A
l0000000000406A19:
	r8 = Mem0[r14 + 8<64>:word64]
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000407E20 (retsize: 8;)
	r8 = r13
	edx = r12d
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000407D70 (retsize: 8;)
	rsp = rsp + 8<64>
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000406A3B:
	Mem0[rbx + 0x158<64>:word32] = edi
	// succ:  l0000000000406A41
l0000000000406A41:
	Mem0[rbx + 0x130<64>:word32] = 1<32>
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000406A50:
	rax = Mem0[rax + 8<64>:word64]
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x30<8>)
	branch Test(EQ,Z) l0000000000406AB9
	// succ:  l0000000000406A5B l0000000000406AB9
l0000000000406A5B:
	SCZO = cond(al - 0x31<8>)
	branch Test(NE,Z) l0000000000404381
	// succ:  l0000000000406A63 l0000000000404381
l0000000000406A63:
	rdx = 0x000000000048EE07<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
l0000000000406A77:
	SCZO = cond(rbp - r12)
	branch Test(ULE,CZ) l00000000004069FD
	// succ:  l0000000000406A7C l00000000004069FD
l0000000000406A7C:
	SCZO = cond(al - 0x5F<8>)
	branch Test(NE,Z) l00000000004069FD
	// succ:  l0000000000406A84 l00000000004069FD
l0000000000406A84:
	SCZO = cond(edx - 0xFF<32>)
	branch Test(UGT,CZ) l00000000004069FD
	// succ:  l0000000000406A90 l00000000004069FD
l0000000000406A90:
	edx = CONVERT(dl, byte, int32)
	rcx = rbx
	rsi = r12
	call fn0000000000403BF0 (retsize: 8;)
	goto l000000000040611E
	// succ:  l000000000040611E
l0000000000406AA3:
	edx = 0x2D<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403BF0 (retsize: 8;)
	r8 = Mem0[rbp + 0x10<64>:word64]
	goto l0000000000406487
	// succ:  l0000000000406487
l0000000000406AB9:
	rdx = 0x000000000048EE01<p64>
	rcx = rbx
	call fn0000000000404090 (retsize: 8;)
	goto l0000000000404405
	// succ:  l0000000000404405
fn00000000004042F0_exit:


// fn0000000000406AD0
// Return size: 0
define fn0000000000406AD0
fn0000000000406AD0_entry:
	rsp = fp
	// succ:  l0000000000406AD0
l0000000000406AD0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = Mem0[r8:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 3<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - 0x2A<32>)
	branch Test(UGT,CZ) l0000000000406B32
	// succ:  l0000000000406AE7 l0000000000406B32
l0000000000406AE7:
	r9 = 0x000000000048F020<p64>
	rbp = r8
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	rbx = rcx
	rax = CONVERT(Mem0[r9 + rax * 4<64>:word32], word32, int64)
	r9 = r9 + rax
	SCZO = cond(r9)
	switch (eax) { l0000000000406BC0 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406BD0 l0000000000406C50 l0000000000406CD0 l0000000000406BD0 l0000000000406C50 l0000000000406CD0 l0000000000406D50 l0000000000406DB0 l0000000000406B00 l0000000000406E50 l0000000000406E90 l0000000000406EA0 l0000000000406EB0 l0000000000406F30 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406FB0 l0000000000406B32 l0000000000406B43 }
	// succ:  l0000000000406BC0 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406BD0 l0000000000406C50 l0000000000406CD0 l0000000000406BD0 l0000000000406C50 l0000000000406CD0 l0000000000406D50 l0000000000406DB0 l0000000000406B00 l0000000000406E50 l0000000000406E90 l0000000000406EA0 l0000000000406EB0 l0000000000406F30 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406B32 l0000000000406FB0 l0000000000406B32 l0000000000406B43
l0000000000406B00:
	rax = Mem0[rcx + 0x100<64>:word64]
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l00000000004070DF
	// succ:  l0000000000406B13 l00000000004070DF
l0000000000406B13:
	rdx = rax + 1<64>
	// succ:  l0000000000406B17
l0000000000406B17:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x20<8>
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0x108<64>:byte] = 0x20<8>
	r8 = Mem0[rbp + 0x10<64>:word64]
	rcx = rbx
	// succ:  l0000000000406B32
l0000000000406B32:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000406B3E_thunk_fn00000000004042F0
l0000000000406B3E_thunk_fn00000000004042F0:
	call fn00000000004042F0 (retsize: 0;)
	return
	// succ:  fn0000000000406AD0_exit
l0000000000406B43:
	rax = Mem0[rcx + 0x100<64>:word64]
	rsi = 0x000000000048F012<p64>
	r13 = 0x000000000048F01C<p64>
	goto l0000000000406B86
	// succ:  l0000000000406B86
l0000000000406B60:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000406B67
l0000000000406B67:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = r12b
	SCZO = cond(rsi - r13)
	Mem0[rbx + 0x108<64>:byte] = r12b
	branch Test(EQ,Z) l0000000000407070
	// succ:  l0000000000406B86 l0000000000407070
l0000000000406B86:
	SCZO = cond(rax - 0xFF<64>)
	r12d = CONVERT(Mem0[rsi:byte], byte, word32)
	r12 = CONVERT(r12d, word32, uint64)
	branch Test(NE,Z) l0000000000406B60
	// succ:  l0000000000406B92 l0000000000406B60
l0000000000406B92:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v25 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v25
	SCZO = cond(v25)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000406B67
	// succ:  l0000000000406B67
l0000000000406BC0:
	r8 = Mem0[r8 + 8<64>:word64]
	goto l0000000000406B32
	// succ:  l0000000000406B32
l0000000000406BD0:
	rax = Mem0[rcx + 0x100<64>:word64]
	rsi = 0x000000000048EFDC<p64>
	rbp = 0x000000000048EFE5<p64>
	goto l0000000000406C16
	// succ:  l0000000000406C16
l0000000000406BF0:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000406BF7
l0000000000406BF7:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - rbp)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000406DA0
	// succ:  l0000000000406C16 l0000000000406DA0
l0000000000406C16:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000406BF0
	// succ:  l0000000000406C21 l0000000000406BF0
l0000000000406C21:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v20 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v20
	SCZO = cond(v20)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000406BF7
	// succ:  l0000000000406BF7
l0000000000406C50:
	rax = Mem0[rcx + 0x100<64>:word64]
	rsi = 0x000000000048EFE6<p64>
	rbp = 0x000000000048EFEF<p64>
	goto l0000000000406C96
	// succ:  l0000000000406C96
l0000000000406C70:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000406C77
l0000000000406C77:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - rbp)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000406DA0
	// succ:  l0000000000406C96 l0000000000406DA0
l0000000000406C96:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000406C70
	// succ:  l0000000000406CA1 l0000000000406C70
l0000000000406CA1:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v39 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v39
	SCZO = cond(v39)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000406C77
	// succ:  l0000000000406C77
l0000000000406CD0:
	rax = Mem0[rcx + 0x100<64>:word64]
	rsi = 0x000000000048EFF0<p64>
	rbp = 0x000000000048EFF6<p64>
	goto l0000000000406D16
	// succ:  l0000000000406D16
l0000000000406CF0:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000406CF7
l0000000000406CF7:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - rbp)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000406DA0
	// succ:  l0000000000406D16 l0000000000406DA0
l0000000000406D16:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000406CF0
	// succ:  l0000000000406D21 l0000000000406CF0
l0000000000406D21:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v38 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v38
	SCZO = cond(v38)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000406CF7
	// succ:  l0000000000406CF7
l0000000000406D50:
	rdx = Mem0[rcx + 0x100<64>:word64]
	SCZO = cond(rdx - 0xFF<64>)
	branch Test(EQ,Z) l000000000040710B
	// succ:  l0000000000406D64 l000000000040710B
l0000000000406D64:
	rax = rdx + 1<64>
	// succ:  l0000000000406D68
l0000000000406D68:
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = 0x20<8>
	Mem0[rbx + 0x108<64>:byte] = 0x20<8>
	// succ:  l0000000000406D7A
l0000000000406D7A:
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l00000000004070B0
	// succ:  l0000000000406D86 l00000000004070B0
l0000000000406D86:
	rdx = rax + 1<64>
	// succ:  l0000000000406D8A
l0000000000406D8A:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x26<8>
	Mem0[rbx + 0x108<64>:byte] = 0x26<8>
	// succ:  l0000000000406DA0
l0000000000406DA0:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000406AD0_exit
l0000000000406DB0:
	rdx = Mem0[rcx + 0x100<64>:word64]
	SCZO = cond(rdx - 0xFF<64>)
	branch Test(EQ,Z) l0000000000407166
	// succ:  l0000000000406DC4 l0000000000407166
l0000000000406DC4:
	rax = rdx + 1<64>
	// succ:  l0000000000406DC8
l0000000000406DC8:
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = 0x20<8>
	Mem0[rbx + 0x108<64>:byte] = 0x20<8>
	// succ:  l0000000000406DDA
l0000000000406DDA:
	rsi = 0x000000000048EFF7<p64>
	rbp = 0x000000000048EFF9<p64>
	goto l0000000000406E12
	// succ:  l0000000000406E12
l0000000000406DF0:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000406DF7
l0000000000406DF7:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - rbp)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000406DA0
	// succ:  l0000000000406E12 l0000000000406DA0
l0000000000406E12:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000406DF0
	// succ:  l0000000000406E1D l0000000000406DF0
l0000000000406E1D:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v23 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v23
	SCZO = cond(v23)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000406DF7
	// succ:  l0000000000406DF7
l0000000000406E50:
	edi = edi & 4<32>
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	branch Test(NE,Z) l0000000000406DA0
	// succ:  l0000000000406E59 l0000000000406DA0
l0000000000406E59:
	rax = Mem0[rcx + 0x100<64>:word64]
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l00000000004071BE
	// succ:  l0000000000406E6C l00000000004071BE
l0000000000406E6C:
	rdx = rax + 1<64>
	// succ:  l0000000000406E70
l0000000000406E70:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x2A<8>
	Mem0[rbx + 0x108<64>:byte] = 0x2A<8>
	goto l0000000000406DA0
	// succ:  l0000000000406DA0
l0000000000406E90:
	rax = Mem0[rcx + 0x100<64>:word64]
	goto l0000000000406D7A
	// succ:  l0000000000406D7A
l0000000000406EA0:
	rax = Mem0[rcx + 0x100<64>:word64]
	goto l0000000000406DDA
	// succ:  l0000000000406DDA
l0000000000406EB0:
	rax = Mem0[rcx + 0x100<64>:word64]
	rsi = 0x000000000048EFFA<p64>
	rbp = 0x000000000048F002<p64>
	goto l0000000000406EF6
	// succ:  l0000000000406EF6
l0000000000406ED0:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000406ED7
l0000000000406ED7:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - rbp)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000406DA0
	// succ:  l0000000000406EF6 l0000000000406DA0
l0000000000406EF6:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000406ED0
	// succ:  l0000000000406F01 l0000000000406ED0
l0000000000406F01:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v33 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v33
	SCZO = cond(v33)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000406ED7
	// succ:  l0000000000406ED7
l0000000000406F30:
	rax = Mem0[rcx + 0x100<64>:word64]
	rsi = 0x000000000048F003<p64>
	rbp = 0x000000000048F00D<p64>
	goto l0000000000406F76
	// succ:  l0000000000406F76
l0000000000406F50:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000406F57
l0000000000406F57:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - rbp)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000406DA0
	// succ:  l0000000000406F76 l0000000000406DA0
l0000000000406F76:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000406F50
	// succ:  l0000000000406F81 l0000000000406F50
l0000000000406F81:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v26 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v26
	SCZO = cond(v26)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000406F57
	// succ:  l0000000000406F57
l0000000000406FB0:
	SCZO = cond(Mem0[rcx + 0x108<64>:byte] - 0x28<8>)
	branch Test(EQ,Z) l0000000000406FE2
	// succ:  l0000000000406FB9 l0000000000406FE2
l0000000000406FB9:
	rax = Mem0[rcx + 0x100<64>:word64]
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l0000000000407192
	// succ:  l0000000000406FCC l0000000000407192
l0000000000406FCC:
	rdx = rax + 1<64>
	// succ:  l0000000000406FD0
l0000000000406FD0:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x20<8>
	Mem0[rbx + 0x108<64>:byte] = 0x20<8>
	// succ:  l0000000000406FE2
l0000000000406FE2:
	r8 = Mem0[rbp + 8<64>:word64]
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	rsi = 0x000000000048F00E<p64>
	rbp = 0x000000000048F011<p64>
	call fn00000000004042F0 (retsize: 8;)
	rax = Mem0[rbx + 0x100<64>:word64]
	goto l0000000000407036
	// succ:  l0000000000407036
l0000000000407010:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000407017
l0000000000407017:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - rbp)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000406DA0
	// succ:  l0000000000407036 l0000000000406DA0
l0000000000407036:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000407010
	// succ:  l0000000000407041 l0000000000407010
l0000000000407041:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v29 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v29
	SCZO = cond(v29)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000407017
	// succ:  l0000000000407017
l0000000000407070:
	r8 = Mem0[rbp + 8<64>:word64]
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	rax = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l0000000000407137
	// succ:  l0000000000407091 l0000000000407137
l0000000000407091:
	rdx = rax + 1<64>
	// succ:  l0000000000407095
l0000000000407095:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x29<8>
	Mem0[rbx + 0x108<64>:byte] = 0x29<8>
	goto l0000000000406DA0
	// succ:  l0000000000406DA0
l00000000004070B0:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v35 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v35
	SCZO = cond(v35)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000406D8A
	// succ:  l0000000000406D8A
l00000000004070DF:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rcx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rcx + 0x118<64>:word64]
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v34 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v34
	SCZO = cond(v34)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000406B17
	// succ:  l0000000000406B17
l000000000040710B:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rcx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rcx + 0x118<64>:word64]
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v37 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v37
	SCZO = cond(v37)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000406D68
	// succ:  l0000000000406D68
l0000000000407137:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v30 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v30
	SCZO = cond(v30)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000407095
	// succ:  l0000000000407095
l0000000000407166:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rcx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rcx + 0x118<64>:word64]
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v32 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v32
	SCZO = cond(v32)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000406DC8
	// succ:  l0000000000406DC8
l0000000000407192:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rcx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rcx + 0x118<64>:word64]
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v31 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v31
	SCZO = cond(v31)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000406FD0
	// succ:  l0000000000406FD0
l00000000004071BE:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rcx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rcx + 0x118<64>:word64]
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v36 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v36
	SCZO = cond(v36)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000406E70
	// succ:  l0000000000406E70
fn0000000000406AD0_exit:


// fn00000000004071F0
// Return size: 8
define fn00000000004071F0
fn00000000004071F0_entry:
	rsp = fp
	// succ:  l00000000004071F0
l00000000004071F0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	SZO = cond(r8 & r8)
	C = false
	rsi = rcx
	ebp = edx
	rbp = CONVERT(ebp, word32, uint64)
	rbx = r8
	edi = r9d
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l000000000040726D
	// succ:  l0000000000407210 l000000000040726D
l0000000000407210:
	goto l0000000000407277
	// succ:  l0000000000407277
l0000000000407212:
	eax = Mem0[rbx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000407265
	// succ:  l0000000000407219 l0000000000407265
l0000000000407219:
	r8 = Mem0[rbx + 8<64>:word64]
	SZO = cond(edi & edi)
	C = false
	eax = Mem0[r8:word32]
	rax = CONVERT(eax, word32, uint64)
	branch Test(NE,Z) l000000000040722C
	// succ:  l0000000000407224 l000000000040722C
l0000000000407224:
	edx = SLICE(rax - 0x1C<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - 4<32>)
	branch Test(ULE,CZ) l0000000000407265
	// succ:  l000000000040722C l0000000000407265
l000000000040722C:
	rcx = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(eax - 0x29<32>)
	Mem0[rbx + 0x10<64>:word32] = 1<32>
	r12 = Mem0[rsi + 0x120<64>:word64]
	Mem0[rsi + 0x120<64>:word64] = rcx
	branch Test(EQ,Z) l0000000000407288
	// succ:  l000000000040724A l0000000000407288
l000000000040724A:
	SCZO = cond(eax - 0x2A<32>)
	branch Test(EQ,Z) l00000000004072A2
	// succ:  l000000000040724F l00000000004072A2
l000000000040724F:
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l00000000004072BC
	// succ:  l0000000000407254 l00000000004072BC
l0000000000407254:
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	call fn0000000000406AD0 (retsize: 8;)
	rsp = rsp + 8<64>
	Mem0[rsi + 0x120<64>:word64] = r12
	// succ:  l0000000000407265
l0000000000407265:
	rbx = Mem0[rbx:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000407277
	// succ:  l000000000040726D l0000000000407277
l000000000040726D:
	edx = Mem0[rsi + 0x130<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000407212
	// succ:  l0000000000407277 l0000000000407212
l0000000000407277:
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004071F0_exit
l0000000000407288:
	r9 = Mem0[rbx:word64]
	r8 = r8 + 0x10<64>
	SCZO = cond(r8)
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	call fn0000000000407820 (retsize: 8;)
	Mem0[rsi + 0x120<64>:word64] = r12
	goto l0000000000407277
	// succ:  l0000000000407277
l00000000004072A2:
	r9 = Mem0[rbx:word64]
	r8 = r8 + 8<64>
	SCZO = cond(r8)
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	call fn0000000000407580 (retsize: 8;)
	Mem0[rsi + 0x120<64>:word64] = r12
	goto l0000000000407277
	// succ:  l0000000000407277
l00000000004072BC:
	rdi = Mem0[rsi + 0x128<64>:word64]
	Mem0[rsi + 0x128<64>:word64] = 0<64>
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	r8 = Mem0[r8 + 8<64>:word64]
	rcx = rsi
	call fn00000000004042F0 (retsize: 8;)
	SZO = cond(bpl & 4<8>)
	C = false
	Mem0[rsi + 0x128<64>:word64] = rdi
	rax = Mem0[rsi + 0x100<64>:word64]
	branch Test(NE,Z) l000000000040735A
	// succ:  l00000000004072F0 l000000000040735A
l00000000004072F0:
	rdi = 0x000000000048EC36<p64>
	r14 = 0x000000000048EC38<p64>
	goto l0000000000407322
	// succ:  l0000000000407322
l0000000000407300:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000407307
l0000000000407307:
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	Mem0[rsi + 0x100<64>:word64] = rax
	Mem0[rsi + rdx:byte] = r13b
	SCZO = cond(rdi - r14)
	Mem0[rsi + 0x108<64>:byte] = r13b
	branch Test(EQ,Z) l0000000000407378
	// succ:  l0000000000407322 l0000000000407378
l0000000000407322:
	SCZO = cond(rax - 0xFF<64>)
	r13d = CONVERT(Mem0[rdi:byte], byte, word32)
	r13 = CONVERT(r13d, word32, uint64)
	branch Test(NE,Z) l0000000000407300
	// succ:  l000000000040732E l0000000000407300
l000000000040732E:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsi + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rsi + 0x118<64>:word64]
	rcx = rsi
	call Mem0[rsi + 0x110<64>:word64] (retsize: 8;)
	v28 = Mem0[rsi + 0x138<64>:word32] + 1<32>
	Mem0[rsi + 0x138<64>:word32] = v28
	SCZO = cond(v28)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000407307
	// succ:  l0000000000407307
l000000000040735A:
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l00000000004073B7
	// succ:  l0000000000407362 l00000000004073B7
l0000000000407362:
	rdx = rax + 1<64>
	// succ:  l0000000000407366
l0000000000407366:
	Mem0[rsi + 0x100<64>:word64] = rdx
	Mem0[rsi + rax:byte] = 0x2E<8>
	Mem0[rsi + 0x108<64>:byte] = 0x2E<8>
	// succ:  l0000000000407378
l0000000000407378:
	rax = Mem0[rbx + 8<64>:word64]
	rbx = Mem0[rax + 0x10<64>:word64]
	eax = Mem0[rbx:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x45<32>)
	branch Test(NE,Z) l0000000000407396
	// succ:  l0000000000407387 l0000000000407396
l0000000000407387:
	goto l00000000004073E3
	// succ:  l00000000004073E3
l0000000000407390:
	rbx = Mem0[rbx + 8<64>:word64]
	eax = Mem0[rbx:word32]
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000407396
l0000000000407396:
	eax = eax - 0x1C<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - 4<32>)
	branch Test(ULE,CZ) l0000000000407390
	// succ:  l000000000040739E l0000000000407390
l000000000040739E:
	r8 = rbx
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	call fn00000000004042F0 (retsize: 8;)
	Mem0[rsi + 0x120<64>:word64] = r12
	goto l0000000000407277
	// succ:  l0000000000407277
l00000000004073B7:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsi + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rsi + 0x118<64>:word64]
	rcx = rsi
	call Mem0[rsi + 0x110<64>:word64] (retsize: 8;)
	v31 = Mem0[rsi + 0x138<64>:word32] + 1<32>
	Mem0[rsi + 0x138<64>:word32] = v31
	SCZO = cond(v31)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000407366
	// succ:  l0000000000407366
l00000000004073E3:
	rax = Mem0[rsi + 0x100<64>:word64]
	rdi = 0x000000000048EC39<p64>
	r14 = 0x000000000048EC46<p64>
	goto l000000000040741C
	// succ:  l000000000040741C
l00000000004073FA:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000407401
l0000000000407401:
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	Mem0[rsi + 0x100<64>:word64] = rax
	Mem0[rsi + rdx:byte] = r13b
	SCZO = cond(rdi - r14)
	Mem0[rsi + 0x108<64>:byte] = r13b
	branch Test(EQ,Z) l0000000000407454
	// succ:  l000000000040741C l0000000000407454
l000000000040741C:
	SCZO = cond(rax - 0xFF<64>)
	r13d = CONVERT(Mem0[rdi:byte], byte, word32)
	r13 = CONVERT(r13d, word32, uint64)
	branch Test(NE,Z) l00000000004073FA
	// succ:  l0000000000407428 l00000000004073FA
l0000000000407428:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsi + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rsi + 0x118<64>:word64]
	rcx = rsi
	call Mem0[rsi + 0x110<64>:word64] (retsize: 8;)
	v30 = Mem0[rsi + 0x138<64>:word32] + 1<32>
	Mem0[rsi + 0x138<64>:word32] = v30
	SCZO = cond(v30)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000407401
	// succ:  l0000000000407401
l0000000000407454:
	eax = Mem0[rbx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r15 = rsp + 0x20<64>
	rdx = 0x000000000048EC2C<p64>
	rcx = r15
	r14 = r15
	r8d = SLICE(rax + 1<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	eax = sprintf(rcx, rdx, 0<32>)
	// succ:  l0000000000407472
l0000000000407472:
	edx = Mem0[r14:word32]
	rdx = CONVERT(edx, word32, uint64)
	r14 = r14 + 4<64>
	SCZO = cond(r14)
	eax = SLICE(rdx + 0xFFFFFFFFFEFEFEFF<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	edx = ~edx
	rdx = CONVERT(edx, word32, uint64)
	eax = eax & edx
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	eax = eax & 0x80808080<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000407472
	// succ:  l000000000040748A l0000000000407472
l000000000040748A:
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx >>u 0x10<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	SZO = cond(eax & 0x8080<32>)
	C = false
	branch Test(NE,Z) l0000000000407497
	// succ:  l0000000000407494_1 l0000000000407497
l0000000000407494_1:
	eax = edx
	// succ:  l0000000000407497
l0000000000407497:
	rdx = r14 + 2<64>
	branch Test(NE,Z) l000000000040749F
	// succ:  l000000000040749B_1 l000000000040749F
l000000000040749B_1:
	r14 = rdx
	// succ:  l000000000040749F
l000000000040749F:
	al = al + al
	SCZO = cond(al)
	rax = Mem0[rsi + 0x100<64>:word64]
	r14 = r14 - 3<64> - C
	SCZO = cond(r14)
	r14 = r14 - r15
	SCZO = cond(r14)
	branch Test(EQ,Z) l0000000000407510
	// succ:  l00000000004074B1 l0000000000407510
l00000000004074B1:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	goto l00000000004074D7
	// succ:  l00000000004074D7
l00000000004074B5:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l00000000004074BC
l00000000004074BC:
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	Mem0[rsi + 0x100<64>:word64] = rax
	Mem0[rsi + rdx:byte] = r13b
	SCZO = cond(rdi - r14)
	Mem0[rsi + 0x108<64>:byte] = r13b
	branch Test(EQ,Z) l0000000000407510
	// succ:  l00000000004074D7 l0000000000407510
l00000000004074D7:
	SCZO = cond(rax - 0xFF<64>)
	r13d = CONVERT(Mem0[r15 + rdi:byte], byte, word32)
	r13 = CONVERT(r13d, word32, uint64)
	branch Test(NE,Z) l00000000004074B5
	// succ:  l00000000004074E4 l00000000004074B5
l00000000004074E4:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsi + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rsi + 0x118<64>:word64]
	rcx = rsi
	call Mem0[rsi + 0x110<64>:word64] (retsize: 8;)
	v34 = Mem0[rsi + 0x138<64>:word32] + 1<32>
	Mem0[rsi + 0x138<64>:word32] = v34
	SCZO = cond(v34)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l00000000004074BC
	// succ:  l00000000004074BC
l0000000000407510:
	rdi = 0x000000000048EC47<p64>
	r14 = 0x000000000048EC4A<p64>
	goto l0000000000407546
	// succ:  l0000000000407546
l0000000000407520:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000407527
l0000000000407527:
	rdi = rdi + 1<64>
	SCZO = cond(rdi)
	Mem0[rsi + 0x100<64>:word64] = rax
	Mem0[rsi + rdx:byte] = r13b
	SCZO = cond(rdi - r14)
	Mem0[rsi + 0x108<64>:byte] = r13b
	branch Test(EQ,Z) l0000000000407390
	// succ:  l0000000000407546 l0000000000407390
l0000000000407546:
	SCZO = cond(rax - 0xFF<64>)
	r13d = CONVERT(Mem0[rdi:byte], byte, word32)
	r13 = CONVERT(r13d, word32, uint64)
	branch Test(NE,Z) l0000000000407520
	// succ:  l0000000000407552 l0000000000407520
l0000000000407552:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsi + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rsi + 0x118<64>:word64]
	rcx = rsi
	call Mem0[rsi + 0x110<64>:word64] (retsize: 8;)
	v35 = Mem0[rsi + 0x138<64>:word32] + 1<32>
	Mem0[rsi + 0x138<64>:word32] = v35
	SCZO = cond(v35)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000407527
	// succ:  l0000000000407527
fn00000000004071F0_exit:


// fn0000000000407580
// Return size: 8
define fn0000000000407580
fn0000000000407580_entry:
	rsp = fp
	// succ:  l0000000000407580
l0000000000407580:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SZO = cond(r9 & r9)
	C = false
	rbx = rcx
	ebp = edx
	rbp = CONVERT(ebp, word32, uint64)
	r12 = r8
	r13 = r9
	rax = r9
	branch Test(EQ,Z) l00000000004075C4
	// succ:  l00000000004075A1 l00000000004075C4
l00000000004075A1:
	edx = Mem0[rax + 0x10<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000407660
	// succ:  l00000000004075AC l0000000000407660
l00000000004075AC:
	rax = Mem0[rax:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l00000000004075A1
	// succ:  l00000000004075B4 l00000000004075A1
l00000000004075B4:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = r13
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004071F0 (retsize: 8;)
	// succ:  l00000000004075C4
l00000000004075C4:
	rax = Mem0[rbx + 0x100<64>:word64]
	// succ:  l00000000004075CB
l00000000004075CB:
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l000000000040771B
	// succ:  l00000000004075D7 l000000000040771B
l00000000004075D7:
	rdx = rax + 1<64>
	// succ:  l00000000004075DB
l00000000004075DB:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x20<8>
	Mem0[rbx + 0x108<64>:byte] = 0x20<8>
	// succ:  l00000000004075ED
l00000000004075ED:
	SCZO = cond(rdx - 0xFF<64>)
	branch Test(EQ,Z) l00000000004077B0
	// succ:  l00000000004075FA l00000000004077B0
l00000000004075FA:
	rax = rdx + 1<64>
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = 0x5B<8>
	Mem0[rbx + 0x108<64>:byte] = 0x5B<8>
	r8 = Mem0[r12:word64]
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l000000000040762A
	// succ:  l0000000000407619 l000000000040762A
l0000000000407619:
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	rax = Mem0[rbx + 0x100<64>:word64]
	// succ:  l000000000040762A
l000000000040762A:
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l0000000000407780
	// succ:  l0000000000407636 l0000000000407780
l0000000000407636:
	rdx = rax + 1<64>
	// succ:  l000000000040763A
l000000000040763A:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x5D<8>
	Mem0[rbx + 0x108<64>:byte] = 0x5D<8>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000407580_exit
l0000000000407660:
	rax = Mem0[rax + 8<64>:word64]
	SCZO = cond(Mem0[rax:word32] - 0x2A<32>)
	branch Test(EQ,Z) l0000000000407800
	// succ:  l000000000040766D l0000000000407800
l000000000040766D:
	rax = Mem0[rbx + 0x100<64>:word64]
	rsi = 0x000000000048F0CC<p64>
	r14 = 0x000000000048F0CE<p64>
	goto l00000000004076A6
	// succ:  l00000000004076A6
l0000000000407684:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l000000000040768B
l000000000040768B:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rsi - r14)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l00000000004076E0
	// succ:  l00000000004076A6 l00000000004076E0
l00000000004076A6:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000407684
	// succ:  l00000000004076B1 l0000000000407684
l00000000004076B1:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v27 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v27
	SCZO = cond(v27)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l000000000040768B
	// succ:  l000000000040768B
l00000000004076E0:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	r8 = r13
	rcx = rbx
	call fn00000000004071F0 (retsize: 8;)
	rdx = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rdx - 0xFF<64>)
	branch Test(EQ,Z) l000000000040774A
	// succ:  l0000000000407700 l000000000040774A
l0000000000407700:
	rax = rdx + 1<64>
	// succ:  l0000000000407704
l0000000000407704:
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = 0x29<8>
	Mem0[rbx + 0x108<64>:byte] = 0x29<8>
	goto l00000000004075CB
	// succ:  l00000000004075CB
l000000000040771B:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v24 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v24
	SCZO = cond(v24)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004075DB
	// succ:  l00000000004075DB
l000000000040774A:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v29 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v29
	SCZO = cond(v29)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000407704
	// succ:  l0000000000407704
l0000000000407780:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v25 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v25
	SCZO = cond(v25)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000040763A
	// succ:  l000000000040763A
l00000000004077B0:
	r8 = Mem0[rbx + 0x118<64>:word64]
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	Mem0[rbx:byte] = 0x5B<8>
	Mem0[rbx + 0x108<64>:byte] = 0x5B<8>
	r8 = Mem0[r12:word64]
	v22 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v22
	SCZO = cond(v22)
	Mem0[rbx + 0x100<64>:word64] = 1<64>
	SZO = cond(r8 & r8)
	C = false
	branch Test(NE,Z) l0000000000407619
	// succ:  l00000000004077F5 l0000000000407619
l00000000004077F5:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000407636
	// succ:  l0000000000407636
l0000000000407800:
	edx = ebp
	rdx = CONVERT(edx, word32, uint64)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = r13
	rcx = rbx
	call fn00000000004071F0 (retsize: 8;)
	rdx = Mem0[rbx + 0x100<64>:word64]
	goto l00000000004075ED
	// succ:  l00000000004075ED
fn0000000000407580_exit:


// fn0000000000407820
// Return size: 8
define fn0000000000407820
fn0000000000407820_entry:
	rsp = fp
	// succ:  l0000000000407820
l0000000000407820:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SZO = cond(r9 & r9)
	C = false
	rbx = rcx
	esi = edx
	rsi = CONVERT(esi, word32, uint64)
	rdi = r8
	rbp = r9
	branch Test(EQ,Z) l0000000000407910
	// succ:  l000000000040783E l0000000000407910
l000000000040783E:
	r8d = Mem0[r9 + 0x10<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NE,Z) l0000000000407910
	// succ:  l000000000040784B l0000000000407910
l000000000040784B:
	rax = r9
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000407875
	// succ:  l0000000000407875
l0000000000407855:
	ch = ch & 0xE<8>
	SZO = cond(ch)
	C = false
	branch Test(NE,Z) l00000000004079C0
	// succ:  l000000000040785E l00000000004079C0
l000000000040785E:
	rax = Mem0[rax:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000407910
	// succ:  l000000000040786A l0000000000407910
l000000000040786A:
	ecx = Mem0[rax + 0x10<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l0000000000407910
	// succ:  l0000000000407875 l0000000000407910
l0000000000407875:
	rcx = Mem0[rax + 8<64>:word64]
	r10d = Mem0[rcx:word32]
	r10 = CONVERT(r10d, word32, uint64)
	ecx = SLICE(r10 - 0x19<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx - 0x12<32>)
	branch Test(UGT,CZ) l000000000040785E
	// succ:  l0000000000407885 l000000000040785E
l0000000000407885:
	r11 = rdx
	r11 = r11 << cl
	SCZO = cond(r11)
	SZO = cond(r11d & 0x43107<32>)
	C = false
	rcx = r11
	branch Test(EQ,Z) l0000000000407855
	// succ:  l0000000000407897 l0000000000407855
l0000000000407897:
	eax = CONVERT(Mem0[rbx + 0x108<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000040789E
l000000000040789E:
	SCZO = cond(al - 0x20<8>)
	branch Test(EQ,Z) l00000000004079D5
	// succ:  l00000000004078A6 l00000000004079D5
l00000000004078A6:
	rdx = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rdx - 0xFF<64>)
	branch Test(EQ,Z) l0000000000407B02
	// succ:  l00000000004078BA l0000000000407B02
l00000000004078BA:
	rax = rdx + 1<64>
	// succ:  l00000000004078BE
l00000000004078BE:
	SCZO = cond(rax - 0xFF<64>)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = 0x20<8>
	Mem0[rbx + 0x108<64>:byte] = 0x20<8>
	branch Test(NE,Z) l00000000004079E8
	// succ:  l00000000004078DC l00000000004079E8
l00000000004078DC:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v30 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v30
	SCZO = cond(v30)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004079EC
	// succ:  l00000000004079EC
l0000000000407910:
	r12 = Mem0[rbx + 0x128<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0x128<64>:word64] = 0<64>
	r8 = rbp
	rcx = rbx
	call fn00000000004071F0 (retsize: 8;)
	rdx = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rdx - 0xFF<64>)
	branch Test(EQ,Z) l0000000000407A56
	// succ:  l0000000000407946 l0000000000407A56
l0000000000407946:
	rax = rdx + 1<64>
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = 0x28<8>
	Mem0[rbx + 0x108<64>:byte] = 0x28<8>
	r8 = Mem0[rdi:word64]
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l0000000000407975
	// succ:  l0000000000407964 l0000000000407975
l0000000000407964:
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	rax = Mem0[rbx + 0x100<64>:word64]
	// succ:  l0000000000407975
l0000000000407975:
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l0000000000407AA4
	// succ:  l0000000000407981 l0000000000407AA4
l0000000000407981:
	rdx = rax + 1<64>
	// succ:  l0000000000407985
l0000000000407985:
	Mem0[rbx + 0x100<64>:word64] = rdx
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	Mem0[rbx + rax:byte] = 0x29<8>
	r8 = rbp
	Mem0[rbx + 0x108<64>:byte] = 0x29<8>
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004071F0 (retsize: 8;)
	Mem0[rbx + 0x128<64>:word64] = r12
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000407820_exit
l00000000004079C0:
	eax = CONVERT(Mem0[rbx + 0x108<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xFFFFFFFD<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(dl - 0x28<8>)
	branch Test(NE,Z) l000000000040789E
	// succ:  l00000000004079D5 l000000000040789E
l00000000004079D5:
	rax = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l00000000004078DC
	// succ:  l00000000004079E8 l00000000004078DC
l00000000004079E8:
	rdx = rax + 1<64>
	// succ:  l00000000004079EC
l00000000004079EC:
	Mem0[rbx + 0x100<64>:word64] = rdx
	r12 = Mem0[rbx + 0x128<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	Mem0[rbx + rax:byte] = 0x28<8>
	r8 = rbp
	Mem0[rbx + 0x108<64>:byte] = 0x28<8>
	Mem0[rbx + 0x128<64>:word64] = 0<64>
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004071F0 (retsize: 8;)
	rax = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l0000000000407AD3
	// succ:  l0000000000407A33 l0000000000407AD3
l0000000000407A33:
	rdx = rax + 1<64>
	// succ:  l0000000000407A37
l0000000000407A37:
	SCZO = cond(rdx - 0xFF<64>)
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x29<8>
	Mem0[rbx + 0x108<64>:byte] = 0x29<8>
	branch Test(NE,Z) l0000000000407946
	// succ:  l0000000000407A56 l0000000000407946
l0000000000407A56:
	r8 = Mem0[rbx + 0x118<64>:word64]
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	Mem0[rbx:byte] = 0x28<8>
	Mem0[rbx + 0x108<64>:byte] = 0x28<8>
	r8 = Mem0[rdi:word64]
	v31 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v31
	SCZO = cond(v31)
	Mem0[rbx + 0x100<64>:word64] = 1<64>
	SZO = cond(r8 & r8)
	C = false
	branch Test(NE,Z) l0000000000407964
	// succ:  l0000000000407A9A l0000000000407964
l0000000000407A9A:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000407981
	// succ:  l0000000000407981
l0000000000407AA4:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v33 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v33
	SCZO = cond(v33)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000407985
	// succ:  l0000000000407985
l0000000000407AD3:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v35 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v35
	SCZO = cond(v35)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000407A37
	// succ:  l0000000000407A37
l0000000000407B02:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v36 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v36
	SCZO = cond(v36)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l00000000004078BE
	// succ:  l00000000004078BE
fn0000000000407820_exit:


// fn0000000000407B40
// Return size: 8
define fn0000000000407B40
fn0000000000407B40_entry:
	rsp = fp
	// succ:  l0000000000407B40
l0000000000407B40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x160<64>:word64]
	rbx = rcx
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	rsi = r8
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000407B78
	// succ:  l0000000000407B5B l0000000000407B78
l0000000000407B5B:
	rdx = Mem0[rcx + 0x120<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rax
	Mem0[rsp + 0x20<64>:word64] = rdx
	rdx = rsp + 0x20<64>
	Mem0[rcx + 0x120<64>:word64] = rdx
	// succ:  l0000000000407B78
l0000000000407B78:
	r8 = Mem0[rsi:word64]
	SCZO = cond(Mem0[r8:word32] - 4<32>)
	branch Test(EQ,Z) l0000000000407BB0
	// succ:  l0000000000407B81 l0000000000407BB0
l0000000000407B81:
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	SCZO = cond(Mem0[rbx + 0x160<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000407BA1
	// succ:  l0000000000407B95 l0000000000407BA1
l0000000000407B95:
	rax = Mem0[rsp + 0x20<64>:word64]
	Mem0[rbx + 0x120<64>:word64] = rax
	// succ:  l0000000000407BA1
l0000000000407BA1:
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000407B40_exit
l0000000000407BB0:
	r8 = Mem0[r8 + 8<64>:word64]
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	SCZO = cond(Mem0[rbx + 0x160<64>:word64] - 0<64>)
	branch Test(EQ,Z) l0000000000407BD4
	// succ:  l0000000000407BC8 l0000000000407BD4
l0000000000407BC8:
	rax = Mem0[rsp + 0x20<64>:word64]
	Mem0[rbx + 0x120<64>:word64] = rax
	// succ:  l0000000000407BD4
l0000000000407BD4:
	SCZO = cond(Mem0[rbx + 0x108<64>:byte] - 0x3C<8>)
	branch Test(EQ,Z) l0000000000407CB0
	// succ:  l0000000000407BE1 l0000000000407CB0
l0000000000407BE1:
	rax = Mem0[rbx + 0x100<64>:word64]
	// succ:  l0000000000407BE8
l0000000000407BE8:
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l0000000000407C51
	// succ:  l0000000000407BF0 l0000000000407C51
l0000000000407BF0:
	rdx = rax + 1<64>
	// succ:  l0000000000407BF4
l0000000000407BF4:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x3C<8>
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0x108<64>:byte] = 0x3C<8>
	rax = Mem0[rsi:word64]
	rcx = rbx
	r8 = Mem0[rax + 0x10<64>:word64]
	call fn00000000004042F0 (retsize: 8;)
	SCZO = cond(Mem0[rbx + 0x108<64>:byte] - 0x3E<8>)
	branch Test(EQ,Z) l0000000000407CE0
	// succ:  l0000000000407C24 l0000000000407CE0
l0000000000407C24:
	rax = Mem0[rbx + 0x100<64>:word64]
	// succ:  l0000000000407C2B
l0000000000407C2B:
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l0000000000407C80
	// succ:  l0000000000407C33 l0000000000407C80
l0000000000407C33:
	rdx = rax + 1<64>
	// succ:  l0000000000407C37
l0000000000407C37:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x3E<8>
	Mem0[rbx + 0x108<64>:byte] = 0x3E<8>
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000407B40_exit
l0000000000407C51:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v18 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v18
	SCZO = cond(v18)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000407BF4
	// succ:  l0000000000407BF4
l0000000000407C80:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v16 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v16
	SCZO = cond(v16)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000407C37
	// succ:  l0000000000407C37
l0000000000407CB0:
	rdx = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rdx - 0xFF<64>)
	branch Test(EQ,Z) l0000000000407D0B
	// succ:  l0000000000407CC0 l0000000000407D0B
l0000000000407CC0:
	rax = rdx + 1<64>
	// succ:  l0000000000407CC4
l0000000000407CC4:
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = 0x20<8>
	Mem0[rbx + 0x108<64>:byte] = 0x20<8>
	goto l0000000000407BE8
	// succ:  l0000000000407BE8
l0000000000407CE0:
	rdx = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rdx - 0xFF<64>)
	branch Test(EQ,Z) l0000000000407D37
	// succ:  l0000000000407CF0 l0000000000407D37
l0000000000407CF0:
	rax = rdx + 1<64>
	// succ:  l0000000000407CF4
l0000000000407CF4:
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = 0x20<8>
	Mem0[rbx + 0x108<64>:byte] = 0x20<8>
	goto l0000000000407C2B
	// succ:  l0000000000407C2B
l0000000000407D0B:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v20 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v20
	SCZO = cond(v20)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000407CC4
	// succ:  l0000000000407CC4
l0000000000407D37:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v19 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v19
	SCZO = cond(v19)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000407CF4
	// succ:  l0000000000407CF4
fn0000000000407B40_exit:


// fn0000000000407D70
// Return size: 0
define fn0000000000407D70
fn0000000000407D70_entry:
	rsp = fp
	// succ:  l0000000000407D70
l0000000000407D70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	SCZO = cond(Mem0[r8:word32] - 0x31<32>)
	branch Test(EQ,Z) l0000000000407D90
	// succ:  l0000000000407D80 l0000000000407D90
l0000000000407D80:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000407D8A_thunk_fn00000000004042F0
l0000000000407D8A_thunk_fn00000000004042F0:
	call fn00000000004042F0 (retsize: 0;)
	return
	// succ:  fn0000000000407D70_exit
l0000000000407D90:
	rax = Mem0[r8 + 8<64>:word64]
	rbp = CONVERT(Mem0[rax + 0x10<64>:word32], word32, int64)
	r12 = Mem0[rax + 8<64>:word64]
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l0000000000407E10
	// succ:  l0000000000407DA1 l0000000000407E10
l0000000000407DA1:
	rbx = rcx
	rax = Mem0[rcx + 0x100<64>:word64]
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l0000000000407DD2
	// succ:  l0000000000407DD2
l0000000000407DB0:
	rdx = rax
	rax = rax + 1<64>
	SCZO = cond(rax)
	// succ:  l0000000000407DB7
l0000000000407DB7:
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x100<64>:word64] = rax
	Mem0[rbx + rdx:byte] = dil
	SCZO = cond(rbp - rsi)
	Mem0[rbx + 0x108<64>:byte] = dil
	branch Test(EQ,Z) l0000000000407E10
	// succ:  l0000000000407DD2 l0000000000407E10
l0000000000407DD2:
	SCZO = cond(rax - 0xFF<64>)
	edi = CONVERT(Mem0[r12 + rsi:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l0000000000407DB0
	// succ:  l0000000000407DDF l0000000000407DB0
l0000000000407DDF:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v19 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v19
	SCZO = cond(v19)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000407DB7
	// succ:  l0000000000407DB7
l0000000000407E10:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000407D70_exit
fn0000000000407D70_exit:


// fn0000000000407E20
// Return size: 8
define fn0000000000407E20
fn0000000000407E20_entry:
	rsp = fp
	// succ:  l0000000000407E20
l0000000000407E20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	eax = Mem0[r8:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x30<32>)
	r10b = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(eax - 1<32>)
	r9b = CONVERT(Test(ULE,CZ), bool, int8)
	r10b = r10b | r9b
	SZO = cond(r10b)
	C = false
	branch Test(NE,Z) l0000000000407EB0
	// succ:  l0000000000407E3D l0000000000407EB0
l0000000000407E3D:
	SCZO = cond(eax - 6<32>)
	branch Test(EQ,Z) l0000000000407EB0
	// succ:  l0000000000407E42 l0000000000407EB0
l0000000000407E42:
	rax = Mem0[rcx + 0x100<64>:word64]
	rsi = r8
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	rbx = rcx
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l0000000000407EC0
	// succ:  l0000000000407E59 l0000000000407EC0
l0000000000407E59:
	rdx = rax + 1<64>
	// succ:  l0000000000407E5D
l0000000000407E5D:
	Mem0[rbx + 0x100<64>:word64] = rdx
	r8 = rsi
	Mem0[rbx + rax:byte] = 0x28<8>
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0x108<64>:byte] = 0x28<8>
	rcx = rbx
	call fn00000000004042F0 (retsize: 8;)
	rax = Mem0[rbx + 0x100<64>:word64]
	SCZO = cond(rax - 0xFF<64>)
	branch Test(EQ,Z) l0000000000407EF0
	// succ:  l0000000000407E8B l0000000000407EF0
l0000000000407E8B:
	rdx = rax + 1<64>
	// succ:  l0000000000407E8F
l0000000000407E8F:
	Mem0[rbx + 0x100<64>:word64] = rdx
	Mem0[rbx + rax:byte] = 0x29<8>
	Mem0[rbx + 0x108<64>:byte] = 0x29<8>
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000407E20_exit
l0000000000407EB0:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000407EB7_thunk_fn00000000004042F0
l0000000000407EB7_thunk_fn00000000004042F0:
	call fn00000000004042F0 (retsize: 0;)
	return
	// succ:  fn0000000000407E20_exit
l0000000000407EC0:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v20 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v20
	SCZO = cond(v20)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000407E5D
	// succ:  l0000000000407E5D
l0000000000407EF0:
	edx = 0xFF<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0xFF<64>:byte] = 0<8>
	r8 = Mem0[rbx + 0x118<64>:word64]
	rcx = rbx
	call Mem0[rbx + 0x110<64>:word64] (retsize: 8;)
	v21 = Mem0[rbx + 0x138<64>:word32] + 1<32>
	Mem0[rbx + 0x138<64>:word32] = v21
	SCZO = cond(v21)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000407E8F
	// succ:  l0000000000407E8F
fn0000000000407E20_exit:


// fn0000000000407F20
// Return size: 0
define fn0000000000407F20
fn0000000000407F20_entry:
	rsp = fp
	// succ:  l0000000000407F20
l0000000000407F20:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x4C<8>)
	branch Test(EQ,Z) l0000000000407F40
	// succ:  l0000000000407F30 l0000000000407F40
l0000000000407F30:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000407F20_exit
l0000000000407F40:
	rbx = rcx
	rcx = rax + 1<64>
	Mem0[rbx + 0x18<64>:word64] = rcx
	edx = CONVERT(Mem0[rax + 1<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x5F<8>)
	r8b = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(dl - 0x5A<8>)
	branch Test(EQ,Z) l0000000000408010
	// succ:  l0000000000407F5F l0000000000408010
l0000000000407F5F:
	SZO = cond(r8b & r8b)
	C = false
	branch Test(NE,Z) l0000000000408040
	// succ:  l0000000000407F68 l0000000000408040
l0000000000407F68:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rsi = rax
	branch Test(EQ,Z) l0000000000407F30
	// succ:  l0000000000407F78 l0000000000407F30
l0000000000407F78:
	SCZO = cond(Mem0[rax:word32] - 0x27<32>)
	branch Test(EQ,Z) l0000000000408070
	// succ:  l0000000000407F81 l0000000000408070
l0000000000407F81:
	rdx = Mem0[rbx + 0x18<64>:word64]
	edi = 0x3B<32>
	rdi = CONVERT(edi, word32, uint64)
	r9d = CONVERT(Mem0[rdx:byte], byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9b - 0x6E<8>)
	branch Test(EQ,Z) l0000000000408050
	// succ:  l0000000000407F98 l0000000000408050
l0000000000407F98:
	SCZO = cond(r9b - 0x45<8>)
	branch Test(EQ,Z) l000000000040808A
	// succ:  l0000000000407FA2 l000000000040808A
l0000000000407FA2:
	SZO = cond(r9b & r9b)
	C = false
	branch Test(EQ,Z) l0000000000407F30
	// succ:  l0000000000407FA7 l0000000000407F30
l0000000000407FA7:
	r9 = rdx + 1<64>
	goto l0000000000407FBD
	// succ:  l0000000000407FBD
l0000000000407FB0:
	r9 = r9 + 1<64>
	SCZO = cond(r9)
	SZO = cond(r10b & r10b)
	C = false
	branch Test(EQ,Z) l0000000000407F30
	// succ:  l0000000000407FBD l0000000000407F30
l0000000000407FBD:
	Mem0[rbx + 0x18<64>:word64] = r9
	r10d = CONVERT(Mem0[r9:byte], byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	SCZO = cond(r10b - 0x45<8>)
	branch Test(NE,Z) l0000000000407FB0
	// succ:  l0000000000407FCB l0000000000407FB0
l0000000000407FCB:
	r8d = r9d
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d - edx
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	// succ:  l0000000000407FD1
l0000000000407FD1:
	rcx = rbx
	call fn00000000004037B0 (retsize: 8;)
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	r9 = rax
	r8 = rsi
	call fn0000000000403730 (retsize: 8;)
	rcx = Mem0[rbx + 0x18<64>:word64]
	edx = CONVERT(Mem0[rcx:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000407FF0
l0000000000407FF0:
	SCZO = cond(dl - 0x45<8>)
	branch Test(NE,Z) l0000000000407F30
	// succ:  l0000000000407FF9 l0000000000407F30
l0000000000407FF9:
	rcx = rcx + 1<64>
	SCZO = cond(rcx)
	Mem0[rbx + 0x18<64>:word64] = rcx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000407F20_exit
l0000000000408010:
	SZO = cond(r8b & r8b)
	C = false
	branch Test(NE,Z) l0000000000408040
	// succ:  l0000000000408015 l0000000000408040
l0000000000408015:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(dl - 0x5A<8>)
	branch Test(NE,Z) l0000000000407FF0
	// succ:  l000000000040801C l0000000000407FF0
l000000000040801C:
	rcx = rcx + 1<64>
	SCZO = cond(rcx)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x18<64>:word64] = rcx
	rcx = rbx
	call fn000000000040C0C0 (retsize: 8;)
	rcx = Mem0[rbx + 0x18<64>:word64]
	edx = CONVERT(Mem0[rcx:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000407FF0
	// succ:  l0000000000407FF0
l0000000000408040:
	rcx = rax + 2<64>
	Mem0[rbx + 0x18<64>:word64] = rcx
	edx = CONVERT(Mem0[rax + 2<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000408015
	// succ:  l0000000000408015
l0000000000408050:
	rax = rdx + 1<64>
	dil = 0x3C<8>
	Mem0[rbx + 0x18<64>:word64] = rax
	r9d = CONVERT(Mem0[rdx + 1<64>:byte], byte, word32)
	r9 = CONVERT(r9d, word32, uint64)
	rdx = rax
	goto l0000000000407F98
	// succ:  l0000000000407F98
l0000000000408070:
	rax = Mem0[rax + 8<64>:word64]
	edx = Mem0[rax + 0x1C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000407F81
	// succ:  l000000000040807F l0000000000407F81
l000000000040807F:
	eax = Mem0[rax + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	v27 = Mem0[rbx + 0x50<64>:word32] - eax
	Mem0[rbx + 0x50<64>:word32] = v27
	SCZO = cond(v27)
	goto l0000000000407F81
	// succ:  l0000000000407F81
l000000000040808A:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	goto l0000000000407FD1
	// succ:  l0000000000407FD1
fn0000000000407F20_exit:


// fn00000000004080A0
// Return size: 8
define fn00000000004080A0
fn00000000004080A0_entry:
	rsp = fp
	// succ:  l00000000004080A0
l00000000004080A0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[rcx + 0x18<64>:word64]
	eax = CONVERT(Mem0[rcx:byte], byte, int32)
	SCZO = cond(al - 0x56<8>)
	r8b = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - 0x72<8>)
	dl = CONVERT(Test(EQ,Z), bool, int8)
	r8b = r8b | dl
	SZO = cond(r8b)
	C = false
	branch Test(NE,Z) l00000000004081F0
	// succ:  l00000000004080CA l00000000004081F0
l00000000004080CA:
	SCZO = cond(al - 0x4B<8>)
	branch Test(EQ,Z) l00000000004081F0
	// succ:  l00000000004080D2 l00000000004081F0
l00000000004080D2:
	edx = SLICE(rax - 0x30<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x4A<8>)
	branch Test(UGT,CZ) l00000000004081E0
	// succ:  l00000000004080DE l00000000004081E0
l00000000004080DE:
	r8 = 0x000000000048F0DC<p64>
	edx = CONVERT(dl, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rdx = CONVERT(Mem0[r8 + rdx * 4<64>:word32], word32, int64)
	r8 = r8 + rdx
	SCZO = cond(r8)
	call r8 (retsize: 0;)
	return
	// succ:  fn00000000004080A0_exit
l00000000004081E0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004080A0_exit
l00000000004081F0:
	rdx = rsp + 0x38<64>
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rcx = rbx
	call fn0000000000403810 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rsi = rax
	branch Test(EQ,Z) l00000000004081E0
	// succ:  l0000000000408208 l00000000004081E0
l0000000000408208:
	rax = Mem0[rbx + 0x18<64>:word64]
	rcx = rbx
	SCZO = cond(Mem0[rax:byte] - 0x46<8>)
	branch Test(EQ,Z) l0000000000408260
	// succ:  l0000000000408214 l0000000000408260
l0000000000408214:
	call fn00000000004080A0 (retsize: 8;)
	Mem0[rsi:word64] = rax
	// succ:  l000000000040821C
l000000000040821C:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004081E0
	// succ:  l0000000000408221 l00000000004081E0
l0000000000408221:
	edi = Mem0[rax:word32]
	rdi = CONVERT(edi, word32, uint64)
	ecx = SLICE(rdi - 0x1F<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx - 1<32>)
	branch Test(ULE,CZ) l0000000000408270
	// succ:  l000000000040822B l0000000000408270
l000000000040822B:
	rdx = Mem0[rsp + 0x38<64>:word64]
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l00000000004081E0
	// succ:  l0000000000408235 l00000000004081E0
l0000000000408235:
	eax = Mem0[rbx + 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - Mem0[rbx + 0x3C<64>:word32])
	branch Test(GE,SO) l00000000004081E0
	// succ:  l000000000040823D l00000000004081E0
l000000000040823D:
	rcx = Mem0[rbx + 0x30<64>:word64]
	r8 = CONVERT(eax, word32, int64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rcx + r8 * 8<64>:word64] = rdx
	Mem0[rbx + 0x38<64>:word32] = eax
	rax = Mem0[rsp + 0x38<64>:word64]
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004080A0_exit
l0000000000408260:
	call fn0000000000409640 (retsize: 8;)
	Mem0[rsi:word64] = rax
	goto l000000000040821C
	// succ:  l000000000040821C
l0000000000408270:
	rcx = Mem0[rsp + 0x38<64>:word64]
	r8 = Mem0[rax + 8<64>:word64]
	Mem0[rax + 8<64>:word64] = rcx
	rdx = Mem0[rsi:word64]
	Mem0[rsp + 0x38<64>:word64] = rdx
	Mem0[rsi:word64] = r8
	goto l000000000040822B
	// succ:  l000000000040822B
fn00000000004080A0_exit:


// fn0000000000409500
// Return size: 8
define fn0000000000409500
fn0000000000409500_entry:
	rsp = fp
	// succ:  l0000000000409500
l0000000000409500:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rdx = Mem0[rcx + 0x18<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = 0<64>
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x45<8>)
	r9b = CONVERT(Test(EQ,Z), bool, int8)
	SZO = cond(al & al)
	C = false
	r8b = CONVERT(Test(EQ,Z), bool, int8)
	r9b = r9b | r8b
	SZO = cond(r9b)
	C = false
	branch Test(NE,Z) l000000000040958A
	// succ:  l0000000000409527 l000000000040958A
l0000000000409527:
	SCZO = cond(al - 0x2E<8>)
	branch Test(EQ,Z) l000000000040958A
	// succ:  l000000000040952B l000000000040958A
l000000000040952B:
	rbx = rcx
	rsi = rsp + 0x28<64>
	goto l000000000040956C
	// succ:  l000000000040956C
l0000000000409535:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = 0x2E<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	Mem0[rsi:word64] = rax
	branch Test(EQ,Z) l000000000040958A
	// succ:  l000000000040954D l000000000040958A
l000000000040954D:
	rdx = Mem0[rbx + 0x18<64>:word64]
	rsi = rax + 0x10<64>
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x45<8>)
	r8b = CONVERT(Test(EQ,Z), bool, int8)
	SZO = cond(al & al)
	C = false
	cl = CONVERT(Test(EQ,Z), bool, int8)
	r8b = r8b | cl
	SZO = cond(r8b)
	C = false
	branch Test(NE,Z) l0000000000409593
	// succ:  l0000000000409568 l0000000000409593
l0000000000409568:
	SCZO = cond(al - 0x2E<8>)
	branch Test(EQ,Z) l0000000000409593
	// succ:  l000000000040956C l0000000000409593
l000000000040956C:
	SCZO = cond(al - 0x4F<8>)
	branch Test(EQ,Z) l0000000000409574
	// succ:  l0000000000409570 l0000000000409574
l0000000000409570:
	SCZO = cond(al - 0x52<8>)
	branch Test(NE,Z) l000000000040957A
	// succ:  l0000000000409574 l000000000040957A
l0000000000409574:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x45<8>)
	branch Test(EQ,Z) l0000000000409593
	// succ:  l000000000040957A l0000000000409593
l000000000040957A:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r8 = rax
	branch Test(NE,Z) l0000000000409535
	// succ:  l000000000040958A l0000000000409535
l000000000040958A:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000040958C
l000000000040958C:
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000409500_exit
l0000000000409593:
	rax = Mem0[rsp + 0x28<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040958A
	// succ:  l000000000040959D l000000000040958A
l000000000040959D:
	SCZO = cond(Mem0[rax + 0x10<64>:word64] - 0<64>)
	branch Test(NE,Z) l000000000040958C
	// succ:  l00000000004095A4 l000000000040958C
l00000000004095A4:
	rdx = Mem0[rax + 8<64>:word64]
	SCZO = cond(Mem0[rdx:word32] - 0x27<32>)
	branch Test(NE,Z) l000000000040958C
	// succ:  l00000000004095AD l000000000040958C
l00000000004095AD:
	rdx = Mem0[rdx + 8<64>:word64]
	SCZO = cond(Mem0[rdx + 0x1C<64>:word32] - 9<32>)
	branch Test(NE,Z) l000000000040958C
	// succ:  l00000000004095B7 l000000000040958C
l00000000004095B7:
	edx = Mem0[rdx + 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	v21 = Mem0[rbx + 0x50<64>:word32] - edx
	Mem0[rbx + 0x50<64>:word32] = v21
	SCZO = cond(v21)
	Mem0[rax + 8<64>:word64] = 0<64>
	goto l000000000040958C
	// succ:  l000000000040958C
fn0000000000409500_exit:


// fn00000000004095D0
// Return size: 8
define fn00000000004095D0
fn00000000004095D0_entry:
	rsp = fp
	// succ:  l00000000004095D0
l00000000004095D0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x18<64>:word64]
	rbx = rcx
	SCZO = cond(Mem0[rax:byte] - 0x4A<8>)
	branch Test(EQ,Z) l0000000000409610
	// succ:  l00000000004095E2 l0000000000409610
l00000000004095E2:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000409618
	// succ:  l00000000004095E8 l0000000000409618
l00000000004095E8:
	rcx = rbx
	call fn0000000000409500 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r9 = rax
	branch Test(EQ,Z) l0000000000409630
	// succ:  l00000000004095F8 l0000000000409630
l00000000004095F8:
	r8 = rsi
	edx = 0x29<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000409609_thunk_fn0000000000403730
l0000000000409609_thunk_fn0000000000403730:
	call fn0000000000403730 (retsize: 0;)
	return
	// succ:  fn00000000004095D0_exit
l0000000000409610:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x18<64>:word64] = rax
	// succ:  l0000000000409618
l0000000000409618:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rsi = rax
	branch Test(NE,Z) l00000000004095E8
	// succ:  l0000000000409628 l00000000004095E8
l0000000000409628:
	// succ:  l0000000000409630
l0000000000409630:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004095D0_exit
fn00000000004095D0_exit:


// fn0000000000409640
// Return size: 8
define fn0000000000409640
fn0000000000409640_entry:
	rsp = fp
	// succ:  l0000000000409640
l0000000000409640:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x46<8>)
	branch Test(EQ,Z) l0000000000409660
	// succ:  l000000000040964E l0000000000409660
l000000000040964E:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000409640_exit
l0000000000409660:
	rdx = rax + 1<64>
	Mem0[rcx + 0x18<64>:word64] = rdx
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x59<8>)
	branch Test(NE,Z) l0000000000409676
	// succ:  l000000000040966E l0000000000409676
l000000000040966E:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x18<64>:word64] = rax
	// succ:  l0000000000409676
l0000000000409676:
	rbx = rcx
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn00000000004095D0 (retsize: 8;)
	rcx = rbx
	rdx = rax
	call fn0000000000403930 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rdx:byte] - 0x45<8>)
	branch Test(NE,Z) l000000000040964E
	// succ:  l0000000000409697 l000000000040964E
l0000000000409697:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x18<64>:word64] = rdx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000409640_exit
fn0000000000409640_exit:


// fn00000000004096B0
// Return size: 8
define fn00000000004096B0
fn00000000004096B0_entry:
	rsp = fp
	// succ:  l00000000004096B0
l00000000004096B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0<8>)
	branch Test(EQ,Z) l0000000000409750
	// succ:  l00000000004096C4 l0000000000409750
l00000000004096C4:
	rdx = rax + 1<64>
	Mem0[rcx + 0x18<64>:word64] = rdx
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0<8>)
	ebx = CONVERT(Mem0[rax:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(EQ,Z) l00000000004097C0
	// succ:  l00000000004096D9 l00000000004097C0
l00000000004096D9:
	rdx = rax + 2<64>
	SCZO = cond(bl - 0x76<8>)
	rdi = rcx
	Mem0[rcx + 0x18<64>:word64] = rdx
	esi = CONVERT(Mem0[rax + 1<64>:byte], byte, word32)
	rsi = CONVERT(esi, word32, uint64)
	branch Test(NE,Z) l00000000004097C4
	// succ:  l00000000004096F1 l00000000004097C4
l00000000004096F1:
	eax = SLICE(rsi - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 9<8>)
	branch Test(UGT,CZ) l0000000000409754
	// succ:  l00000000004096F8 l0000000000409754
l00000000004096F8:
	call fn0000000000403E30 (retsize: 8;)
	ecx = Mem0[rdi + 0x28<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx - Mem0[rdi + 0x2C<64>:word32])
	branch Test(GE,SO) l00000000004097B3
	// succ:  l0000000000409709 l00000000004097B3
l0000000000409709:
	rdx = CONVERT(ecx, word32, int64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	SZO = cond(rax & rax)
	C = false
	r8 = rdx + rdx * 2<64>
	rdx = Mem0[rdi + 0x20<64>:word64]
	Mem0[rdi + 0x28<64>:word32] = ecx
	rdx = rdx + r8 * 8<64>
	branch Test(EQ,Z) l00000000004097B3
	// succ:  l0000000000409727 l00000000004097B3
l0000000000409727:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l00000000004097B3
	// succ:  l0000000000409730 l00000000004097B3
l0000000000409730:
	ecx = CONVERT(sil, byte, int32)
	Mem0[rdx + 0x10<64>:word64] = rax
	Mem0[rdx:word32] = 0x32<32>
	ecx = ecx - 0x30<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	rax = rdx
	Mem0[rdx + 8<64>:word32] = ecx
	goto l00000000004097B5
	// succ:  l00000000004097B5
l0000000000409750:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	// succ:  l0000000000409754
l0000000000409754:
	r9d = 0x3D<32>
	r9 = CONVERT(r9d, word32, uint64)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rdi = 0x000000000048F980<p64>
	goto l0000000000409772
	// succ:  l0000000000409772
l0000000000409765:
	SCZO = cond(r8b - bl)
	branch Test(LE,SZO) l00000000004097AB
	// succ:  l000000000040976A l00000000004097AB
l000000000040976A:
	r9d = eax
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(edx - r9d)
	branch Test(EQ,Z) l00000000004097B3
	// succ:  l0000000000409772 l00000000004097B3
l0000000000409772:
	eax = r9d
	rax = CONVERT(eax, word32, uint64)
	eax = eax - edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d >>u 0x1F<32>
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	eax = eax + r8d
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax >> 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax + edx
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	r8 = CONVERT(eax, word32, int64)
	r8 = r8 + r8 * 2<64>
	r11 = rdi + r8 * 8<64>
	r10 = Mem0[r11:word64]
	r8d = CONVERT(Mem0[r10:byte], byte, word32)
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(bl - r8b)
	branch Test(NE,Z) l0000000000409765
	// succ:  l000000000040979C l0000000000409765
l000000000040979C:
	r8d = CONVERT(Mem0[r10 + 1<64>:byte], byte, word32)
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(sil - r8b)
	branch Test(EQ,Z) l0000000000409810
	// succ:  l00000000004097A6 l0000000000409810
l00000000004097A6:
	SCZO = cond(r8b - sil)
	branch Test(GT,SZO) l000000000040976A
	// succ:  l00000000004097AB l000000000040976A
l00000000004097AB:
	edx = SLICE(rax + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - r9d)
	branch Test(NE,Z) l0000000000409772
	// succ:  l00000000004097B3 l0000000000409772
l00000000004097B3:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l00000000004097B5
l00000000004097B5:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004096B0_exit
l00000000004097C0:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l0000000000409754
	// succ:  l0000000000409754
l00000000004097C4:
	SCZO = cond(sil - 0x76<8>)
	branch Test(NE,Z) l0000000000409754
	// succ:  l00000000004097CE l0000000000409754
l00000000004097CE:
	SCZO = cond(bl - 0x63<8>)
	branch Test(NE,Z) l0000000000409754
	// succ:  l00000000004097D7 l0000000000409754
l00000000004097D7:
	edx = Mem0[rcx + 0x54<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	ebx = Mem0[rcx + 0x58<64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	Mem0[rcx + 0x58<64>:word32] = eax
	call fn00000000004080A0 (retsize: 8;)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rax
	edx = 0x33<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rdi
	Mem0[rdi + 0x58<64>:word32] = ebx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000409804_thunk_fn0000000000403730
l0000000000409804_thunk_fn0000000000403730:
	call fn0000000000403730 (retsize: 0;)
	return
	// succ:  fn00000000004096B0_exit
l0000000000409810:
	edx = Mem0[rcx + 0x28<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - Mem0[rcx + 0x2C<64>:word32])
	branch Test(GE,SO) l00000000004097B3
	// succ:  l0000000000409818 l00000000004097B3
l0000000000409818:
	rax = CONVERT(edx, word32, int64)
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r8 = rax + rax * 2<64>
	rax = Mem0[rcx + 0x20<64>:word64]
	Mem0[rcx + 0x28<64>:word32] = edx
	rax = rax + r8 * 8<64>
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004097B3
	// succ:  l0000000000409836 l00000000004097B3
l0000000000409836:
	Mem0[rax:word32] = 0x31<32>
	Mem0[rax + 8<64>:word64] = r11
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004096B0_exit
fn00000000004096B0_exit:


// fn0000000000409850
// Return size: 8
define fn0000000000409850
fn0000000000409850_entry:
	rsp = fp
	// succ:  l0000000000409850
l0000000000409850:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	r8 = Mem0[rcx + 0x18<64>:word64]
	rbx = rcx
	eax = CONVERT(Mem0[r8:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 0x30<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 9<8>)
	branch Test(ULE,CZ) l0000000000409920
	// succ:  l000000000040986F l0000000000409920
l000000000040986F:
	edx = SLICE(rax - 0x61<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x19<8>)
	branch Test(ULE,CZ) l0000000000409971
	// succ:  l000000000040987B l0000000000409971
l000000000040987B:
	edx = SLICE(rax - 0x43<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 1<8>)
	branch Test(ULE,CZ) l0000000000409A50
	// succ:  l0000000000409887 l0000000000409A50
l0000000000409887:
	SCZO = cond(al - 0x4C<8>)
	branch Test(EQ,Z) l0000000000409AC0
	// succ:  l000000000040988F l0000000000409AC0
l000000000040988F:
	SCZO = cond(al - 0x55<8>)
	branch Test(NE,Z) l0000000000409AB1
	// succ:  l0000000000409897 l0000000000409AB1
l0000000000409897:
	eax = CONVERT(Mem0[r8 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x6C<8>)
	branch Test(EQ,Z) l0000000000409990
	// succ:  l00000000004098A4 l0000000000409990
l00000000004098A4:
	SCZO = cond(al - 0x74<8>)
	branch Test(NE,Z) l0000000000409AB1
	// succ:  l00000000004098AC l0000000000409AB1
l00000000004098AC:
	rdx = r8 + 1<64>
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	Mem0[rcx + 0x18<64>:word64] = rdx
	ecx = CONVERT(Mem0[r8 + 1<64>:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 0x74<8>)
	branch Test(NE,Z) l000000000040992F
	// succ:  l00000000004098C0 l000000000040992F
l00000000004098C0:
	r8 = r8 + 2<64>
	SCZO = cond(r8)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = r8
	call fn0000000000403D30 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000409987
	// succ:  l00000000004098D8 l0000000000409987
l00000000004098D8:
	edx = Mem0[rbx + 0x28<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - Mem0[rbx + 0x2C<64>:word32])
	branch Test(GE,SO) l0000000000409910
	// succ:  l00000000004098E0 l0000000000409910
l00000000004098E0:
	rcx = CONVERT(edx, word32, int64)
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r8 = rcx + rcx * 2<64>
	rcx = Mem0[rbx + 0x20<64>:word64]
	Mem0[rbx + 0x28<64>:word32] = edx
	rbp = rcx + r8 * 8<64>
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l0000000000409910
	// succ:  l00000000004098FA l0000000000409910
l00000000004098FA:
	Mem0[rbp + 8<64>:word32] = eax
	eax = Mem0[rbx + 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - Mem0[rbx + 0x3C<64>:word32])
	Mem0[rbp + 0<64>:word32] = 0x46<32>
	branch Test(LT,SO) l0000000000409A2C
	// succ:  l0000000000409910 l0000000000409A2C
l0000000000409910:
	rdx = Mem0[rbx + 0x18<64>:word64]
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	ecx = CONVERT(Mem0[rdx:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	goto l000000000040992F
	// succ:  l000000000040992F
l0000000000409920:
	call fn0000000000403E30 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	rbp = rax
	ecx = CONVERT(Mem0[rdx:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	// succ:  l000000000040992F
l000000000040992F:
	SCZO = cond(cl - 0x42<8>)
	rax = rbp
	branch Test(EQ,Z) l0000000000409940
	// succ:  l0000000000409937 l0000000000409940
l0000000000409937:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000409850_exit
l0000000000409940:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	call fn0000000000403E30 (retsize: 8;)
	r8 = rbp
	edx = 0x4A<32>
	rdx = CONVERT(edx, word32, uint64)
	r9 = rax
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	rbp = rax
	SCZO = cond(Mem0[rdx:byte] - 0x42<8>)
	branch Test(EQ,Z) l0000000000409940
	// succ:  l000000000040996F l0000000000409940
l000000000040996F:
	goto l0000000000409937
	// succ:  l0000000000409937
l0000000000409971:
	call fn00000000004096B0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l0000000000409987
	// succ:  l000000000040997E l0000000000409987
l000000000040997E:
	SCZO = cond(Mem0[rax:word32] - 0x31<32>)
	branch Test(EQ,Z) l0000000000409AF0
	// succ:  l0000000000409987 l0000000000409AF0
l0000000000409987:
	rdx = Mem0[rbx + 0x18<64>:word64]
	ecx = CONVERT(Mem0[rdx:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	goto l000000000040992F
	// succ:  l000000000040992F
l0000000000409990:
	rdx = r8 + 1<64>
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	Mem0[rcx + 0x18<64>:word64] = rdx
	ecx = CONVERT(Mem0[r8 + 1<64>:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 0x6C<8>)
	branch Test(NE,Z) l000000000040992F
	// succ:  l00000000004099A4 l000000000040992F
l00000000004099A4:
	r8 = r8 + 2<64>
	SCZO = cond(r8)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = r8
	call fn0000000000409500 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	SZO = cond(rax & rax)
	C = false
	rsi = rax
	ecx = CONVERT(Mem0[rdx:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(EQ,Z) l000000000040992F
	// succ:  l00000000004099C7 l000000000040992F
l00000000004099C7:
	SCZO = cond(cl - 0x45<8>)
	branch Test(NE,Z) l000000000040992F
	// succ:  l00000000004099D0 l000000000040992F
l00000000004099D0:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	call fn0000000000403D30 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000409910
	// succ:  l00000000004099E8 l0000000000409910
l00000000004099E8:
	edx = Mem0[rbx + 0x28<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - Mem0[rbx + 0x2C<64>:word32])
	branch Test(GE,SO) l0000000000409910
	// succ:  l00000000004099F4 l0000000000409910
l00000000004099F4:
	rcx = CONVERT(edx, word32, int64)
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r8 = rcx + rcx * 2<64>
	rcx = Mem0[rbx + 0x20<64>:word64]
	Mem0[rbx + 0x28<64>:word32] = edx
	rbp = rcx + r8 * 8<64>
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l0000000000409910
	// succ:  l0000000000409A12 l0000000000409910
l0000000000409A12:
	Mem0[rbp + 8<64>:word64] = rsi
	Mem0[rbp + 0x10<64>:word32] = eax
	eax = Mem0[rbx + 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - Mem0[rbx + 0x3C<64>:word32])
	Mem0[rbp + 0<64>:word32] = 0x44<32>
	branch Test(GE,SO) l0000000000409910
	// succ:  l0000000000409A2C l0000000000409910
l0000000000409A2C:
	rdx = Mem0[rbx + 0x30<64>:word64]
	rcx = CONVERT(eax, word32, int64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rdx + rcx * 8<64>:word64] = rbp
	rdx = Mem0[rbx + 0x18<64>:word64]
	Mem0[rbx + 0x38<64>:word32] = eax
	ecx = CONVERT(Mem0[rdx:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	goto l000000000040992F
	// succ:  l000000000040992F
l0000000000409A50:
	r9 = Mem0[rcx + 0x48<64>:word64]
	SZO = cond(r9 & r9)
	C = false
	branch Test(EQ,Z) l0000000000409AA5
	// succ:  l0000000000409A59 l0000000000409AA5
l0000000000409A59:
	edx = Mem0[r9:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000409AA0
	// succ:  l0000000000409A60 l0000000000409AA0
l0000000000409A60:
	eax = Mem0[r9 + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	v26 = Mem0[rbx + 0x50<64>:word32] + eax
	Mem0[rbx + 0x50<64>:word32] = v26
	SCZO = cond(v26)
	ecx = CONVERT(Mem0[r8:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 0x43<8>)
	branch Test(EQ,Z) l0000000000409BC0
	// succ:  l0000000000409A74 l0000000000409BC0
l0000000000409A74:
	SCZO = cond(cl - 0x44<8>)
	branch Test(NE,Z) l0000000000409BB4
	// succ:  l0000000000409A7D l0000000000409BB4
l0000000000409A7D:
	eax = CONVERT(Mem0[r8 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 0x30<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 5<8>)
	branch Test(UGT,CZ) l0000000000409AB1
	// succ:  l0000000000409A89 l0000000000409AB1
l0000000000409A89:
	rdx = 0x000000000048F2D0<p64>
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(Mem0[rdx + rax * 4<64>:word32], word32, int64)
	rdx = rdx + rax
	SCZO = cond(rdx)
	call rdx (retsize: 0;)
	return
	// succ:  fn0000000000409850_exit
l0000000000409AA0:
	SCZO = cond(edx - 0x18<32>)
	branch Test(EQ,Z) l0000000000409A60
	// succ:  l0000000000409AA5 l0000000000409A60
l0000000000409AA5:
	SCZO = cond(al - 0x43<8>)
	branch Test(EQ,Z) l0000000000409BC0
	// succ:  l0000000000409AAD l0000000000409BC0
l0000000000409AAD:
	SCZO = cond(al - 0x44<8>)
	branch Test(EQ,Z) l0000000000409A7D
	// succ:  l0000000000409AB1 l0000000000409A7D
l0000000000409AB1:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000409850_exit
l0000000000409AC0:
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	Mem0[rcx + 0x18<64>:word64] = r8
	call fn0000000000403E30 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l0000000000409AB1
	// succ:  l0000000000409AD5 l0000000000409AB1
l0000000000409AD5:
	rcx = rbx
	call fn0000000000403DF0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000409987
	// succ:  l0000000000409AE5 l0000000000409987
l0000000000409AE5:
	goto l0000000000409AB1
	// succ:  l0000000000409AB1
l0000000000409AF0:
	rdx = Mem0[rax + 8<64>:word64]
	rdi = 0x000000000048F2CC<p64>
	ecx = 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	eax = Mem0[rdx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax + Mem0[rbx + 0x50<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rsi = Mem0[rdx:word64]
	eax = eax + 7<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbx + 0x50<64>:word32] = eax
	// succ:  l0000000000409B0F
l0000000000409B0F:
	branch rcx == 0<64> l0000000000409B11
	// succ:  l0000000000409B0F_1 l0000000000409B11
l0000000000409B0F_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000409B0F
	// succ:  l0000000000409B11 l0000000000409B0F
l0000000000409B11:
	branch Test(NE,Z) l0000000000409987
	// succ:  l0000000000409B17 l0000000000409987
l0000000000409B17:
	rcx = rbx
	call fn0000000000403E30 (retsize: 8;)
	r8 = rbp
	r9 = rax
	edx = 0x35<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rbp = rax
	goto l0000000000409987
	// succ:  l0000000000409987
l0000000000409BB4:
	rdx = r8
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	goto l000000000040992F
	// succ:  l000000000040992F
l0000000000409BC0:
	eax = CONVERT(Mem0[r8 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 0x31<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 4<8>)
	branch Test(UGT,CZ) l0000000000409AB1
	// succ:  l0000000000409BD0 l0000000000409AB1
l0000000000409BD0:
	rdx = 0x000000000048F2E8<p64>
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(Mem0[rdx + rax * 4<64>:word32], word32, int64)
	rdx = rdx + rax
	SCZO = cond(rdx)
	call rdx (retsize: 0;)
	return
	// succ:  fn0000000000409850_exit
fn0000000000409850_exit:


// fn0000000000409C60
// Return size: 8
define fn0000000000409C60
fn0000000000409C60_entry:
	rsp = fp
	// succ:  l0000000000409C60
l0000000000409C60:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x68<64>
	SCZO = cond(rsp)
	r8 = Mem0[rcx + 0x18<64>:word64]
	r14 = Mem0[rcx + 0x48<64>:word64]
	eax = CONVERT(Mem0[r8:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 0x49<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 1<8>)
	branch Test(UGT,CZ) l0000000000409E2D
	// succ:  l0000000000409C87 l0000000000409E2D
l0000000000409C87:
	rdx = r8 + 1<64>
	Mem0[rcx + 0x18<64>:word64] = rdx
	eax = CONVERT(Mem0[r8 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x45<8>)
	branch Test(EQ,Z) l000000000040A1E6
	// succ:  l0000000000409C9C l000000000040A1E6
l0000000000409C9C:
	rbx = rcx
	Mem0[rsp + 0x58<64>:word64] = 0<64>
	rbp = rsp + 0x58<64>
	r15d = 3<32>
	r15 = CONVERT(r15d, word32, uint64)
	goto l0000000000409D04
	// succ:  l0000000000409D04
l0000000000409CB5:
	eax = eax - 0x49<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 1<8>)
	branch Test(UGT,CZ) l0000000000409DE1
	// succ:  l0000000000409CC0 l0000000000409DE1
l0000000000409CC0:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rax
	// succ:  l0000000000409CCB
l0000000000409CCB:
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l0000000000409E2D
	// succ:  l0000000000409CD4 l0000000000409E2D
l0000000000409CD4:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = 0x2F<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	Mem0[rbp + 0<64>:word64] = rax
	branch Test(EQ,Z) l0000000000409E2D
	// succ:  l0000000000409CF1 l0000000000409E2D
l0000000000409CF1:
	rdx = Mem0[rbx + 0x18<64>:word64]
	rbp = rax + 0x10<64>
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x45<8>)
	branch Test(EQ,Z) l0000000000409F64
	// succ:  l0000000000409D04 l0000000000409F64
l0000000000409D04:
	SCZO = cond(al - 0x4C<8>)
	branch Test(EQ,Z) l0000000000409DD1
	// succ:  l0000000000409D0C l0000000000409DD1
l0000000000409D0C:
	branch Test(LE,SZO) l0000000000409CB5
	// succ:  l0000000000409D0E l0000000000409CB5
l0000000000409D0E:
	SCZO = cond(al - 0x58<8>)
	branch Test(NE,Z) l0000000000409DE1
	// succ:  l0000000000409D16 l0000000000409DE1
l0000000000409D16:
	rcx = rdx + 1<64>
	r12d = Mem0[rbx + 0x54<64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	Mem0[rbx + 0x54<64>:word32] = 1<32>
	Mem0[rbx + 0x18<64>:word64] = rcx
	eax = CONVERT(Mem0[rdx + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x4C<8>)
	branch Test(EQ,Z) l0000000000409F80
	// succ:  l0000000000409D35 l0000000000409F80
l0000000000409D35:
	SCZO = cond(al - 0x54<8>)
	branch Test(EQ,Z) l0000000000409F94
	// succ:  l0000000000409D3D l0000000000409F94
l0000000000409D3D:
	SCZO = cond(al - 0x73<8>)
	branch Test(EQ,Z) l0000000000409EC1
	// succ:  l0000000000409D45 l0000000000409EC1
l0000000000409D45:
	SCZO = cond(al - 0x66<8>)
	branch Test(EQ,Z) l0000000000409F04
	// succ:  l0000000000409D4D l0000000000409F04
l0000000000409D4D:
	r8d = SLICE(rax - 0x30<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8b - 9<8>)
	branch Test(ULE,CZ) l0000000000409E03
	// succ:  l0000000000409D5B l0000000000409E03
l0000000000409D5B:
	SCZO = cond(al - 0x6F<8>)
	branch Test(EQ,Z) l0000000000409DF1
	// succ:  l0000000000409D63 l0000000000409DF1
l0000000000409D63:
	SCZO = cond(al - 0x74<8>)
	r8b = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(NE,Z) l000000000040B9FD
	// succ:  l0000000000409D6F l000000000040B9FD
l0000000000409D6F:
	SCZO = cond(Mem0[rdx + 2<64>:byte] - 0x6C<8>)
	branch Test(EQ,Z) l0000000000409FB0
	// succ:  l0000000000409D79 l0000000000409FB0
l0000000000409D79:
	rcx = rbx
	call fn00000000004096B0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r13 = rax
	branch Test(EQ,Z) l0000000000409EB5
	// succ:  l0000000000409D8D l0000000000409EB5
l0000000000409D8D:
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x31<32>)
	branch Test(EQ,Z) l0000000000409E50
	// succ:  l0000000000409D98 l0000000000409E50
l0000000000409D98:
	SCZO = cond(eax - 0x32<32>)
	branch Test(EQ,Z) l0000000000409FF0
	// succ:  l0000000000409DA1 l0000000000409FF0
l0000000000409DA1:
	SCZO = cond(eax - 0x33<32>)
	branch Test(NE,Z) l0000000000409EB5
	// succ:  l0000000000409DAA l0000000000409EB5
l0000000000409DAA:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(NE,Z) l000000000040A220
	// succ:  l0000000000409DB7 l000000000040A220
l0000000000409DB7:
	rax = rax + 1<64>
	SCZO = cond(rax)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040A228
	// succ:  l000000000040A228
l0000000000409DD1:
	rcx = rbx
	call fn0000000000407F20 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rax
	goto l0000000000409CCB
	// succ:  l0000000000409CCB
l0000000000409DE1:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	r8 = rax
	goto l0000000000409CCB
	// succ:  l0000000000409CCB
l0000000000409DF1:
	SCZO = cond(Mem0[rdx + 2<64>:byte] - 0x6E<8>)
	branch Test(NE,Z) l0000000000409D79
	// succ:  l0000000000409DFB l0000000000409D79
l0000000000409DFB:
	rdx = rdx + 3<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x18<64>:word64] = rdx
	// succ:  l0000000000409E03
l0000000000409E03:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rdx = Mem0[rbx + 0x18<64>:word64]
	branch Test(EQ,Z) l0000000000409EB9
	// succ:  l0000000000409E18 l0000000000409EB9
l0000000000409E18:
	SCZO = cond(Mem0[rdx:byte] - 0x49<8>)
	r8 = rax
	branch Test(EQ,Z) l000000000040A0E0
	// succ:  l0000000000409E24 l000000000040A0E0
l0000000000409E24:
	Mem0[rbx + 0x54<64>:word32] = r12d
	SCZO = cond(Mem0[rdx:byte] - 0x45<8>)
	branch Test(EQ,Z) l0000000000409E40
	// succ:  l0000000000409E2D l0000000000409E40
l0000000000409E2D:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000409E2F
l0000000000409E2F:
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000409C60_exit
l0000000000409E40:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x18<64>:word64] = rdx
	goto l0000000000409CCB
	// succ:  l0000000000409CCB
l0000000000409E50:
	r8 = Mem0[r13 + 8<64>:word64]
	rdi = 0x000000000048EDE2<p64>
	rcx = r15
	eax = Mem0[r8 + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = Mem0[r8:word64]
	eax = eax - 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	v29 = Mem0[rbx + 0x50<64>:word32] + eax
	Mem0[rbx + 0x50<64>:word32] = v29
	SCZO = cond(v29)
	rsi = rdx
	// succ:  l0000000000409E6E
l0000000000409E6E:
	branch rcx == 0<64> l0000000000409E70
	// succ:  l0000000000409E6E_1 l0000000000409E70
l0000000000409E6E_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000409E6E
	// succ:  l0000000000409E70 l0000000000409E6E
l0000000000409E70:
	branch Test(EQ,Z) l000000000040A309
	// succ:  l0000000000409E76 l000000000040A309
l0000000000409E76:
	eax = Mem0[r8 + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040A2A1
	// succ:  l0000000000409E83 l000000000040A2A1
l0000000000409E83:
	branch Test(LE,SZO) l000000000040A110
	// succ:  l0000000000409E89 l000000000040A110
l0000000000409E89:
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000040A137
	// succ:  l0000000000409E92 l000000000040A137
l0000000000409E92:
	SCZO = cond(eax - 3<32>)
	branch Test(NE,Z) l0000000000409EB5
	// succ:  l0000000000409E97 l0000000000409EB5
l0000000000409E97:
	rdi = 0x000000000048EDEB<p64>
	rsi = rdx
	rcx = r15
	// succ:  l0000000000409EA4
l0000000000409EA4:
	branch rcx == 0<64> l0000000000409EA6
	// succ:  l0000000000409EA4_2 l0000000000409EA6
l0000000000409EA4_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l0000000000409EA4
	// succ:  l0000000000409EA6 l0000000000409EA4
l0000000000409EA6:
	branch Test(EQ,Z) l000000000040A33F
	// succ:  l0000000000409EAC l000000000040A33F
l0000000000409EAC:
	SCZO = cond(Mem0[rdx:byte] - 0x6E<8>)
	branch Test(EQ,Z) l000000000040A00A
	// succ:  l0000000000409EB5 l000000000040A00A
l0000000000409EB5:
	rdx = Mem0[rbx + 0x18<64>:word64]
	// succ:  l0000000000409EB9
l0000000000409EB9:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	goto l0000000000409E24
	// succ:  l0000000000409E24
l0000000000409EC1:
	eax = CONVERT(Mem0[rdx + 2<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x72<8>)
	branch Test(EQ,Z) l000000000040A243
	// succ:  l0000000000409ECD l000000000040A243
l0000000000409ECD:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l0000000000409D79
	// succ:  l0000000000409ED5 l0000000000409D79
l0000000000409ED5:
	rdx = rdx + 3<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	call fn000000000040D230 (retsize: 8;)
	edx = 0x49<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = rax
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	r8 = rax
	goto l0000000000409E24
	// succ:  l0000000000409E24
l0000000000409F04:
	SCZO = cond(Mem0[rdx + 2<64>:byte] - 0x70<8>)
	branch Test(NE,Z) l0000000000409D79
	// succ:  l0000000000409F0E l0000000000409D79
l0000000000409F0E:
	rax = rdx + 3<64>
	Mem0[rbx + 0x18<64>:word64] = rax
	SCZO = cond(Mem0[rdx + 3<64>:byte] - 0x54<8>)
	branch Test(NE,Z) l000000000040A289
	// succ:  l0000000000409F20 l000000000040A289
l0000000000409F20:
	rdx = rdx + 4<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x18<64>:word64] = rdx
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l0000000000409F2A
l0000000000409F2A:
	eax = Mem0[rbx + 0x28<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - Mem0[rbx + 0x2C<64>:word32])
	branch Test(GE,SO) l0000000000409EB5
	// succ:  l0000000000409F32 l0000000000409EB5
l0000000000409F32:
	rcx = CONVERT(eax, word32, int64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	r8 = rcx + rcx * 2<64>
	rcx = Mem0[rbx + 0x20<64>:word64]
	Mem0[rbx + 0x28<64>:word32] = eax
	r8 = rcx + r8 * 8<64>
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l000000000040A0D0
	// succ:  l0000000000409F50 l000000000040A0D0
l0000000000409F50:
	Mem0[r8 + 8<64>:word32] = edx
	Mem0[r8:word32] = 6<32>
	rdx = Mem0[rbx + 0x18<64>:word64]
	goto l0000000000409E24
	// succ:  l0000000000409E24
l0000000000409F64:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x48<64>:word64] = r14
	rax = Mem0[rsp + 0x58<64>:word64]
	Mem0[rbx + 0x18<64>:word64] = rdx
	goto l0000000000409E2F
	// succ:  l0000000000409E2F
l0000000000409F80:
	rcx = rbx
	call fn0000000000407F20 (retsize: 8;)
	rsp = rsp + 8<64>
	rdx = Mem0[rbx + 0x18<64>:word64]
	r8 = rax
	goto l0000000000409E24
	// succ:  l0000000000409E24
l0000000000409F94:
	rcx = rbx
	call fn0000000000403D80 (retsize: 8;)
	rsp = rsp + 8<64>
	rdx = Mem0[rbx + 0x18<64>:word64]
	r8 = rax
	goto l0000000000409E24
	// succ:  l0000000000409E24
l0000000000409FB0:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(r8b & r8b)
	C = false
	branch Test(NE,Z) l000000000040A316
	// succ:  l0000000000409FBB l000000000040A316
l0000000000409FBB:
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0x18<64>:word64] = rcx
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	r8 = rsi
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	r9 = rax
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	r8 = rax
	goto l0000000000409E24
	// succ:  l0000000000409E24
l0000000000409FF0:
	eax = Mem0[r13 + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040A220
	// succ:  l0000000000409FFD l000000000040A220
l0000000000409FFD:
	branch Test(LE,SZO) l000000000040A110
	// succ:  l000000000040A003 l000000000040A110
l000000000040A003:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l0000000000409E89
	// succ:  l0000000000409E89
l000000000040A00A:
	eax = CONVERT(Mem0[rdx + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x61<8>)
	branch Test(EQ,Z) l000000000040A01A
	// succ:  l000000000040A012 l000000000040A01A
l000000000040A012:
	SCZO = cond(al - 0x77<8>)
	branch Test(NE,Z) l0000000000409EB5
	// succ:  l000000000040A01A l0000000000409EB5
l000000000040A01A:
	edx = 0x5F<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rcx = rbx
	Mem0[rsp + 0x30<64>:word64] = rax
	call fn00000000004080A0 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rax
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x45<8>)
	branch Test(EQ,Z) l000000000040A6A5
	// succ:  l000000000040A048 l000000000040A6A5
l000000000040A048:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(al - 0x70<8>)
	branch Test(EQ,Z) l000000000040A7B6
	// succ:  l000000000040A053 l000000000040A7B6
l000000000040A053:
	SCZO = cond(al - 0x69<8>)
	branch Test(NE,Z) l0000000000409E24
	// succ:  l000000000040A05B l0000000000409E24
l000000000040A05B:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x6C<8>)
	branch Test(NE,Z) l0000000000409E24
	// succ:  l000000000040A065 l0000000000409E24
l000000000040A065:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000040CB30 (retsize: 8;)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	r9 = rax
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	// succ:  l000000000040A090
l000000000040A090:
	r9 = r8
	r8 = Mem0[rsp + 0x28<64>:word64]
	edx = 0x3A<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = Mem0[rsp + 0x30<64>:word64]
	r9 = rax
	edx = 0x39<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = r13
	r9 = rax
	edx = 0x38<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	// succ:  l000000000040A0D0
l000000000040A0D0:
	rdx = Mem0[rbx + 0x18<64>:word64]
	goto l0000000000409E24
	// succ:  l0000000000409E24
l000000000040A0E0:
	rcx = rbx
	Mem0[rsp + 0x28<64>:word64] = rax
	call fn0000000000409C60 (retsize: 8;)
	r8 = Mem0[rsp + 0x28<64>:word64]
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	r9 = rax
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	r8 = rax
	goto l0000000000409E24
	// succ:  l0000000000409E24
l000000000040A110:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000409EB5
	// succ:  l000000000040A118 l0000000000409EB5
l000000000040A118:
	r8 = r13
	edx = 0x34<32>
	rdx = CONVERT(edx, word32, uint64)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	r8 = rax
	goto l0000000000409E24
	// succ:  l0000000000409E24
l000000000040A137:
	rax = Mem0[r13 + 8<64>:word64]
	rax = Mem0[rax:word64]
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x63<8>)
	branch Test(EQ,Z) l000000000040A570
	// succ:  l000000000040A148 l000000000040A570
l000000000040A148:
	rcx = rbx
	Mem0[rsp + 0x30<64>:word64] = rdx
	call fn000000000040D230 (retsize: 8;)
	rdx = Mem0[rsp + 0x30<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rax
	// succ:  l000000000040A15F
l000000000040A15F:
	rdi = 0x000000000048EDE5<p64>
	rsi = rdx
	rcx = r15
	// succ:  l000000000040A16C
l000000000040A16C:
	branch rcx == 0<64> l000000000040A16E
	// succ:  l000000000040A16C_1 l000000000040A16E
l000000000040A16C_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040A16C
	// succ:  l000000000040A16E l000000000040A16C
l000000000040A16E:
	branch Test(EQ,Z) l000000000040A32A
	// succ:  l000000000040A174 l000000000040A32A
l000000000040A174:
	rdi = 0x000000000048F0CF<p64>
	rsi = rdx
	rcx = r15
	// succ:  l000000000040A181
l000000000040A181:
	branch rcx == 0<64> l000000000040A183
	// succ:  l000000000040A181_2 l000000000040A183
l000000000040A181_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040A181
	// succ:  l000000000040A183 l000000000040A181
l000000000040A183:
	branch Test(EQ,Z) l000000000040A19A
	// succ:  l000000000040A185 l000000000040A19A
l000000000040A185:
	rdi = 0x000000000048F0D2<p64>
	rsi = rdx
	rcx = r15
	// succ:  l000000000040A192
l000000000040A192:
	branch rcx == 0<64> l000000000040A194
	// succ:  l000000000040A192_3 l000000000040A194
l000000000040A192_3:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040A192
	// succ:  l000000000040A194 l000000000040A192
l000000000040A194:
	branch Test(NE,Z) l000000000040A5A2
	// succ:  l000000000040A19A l000000000040A5A2
l000000000040A19A:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	rsi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040A682
	// succ:  l000000000040A1B2 l000000000040A682
l000000000040A1B2:
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rsi
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = r13
	edx = 0x36<32>
	rdx = CONVERT(edx, word32, uint64)
	r9 = rax
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	r8 = rax
	goto l0000000000409E24
	// succ:  l0000000000409E24
l000000000040A1E6:
	r8 = r8 + 2<64>
	SCZO = cond(r8)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = 0x2F<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rcx + 0x18<64>:word64] = r8
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rsp = rsp + 0x68<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000040A209_thunk_fn0000000000403730
l000000000040A209_thunk_fn0000000000403730:
	call fn0000000000403730 (retsize: 0;)
	return
	// succ:  fn0000000000409C60_exit
l000000000040A20E:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	// succ:  l000000000040A220
l000000000040A220:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040A228
l000000000040A228:
	r8 = r13
	r9 = rax
	edx = 0x35<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040A0D0
	// succ:  l000000000040A0D0
l000000000040A243:
	rdx = rdx + 3<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	call fn00000000004080A0 (retsize: 8;)
	rcx = rbx
	rdi = rax
	call fn0000000000409850 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	rsi = rax
	r9 = rax
	SCZO = cond(Mem0[rdx:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040A2E6
	// succ:  l000000000040A26D l000000000040A2E6
l000000000040A26D:
	r8 = rdi
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	r8 = rax
	goto l0000000000409E24
	// succ:  l0000000000409E24
l000000000040A289:
	rcx = rbx
	call fn0000000000403D30 (retsize: 8;)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l0000000000409F2A
	// succ:  l000000000040A29C l0000000000409F2A
l000000000040A29C:
	goto l0000000000409EB5
	// succ:  l0000000000409EB5
l000000000040A2A1:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x6D<8>)
	branch Test(EQ,Z) l000000000040A2B0
	// succ:  l000000000040A2A8 l000000000040A2B0
l000000000040A2A8:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l000000000040A220
	// succ:  l000000000040A2B0 l000000000040A220
l000000000040A2B0:
	SCZO = cond(al - Mem0[rdx + 1<64>:byte])
	branch Test(NE,Z) l000000000040A220
	// succ:  l000000000040A2B9 l000000000040A220
l000000000040A2B9:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040A20E
	// succ:  l000000000040A2C6 l000000000040A20E
l000000000040A2C6:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = rax
	r9 = rax
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	goto l000000000040A228
	// succ:  l000000000040A228
l000000000040A2E6:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r9 = rax
	goto l000000000040A26D
	// succ:  l000000000040A26D
l000000000040A309:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	goto l000000000040A228
	// succ:  l000000000040A228
l000000000040A316:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	rcx = Mem0[rbx + 0x18<64>:word64]
	rsi = rax
	goto l0000000000409FBB
	// succ:  l0000000000409FBB
l000000000040A32A:
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rsi = rax
	goto l000000000040A1B2
	// succ:  l000000000040A1B2
l000000000040A33F:
	rdx = Mem0[rbx + 0x18<64>:word64]
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x4C<8>)
	branch Test(EQ,Z) l000000000040AE60
	// succ:  l000000000040A34E l000000000040AE60
l000000000040A34E:
	SCZO = cond(al - 0x54<8>)
	branch Test(EQ,Z) l000000000040AE47
	// succ:  l000000000040A356 l000000000040AE47
l000000000040A356:
	SCZO = cond(al - 0x73<8>)
	branch Test(EQ,Z) l000000000040A98D
	// succ:  l000000000040A35E l000000000040A98D
l000000000040A35E:
	SCZO = cond(al - 0x66<8>)
	branch Test(EQ,Z) l000000000040A922
	// succ:  l000000000040A366 l000000000040A922
l000000000040A366:
	ecx = SLICE(rax - 0x30<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 9<8>)
	branch Test(ULE,CZ) l000000000040A776
	// succ:  l000000000040A372 l000000000040A776
l000000000040A372:
	SCZO = cond(al - 0x6F<8>)
	branch Test(EQ,Z) l000000000040A764
	// succ:  l000000000040A37A l000000000040A764
l000000000040A37A:
	SCZO = cond(al - 0x74<8>)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(EQ,Z) l000000000040A385
	// succ:  l000000000040A381 l000000000040A385
l000000000040A381:
	SCZO = cond(al - 0x69<8>)
	branch Test(NE,Z) l000000000040A38F
	// succ:  l000000000040A385 l000000000040A38F
l000000000040A385:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x6C<8>)
	branch Test(EQ,Z) l000000000040AE79
	// succ:  l000000000040A38F l000000000040AE79
l000000000040A38F:
	rcx = rbx
	call fn00000000004096B0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	Mem0[rsp + 0x28<64>:word64] = rax
	branch Test(EQ,Z) l000000000040A9EF
	// succ:  l000000000040A3A5 l000000000040A9EF
l000000000040A3A5:
	rax = Mem0[rsp + 0x28<64>:word64]
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x31<32>)
	branch Test(EQ,Z) l000000000040AF8B
	// succ:  l000000000040A3B5 l000000000040AF8B
l000000000040A3B5:
	SCZO = cond(eax - 0x32<32>)
	branch Test(EQ,Z) l000000000040AEA8
	// succ:  l000000000040A3BE l000000000040AEA8
l000000000040A3BE:
	SCZO = cond(eax - 0x33<32>)
	branch Test(NE,Z) l000000000040A9EF
	// succ:  l000000000040A3C7 l000000000040A9EF
l000000000040A3C7:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040B9E3
	// succ:  l000000000040A3D4 l000000000040B9E3
l000000000040A3D4:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040A3DC
l000000000040A3DC:
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	edx = 0x35<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000040A3E9
l000000000040A3E9:
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	// succ:  l000000000040A3FA
l000000000040A3FA:
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000040A3FD
l000000000040A3FD:
	SCZO = cond(dl - 0x4C<8>)
	branch Test(EQ,Z) l000000000040AE2E
	// succ:  l000000000040A406 l000000000040AE2E
l000000000040A406:
	SCZO = cond(dl - 0x54<8>)
	branch Test(EQ,Z) l000000000040B037
	// succ:  l000000000040A40F l000000000040B037
l000000000040A40F:
	SCZO = cond(dl - 0x73<8>)
	branch Test(EQ,Z) l000000000040A8EC
	// succ:  l000000000040A418 l000000000040A8EC
l000000000040A418:
	SCZO = cond(dl - 0x66<8>)
	branch Test(EQ,Z) l000000000040A881
	// succ:  l000000000040A421 l000000000040A881
l000000000040A421:
	ecx = SLICE(rdx - 0x30<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 9<8>)
	branch Test(ULE,CZ) l000000000040A724
	// succ:  l000000000040A42D l000000000040A724
l000000000040A42D:
	SCZO = cond(dl - 0x6F<8>)
	branch Test(EQ,Z) l000000000040A712
	// succ:  l000000000040A436 l000000000040A712
l000000000040A436:
	SCZO = cond(dl - 0x74<8>)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(EQ,Z) l000000000040A443
	// succ:  l000000000040A43E l000000000040A443
l000000000040A43E:
	SCZO = cond(dl - 0x69<8>)
	branch Test(NE,Z) l000000000040A44D
	// succ:  l000000000040A443 l000000000040A44D
l000000000040A443:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x6C<8>)
	branch Test(EQ,Z) l000000000040AABD
	// succ:  l000000000040A44D l000000000040AABD
l000000000040A44D:
	rcx = rbx
	call fn00000000004096B0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	Mem0[rsp + 0x28<64>:word64] = rax
	branch Test(EQ,Z) l000000000040A9C1
	// succ:  l000000000040A463 l000000000040A9C1
l000000000040A463:
	rax = Mem0[rsp + 0x28<64>:word64]
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x31<32>)
	branch Test(EQ,Z) l000000000040AAE9
	// succ:  l000000000040A473 l000000000040AAE9
l000000000040A473:
	SCZO = cond(eax - 0x32<32>)
	branch Test(EQ,Z) l000000000040AFE1
	// succ:  l000000000040A47C l000000000040AFE1
l000000000040A47C:
	SCZO = cond(eax - 0x33<32>)
	branch Test(NE,Z) l000000000040A9C1
	// succ:  l000000000040A485 l000000000040A9C1
l000000000040A485:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040B753
	// succ:  l000000000040A492 l000000000040B753
l000000000040A492:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040A49A
l000000000040A49A:
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	edx = 0x35<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000040A4A7
l000000000040A4A7:
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	// succ:  l000000000040A4B8
l000000000040A4B8:
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000040A4BB
l000000000040A4BB:
	SCZO = cond(dl - 0x4C<8>)
	branch Test(EQ,Z) l000000000040AAAD
	// succ:  l000000000040A4C4 l000000000040AAAD
l000000000040A4C4:
	SCZO = cond(dl - 0x54<8>)
	branch Test(EQ,Z) l000000000040AA9D
	// succ:  l000000000040A4CD l000000000040AA9D
l000000000040A4CD:
	SCZO = cond(dl - 0x73<8>)
	branch Test(EQ,Z) l000000000040A840
	// succ:  l000000000040A4D6 l000000000040A840
l000000000040A4D6:
	SCZO = cond(dl - 0x66<8>)
	branch Test(EQ,Z) l000000000040A7DD
	// succ:  l000000000040A4DF l000000000040A7DD
l000000000040A4DF:
	ecx = SLICE(rdx - 0x30<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 9<8>)
	branch Test(ULE,CZ) l000000000040A6C7
	// succ:  l000000000040A4EB l000000000040A6C7
l000000000040A4EB:
	SCZO = cond(dl - 0x6F<8>)
	branch Test(EQ,Z) l000000000040A6B5
	// succ:  l000000000040A4F4 l000000000040A6B5
l000000000040A4F4:
	SCZO = cond(dl - 0x74<8>)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(EQ,Z) l000000000040A501
	// succ:  l000000000040A4FC l000000000040A501
l000000000040A4FC:
	SCZO = cond(dl - 0x69<8>)
	branch Test(NE,Z) l000000000040A50B
	// succ:  l000000000040A501 l000000000040A50B
l000000000040A501:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x6C<8>)
	branch Test(EQ,Z) l000000000040B000
	// succ:  l000000000040A50B l000000000040B000
l000000000040A50B:
	rcx = rbx
	call fn00000000004096B0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	Mem0[rsp + 0x38<64>:word64] = rax
	branch Test(EQ,Z) l000000000040A9E7
	// succ:  l000000000040A521 l000000000040A9E7
l000000000040A521:
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x31<32>)
	branch Test(EQ,Z) l000000000040AC08
	// succ:  l000000000040A52C l000000000040AC08
l000000000040A52C:
	SCZO = cond(eax - 0x32<32>)
	branch Test(EQ,Z) l000000000040AD43
	// succ:  l000000000040A535 l000000000040AD43
l000000000040A535:
	SCZO = cond(eax - 0x33<32>)
	branch Test(NE,Z) l000000000040A9E7
	// succ:  l000000000040A53E l000000000040A9E7
l000000000040A53E:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040BAE1
	// succ:  l000000000040A54B l000000000040BAE1
l000000000040A54B:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040A553
l000000000040A553:
	r8 = Mem0[rsp + 0x38<64>:word64]
	r9 = rax
	edx = 0x35<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040A090
	// succ:  l000000000040A090
l000000000040A570:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = SLICE(rax - 0x72<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 1<8>)
	branch Test(ULE,CZ) l000000000040A586
	// succ:  l000000000040A57B l000000000040A586
l000000000040A57B:
	eax = eax - 0x63<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 1<8>)
	branch Test(UGT,CZ) l000000000040A148
	// succ:  l000000000040A586 l000000000040A148
l000000000040A586:
	rcx = rbx
	Mem0[rsp + 0x30<64>:word64] = rdx
	call fn00000000004080A0 (retsize: 8;)
	rdx = Mem0[rsp + 0x30<64>:word64]
	Mem0[rsp + 0x28<64>:word64] = rax
	goto l000000000040A15F
	// succ:  l000000000040A15F
l000000000040A5A2:
	rdx = Mem0[rbx + 0x18<64>:word64]
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x4C<8>)
	branch Test(EQ,Z) l000000000040B177
	// succ:  l000000000040A5B1 l000000000040B177
l000000000040A5B1:
	SCZO = cond(al - 0x54<8>)
	branch Test(EQ,Z) l000000000040B070
	// succ:  l000000000040A5B9 l000000000040B070
l000000000040A5B9:
	SCZO = cond(al - 0x73<8>)
	branch Test(EQ,Z) l000000000040AA04
	// succ:  l000000000040A5C1 l000000000040AA04
l000000000040A5C1:
	SCZO = cond(al - 0x66<8>)
	branch Test(EQ,Z) l000000000040AA43
	// succ:  l000000000040A5C9 l000000000040AA43
l000000000040A5C9:
	ecx = SLICE(rax - 0x30<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 9<8>)
	branch Test(ULE,CZ) l000000000040A661
	// succ:  l000000000040A5D5 l000000000040A661
l000000000040A5D5:
	SCZO = cond(al - 0x6F<8>)
	branch Test(EQ,Z) l000000000040A653
	// succ:  l000000000040A5D9 l000000000040A653
l000000000040A5D9:
	SCZO = cond(al - 0x74<8>)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(EQ,Z) l000000000040A5E4
	// succ:  l000000000040A5E0 l000000000040A5E4
l000000000040A5E0:
	SCZO = cond(al - 0x69<8>)
	branch Test(NE,Z) l000000000040A5EE
	// succ:  l000000000040A5E4 l000000000040A5EE
l000000000040A5E4:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x6C<8>)
	branch Test(EQ,Z) l000000000040B080
	// succ:  l000000000040A5EE l000000000040B080
l000000000040A5EE:
	rcx = rbx
	call fn00000000004096B0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	Mem0[rsp + 0x30<64>:word64] = rax
	branch Test(EQ,Z) l000000000040AE27
	// succ:  l000000000040A604 l000000000040AE27
l000000000040A604:
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x31<32>)
	branch Test(EQ,Z) l000000000040B4D0
	// succ:  l000000000040A60F l000000000040B4D0
l000000000040A60F:
	SCZO = cond(eax - 0x32<32>)
	branch Test(EQ,Z) l000000000040B2C6
	// succ:  l000000000040A618 l000000000040B2C6
l000000000040A618:
	SCZO = cond(eax - 0x33<32>)
	branch Test(NE,Z) l000000000040AE27
	// succ:  l000000000040A621 l000000000040AE27
l000000000040A621:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040BB4E
	// succ:  l000000000040A62E l000000000040BB4E
l000000000040A62E:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040A636
l000000000040A636:
	r8 = Mem0[rsp + 0x30<64>:word64]
	r9 = rax
	edx = 0x35<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040A1B2
	// succ:  l000000000040A1B2
l000000000040A653:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040A5EE
	// succ:  l000000000040A659 l000000000040A5EE
l000000000040A659:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x18<64>:word64] = rdx
	// succ:  l000000000040A661
l000000000040A661:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rsi = rax
	branch Test(EQ,Z) l000000000040AE27
	// succ:  l000000000040A675 l000000000040AE27
l000000000040A675:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(NE,Z) l000000000040A1B2
	// succ:  l000000000040A682 l000000000040A1B2
l000000000040A682:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040A1B2
	// succ:  l000000000040A1B2
l000000000040A6A5:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	Mem0[rbx + 0x18<64>:word64] = rdx
	goto l000000000040A090
	// succ:  l000000000040A090
l000000000040A6B5:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040A50B
	// succ:  l000000000040A6BF l000000000040A50B
l000000000040A6BF:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	// succ:  l000000000040A6C7
l000000000040A6C7:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r8 = rax
	branch Test(EQ,Z) l000000000040A090
	// succ:  l000000000040A6DB l000000000040A090
l000000000040A6DB:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(NE,Z) l000000000040A090
	// succ:  l000000000040A6E8 l000000000040A090
l000000000040A6E8:
	rcx = rbx
	Mem0[rsp + 0x38<64>:word64] = r8
	call fn0000000000409C60 (retsize: 8;)
	r8 = Mem0[rsp + 0x38<64>:word64]
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040A090
	// succ:  l000000000040A090
l000000000040A712:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040A44D
	// succ:  l000000000040A71C l000000000040A44D
l000000000040A71C:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	// succ:  l000000000040A724
l000000000040A724:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	Mem0[rsp + 0x28<64>:word64] = rax
	SZO = cond(rax & rax)
	C = false
	rax = Mem0[rbx + 0x18<64>:word64]
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	branch Test(EQ,Z) l000000000040A4BB
	// succ:  l000000000040A741 l000000000040A4BB
l000000000040A741:
	SCZO = cond(dl - 0x49<8>)
	branch Test(NE,Z) l000000000040A4BB
	// succ:  l000000000040A74A l000000000040A4BB
l000000000040A74A:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A4A7
	// succ:  l000000000040A4A7
l000000000040A764:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040A38F
	// succ:  l000000000040A76E l000000000040A38F
l000000000040A76E:
	rax = rdx + 2<64>
	Mem0[rbx + 0x18<64>:word64] = rax
	// succ:  l000000000040A776
l000000000040A776:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	Mem0[rsp + 0x30<64>:word64] = rax
	SZO = cond(rax & rax)
	C = false
	rax = Mem0[rbx + 0x18<64>:word64]
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	branch Test(EQ,Z) l000000000040A3FD
	// succ:  l000000000040A793 l000000000040A3FD
l000000000040A793:
	SCZO = cond(dl - 0x49<8>)
	branch Test(NE,Z) l000000000040A3FD
	// succ:  l000000000040A79C l000000000040A3FD
l000000000040A79C:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = Mem0[rsp + 0x30<64>:word64]
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A3E9
	// succ:  l000000000040A3E9
l000000000040A7B6:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x69<8>)
	branch Test(NE,Z) l0000000000409E24
	// succ:  l000000000040A7C0 l0000000000409E24
l000000000040A7C0:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000040CB30 (retsize: 8;)
	r8 = rax
	goto l000000000040A090
	// succ:  l000000000040A090
l000000000040A7DD:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x70<8>)
	branch Test(NE,Z) l000000000040A50B
	// succ:  l000000000040A7E7 l000000000040A50B
l000000000040A7E7:
	rdx = rax + 2<64>
	Mem0[rbx + 0x18<64>:word64] = rdx
	SCZO = cond(Mem0[rax + 2<64>:byte] - 0x54<8>)
	branch Test(NE,Z) l000000000040A9D6
	// succ:  l000000000040A7F9 l000000000040A9D6
l000000000040A7F9:
	rax = rax + 3<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000040A803
l000000000040A803:
	edx = Mem0[rbx + 0x28<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(edx - Mem0[rbx + 0x2C<64>:word32])
	branch Test(GE,SO) l000000000040A090
	// succ:  l000000000040A812 l000000000040A090
l000000000040A812:
	rcx = CONVERT(edx, word32, int64)
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r8 = rcx + rcx * 2<64>
	rcx = Mem0[rbx + 0x20<64>:word64]
	Mem0[rbx + 0x28<64>:word32] = edx
	r8 = rcx + r8 * 8<64>
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l000000000040A090
	// succ:  l000000000040A830 l000000000040A090
l000000000040A830:
	Mem0[r8:word32] = 6<32>
	Mem0[r8 + 8<64>:word32] = eax
	goto l000000000040A090
	// succ:  l000000000040A090
l000000000040A840:
	edx = CONVERT(Mem0[rax + 1<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x72<8>)
	branch Test(EQ,Z) l000000000040B280
	// succ:  l000000000040A84D l000000000040B280
l000000000040A84D:
	SCZO = cond(dl - 0x70<8>)
	branch Test(NE,Z) l000000000040A50B
	// succ:  l000000000040A856 l000000000040A50B
l000000000040A856:
	rax = rax + 2<64>
	SCZO = cond(rax)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040D230 (retsize: 8;)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rax
	edx = 0x49<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040A090
	// succ:  l000000000040A090
l000000000040A881:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x70<8>)
	branch Test(NE,Z) l000000000040A44D
	// succ:  l000000000040A88B l000000000040A44D
l000000000040A88B:
	rdx = rax + 2<64>
	Mem0[rbx + 0x18<64>:word64] = rdx
	SCZO = cond(Mem0[rax + 2<64>:byte] - 0x54<8>)
	branch Test(NE,Z) l000000000040B469
	// succ:  l000000000040A89D l000000000040B469
l000000000040A89D:
	rax = rax + 3<64>
	SCZO = cond(rax)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x18<64>:word64] = rax
	// succ:  l000000000040A8A7
l000000000040A8A7:
	ecx = Mem0[rbx + 0x28<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx - Mem0[rbx + 0x2C<64>:word32])
	branch Test(GE,SO) l000000000040A9C5
	// succ:  l000000000040A8B3 l000000000040A9C5
l000000000040A8B3:
	r8 = CONVERT(ecx, word32, int64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r8 + r8 * 2<64>
	r8 = Mem0[rbx + 0x20<64>:word64]
	Mem0[rbx + 0x28<64>:word32] = ecx
	rdi = r8 + r9 * 8<64>
	SZO = cond(rdi & rdi)
	C = false
	Mem0[rsp + 0x28<64>:word64] = rdi
	branch Test(EQ,Z) l000000000040A4B8
	// succ:  l000000000040A8D6 l000000000040A4B8
l000000000040A8D6:
	rdi = Mem0[rsp + 0x28<64>:word64]
	Mem0[rdi:word32] = 6<32>
	Mem0[rdi + 8<64>:word32] = edx
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A4BB
	// succ:  l000000000040A4BB
l000000000040A8EC:
	edx = CONVERT(Mem0[rax + 1<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x72<8>)
	branch Test(EQ,Z) l000000000040B13C
	// succ:  l000000000040A8F9 l000000000040B13C
l000000000040A8F9:
	SCZO = cond(dl - 0x70<8>)
	branch Test(NE,Z) l000000000040A44D
	// succ:  l000000000040A902 l000000000040A44D
l000000000040A902:
	rax = rax + 2<64>
	SCZO = cond(rax)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040D230 (retsize: 8;)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rax
	edx = 0x49<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A4A7
	// succ:  l000000000040A4A7
l000000000040A922:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x70<8>)
	branch Test(NE,Z) l000000000040A38F
	// succ:  l000000000040A92C l000000000040A38F
l000000000040A92C:
	rax = rdx + 2<64>
	Mem0[rbx + 0x18<64>:word64] = rax
	SCZO = cond(Mem0[rdx + 2<64>:byte] - 0x54<8>)
	branch Test(NE,Z) l000000000040B050
	// succ:  l000000000040A93E l000000000040B050
l000000000040A93E:
	rax = rdx + 3<64>
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x18<64>:word64] = rax
	// succ:  l000000000040A948
l000000000040A948:
	ecx = Mem0[rbx + 0x28<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx - Mem0[rbx + 0x2C<64>:word32])
	branch Test(GE,SO) l000000000040A9F3
	// succ:  l000000000040A954 l000000000040A9F3
l000000000040A954:
	r8 = CONVERT(ecx, word32, int64)
	ecx = ecx + 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	r9 = r8 + r8 * 2<64>
	r8 = Mem0[rbx + 0x20<64>:word64]
	Mem0[rbx + 0x28<64>:word32] = ecx
	rdi = r8 + r9 * 8<64>
	SZO = cond(rdi & rdi)
	C = false
	Mem0[rsp + 0x30<64>:word64] = rdi
	branch Test(EQ,Z) l000000000040A3FA
	// succ:  l000000000040A977 l000000000040A3FA
l000000000040A977:
	rdi = Mem0[rsp + 0x30<64>:word64]
	Mem0[rdi:word32] = 6<32>
	Mem0[rdi + 8<64>:word32] = edx
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A3FD
	// succ:  l000000000040A3FD
l000000000040A98D:
	eax = CONVERT(Mem0[rdx + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x72<8>)
	branch Test(EQ,Z) l000000000040B101
	// succ:  l000000000040A999 l000000000040B101
l000000000040A999:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l000000000040A38F
	// succ:  l000000000040A9A1 l000000000040A38F
l000000000040A9A1:
	rax = rdx + 2<64>
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040D230 (retsize: 8;)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rax
	edx = 0x49<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A3E9
	// succ:  l000000000040A3E9
l000000000040A9C1:
	rax = Mem0[rbx + 0x18<64>:word64]
	// succ:  l000000000040A9C5
l000000000040A9C5:
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsp + 0x28<64>:word64] = 0<64>
	goto l000000000040A4BB
	// succ:  l000000000040A4BB
l000000000040A9D6:
	rcx = rbx
	call fn0000000000403D30 (retsize: 8;)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	branch Test(NE,Z) l000000000040A803
	// succ:  l000000000040A9E7 l000000000040A803
l000000000040A9E7:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	goto l000000000040A090
	// succ:  l000000000040A090
l000000000040A9EF:
	rax = Mem0[rbx + 0x18<64>:word64]
	// succ:  l000000000040A9F3
l000000000040A9F3:
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsp + 0x30<64>:word64] = 0<64>
	goto l000000000040A3FD
	// succ:  l000000000040A3FD
l000000000040AA04:
	eax = CONVERT(Mem0[rdx + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x72<8>)
	branch Test(EQ,Z) l000000000040B83B
	// succ:  l000000000040AA10 l000000000040B83B
l000000000040AA10:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l000000000040A5EE
	// succ:  l000000000040AA18 l000000000040A5EE
l000000000040AA18:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	call fn000000000040D230 (retsize: 8;)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rax
	edx = 0x49<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040A1B2
	// succ:  l000000000040A1B2
l000000000040AA43:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x70<8>)
	branch Test(NE,Z) l000000000040A5EE
	// succ:  l000000000040AA4D l000000000040A5EE
l000000000040AA4D:
	rax = rdx + 2<64>
	Mem0[rbx + 0x18<64>:word64] = rax
	SCZO = cond(Mem0[rdx + 2<64>:byte] - 0x54<8>)
	branch Test(NE,Z) l000000000040AE16
	// succ:  l000000000040AA5F l000000000040AE16
l000000000040AA5F:
	rdx = rdx + 3<64>
	SCZO = cond(rdx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x18<64>:word64] = rdx
	// succ:  l000000000040AA69
l000000000040AA69:
	edx = Mem0[rbx + 0x28<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - Mem0[rbx + 0x2C<64>:word32])
	branch Test(GE,SO) l000000000040AE27
	// succ:  l000000000040AA75 l000000000040AE27
l000000000040AA75:
	rsi = CONVERT(edx, word32, int64)
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rsi = rsi *s 0x18<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x28<64>:word32] = edx
	rsi = rsi + Mem0[rbx + 0x20<64>:word64]
	SCZO = cond(rsi)
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000040A1B2
	// succ:  l000000000040AA8F l000000000040A1B2
l000000000040AA8F:
	Mem0[rsi:word32] = 6<32>
	Mem0[rsi + 8<64>:word32] = eax
	goto l000000000040A1B2
	// succ:  l000000000040A1B2
l000000000040AA9D:
	rcx = rbx
	call fn0000000000403D80 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rax
	goto l000000000040A090
	// succ:  l000000000040A090
l000000000040AAAD:
	rcx = rbx
	call fn0000000000407F20 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rax
	goto l000000000040A090
	// succ:  l000000000040A090
l000000000040AABD:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l000000000040B790
	// succ:  l000000000040AAC7 l000000000040B790
l000000000040AAC7:
	v38 = Mem0[rbx + 0x18<64>:word64] + 2<64>
	Mem0[rbx + 0x18<64>:word64] = v38
	SCZO = cond(v38)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A4A7
	// succ:  l000000000040A4A7
l000000000040AAE9:
	rax = Mem0[rsp + 0x28<64>:word64]
	rdi = 0x000000000048EDE2<p64>
	rcx = r15
	rdx = Mem0[rax + 8<64>:word64]
	eax = Mem0[rdx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r8 = Mem0[rdx:word64]
	eax = eax - 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	v37 = Mem0[rbx + 0x50<64>:word32] + eax
	Mem0[rbx + 0x50<64>:word32] = v37
	SCZO = cond(v37)
	rsi = r8
	// succ:  l000000000040AB0B
l000000000040AB0B:
	branch rcx == 0<64> l000000000040AB0D
	// succ:  l000000000040AB0B_1 l000000000040AB0D
l000000000040AB0B_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040AB0B
	// succ:  l000000000040AB0D l000000000040AB0B
l000000000040AB0D:
	branch Test(EQ,Z) l000000000040B8E0
	// succ:  l000000000040AB13 l000000000040B8E0
l000000000040AB13:
	eax = Mem0[rdx + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040B485
	// succ:  l000000000040AB1F l000000000040B485
l000000000040AB1F:
	branch Test(LE,SZO) l000000000040ABEE
	// succ:  l000000000040AB25 l000000000040ABEE
l000000000040AB25:
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000040B3C0
	// succ:  l000000000040AB2E l000000000040B3C0
l000000000040AB2E:
	SCZO = cond(eax - 3<32>)
	branch Test(NE,Z) l000000000040A9C1
	// succ:  l000000000040AB37 l000000000040A9C1
l000000000040AB37:
	rdi = 0x000000000048EDEB<p64>
	rsi = r8
	rcx = r15
	// succ:  l000000000040AB44
l000000000040AB44:
	branch rcx == 0<64> l000000000040AB46
	// succ:  l000000000040AB44_2 l000000000040AB46
l000000000040AB44_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040AB44
	// succ:  l000000000040AB46 l000000000040AB44
l000000000040AB46:
	branch Test(EQ,Z) l000000000040B69E
	// succ:  l000000000040AB4C l000000000040B69E
l000000000040AB4C:
	SCZO = cond(Mem0[r8:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040A9C1
	// succ:  l000000000040AB56 l000000000040A9C1
l000000000040AB56:
	eax = CONVERT(Mem0[r8 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x61<8>)
	branch Test(EQ,Z) l000000000040AB67
	// succ:  l000000000040AB5F l000000000040AB67
l000000000040AB5F:
	SCZO = cond(al - 0x77<8>)
	branch Test(NE,Z) l000000000040A9C1
	// succ:  l000000000040AB67 l000000000040A9C1
l000000000040AB67:
	edx = 0x5F<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn00000000004080A0 (retsize: 8;)
	rdi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x45<8>)
	branch Test(EQ,Z) l000000000040B96E
	// succ:  l000000000040AB92 l000000000040B96E
l000000000040AB92:
	SCZO = cond(dl - 0x70<8>)
	branch Test(EQ,Z) l000000000040B94E
	// succ:  l000000000040AB9B l000000000040B94E
l000000000040AB9B:
	SCZO = cond(dl - 0x69<8>)
	branch Test(NE,Z) l000000000040B940
	// succ:  l000000000040ABA4 l000000000040B940
l000000000040ABA4:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x6C<8>)
	branch Test(NE,Z) l000000000040B92D
	// succ:  l000000000040ABAE l000000000040B92D
l000000000040ABAE:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040ABB6
l000000000040ABB6:
	r9 = rax
	r8 = rdi
	edx = 0x3A<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x39<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	edx = 0x38<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A4A7
	// succ:  l000000000040A4A7
l000000000040ABEE:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040A9C1
	// succ:  l000000000040ABF6 l000000000040A9C1
l000000000040ABF6:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = Mem0[rsp + 0x28<64>:word64]
	edx = 0x34<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A4A7
	// succ:  l000000000040A4A7
l000000000040AC08:
	rax = Mem0[rsp + 0x38<64>:word64]
	rdi = 0x000000000048EDE2<p64>
	rcx = r15
	rdx = Mem0[rax + 8<64>:word64]
	eax = Mem0[rdx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r9 = Mem0[rdx:word64]
	eax = eax - 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	v33 = Mem0[rbx + 0x50<64>:word32] + eax
	Mem0[rbx + 0x50<64>:word32] = v33
	SCZO = cond(v33)
	rsi = r9
	// succ:  l000000000040AC2A
l000000000040AC2A:
	branch rcx == 0<64> l000000000040AC2C
	// succ:  l000000000040AC2A_1 l000000000040AC2C
l000000000040AC2A_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040AC2A
	// succ:  l000000000040AC2C l000000000040AC2A
l000000000040AC2C:
	branch Test(EQ,Z) l000000000040BB1E
	// succ:  l000000000040AC32 l000000000040BB1E
l000000000040AC32:
	eax = Mem0[rdx + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040B230
	// succ:  l000000000040AC3E l000000000040B230
l000000000040AC3E:
	branch Test(LE,SZO) l000000000040AD1E
	// succ:  l000000000040AC44 l000000000040AD1E
l000000000040AC44:
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000040AD62
	// succ:  l000000000040AC4D l000000000040AD62
l000000000040AC4D:
	SCZO = cond(eax - 3<32>)
	branch Test(NE,Z) l000000000040A9E7
	// succ:  l000000000040AC56 l000000000040A9E7
l000000000040AC56:
	rdi = 0x000000000048EDEB<p64>
	rsi = r9
	rcx = r15
	// succ:  l000000000040AC63
l000000000040AC63:
	branch rcx == 0<64> l000000000040AC65
	// succ:  l000000000040AC63_2 l000000000040AC65
l000000000040AC63_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040AC63
	// succ:  l000000000040AC65 l000000000040AC63
l000000000040AC65:
	branch Test(EQ,Z) l000000000040B9B0
	// succ:  l000000000040AC6B l000000000040B9B0
l000000000040AC6B:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(Mem0[r9:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040A090
	// succ:  l000000000040AC78 l000000000040A090
l000000000040AC78:
	eax = CONVERT(Mem0[r9 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x61<8>)
	branch Test(EQ,Z) l000000000040AC89
	// succ:  l000000000040AC81 l000000000040AC89
l000000000040AC81:
	SCZO = cond(al - 0x77<8>)
	branch Test(NE,Z) l000000000040A090
	// succ:  l000000000040AC89 l000000000040A090
l000000000040AC89:
	edx = 0x5F<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn00000000004080A0 (retsize: 8;)
	rdi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x45<8>)
	branch Test(EQ,Z) l000000000040B9A1
	// succ:  l000000000040ACB4 l000000000040B9A1
l000000000040ACB4:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(dl - 0x70<8>)
	branch Test(EQ,Z) l000000000040B97D
	// succ:  l000000000040ACC0 l000000000040B97D
l000000000040ACC0:
	SCZO = cond(dl - 0x69<8>)
	branch Test(NE,Z) l000000000040A090
	// succ:  l000000000040ACC9 l000000000040A090
l000000000040ACC9:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x6C<8>)
	branch Test(NE,Z) l000000000040A090
	// succ:  l000000000040ACD3 l000000000040A090
l000000000040ACD3:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040ACDB
l000000000040ACDB:
	r9 = rax
	r8 = rdi
	edx = 0x3A<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x39<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = Mem0[rsp + 0x38<64>:word64]
	r9 = rax
	edx = 0x38<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040A090
	// succ:  l000000000040A090
l000000000040AD1E:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040A9E7
	// succ:  l000000000040AD26 l000000000040A9E7
l000000000040AD26:
	r8 = Mem0[rsp + 0x38<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = 0x34<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040A090
	// succ:  l000000000040A090
l000000000040AD43:
	rax = Mem0[rsp + 0x38<64>:word64]
	eax = Mem0[rax + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040A54B
	// succ:  l000000000040AD54 l000000000040A54B
l000000000040AD54:
	branch Test(LE,SZO) l000000000040AD1E
	// succ:  l000000000040AD56 l000000000040AD1E
l000000000040AD56:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	SCZO = cond(eax - 2<32>)
	branch Test(NE,Z) l000000000040AC4D
	// succ:  l000000000040AD62 l000000000040AC4D
l000000000040AD62:
	rax = Mem0[rsp + 0x38<64>:word64]
	rax = Mem0[rax + 8<64>:word64]
	rax = Mem0[rax:word64]
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x63<8>)
	branch Test(EQ,Z) l000000000040BA5F
	// succ:  l000000000040AD78 l000000000040BA5F
l000000000040AD78:
	rcx = rbx
	Mem0[rsp + 0x48<64>:word64] = r9
	call fn000000000040D230 (retsize: 8;)
	r9 = Mem0[rsp + 0x48<64>:word64]
	Mem0[rsp + 0x40<64>:word64] = rax
	// succ:  l000000000040AD8F
l000000000040AD8F:
	rdi = 0x000000000048EDE5<p64>
	rsi = r9
	rcx = r15
	// succ:  l000000000040AD9C
l000000000040AD9C:
	branch rcx == 0<64> l000000000040AD9E
	// succ:  l000000000040AD9C_1 l000000000040AD9E
l000000000040AD9C_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040AD9C
	// succ:  l000000000040AD9E l000000000040AD9C
l000000000040AD9E:
	branch Test(EQ,Z) l000000000040BA4A
	// succ:  l000000000040ADA4 l000000000040BA4A
l000000000040ADA4:
	rdi = 0x000000000048F0CF<p64>
	rsi = r9
	rcx = r15
	// succ:  l000000000040ADB1
l000000000040ADB1:
	branch rcx == 0<64> l000000000040ADB3
	// succ:  l000000000040ADB1_2 l000000000040ADB3
l000000000040ADB1_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040ADB1
	// succ:  l000000000040ADB3 l000000000040ADB1
l000000000040ADB3:
	branch Test(EQ,Z) l000000000040ADCC
	// succ:  l000000000040ADB5 l000000000040ADCC
l000000000040ADB5:
	rdx = 0x000000000048F0D2<p64>
	rcx = r9
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040B9D3
	// succ:  l000000000040ADCC l000000000040B9D3
l000000000040ADCC:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	rsi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040BB8B
	// succ:  l000000000040ADE4 l000000000040BB8B
l000000000040ADE4:
	r8 = Mem0[rsp + 0x40<64>:word64]
	r9 = rsi
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = Mem0[rsp + 0x38<64>:word64]
	r9 = rax
	edx = 0x36<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040A090
	// succ:  l000000000040A090
l000000000040AE16:
	rcx = rbx
	call fn0000000000403D30 (retsize: 8;)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	branch Test(NE,Z) l000000000040AA69
	// succ:  l000000000040AE27 l000000000040AA69
l000000000040AE27:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l000000000040A1B2
	// succ:  l000000000040A1B2
l000000000040AE2E:
	rcx = rbx
	call fn0000000000407F20 (retsize: 8;)
	rsp = rsp + 8<64>
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A4BB
	// succ:  l000000000040A4BB
l000000000040AE47:
	rcx = rbx
	call fn0000000000403D80 (retsize: 8;)
	rsp = rsp + 8<64>
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A3FD
	// succ:  l000000000040A3FD
l000000000040AE60:
	rcx = rbx
	call fn0000000000407F20 (retsize: 8;)
	rsp = rsp + 8<64>
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A3FD
	// succ:  l000000000040A3FD
l000000000040AE79:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l000000000040B827
	// succ:  l000000000040AE83 l000000000040B827
l000000000040AE83:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000040CB30 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A3E9
	// succ:  l000000000040A3E9
l000000000040AEA8:
	rax = Mem0[rsp + 0x28<64>:word64]
	eax = Mem0[rax + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040A3D4
	// succ:  l000000000040AEB9 l000000000040A3D4
l000000000040AEB9:
	branch Test(LE,SZO) l000000000040AFC7
	// succ:  l000000000040AEBF l000000000040AFC7
l000000000040AEBF:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	// succ:  l000000000040AEC2
l000000000040AEC2:
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000040B187
	// succ:  l000000000040AECB l000000000040B187
l000000000040AECB:
	SCZO = cond(eax - 3<32>)
	branch Test(NE,Z) l000000000040A9EF
	// succ:  l000000000040AED4 l000000000040A9EF
l000000000040AED4:
	rdi = 0x000000000048EDEB<p64>
	rsi = r8
	rcx = r15
	// succ:  l000000000040AEE1
l000000000040AEE1:
	branch rcx == 0<64> l000000000040AEE3
	// succ:  l000000000040AEE1_1 l000000000040AEE3
l000000000040AEE1_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040AEE1
	// succ:  l000000000040AEE3 l000000000040AEE1
l000000000040AEE3:
	branch Test(EQ,Z) l000000000040B7F4
	// succ:  l000000000040AEE9 l000000000040B7F4
l000000000040AEE9:
	SCZO = cond(Mem0[r8:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040A9EF
	// succ:  l000000000040AEF3 l000000000040A9EF
l000000000040AEF3:
	eax = CONVERT(Mem0[r8 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x61<8>)
	branch Test(EQ,Z) l000000000040AF04
	// succ:  l000000000040AEFC l000000000040AF04
l000000000040AEFC:
	SCZO = cond(al - 0x77<8>)
	branch Test(NE,Z) l000000000040A9EF
	// succ:  l000000000040AF04 l000000000040A9EF
l000000000040AF04:
	edx = 0x5F<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn00000000004080A0 (retsize: 8;)
	rdi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x45<8>)
	branch Test(EQ,Z) l000000000040BAD2
	// succ:  l000000000040AF2F l000000000040BAD2
l000000000040AF2F:
	SCZO = cond(dl - 0x70<8>)
	branch Test(EQ,Z) l000000000040BAB2
	// succ:  l000000000040AF38 l000000000040BAB2
l000000000040AF38:
	SCZO = cond(dl - 0x69<8>)
	branch Test(NE,Z) l000000000040BAA4
	// succ:  l000000000040AF41 l000000000040BAA4
l000000000040AF41:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x6C<8>)
	branch Test(NE,Z) l000000000040BA91
	// succ:  l000000000040AF4B l000000000040BA91
l000000000040AF4B:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040AF53
l000000000040AF53:
	r9 = rax
	r8 = rdi
	edx = 0x3A<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x39<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	edx = 0x38<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A3E9
	// succ:  l000000000040A3E9
l000000000040AF8B:
	rax = Mem0[rsp + 0x28<64>:word64]
	rdi = 0x000000000048EDE2<p64>
	rcx = r15
	rdx = Mem0[rax + 8<64>:word64]
	eax = Mem0[rdx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r8 = Mem0[rdx:word64]
	eax = eax - 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	v39 = Mem0[rbx + 0x50<64>:word32] + eax
	Mem0[rbx + 0x50<64>:word32] = v39
	SCZO = cond(v39)
	rsi = r8
	// succ:  l000000000040AFAD
l000000000040AFAD:
	branch rcx == 0<64> l000000000040AFAF
	// succ:  l000000000040AFAD_1 l000000000040AFAF
l000000000040AFAD_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040AFAD
	// succ:  l000000000040AFAF l000000000040AFAD
l000000000040AFAF:
	branch Test(EQ,Z) l000000000040B87D
	// succ:  l000000000040AFB5 l000000000040B87D
l000000000040AFB5:
	eax = Mem0[rdx + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040B0BA
	// succ:  l000000000040AFC1 l000000000040B0BA
l000000000040AFC1:
	branch Test(GT,SZO) l000000000040AEC2
	// succ:  l000000000040AFC7 l000000000040AEC2
l000000000040AFC7:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040A9EF
	// succ:  l000000000040AFCF l000000000040A9EF
l000000000040AFCF:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = Mem0[rsp + 0x28<64>:word64]
	edx = 0x34<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A3E9
	// succ:  l000000000040A3E9
l000000000040AFE1:
	rax = Mem0[rsp + 0x28<64>:word64]
	eax = Mem0[rax + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040A492
	// succ:  l000000000040AFF2 l000000000040A492
l000000000040AFF2:
	branch Test(LE,SZO) l000000000040ABEE
	// succ:  l000000000040AFF8 l000000000040ABEE
l000000000040AFF8:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	goto l000000000040AB25
	// succ:  l000000000040AB25
l000000000040B000:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l000000000040BA17
	// succ:  l000000000040B00A l000000000040BA17
l000000000040B00A:
	v35 = Mem0[rbx + 0x18<64>:word64] + 2<64>
	Mem0[rbx + 0x18<64>:word64] = v35
	SCZO = cond(v35)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040A090
	// succ:  l000000000040A090
l000000000040B037:
	rcx = rbx
	call fn0000000000403D80 (retsize: 8;)
	rsp = rsp + 8<64>
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A4BB
	// succ:  l000000000040A4BB
l000000000040B050:
	rcx = rbx
	call fn0000000000403D30 (retsize: 8;)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbx + 0x18<64>:word64]
	branch Test(NE,Z) l000000000040A948
	// succ:  l000000000040B067 l000000000040A948
l000000000040B067:
	goto l000000000040A9F3
	// succ:  l000000000040A9F3
l000000000040B070:
	rcx = rbx
	call fn0000000000403D80 (retsize: 8;)
	rsp = rsp + 8<64>
	rsi = rax
	goto l000000000040A1B2
	// succ:  l000000000040A1B2
l000000000040B080:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l000000000040B897
	// succ:  l000000000040B08A l000000000040B897
l000000000040B08A:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000040CB30 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040A1B2
	// succ:  l000000000040A1B2
l000000000040B0BA:
	eax = CONVERT(Mem0[r8:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x6D<8>)
	branch Test(EQ,Z) l000000000040B0CA
	// succ:  l000000000040B0C2 l000000000040B0CA
l000000000040B0C2:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l000000000040A3D4
	// succ:  l000000000040B0CA l000000000040A3D4
l000000000040B0CA:
	SCZO = cond(al - Mem0[r8 + 1<64>:byte])
	branch Test(NE,Z) l000000000040A3D4
	// succ:  l000000000040B0D4 l000000000040A3D4
l000000000040B0D4:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040B7A0
	// succ:  l000000000040B0E1 l000000000040B7A0
l000000000040B0E1:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = rax
	r9 = rax
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	goto l000000000040A3DC
	// succ:  l000000000040A3DC
l000000000040B101:
	rax = rdx + 2<64>
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn00000000004080A0 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn0000000000409850 (retsize: 8;)
	rdi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	r9 = rdi
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040BA27
	// succ:  l000000000040B12F l000000000040BA27
l000000000040B12F:
	r8 = rsi
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A3E9
	// succ:  l000000000040A3E9
l000000000040B13C:
	rax = rax + 2<64>
	SCZO = cond(rax)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn00000000004080A0 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn0000000000409850 (retsize: 8;)
	rdi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	r9 = rdi
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040B76D
	// succ:  l000000000040B16A l000000000040B76D
l000000000040B16A:
	r8 = rsi
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A4A7
	// succ:  l000000000040A4A7
l000000000040B177:
	rcx = rbx
	call fn0000000000407F20 (retsize: 8;)
	rsp = rsp + 8<64>
	rsi = rax
	goto l000000000040A1B2
	// succ:  l000000000040A1B2
l000000000040B187:
	rax = Mem0[rsp + 0x28<64>:word64]
	rax = Mem0[rax + 8<64>:word64]
	rax = Mem0[rax:word64]
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x63<8>)
	branch Test(EQ,Z) l000000000040B7C2
	// succ:  l000000000040B19D l000000000040B7C2
l000000000040B19D:
	rcx = rbx
	Mem0[rsp + 0x38<64>:word64] = r8
	call fn000000000040D230 (retsize: 8;)
	r8 = Mem0[rsp + 0x38<64>:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	// succ:  l000000000040B1B4
l000000000040B1B4:
	rdi = 0x000000000048EDE5<p64>
	rsi = r8
	rcx = r15
	// succ:  l000000000040B1C1
l000000000040B1C1:
	branch rcx == 0<64> l000000000040B1C3
	// succ:  l000000000040B1C1_1 l000000000040B1C3
l000000000040B1C1_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040B1C1
	// succ:  l000000000040B1C3 l000000000040B1C1
l000000000040B1C3:
	branch Test(EQ,Z) l000000000040B7AD
	// succ:  l000000000040B1C9 l000000000040B7AD
l000000000040B1C9:
	rdi = 0x000000000048F0CF<p64>
	rsi = r8
	rcx = r15
	// succ:  l000000000040B1D6
l000000000040B1D6:
	branch rcx == 0<64> l000000000040B1D8
	// succ:  l000000000040B1D6_2 l000000000040B1D8
l000000000040B1D6_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040B1D6
	// succ:  l000000000040B1D8 l000000000040B1D6
l000000000040B1D8:
	branch Test(EQ,Z) l000000000040B1F1
	// succ:  l000000000040B1DA l000000000040B1F1
l000000000040B1DA:
	rdx = 0x000000000048F0D2<p64>
	rcx = r8
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040B817
	// succ:  l000000000040B1F1 l000000000040B817
l000000000040B1F1:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	rsi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040BAFB
	// succ:  l000000000040B209 l000000000040BAFB
l000000000040B209:
	r8 = Mem0[rsp + 0x30<64>:word64]
	r9 = rsi
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	edx = 0x36<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A3E9
	// succ:  l000000000040A3E9
l000000000040B230:
	eax = CONVERT(Mem0[r9:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x6D<8>)
	branch Test(EQ,Z) l000000000040B240
	// succ:  l000000000040B238 l000000000040B240
l000000000040B238:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l000000000040A54B
	// succ:  l000000000040B240 l000000000040A54B
l000000000040B240:
	SCZO = cond(al - Mem0[r9 + 1<64>:byte])
	branch Test(NE,Z) l000000000040A54B
	// succ:  l000000000040B24A l000000000040A54B
l000000000040B24A:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040BA0A
	// succ:  l000000000040B257 l000000000040BA0A
l000000000040B257:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = rax
	r9 = rax
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	goto l000000000040A553
	// succ:  l000000000040A553
l000000000040B280:
	rax = rax + 2<64>
	SCZO = cond(rax)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn00000000004080A0 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn0000000000409850 (retsize: 8;)
	rdi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	r9 = rdi
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040BB68
	// succ:  l000000000040B2AE l000000000040BB68
l000000000040B2AE:
	r8 = rsi
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040A090
	// succ:  l000000000040A090
l000000000040B2C6:
	rax = Mem0[rsp + 0x30<64>:word64]
	eax = Mem0[rax + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040A62E
	// succ:  l000000000040B2D7 l000000000040A62E
l000000000040B2D7:
	branch Test(LE,SZO) l000000000040B6CE
	// succ:  l000000000040B2DD l000000000040B6CE
l000000000040B2DD:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000040B515
	// succ:  l000000000040B2E9 l000000000040B515
l000000000040B2E9:
	SCZO = cond(eax - 3<32>)
	branch Test(NE,Z) l000000000040AE27
	// succ:  l000000000040B2F2 l000000000040AE27
l000000000040B2F2:
	rdx = 0x000000000048EDEB<p64>
	rcx = r9
	Mem0[rsp + 0x38<64>:word64] = r9
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	r9 = Mem0[rsp + 0x38<64>:word64]
	branch Test(EQ,Z) l000000000040B67B
	// succ:  l000000000040B313 l000000000040B67B
l000000000040B313:
	SCZO = cond(Mem0[r9:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040AE27
	// succ:  l000000000040B31D l000000000040AE27
l000000000040B31D:
	eax = CONVERT(Mem0[r9 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x61<8>)
	branch Test(EQ,Z) l000000000040B32E
	// succ:  l000000000040B326 l000000000040B32E
l000000000040B326:
	SCZO = cond(al - 0x77<8>)
	branch Test(NE,Z) l000000000040AE27
	// succ:  l000000000040B32E l000000000040AE27
l000000000040B32E:
	edx = 0x5F<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn00000000004080A0 (retsize: 8;)
	rdi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x45<8>)
	branch Test(EQ,Z) l000000000040B91E
	// succ:  l000000000040B359 l000000000040B91E
l000000000040B359:
	SCZO = cond(dl - 0x70<8>)
	branch Test(EQ,Z) l000000000040B8FA
	// succ:  l000000000040B362 l000000000040B8FA
l000000000040B362:
	SCZO = cond(dl - 0x69<8>)
	branch Test(NE,Z) l000000000040AE27
	// succ:  l000000000040B36B l000000000040AE27
l000000000040B36B:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x6C<8>)
	branch Test(NE,Z) l000000000040AE27
	// succ:  l000000000040B375 l000000000040AE27
l000000000040B375:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040B37D
l000000000040B37D:
	r9 = rax
	r8 = rdi
	edx = 0x3A<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x39<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = Mem0[rsp + 0x30<64>:word64]
	r9 = rax
	edx = 0x38<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040A1B2
	// succ:  l000000000040A1B2
l000000000040B3C0:
	rax = Mem0[rsp + 0x28<64>:word64]
	rax = Mem0[rax + 8<64>:word64]
	rax = Mem0[rax:word64]
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x63<8>)
	branch Test(EQ,Z) l000000000040B639
	// succ:  l000000000040B3D6 l000000000040B639
l000000000040B3D6:
	rcx = rbx
	Mem0[rsp + 0x40<64>:word64] = r8
	call fn000000000040D230 (retsize: 8;)
	r8 = Mem0[rsp + 0x40<64>:word64]
	Mem0[rsp + 0x38<64>:word64] = rax
	// succ:  l000000000040B3ED
l000000000040B3ED:
	rdi = 0x000000000048EDE5<p64>
	rsi = r8
	rcx = r15
	// succ:  l000000000040B3FA
l000000000040B3FA:
	branch rcx == 0<64> l000000000040B3FC
	// succ:  l000000000040B3FA_1 l000000000040B3FC
l000000000040B3FA_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040B3FA
	// succ:  l000000000040B3FC l000000000040B3FA
l000000000040B3FC:
	branch Test(EQ,Z) l000000000040B8CB
	// succ:  l000000000040B402 l000000000040B8CB
l000000000040B402:
	rdi = 0x000000000048F0CF<p64>
	rsi = r8
	rcx = r15
	// succ:  l000000000040B40F
l000000000040B40F:
	branch rcx == 0<64> l000000000040B411
	// succ:  l000000000040B40F_2 l000000000040B411
l000000000040B40F_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040B40F
	// succ:  l000000000040B411 l000000000040B40F
l000000000040B411:
	branch Test(EQ,Z) l000000000040B42A
	// succ:  l000000000040B413 l000000000040B42A
l000000000040B413:
	rdx = 0x000000000048F0D2<p64>
	rcx = r8
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040B66B
	// succ:  l000000000040B42A l000000000040B66B
l000000000040B42A:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	rsi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040BB2B
	// succ:  l000000000040B442 l000000000040BB2B
l000000000040B442:
	r8 = Mem0[rsp + 0x38<64>:word64]
	r9 = rsi
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	edx = 0x36<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A4A7
	// succ:  l000000000040A4A7
l000000000040B469:
	rcx = rbx
	call fn0000000000403D30 (retsize: 8;)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	rax = Mem0[rbx + 0x18<64>:word64]
	branch Test(NE,Z) l000000000040A8A7
	// succ:  l000000000040B480 l000000000040A8A7
l000000000040B480:
	goto l000000000040A9C5
	// succ:  l000000000040A9C5
l000000000040B485:
	eax = CONVERT(Mem0[r8:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x6D<8>)
	branch Test(EQ,Z) l000000000040B495
	// succ:  l000000000040B48D l000000000040B495
l000000000040B48D:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l000000000040A492
	// succ:  l000000000040B495 l000000000040A492
l000000000040B495:
	SCZO = cond(al - Mem0[r8 + 1<64>:byte])
	branch Test(NE,Z) l000000000040A492
	// succ:  l000000000040B49F l000000000040A492
l000000000040B49F:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040BBAE
	// succ:  l000000000040B4AC l000000000040BBAE
l000000000040B4AC:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = rax
	r9 = rax
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	goto l000000000040A49A
	// succ:  l000000000040A49A
l000000000040B4D0:
	rax = Mem0[rsp + 0x30<64>:word64]
	rdi = 0x000000000048EDE2<p64>
	rcx = r15
	rdx = Mem0[rax + 8<64>:word64]
	eax = Mem0[rdx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r9 = Mem0[rdx:word64]
	eax = eax - 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	v40 = Mem0[rbx + 0x50<64>:word32] + eax
	Mem0[rbx + 0x50<64>:word32] = v40
	SCZO = cond(v40)
	rsi = r9
	// succ:  l000000000040B4F2
l000000000040B4F2:
	branch rcx == 0<64> l000000000040B4F4
	// succ:  l000000000040B4F2_1 l000000000040B4F4
l000000000040B4F2_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040B4F2
	// succ:  l000000000040B4F4 l000000000040B4F2
l000000000040B4F4:
	branch Test(EQ,Z) l000000000040B6C1
	// succ:  l000000000040B4FA l000000000040B6C1
l000000000040B4FA:
	eax = Mem0[rdx + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040B6F3
	// succ:  l000000000040B506 l000000000040B6F3
l000000000040B506:
	branch Test(LE,SZO) l000000000040B6CE
	// succ:  l000000000040B50C l000000000040B6CE
l000000000040B50C:
	SCZO = cond(eax - 2<32>)
	branch Test(NE,Z) l000000000040B2E9
	// succ:  l000000000040B515 l000000000040B2E9
l000000000040B515:
	rax = Mem0[rsp + 0x30<64>:word64]
	rax = Mem0[rax + 8<64>:word64]
	rax = Mem0[rax:word64]
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x63<8>)
	branch Test(EQ,Z) l000000000040B609
	// succ:  l000000000040B52B l000000000040B609
l000000000040B52B:
	rcx = rbx
	Mem0[rsp + 0x38<64>:word64] = r9
	call fn000000000040D230 (retsize: 8;)
	r9 = Mem0[rsp + 0x38<64>:word64]
	rsi = rax
	// succ:  l000000000040B540
l000000000040B540:
	rdx = 0x000000000048EDE5<p64>
	rcx = r9
	Mem0[rsp + 0x38<64>:word64] = r9
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	r9 = Mem0[rsp + 0x38<64>:word64]
	branch Test(EQ,Z) l000000000040B5F7
	// succ:  l000000000040B561 l000000000040B5F7
l000000000040B561:
	rdx = 0x000000000048F0CF<p64>
	rcx = r9
	Mem0[rsp + 0x38<64>:word64] = r9
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040B595
	// succ:  l000000000040B579 l000000000040B595
l000000000040B579:
	r9 = Mem0[rsp + 0x38<64>:word64]
	rdx = 0x000000000048F0D2<p64>
	rcx = r9
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040B736
	// succ:  l000000000040B595 l000000000040B736
l000000000040B595:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	rdi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(NE,Z) l000000000040B5C7
	// succ:  l000000000040B5A9 l000000000040B5C7
l000000000040B5A9:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rdi = rax
	// succ:  l000000000040B5C7
l000000000040B5C7:
	r8 = rsi
	r9 = rdi
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = Mem0[rsp + 0x30<64>:word64]
	r9 = rax
	edx = 0x36<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040A1B2
	// succ:  l000000000040A1B2
l000000000040B5F7:
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rdi = rax
	goto l000000000040B5C7
	// succ:  l000000000040B5C7
l000000000040B609:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 0x72<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 1<8>)
	branch Test(ULE,CZ) l000000000040B61F
	// succ:  l000000000040B614 l000000000040B61F
l000000000040B614:
	eax = eax - 0x63<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 1<8>)
	branch Test(UGT,CZ) l000000000040B52B
	// succ:  l000000000040B61F l000000000040B52B
l000000000040B61F:
	rcx = rbx
	Mem0[rsp + 0x38<64>:word64] = r9
	call fn00000000004080A0 (retsize: 8;)
	r9 = Mem0[rsp + 0x38<64>:word64]
	rsi = rax
	goto l000000000040B540
	// succ:  l000000000040B540
l000000000040B639:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 0x72<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 1<8>)
	branch Test(ULE,CZ) l000000000040B64F
	// succ:  l000000000040B644 l000000000040B64F
l000000000040B644:
	eax = eax - 0x63<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 1<8>)
	branch Test(UGT,CZ) l000000000040B3D6
	// succ:  l000000000040B64F l000000000040B3D6
l000000000040B64F:
	rcx = rbx
	Mem0[rsp + 0x40<64>:word64] = r8
	call fn00000000004080A0 (retsize: 8;)
	r8 = Mem0[rsp + 0x40<64>:word64]
	Mem0[rsp + 0x38<64>:word64] = rax
	goto l000000000040B3ED
	// succ:  l000000000040B3ED
l000000000040B66B:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rsi = rax
	goto l000000000040B442
	// succ:  l000000000040B442
l000000000040B67B:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	rdi = rax
	call fn000000000040D230 (retsize: 8;)
	goto l000000000040B37D
	// succ:  l000000000040B37D
l000000000040B69E:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	rdi = rax
	call fn000000000040D230 (retsize: 8;)
	goto l000000000040ABB6
	// succ:  l000000000040ABB6
l000000000040B6C1:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	goto l000000000040A636
	// succ:  l000000000040A636
l000000000040B6CE:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040AE27
	// succ:  l000000000040B6D6 l000000000040AE27
l000000000040B6D6:
	r8 = Mem0[rsp + 0x30<64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = 0x34<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040A1B2
	// succ:  l000000000040A1B2
l000000000040B6F3:
	eax = CONVERT(Mem0[r9:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x6D<8>)
	branch Test(EQ,Z) l000000000040B703
	// succ:  l000000000040B6FB l000000000040B703
l000000000040B6FB:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l000000000040A62E
	// succ:  l000000000040B703 l000000000040A62E
l000000000040B703:
	SCZO = cond(al - Mem0[r9 + 1<64>:byte])
	branch Test(NE,Z) l000000000040A62E
	// succ:  l000000000040B70D l000000000040A62E
l000000000040B70D:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040B746
	// succ:  l000000000040B716 l000000000040B746
l000000000040B716:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = rax
	r9 = rax
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	goto l000000000040A636
	// succ:  l000000000040A636
l000000000040B736:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rdi = rax
	goto l000000000040B5C7
	// succ:  l000000000040B5C7
l000000000040B746:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	goto l000000000040A62E
	// succ:  l000000000040A62E
l000000000040B753:
	rax = rax + 1<64>
	SCZO = cond(rax)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040A49A
	// succ:  l000000000040A49A
l000000000040B76D:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r9 = rax
	goto l000000000040B16A
	// succ:  l000000000040B16A
l000000000040B790:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	rsi = rax
	goto l000000000040AAC7
	// succ:  l000000000040AAC7
l000000000040B7A0:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	goto l000000000040A3D4
	// succ:  l000000000040A3D4
l000000000040B7AD:
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rsi = rax
	goto l000000000040B209
	// succ:  l000000000040B209
l000000000040B7C2:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 0x72<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 1<8>)
	branch Test(ULE,CZ) l000000000040B7D8
	// succ:  l000000000040B7CD l000000000040B7D8
l000000000040B7CD:
	eax = eax - 0x63<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 1<8>)
	branch Test(UGT,CZ) l000000000040B19D
	// succ:  l000000000040B7D8 l000000000040B19D
l000000000040B7D8:
	rcx = rbx
	Mem0[rsp + 0x38<64>:word64] = r8
	call fn00000000004080A0 (retsize: 8;)
	r8 = Mem0[rsp + 0x38<64>:word64]
	Mem0[rsp + 0x30<64>:word64] = rax
	goto l000000000040B1B4
	// succ:  l000000000040B1B4
l000000000040B7F4:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	rdi = rax
	call fn000000000040D230 (retsize: 8;)
	goto l000000000040AF53
	// succ:  l000000000040AF53
l000000000040B817:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rsi = rax
	goto l000000000040B209
	// succ:  l000000000040B209
l000000000040B827:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	rsi = rax
	goto l000000000040AE83
	// succ:  l000000000040AE83
l000000000040B83B:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	call fn00000000004080A0 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn0000000000409850 (retsize: 8;)
	rdi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040B8AB
	// succ:  l000000000040B862 l000000000040B8AB
l000000000040B862:
	r9 = rdi
	// succ:  l000000000040B865
l000000000040B865:
	r8 = rsi
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040A1B2
	// succ:  l000000000040A1B2
l000000000040B87D:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	edx = 0x35<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A3E9
	// succ:  l000000000040A3E9
l000000000040B897:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	rsi = rax
	goto l000000000040B08A
	// succ:  l000000000040B08A
l000000000040B8AB:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r9 = rax
	goto l000000000040B865
	// succ:  l000000000040B865
l000000000040B8CB:
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rsi = rax
	goto l000000000040B442
	// succ:  l000000000040B442
l000000000040B8E0:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	edx = 0x35<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040A4A7
	// succ:  l000000000040A4A7
l000000000040B8FA:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x69<8>)
	branch Test(NE,Z) l000000000040AE27
	// succ:  l000000000040B904 l000000000040AE27
l000000000040B904:
	rax = rax + 2<64>
	SCZO = cond(rax)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040B37D
	// succ:  l000000000040B37D
l000000000040B91E:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000040B37D
	// succ:  l000000000040B37D
l000000000040B92D:
	edx = 0x69<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000040B932
l000000000040B932:
	Mem0[rsp + 0x28<64>:word64] = 0<64>
	goto l000000000040A4F4
	// succ:  l000000000040A4F4
l000000000040B940:
	Mem0[rsp + 0x28<64>:word64] = 0<64>
	goto l000000000040A4BB
	// succ:  l000000000040A4BB
l000000000040B94E:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x69<8>)
	branch Test(NE,Z) l000000000040B932
	// succ:  l000000000040B954 l000000000040B932
l000000000040B954:
	rax = rax + 2<64>
	SCZO = cond(rax)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040ABB6
	// succ:  l000000000040ABB6
l000000000040B96E:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000040ABB6
	// succ:  l000000000040ABB6
l000000000040B97D:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x69<8>)
	branch Test(NE,Z) l000000000040A090
	// succ:  l000000000040B987 l000000000040A090
l000000000040B987:
	rax = rax + 2<64>
	SCZO = cond(rax)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040ACDB
	// succ:  l000000000040ACDB
l000000000040B9A1:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000040ACDB
	// succ:  l000000000040ACDB
l000000000040B9B0:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	rdi = rax
	call fn000000000040D230 (retsize: 8;)
	goto l000000000040ACDB
	// succ:  l000000000040ACDB
l000000000040B9D3:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rsi = rax
	goto l000000000040ADE4
	// succ:  l000000000040ADE4
l000000000040B9E3:
	rax = rax + 1<64>
	SCZO = cond(rax)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040A3DC
	// succ:  l000000000040A3DC
l000000000040B9FD:
	SCZO = cond(al - 0x69<8>)
	branch Test(EQ,Z) l0000000000409D6F
	// succ:  l000000000040BA05 l0000000000409D6F
l000000000040BA05:
	goto l0000000000409D79
	// succ:  l0000000000409D79
l000000000040BA0A:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	goto l000000000040A54B
	// succ:  l000000000040A54B
l000000000040BA17:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	rsi = rax
	goto l000000000040B00A
	// succ:  l000000000040B00A
l000000000040BA27:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r9 = rax
	goto l000000000040B12F
	// succ:  l000000000040B12F
l000000000040BA4A:
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rsi = rax
	goto l000000000040ADE4
	// succ:  l000000000040ADE4
l000000000040BA5F:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 0x72<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 1<8>)
	branch Test(ULE,CZ) l000000000040BA75
	// succ:  l000000000040BA6A l000000000040BA75
l000000000040BA6A:
	eax = eax - 0x63<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 1<8>)
	branch Test(UGT,CZ) l000000000040AD78
	// succ:  l000000000040BA75 l000000000040AD78
l000000000040BA75:
	rcx = rbx
	Mem0[rsp + 0x48<64>:word64] = r9
	call fn00000000004080A0 (retsize: 8;)
	r9 = Mem0[rsp + 0x48<64>:word64]
	Mem0[rsp + 0x40<64>:word64] = rax
	goto l000000000040AD8F
	// succ:  l000000000040AD8F
l000000000040BA91:
	edx = 0x69<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000040BA96
l000000000040BA96:
	Mem0[rsp + 0x30<64>:word64] = 0<64>
	goto l000000000040A436
	// succ:  l000000000040A436
l000000000040BAA4:
	Mem0[rsp + 0x30<64>:word64] = 0<64>
	goto l000000000040A3FD
	// succ:  l000000000040A3FD
l000000000040BAB2:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x69<8>)
	branch Test(NE,Z) l000000000040BA96
	// succ:  l000000000040BAB8 l000000000040BA96
l000000000040BAB8:
	rax = rax + 2<64>
	SCZO = cond(rax)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040AF53
	// succ:  l000000000040AF53
l000000000040BAD2:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000040AF53
	// succ:  l000000000040AF53
l000000000040BAE1:
	rax = rax + 1<64>
	SCZO = cond(rax)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040A553
	// succ:  l000000000040A553
l000000000040BAFB:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040B209
	// succ:  l000000000040B209
l000000000040BB1E:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	goto l000000000040A553
	// succ:  l000000000040A553
l000000000040BB2B:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040B442
	// succ:  l000000000040B442
l000000000040BB4E:
	rax = rax + 1<64>
	SCZO = cond(rax)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040A636
	// succ:  l000000000040A636
l000000000040BB68:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r9 = rax
	goto l000000000040B2AE
	// succ:  l000000000040B2AE
l000000000040BB8B:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040ADE4
	// succ:  l000000000040ADE4
l000000000040BBAE:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	goto l000000000040A492
	// succ:  l000000000040A492
fn0000000000409C60_exit:


// fn000000000040BBC0
// Return size: 8
define fn000000000040BBC0
fn000000000040BBC0_entry:
	rsp = fp
	// succ:  l000000000040BBC0
l000000000040BBC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x18<64>:word64]
	rsi = rcx
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x53<8>)
	branch Test(EQ,Z) l000000000040BD71
	// succ:  l000000000040BBDD l000000000040BD71
l000000000040BBDD:
	branch Test(LE,SZO) l000000000040BC40
	// succ:  l000000000040BBDF l000000000040BC40
l000000000040BBDF:
	SCZO = cond(dl - 0x55<8>)
	branch Test(EQ,Z) l000000000040BC20
	// succ:  l000000000040BBE4 l000000000040BC20
l000000000040BBE4:
	SCZO = cond(dl - 0x5A<8>)
	branch Test(NE,Z) l000000000040BD10
	// succ:  l000000000040BBED l000000000040BD10
l000000000040BBED:
	rax = rax + 1<64>
	SCZO = cond(rax)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rcx + 0x18<64>:word64] = rax
	call fn000000000040C0C0 (retsize: 8;)
	rdx = Mem0[rsi + 0x18<64>:word64]
	rdi = rax
	SCZO = cond(Mem0[rdx:byte] - 0x45<8>)
	branch Test(EQ,Z) l000000000040BF42
	// succ:  l000000000040BC0C l000000000040BF42
l000000000040BC0C:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	// succ:  l000000000040BC0E
l000000000040BC0E:
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000040BBC0_exit
l000000000040BC20:
	call fn0000000000409850 (retsize: 8;)
	rbx = rax
	// succ:  l000000000040BC28
l000000000040BC28:
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000040BBC0_exit
l000000000040BC40:
	SCZO = cond(dl - 0x4E<8>)
	branch Test(NE,Z) l000000000040BD10
	// succ:  l000000000040BC49 l000000000040BD10
l000000000040BC49:
	rax = rax + 1<64>
	SCZO = cond(rax)
	rdx = rsp + 0x38<64>
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rcx + 0x18<64>:word64] = rax
	call fn0000000000403810 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l000000000040BC0C
	// succ:  l000000000040BC69 l000000000040BC0C
l000000000040BC69:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	rcx = rsi
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	call fn0000000000403930 (retsize: 8;)
	rdx = Mem0[rsi + 0x18<64>:word64]
	r12 = rax
	ebx = CONVERT(Mem0[rdx:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l000000000040BC80
l000000000040BC80:
	SZO = cond(bl & bl)
	C = false
	branch Test(EQ,Z) l000000000040BD01
	// succ:  l000000000040BC84 l000000000040BD01
l000000000040BC84:
	SCZO = cond(bl - 0x44<8>)
	branch Test(EQ,Z) l000000000040BEA0
	// succ:  l000000000040BC8D l000000000040BEA0
l000000000040BC8D:
	eax = SLICE(rbx - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 9<8>)
	branch Test(ULE,CZ) l000000000040BE30
	// succ:  l000000000040BC98 l000000000040BE30
l000000000040BC98:
	eax = SLICE(rbx - 0x61<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x19<8>)
	branch Test(ULE,CZ) l000000000040BE30
	// succ:  l000000000040BCA3 l000000000040BE30
l000000000040BCA3:
	SCZO = cond(bl - 0x43<8>)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(bl - 0x55<8>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	cl = cl | al
	SZO = cond(cl)
	C = false
	branch Test(NE,Z) l000000000040BE30
	// succ:  l000000000040BCB7 l000000000040BE30
l000000000040BCB7:
	SCZO = cond(bl - 0x4C<8>)
	branch Test(EQ,Z) l000000000040BE30
	// succ:  l000000000040BCC0 l000000000040BE30
l000000000040BCC0:
	SCZO = cond(bl - 0x53<8>)
	branch Test(EQ,Z) l000000000040BF10
	// succ:  l000000000040BCC9 l000000000040BF10
l000000000040BCC9:
	SCZO = cond(bl - 0x49<8>)
	branch Test(EQ,Z) l000000000040BEF0
	// succ:  l000000000040BCD2 l000000000040BEF0
l000000000040BCD2:
	SCZO = cond(bl - 0x54<8>)
	branch Test(EQ,Z) l000000000040BF35
	// succ:  l000000000040BCDB l000000000040BF35
l000000000040BCDB:
	SCZO = cond(bl - 0x45<8>)
	branch Test(EQ,Z) l000000000040C079
	// succ:  l000000000040BCE4 l000000000040C079
l000000000040BCE4:
	SCZO = cond(bl - 0x4D<8>)
	branch Test(NE,Z) l000000000040BD01
	// succ:  l000000000040BCE9 l000000000040BD01
l000000000040BCE9:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000040BD01
	// succ:  l000000000040BCEE l000000000040BD01
l000000000040BCEE:
	rax = rdx + 1<64>
	Mem0[rsi + 0x18<64>:word64] = rax
	ebx = CONVERT(Mem0[rdx + 1<64>:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	rdx = rax
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l000000000040BC84
	// succ:  l000000000040BD01 l000000000040BC84
l000000000040BD01:
	Mem0[rbp + 0<64>:word64] = 0<64>
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l000000000040BC0E
	// succ:  l000000000040BC0E
l000000000040BD10:
	rcx = rsi
	call fn0000000000409850 (retsize: 8;)
	rdx = Mem0[rsi + 0x18<64>:word64]
	rbx = rax
	SCZO = cond(Mem0[rdx:byte] - 0x49<8>)
	branch Test(NE,Z) l000000000040BC28
	// succ:  l000000000040BD28 l000000000040BC28
l000000000040BD28:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040BC0C
	// succ:  l000000000040BD31 l000000000040BC0C
l000000000040BD31:
	eax = Mem0[rsi + 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - Mem0[rsi + 0x3C<64>:word32])
	branch Test(GE,SO) l000000000040BC0C
	// succ:  l000000000040BD3D l000000000040BC0C
l000000000040BD3D:
	rdx = Mem0[rsi + 0x30<64>:word64]
	rcx = CONVERT(eax, word32, int64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rdx + rcx * 8<64>:word64] = rbx
	rcx = rsi
	Mem0[rsi + 0x38<64>:word32] = eax
	call fn0000000000409C60 (retsize: 8;)
	r8 = rbx
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	call fn0000000000403730 (retsize: 8;)
	rbx = rax
	goto l000000000040BC28
	// succ:  l000000000040BC28
l000000000040BD71:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x74<8>)
	branch Test(EQ,Z) l000000000040BDB4
	// succ:  l000000000040BD77 l000000000040BDB4
l000000000040BD77:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	call fn0000000000403990 (retsize: 8;)
	rdi = rax
	rax = Mem0[rsi + 0x18<64>:word64]
	rbx = rdi
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(NE,Z) l000000000040BC28
	// succ:  l000000000040BD91 l000000000040BC28
l000000000040BD91:
	rcx = rsi
	call fn0000000000409C60 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	call fn0000000000403730 (retsize: 8;)
	rbx = rax
	goto l000000000040BC28
	// succ:  l000000000040BC28
l000000000040BDB4:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rcx + 0x18<64>:word64] = rax
	call fn0000000000409850 (retsize: 8;)
	rdx = 0x000000000048F30B<p64>
	rbx = rax
	r8d = 3<32>
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rsi
	call fn00000000004037B0 (retsize: 8;)
	r9 = rbx
	r8 = rax
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	call fn0000000000403730 (retsize: 8;)
	rdi = rax
	rax = Mem0[rsi + 0x18<64>:word64]
	v21 = Mem0[rsi + 0x50<64>:word32] + 3<32>
	Mem0[rsi + 0x50<64>:word32] = v21
	SCZO = cond(v21)
	rbx = rdi
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(NE,Z) l000000000040BC28
	// succ:  l000000000040BE03 l000000000040BC28
l000000000040BE03:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000040BC0C
	// succ:  l000000000040BE0C l000000000040BC0C
l000000000040BE0C:
	eax = Mem0[rsi + 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - Mem0[rsi + 0x3C<64>:word32])
	branch Test(GE,SO) l000000000040BC0C
	// succ:  l000000000040BE18 l000000000040BC0C
l000000000040BE18:
	rdx = Mem0[rsi + 0x30<64>:word64]
	rcx = CONVERT(eax, word32, int64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rdx + rcx * 8<64>:word64] = rdi
	Mem0[rsi + 0x38<64>:word32] = eax
	goto l000000000040BD91
	// succ:  l000000000040BD91
l000000000040BE30:
	rcx = rsi
	call fn0000000000409850 (retsize: 8;)
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000040BED0
	// succ:  l000000000040BE41 l000000000040BED0
l000000000040BE41:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000040BE46
l000000000040BE46:
	r8 = rdi
	r9 = rax
	rcx = rsi
	call fn0000000000403730 (retsize: 8;)
	rdi = rax
	// succ:  l000000000040BE57
l000000000040BE57:
	SCZO = cond(bl - 0x53<8>)
	branch Test(EQ,Z) l000000000040BE8B
	// succ:  l000000000040BE5C l000000000040BE8B
l000000000040BE5C:
	rdx = Mem0[rsi + 0x18<64>:word64]
	SCZO = cond(Mem0[rdx:byte] - 0x45<8>)
	branch Test(EQ,Z) l000000000040BEC4
	// succ:  l000000000040BE65 l000000000040BEC4
l000000000040BE65:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000040BD01
	// succ:  l000000000040BE6E l000000000040BD01
l000000000040BE6E:
	edx = Mem0[rsi + 0x38<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - Mem0[rsi + 0x3C<64>:word32])
	branch Test(GE,SO) l000000000040BD01
	// succ:  l000000000040BE7A l000000000040BD01
l000000000040BE7A:
	rax = Mem0[rsi + 0x30<64>:word64]
	rcx = CONVERT(edx, word32, int64)
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	Mem0[rax + rcx * 8<64>:word64] = rdi
	Mem0[rsi + 0x38<64>:word32] = edx
	// succ:  l000000000040BE8B
l000000000040BE8B:
	rdx = Mem0[rsi + 0x18<64>:word64]
	ebx = CONVERT(Mem0[rdx:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000040BC80
	// succ:  l000000000040BC80
l000000000040BEA0:
	eax = CONVERT(Mem0[rdx + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rcx = rsi
	eax = eax & 0xFFFFFFDF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(al - 0x54<8>)
	branch Test(NE,Z) l000000000040BEE0
	// succ:  l000000000040BEAE l000000000040BEE0
l000000000040BEAE:
	call fn00000000004080A0 (retsize: 8;)
	// succ:  l000000000040BEB3
l000000000040BEB3:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(NE,Z) l000000000040BE41
	// succ:  l000000000040BEB8 l000000000040BE41
l000000000040BEB8:
	rdx = Mem0[rsi + 0x18<64>:word64]
	rdi = rax
	SCZO = cond(Mem0[rdx:byte] - 0x45<8>)
	branch Test(NE,Z) l000000000040BE65
	// succ:  l000000000040BEC4 l000000000040BE65
l000000000040BEC4:
	ebx = 0x45<32>
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000040BC8D
	// succ:  l000000000040BC8D
l000000000040BED0:
	rdi = rax
	goto l000000000040BE57
	// succ:  l000000000040BE57
l000000000040BEE0:
	call fn0000000000409850 (retsize: 8;)
	goto l000000000040BEB3
	// succ:  l000000000040BEB3
l000000000040BEF0:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000040BD01
	// succ:  l000000000040BEF9 l000000000040BD01
l000000000040BEF9:
	rcx = rsi
	call fn0000000000409C60 (retsize: 8;)
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040BE46
	// succ:  l000000000040BE46
l000000000040BF10:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	call fn0000000000403990 (retsize: 8;)
	SZO = cond(rdi & rdi)
	C = false
	branch Test(NE,Z) l000000000040BE41
	// succ:  l000000000040BF26 l000000000040BE41
l000000000040BF26:
	rdx = Mem0[rsi + 0x18<64>:word64]
	rdi = rax
	ebx = CONVERT(Mem0[rdx:byte], byte, word32)
	rbx = CONVERT(ebx, word32, uint64)
	goto l000000000040BC80
	// succ:  l000000000040BC80
l000000000040BF35:
	rcx = rsi
	call fn0000000000403D80 (retsize: 8;)
	rsp = rsp + 8<64>
	goto l000000000040BEB3
	// succ:  l000000000040BEB3
l000000000040BF42:
	rax = rdx + 1<64>
	Mem0[rsi + 0x18<64>:word64] = rax
	eax = CONVERT(Mem0[rdx + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x73<8>)
	branch Test(EQ,Z) l000000000040C044
	// succ:  l000000000040BF56 l000000000040C044
l000000000040BF56:
	SCZO = cond(al - 0x64<8>)
	branch Test(EQ,Z) l000000000040BFA1
	// succ:  l000000000040BF5A l000000000040BFA1
l000000000040BF5A:
	rcx = rsi
	call fn000000000040BBC0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r9 = rax
	branch Test(EQ,Z) l000000000040BF80
	// succ:  l000000000040BF6A l000000000040BF80
l000000000040BF6A:
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x44<32>)
	branch Test(EQ,Z) l000000000040BF80
	// succ:  l000000000040BF71 l000000000040BF80
l000000000040BF71:
	SCZO = cond(eax - 0x46<32>)
	branch Test(NE,Z) l000000000040C023
	// succ:  l000000000040BF7A l000000000040C023
l000000000040BF7A:
	// succ:  l000000000040BF80
l000000000040BF80:
	r8 = rdi
	edx = 2<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	call fn0000000000403730 (retsize: 8;)
	rbx = rax
	rax = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000040BBC0_exit
l000000000040BFA1:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rsi
	Mem0[rsi + 0x18<64>:word64] = rdx
	call fn0000000000403D30 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	ebp = eax
	rbp = CONVERT(ebp, word32, uint64)
	branch Test(SG,S) l000000000040BC0C
	// succ:  l000000000040BFBB l000000000040BC0C
l000000000040BFBB:
	rcx = rsi
	call fn000000000040BBC0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000040BFD7
	// succ:  l000000000040BFCB l000000000040BFD7
l000000000040BFCB:
	edx = Mem0[rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - 0x44<32>)
	branch Test(EQ,Z) l000000000040BFD7
	// succ:  l000000000040BFD2 l000000000040BFD7
l000000000040BFD2:
	SCZO = cond(edx - 0x46<32>)
	branch Test(NE,Z) l000000000040C010
	// succ:  l000000000040BFD7 l000000000040C010
l000000000040BFD7:
	edx = Mem0[rsi + 0x28<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	SCZO = cond(edx - Mem0[rsi + 0x2C<64>:word32])
	branch Test(GE,SO) l000000000040BF80
	// succ:  l000000000040BFE2 l000000000040BF80
l000000000040BFE2:
	rax = CONVERT(edx, word32, int64)
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rcx = rax + rax * 2<64>
	rax = Mem0[rsi + 0x20<64>:word64]
	Mem0[rsi + 0x28<64>:word32] = edx
	r9 = rax + rcx * 8<64>
	SZO = cond(r9 & r9)
	C = false
	branch Test(EQ,Z) l000000000040BF80
	// succ:  l000000000040BFFC l000000000040BF80
l000000000040BFFC:
	Mem0[r9:word32] = 0x45<32>
	Mem0[r9 + 0x10<64>:word32] = ebp
	Mem0[r9 + 8<64>:word64] = rbx
	goto l000000000040BF80
	// succ:  l000000000040BF80
l000000000040C010:
	rcx = rsi
	call fn0000000000403DF0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040BFD7
	// succ:  l000000000040C01C l000000000040BFD7
l000000000040C01C:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l000000000040BC0E
	// succ:  l000000000040BC0E
l000000000040C023:
	rcx = rsi
	Mem0[rsp + 0x28<64>:word64] = r9
	call fn0000000000403DF0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	r9 = Mem0[rsp + 0x28<64>:word64]
	branch Test(NE,Z) l000000000040BF80
	// succ:  l000000000040C03D l000000000040BF80
l000000000040C03D:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l000000000040BC0E
	// succ:  l000000000040BC0E
l000000000040C044:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rsi
	Mem0[rsi + 0x18<64>:word64] = rdx
	call fn0000000000403DF0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040BC0C
	// succ:  l000000000040C05C l000000000040BC0C
l000000000040C05C:
	rdx = 0x000000000048F2FC<p64>
	r8d = 0xE<32>
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rsi
	call fn00000000004037B0 (retsize: 8;)
	r9 = rax
	goto l000000000040BF80
	// succ:  l000000000040BF80
l000000000040C079:
	SZO = cond(rdi & rdi)
	C = false
	Mem0[rbp + 0<64>:word64] = rdi
	branch Test(EQ,Z) l000000000040BC0C
	// succ:  l000000000040C086 l000000000040BC0C
l000000000040C086:
	SZO = cond(r12 & r12)
	C = false
	branch Test(EQ,Z) l000000000040C09A
	// succ:  l000000000040C08B l000000000040C09A
l000000000040C08B:
	rax = Mem0[rsp + 0x38<64>:word64]
	Mem0[rsp + 0x38<64>:word64] = r12
	Mem0[r12 + 8<64>:word64] = rax
	// succ:  l000000000040C09A
l000000000040C09A:
	rax = Mem0[rsi + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x45<8>)
	branch Test(NE,Z) l000000000040BC0C
	// succ:  l000000000040C0A7 l000000000040BC0C
l000000000040C0A7:
	rax = rax + 1<64>
	SCZO = cond(rax)
	rbx = Mem0[rsp + 0x38<64>:word64]
	Mem0[rsi + 0x18<64>:word64] = rax
	goto l000000000040BC28
	// succ:  l000000000040BC28
fn000000000040BBC0_exit:


// fn000000000040C0C0
// Return size: 8
define fn000000000040C0C0
fn000000000040C0C0_entry:
	rsp = fp
	// succ:  l000000000040C0C0
l000000000040C0C0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x18<64>:word64]
	rsi = rcx
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	ecx = CONVERT(Mem0[rax:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 0x54<8>)
	branch Test(EQ,Z) l000000000040C193
	// succ:  l000000000040C0E1 l000000000040C193
l000000000040C0E1:
	SCZO = cond(cl - 0x47<8>)
	branch Test(EQ,Z) l000000000040C193
	// succ:  l000000000040C0EA l000000000040C193
l000000000040C0EA:
	rcx = rsi
	call fn000000000040BBC0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	branch Test(EQ,Z) l000000000040C104
	// succ:  l000000000040C0FA l000000000040C104
l000000000040C0FA:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000040C104
	// succ:  l000000000040C0FE l000000000040C104
l000000000040C0FE:
	SZO = cond(Mem0[rsi + 0x10<64>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l000000000040C154
	// succ:  l000000000040C104 l000000000040C154
l000000000040C104:
	rax = Mem0[rsi + 0x18<64>:word64]
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x45<8>)
	dl = CONVERT(Test(EQ,Z), bool, int8)
	SZO = cond(al & al)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	dl = dl | al
	SZO = cond(dl)
	C = false
	branch Test(NE,Z) l000000000040C183
	// succ:  l000000000040C119 l000000000040C183
l000000000040C119:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000040C183
	// succ:  l000000000040C11E l000000000040C183
l000000000040C11E:
	rdx = rbx
	// succ:  l000000000040C121
l000000000040C121:
	eax = Mem0[rdx:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 4<32>)
	branch Test(EQ,Z) l000000000040C1C0
	// succ:  l000000000040C12C l000000000040C1C0
l000000000040C12C:
	branch Test(ULT,C) l000000000040C2D0
	// succ:  l000000000040C132 l000000000040C2D0
l000000000040C132:
	eax = eax - 0x1C<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - 4<32>)
	branch Test(UGT,CZ) l000000000040C2D0
	// succ:  l000000000040C13E l000000000040C2D0
l000000000040C13E:
	rdx = Mem0[rdx + 8<64>:word64]
	SZO = cond(rdx & rdx)
	C = false
	branch Test(NE,Z) l000000000040C121
	// succ:  l000000000040C147 l000000000040C121
l000000000040C147:
	goto l000000000040C22C
	// succ:  l000000000040C22C
l000000000040C150:
	rbx = Mem0[rbx + 8<64>:word64]
	// succ:  l000000000040C154
l000000000040C154:
	eax = Mem0[rbx:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 0x1C<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - 4<32>)
	branch Test(ULE,CZ) l000000000040C150
	// succ:  l000000000040C15E l000000000040C150
l000000000040C15E:
	SCZO = cond(eax - 2<32>)
	branch Test(NE,Z) l000000000040C183
	// succ:  l000000000040C163 l000000000040C183
l000000000040C163:
	rdx = Mem0[rbx + 0x10<64>:word64]
	eax = Mem0[rdx:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 0x1C<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - 4<32>)
	branch Test(UGT,CZ) l000000000040C17F
	// succ:  l000000000040C171 l000000000040C17F
l000000000040C171:
	rdx = Mem0[rdx + 8<64>:word64]
	eax = Mem0[rdx:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 0x1C<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(eax - 4<32>)
	branch Test(ULE,CZ) l000000000040C171
	// succ:  l000000000040C17F l000000000040C171
l000000000040C17F:
	Mem0[rbx + 0x10<64>:word64] = rdx
	// succ:  l000000000040C183
l000000000040C183:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000040C0C0_exit
l000000000040C193:
	ecx = Mem0[rsi + 0x50<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	edx = SLICE(rcx + 0x14<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rsi + 0x50<64>:word32] = edx
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x54<8>)
	branch Test(EQ,Z) l000000000040C290
	// succ:  l000000000040C1A8 l000000000040C290
l000000000040C1A8:
	SCZO = cond(dl - 0x47<8>)
	branch Test(EQ,Z) l000000000040C253
	// succ:  l000000000040C1B1 l000000000040C253
l000000000040C1B1:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000040C0C0_exit
l000000000040C1C0:
	rax = Mem0[rdx + 8<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040C227
	// succ:  l000000000040C1C9 l000000000040C227
l000000000040C1C9:
	edi = Mem0[rax:word32]
	rdi = CONVERT(edi, word32, uint64)
	ecx = SLICE(rdi - 1<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx - 0x32<32>)
	branch Test(UGT,CZ) l000000000040C227
	// succ:  l000000000040C1D3 l000000000040C227
l000000000040C1D3:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = 0x40000000000C0<64>
	rdx = rdx << cl
	SCZO = cond(rdx)
	SZO = cond(rdx & r8)
	C = false
	branch Test(NE,Z) l000000000040C2D0
	// succ:  l000000000040C1EE l000000000040C2D0
l000000000040C1EE:
	edx = edx & 3<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	r9d = 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	branch Test(NE,Z) l000000000040C21E
	// succ:  l000000000040C1F9 l000000000040C21E
l000000000040C1F9:
	goto l000000000040C227
	// succ:  l000000000040C227
l000000000040C200:
	edi = Mem0[rax:word32]
	rdi = CONVERT(edi, word32, uint64)
	ecx = SLICE(rdi - 1<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx - 0x32<32>)
	branch Test(UGT,CZ) l000000000040C227
	// succ:  l000000000040C20A l000000000040C227
l000000000040C20A:
	rdx = r9
	rdx = rdx << cl
	SCZO = cond(rdx)
	SZO = cond(rdx & r8)
	C = false
	branch Test(NE,Z) l000000000040C2D0
	// succ:  l000000000040C219 l000000000040C2D0
l000000000040C219:
	edx = edx & 3<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l000000000040C227
	// succ:  l000000000040C21E l000000000040C227
l000000000040C21E:
	rax = Mem0[rax + 0x10<64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l000000000040C200
	// succ:  l000000000040C227 l000000000040C200
l000000000040C227:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000040C22C
l000000000040C22C:
	rcx = rsi
	call fn00000000004095D0 (retsize: 8;)
	r8 = rbx
	r9 = rax
	edx = 3<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000040C24E_thunk_fn0000000000403730
l000000000040C24E_thunk_fn0000000000403730:
	call fn0000000000403730 (retsize: 0;)
	return
	// succ:  fn000000000040C0C0_exit
l000000000040C253:
	rdx = rax + 1<64>
	Mem0[rsi + 0x18<64>:word64] = rdx
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000040C1B1
	// succ:  l000000000040C265 l000000000040C1B1
l000000000040C265:
	rdx = rax + 2<64>
	Mem0[rsi + 0x18<64>:word64] = rdx
	edi = CONVERT(Mem0[rax + 1<64>:byte], byte, word32)
	rdi = CONVERT(edi, word32, uint64)
	edx = SLICE(rdi - 0x41<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x31<8>)
	branch Test(UGT,CZ) l000000000040C1B1
	// succ:  l000000000040C27D l000000000040C1B1
l000000000040C27D:
	rcx = 0x000000000048F310<p64>
	edx = CONVERT(dl, byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rdx = CONVERT(Mem0[rcx + rdx * 4<64>:word32], word32, int64)
	rcx = rcx + rdx
	SCZO = cond(rcx)
	call rcx (retsize: 0;)
	return
	// succ:  fn000000000040C0C0_exit
l000000000040C290:
	rdx = rax + 1<64>
	Mem0[rsi + 0x18<64>:word64] = rdx
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0<8>)
	branch Test(EQ,Z) l000000000040C1B1
	// succ:  l000000000040C2A2 l000000000040C1B1
l000000000040C2A2:
	rdx = rax + 2<64>
	Mem0[rsi + 0x18<64>:word64] = rdx
	eax = CONVERT(Mem0[rax + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 0x43<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 0x33<8>)
	branch Test(UGT,CZ) l000000000040C1B1
	// succ:  l000000000040C2B9 l000000000040C1B1
l000000000040C2B9:
	rdx = 0x000000000048F3D8<p64>
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = CONVERT(Mem0[rdx + rax * 4<64>:word32], word32, int64)
	rdx = rdx + rax
	SCZO = cond(rdx)
	call rdx (retsize: 0;)
	return
	// succ:  fn000000000040C0C0_exit
l000000000040C2D0:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l000000000040C22C
	// succ:  l000000000040C22C
fn000000000040C0C0_exit:


// fn000000000040C6B0
// Return size: 8
define fn000000000040C6B0
fn000000000040C6B0_entry:
	rsp = fp
	// succ:  l000000000040C6B0
l000000000040C6B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x1F0<64>
	SCZO = cond(rsp)
	rbp = rsp + 0x80<64>
	r14d = CONVERT(Mem0[rcx:byte], byte, word32)
	r14 = CONVERT(r14d, word32, uint64)
	r13 = rcx
	r12 = rdx
	rbx = r8
	SCZO = cond(r14b - 0x5F<8>)
	branch Test(EQ,Z) l000000000040C9C0
	// succ:  l000000000040C6E0 l000000000040C9C0
l000000000040C6E0:
	rdi = 0x000000000048EAE0<p64>
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = r13
	// succ:  l000000000040C6EF
l000000000040C6EF:
	branch rcx == 0<64> l000000000040C6F1
	// succ:  l000000000040C6EF_1 l000000000040C6F1
l000000000040C6EF_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040C6EF
	// succ:  l000000000040C6F1 l000000000040C6EF
l000000000040C6F1:
	dl = CONVERT(Test(UGT,CZ), bool, int8)
	al = CONVERT(Test(ULT,C), bool, int8)
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SCZO = cond(dl - al)
	branch Test(NE,Z) l000000000040C71C
	// succ:  l000000000040C6FD l000000000040C71C
l000000000040C6FD:
	eax = CONVERT(Mem0[r13 + 8<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x5F<8>)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	SCZO = cond(al - 0x2E<8>)
	dl = CONVERT(Test(EQ,Z), bool, int8)
	cl = cl | dl
	SZO = cond(cl)
	C = false
	branch Test(NE,Z) l000000000040C98D
	// succ:  l000000000040C714 l000000000040C98D
l000000000040C714:
	SCZO = cond(al - 0x24<8>)
	branch Test(EQ,Z) l000000000040C98D
	// succ:  l000000000040C71C l000000000040C98D
l000000000040C71C:
	rcx = r13
	eax = strlen(rcx)
	rdx = rax
	rax = r13 + 0<64> + rax
	Mem0[rbp - 0x60<64>:word64] = r13
	Mem0[rbp - 0x50<64>:word32] = 0x11<32>
	Mem0[rbp - 0x48<64>:word64] = r13
	Mem0[rbp - 0x58<64>:word64] = rax
	eax = SLICE(rdx + rdx, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	Mem0[rbp - 0x38<64>:word32] = 0<32>
	Mem0[rbp - 0x24<64>:word32] = edx
	Mem0[rbp - 0x28<64>:word32] = 0<32>
	Mem0[rbp - 0x34<64>:word32] = eax
	rax = CONVERT(eax, int32, int64)
	Mem0[rbp - 0x20<64>:word32] = 0<32>
	rax = rax + rax * 2<64>
	Mem0[rbp - 0x18<64>:word64] = 0<64>
	Mem0[rbp - 0x10<64>:word32] = 0<32>
	Mem0[rbp - 0xC<64>:word32] = 0<32>
	Mem0[rbp - 8<64>:word32] = 0<32>
	rax = CONVERT(0x10<32> + rax * 8<64>, word32, word64)
	call fn00000000004116F0 (retsize: 8;)
	rdx = CONVERT(edx, word32, int64)
	rsp = rsp - rax
	SCZO = cond(rsp)
	rax = CONVERT(0x16<32> + rdx * 8<64>, word32, word64)
	rcx = rsp + 0x20<64>
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	SCZO = cond(edi - 1<32>)
	Mem0[rbp - 0x40<64>:word64] = rcx
	rax = rsp + 0x20<64>
	Mem0[rbp - 0x30<64>:word64] = rax
	branch Test(EQ,Z) l000000000040C9D4
	// succ:  l000000000040C7C2 l000000000040C9D4
l000000000040C7C2:
	branch Test(ULT,C) l000000000040C9EE
	// succ:  l000000000040C7C8 l000000000040C9EE
l000000000040C7C8:
	SCZO = cond(edi - 3<32>)
	branch Test(UGT,CZ) l000000000040C9EE
	// succ:  l000000000040C7D1 l000000000040C9EE
l000000000040C7D1:
	SCZO = cond(Mem0[r13 + 0xB<64>:byte] - 0x5F<8>)
	r14 = r13 + 0xB<64>
	Mem0[rbp - 0x48<64>:word64] = r14
	branch Test(NE,Z) l000000000040C7EB
	// succ:  l000000000040C7E0 l000000000040C7EB
l000000000040C7E0:
	SCZO = cond(Mem0[r13 + 0xC<64>:byte] - 0x5A<8>)
	branch Test(EQ,Z) l000000000040CB0B
	// succ:  l000000000040C7EB l000000000040CB0B
l000000000040C7EB:
	rsi = rbp - 0x60<64>
	rcx = r14
	eax = strlen(rcx)
	rdx = r14
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	rcx = rsi
	call fn00000000004037B0 (retsize: 8;)
	// succ:  l000000000040C805
l000000000040C805:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	SCZO = cond(edi - 2<32>)
	rcx = rsi
	dl = CONVERT(Test(NE,Z), bool, int8)
	r8 = rax
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = edx + 0x42<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	call fn0000000000403730 (retsize: 8;)
	rsi = Mem0[rbp - 0x48<64>:word64]
	rdi = rax
	rcx = rsi
	eax = strlen(rcx)
	rax = rax + rsi
	SCZO = cond(rax)
	Mem0[rbp - 0x48<64>:word64] = rax
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000040C837
l000000000040C837:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000040C9DA
	// succ:  l000000000040C83F l000000000040C9DA
l000000000040C83F:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000040C9DA
	// succ:  l000000000040C848 l000000000040C9DA
l000000000040C848:
	rdx = rbp + 0x14C<64>
	rcx = rbp + 0x15C<64>
	r8 = rdi
	Mem0[rbp + 0x118<64>:word64] = rbx
	Mem0[rbp + 0x100<64>:word64] = 0<64>
	rbx = rsp
	Mem0[rbp + 0x108<64>:byte] = 0<8>
	Mem0[rbp + 0x120<64>:word64] = 0<64>
	Mem0[rbp + 0x128<64>:word64] = 0<64>
	Mem0[rbp + 0x134<64>:word32] = 0<32>
	Mem0[rbp + 0x138<64>:word32] = 0<32>
	Mem0[rbp + 0x110<64>:word64] = r12
	Mem0[rbp + 0x130<64>:word32] = 0<32>
	Mem0[rbp + 0x140<64>:word64] = 0<64>
	Mem0[rbp + 0x148<64>:word32] = 0<32>
	Mem0[rbp + 0x14C<64>:word32] = 0<32>
	Mem0[rbp + 0x150<64>:word64] = 0<64>
	Mem0[rbp + 0x158<64>:word32] = 0<32>
	Mem0[rbp + 0x15C<64>:word32] = 0<32>
	call fn0000000000403B70 (retsize: 8;)
	rax = CONVERT(Mem0[rbp + 0x14C<64>:word32], word32, int64)
	edx = Mem0[rbp + 0x15C<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbp + 0x160<64>:word64] = 0<64>
	edx = edx *s eax
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rax = rax << 4<64>
	SCZO = cond(rax)
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	Mem0[rbp + 0x15C<64>:word32] = edx
	call fn00000000004116F0 (retsize: 8;)
	rsp = rsp - rax
	SCZO = cond(rsp)
	rax = CONVERT(edx, word32, int64)
	rax = rax << 4<64>
	SCZO = cond(rax)
	rcx = rsp + 0x20<64>
	rax = rax + 0x10<64>
	SCZO = cond(rax)
	call fn00000000004116F0 (retsize: 8;)
	edx = 0x11<32>
	rdx = CONVERT(edx, word32, uint64)
	rsp = rsp - rax
	SCZO = cond(rsp)
	Mem0[rbp + 0x140<64>:word64] = rcx
	r8 = rdi
	rax = rsp + 0x20<64>
	rcx = rbp
	Mem0[rbp + 0x150<64>:word64] = rax
	call fn00000000004042F0 (retsize: 8;)
	rdx = Mem0[rbp + 0x100<64>:word64]
	rsp = rbx
	r8 = Mem0[rbp + 0x118<64>:word64]
	rcx = rbp
	Mem0[rbp + 0<64> + rdx:byte] = 0<8>
	call Mem0[rbp + 0x110<64>:word64] (retsize: 8;)
	edx = Mem0[rbp + 0x130<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SZO = cond(edx & edx)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	goto l000000000040C9DC
	// succ:  l000000000040C9DC
l000000000040C98D:
	eax = CONVERT(Mem0[r13 + 9<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x49<8>)
	dl = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(EQ,Z) l000000000040C9A3
	// succ:  l000000000040C999 l000000000040C9A3
l000000000040C999:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SCZO = cond(al - 0x44<8>)
	branch Test(NE,Z) l000000000040C71C
	// succ:  l000000000040C9A3 l000000000040C71C
l000000000040C9A3:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SCZO = cond(Mem0[r13 + 0xA<64>:byte] - 0x5F<8>)
	branch Test(NE,Z) l000000000040C71C
	// succ:  l000000000040C9B0 l000000000040C71C
l000000000040C9B0:
	edi = edx
	rdi = CONVERT(edi, word32, uint64)
	edi = edi << 0x1F<32>
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	edi = edi >> 0x1F<32>
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	edi = edi + 3<32>
	rdi = CONVERT(edi, word32, uint64)
	SCZO = cond(edi)
	goto l000000000040C71C
	// succ:  l000000000040C71C
l000000000040C9C0:
	SCZO = cond(Mem0[rcx + 1<64>:byte] - 0x5A<8>)
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	branch Test(NE,Z) l000000000040C6E0
	// succ:  l000000000040C9CF l000000000040C6E0
l000000000040C9CF:
	goto l000000000040C71C
	// succ:  l000000000040C71C
l000000000040C9D4:
	SCZO = cond(r14b - 0x5F<8>)
	branch Test(EQ,Z) l000000000040CA06
	// succ:  l000000000040C9DA l000000000040CA06
l000000000040C9DA:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000040C9DC
l000000000040C9DC:
	rsp = rbp + 0x170<64>
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000040C6B0_exit
l000000000040C9EE:
	rcx = rbp - 0x60<64>
	call fn00000000004080A0 (retsize: 8;)
	rdi = rax
	rax = Mem0[rbp - 0x48<64>:word64]
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000040C837
	// succ:  l000000000040C837
l000000000040CA06:
	SCZO = cond(Mem0[r13 + 1<64>:byte] - 0x5A<8>)
	branch Test(NE,Z) l000000000040C9DA
	// succ:  l000000000040CA0D l000000000040C9DA
l000000000040CA0D:
	rsi = rbp - 0x60<64>
	r13 = r13 + 2<64>
	SCZO = cond(r13)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbp - 0x48<64>:word64] = r13
	rcx = rsi
	call fn000000000040C0C0 (retsize: 8;)
	SZO = cond(Mem0[rbp - 0x50<64>:byte] & 1<8>)
	C = false
	rdi = rax
	branch Test(NE,Z) l000000000040CA65
	// succ:  l000000000040CA2F l000000000040CA65
l000000000040CA2F:
	rax = Mem0[rbp - 0x48<64>:word64]
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000040C837
	// succ:  l000000000040C837
l000000000040CA40:
	Mem0[rbp - 0x48<64>:word64] = r8
	rcx = rsi
	r8d = r8d - edx
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8d)
	call fn00000000004037B0 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 0x4B<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rsi
	call fn0000000000403730 (retsize: 8;)
	rdi = rax
	// succ:  l000000000040CA65
l000000000040CA65:
	rdx = Mem0[rbp - 0x48<64>:word64]
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x2E<8>)
	branch Test(NE,Z) l000000000040C837
	// succ:  l000000000040CA74 l000000000040C837
l000000000040CA74:
	eax = CONVERT(Mem0[rdx + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = SLICE(rax - 0x61<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 0x19<8>)
	branch Test(ULE,CZ) l000000000040CAE2
	// succ:  l000000000040CA80 l000000000040CAE2
l000000000040CA80:
	SCZO = cond(al - 0x5F<8>)
	branch Test(EQ,Z) l000000000040CAE2
	// succ:  l000000000040CA84 l000000000040CAE2
l000000000040CA84:
	eax = eax - 0x30<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 9<8>)
	branch Test(UGT,CZ) l000000000040CB26
	// succ:  l000000000040CA8F l000000000040CB26
l000000000040CA8F:
	r10d = CONVERT(Mem0[rdx:byte], byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	r8 = rdx
	// succ:  l000000000040CAA0
l000000000040CAA0:
	SCZO = cond(r10b - 0x2E<8>)
	branch Test(NE,Z) l000000000040CA40
	// succ:  l000000000040CAA6 l000000000040CA40
l000000000040CAA6:
	eax = CONVERT(Mem0[r8 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 0x30<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 9<8>)
	branch Test(UGT,CZ) l000000000040CA40
	// succ:  l000000000040CAB2 l000000000040CA40
l000000000040CAB2:
	r10d = CONVERT(Mem0[r8 + 2<64>:byte], byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	rcx = r8 + 2<64>
	r8 = rcx
	eax = SLICE(r10 - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 9<8>)
	branch Test(UGT,CZ) l000000000040CAA0
	// succ:  l000000000040CAC6 l000000000040CAA0
l000000000040CAC6:
	// succ:  l000000000040CAD0
l000000000040CAD0:
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	r10d = CONVERT(Mem0[r8:byte], byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	eax = SLICE(r10 - 0x30<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 9<8>)
	branch Test(ULE,CZ) l000000000040CAD0
	// succ:  l000000000040CAE0 l000000000040CAD0
l000000000040CAE0:
	goto l000000000040CAA0
	// succ:  l000000000040CAA0
l000000000040CAE2:
	r10d = CONVERT(Mem0[rdx + 2<64>:byte], byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	r8 = rdx + 2<64>
	eax = SLICE(r10 - 0x61<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x19<8>)
	branch Test(UGT,CZ) l000000000040CB03
	// succ:  l000000000040CAF3 l000000000040CB03
l000000000040CAF3:
	r8 = r8 + 1<64>
	SCZO = cond(r8)
	r10d = CONVERT(Mem0[r8:byte], byte, word32)
	r10 = CONVERT(r10d, word32, uint64)
	eax = SLICE(r10 - 0x61<64>, word32, 0)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x19<8>)
	branch Test(ULE,CZ) l000000000040CAF3
	// succ:  l000000000040CB03 l000000000040CAF3
l000000000040CB03:
	SCZO = cond(r10b - 0x5F<8>)
	branch Test(EQ,Z) l000000000040CAF3
	// succ:  l000000000040CB09 l000000000040CAF3
l000000000040CB09:
	goto l000000000040CAA0
	// succ:  l000000000040CAA0
l000000000040CB0B:
	rsi = rbp - 0x60<64>
	r13 = r13 + 0xD<64>
	SCZO = cond(r13)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbp - 0x48<64>:word64] = r13
	rcx = rsi
	call fn000000000040C0C0 (retsize: 8;)
	goto l000000000040C805
	// succ:  l000000000040C805
l000000000040CB26:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000040C837
	// succ:  l000000000040C837
fn000000000040C6B0_exit:


// fn000000000040CB30
// Return size: 8
define fn000000000040CB30
fn000000000040CB30_entry:
	rsp = fp
	// succ:  l000000000040CB30
l000000000040CB30:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x48<64>
	SCZO = cond(rsp)
	r14d = 3<32>
	r14 = CONVERT(r14d, word32, uint64)
	rbx = rcx
	rcx = Mem0[rcx + 0x18<64>:word64]
	r13d = edx
	r13 = CONVERT(r13d, word32, uint64)
	Mem0[rsp + 0x38<64>:word64] = 0<64>
	rbp = rsp + 0x38<64>
	SCZO = cond(Mem0[rcx:byte] - dl)
	branch Test(EQ,Z) l000000000040D195
	// succ:  l000000000040CB66 l000000000040D195
l000000000040CB66:
	// succ:  l000000000040CB70
l000000000040CB70:
	r12d = Mem0[rbx + 0x54<64>:word32]
	r12 = CONVERT(r12d, word32, uint64)
	Mem0[rbx + 0x54<64>:word32] = 1<32>
	eax = CONVERT(Mem0[rcx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x4C<8>)
	branch Test(EQ,Z) l000000000040CD80
	// succ:  l000000000040CB86 l000000000040CD80
l000000000040CB86:
	SCZO = cond(al - 0x54<8>)
	branch Test(EQ,Z) l000000000040CDA0
	// succ:  l000000000040CB8E l000000000040CDA0
l000000000040CB8E:
	SCZO = cond(al - 0x73<8>)
	branch Test(EQ,Z) l000000000040CCA0
	// succ:  l000000000040CB96 l000000000040CCA0
l000000000040CB96:
	SCZO = cond(al - 0x66<8>)
	branch Test(EQ,Z) l000000000040CCE0
	// succ:  l000000000040CB9E l000000000040CCE0
l000000000040CB9E:
	edx = SLICE(rax - 0x30<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 9<8>)
	branch Test(ULE,CZ) l000000000040CC32
	// succ:  l000000000040CBAA l000000000040CC32
l000000000040CBAA:
	SCZO = cond(al - 0x6F<8>)
	branch Test(EQ,Z) l000000000040CC24
	// succ:  l000000000040CBAE l000000000040CC24
l000000000040CBAE:
	SCZO = cond(al - 0x74<8>)
	dl = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(NE,Z) l000000000040D21E
	// succ:  l000000000040CBB9 l000000000040D21E
l000000000040CBB9:
	SCZO = cond(Mem0[rcx + 1<64>:byte] - 0x6C<8>)
	branch Test(EQ,Z) l000000000040CEC0
	// succ:  l000000000040CBC3 l000000000040CEC0
l000000000040CBC3:
	rcx = rbx
	call fn00000000004096B0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l000000000040CD65
	// succ:  l000000000040CBD7 l000000000040CD65
l000000000040CBD7:
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x31<32>)
	branch Test(EQ,Z) l000000000040CDB0
	// succ:  l000000000040CBE2 l000000000040CDB0
l000000000040CBE2:
	SCZO = cond(eax - 0x32<32>)
	branch Test(EQ,Z) l000000000040CD40
	// succ:  l000000000040CBEB l000000000040CD40
l000000000040CBEB:
	SCZO = cond(eax - 0x33<32>)
	branch Test(NE,Z) l000000000040CD65
	// succ:  l000000000040CBF4 l000000000040CD65
l000000000040CBF4:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040D1C0
	// succ:  l000000000040CC01 l000000000040D1C0
l000000000040CC01:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040CC09
l000000000040CC09:
	r8 = r15
	r9 = rax
	edx = 0x35<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040CD90
	// succ:  l000000000040CD90
l000000000040CC24:
	SCZO = cond(Mem0[rcx + 1<64>:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040CBC3
	// succ:  l000000000040CC2A l000000000040CBC3
l000000000040CC2A:
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	Mem0[rbx + 0x18<64>:word64] = rcx
	// succ:  l000000000040CC32
l000000000040CC32:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040CD65
	// succ:  l000000000040CC43 l000000000040CD65
l000000000040CC43:
	rdx = Mem0[rbx + 0x18<64>:word64]
	r8 = rax
	SCZO = cond(Mem0[rdx:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040CF00
	// succ:  l000000000040CC53 l000000000040CF00
l000000000040CC53:
	Mem0[rbx + 0x54<64>:word32] = r12d
	// succ:  l000000000040CC57
l000000000040CC57:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = 0x2E<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	Mem0[rbp + 0<64>:word64] = rax
	branch Test(EQ,Z) l000000000040CD69
	// succ:  l000000000040CC74 l000000000040CD69
l000000000040CC74:
	rcx = Mem0[rbx + 0x18<64>:word64]
	rbp = rax + 0x10<64>
	SCZO = cond(Mem0[rcx:byte] - r13b)
	branch Test(NE,Z) l000000000040CB70
	// succ:  l000000000040CC85 l000000000040CB70
l000000000040CC85:
	rcx = rcx + 1<64>
	SCZO = cond(rcx)
	rax = Mem0[rsp + 0x38<64>:word64]
	Mem0[rbx + 0x18<64>:word64] = rcx
	goto l000000000040CD6B
	// succ:  l000000000040CD6B
l000000000040CCA0:
	eax = CONVERT(Mem0[rcx + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x72<8>)
	branch Test(EQ,Z) l000000000040D034
	// succ:  l000000000040CCAC l000000000040D034
l000000000040CCAC:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l000000000040CBC3
	// succ:  l000000000040CCB4 l000000000040CBC3
l000000000040CCB4:
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	Mem0[rbx + 0x18<64>:word64] = rcx
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rax
	edx = 0x49<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040CD90
	// succ:  l000000000040CD90
l000000000040CCE0:
	SCZO = cond(Mem0[rcx + 1<64>:byte] - 0x70<8>)
	branch Test(NE,Z) l000000000040CBC3
	// succ:  l000000000040CCEA l000000000040CBC3
l000000000040CCEA:
	rax = rcx + 2<64>
	Mem0[rbx + 0x18<64>:word64] = rax
	SCZO = cond(Mem0[rcx + 2<64>:byte] - 0x54<8>)
	branch Test(EQ,Z) l000000000040CF30
	// succ:  l000000000040CCFC l000000000040CF30
l000000000040CCFC:
	rcx = rbx
	call fn0000000000403D30 (retsize: 8;)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	branch Test(EQ,Z) l000000000040CD65
	// succ:  l000000000040CD09 l000000000040CD65
l000000000040CD09:
	edx = Mem0[rbx + 0x28<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - Mem0[rbx + 0x2C<64>:word32])
	branch Test(GE,SO) l000000000040CD65
	// succ:  l000000000040CD11 l000000000040CD65
l000000000040CD11:
	rcx = CONVERT(edx, word32, int64)
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r8 = rcx + rcx * 2<64>
	rcx = Mem0[rbx + 0x20<64>:word64]
	Mem0[rbx + 0x28<64>:word32] = edx
	r8 = rcx + r8 * 8<64>
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l000000000040CD65
	// succ:  l000000000040CD2B l000000000040CD65
l000000000040CD2B:
	Mem0[r8:word32] = 6<32>
	Mem0[r8 + 8<64>:word32] = eax
	goto l000000000040CC53
	// succ:  l000000000040CC53
l000000000040CD40:
	eax = Mem0[r15 + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040CC01
	// succ:  l000000000040CD4D l000000000040CC01
l000000000040CD4D:
	branch Test(LE,SZO) l000000000040CF40
	// succ:  l000000000040CD53 l000000000040CF40
l000000000040CD53:
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000040CF63
	// succ:  l000000000040CD5C l000000000040CF63
l000000000040CD5C:
	SCZO = cond(eax - 3<32>)
	branch Test(EQ,Z) l000000000040D0C0
	// succ:  l000000000040CD65 l000000000040D0C0
l000000000040CD65:
	Mem0[rbx + 0x54<64>:word32] = r12d
	// succ:  l000000000040CD69
l000000000040CD69:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000040CD6B
l000000000040CD6B:
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000040CB30_exit
l000000000040CD80:
	rcx = rbx
	call fn0000000000407F20 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rax
	// succ:  l000000000040CD90
l000000000040CD90:
	SZO = cond(r8 & r8)
	C = false
	Mem0[rbx + 0x54<64>:word32] = r12d
	branch Test(NE,Z) l000000000040CC57
	// succ:  l000000000040CD9D l000000000040CC57
l000000000040CD9D:
	goto l000000000040CD69
	// succ:  l000000000040CD69
l000000000040CDA0:
	rcx = rbx
	call fn0000000000403D80 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rax
	goto l000000000040CD90
	// succ:  l000000000040CD90
l000000000040CDB0:
	r8 = Mem0[r15 + 8<64>:word64]
	rdi = 0x000000000048EDE2<p64>
	rcx = r14
	eax = Mem0[r8 + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rdx = Mem0[r8:word64]
	eax = eax - 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	v33 = Mem0[rbx + 0x50<64>:word32] + eax
	Mem0[rbx + 0x50<64>:word32] = v33
	SCZO = cond(v33)
	rsi = rdx
	// succ:  l000000000040CDCE
l000000000040CDCE:
	branch rcx == 0<64> l000000000040CDD0
	// succ:  l000000000040CDCE_1 l000000000040CDD0
l000000000040CDCE_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040CDCE
	// succ:  l000000000040CDD0 l000000000040CDCE
l000000000040CDD0:
	branch Test(EQ,Z) l000000000040D0D0
	// succ:  l000000000040CDD6 l000000000040D0D0
l000000000040CDD6:
	eax = Mem0[r8 + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040D07A
	// succ:  l000000000040CDE3 l000000000040D07A
l000000000040CDE3:
	branch Test(LE,SZO) l000000000040CF40
	// succ:  l000000000040CDE9 l000000000040CF40
l000000000040CDE9:
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000040CF65
	// succ:  l000000000040CDF2 l000000000040CF65
l000000000040CDF2:
	SCZO = cond(eax - 3<32>)
	branch Test(NE,Z) l000000000040CD65
	// succ:  l000000000040CDFB l000000000040CD65
l000000000040CDFB:
	rdi = 0x000000000048EDEB<p64>
	rsi = rdx
	rcx = r14
	// succ:  l000000000040CE08
l000000000040CE08:
	branch rcx == 0<64> l000000000040CE0A
	// succ:  l000000000040CE08_1 l000000000040CE0A
l000000000040CE08_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040CE08
	// succ:  l000000000040CE0A l000000000040CE08
l000000000040CE0A:
	branch Test(EQ,Z) l000000000040D110
	// succ:  l000000000040CE10 l000000000040D110
l000000000040CE10:
	SCZO = cond(Mem0[rdx:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040CD65
	// succ:  l000000000040CE19 l000000000040CD65
l000000000040CE19:
	eax = CONVERT(Mem0[rdx + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x61<8>)
	branch Test(EQ,Z) l000000000040CE29
	// succ:  l000000000040CE21 l000000000040CE29
l000000000040CE21:
	SCZO = cond(al - 0x77<8>)
	branch Test(NE,Z) l000000000040CD65
	// succ:  l000000000040CE29 l000000000040CD65
l000000000040CE29:
	edx = 0x5F<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn00000000004080A0 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	rdi = rax
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x45<8>)
	branch Test(EQ,Z) l000000000040D1DA
	// succ:  l000000000040CE53 l000000000040D1DA
l000000000040CE53:
	SCZO = cond(al - 0x70<8>)
	branch Test(EQ,Z) l000000000040D1EA
	// succ:  l000000000040CE5B l000000000040D1EA
l000000000040CE5B:
	SCZO = cond(al - 0x69<8>)
	branch Test(NE,Z) l000000000040CD65
	// succ:  l000000000040CE63 l000000000040CD65
l000000000040CE63:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x6C<8>)
	branch Test(NE,Z) l000000000040CD65
	// succ:  l000000000040CE6D l000000000040CD65
l000000000040CE6D:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	r9 = rax
	// succ:  l000000000040CE78
l000000000040CE78:
	r8 = rdi
	edx = 0x3A<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x39<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = r15
	r9 = rax
	edx = 0x38<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040CD90
	// succ:  l000000000040CD90
l000000000040CEC0:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l000000000040D0E0
	// succ:  l000000000040CECA l000000000040D0E0
l000000000040CECA:
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0x18<64>:word64] = rcx
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040CD90
	// succ:  l000000000040CD90
l000000000040CF00:
	rcx = rbx
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn0000000000409C60 (retsize: 8;)
	r8 = Mem0[rsp + 0x20<64>:word64]
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040CD90
	// succ:  l000000000040CD90
l000000000040CF30:
	rcx = rcx + 3<64>
	SCZO = cond(rcx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x18<64>:word64] = rcx
	goto l000000000040CD09
	// succ:  l000000000040CD09
l000000000040CF40:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040CD65
	// succ:  l000000000040CF48 l000000000040CD65
l000000000040CF48:
	r8 = r15
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = 0x34<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040CD90
	// succ:  l000000000040CD90
l000000000040CF63:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	// succ:  l000000000040CF65
l000000000040CF65:
	rax = Mem0[r15 + 8<64>:word64]
	rax = Mem0[rax:word64]
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x63<8>)
	branch Test(EQ,Z) l000000000040D140
	// succ:  l000000000040CF76 l000000000040D140
l000000000040CF76:
	rcx = rbx
	Mem0[rsp + 0x28<64>:word64] = rdx
	call fn000000000040D230 (retsize: 8;)
	rdx = Mem0[rsp + 0x28<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	// succ:  l000000000040CF8D
l000000000040CF8D:
	rdi = 0x000000000048EDE5<p64>
	rsi = rdx
	rcx = r14
	// succ:  l000000000040CF9A
l000000000040CF9A:
	branch rcx == 0<64> l000000000040CF9C
	// succ:  l000000000040CF9A_1 l000000000040CF9C
l000000000040CF9A_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040CF9A
	// succ:  l000000000040CF9C l000000000040CF9A
l000000000040CF9C:
	branch Test(EQ,Z) l000000000040D0F4
	// succ:  l000000000040CFA2 l000000000040D0F4
l000000000040CFA2:
	rdi = 0x000000000048F0CF<p64>
	rsi = rdx
	rcx = r14
	// succ:  l000000000040CFAF
l000000000040CFAF:
	branch rcx == 0<64> l000000000040CFB1
	// succ:  l000000000040CFAF_2 l000000000040CFB1
l000000000040CFAF_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040CFAF
	// succ:  l000000000040CFB1 l000000000040CFAF
l000000000040CFB1:
	branch Test(EQ,Z) l000000000040D000
	// succ:  l000000000040CFB3 l000000000040D000
l000000000040CFB3:
	rdi = 0x000000000048F0D2<p64>
	rsi = rdx
	rcx = r14
	// succ:  l000000000040CFC0
l000000000040CFC0:
	branch rcx == 0<64> l000000000040CFC2
	// succ:  l000000000040CFC0_3 l000000000040CFC2
l000000000040CFC0_3:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040CFC0
	// succ:  l000000000040CFC2 l000000000040CFC0
l000000000040CFC2:
	branch Test(EQ,Z) l000000000040D000
	// succ:  l000000000040CFC4 l000000000040D000
l000000000040CFC4:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rdi = rax
	// succ:  l000000000040CFD0
l000000000040CFD0:
	r8 = Mem0[rsp + 0x20<64>:word64]
	r9 = rdi
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = r15
	r9 = rax
	edx = 0x36<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040CD90
	// succ:  l000000000040CD90
l000000000040D000:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	rdi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(NE,Z) l000000000040CFD0
	// succ:  l000000000040D014 l000000000040CFD0
l000000000040D014:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rdi = rax
	goto l000000000040CFD0
	// succ:  l000000000040CFD0
l000000000040D034:
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	Mem0[rbx + 0x18<64>:word64] = rcx
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn0000000000409850 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	rdi = rax
	r9 = rax
	SCZO = cond(Mem0[rdx:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040D172
	// succ:  l000000000040D062 l000000000040D172
l000000000040D062:
	r8 = rsi
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040CD90
	// succ:  l000000000040CD90
l000000000040D07A:
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x6D<8>)
	branch Test(EQ,Z) l000000000040D089
	// succ:  l000000000040D081 l000000000040D089
l000000000040D081:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l000000000040CC01
	// succ:  l000000000040D089 l000000000040CC01
l000000000040D089:
	SCZO = cond(al - Mem0[rdx + 1<64>:byte])
	branch Test(NE,Z) l000000000040CC01
	// succ:  l000000000040D092 l000000000040CC01
l000000000040D092:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040D211
	// succ:  l000000000040D09F l000000000040D211
l000000000040D09F:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = rax
	r9 = rax
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	goto l000000000040CC09
	// succ:  l000000000040CC09
l000000000040D0C0:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	goto l000000000040CDFB
	// succ:  l000000000040CDFB
l000000000040D0D0:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	goto l000000000040CC09
	// succ:  l000000000040CC09
l000000000040D0E0:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	rcx = Mem0[rbx + 0x18<64>:word64]
	rdi = rax
	goto l000000000040CECA
	// succ:  l000000000040CECA
l000000000040D0F4:
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rdi = rax
	goto l000000000040CFD0
	// succ:  l000000000040CFD0
l000000000040D110:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	rdi = rax
	call fn000000000040D230 (retsize: 8;)
	r9 = rax
	goto l000000000040CE78
	// succ:  l000000000040CE78
l000000000040D140:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	ecx = SLICE(rax - 0x72<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 1<8>)
	branch Test(ULE,CZ) l000000000040D156
	// succ:  l000000000040D14B l000000000040D156
l000000000040D14B:
	eax = eax - 0x63<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 1<8>)
	branch Test(UGT,CZ) l000000000040CF76
	// succ:  l000000000040D156 l000000000040CF76
l000000000040D156:
	rcx = rbx
	Mem0[rsp + 0x28<64>:word64] = rdx
	call fn00000000004080A0 (retsize: 8;)
	rdx = Mem0[rsp + 0x28<64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	goto l000000000040CF8D
	// succ:  l000000000040CF8D
l000000000040D172:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r9 = rax
	goto l000000000040D062
	// succ:  l000000000040D062
l000000000040D195:
	rcx = rcx + 1<64>
	SCZO = cond(rcx)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	Mem0[rbx + 0x18<64>:word64] = rcx
	edx = 0x2E<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	rsp = rsp + 0x48<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000040D1BB_thunk_fn0000000000403730
l000000000040D1BB_thunk_fn0000000000403730:
	call fn0000000000403730 (retsize: 0;)
	return
	// succ:  fn000000000040CB30_exit
l000000000040D1C0:
	rax = rax + 1<64>
	SCZO = cond(rax)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040CB30 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	goto l000000000040CC09
	// succ:  l000000000040CC09
l000000000040D1DA:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	Mem0[rbx + 0x18<64>:word64] = rdx
	goto l000000000040CE78
	// succ:  l000000000040CE78
l000000000040D1EA:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x69<8>)
	branch Test(NE,Z) l000000000040CD65
	// succ:  l000000000040D1F4 l000000000040CD65
l000000000040D1F4:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000040CB30 (retsize: 8;)
	r9 = rax
	goto l000000000040CE78
	// succ:  l000000000040CE78
l000000000040D211:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	goto l000000000040CC01
	// succ:  l000000000040CC01
l000000000040D21E:
	SCZO = cond(al - 0x69<8>)
	branch Test(EQ,Z) l000000000040CBB9
	// succ:  l000000000040D226 l000000000040CBB9
l000000000040D226:
	goto l000000000040CBC3
	// succ:  l000000000040CBC3
fn000000000040CB30_exit:


// fn000000000040D230
// Return size: 8
define fn000000000040D230
fn000000000040D230_entry:
	rsp = fp
	// succ:  l000000000040D230
l000000000040D230:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdx = Mem0[rcx + 0x18<64>:word64]
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x4C<8>)
	branch Test(EQ,Z) l000000000040D4F0
	// succ:  l000000000040D24B l000000000040D4F0
l000000000040D24B:
	SCZO = cond(al - 0x54<8>)
	branch Test(EQ,Z) l000000000040D501
	// succ:  l000000000040D253 l000000000040D501
l000000000040D253:
	SCZO = cond(al - 0x73<8>)
	rbx = rcx
	branch Test(EQ,Z) l000000000040D373
	// succ:  l000000000040D25E l000000000040D373
l000000000040D25E:
	SCZO = cond(al - 0x66<8>)
	branch Test(EQ,Z) l000000000040D313
	// succ:  l000000000040D266 l000000000040D313
l000000000040D266:
	ecx = SLICE(rax - 0x30<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 9<8>)
	branch Test(UGT,CZ) l000000000040D2A0
	// succ:  l000000000040D26E l000000000040D2A0
l000000000040D26E:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rsi = rax
	branch Test(EQ,Z) l000000000040D4C0
	// succ:  l000000000040D282 l000000000040D4C0
l000000000040D282:
	rdx = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rdx:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040D5F0
	// succ:  l000000000040D28F l000000000040D5F0
l000000000040D28F:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000040D230_exit
l000000000040D2A0:
	SCZO = cond(al - 0x6F<8>)
	branch Test(EQ,Z) l000000000040D4D0
	// succ:  l000000000040D2A8 l000000000040D4D0
l000000000040D2A8:
	SCZO = cond(al - 0x74<8>)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(NE,Z) l000000000040D80D
	// succ:  l000000000040D2B3 l000000000040D80D
l000000000040D2B3:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x6C<8>)
	branch Test(EQ,Z) l000000000040D480
	// succ:  l000000000040D2BD l000000000040D480
l000000000040D2BD:
	rcx = rbx
	call fn00000000004096B0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l000000000040D4C0
	// succ:  l000000000040D2D1 l000000000040D4C0
l000000000040D2D1:
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x31<32>)
	branch Test(EQ,Z) l000000000040D3A4
	// succ:  l000000000040D2DC l000000000040D3A4
l000000000040D2DC:
	SCZO = cond(eax - 0x32<32>)
	branch Test(EQ,Z) l000000000040D512
	// succ:  l000000000040D2E5 l000000000040D512
l000000000040D2E5:
	SCZO = cond(eax - 0x33<32>)
	branch Test(NE,Z) l000000000040D4C0
	// succ:  l000000000040D2EE l000000000040D4C0
l000000000040D2EE:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040D678
	// succ:  l000000000040D2FB l000000000040D678
l000000000040D2FB:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040D303
l000000000040D303:
	r9 = rax
	r8 = rbp
	edx = 0x35<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040D4AA
	// succ:  l000000000040D4AA
l000000000040D313:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x70<8>)
	branch Test(NE,Z) l000000000040D2BD
	// succ:  l000000000040D319 l000000000040D2BD
l000000000040D319:
	rax = rdx + 2<64>
	Mem0[rcx + 0x18<64>:word64] = rax
	SCZO = cond(Mem0[rdx + 2<64>:byte] - 0x54<8>)
	branch Test(EQ,Z) l000000000040D650
	// succ:  l000000000040D32B l000000000040D650
l000000000040D32B:
	call fn0000000000403D30 (retsize: 8;)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	ecx = eax
	rcx = CONVERT(ecx, word32, uint64)
	branch Test(EQ,Z) l000000000040D4C0
	// succ:  l000000000040D33B l000000000040D4C0
l000000000040D33B:
	edx = Mem0[rbx + 0x28<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - Mem0[rbx + 0x2C<64>:word32])
	branch Test(GE,SO) l000000000040D4C0
	// succ:  l000000000040D347 l000000000040D4C0
l000000000040D347:
	rax = CONVERT(edx, word32, int64)
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r8 = rax + rax * 2<64>
	rax = Mem0[rbx + 0x20<64>:word64]
	Mem0[rbx + 0x28<64>:word32] = edx
	rax = rax + r8 * 8<64>
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040D4C0
	// succ:  l000000000040D365 l000000000040D4C0
l000000000040D365:
	Mem0[rax:word32] = 6<32>
	Mem0[rax + 8<64>:word32] = ecx
	goto l000000000040D28F
	// succ:  l000000000040D28F
l000000000040D373:
	eax = CONVERT(Mem0[rdx + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x72<8>)
	branch Test(EQ,Z) l000000000040D610
	// succ:  l000000000040D37F l000000000040D610
l000000000040D37F:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l000000000040D2BD
	// succ:  l000000000040D387 l000000000040D2BD
l000000000040D387:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rcx + 0x18<64>:word64] = rdx
	call fn000000000040D230 (retsize: 8;)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rax
	edx = 0x49<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040D4AA
	// succ:  l000000000040D4AA
l000000000040D3A4:
	rdx = Mem0[rbp + 8<64>:word64]
	rdi = 0x000000000048EDE2<p64>
	ecx = 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	eax = Mem0[rdx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r12 = Mem0[rdx:word64]
	eax = eax - 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	v35 = Mem0[rbx + 0x50<64>:word32] + eax
	Mem0[rbx + 0x50<64>:word32] = v35
	SCZO = cond(v35)
	rsi = r12
	// succ:  l000000000040D3C3
l000000000040D3C3:
	branch rcx == 0<64> l000000000040D3C5
	// succ:  l000000000040D3C3_1 l000000000040D3C5
l000000000040D3C3_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040D3C3
	// succ:  l000000000040D3C5 l000000000040D3C3
l000000000040D3C5:
	branch Test(EQ,Z) l000000000040D6E0
	// succ:  l000000000040D3CB l000000000040D6E0
l000000000040D3CB:
	eax = Mem0[rdx + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040D692
	// succ:  l000000000040D3D7 l000000000040D692
l000000000040D3D7:
	branch Test(LE,SZO) l000000000040D660
	// succ:  l000000000040D3DD l000000000040D660
l000000000040D3DD:
	SCZO = cond(eax - 2<32>)
	branch Test(NE,Z) l000000000040D530
	// succ:  l000000000040D3E6 l000000000040D530
l000000000040D3E6:
	rax = Mem0[rbp + 8<64>:word64]
	rax = Mem0[rax:word64]
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x63<8>)
	branch Test(EQ,Z) l000000000040D745
	// succ:  l000000000040D3F7 l000000000040D745
l000000000040D3F7:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	r13 = rax
	// succ:  l000000000040D402
l000000000040D402:
	rdi = 0x000000000048EDE5<p64>
	ecx = 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = r12
	// succ:  l000000000040D411
l000000000040D411:
	branch rcx == 0<64> l000000000040D413
	// succ:  l000000000040D411_2 l000000000040D413
l000000000040D411_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040D411
	// succ:  l000000000040D413 l000000000040D411
l000000000040D413:
	branch Test(EQ,Z) l000000000040D730
	// succ:  l000000000040D419 l000000000040D730
l000000000040D419:
	rdi = 0x000000000048F0CF<p64>
	ecx = 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = r12
	// succ:  l000000000040D428
l000000000040D428:
	branch rcx == 0<64> l000000000040D42A
	// succ:  l000000000040D428_3 l000000000040D42A
l000000000040D428_3:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040D428
	// succ:  l000000000040D42A l000000000040D428
l000000000040D42A:
	branch Test(EQ,Z) l000000000040D443
	// succ:  l000000000040D42C l000000000040D443
l000000000040D42C:
	rdi = 0x000000000048F0D2<p64>
	ecx = 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = r12
	// succ:  l000000000040D43B
l000000000040D43B:
	branch rcx == 0<64> l000000000040D43D
	// succ:  l000000000040D43B_4 l000000000040D43D
l000000000040D43B_4:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040D43B
	// succ:  l000000000040D43D l000000000040D43B
l000000000040D43D:
	branch Test(NE,Z) l000000000040D796
	// succ:  l000000000040D443 l000000000040D796
l000000000040D443:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	rsi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040D7B6
	// succ:  l000000000040D45B l000000000040D7B6
l000000000040D45B:
	r9 = rsi
	r8 = r13
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rbp
	r9 = rax
	edx = 0x36<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040D4AA
	// succ:  l000000000040D4AA
l000000000040D480:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l000000000040D6F0
	// succ:  l000000000040D48A l000000000040D6F0
l000000000040D48A:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000040CB30 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l000000000040D4AA
l000000000040D4AA:
	rcx = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000040D4B9_thunk_fn0000000000403730
l000000000040D4B9_thunk_fn0000000000403730:
	call fn0000000000403730 (retsize: 0;)
	return
	// succ:  fn000000000040D230_exit
l000000000040D4C0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000040D230_exit
l000000000040D4D0:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040D2BD
	// succ:  l000000000040D4DA l000000000040D2BD
l000000000040D4DA:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x18<64>:word64] = rdx
	goto l000000000040D26E
	// succ:  l000000000040D26E
l000000000040D4F0:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000040D4FC_thunk_fn0000000000407F20
l000000000040D4FC_thunk_fn0000000000407F20:
	call fn0000000000407F20 (retsize: 0;)
	return
	// succ:  fn000000000040D230_exit
l000000000040D501:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000040D50D_thunk_fn0000000000403D80
l000000000040D50D_thunk_fn0000000000403D80:
	call fn0000000000403D80 (retsize: 0;)
	return
	// succ:  fn000000000040D230_exit
l000000000040D512:
	eax = Mem0[rbp + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040D2FB
	// succ:  l000000000040D51E l000000000040D2FB
l000000000040D51E:
	branch Test(LE,SZO) l000000000040D660
	// succ:  l000000000040D524 l000000000040D660
l000000000040D524:
	r12d = r12d ^ r12d
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(r12d)
	C = false
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000040D3E6
	// succ:  l000000000040D530 l000000000040D3E6
l000000000040D530:
	SCZO = cond(eax - 3<32>)
	branch Test(NE,Z) l000000000040D4C0
	// succ:  l000000000040D535 l000000000040D4C0
l000000000040D535:
	rdi = 0x000000000048EDEB<p64>
	ecx = 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = r12
	// succ:  l000000000040D544
l000000000040D544:
	branch rcx == 0<64> l000000000040D546
	// succ:  l000000000040D544_1 l000000000040D546
l000000000040D544_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040D544
	// succ:  l000000000040D546 l000000000040D544
l000000000040D546:
	branch Test(EQ,Z) l000000000040D704
	// succ:  l000000000040D54C l000000000040D704
l000000000040D54C:
	SCZO = cond(Mem0[r12:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040D4C0
	// succ:  l000000000040D557 l000000000040D4C0
l000000000040D557:
	eax = CONVERT(Mem0[r12 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x61<8>)
	branch Test(EQ,Z) l000000000040D569
	// succ:  l000000000040D561 l000000000040D569
l000000000040D561:
	SCZO = cond(al - 0x77<8>)
	branch Test(NE,Z) l000000000040D4C0
	// succ:  l000000000040D569 l000000000040D4C0
l000000000040D569:
	edx = 0x5F<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn00000000004080A0 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	rdi = rax
	ecx = CONVERT(Mem0[rdx:byte], byte, word32)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 0x45<8>)
	branch Test(EQ,Z) l000000000040D7A6
	// succ:  l000000000040D594 l000000000040D7A6
l000000000040D594:
	SCZO = cond(cl - 0x70<8>)
	branch Test(EQ,Z) l000000000040D7D9
	// succ:  l000000000040D59D l000000000040D7D9
l000000000040D59D:
	SCZO = cond(cl - 0x69<8>)
	branch Test(NE,Z) l000000000040D4C0
	// succ:  l000000000040D5A6 l000000000040D4C0
l000000000040D5A6:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x6C<8>)
	branch Test(NE,Z) l000000000040D4C0
	// succ:  l000000000040D5B0 l000000000040D4C0
l000000000040D5B0:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	r9 = rax
	// succ:  l000000000040D5BB
l000000000040D5BB:
	r8 = rdi
	edx = 0x3A<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x39<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rbp
	r9 = rax
	edx = 0x38<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040D4AA
	// succ:  l000000000040D4AA
l000000000040D5F0:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040D4AA
	// succ:  l000000000040D4AA
l000000000040D610:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rcx + 0x18<64>:word64] = rdx
	call fn00000000004080A0 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn0000000000409850 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	rdi = rax
	SCZO = cond(Mem0[rdx:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040D76B
	// succ:  l000000000040D638 l000000000040D76B
l000000000040D638:
	r9 = rax
	r8 = rsi
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040D4AA
	// succ:  l000000000040D4AA
l000000000040D650:
	rdx = rdx + 3<64>
	SCZO = cond(rdx)
	Mem0[rcx + 0x18<64>:word64] = rdx
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	goto l000000000040D33B
	// succ:  l000000000040D33B
l000000000040D660:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040D4C0
	// succ:  l000000000040D668 l000000000040D4C0
l000000000040D668:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rbp
	edx = 0x34<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040D4AA
	// succ:  l000000000040D4AA
l000000000040D678:
	rax = rax + 1<64>
	SCZO = cond(rax)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040D303
	// succ:  l000000000040D303
l000000000040D692:
	eax = CONVERT(Mem0[r12:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x6D<8>)
	branch Test(EQ,Z) l000000000040D6A3
	// succ:  l000000000040D69B l000000000040D6A3
l000000000040D69B:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l000000000040D2FB
	// succ:  l000000000040D6A3 l000000000040D2FB
l000000000040D6A3:
	SCZO = cond(al - Mem0[r12 + 1<64>:byte])
	branch Test(NE,Z) l000000000040D2FB
	// succ:  l000000000040D6AE l000000000040D2FB
l000000000040D6AE:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040D800
	// succ:  l000000000040D6BB l000000000040D800
l000000000040D6BB:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = rax
	r9 = rax
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	goto l000000000040D303
	// succ:  l000000000040D303
l000000000040D6E0:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	goto l000000000040D303
	// succ:  l000000000040D303
l000000000040D6F0:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	rsi = rax
	goto l000000000040D48A
	// succ:  l000000000040D48A
l000000000040D704:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	rdi = rax
	call fn000000000040D230 (retsize: 8;)
	r9 = rax
	goto l000000000040D5BB
	// succ:  l000000000040D5BB
l000000000040D730:
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rsi = rax
	goto l000000000040D45B
	// succ:  l000000000040D45B
l000000000040D745:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 0x72<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 1<8>)
	branch Test(ULE,CZ) l000000000040D75B
	// succ:  l000000000040D750 l000000000040D75B
l000000000040D750:
	eax = eax - 0x63<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 1<8>)
	branch Test(UGT,CZ) l000000000040D3F7
	// succ:  l000000000040D75B l000000000040D3F7
l000000000040D75B:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	r13 = rax
	goto l000000000040D402
	// succ:  l000000000040D402
l000000000040D76B:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l000000000040D4AA
	// succ:  l000000000040D4AA
l000000000040D796:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rsi = rax
	goto l000000000040D45B
	// succ:  l000000000040D45B
l000000000040D7A6:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	Mem0[rbx + 0x18<64>:word64] = rdx
	goto l000000000040D5BB
	// succ:  l000000000040D5BB
l000000000040D7B6:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040D45B
	// succ:  l000000000040D45B
l000000000040D7D9:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x69<8>)
	branch Test(NE,Z) l000000000040D4C0
	// succ:  l000000000040D7E3 l000000000040D4C0
l000000000040D7E3:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000040CB30 (retsize: 8;)
	r9 = rax
	goto l000000000040D5BB
	// succ:  l000000000040D5BB
l000000000040D800:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	goto l000000000040D2FB
	// succ:  l000000000040D2FB
l000000000040D80D:
	SCZO = cond(al - 0x69<8>)
	branch Test(EQ,Z) l000000000040D2B3
	// succ:  l000000000040D815 l000000000040D2B3
l000000000040D815:
	goto l000000000040D2BD
	// succ:  l000000000040D2BD
fn000000000040D230_exit:


// fn000000000040D820
// Return size: 8
define fn000000000040D820
fn000000000040D820_entry:
	rsp = fp
	// succ:  l000000000040D820
l000000000040D820:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r15
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = Mem0[rcx + 0x18<64>:word64]
	rbx = rcx
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040D870
	// succ:  l000000000040D83C l000000000040D870
l000000000040D83C:
	call fn0000000000403CE0 (retsize: 8;)
	rsi = rax
	// succ:  l000000000040D844
l000000000040D844:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000040D856
	// succ:  l000000000040D849 l000000000040D856
l000000000040D849:
	rdx = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rdx:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040D913
	// succ:  l000000000040D856 l000000000040D913
l000000000040D856:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000040D820_exit
l000000000040D870:
	rcx = rax + 1<64>
	ebp = Mem0[rbx + 0x54<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	Mem0[rbx + 0x54<64>:word32] = 1<32>
	Mem0[rbx + 0x18<64>:word64] = rcx
	edx = CONVERT(Mem0[rax + 1<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x4C<8>)
	branch Test(EQ,Z) l000000000040DC30
	// succ:  l000000000040D88F l000000000040DC30
l000000000040D88F:
	SCZO = cond(dl - 0x54<8>)
	branch Test(EQ,Z) l000000000040DC40
	// succ:  l000000000040D898 l000000000040DC40
l000000000040D898:
	SCZO = cond(dl - 0x73<8>)
	branch Test(EQ,Z) l000000000040D950
	// succ:  l000000000040D8A1 l000000000040D950
l000000000040D8A1:
	SCZO = cond(dl - 0x66<8>)
	branch Test(EQ,Z) l000000000040DAC0
	// succ:  l000000000040D8AA l000000000040DAC0
l000000000040D8AA:
	r8d = SLICE(rdx - 0x30<64>, word32, 0)
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8b - 9<8>)
	branch Test(ULE,CZ) l000000000040DA92
	// succ:  l000000000040D8B8 l000000000040DA92
l000000000040D8B8:
	SCZO = cond(dl - 0x6F<8>)
	branch Test(EQ,Z) l000000000040DA80
	// succ:  l000000000040D8C1 l000000000040DA80
l000000000040D8C1:
	SCZO = cond(dl - 0x74<8>)
	r8b = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(NE,Z) l000000000040F91F
	// succ:  l000000000040D8CE l000000000040F91F
l000000000040D8CE:
	SCZO = cond(Mem0[rax + 2<64>:byte] - 0x6C<8>)
	branch Test(NE,Z) l000000000040D966
	// succ:  l000000000040D8D8 l000000000040D966
l000000000040D8D8:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(r8b & r8b)
	C = false
	branch Test(NE,Z) l000000000040DF10
	// succ:  l000000000040D8E3 l000000000040DF10
l000000000040D8E3:
	rcx = rcx + 2<64>
	SCZO = cond(rcx)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	Mem0[rbx + 0x18<64>:word64] = rcx
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040DAB3
	// succ:  l000000000040DAB3
l000000000040D913:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	call fn00000000004080A0 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x2D<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	rsp = rsp + 0x38<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l000000000040D941_thunk_fn0000000000403730
l000000000040D941_thunk_fn0000000000403730:
	call fn0000000000403730 (retsize: 0;)
	return
	// succ:  fn000000000040D820_exit
l000000000040D950:
	edx = CONVERT(Mem0[rax + 2<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x72<8>)
	branch Test(EQ,Z) l000000000040DE26
	// succ:  l000000000040D95D l000000000040DE26
l000000000040D95D:
	SCZO = cond(dl - 0x70<8>)
	branch Test(EQ,Z) l000000000040DE87
	// succ:  l000000000040D966 l000000000040DE87
l000000000040D966:
	rcx = rbx
	call fn00000000004096B0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r12 = rax
	branch Test(EQ,Z) l000000000040DC20
	// succ:  l000000000040D97A l000000000040DC20
l000000000040D97A:
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x31<32>)
	branch Test(EQ,Z) l000000000040DC50
	// succ:  l000000000040D985 l000000000040DC50
l000000000040D985:
	SCZO = cond(eax - 0x32<32>)
	branch Test(EQ,Z) l000000000040DB20
	// succ:  l000000000040D98E l000000000040DB20
l000000000040D98E:
	SCZO = cond(eax - 0x33<32>)
	branch Test(NE,Z) l000000000040DC20
	// succ:  l000000000040D997 l000000000040DC20
l000000000040D997:
	rdx = Mem0[rbx + 0x18<64>:word64]
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x5F<8>)
	branch Test(EQ,Z) l000000000040DEB2
	// succ:  l000000000040D9A8 l000000000040DEB2
l000000000040D9A8:
	SCZO = cond(al - 0x4C<8>)
	branch Test(EQ,Z) l000000000040E501
	// succ:  l000000000040D9B0 l000000000040E501
l000000000040D9B0:
	SCZO = cond(al - 0x54<8>)
	branch Test(EQ,Z) l000000000040E538
	// succ:  l000000000040D9B8 l000000000040E538
l000000000040D9B8:
	SCZO = cond(al - 0x73<8>)
	branch Test(EQ,Z) l000000000040E1F9
	// succ:  l000000000040D9C0 l000000000040E1F9
l000000000040D9C0:
	SCZO = cond(al - 0x66<8>)
	branch Test(EQ,Z) l000000000040E240
	// succ:  l000000000040D9C8 l000000000040E240
l000000000040D9C8:
	ecx = SLICE(rax - 0x30<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 9<8>)
	branch Test(ULE,CZ) l000000000040DF36
	// succ:  l000000000040D9D4 l000000000040DF36
l000000000040D9D4:
	SCZO = cond(al - 0x6F<8>)
	branch Test(EQ,Z) l000000000040DF24
	// succ:  l000000000040D9DC l000000000040DF24
l000000000040D9DC:
	SCZO = cond(al - 0x74<8>)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(EQ,Z) l000000000040D9E7
	// succ:  l000000000040D9E3 l000000000040D9E7
l000000000040D9E3:
	SCZO = cond(al - 0x69<8>)
	branch Test(NE,Z) l000000000040D9F1
	// succ:  l000000000040D9E7 l000000000040D9F1
l000000000040D9E7:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x6C<8>)
	branch Test(EQ,Z) l000000000040E908
	// succ:  l000000000040D9F1 l000000000040E908
l000000000040D9F1:
	rcx = rbx
	call fn00000000004096B0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r13 = rax
	branch Test(EQ,Z) l000000000040E4F9
	// succ:  l000000000040DA05 l000000000040E4F9
l000000000040DA05:
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x31<32>)
	branch Test(EQ,Z) l000000000040E620
	// succ:  l000000000040DA10 l000000000040E620
l000000000040DA10:
	SCZO = cond(eax - 0x32<32>)
	branch Test(EQ,Z) l000000000040E78E
	// succ:  l000000000040DA19 l000000000040E78E
l000000000040DA19:
	SCZO = cond(eax - 0x33<32>)
	branch Test(NE,Z) l000000000040E4F9
	// succ:  l000000000040DA22 l000000000040E4F9
l000000000040DA22:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040F9A7
	// succ:  l000000000040DA2F l000000000040F9A7
l000000000040DA2F:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040DA37
l000000000040DA37:
	r8 = r13
	r9 = rax
	edx = 0x35<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	// succ:  l000000000040DA4D
l000000000040DA4D:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000040DECA
	// succ:  l000000000040DA55 l000000000040DECA
l000000000040DA55:
	r9 = r8
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r9 = rax
	// succ:  l000000000040DA68
l000000000040DA68:
	r8 = r12
	edx = 0x35<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040DAB3
	// succ:  l000000000040DAB3
l000000000040DA80:
	SCZO = cond(Mem0[rax + 2<64>:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040D966
	// succ:  l000000000040DA8A l000000000040D966
l000000000040DA8A:
	rax = rax + 3<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	// succ:  l000000000040DA92
l000000000040DA92:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rsi = rax
	branch Test(EQ,Z) l000000000040DC20
	// succ:  l000000000040DAA6 l000000000040DC20
l000000000040DAA6:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040DDE0
	// succ:  l000000000040DAB3 l000000000040DDE0
l000000000040DAB3:
	Mem0[rbx + 0x54<64>:word32] = ebp
	goto l000000000040D844
	// succ:  l000000000040D844
l000000000040DAC0:
	SCZO = cond(Mem0[rax + 2<64>:byte] - 0x70<8>)
	branch Test(NE,Z) l000000000040D966
	// succ:  l000000000040DACA l000000000040D966
l000000000040DACA:
	rdx = rax + 3<64>
	Mem0[rbx + 0x18<64>:word64] = rdx
	SCZO = cond(Mem0[rax + 3<64>:byte] - 0x54<8>)
	branch Test(NE,Z) l000000000040DC07
	// succ:  l000000000040DADC l000000000040DC07
l000000000040DADC:
	rax = rax + 4<64>
	SCZO = cond(rax)
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	Mem0[rbx + 0x18<64>:word64] = rax
	// succ:  l000000000040DAE6
l000000000040DAE6:
	eax = Mem0[rbx + 0x28<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - Mem0[rbx + 0x2C<64>:word32])
	branch Test(GE,SO) l000000000040DC20
	// succ:  l000000000040DAF2 l000000000040DC20
l000000000040DAF2:
	rcx = CONVERT(eax, word32, int64)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	r8 = rcx + rcx * 2<64>
	rcx = Mem0[rbx + 0x20<64>:word64]
	Mem0[rbx + 0x28<64>:word32] = eax
	rsi = rcx + r8 * 8<64>
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000040DAB3
	// succ:  l000000000040DB0C l000000000040DAB3
l000000000040DB0C:
	Mem0[rsi:word32] = 6<32>
	Mem0[rsi + 8<64>:word32] = edx
	goto l000000000040DAB3
	// succ:  l000000000040DAB3
l000000000040DB20:
	eax = Mem0[r12 + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040DE79
	// succ:  l000000000040DB2E l000000000040DE79
l000000000040DB2E:
	branch Test(LE,SZO) l000000000040DE03
	// succ:  l000000000040DB34 l000000000040DE03
l000000000040DB34:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000040DC93
	// succ:  l000000000040DB40 l000000000040DC93
l000000000040DB40:
	SCZO = cond(eax - 3<32>)
	branch Test(NE,Z) l000000000040DC20
	// succ:  l000000000040DB49 l000000000040DC20
l000000000040DB49:
	rdi = 0x000000000048EDEB<p64>
	ecx = 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = r13
	// succ:  l000000000040DB58
l000000000040DB58:
	branch rcx == 0<64> l000000000040DB5A
	// succ:  l000000000040DB58_1 l000000000040DB5A
l000000000040DB58_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040DB58
	// succ:  l000000000040DB5A l000000000040DB58
l000000000040DB5A:
	branch Test(EQ,Z) l000000000040DF96
	// succ:  l000000000040DB60 l000000000040DF96
l000000000040DB60:
	SCZO = cond(Mem0[r13 + 0<64>:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040DC20
	// succ:  l000000000040DB6B l000000000040DC20
l000000000040DB6B:
	eax = CONVERT(Mem0[r13 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x61<8>)
	branch Test(EQ,Z) l000000000040DB7C
	// succ:  l000000000040DB74 l000000000040DB7C
l000000000040DB74:
	SCZO = cond(al - 0x77<8>)
	branch Test(NE,Z) l000000000040DC20
	// succ:  l000000000040DB7C l000000000040DC20
l000000000040DB7C:
	edx = 0x5F<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rcx = rbx
	rdi = rax
	call fn00000000004080A0 (retsize: 8;)
	rsi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x45<8>)
	branch Test(EQ,Z) l000000000040E350
	// succ:  l000000000040DBA7 l000000000040E350
l000000000040DBA7:
	SCZO = cond(dl - 0x70<8>)
	branch Test(EQ,Z) l000000000040E511
	// succ:  l000000000040DBB0 l000000000040E511
l000000000040DBB0:
	SCZO = cond(dl - 0x69<8>)
	branch Test(NE,Z) l000000000040DC20
	// succ:  l000000000040DBB5 l000000000040DC20
l000000000040DBB5:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x6C<8>)
	branch Test(NE,Z) l000000000040DC20
	// succ:  l000000000040DBBB l000000000040DC20
l000000000040DBBB:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	r8 = rax
	// succ:  l000000000040DBC6
l000000000040DBC6:
	r9 = r8
	edx = 0x3A<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = rsi
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 0x39<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = r12
	r9 = rax
	edx = 0x38<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040DAB3
	// succ:  l000000000040DAB3
l000000000040DC07:
	rcx = rbx
	call fn0000000000403D30 (retsize: 8;)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	branch Test(NE,Z) l000000000040DAE6
	// succ:  l000000000040DC1A l000000000040DAE6
l000000000040DC1A:
	// succ:  l000000000040DC20
l000000000040DC20:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l000000000040DAB3
	// succ:  l000000000040DAB3
l000000000040DC30:
	rcx = rbx
	call fn0000000000407F20 (retsize: 8;)
	rsp = rsp + 8<64>
	rsi = rax
	goto l000000000040DAB3
	// succ:  l000000000040DAB3
l000000000040DC40:
	rcx = rbx
	call fn0000000000403D80 (retsize: 8;)
	rsp = rsp + 8<64>
	rsi = rax
	goto l000000000040DAB3
	// succ:  l000000000040DAB3
l000000000040DC50:
	rdx = Mem0[r12 + 8<64>:word64]
	rdi = 0x000000000048EDE2<p64>
	ecx = 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	eax = Mem0[rdx + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	r13 = Mem0[rdx:word64]
	eax = eax - 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	v37 = Mem0[rbx + 0x50<64>:word32] + eax
	Mem0[rbx + 0x50<64>:word32] = v37
	SCZO = cond(v37)
	rsi = r13
	// succ:  l000000000040DC70
l000000000040DC70:
	branch rcx == 0<64> l000000000040DC72
	// succ:  l000000000040DC70_1 l000000000040DC72
l000000000040DC70_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040DC70
	// succ:  l000000000040DC72 l000000000040DC70
l000000000040DC72:
	branch Test(EQ,Z) l000000000040DF00
	// succ:  l000000000040DC78 l000000000040DF00
l000000000040DC78:
	eax = Mem0[rdx + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040DE6C
	// succ:  l000000000040DC84 l000000000040DE6C
l000000000040DC84:
	branch Test(LE,SZO) l000000000040DE03
	// succ:  l000000000040DC8A l000000000040DE03
l000000000040DC8A:
	SCZO = cond(eax - 2<32>)
	branch Test(NE,Z) l000000000040DB40
	// succ:  l000000000040DC93 l000000000040DB40
l000000000040DC93:
	rax = Mem0[r12 + 8<64>:word64]
	rax = Mem0[rax:word64]
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x63<8>)
	branch Test(EQ,Z) l000000000040E1B0
	// succ:  l000000000040DCA5 l000000000040E1B0
l000000000040DCA5:
	rax = Mem0[rbx + 0x18<64>:word64]
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x4C<8>)
	branch Test(EQ,Z) l000000000040E957
	// succ:  l000000000040DCB5 l000000000040E957
l000000000040DCB5:
	SCZO = cond(dl - 0x54<8>)
	branch Test(EQ,Z) l000000000040E9A2
	// succ:  l000000000040DCBE l000000000040E9A2
l000000000040DCBE:
	SCZO = cond(dl - 0x73<8>)
	branch Test(EQ,Z) l000000000040E306
	// succ:  l000000000040DCC7 l000000000040E306
l000000000040DCC7:
	SCZO = cond(dl - 0x66<8>)
	branch Test(EQ,Z) l000000000040E360
	// succ:  l000000000040DCD0 l000000000040E360
l000000000040DCD0:
	ecx = SLICE(rdx - 0x30<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 9<8>)
	branch Test(ULE,CZ) l000000000040E2B2
	// succ:  l000000000040DCDC l000000000040E2B2
l000000000040DCDC:
	SCZO = cond(dl - 0x6F<8>)
	branch Test(EQ,Z) l000000000040E2A0
	// succ:  l000000000040DCE5 l000000000040E2A0
l000000000040DCE5:
	SCZO = cond(dl - 0x74<8>)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(EQ,Z) l000000000040DCF2
	// succ:  l000000000040DCED l000000000040DCF2
l000000000040DCED:
	SCZO = cond(dl - 0x69<8>)
	branch Test(NE,Z) l000000000040DCFC
	// succ:  l000000000040DCF2 l000000000040DCFC
l000000000040DCF2:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x6C<8>)
	branch Test(EQ,Z) l000000000040EBFD
	// succ:  l000000000040DCFC l000000000040EBFD
l000000000040DCFC:
	rcx = rbx
	call fn00000000004096B0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rsi = rax
	branch Test(EQ,Z) l000000000040E618
	// succ:  l000000000040DD10 l000000000040E618
l000000000040DD10:
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x31<32>)
	branch Test(EQ,Z) l000000000040E9CB
	// succ:  l000000000040DD1B l000000000040E9CB
l000000000040DD1B:
	SCZO = cond(eax - 0x32<32>)
	branch Test(EQ,Z) l000000000040EAE7
	// succ:  l000000000040DD24 l000000000040EAE7
l000000000040DD24:
	SCZO = cond(eax - 0x33<32>)
	branch Test(NE,Z) l000000000040E618
	// succ:  l000000000040DD2D l000000000040E618
l000000000040DD2D:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040F9C1
	// succ:  l000000000040DD3A l000000000040F9C1
l000000000040DD3A:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040DD42
l000000000040DD42:
	r9 = rax
	r8 = rsi
	edx = 0x35<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r14 = rax
	// succ:  l000000000040DD58
l000000000040DD58:
	rdi = 0x000000000048EDE5<p64>
	ecx = 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = r13
	// succ:  l000000000040DD67
l000000000040DD67:
	branch rcx == 0<64> l000000000040DD69
	// succ:  l000000000040DD67_2 l000000000040DD69
l000000000040DD67_2:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040DD67
	// succ:  l000000000040DD69 l000000000040DD67
l000000000040DD69:
	branch Test(EQ,Z) l000000000040DF81
	// succ:  l000000000040DD6F l000000000040DF81
l000000000040DD6F:
	rdi = 0x000000000048F0CF<p64>
	ecx = 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = r13
	// succ:  l000000000040DD7E
l000000000040DD7E:
	branch rcx == 0<64> l000000000040DD80
	// succ:  l000000000040DD7E_3 l000000000040DD80
l000000000040DD7E_3:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040DD7E
	// succ:  l000000000040DD80 l000000000040DD7E
l000000000040DD80:
	branch Test(EQ,Z) l000000000040DD99
	// succ:  l000000000040DD82 l000000000040DD99
l000000000040DD82:
	rdi = 0x000000000048F0D2<p64>
	ecx = 3<32>
	rcx = CONVERT(ecx, word32, uint64)
	rsi = r13
	// succ:  l000000000040DD91
l000000000040DD91:
	branch rcx == 0<64> l000000000040DD93
	// succ:  l000000000040DD91_4 l000000000040DD93
l000000000040DD91_4:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 1<i64>
	rdi = rdi + 1<i64>
	rcx = rcx - 1<64>
	branch Test(NE,Z) l000000000040DD91
	// succ:  l000000000040DD93 l000000000040DD91
l000000000040DD93:
	branch Test(NE,Z) l000000000040E2F6
	// succ:  l000000000040DD99 l000000000040E2F6
l000000000040DD99:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	rsi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040E4C5
	// succ:  l000000000040DDB1 l000000000040E4C5
l000000000040DDB1:
	r9 = rsi
	r8 = r14
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = r12
	r9 = rax
	edx = 0x36<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040DAB3
	// succ:  l000000000040DAB3
l000000000040DDE0:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040DAB3
	// succ:  l000000000040DAB3
l000000000040DE03:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040DC20
	// succ:  l000000000040DE0B l000000000040DC20
l000000000040DE0B:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = r12
	edx = 0x34<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040DAB3
	// succ:  l000000000040DAB3
l000000000040DE26:
	rax = rax + 3<64>
	SCZO = cond(rax)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn00000000004080A0 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn0000000000409850 (retsize: 8;)
	rdi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	r9 = rdi
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040E1D6
	// succ:  l000000000040DE54 l000000000040E1D6
l000000000040DE54:
	r8 = rsi
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040DAB3
	// succ:  l000000000040DAB3
l000000000040DE6C:
	eax = CONVERT(Mem0[r13 + 0<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x6D<8>)
	branch Test(EQ,Z) l000000000040DED2
	// succ:  l000000000040DE75 l000000000040DED2
l000000000040DE75:
	SCZO = cond(al - 0x70<8>)
	branch Test(EQ,Z) l000000000040DED2
	// succ:  l000000000040DE79 l000000000040DED2
l000000000040DE79:
	rdx = Mem0[rbx + 0x18<64>:word64]
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	goto l000000000040D9A8
	// succ:  l000000000040D9A8
l000000000040DE87:
	rax = rax + 3<64>
	SCZO = cond(rax)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040D230 (retsize: 8;)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rax
	edx = 0x49<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040DAB3
	// succ:  l000000000040DAB3
l000000000040DEB2:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000040CB30 (retsize: 8;)
	r8 = rax
	// succ:  l000000000040DECA
l000000000040DECA:
	r9 = r8
	goto l000000000040DA68
	// succ:  l000000000040DA68
l000000000040DED2:
	SCZO = cond(al - Mem0[r13 + 1<64>:byte])
	branch Test(NE,Z) l000000000040DE79
	// succ:  l000000000040DED8 l000000000040DE79
l000000000040DED8:
	rdx = Mem0[rbx + 0x18<64>:word64]
	edi = 1<32>
	rdi = CONVERT(edi, word32, uint64)
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x5F<8>)
	branch Test(NE,Z) l000000000040D9A8
	// succ:  l000000000040DEEC l000000000040D9A8
l000000000040DEEC:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x18<64>:word64] = rdx
	goto l000000000040DE79
	// succ:  l000000000040DE79
l000000000040DF00:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	r9 = rax
	goto l000000000040DA68
	// succ:  l000000000040DA68
l000000000040DF10:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	rcx = Mem0[rbx + 0x18<64>:word64]
	rsi = rax
	goto l000000000040D8E3
	// succ:  l000000000040D8E3
l000000000040DF24:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040D9F1
	// succ:  l000000000040DF2E l000000000040D9F1
l000000000040DF2E:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x18<64>:word64] = rdx
	// succ:  l000000000040DF36
l000000000040DF36:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r8 = rax
	branch Test(EQ,Z) l000000000040DA4D
	// succ:  l000000000040DF4A l000000000040DA4D
l000000000040DF4A:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(NE,Z) l000000000040DA4D
	// succ:  l000000000040DF57 l000000000040DA4D
l000000000040DF57:
	rcx = rbx
	Mem0[rsp + 0x28<64>:word64] = r8
	call fn0000000000409C60 (retsize: 8;)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040DA4D
	// succ:  l000000000040DA4D
l000000000040DF81:
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rsi = rax
	goto l000000000040DDB1
	// succ:  l000000000040DDB1
l000000000040DF96:
	rax = Mem0[rbx + 0x18<64>:word64]
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x4C<8>)
	branch Test(EQ,Z) l000000000040EAD7
	// succ:  l000000000040DFA6 l000000000040EAD7
l000000000040DFA6:
	SCZO = cond(dl - 0x54<8>)
	branch Test(EQ,Z) l000000000040F319
	// succ:  l000000000040DFAF l000000000040F319
l000000000040DFAF:
	SCZO = cond(dl - 0x73<8>)
	branch Test(EQ,Z) l000000000040E5C6
	// succ:  l000000000040DFB8 l000000000040E5C6
l000000000040DFB8:
	SCZO = cond(dl - 0x66<8>)
	branch Test(EQ,Z) l000000000040E84F
	// succ:  l000000000040DFC1 l000000000040E84F
l000000000040DFC1:
	ecx = SLICE(rdx - 0x30<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 9<8>)
	branch Test(ULE,CZ) l000000000040E3CE
	// succ:  l000000000040DFCD l000000000040E3CE
l000000000040DFCD:
	SCZO = cond(dl - 0x6F<8>)
	branch Test(EQ,Z) l000000000040E3BC
	// succ:  l000000000040DFD6 l000000000040E3BC
l000000000040DFD6:
	SCZO = cond(dl - 0x74<8>)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(EQ,Z) l000000000040DFE3
	// succ:  l000000000040DFDE l000000000040DFE3
l000000000040DFDE:
	SCZO = cond(dl - 0x69<8>)
	branch Test(NE,Z) l000000000040DFED
	// succ:  l000000000040DFE3 l000000000040DFED
l000000000040DFE3:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x6C<8>)
	branch Test(EQ,Z) l000000000040F234
	// succ:  l000000000040DFED l000000000040F234
l000000000040DFED:
	rcx = rbx
	call fn00000000004096B0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rsi = rax
	branch Test(EQ,Z) l000000000040E950
	// succ:  l000000000040E001 l000000000040E950
l000000000040E001:
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x31<32>)
	branch Test(EQ,Z) l000000000040EDDE
	// succ:  l000000000040E00C l000000000040EDDE
l000000000040E00C:
	SCZO = cond(eax - 0x32<32>)
	branch Test(EQ,Z) l000000000040EC90
	// succ:  l000000000040E015 l000000000040EC90
l000000000040E015:
	SCZO = cond(eax - 0x33<32>)
	branch Test(NE,Z) l000000000040E950
	// succ:  l000000000040E01E l000000000040E950
l000000000040E01E:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040FA38
	// succ:  l000000000040E02B l000000000040FA38
l000000000040E02B:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040E033
l000000000040E033:
	r9 = rax
	r8 = rsi
	edx = 0x35<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rdi = rax
	// succ:  l000000000040E049
l000000000040E049:
	rdx = Mem0[rbx + 0x18<64>:word64]
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x4C<8>)
	branch Test(EQ,Z) l000000000040EC3B
	// succ:  l000000000040E058 l000000000040EC3B
l000000000040E058:
	SCZO = cond(al - 0x54<8>)
	branch Test(EQ,Z) l000000000040ED96
	// succ:  l000000000040E060 l000000000040ED96
l000000000040E060:
	SCZO = cond(al - 0x73<8>)
	branch Test(EQ,Z) l000000000040E587
	// succ:  l000000000040E068 l000000000040E587
l000000000040E068:
	SCZO = cond(al - 0x66<8>)
	branch Test(EQ,Z) l000000000040E732
	// succ:  l000000000040E070 l000000000040E732
l000000000040E070:
	ecx = SLICE(rax - 0x30<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 9<8>)
	branch Test(ULE,CZ) l000000000040E481
	// succ:  l000000000040E07C l000000000040E481
l000000000040E07C:
	SCZO = cond(al - 0x6F<8>)
	branch Test(EQ,Z) l000000000040E46F
	// succ:  l000000000040E084 l000000000040E46F
l000000000040E084:
	SCZO = cond(al - 0x74<8>)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(EQ,Z) l000000000040E08F
	// succ:  l000000000040E08B l000000000040E08F
l000000000040E08B:
	SCZO = cond(al - 0x69<8>)
	branch Test(NE,Z) l000000000040E099
	// succ:  l000000000040E08F l000000000040E099
l000000000040E08F:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x6C<8>)
	branch Test(EQ,Z) l000000000040F1FD
	// succ:  l000000000040E099 l000000000040F1FD
l000000000040E099:
	rcx = rbx
	call fn00000000004096B0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rsi = rax
	branch Test(EQ,Z) l000000000040E99B
	// succ:  l000000000040E0AD l000000000040E99B
l000000000040E0AD:
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x31<32>)
	branch Test(EQ,Z) l000000000040EFD1
	// succ:  l000000000040E0B8 l000000000040EFD1
l000000000040E0B8:
	SCZO = cond(eax - 0x32<32>)
	branch Test(EQ,Z) l000000000040EEC7
	// succ:  l000000000040E0C1 l000000000040EEC7
l000000000040E0C1:
	SCZO = cond(eax - 0x33<32>)
	branch Test(NE,Z) l000000000040E99B
	// succ:  l000000000040E0CA l000000000040E99B
l000000000040E0CA:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040F98D
	// succ:  l000000000040E0D7 l000000000040F98D
l000000000040E0D7:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040E0DF
l000000000040E0DF:
	r8 = rsi
	r9 = rax
	edx = 0x35<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	// succ:  l000000000040E0F5
l000000000040E0F5:
	rdx = Mem0[rbx + 0x18<64>:word64]
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x4C<8>)
	branch Test(EQ,Z) l000000000040EBED
	// succ:  l000000000040E104 l000000000040EBED
l000000000040E104:
	SCZO = cond(al - 0x54<8>)
	branch Test(EQ,Z) l000000000040F0B6
	// succ:  l000000000040E10C l000000000040F0B6
l000000000040E10C:
	SCZO = cond(al - 0x73<8>)
	branch Test(EQ,Z) l000000000040E548
	// succ:  l000000000040E114 l000000000040E548
l000000000040E114:
	SCZO = cond(al - 0x66<8>)
	branch Test(EQ,Z) l000000000040E8A9
	// succ:  l000000000040E11C l000000000040E8A9
l000000000040E11C:
	ecx = SLICE(rax - 0x30<64>, word32, 0)
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(cl - 9<8>)
	branch Test(ULE,CZ) l000000000040E424
	// succ:  l000000000040E128 l000000000040E424
l000000000040E128:
	SCZO = cond(al - 0x6F<8>)
	branch Test(EQ,Z) l000000000040E412
	// succ:  l000000000040E130 l000000000040E412
l000000000040E130:
	SCZO = cond(al - 0x74<8>)
	cl = CONVERT(Test(EQ,Z), bool, int8)
	branch Test(EQ,Z) l000000000040E13B
	// succ:  l000000000040E137 l000000000040E13B
l000000000040E137:
	SCZO = cond(al - 0x69<8>)
	branch Test(NE,Z) l000000000040E145
	// succ:  l000000000040E13B l000000000040E145
l000000000040E13B:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x6C<8>)
	branch Test(EQ,Z) l000000000040EDA6
	// succ:  l000000000040E145 l000000000040EDA6
l000000000040E145:
	rcx = rbx
	call fn00000000004096B0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r13 = rax
	branch Test(EQ,Z) l000000000040E9C3
	// succ:  l000000000040E159 l000000000040E9C3
l000000000040E159:
	eax = Mem0[rax:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0x31<32>)
	branch Test(EQ,Z) l000000000040F0C6
	// succ:  l000000000040E164 l000000000040F0C6
l000000000040E164:
	SCZO = cond(eax - 0x32<32>)
	branch Test(EQ,Z) l000000000040F329
	// succ:  l000000000040E16D l000000000040F329
l000000000040E16D:
	SCZO = cond(eax - 0x33<32>)
	branch Test(NE,Z) l000000000040E9C3
	// succ:  l000000000040E176 l000000000040E9C3
l000000000040E176:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040F92D
	// succ:  l000000000040E183 l000000000040F92D
l000000000040E183:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040E18B
l000000000040E18B:
	r8 = r13
	r9 = rax
	edx = 0x35<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040DBC6
	// succ:  l000000000040DBC6
l000000000040E1B0:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 0x72<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 1<8>)
	branch Test(ULE,CZ) l000000000040E1C6
	// succ:  l000000000040E1BB l000000000040E1C6
l000000000040E1BB:
	eax = eax - 0x63<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 1<8>)
	branch Test(UGT,CZ) l000000000040DCA5
	// succ:  l000000000040E1C6 l000000000040DCA5
l000000000040E1C6:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	r14 = rax
	goto l000000000040DD58
	// succ:  l000000000040DD58
l000000000040E1D6:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r9 = rax
	goto l000000000040DE54
	// succ:  l000000000040DE54
l000000000040E1F9:
	eax = CONVERT(Mem0[rdx + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x72<8>)
	branch Test(EQ,Z) l000000000040EBA7
	// succ:  l000000000040E205 l000000000040EBA7
l000000000040E205:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l000000000040D9F1
	// succ:  l000000000040E20D l000000000040D9F1
l000000000040E20D:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	call fn000000000040D230 (retsize: 8;)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rax
	edx = 0x49<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040DA4D
	// succ:  l000000000040DA4D
l000000000040E240:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x70<8>)
	branch Test(NE,Z) l000000000040D9F1
	// succ:  l000000000040E24A l000000000040D9F1
l000000000040E24A:
	rax = rdx + 2<64>
	Mem0[rbx + 0x18<64>:word64] = rax
	SCZO = cond(Mem0[rdx + 2<64>:byte] - 0x54<8>)
	branch Test(NE,Z) l000000000040E4E8
	// succ:  l000000000040E25C l000000000040E4E8
l000000000040E25C:
	rdx = rdx + 3<64>
	SCZO = cond(rdx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x18<64>:word64] = rdx
	// succ:  l000000000040E266
l000000000040E266:
	edx = Mem0[rbx + 0x28<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(edx - Mem0[rbx + 0x2C<64>:word32])
	branch Test(GE,SO) l000000000040DA4D
	// succ:  l000000000040E275 l000000000040DA4D
l000000000040E275:
	rsi = CONVERT(edx, word32, int64)
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rsi = rsi *s 0x18<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x28<64>:word32] = edx
	rsi = rsi + Mem0[rbx + 0x20<64>:word64]
	SCZO = cond(rsi)
	SZO = cond(rsi & rsi)
	C = false
	r8 = rsi
	branch Test(EQ,Z) l000000000040DA4D
	// succ:  l000000000040E292 l000000000040DA4D
l000000000040E292:
	Mem0[rsi:word32] = 6<32>
	Mem0[rsi + 8<64>:word32] = eax
	goto l000000000040DA4D
	// succ:  l000000000040DA4D
l000000000040E2A0:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040DCFC
	// succ:  l000000000040E2AA l000000000040DCFC
l000000000040E2AA:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	// succ:  l000000000040E2B2
l000000000040E2B2:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r14 = rax
	branch Test(EQ,Z) l000000000040E618
	// succ:  l000000000040E2C6 l000000000040E618
l000000000040E2C6:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(NE,Z) l000000000040DD58
	// succ:  l000000000040E2D3 l000000000040DD58
l000000000040E2D3:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = r14
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r14 = rax
	goto l000000000040DD58
	// succ:  l000000000040DD58
l000000000040E2F6:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rsi = rax
	goto l000000000040DDB1
	// succ:  l000000000040DDB1
l000000000040E306:
	edx = CONVERT(Mem0[rax + 1<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x72<8>)
	branch Test(EQ,Z) l000000000040F28E
	// succ:  l000000000040E313 l000000000040F28E
l000000000040E313:
	SCZO = cond(dl - 0x70<8>)
	branch Test(NE,Z) l000000000040DCFC
	// succ:  l000000000040E31C l000000000040DCFC
l000000000040E31C:
	rax = rax + 2<64>
	SCZO = cond(rax)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040D230 (retsize: 8;)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rax
	edx = 0x49<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r14 = rax
	goto l000000000040DD58
	// succ:  l000000000040DD58
l000000000040E350:
	rax = rax + 1<64>
	SCZO = cond(rax)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	Mem0[rbx + 0x18<64>:word64] = rax
	goto l000000000040DBC6
	// succ:  l000000000040DBC6
l000000000040E360:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x70<8>)
	branch Test(NE,Z) l000000000040DCFC
	// succ:  l000000000040E36A l000000000040DCFC
l000000000040E36A:
	rdx = rax + 2<64>
	Mem0[rbx + 0x18<64>:word64] = rdx
	SCZO = cond(Mem0[rax + 2<64>:byte] - 0x54<8>)
	branch Test(NE,Z) l000000000040E607
	// succ:  l000000000040E37C l000000000040E607
l000000000040E37C:
	rax = rax + 3<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000040E386
l000000000040E386:
	edx = Mem0[rbx + 0x28<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - Mem0[rbx + 0x2C<64>:word32])
	branch Test(GE,SO) l000000000040E618
	// succ:  l000000000040E392 l000000000040E618
l000000000040E392:
	r14 = CONVERT(edx, word32, int64)
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r14 = r14 *s 0x18<64>
	SCZO = cond(r14)
	Mem0[rbx + 0x28<64>:word32] = edx
	r14 = r14 + Mem0[rbx + 0x20<64>:word64]
	SCZO = cond(r14)
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l000000000040DD58
	// succ:  l000000000040E3AC l000000000040DD58
l000000000040E3AC:
	Mem0[r14:word32] = 6<32>
	Mem0[r14 + 8<64>:word32] = eax
	goto l000000000040DD58
	// succ:  l000000000040DD58
l000000000040E3BC:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040DFED
	// succ:  l000000000040E3C6 l000000000040DFED
l000000000040E3C6:
	rax = rax + 2<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	// succ:  l000000000040E3CE
l000000000040E3CE:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rdi = rax
	branch Test(EQ,Z) l000000000040E950
	// succ:  l000000000040E3E2 l000000000040E950
l000000000040E3E2:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(NE,Z) l000000000040E049
	// succ:  l000000000040E3EF l000000000040E049
l000000000040E3EF:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rdi = rax
	goto l000000000040E049
	// succ:  l000000000040E049
l000000000040E412:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040E145
	// succ:  l000000000040E41C l000000000040E145
l000000000040E41C:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x18<64>:word64] = rdx
	// succ:  l000000000040E424
l000000000040E424:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r8 = rax
	branch Test(EQ,Z) l000000000040DBC6
	// succ:  l000000000040E438 l000000000040DBC6
l000000000040E438:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(NE,Z) l000000000040DBC6
	// succ:  l000000000040E445 l000000000040DBC6
l000000000040E445:
	rcx = rbx
	Mem0[rsp + 0x28<64>:word64] = r8
	call fn0000000000409C60 (retsize: 8;)
	r8 = Mem0[rsp + 0x28<64>:word64]
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040DBC6
	// succ:  l000000000040DBC6
l000000000040E46F:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040E099
	// succ:  l000000000040E479 l000000000040E099
l000000000040E479:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	Mem0[rbx + 0x18<64>:word64] = rdx
	// succ:  l000000000040E481
l000000000040E481:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	rsi = rax
	branch Test(EQ,Z) l000000000040E0F5
	// succ:  l000000000040E495 l000000000040E0F5
l000000000040E495:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(NE,Z) l000000000040E0F5
	// succ:  l000000000040E4A2 l000000000040E0F5
l000000000040E4A2:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040E0F5
	// succ:  l000000000040E0F5
l000000000040E4C5:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040DDB1
	// succ:  l000000000040DDB1
l000000000040E4E8:
	rcx = rbx
	call fn0000000000403D30 (retsize: 8;)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	branch Test(NE,Z) l000000000040E266
	// succ:  l000000000040E4F9 l000000000040E266
l000000000040E4F9:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	goto l000000000040DA4D
	// succ:  l000000000040DA4D
l000000000040E501:
	rcx = rbx
	call fn0000000000407F20 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rax
	goto l000000000040DA4D
	// succ:  l000000000040DA4D
l000000000040E511:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x69<8>)
	branch Test(NE,Z) l000000000040DC20
	// succ:  l000000000040E51B l000000000040DC20
l000000000040E51B:
	rax = rax + 2<64>
	SCZO = cond(rax)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040CB30 (retsize: 8;)
	r8 = rax
	goto l000000000040DBC6
	// succ:  l000000000040DBC6
l000000000040E538:
	rcx = rbx
	call fn0000000000403D80 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rax
	goto l000000000040DA4D
	// succ:  l000000000040DA4D
l000000000040E548:
	eax = CONVERT(Mem0[rdx + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x72<8>)
	branch Test(EQ,Z) l000000000040F451
	// succ:  l000000000040E554 l000000000040F451
l000000000040E554:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l000000000040E145
	// succ:  l000000000040E55C l000000000040E145
l000000000040E55C:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	call fn000000000040D230 (retsize: 8;)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rax
	edx = 0x49<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040DBC6
	// succ:  l000000000040DBC6
l000000000040E587:
	eax = CONVERT(Mem0[rdx + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x72<8>)
	branch Test(EQ,Z) l000000000040F61D
	// succ:  l000000000040E593 l000000000040F61D
l000000000040E593:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l000000000040E099
	// succ:  l000000000040E59B l000000000040E099
l000000000040E59B:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	call fn000000000040D230 (retsize: 8;)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rax
	edx = 0x49<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040E0F5
	// succ:  l000000000040E0F5
l000000000040E5C6:
	edx = CONVERT(Mem0[rax + 1<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x72<8>)
	branch Test(EQ,Z) l000000000040F4D7
	// succ:  l000000000040E5D3 l000000000040F4D7
l000000000040E5D3:
	SCZO = cond(dl - 0x70<8>)
	branch Test(NE,Z) l000000000040DFED
	// succ:  l000000000040E5DC l000000000040DFED
l000000000040E5DC:
	rax = rax + 2<64>
	SCZO = cond(rax)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040D230 (retsize: 8;)
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rax
	edx = 0x49<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rdi = rax
	goto l000000000040E049
	// succ:  l000000000040E049
l000000000040E607:
	rcx = rbx
	call fn0000000000403D30 (retsize: 8;)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	branch Test(NE,Z) l000000000040E386
	// succ:  l000000000040E618 l000000000040E386
l000000000040E618:
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	goto l000000000040DD58
	// succ:  l000000000040DD58
l000000000040E620:
	rax = Mem0[r13 + 8<64>:word64]
	rdx = 0x000000000048EDE2<p64>
	rsi = Mem0[rax:word64]
	eax = Mem0[rax + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	v32 = Mem0[rbx + 0x50<64>:word32] + eax
	Mem0[rbx + 0x50<64>:word32] = v32
	SCZO = cond(v32)
	rcx = rsi
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040F4BA
	// succ:  l000000000040E647 l000000000040F4BA
l000000000040E647:
	rax = Mem0[r13 + 8<64>:word64]
	eax = Mem0[rax + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040EC4B
	// succ:  l000000000040E657 l000000000040EC4B
l000000000040E657:
	branch Test(LE,SZO) l000000000040E967
	// succ:  l000000000040E65D l000000000040E967
l000000000040E65D:
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000040E7AC
	// succ:  l000000000040E666 l000000000040E7AC
l000000000040E666:
	SCZO = cond(eax - 3<32>)
	branch Test(NE,Z) l000000000040E4F9
	// succ:  l000000000040E66F l000000000040E4F9
l000000000040E66F:
	rdx = 0x000000000048EDEB<p64>
	rcx = rsi
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040F497
	// succ:  l000000000040E686 l000000000040F497
l000000000040E686:
	SCZO = cond(Mem0[rsi:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040E4F9
	// succ:  l000000000040E68F l000000000040E4F9
l000000000040E68F:
	eax = CONVERT(Mem0[rsi + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x61<8>)
	branch Test(EQ,Z) l000000000040E69F
	// succ:  l000000000040E697 l000000000040E69F
l000000000040E697:
	SCZO = cond(al - 0x77<8>)
	branch Test(NE,Z) l000000000040E4F9
	// succ:  l000000000040E69F l000000000040E4F9
l000000000040E69F:
	edx = 0x5F<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rcx = rbx
	r14 = rax
	call fn00000000004080A0 (retsize: 8;)
	r15 = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x45<8>)
	branch Test(EQ,Z) l000000000040F783
	// succ:  l000000000040E6CA l000000000040F783
l000000000040E6CA:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(dl - 0x70<8>)
	branch Test(EQ,Z) l000000000040F75F
	// succ:  l000000000040E6D6 l000000000040F75F
l000000000040E6D6:
	SCZO = cond(dl - 0x69<8>)
	branch Test(NE,Z) l000000000040DA4D
	// succ:  l000000000040E6DF l000000000040DA4D
l000000000040E6DF:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x6C<8>)
	branch Test(NE,Z) l000000000040DA4D
	// succ:  l000000000040E6E9 l000000000040DA4D
l000000000040E6E9:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040E6F1
l000000000040E6F1:
	r9 = rax
	r8 = r15
	edx = 0x3A<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = r14
	r9 = rax
	edx = 0x39<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = r13
	r9 = rax
	edx = 0x38<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040DA4D
	// succ:  l000000000040DA4D
l000000000040E732:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x70<8>)
	branch Test(NE,Z) l000000000040E099
	// succ:  l000000000040E73C l000000000040E099
l000000000040E73C:
	rax = rdx + 2<64>
	Mem0[rbx + 0x18<64>:word64] = rax
	SCZO = cond(Mem0[rdx + 2<64>:byte] - 0x54<8>)
	branch Test(NE,Z) l000000000040E98A
	// succ:  l000000000040E74E l000000000040E98A
l000000000040E74E:
	rdx = rdx + 3<64>
	SCZO = cond(rdx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x18<64>:word64] = rdx
	// succ:  l000000000040E758
l000000000040E758:
	edx = Mem0[rbx + 0x28<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SCZO = cond(edx - Mem0[rbx + 0x2C<64>:word32])
	branch Test(GE,SO) l000000000040E0F5
	// succ:  l000000000040E766 l000000000040E0F5
l000000000040E766:
	rsi = CONVERT(edx, word32, int64)
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rsi = rsi *s 0x18<64>
	SCZO = cond(rsi)
	Mem0[rbx + 0x28<64>:word32] = edx
	rsi = rsi + Mem0[rbx + 0x20<64>:word64]
	SCZO = cond(rsi)
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000040E0F5
	// succ:  l000000000040E780 l000000000040E0F5
l000000000040E780:
	Mem0[rsi:word32] = 6<32>
	Mem0[rsi + 8<64>:word32] = eax
	goto l000000000040E0F5
	// succ:  l000000000040E0F5
l000000000040E78E:
	eax = Mem0[r13 + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040DA2F
	// succ:  l000000000040E79B l000000000040DA2F
l000000000040E79B:
	branch Test(LE,SZO) l000000000040E967
	// succ:  l000000000040E7A1 l000000000040E967
l000000000040E7A1:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SCZO = cond(eax - 2<32>)
	branch Test(NE,Z) l000000000040E666
	// succ:  l000000000040E7AC l000000000040E666
l000000000040E7AC:
	rax = Mem0[r13 + 8<64>:word64]
	rax = Mem0[rax:word64]
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x63<8>)
	branch Test(EQ,Z) l000000000040F41B
	// succ:  l000000000040E7BD l000000000040F41B
l000000000040E7BD:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	r14 = rax
	// succ:  l000000000040E7C8
l000000000040E7C8:
	rdx = 0x000000000048EDE5<p64>
	rcx = rsi
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040F5F3
	// succ:  l000000000040E7DF l000000000040F5F3
l000000000040E7DF:
	rdx = 0x000000000048F0CF<p64>
	rcx = rsi
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040E809
	// succ:  l000000000040E7F2 l000000000040E809
l000000000040E7F2:
	rdx = 0x000000000048F0D2<p64>
	rcx = rsi
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040F441
	// succ:  l000000000040E809 l000000000040F441
l000000000040E809:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	rsi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040F72C
	// succ:  l000000000040E821 l000000000040F72C
l000000000040E821:
	r9 = rsi
	r8 = r14
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = r13
	r9 = rax
	edx = 0x36<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040DA4D
	// succ:  l000000000040DA4D
l000000000040E84F:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x70<8>)
	branch Test(NE,Z) l000000000040DFED
	// succ:  l000000000040E859 l000000000040DFED
l000000000040E859:
	rdx = rax + 2<64>
	Mem0[rbx + 0x18<64>:word64] = rdx
	SCZO = cond(Mem0[rax + 2<64>:byte] - 0x54<8>)
	branch Test(NE,Z) l000000000040E93F
	// succ:  l000000000040E86B l000000000040E93F
l000000000040E86B:
	rax = rax + 3<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000040E875
l000000000040E875:
	edx = Mem0[rbx + 0x28<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - Mem0[rbx + 0x2C<64>:word32])
	branch Test(GE,SO) l000000000040E950
	// succ:  l000000000040E881 l000000000040E950
l000000000040E881:
	rdi = CONVERT(edx, word32, int64)
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rdi = rdi *s 0x18<64>
	SCZO = cond(rdi)
	Mem0[rbx + 0x28<64>:word32] = edx
	rdi = rdi + Mem0[rbx + 0x20<64>:word64]
	SCZO = cond(rdi)
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000040E049
	// succ:  l000000000040E89B l000000000040E049
l000000000040E89B:
	Mem0[rdi:word32] = 6<32>
	Mem0[rdi + 8<64>:word32] = eax
	goto l000000000040E049
	// succ:  l000000000040E049
l000000000040E8A9:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x70<8>)
	branch Test(NE,Z) l000000000040E145
	// succ:  l000000000040E8B3 l000000000040E145
l000000000040E8B3:
	rax = rdx + 2<64>
	Mem0[rbx + 0x18<64>:word64] = rax
	SCZO = cond(Mem0[rdx + 2<64>:byte] - 0x54<8>)
	branch Test(NE,Z) l000000000040E9B2
	// succ:  l000000000040E8C5 l000000000040E9B2
l000000000040E8C5:
	rdx = rdx + 3<64>
	SCZO = cond(rdx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x18<64>:word64] = rdx
	// succ:  l000000000040E8CF
l000000000040E8CF:
	edx = Mem0[rbx + 0x28<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(edx - Mem0[rbx + 0x2C<64>:word32])
	branch Test(GE,SO) l000000000040DBC6
	// succ:  l000000000040E8DE l000000000040DBC6
l000000000040E8DE:
	r8 = CONVERT(edx, word32, int64)
	edx = edx + 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	r8 = r8 *s 0x18<64>
	SCZO = cond(r8)
	Mem0[rbx + 0x28<64>:word32] = edx
	r8 = r8 + Mem0[rbx + 0x20<64>:word64]
	SCZO = cond(r8)
	SZO = cond(r8 & r8)
	C = false
	branch Test(EQ,Z) l000000000040DBC6
	// succ:  l000000000040E8F8 l000000000040DBC6
l000000000040E8F8:
	Mem0[r8:word32] = 6<32>
	Mem0[r8 + 8<64>:word32] = eax
	goto l000000000040DBC6
	// succ:  l000000000040DBC6
l000000000040E908:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l000000000040F4C7
	// succ:  l000000000040E912 l000000000040F4C7
l000000000040E912:
	v33 = Mem0[rbx + 0x18<64>:word64] + 2<64>
	Mem0[rbx + 0x18<64>:word64] = v33
	SCZO = cond(v33)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040DA4D
	// succ:  l000000000040DA4D
l000000000040E93F:
	rcx = rbx
	call fn0000000000403D30 (retsize: 8;)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	branch Test(NE,Z) l000000000040E875
	// succ:  l000000000040E950 l000000000040E875
l000000000040E950:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	goto l000000000040E049
	// succ:  l000000000040E049
l000000000040E957:
	rcx = rbx
	call fn0000000000407F20 (retsize: 8;)
	rsp = rsp + 8<64>
	r14 = rax
	goto l000000000040DD58
	// succ:  l000000000040DD58
l000000000040E967:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040E4F9
	// succ:  l000000000040E96F l000000000040E4F9
l000000000040E96F:
	r8 = r13
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = 0x34<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040DA4D
	// succ:  l000000000040DA4D
l000000000040E98A:
	rcx = rbx
	call fn0000000000403D30 (retsize: 8;)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	branch Test(NE,Z) l000000000040E758
	// succ:  l000000000040E99B l000000000040E758
l000000000040E99B:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l000000000040E0F5
	// succ:  l000000000040E0F5
l000000000040E9A2:
	rcx = rbx
	call fn0000000000403D80 (retsize: 8;)
	rsp = rsp + 8<64>
	r14 = rax
	goto l000000000040DD58
	// succ:  l000000000040DD58
l000000000040E9B2:
	rcx = rbx
	call fn0000000000403D30 (retsize: 8;)
	eax = eax + 1<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	branch Test(NE,Z) l000000000040E8CF
	// succ:  l000000000040E9C3 l000000000040E8CF
l000000000040E9C3:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	goto l000000000040DBC6
	// succ:  l000000000040DBC6
l000000000040E9CB:
	rax = Mem0[rsi + 8<64>:word64]
	rdx = 0x000000000048EDE2<p64>
	rdi = Mem0[rax:word64]
	eax = Mem0[rax + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	v38 = Mem0[rbx + 0x50<64>:word32] + eax
	Mem0[rbx + 0x50<64>:word32] = v38
	SCZO = cond(v38)
	rcx = rdi
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040F40E
	// succ:  l000000000040E9F2 l000000000040F40E
l000000000040E9F2:
	rax = Mem0[rsi + 8<64>:word64]
	eax = Mem0[rax + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040F2D4
	// succ:  l000000000040EA02 l000000000040F2D4
l000000000040EA02:
	branch Test(LE,SZO) l000000000040F26B
	// succ:  l000000000040EA08 l000000000040F26B
l000000000040EA08:
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000040EB04
	// succ:  l000000000040EA11 l000000000040EB04
l000000000040EA11:
	SCZO = cond(eax - 3<32>)
	branch Test(NE,Z) l000000000040E618
	// succ:  l000000000040EA1A l000000000040E618
l000000000040EA1A:
	rdx = 0x000000000048EDEB<p64>
	rcx = rdi
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040F5D0
	// succ:  l000000000040EA31 l000000000040F5D0
l000000000040EA31:
	SCZO = cond(Mem0[rdi:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040E618
	// succ:  l000000000040EA3A l000000000040E618
l000000000040EA3A:
	eax = CONVERT(Mem0[rdi + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x61<8>)
	branch Test(EQ,Z) l000000000040EA4A
	// succ:  l000000000040EA42 l000000000040EA4A
l000000000040EA42:
	SCZO = cond(al - 0x77<8>)
	branch Test(NE,Z) l000000000040E618
	// succ:  l000000000040EA4A l000000000040E618
l000000000040EA4A:
	edx = 0x5F<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rcx = rbx
	rdi = rax
	call fn00000000004080A0 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	r14 = rax
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x45<8>)
	branch Test(EQ,Z) l000000000040FB37
	// succ:  l000000000040EA74 l000000000040FB37
l000000000040EA74:
	SCZO = cond(al - 0x70<8>)
	branch Test(EQ,Z) l000000000040FB13
	// succ:  l000000000040EA7C l000000000040FB13
l000000000040EA7C:
	SCZO = cond(al - 0x69<8>)
	branch Test(NE,Z) l000000000040E618
	// succ:  l000000000040EA84 l000000000040E618
l000000000040EA84:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x6C<8>)
	branch Test(NE,Z) l000000000040E618
	// succ:  l000000000040EA8E l000000000040E618
l000000000040EA8E:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040EA96
l000000000040EA96:
	r8 = r14
	r9 = rax
	edx = 0x3A<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 0x39<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x38<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r14 = rax
	goto l000000000040DD58
	// succ:  l000000000040DD58
l000000000040EAD7:
	rcx = rbx
	call fn0000000000407F20 (retsize: 8;)
	rsp = rsp + 8<64>
	rdi = rax
	goto l000000000040E049
	// succ:  l000000000040E049
l000000000040EAE7:
	eax = Mem0[rsi + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040DD3A
	// succ:  l000000000040EAF3 l000000000040DD3A
l000000000040EAF3:
	branch Test(LE,SZO) l000000000040F26B
	// succ:  l000000000040EAF9 l000000000040F26B
l000000000040EAF9:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SCZO = cond(eax - 2<32>)
	branch Test(NE,Z) l000000000040EA11
	// succ:  l000000000040EB04 l000000000040EA11
l000000000040EB04:
	rax = Mem0[rsi + 8<64>:word64]
	rax = Mem0[rax:word64]
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x63<8>)
	branch Test(EQ,Z) l000000000040F5AA
	// succ:  l000000000040EB15 l000000000040F5AA
l000000000040EB15:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	r14 = rax
	// succ:  l000000000040EB20
l000000000040EB20:
	rdx = 0x000000000048EDE5<p64>
	rcx = rdi
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040F608
	// succ:  l000000000040EB37 l000000000040F608
l000000000040EB37:
	rdx = 0x000000000048F0CF<p64>
	rcx = rdi
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040EB61
	// succ:  l000000000040EB4A l000000000040EB61
l000000000040EB4A:
	rdx = 0x000000000048F0D2<p64>
	rcx = rdi
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040F8AB
	// succ:  l000000000040EB61 l000000000040F8AB
l000000000040EB61:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	rdi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040FA5F
	// succ:  l000000000040EB79 l000000000040FA5F
l000000000040EB79:
	r8 = r14
	r9 = rdi
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x36<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r14 = rax
	goto l000000000040DD58
	// succ:  l000000000040DD58
l000000000040EBA7:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	call fn00000000004080A0 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn0000000000409850 (retsize: 8;)
	r13 = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040F3EB
	// succ:  l000000000040EBD2 l000000000040F3EB
l000000000040EBD2:
	r9 = r13
	// succ:  l000000000040EBD5
l000000000040EBD5:
	r8 = rsi
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040DA4D
	// succ:  l000000000040DA4D
l000000000040EBED:
	rcx = rbx
	call fn0000000000407F20 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rax
	goto l000000000040DBC6
	// succ:  l000000000040DBC6
l000000000040EBFD:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000040EC0E
	// succ:  l000000000040EC03 l000000000040EC0E
l000000000040EC03:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	rsi = rax
	// succ:  l000000000040EC0E
l000000000040EC0E:
	v40 = Mem0[rbx + 0x18<64>:word64] + 2<64>
	Mem0[rbx + 0x18<64>:word64] = v40
	SCZO = cond(v40)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r14 = rax
	goto l000000000040DD58
	// succ:  l000000000040DD58
l000000000040EC3B:
	rcx = rbx
	call fn0000000000407F20 (retsize: 8;)
	rsp = rsp + 8<64>
	rsi = rax
	goto l000000000040E0F5
	// succ:  l000000000040E0F5
l000000000040EC4B:
	eax = CONVERT(Mem0[rsi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x6D<8>)
	branch Test(EQ,Z) l000000000040EC5A
	// succ:  l000000000040EC52 l000000000040EC5A
l000000000040EC52:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l000000000040DA2F
	// succ:  l000000000040EC5A l000000000040DA2F
l000000000040EC5A:
	SCZO = cond(al - Mem0[rsi + 1<64>:byte])
	branch Test(NE,Z) l000000000040DA2F
	// succ:  l000000000040EC63 l000000000040DA2F
l000000000040EC63:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040FA52
	// succ:  l000000000040EC70 l000000000040FA52
l000000000040EC70:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = rax
	r9 = rax
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	goto l000000000040DA37
	// succ:  l000000000040DA37
l000000000040EC90:
	eax = Mem0[rsi + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040E02B
	// succ:  l000000000040EC9C l000000000040E02B
l000000000040EC9C:
	branch Test(LE,SZO) l000000000040ED73
	// succ:  l000000000040ECA2 l000000000040ED73
l000000000040ECA2:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000040EE24
	// succ:  l000000000040ECAD l000000000040EE24
l000000000040ECAD:
	SCZO = cond(eax - 3<32>)
	branch Test(NE,Z) l000000000040E950
	// succ:  l000000000040ECB6 l000000000040E950
l000000000040ECB6:
	rdx = 0x000000000048EDEB<p64>
	rcx = rdi
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040F792
	// succ:  l000000000040ECCD l000000000040F792
l000000000040ECCD:
	SCZO = cond(Mem0[rdi:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040E950
	// succ:  l000000000040ECD6 l000000000040E950
l000000000040ECD6:
	eax = CONVERT(Mem0[rdi + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x61<8>)
	branch Test(EQ,Z) l000000000040ECE6
	// succ:  l000000000040ECDE l000000000040ECE6
l000000000040ECDE:
	SCZO = cond(al - 0x77<8>)
	branch Test(NE,Z) l000000000040E950
	// succ:  l000000000040ECE6 l000000000040E950
l000000000040ECE6:
	edx = 0x5F<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rcx = rbx
	rdi = rax
	call fn00000000004080A0 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	r13 = rax
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x45<8>)
	branch Test(EQ,Z) l000000000040F811
	// succ:  l000000000040ED10 l000000000040F811
l000000000040ED10:
	SCZO = cond(al - 0x70<8>)
	branch Test(EQ,Z) l000000000040F7F1
	// succ:  l000000000040ED18 l000000000040F7F1
l000000000040ED18:
	SCZO = cond(al - 0x69<8>)
	branch Test(NE,Z) l000000000040E950
	// succ:  l000000000040ED20 l000000000040E950
l000000000040ED20:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x6C<8>)
	branch Test(NE,Z) l000000000040F7E5
	// succ:  l000000000040ED2A l000000000040F7E5
l000000000040ED2A:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040ED32
l000000000040ED32:
	r9 = rax
	r8 = r13
	edx = 0x3A<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 0x39<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x38<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rdi = rax
	goto l000000000040E049
	// succ:  l000000000040E049
l000000000040ED73:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040E950
	// succ:  l000000000040ED7B l000000000040E950
l000000000040ED7B:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rsi
	edx = 0x34<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rdi = rax
	goto l000000000040E049
	// succ:  l000000000040E049
l000000000040ED96:
	rcx = rbx
	call fn0000000000403D80 (retsize: 8;)
	rsp = rsp + 8<64>
	rsi = rax
	goto l000000000040E0F5
	// succ:  l000000000040E0F5
l000000000040EDA6:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l000000000040F74F
	// succ:  l000000000040EDB1 l000000000040F74F
l000000000040EDB1:
	v42 = Mem0[rbx + 0x18<64>:word64] + 2<64>
	Mem0[rbx + 0x18<64>:word64] = v42
	SCZO = cond(v42)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	r8 = r13
	r9 = rax
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040DBC6
	// succ:  l000000000040DBC6
l000000000040EDDE:
	rax = Mem0[rsi + 8<64>:word64]
	rdx = 0x000000000048EDE2<p64>
	rdi = Mem0[rax:word64]
	eax = Mem0[rax + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	v45 = Mem0[rbx + 0x50<64>:word32] + eax
	Mem0[rbx + 0x50<64>:word32] = v45
	SCZO = cond(v45)
	rcx = rdi
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040F7D8
	// succ:  l000000000040EE05 l000000000040F7D8
l000000000040EE05:
	rax = Mem0[rsi + 8<64>:word64]
	eax = Mem0[rax + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040F565
	// succ:  l000000000040EE15 l000000000040F565
l000000000040EE15:
	branch Test(LE,SZO) l000000000040ED73
	// succ:  l000000000040EE1B l000000000040ED73
l000000000040EE1B:
	SCZO = cond(eax - 2<32>)
	branch Test(NE,Z) l000000000040ECAD
	// succ:  l000000000040EE24 l000000000040ECAD
l000000000040EE24:
	rax = Mem0[rsi + 8<64>:word64]
	rax = Mem0[rax:word64]
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x63<8>)
	branch Test(EQ,Z) l000000000040F835
	// succ:  l000000000040EE35 l000000000040F835
l000000000040EE35:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	r13 = rax
	// succ:  l000000000040EE40
l000000000040EE40:
	rdx = 0x000000000048EDE5<p64>
	rcx = rdi
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040F820
	// succ:  l000000000040EE57 l000000000040F820
l000000000040EE57:
	rdx = 0x000000000048F0CF<p64>
	rcx = rdi
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040EE81
	// succ:  l000000000040EE6A l000000000040EE81
l000000000040EE6A:
	rdx = 0x000000000048F0D2<p64>
	rcx = rdi
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040F85B
	// succ:  l000000000040EE81 l000000000040F85B
l000000000040EE81:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	rdi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040F709
	// succ:  l000000000040EE99 l000000000040F709
l000000000040EE99:
	r9 = rdi
	r8 = r13
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x36<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rdi = rax
	goto l000000000040E049
	// succ:  l000000000040E049
l000000000040EEC7:
	eax = Mem0[rsi + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040E0D7
	// succ:  l000000000040EED3 l000000000040E0D7
l000000000040EED3:
	branch Test(LE,SZO) l000000000040EFAE
	// succ:  l000000000040EED9 l000000000040EFAE
l000000000040EED9:
	r13d = r13d ^ r13d
	r13 = CONVERT(r13d, word32, uint64)
	SZO = cond(r13d)
	C = false
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000040F013
	// succ:  l000000000040EEE5 l000000000040F013
l000000000040EEE5:
	SCZO = cond(eax - 3<32>)
	branch Test(NE,Z) l000000000040E99B
	// succ:  l000000000040EEEE l000000000040E99B
l000000000040EEEE:
	rdx = 0x000000000048EDEB<p64>
	rcx = r13
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040F6E6
	// succ:  l000000000040EF05 l000000000040F6E6
l000000000040EF05:
	SCZO = cond(Mem0[r13 + 0<64>:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040E99B
	// succ:  l000000000040EF10 l000000000040E99B
l000000000040EF10:
	eax = CONVERT(Mem0[r13 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x61<8>)
	branch Test(EQ,Z) l000000000040EF21
	// succ:  l000000000040EF19 l000000000040EF21
l000000000040EF19:
	SCZO = cond(al - 0x77<8>)
	branch Test(NE,Z) l000000000040E99B
	// succ:  l000000000040EF21 l000000000040E99B
l000000000040EF21:
	edx = 0x5F<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rcx = rbx
	r13 = rax
	call fn00000000004080A0 (retsize: 8;)
	rdx = Mem0[rbx + 0x18<64>:word64]
	r14 = rax
	eax = CONVERT(Mem0[rdx:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x45<8>)
	branch Test(EQ,Z) l000000000040FA29
	// succ:  l000000000040EF4B l000000000040FA29
l000000000040EF4B:
	SCZO = cond(al - 0x70<8>)
	branch Test(EQ,Z) l000000000040FA05
	// succ:  l000000000040EF53 l000000000040FA05
l000000000040EF53:
	SCZO = cond(al - 0x69<8>)
	branch Test(NE,Z) l000000000040E99B
	// succ:  l000000000040EF5B l000000000040E99B
l000000000040EF5B:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x6C<8>)
	branch Test(NE,Z) l000000000040F903
	// succ:  l000000000040EF65 l000000000040F903
l000000000040EF65:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040EF6D
l000000000040EF6D:
	r9 = rax
	r8 = r14
	edx = 0x3A<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = r13
	r9 = rax
	edx = 0x39<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x38<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040E0F5
	// succ:  l000000000040E0F5
l000000000040EFAE:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040E99B
	// succ:  l000000000040EFB6 l000000000040E99B
l000000000040EFB6:
	r8 = rsi
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = 0x34<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040E0F5
	// succ:  l000000000040E0F5
l000000000040EFD1:
	rax = Mem0[rsi + 8<64>:word64]
	rdx = 0x000000000048EDE2<p64>
	r13 = Mem0[rax:word64]
	eax = Mem0[rax + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	v43 = Mem0[rbx + 0x50<64>:word32] + eax
	Mem0[rbx + 0x50<64>:word32] = v43
	SCZO = cond(v43)
	rcx = r13
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040F9F8
	// succ:  l000000000040EFF8 l000000000040F9F8
l000000000040EFF8:
	rax = Mem0[rsi + 8<64>:word64]
	eax = Mem0[rax + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040F51D
	// succ:  l000000000040F008 l000000000040F51D
l000000000040F008:
	branch Test(LE,SZO) l000000000040EFAE
	// succ:  l000000000040F00A l000000000040EFAE
l000000000040F00A:
	SCZO = cond(eax - 2<32>)
	branch Test(NE,Z) l000000000040EEE5
	// succ:  l000000000040F013 l000000000040EEE5
l000000000040F013:
	rax = Mem0[rsi + 8<64>:word64]
	rax = Mem0[rax:word64]
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x63<8>)
	branch Test(EQ,Z) l000000000040F8DD
	// succ:  l000000000040F024 l000000000040F8DD
l000000000040F024:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	r14 = rax
	// succ:  l000000000040F02F
l000000000040F02F:
	rdx = 0x000000000048EDE5<p64>
	rcx = r13
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040F8C8
	// succ:  l000000000040F046 l000000000040F8C8
l000000000040F046:
	rdx = 0x000000000048F0CF<p64>
	rcx = r13
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040F070
	// succ:  l000000000040F059 l000000000040F070
l000000000040F059:
	rdx = 0x000000000048F0D2<p64>
	rcx = r13
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040F90F
	// succ:  l000000000040F070 l000000000040F90F
l000000000040F070:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	r13 = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040FB46
	// succ:  l000000000040F088 l000000000040FB46
l000000000040F088:
	r9 = r13
	r8 = r14
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x36<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040E0F5
	// succ:  l000000000040E0F5
l000000000040F0B6:
	rcx = rbx
	call fn0000000000403D80 (retsize: 8;)
	rsp = rsp + 8<64>
	r8 = rax
	goto l000000000040DBC6
	// succ:  l000000000040DBC6
l000000000040F0C6:
	rax = Mem0[r13 + 8<64>:word64]
	rdx = 0x000000000048EDE2<p64>
	r14 = Mem0[rax:word64]
	eax = Mem0[rax + 0x10<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = eax - 2<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	v41 = Mem0[rbx + 0x50<64>:word32] + eax
	Mem0[rbx + 0x50<64>:word32] = v41
	SCZO = cond(v41)
	rcx = r14
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040F9EB
	// succ:  l000000000040F0ED l000000000040F9EB
l000000000040F0ED:
	rax = Mem0[r13 + 8<64>:word64]
	eax = Mem0[rax + 0x14<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040F663
	// succ:  l000000000040F0FD l000000000040F663
l000000000040F0FD:
	branch Test(LE,SZO) l000000000040F1DA
	// succ:  l000000000040F103 l000000000040F1DA
l000000000040F103:
	SCZO = cond(eax - 2<32>)
	branch Test(EQ,Z) l000000000040F348
	// succ:  l000000000040F10C l000000000040F348
l000000000040F10C:
	SCZO = cond(eax - 3<32>)
	branch Test(NE,Z) l000000000040E9C3
	// succ:  l000000000040F115 l000000000040E9C3
l000000000040F115:
	rdx = 0x000000000048EDEB<p64>
	rcx = r14
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040FAE0
	// succ:  l000000000040F12C l000000000040FAE0
l000000000040F12C:
	SCZO = cond(Mem0[r14:byte] - 0x6E<8>)
	branch Test(NE,Z) l000000000040E9C3
	// succ:  l000000000040F136 l000000000040E9C3
l000000000040F136:
	eax = CONVERT(Mem0[r14 + 1<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x61<8>)
	branch Test(EQ,Z) l000000000040F147
	// succ:  l000000000040F13F l000000000040F147
l000000000040F13F:
	SCZO = cond(al - 0x77<8>)
	branch Test(NE,Z) l000000000040E9C3
	// succ:  l000000000040F147 l000000000040E9C3
l000000000040F147:
	edx = 0x5F<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rcx = rbx
	r14 = rax
	call fn00000000004080A0 (retsize: 8;)
	r15 = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	edx = CONVERT(Mem0[rax:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 0x45<8>)
	branch Test(EQ,Z) l000000000040F6CA
	// succ:  l000000000040F172 l000000000040F6CA
l000000000040F172:
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(dl - 0x70<8>)
	branch Test(EQ,Z) l000000000040F6A6
	// succ:  l000000000040F17E l000000000040F6A6
l000000000040F17E:
	SCZO = cond(dl - 0x69<8>)
	branch Test(NE,Z) l000000000040DBC6
	// succ:  l000000000040F187 l000000000040DBC6
l000000000040F187:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x6C<8>)
	branch Test(NE,Z) l000000000040DBC6
	// succ:  l000000000040F191 l000000000040DBC6
l000000000040F191:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	// succ:  l000000000040F199
l000000000040F199:
	r9 = rax
	r8 = r15
	edx = 0x3A<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = r14
	r9 = rax
	edx = 0x39<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = r13
	r9 = rax
	edx = 0x38<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040DBC6
	// succ:  l000000000040DBC6
l000000000040F1DA:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040E9C3
	// succ:  l000000000040F1E2 l000000000040E9C3
l000000000040F1E2:
	r8 = r13
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	edx = 0x34<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040DBC6
	// succ:  l000000000040DBC6
l000000000040F1FD:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l000000000040F89B
	// succ:  l000000000040F207 l000000000040F89B
l000000000040F207:
	v44 = Mem0[rbx + 0x18<64>:word64] + 2<64>
	Mem0[rbx + 0x18<64>:word64] = v44
	SCZO = cond(v44)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040E0F5
	// succ:  l000000000040E0F5
l000000000040F234:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(cl & cl)
	C = false
	branch Test(NE,Z) l000000000040F9DB
	// succ:  l000000000040F23E l000000000040F9DB
l000000000040F23E:
	v46 = Mem0[rbx + 0x18<64>:word64] + 2<64>
	Mem0[rbx + 0x18<64>:word64] = v46
	SCZO = cond(v46)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 0x30<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rdi = rax
	goto l000000000040E049
	// succ:  l000000000040E049
l000000000040F26B:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040E618
	// succ:  l000000000040F273 l000000000040E618
l000000000040F273:
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	r8 = rsi
	edx = 0x34<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r14 = rax
	goto l000000000040DD58
	// succ:  l000000000040DD58
l000000000040F28E:
	rax = rax + 2<64>
	SCZO = cond(rax)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn00000000004080A0 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn0000000000409850 (retsize: 8;)
	rdi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040F947
	// succ:  l000000000040F2B9 l000000000040F947
l000000000040F2B9:
	r9 = rdi
	// succ:  l000000000040F2BC
l000000000040F2BC:
	r8 = rsi
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r14 = rax
	goto l000000000040DD58
	// succ:  l000000000040DD58
l000000000040F2D4:
	eax = CONVERT(Mem0[rdi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x6D<8>)
	branch Test(EQ,Z) l000000000040F2E3
	// succ:  l000000000040F2DB l000000000040F2E3
l000000000040F2DB:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l000000000040DD3A
	// succ:  l000000000040F2E3 l000000000040DD3A
l000000000040F2E3:
	SCZO = cond(al - Mem0[rdi + 1<64>:byte])
	branch Test(NE,Z) l000000000040DD3A
	// succ:  l000000000040F2EC l000000000040DD3A
l000000000040F2EC:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040FB69
	// succ:  l000000000040F2F9 l000000000040FB69
l000000000040F2F9:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = rax
	r9 = rax
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	goto l000000000040DD42
	// succ:  l000000000040DD42
l000000000040F319:
	rcx = rbx
	call fn0000000000403D80 (retsize: 8;)
	rsp = rsp + 8<64>
	rdi = rax
	goto l000000000040E049
	// succ:  l000000000040E049
l000000000040F329:
	eax = Mem0[r13 + 8<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 1<32>)
	branch Test(EQ,Z) l000000000040E183
	// succ:  l000000000040F336 l000000000040E183
l000000000040F336:
	branch Test(LE,SZO) l000000000040F1DA
	// succ:  l000000000040F33C l000000000040F1DA
l000000000040F33C:
	r14d = r14d ^ r14d
	r14 = CONVERT(r14d, word32, uint64)
	SZO = cond(r14d)
	C = false
	SCZO = cond(eax - 2<32>)
	branch Test(NE,Z) l000000000040F10C
	// succ:  l000000000040F348 l000000000040F10C
l000000000040F348:
	rax = Mem0[r13 + 8<64>:word64]
	rax = Mem0[rax:word64]
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x63<8>)
	branch Test(EQ,Z) l000000000040FABA
	// succ:  l000000000040F359 l000000000040FABA
l000000000040F359:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	r15 = rax
	// succ:  l000000000040F364
l000000000040F364:
	rdx = 0x000000000048EDE5<p64>
	rcx = r14
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040FAA5
	// succ:  l000000000040F37B l000000000040FAA5
l000000000040F37B:
	rdx = 0x000000000048F0CF<p64>
	rcx = r14
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040F3A5
	// succ:  l000000000040F38E l000000000040F3A5
l000000000040F38E:
	rdx = 0x000000000048F0D2<p64>
	rcx = r14
	eax = strcmp(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040FB03
	// succ:  l000000000040F3A5 l000000000040FB03
l000000000040F3A5:
	rcx = rbx
	call fn0000000000409850 (retsize: 8;)
	r14 = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040F7B5
	// succ:  l000000000040F3BD l000000000040F7B5
l000000000040F3BD:
	r9 = r14
	r8 = r15
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = r13
	r9 = rax
	edx = 0x36<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040DBC6
	// succ:  l000000000040DBC6
l000000000040F3EB:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = r13
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r9 = rax
	goto l000000000040EBD5
	// succ:  l000000000040EBD5
l000000000040F40E:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	goto l000000000040DD42
	// succ:  l000000000040DD42
l000000000040F41B:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 0x72<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 1<8>)
	branch Test(ULE,CZ) l000000000040F431
	// succ:  l000000000040F426 l000000000040F431
l000000000040F426:
	eax = eax - 0x63<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 1<8>)
	branch Test(UGT,CZ) l000000000040E7BD
	// succ:  l000000000040F431 l000000000040E7BD
l000000000040F431:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	r14 = rax
	goto l000000000040E7C8
	// succ:  l000000000040E7C8
l000000000040F441:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rsi = rax
	goto l000000000040E821
	// succ:  l000000000040E821
l000000000040F451:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	call fn00000000004080A0 (retsize: 8;)
	rcx = rbx
	r13 = rax
	call fn0000000000409850 (retsize: 8;)
	r14 = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040F96A
	// succ:  l000000000040F47C l000000000040F96A
l000000000040F47C:
	r9 = r14
	// succ:  l000000000040F47F
l000000000040F47F:
	r8 = r13
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r8 = rax
	goto l000000000040DBC6
	// succ:  l000000000040DBC6
l000000000040F497:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	r14 = rax
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	r15 = rax
	call fn000000000040D230 (retsize: 8;)
	goto l000000000040E6F1
	// succ:  l000000000040E6F1
l000000000040F4BA:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	goto l000000000040DA37
	// succ:  l000000000040DA37
l000000000040F4C7:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	rsi = rax
	goto l000000000040E912
	// succ:  l000000000040E912
l000000000040F4D7:
	rax = rax + 2<64>
	SCZO = cond(rax)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn00000000004080A0 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn0000000000409850 (retsize: 8;)
	rdi = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040FA82
	// succ:  l000000000040F502 l000000000040FA82
l000000000040F502:
	r9 = rdi
	// succ:  l000000000040F505
l000000000040F505:
	r8 = rsi
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rdi = rax
	goto l000000000040E049
	// succ:  l000000000040E049
l000000000040F51D:
	eax = CONVERT(Mem0[r13 + 0<64>:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x6D<8>)
	branch Test(EQ,Z) l000000000040F52E
	// succ:  l000000000040F526 l000000000040F52E
l000000000040F526:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l000000000040E0D7
	// succ:  l000000000040F52E l000000000040E0D7
l000000000040F52E:
	SCZO = cond(al - Mem0[r13 + 1<64>:byte])
	branch Test(NE,Z) l000000000040E0D7
	// succ:  l000000000040F538 l000000000040E0D7
l000000000040F538:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040F86B
	// succ:  l000000000040F545 l000000000040F86B
l000000000040F545:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = rax
	r9 = rax
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	goto l000000000040E0DF
	// succ:  l000000000040E0DF
l000000000040F565:
	eax = CONVERT(Mem0[rdi:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x6D<8>)
	branch Test(EQ,Z) l000000000040F574
	// succ:  l000000000040F56C l000000000040F574
l000000000040F56C:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l000000000040E02B
	// succ:  l000000000040F574 l000000000040E02B
l000000000040F574:
	SCZO = cond(al - Mem0[rdi + 1<64>:byte])
	branch Test(NE,Z) l000000000040E02B
	// succ:  l000000000040F57D l000000000040E02B
l000000000040F57D:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040F8BB
	// succ:  l000000000040F58A l000000000040F8BB
l000000000040F58A:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = rax
	r9 = rax
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	goto l000000000040E033
	// succ:  l000000000040E033
l000000000040F5AA:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 0x72<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 1<8>)
	branch Test(ULE,CZ) l000000000040F5C0
	// succ:  l000000000040F5B5 l000000000040F5C0
l000000000040F5B5:
	eax = eax - 0x63<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 1<8>)
	branch Test(UGT,CZ) l000000000040EB15
	// succ:  l000000000040F5C0 l000000000040EB15
l000000000040F5C0:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	r14 = rax
	goto l000000000040EB20
	// succ:  l000000000040EB20
l000000000040F5D0:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	rdi = rax
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	r14 = rax
	call fn000000000040D230 (retsize: 8;)
	goto l000000000040EA96
	// succ:  l000000000040EA96
l000000000040F5F3:
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rsi = rax
	goto l000000000040E821
	// succ:  l000000000040E821
l000000000040F608:
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rdi = rax
	goto l000000000040EB79
	// succ:  l000000000040EB79
l000000000040F61D:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	call fn00000000004080A0 (retsize: 8;)
	rcx = rbx
	rsi = rax
	call fn0000000000409850 (retsize: 8;)
	r13 = rax
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x49<8>)
	branch Test(EQ,Z) l000000000040F878
	// succ:  l000000000040F648 l000000000040F878
l000000000040F648:
	r9 = r13
	// succ:  l000000000040F64B
l000000000040F64B:
	r8 = rsi
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040E0F5
	// succ:  l000000000040E0F5
l000000000040F663:
	eax = CONVERT(Mem0[r14:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(al - 0x6D<8>)
	branch Test(EQ,Z) l000000000040F673
	// succ:  l000000000040F66B l000000000040F673
l000000000040F66B:
	SCZO = cond(al - 0x70<8>)
	branch Test(NE,Z) l000000000040E183
	// succ:  l000000000040F673 l000000000040E183
l000000000040F673:
	SCZO = cond(al - Mem0[r14 + 1<64>:byte])
	branch Test(NE,Z) l000000000040E183
	// succ:  l000000000040F67D l000000000040E183
l000000000040F67D:
	rax = Mem0[rbx + 0x18<64>:word64]
	SCZO = cond(Mem0[rax:byte] - 0x5F<8>)
	branch Test(EQ,Z) l000000000040F6D9
	// succ:  l000000000040F686 l000000000040F6D9
l000000000040F686:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	edx = 0x37<32>
	rdx = CONVERT(edx, word32, uint64)
	r8 = rax
	r9 = rax
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	goto l000000000040E18B
	// succ:  l000000000040E18B
l000000000040F6A6:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x69<8>)
	branch Test(NE,Z) l000000000040DBC6
	// succ:  l000000000040F6B0 l000000000040DBC6
l000000000040F6B0:
	rax = rax + 2<64>
	SCZO = cond(rax)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040F199
	// succ:  l000000000040F199
l000000000040F6CA:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000040F199
	// succ:  l000000000040F199
l000000000040F6D9:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	goto l000000000040E183
	// succ:  l000000000040E183
l000000000040F6E6:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	r13 = rax
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	r14 = rax
	call fn000000000040D230 (retsize: 8;)
	goto l000000000040EF6D
	// succ:  l000000000040EF6D
l000000000040F709:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rdi = rax
	goto l000000000040EE99
	// succ:  l000000000040EE99
l000000000040F72C:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rsi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rsi = rax
	goto l000000000040E821
	// succ:  l000000000040E821
l000000000040F74F:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	r13 = rax
	goto l000000000040EDB1
	// succ:  l000000000040EDB1
l000000000040F75F:
	SCZO = cond(Mem0[rax + 1<64>:byte] - 0x69<8>)
	branch Test(NE,Z) l000000000040DA4D
	// succ:  l000000000040F769 l000000000040DA4D
l000000000040F769:
	rax = rax + 2<64>
	SCZO = cond(rax)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040E6F1
	// succ:  l000000000040E6F1
l000000000040F783:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000040E6F1
	// succ:  l000000000040E6F1
l000000000040F792:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	rdi = rax
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	r13 = rax
	call fn000000000040D230 (retsize: 8;)
	goto l000000000040ED32
	// succ:  l000000000040ED32
l000000000040F7B5:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = r14
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r14 = rax
	goto l000000000040F3BD
	// succ:  l000000000040F3BD
l000000000040F7D8:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	goto l000000000040E033
	// succ:  l000000000040E033
l000000000040F7E5:
	eax = 0x69<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000040F7EA
l000000000040F7EA:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	goto l000000000040E084
	// succ:  l000000000040E084
l000000000040F7F1:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x69<8>)
	branch Test(NE,Z) l000000000040F7EA
	// succ:  l000000000040F7F7 l000000000040F7EA
l000000000040F7F7:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040ED32
	// succ:  l000000000040ED32
l000000000040F811:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x18<64>:word64] = rdx
	goto l000000000040ED32
	// succ:  l000000000040ED32
l000000000040F820:
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	rdi = rax
	goto l000000000040EE99
	// succ:  l000000000040EE99
l000000000040F835:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 0x72<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 1<8>)
	branch Test(ULE,CZ) l000000000040F84B
	// succ:  l000000000040F840 l000000000040F84B
l000000000040F840:
	eax = eax - 0x63<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 1<8>)
	branch Test(UGT,CZ) l000000000040EE35
	// succ:  l000000000040F84B l000000000040EE35
l000000000040F84B:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	r13 = rax
	goto l000000000040EE40
	// succ:  l000000000040EE40
l000000000040F85B:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rdi = rax
	goto l000000000040EE99
	// succ:  l000000000040EE99
l000000000040F86B:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	goto l000000000040E0D7
	// succ:  l000000000040E0D7
l000000000040F878:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = r13
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r9 = rax
	goto l000000000040F64B
	// succ:  l000000000040F64B
l000000000040F89B:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	rsi = rax
	goto l000000000040F207
	// succ:  l000000000040F207
l000000000040F8AB:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rdi = rax
	goto l000000000040EB79
	// succ:  l000000000040EB79
l000000000040F8BB:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	goto l000000000040E02B
	// succ:  l000000000040E02B
l000000000040F8C8:
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	r13 = rax
	goto l000000000040F088
	// succ:  l000000000040F088
l000000000040F8DD:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 0x72<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 1<8>)
	branch Test(ULE,CZ) l000000000040F8F3
	// succ:  l000000000040F8E8 l000000000040F8F3
l000000000040F8E8:
	eax = eax - 0x63<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 1<8>)
	branch Test(UGT,CZ) l000000000040F024
	// succ:  l000000000040F8F3 l000000000040F024
l000000000040F8F3:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	r14 = rax
	goto l000000000040F02F
	// succ:  l000000000040F02F
l000000000040F903:
	eax = 0x69<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l000000000040F908
l000000000040F908:
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	goto l000000000040E130
	// succ:  l000000000040E130
l000000000040F90F:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	r13 = rax
	goto l000000000040F088
	// succ:  l000000000040F088
l000000000040F91F:
	SCZO = cond(dl - 0x69<8>)
	branch Test(EQ,Z) l000000000040D8CE
	// succ:  l000000000040F928 l000000000040D8CE
l000000000040F928:
	goto l000000000040D966
	// succ:  l000000000040D966
l000000000040F92D:
	rax = rax + 1<64>
	SCZO = cond(rax)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040E18B
	// succ:  l000000000040E18B
l000000000040F947:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r9 = rax
	goto l000000000040F2BC
	// succ:  l000000000040F2BC
l000000000040F96A:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = r14
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r9 = rax
	goto l000000000040F47F
	// succ:  l000000000040F47F
l000000000040F98D:
	rax = rax + 1<64>
	SCZO = cond(rax)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040E0DF
	// succ:  l000000000040E0DF
l000000000040F9A7:
	rax = rax + 1<64>
	SCZO = cond(rax)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040DA37
	// succ:  l000000000040DA37
l000000000040F9C1:
	rax = rax + 1<64>
	SCZO = cond(rax)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040DD42
	// succ:  l000000000040DD42
l000000000040F9DB:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	rsi = rax
	goto l000000000040F23E
	// succ:  l000000000040F23E
l000000000040F9EB:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	goto l000000000040E18B
	// succ:  l000000000040E18B
l000000000040F9F8:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	goto l000000000040E0DF
	// succ:  l000000000040E0DF
l000000000040FA05:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x69<8>)
	branch Test(NE,Z) l000000000040F908
	// succ:  l000000000040FA0F l000000000040F908
l000000000040FA0F:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040EF6D
	// succ:  l000000000040EF6D
l000000000040FA29:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x18<64>:word64] = rdx
	goto l000000000040EF6D
	// succ:  l000000000040EF6D
l000000000040FA38:
	rax = rax + 1<64>
	SCZO = cond(rax)
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rax
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040E033
	// succ:  l000000000040E033
l000000000040FA52:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	goto l000000000040DA2F
	// succ:  l000000000040DA2F
l000000000040FA5F:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	rdi = rax
	goto l000000000040EB79
	// succ:  l000000000040EB79
l000000000040FA82:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = rdi
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r9 = rax
	goto l000000000040F505
	// succ:  l000000000040F505
l000000000040FAA5:
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn000000000040CB30 (retsize: 8;)
	r14 = rax
	goto l000000000040F3BD
	// succ:  l000000000040F3BD
l000000000040FABA:
	eax = CONVERT(Mem0[rax:byte], byte, word32)
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 0x72<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(dl - 1<8>)
	branch Test(ULE,CZ) l000000000040FAD0
	// succ:  l000000000040FAC5 l000000000040FAD0
l000000000040FAC5:
	eax = eax - 0x63<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	SCZO = cond(al - 1<8>)
	branch Test(UGT,CZ) l000000000040F359
	// succ:  l000000000040FAD0 l000000000040F359
l000000000040FAD0:
	rcx = rbx
	call fn00000000004080A0 (retsize: 8;)
	r15 = rax
	goto l000000000040F364
	// succ:  l000000000040F364
l000000000040FAE0:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	r14 = rax
	call fn000000000040D230 (retsize: 8;)
	rcx = rbx
	r15 = rax
	call fn000000000040D230 (retsize: 8;)
	goto l000000000040F199
	// succ:  l000000000040F199
l000000000040FB03:
	rcx = rbx
	call fn000000000040D230 (retsize: 8;)
	r14 = rax
	goto l000000000040F3BD
	// succ:  l000000000040F3BD
l000000000040FB13:
	SCZO = cond(Mem0[rdx + 1<64>:byte] - 0x69<8>)
	branch Test(NE,Z) l000000000040E618
	// succ:  l000000000040FB1D l000000000040E618
l000000000040FB1D:
	rdx = rdx + 2<64>
	SCZO = cond(rdx)
	rcx = rbx
	Mem0[rbx + 0x18<64>:word64] = rdx
	edx = 0x45<32>
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000040CB30 (retsize: 8;)
	goto l000000000040EA96
	// succ:  l000000000040EA96
l000000000040FB37:
	rdx = rdx + 1<64>
	SCZO = cond(rdx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	Mem0[rbx + 0x18<64>:word64] = rdx
	goto l000000000040EA96
	// succ:  l000000000040EA96
l000000000040FB46:
	rcx = rbx
	call fn0000000000409C60 (retsize: 8;)
	r8 = r13
	r9 = rax
	edx = 4<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rbx
	call fn0000000000403730 (retsize: 8;)
	r13 = rax
	goto l000000000040F088
	// succ:  l000000000040F088
l000000000040FB69:
	rax = rax + 1<64>
	SCZO = cond(rax)
	Mem0[rbx + 0x18<64>:word64] = rax
	goto l000000000040DD3A
	// succ:  l000000000040DD3A
fn000000000040D820_exit:


// fn000000000040FB80
// Return size: 8
define fn000000000040FB80
fn000000000040FB80_entry:
	rsp = fp
	// succ:  l000000000040FB80
l000000000040FB80:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000040FB99
	// succ:  l000000000040FB8F l000000000040FB99
l000000000040FB8F:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l000000000040FBC0
	// succ:  l000000000040FB94 l000000000040FBC0
l000000000040FB94:
	SZO = cond(r8 & r8)
	C = false
	branch Test(NE,Z) l000000000040FBC0
	// succ:  l000000000040FB99 l000000000040FBC0
l000000000040FB99:
	SZO = cond(r9 & r9)
	C = false
	branch Test(EQ,Z) l000000000040FC81
	// succ:  l000000000040FBA2 l000000000040FC81
l000000000040FBA2:
	Mem0[r9:word32] = 0xFFFFFFFD<32>
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000040FBAB
l000000000040FBAB:
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000040FB80_exit
l000000000040FBC0:
	rbp = r8
	rdi = rdx
	r8 = rsp + 0x20<64>
	rdx = 0x0000000000404210<p64>
	rsi = r9
	Mem0[rsp + 0x20<64>:word64] = 0<64>
	Mem0[rsp + 0x28<64>:word64] = 0<64>
	Mem0[rsp + 0x30<64>:word64] = 0<64>
	Mem0[rsp + 0x38<64>:word32] = 0<32>
	call fn000000000040C6B0 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040FCC0
	// succ:  l000000000040FC05 l000000000040FCC0
l000000000040FC05:
	eax = Mem0[rsp + 0x38<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	rbx = Mem0[rsp + 0x20<64>:word64]
	r12d = 1<32>
	r12 = CONVERT(r12d, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040FC1C
	// succ:  l000000000040FC16_1 l000000000040FC1C
l000000000040FC16_1:
	r12 = Mem0[rsp + 0x30<64>:word64]
	// succ:  l000000000040FC1C
l000000000040FC1C:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l000000000040FC70
	// succ:  l000000000040FC21 l000000000040FC70
l000000000040FC21:
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l000000000040FCA0
	// succ:  l000000000040FC26 l000000000040FCA0
l000000000040FC26:
	rcx = rbx
	eax = strlen(rcx)
	SCZO = cond(rax - Mem0[rbp + 0<64>:word64])
	branch Test(UGE,C) l000000000040FC90
	// succ:  l000000000040FC34 l000000000040FC90
l000000000040FC34:
	r8 = rax + 1<64>
	rdx = rbx
	rcx = rdi
	rax = memcpy(rcx, rdx, r8)
	rcx = rbx
	rbx = rdi
	free(rcx)
	// succ:  l000000000040FC4E
l000000000040FC4E:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000040FCB0
	// succ:  l000000000040FC53 l000000000040FCB0
l000000000040FC53:
	rax = rbx
	Mem0[rsi:word32] = 0<32>
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000040FB80_exit
l000000000040FC70:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000040FC81
	// succ:  l000000000040FC75 l000000000040FC81
l000000000040FC75:
	SCZO = cond(r12 - 1<64>)
	branch Test(EQ,Z) l000000000040FCD3
	// succ:  l000000000040FC7B l000000000040FCD3
l000000000040FC7B:
	Mem0[rsi:word32] = 0xFFFFFFFE<32>
	// succ:  l000000000040FC81
l000000000040FC81:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000040FC83
l000000000040FC83:
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000040FB80_exit
l000000000040FC90:
	rcx = rdi
	free(rcx)
	// succ:  l000000000040FC98
l000000000040FC98:
	Mem0[rbp + 0<64>:word64] = r12
	goto l000000000040FC4E
	// succ:  l000000000040FC4E
l000000000040FCA0:
	SZO = cond(rbp & rbp)
	C = false
	branch Test(NE,Z) l000000000040FC98
	// succ:  l000000000040FCA5 l000000000040FC98
l000000000040FCA5:
	goto l000000000040FC4E
	// succ:  l000000000040FC4E
l000000000040FCB0:
	rax = rbx
	goto l000000000040FBAB
	// succ:  l000000000040FBAB
l000000000040FCC0:
	rcx = Mem0[rsp + 0x20<64>:word64]
	free(rcx)
	SZO = cond(rsi & rsi)
	C = false
	branch Test(NE,Z) l000000000040FC7B
	// succ:  l000000000040FCCF l000000000040FC7B
l000000000040FCCF:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000040FC83
	// succ:  l000000000040FC83
l000000000040FCD3:
	Mem0[rsi:word32] = 0xFFFFFFFF<32>
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l000000000040FBAB
	// succ:  l000000000040FBAB
fn000000000040FB80_exit:


// fn000000000040FCE0
// Return size: 8
define fn000000000040FCE0
fn000000000040FCE0_entry:
	rsp = fp
	// succ:  l000000000040FCE0
l000000000040FCE0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SZO = cond(rcx & rcx)
	C = false
	branch Test(EQ,Z) l000000000040FD00
	// succ:  l000000000040FCE9 l000000000040FD00
l000000000040FCE9:
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l000000000040FD00
	// succ:  l000000000040FCEE l000000000040FD00
l000000000040FCEE:
	call fn000000000040C6B0 (retsize: 8;)
	SCZO = cond(eax - 1<32>)
	eax = eax - eax - C
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & 0xFFFFFFFE<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l000000000040FCFB
l000000000040FCFB:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000040FCE0_exit
l000000000040FD00:
	eax = 0xFFFFFFFD<32>
	rax = CONVERT(eax, word32, uint64)
	goto l000000000040FCFB
	// succ:  l000000000040FCFB
fn000000000040FCE0_exit:


// fn000000000040FD10
// Return size: 8
define fn000000000040FD10
fn000000000040FD10_entry:
	rsp = fp
	// succ:  l000000000040FD10
l000000000040FD10:
	rax = rcx
	return
	// succ:  fn000000000040FD10_exit
fn000000000040FD10_exit:


// fn000000000040FD20
// Return size: 8
define fn000000000040FD20
fn000000000040FD20_entry:
	rsp = fp
	// succ:  l000000000040FD20
l000000000040FD20:
	rax = rcx
	return
	// succ:  fn000000000040FD20_exit
fn000000000040FD20_exit:


// fn000000000040FD30
// Return size: 8
define fn000000000040FD30
fn000000000040FD30_entry:
	rsp = fp
	// succ:  l000000000040FD30
l000000000040FD30:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn000000000040FD30_exit
fn000000000040FD30_exit:


// fn000000000040FD40
// Return size: 8
define fn000000000040FD40
fn000000000040FD40_entry:
	rsp = fp
	// succ:  l000000000040FD40
l000000000040FD40:
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	rax = Mem0[0x00000000004AD070<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040FD7C
	// succ:  l000000000040FD50 l000000000040FD7C
l000000000040FD50:
	xmm0 = SEQ(0<64>, Mem0[rsp + 0x80<64>:real64])
	Mem0[rsp + 0x20<64>:word32] = ecx
	rcx = rsp + 0x20<64>
	Mem0[rsp + 0x28<64>:word64] = rdx
	Mem0[rsp + 0x30<64>:real64] = SLICE(xmm2, real64, 0)
	Mem0[rsp + 0x38<64>:real64] = SLICE(xmm3, real64, 0)
	Mem0[rsp + 0x40<64>:real64] = SLICE(xmm0, real64, 0)
	call rax (retsize: 8;)
	// succ:  l000000000040FD7C
l000000000040FD7C:
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	return
	// succ:  fn000000000040FD40_exit
fn000000000040FD40_exit:


// fn000000000040FD90
// Return size: 0
define fn000000000040FD90
fn000000000040FD90_entry:
	rsp = fp
	// succ:  l000000000040FD90
l000000000040FD90:
	Mem0[0x00000000004AD070<p64>:word64] = rcx
	__setusermatherr(rcx)
	return
	// succ:  fn000000000040FD90_exit
fn000000000040FD90_exit:


// fn000000000040FDA0
// Return size: 8
define fn000000000040FDA0
fn000000000040FDA0_entry:
	rsp = fp
	// succ:  l000000000040FDA0
l000000000040FDA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x78<64>
	SCZO = cond(rsp)
	Mem0[rsp + 0x40<64>:word128] = xmm6
	Mem0[rsp + 0x50<64>:word128] = xmm7
	Mem0[rsp + 0x60<64>:word128] = xmm8
	SCZO = cond(Mem0[rcx:word32] - 6<32>)
	branch Test(UGT,CZ) l000000000040FE90
	// succ:  l000000000040FDBF l000000000040FE90
l000000000040FDBF:
	edx = Mem0[rcx:word32]
	rdx = CONVERT(edx, word32, uint64)
	rax = 0x00000000004905E4<p64>
	rdx = CONVERT(Mem0[rax + rdx * 4<64>:word32], word32, int64)
	rax = rax + rdx
	SCZO = cond(rax)
	switch (Mem0[rcx:word32]) { l000000000040FE90 l000000000040FDD1 l000000000040FE40 l000000000040FE50 l000000000040FE60 l000000000040FE70 l000000000040FE80 }
	// succ:  l000000000040FE90 l000000000040FDD1 l000000000040FE40 l000000000040FE50 l000000000040FE60 l000000000040FE70 l000000000040FE80
l000000000040FDD1:
	rbx = 0x00000000004904C0<p64>
	// succ:  l000000000040FDE0
l000000000040FDE0:
	xmm8 = SEQ(0<64>, Mem0[rcx + 0x20<64>:real64])
	rsi = Mem0[rcx + 8<64>:word64]
	xmm7 = SEQ(0<64>, Mem0[rcx + 0x18<64>:real64])
	xmm6 = SEQ(0<64>, Mem0[rcx + 0x10<64>:real64])
	call _iob_func (retsize: 8;)
	Mem0[rsp + 0x30<64>:real64] = SLICE(xmm8, real64, 0)
	rcx = rax + 0x60<64>
	rdx = 0x00000000004905B8<p64>
	Mem0[rsp + 0x28<64>:real64] = SLICE(xmm7, real64, 0)
	r9 = rsi
	r8 = rbx
	Mem0[rsp + 0x20<64>:real64] = SLICE(xmm6, real64, 0)
	eax = fprintf(rcx, rdx, 0<32>)
	xmm6 = Mem0[rsp + 0x40<64>:word128]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	xmm7 = Mem0[rsp + 0x50<64>:word128]
	xmm8 = Mem0[rsp + 0x60<64>:word128]
	rsp = rsp + 0x78<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn000000000040FDA0_exit
l000000000040FE40:
	rbx = 0x00000000004904DF<p64>
	goto l000000000040FDE0
	// succ:  l000000000040FDE0
l000000000040FE50:
	rbx = 0x0000000000490500<p64>
	goto l000000000040FDE0
	// succ:  l000000000040FDE0
l000000000040FE60:
	rbx = 0x0000000000490570<p64>
	goto l000000000040FDE0
	// succ:  l000000000040FDE0
l000000000040FE70:
	rbx = 0x0000000000490548<p64>
	goto l000000000040FDE0
	// succ:  l000000000040FDE0
l000000000040FE80:
	rbx = 0x0000000000490520<p64>
	goto l000000000040FDE0
	// succ:  l000000000040FDE0
l000000000040FE90:
	rbx = 0x00000000004905A6<p64>
	goto l000000000040FDE0
	// succ:  l000000000040FDE0
fn000000000040FDA0_exit:


// fn000000000040FEA0
// Return size: 0
define fn000000000040FEA0
fn000000000040FEA0_entry:
	rsp = fp
	// succ:  l000000000040FEA0
l000000000040FEA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x38<64>
	SCZO = cond(rsp)
	rax = rsp + 0x58<64>
	rbx = rcx
	Mem0[rsp + 0x58<64>:word64] = rdx
	Mem0[rsp + 0x60<64>:word64] = r8
	Mem0[rsp + 0x68<64>:word64] = r9
	Mem0[rsp + 0x28<64>:word64] = rax
	call _iob_func (retsize: 8;)
	rcx = 0x0000000000490600<p64>
	r9 = rax + 0x60<64>
	r8d = 0x1B<32>
	r8 = CONVERT(r8d, word32, uint64)
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	eax = fwrite(rcx, rdx, r8, r9)
	rsi = Mem0[rsp + 0x28<64>:word64]
	call _iob_func (retsize: 8;)
	rcx = rax + 0x60<64>
	rdx = rbx
	r8 = rsi
	call msvcrt.dll!vfprintf (retsize: 8;)
	abort()
	// succ:  l000000000040FF01_thunk_fn000000000040FF10
l000000000040FF01_thunk_fn000000000040FF10:
	call fn000000000040FF10 (retsize: 0;)
	return
	// succ:  fn000000000040FEA0_exit
fn000000000040FEA0_exit:


// fn000000000040FF10
// Return size: 8
define fn000000000040FF10
fn000000000040FF10_entry:
	rsp = fp
	// succ:  l000000000040FF10
l000000000040FF10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x58<64>
	SCZO = cond(rsp)
	rbp = CONVERT(Mem0[0x00000000004AD084<p64>:word32], word32, int64)
	rbx = rcx
	rsi = rdx
	rdi = r8
	SZO = cond(ebp & ebp)
	C = false
	branch Test(LE,SZO) l000000000041002A
	// succ:  l000000000040FF34 l000000000041002A
l000000000040FF34:
	rax = Mem0[0x00000000004AD088<p64>:word64]
	r9d = r9d ^ r9d
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d)
	C = false
	rax = rax + 8<64>
	SCZO = cond(rax)
	// succ:  l000000000040FF42
l000000000040FF42:
	r10 = Mem0[rax:word64]
	SCZO = cond(rbx - r10)
	branch Test(ULT,C) l000000000040FF5E
	// succ:  l000000000040FF4A l000000000040FF5E
l000000000040FF4A:
	rdx = Mem0[rax + 8<64>:word64]
	r11d = Mem0[rdx + 8<64>:word32]
	r11 = CONVERT(r11d, word32, uint64)
	r10 = r10 + r11
	SCZO = cond(r10)
	SCZO = cond(rbx - r10)
	branch Test(ULT,C) l0000000000410010
	// succ:  l000000000040FF5E l0000000000410010
l000000000040FF5E:
	r9d = r9d + 1<32>
	r9 = CONVERT(r9d, word32, uint64)
	SCZO = cond(r9d)
	rax = rax + 0x18<64>
	SCZO = cond(rax)
	SCZO = cond(r9d - ebp)
	branch Test(NE,Z) l000000000040FF42
	// succ:  l000000000040FF6B l000000000040FF42
l000000000040FF6B:
	rcx = rbx
	call fn0000000000410D50 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	r12 = rax
	branch Test(EQ,Z) l0000000000410062
	// succ:  l000000000040FF7F l0000000000410062
l000000000040FF7F:
	rbp = rbp + 0<64> + rbp * 2<64>
	rbp = rbp << 3<64>
	SCZO = cond(rbp)
	r13 = rbp
	r13 = r13 + Mem0[0x00000000004AD088<p64>:word64]
	SCZO = cond(r13)
	Mem0[r13 + 0x10<64>:word64] = rax
	Mem0[r13 + 0<64>:word32] = 0<32>
	call fn0000000000410E70 (retsize: 8;)
	edx = Mem0[r12 + 0xC<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	r8d = 0x30<32>
	r8 = CONVERT(r8d, word32, uint64)
	rax = rax + rdx
	SCZO = cond(rax)
	rdx = rsp + 0x20<64>
	Mem0[r13 + 8<64>:word64] = rax
	rax = Mem0[0x00000000004AD088<p64>:word64]
	rcx = Mem0[rax + 8<64> + rbp:word64]
	eax = VirtualQuery(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000410045
	// succ:  l000000000040FFD1 l0000000000410045
l000000000040FFD1:
	eax = Mem0[rsp + 0x44<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = SLICE(rax - 4<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	edx = edx & 0xFFFFFFFB<32>
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l0000000000410009
	// succ:  l000000000040FFDD l0000000000410009
l000000000040FFDD:
	eax = eax - 0x40<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	eax = eax & 0xFFFFFFBF<32>
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000410009
	// succ:  l000000000040FFE5 l0000000000410009
l000000000040FFE5:
	r9 = rbp
	r9 = r9 + Mem0[0x00000000004AD088<p64>:word64]
	SCZO = cond(r9)
	r8d = 0x40<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = Mem0[rsp + 0x38<64>:word64]
	rcx = Mem0[rsp + 0x20<64>:word64]
	eax = VirtualProtect(rcx, rdx, r8, r9)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000410031
	// succ:  l0000000000410009 l0000000000410031
l0000000000410009:
	v26 = Mem0[0x00000000004AD084<p64>:word32] + 1<32>
	Mem0[0x00000000004AD084<p64>:word32] = v26
	SCZO = cond(v26)
	// succ:  l0000000000410010
l0000000000410010:
	r8 = rdi
	rdx = rsi
	rcx = rbx
	rsp = rsp + 0x58<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rax = memcpy(rcx, rdx, r8)
	return
	// succ:  fn000000000040FF10_exit
l000000000041002A:
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	goto l000000000040FF6B
	// succ:  l000000000040FF6B
l0000000000410031:
	eax = GetLastError()
	rcx = 0x0000000000490678<p64>
	edx = eax
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000040FEA0 (retsize: 8;)
	// succ:  l0000000000410045
l0000000000410045:
	rax = Mem0[0x00000000004AD088<p64>:word64]
	edx = Mem0[r12 + 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rcx = 0x0000000000490640<p64>
	r8 = Mem0[rax + 8<64> + rbp:word64]
	call fn000000000040FEA0 (retsize: 8;)
	// succ:  l0000000000410062
l0000000000410062:
	rcx = 0x0000000000490620<p64>
	rdx = rbx
	call fn000000000040FEA0 (retsize: 8;)
	// succ:  l0000000000410072_thunk_fn0000000000410080
l0000000000410072_thunk_fn0000000000410080:
	call fn0000000000410080 (retsize: 0;)
	return
	// succ:  fn000000000040FF10_exit
fn000000000040FF10_exit:


// fn0000000000410080
// Return size: 8
define fn0000000000410080
fn0000000000410080_entry:
	rsp = fp
	// succ:  l0000000000410080
l0000000000410080:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r14
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r13
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rbp = rsp
	rsp = rsp - 0x60<64>
	SCZO = cond(rsp)
	ebx = Mem0[0x00000000004AD080<p64>:word32]
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l00000000004100B0
	// succ:  l000000000041009B l00000000004100B0
l000000000041009B:
	rsp = rbp
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410080_exit
l00000000004100B0:
	Mem0[0x00000000004AD080<p64>:word32] = 1<32>
	call fn0000000000410DA0 (retsize: 8;)
	rax = CONVERT(eax, int32, int64)
	rax = rax + rax * 2<64>
	rax = CONVERT(0x1E<32> + rax * 8<64>, word32, word64)
	rax = rax & 0xFFFFFFFFFFFFFFF0<64>
	SZO = cond(rax)
	C = false
	call fn00000000004116F0 (retsize: 8;)
	rsi = Mem0[0x0000000000491E90<p64>:word64]
	rbx = Mem0[0x0000000000491EA0<p64>:word64]
	rsp = rsp - rax
	SCZO = cond(rsp)
	Mem0[0x00000000004AD084<p64>:word32] = 0<32>
	rax = rsp + 0x20<64>
	Mem0[0x00000000004AD088<p64>:word64] = rax
	rax = rsi
	rax = rax - rbx
	SCZO = cond(rax)
	SCZO = cond(rax - 7<64>)
	branch Test(LE,SZO) l000000000041009B
	// succ:  l0000000000410109 l000000000041009B
l0000000000410109:
	SCZO = cond(rax - 0xB<64>)
	branch Test(LE,SZO) l0000000000410135
	// succ:  l000000000041010F l0000000000410135
l000000000041010F:
	r11d = Mem0[rbx:word32]
	r11 = CONVERT(r11d, word32, uint64)
	SZO = cond(r11d & r11d)
	C = false
	branch Test(NE,Z) l0000000000410260
	// succ:  l000000000041011B l0000000000410260
l000000000041011B:
	r10d = Mem0[rbx + 4<64>:word32]
	r10 = CONVERT(r10d, word32, uint64)
	SZO = cond(r10d & r10d)
	C = false
	branch Test(NE,Z) l0000000000410260
	// succ:  l0000000000410128 l0000000000410260
l0000000000410128:
	r9d = Mem0[rbx + 8<64>:word32]
	r9 = CONVERT(r9d, word32, uint64)
	SZO = cond(r9d & r9d)
	C = false
	branch Test(NE,Z) l000000000041014C
	// succ:  l0000000000410131 l000000000041014C
l0000000000410131:
	rbx = rbx + 0xC<64>
	SCZO = cond(rbx)
	// succ:  l0000000000410135
l0000000000410135:
	r8d = Mem0[rbx:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NE,Z) l0000000000410260
	// succ:  l0000000000410141 l0000000000410260
l0000000000410141:
	ecx = Mem0[rbx + 4<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l0000000000410260
	// succ:  l000000000041014C l0000000000410260
l000000000041014C:
	edx = Mem0[rbx + 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx - 1<32>)
	branch Test(NE,Z) l000000000041036C
	// succ:  l0000000000410158 l000000000041036C
l0000000000410158:
	rbx = rbx + 0xC<64>
	SCZO = cond(rbx)
	SCZO = cond(rbx - rsi)
	branch Test(UGE,C) l000000000041009B
	// succ:  l0000000000410165 l000000000041009B
l0000000000410165:
	r12 = Mem0[0x0000000000491EE0<p64>:word64]
	r13 = rbp - 0x30<64>
	r14 = 0xFFFFFFFF00000000<64>
	// succ:  l000000000041017A
l000000000041017A:
	ecx = Mem0[rbx + 4<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = Mem0[rbx:word32]
	rax = CONVERT(eax, word32, uint64)
	edx = CONVERT(Mem0[rbx + 8<64>:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rax = rax + r12
	SCZO = cond(rax)
	rcx = rcx + r12
	SCZO = cond(rcx)
	SCZO = cond(edx - 0x10<32>)
	r8 = Mem0[rax:word64]
	branch Test(EQ,Z) l00000000004102D6
	// succ:  l0000000000410195 l00000000004102D6
l0000000000410195:
	branch Test(ULE,CZ) l000000000041029D
	// succ:  l000000000041019B l000000000041029D
l000000000041019B:
	SCZO = cond(edx - 0x20<32>)
	branch Test(EQ,Z) l000000000041031F
	// succ:  l00000000004101A4 l000000000041031F
l00000000004101A4:
	SCZO = cond(edx - 0x40<32>)
	branch Test(NE,Z) l000000000041030B
	// succ:  l00000000004101AD l000000000041030B
l00000000004101AD:
	r8 = r8 - rax
	SCZO = cond(r8)
	rdx = r13
	rdi = r13
	rax = r8
	rax = rax + Mem0[rcx:word64]
	SCZO = cond(rax)
	r8d = 8<32>
	r8 = CONVERT(r8d, word32, uint64)
	Mem0[rbp - 0x30<64>:word64] = rax
	call fn000000000040FF10 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	// succ:  l00000000004101CB
l00000000004101CB:
	rbx = rbx + 0xC<64>
	SCZO = cond(rbx)
	SCZO = cond(rbx - rsi)
	branch Test(ULT,C) l000000000041017A
	// succ:  l00000000004101D4 l000000000041017A
l00000000004101D4:
	eax = Mem0[0x00000000004AD084<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000041009B
	// succ:  l00000000004101E6 l000000000041009B
l00000000004101E6:
	r14 = VirtualQuery
	r13 = rbp - 0x34<64>
	r12 = VirtualProtect
	goto l0000000000410213
	// succ:  l0000000000410213
l0000000000410200:
	esi = esi + 1<32>
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	rbx = rbx + 0x18<64>
	SCZO = cond(rbx)
	SCZO = cond(esi - Mem0[0x00000000004AD084<p64>:word32])
	branch Test(GE,SO) l000000000041009B
	// succ:  l0000000000410213 l000000000041009B
l0000000000410213:
	rax = rbx
	rax = rax + Mem0[0x00000000004AD088<p64>:word64]
	SCZO = cond(rax)
	edx = Mem0[rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000410200
	// succ:  l0000000000410223 l0000000000410200
l0000000000410223:
	rcx = Mem0[rax + 8<64>:word64]
	r8d = 0x30<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rdi
	eax = VirtualQuery(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000041034E
	// succ:  l000000000041023C l000000000041034E
l000000000041023C:
	rax = Mem0[0x00000000004AD088<p64>:word64]
	r9 = r13
	rdx = Mem0[rbp - 0x18<64>:word64]
	rcx = Mem0[rbp - 0x30<64>:word64]
	r8d = Mem0[rax + rbx:word32]
	r8 = CONVERT(r8d, word32, uint64)
	eax = VirtualProtect(rcx, rdx, r8, r9)
	goto l0000000000410200
	// succ:  l0000000000410200
l0000000000410260:
	SCZO = cond(rbx - rsi)
	branch Test(UGE,C) l000000000041009B
	// succ:  l0000000000410269 l000000000041009B
l0000000000410269:
	r12 = Mem0[0x0000000000491EE0<p64>:word64]
	rdi = rbp - 0x30<64>
	// succ:  l0000000000410274
l0000000000410274:
	ecx = Mem0[rbx + 4<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	eax = Mem0[rbx:word32]
	rax = CONVERT(eax, word32, uint64)
	r8d = 4<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rdi
	rbx = rbx + 8<64>
	SCZO = cond(rbx)
	rcx = rcx + r12
	SCZO = cond(rcx)
	eax = eax + Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	Mem0[rbp - 0x30<64>:word32] = eax
	call fn000000000040FF10 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	SCZO = cond(rbx - rsi)
	branch Test(ULT,C) l0000000000410274
	// succ:  l0000000000410298 l0000000000410274
l0000000000410298:
	goto l00000000004101D4
	// succ:  l00000000004101D4
l000000000041029D:
	SCZO = cond(edx - 8<32>)
	branch Test(NE,Z) l000000000041030B
	// succ:  l00000000004102A2 l000000000041030B
l00000000004102A2:
	edx = CONVERT(Mem0[rcx:byte], byte, word32)
	rdx = CONVERT(edx, word32, uint64)
	rdi = r13
	r10 = rdx
	r10 = r10 | 0xFFFFFFFFFFFFFF00<64>
	SZO = cond(r10)
	C = false
	SZO = cond(dl & dl)
	C = false
	branch Test(NS,S) l00000000004102B8
	// succ:  l00000000004102B4_1 l00000000004102B8
l00000000004102B4_1:
	rdx = r10
	// succ:  l00000000004102B8
l00000000004102B8:
	rdx = rdx - rax
	SCZO = cond(rdx)
	rax = r8 + rdx
	r8d = 1<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = r13
	Mem0[rbp - 0x30<64>:word64] = rax
	call fn000000000040FF10 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	goto l00000000004101CB
	// succ:  l00000000004101CB
l00000000004102D6:
	edx = CONVERT(Mem0[rcx:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	rdi = r13
	r10 = rdx
	r10 = r10 | 0xFFFFFFFFFFFF0000<64>
	SZO = cond(r10)
	C = false
	SZO = cond(dx & dx)
	C = false
	branch Test(NS,S) l00000000004102ED
	// succ:  l00000000004102E9_1 l00000000004102ED
l00000000004102E9_1:
	rdx = r10
	// succ:  l00000000004102ED
l00000000004102ED:
	rdx = rdx - rax
	SCZO = cond(rdx)
	rax = r8 + rdx
	r8d = 2<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = r13
	Mem0[rbp - 0x30<64>:word64] = rax
	call fn000000000040FF10 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	goto l00000000004101CB
	// succ:  l00000000004101CB
l000000000041030B:
	rcx = 0x00000000004906D8<p64>
	Mem0[rbp - 0x30<64>:word64] = 0<64>
	call fn000000000040FEA0 (retsize: 8;)
	// succ:  l000000000041031F
l000000000041031F:
	edx = Mem0[rcx:word32]
	rdx = CONVERT(edx, word32, uint64)
	rdi = r13
	r10 = rdx
	r10 = r10 | r14
	SZO = cond(r10)
	C = false
	SZO = cond(edx & edx)
	C = false
	branch Test(NS,S) l0000000000410330
	// succ:  l000000000041032C_1 l0000000000410330
l000000000041032C_1:
	rdx = r10
	// succ:  l0000000000410330
l0000000000410330:
	rdx = rdx - rax
	SCZO = cond(rdx)
	rax = r8 + rdx
	r8d = 4<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = r13
	Mem0[rbp - 0x30<64>:word64] = rax
	call fn000000000040FF10 (retsize: 8;)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8<64>
	goto l00000000004101CB
	// succ:  l00000000004101CB
l000000000041034E:
	rbx = rbx + Mem0[0x00000000004AD088<p64>:word64]
	SCZO = cond(rbx)
	rcx = 0x0000000000490640<p64>
	rax = Mem0[rbx + 0x10<64>:word64]
	r8 = Mem0[rbx + 8<64>:word64]
	edx = Mem0[rax + 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	call fn000000000040FEA0 (retsize: 8;)
	// succ:  l000000000041036C
l000000000041036C:
	rcx = 0x00000000004906A0<p64>
	call fn000000000040FEA0 (retsize: 8;)
	// succ:  l000000000041037F_thunk_fn0000000000410380
l000000000041037F_thunk_fn0000000000410380:
	call fn0000000000410380 (retsize: 0;)
	return
	// succ:  fn0000000000410080_exit
fn0000000000410080_exit:


// fn0000000000410380
// Return size: 8
define fn0000000000410380
fn0000000000410380_entry:
	rsp = fp
	// succ:  l0000000000410380
l0000000000410380:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	eax = Mem0[rcx:word32]
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax - 0xC0000091<32>)
	branch Test(UGT,CZ) l00000000004103F0
	// succ:  l000000000041038D l00000000004103F0
l000000000041038D:
	SCZO = cond(eax - 0xC000008D<32>)
	branch Test(UGE,C) l000000000041040F
	// succ:  l0000000000410394 l000000000041040F
l0000000000410394:
	SCZO = cond(eax - 0xC0000008<32>)
	branch Test(EQ,Z) l00000000004104B0
	// succ:  l000000000041039F l00000000004104B0
l000000000041039F:
	branch Test(UGT,CZ) l0000000000410480
	// succ:  l00000000004103A5 l0000000000410480
l00000000004103A5:
	SCZO = cond(eax - 0x80000002<32>)
	branch Test(EQ,Z) l00000000004104B0
	// succ:  l00000000004103B0 l00000000004104B0
l00000000004103B0:
	SCZO = cond(eax - 0xC0000005<32>)
	branch Test(NE,Z) l000000000041048E
	// succ:  l00000000004103BB l000000000041048E
l00000000004103BB:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = 0xB<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = signal(rcx, rdx)
	SCZO = cond(rax - 1<64>)
	branch Test(EQ,Z) l0000000000410510
	// succ:  l00000000004103D1 l0000000000410510
l00000000004103D1:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004104F0
	// succ:  l00000000004103DA l00000000004104F0
l00000000004103DA:
	ecx = 0xB<32>
	rcx = CONVERT(ecx, word32, uint64)
	call rax (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l00000000004103E3
l00000000004103E3:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000410380_exit
l00000000004103F0:
	SCZO = cond(eax - 0xC0000094<32>)
	branch Test(EQ,Z) l00000000004104C0
	// succ:  l00000000004103FB l00000000004104C0
l00000000004103FB:
	branch Test(UGT,CZ) l0000000000410440
	// succ:  l00000000004103FD l0000000000410440
l00000000004103FD:
	SCZO = cond(eax - 0xC0000092<32>)
	branch Test(EQ,Z) l00000000004104B0
	// succ:  l0000000000410408 l00000000004104B0
l0000000000410408:
	SCZO = cond(eax - 0xC0000093<32>)
	branch Test(NE,Z) l000000000041048E
	// succ:  l000000000041040F l000000000041048E
l000000000041040F:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = signal(rcx, rdx)
	SCZO = cond(rax - 1<64>)
	rdx = rax
	branch Test(EQ,Z) l0000000000410498
	// succ:  l0000000000410424 l0000000000410498
l0000000000410424:
	SZO = cond(rdx & rdx)
	C = false
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	branch Test(EQ,Z) l00000000004103E3
	// succ:  l000000000041042E l00000000004103E3
l000000000041042E:
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call rdx (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000410380_exit
l0000000000410440:
	SCZO = cond(eax - 0xC0000095<32>)
	branch Test(EQ,Z) l00000000004104B0
	// succ:  l0000000000410447 l00000000004104B0
l0000000000410447:
	SCZO = cond(eax - 0xC0000096<32>)
	branch Test(NE,Z) l000000000041048E
	// succ:  l000000000041044E l000000000041048E
l000000000041044E:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = 4<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = signal(rcx, rdx)
	SCZO = cond(rax - 1<64>)
	branch Test(EQ,Z) l00000000004104FA
	// succ:  l0000000000410464 l00000000004104FA
l0000000000410464:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004104F0
	// succ:  l000000000041046D l00000000004104F0
l000000000041046D:
	ecx = 4<32>
	rcx = CONVERT(ecx, word32, uint64)
	call rax (retsize: 8;)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004103E3
	// succ:  l00000000004103E3
l0000000000410480:
	SCZO = cond(eax - 0xC000001D<32>)
	branch Test(EQ,Z) l000000000041044E
	// succ:  l0000000000410487 l000000000041044E
l0000000000410487:
	SCZO = cond(eax - 0xC000008C<32>)
	branch Test(EQ,Z) l00000000004104B0
	// succ:  l000000000041048E l00000000004104B0
l000000000041048E:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000410380_exit
l0000000000410498:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = signal(rcx, rdx)
	call fn00000000004107E0 (retsize: 8;)
	// succ:  l00000000004104B0
l00000000004104B0:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000410380_exit
l00000000004104C0:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = signal(rcx, rdx)
	SCZO = cond(rax - 1<64>)
	rdx = rax
	branch Test(NE,Z) l0000000000410424
	// succ:  l00000000004104D9 l0000000000410424
l00000000004104D9:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = signal(rcx, rdx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004103E3
	// succ:  l00000000004103E3
l00000000004104F0:
	eax = 4<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000410380_exit
l00000000004104FA:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 4<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = signal(rcx, rdx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004103E3
	// succ:  l00000000004103E3
l0000000000410510:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 0xB<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = signal(rcx, rdx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l00000000004103E3
	// succ:  l00000000004103E3
fn0000000000410380_exit:


// fn0000000000410530
// Return size: 8
define fn0000000000410530
fn0000000000410530_entry:
	rsp = fp
	// succ:  l0000000000410530
l0000000000410530:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	call fn0000000000410E70 (retsize: 8;)
	rbp = rax
	eax = Mem0[0x00000000004AD0C8<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000410571
	// succ:  l000000000041054C l0000000000410571
l000000000041054C:
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l0000000000410571
	// succ:  l0000000000410551 l0000000000410571
l0000000000410551:
	rcx = 0x0000000000490710<p64>
	Mem0[0x00000000004AD0C8<p64>:word32] = 1<32>
	call fn0000000000410CB0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000410580
	// succ:  l000000000041056C l0000000000410580
l000000000041056C:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000410571
l0000000000410571:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410530_exit
l0000000000410580:
	rbx = 0x00000000004AD200<p64>
	ecx = 0x30<32>
	rcx = CONVERT(ecx, word32, uint64)
	rdx = 0x00000000004AD100<p64>
	r12 = 0x0000000000410380<p64>
	esi = esi ^ esi
	rsi = CONVERT(esi, word32, uint64)
	SZO = cond(esi)
	C = false
	rdi = rbx
	// succ:  l000000000041059F
l000000000041059F:
	branch rcx == 0<64> l00000000004105A2
	// succ:  l000000000041059F_1 l00000000004105A2
l000000000041059F_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 8<i64>
	rcx = rcx - 1<64>
	goto l000000000041059F
	// succ:  l000000000041059F
l00000000004105A2:
	rdi = rdx
	r12 = r12 - rbp
	SCZO = cond(r12)
	cl = 0x20<8>
	// succ:  l00000000004105AA
l00000000004105AA:
	branch rcx == 0<64> l00000000004105AD
	// succ:  l00000000004105AA_1 l00000000004105AD
l00000000004105AA_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 8<i64>
	rcx = rcx - 1<64>
	goto l00000000004105AA
	// succ:  l00000000004105AA
l00000000004105AD:
	rdi = rdx
	goto l00000000004105E0
	// succ:  l00000000004105E0
l00000000004105B2:
	Mem0[rdi:byte] = 9<8>
	Mem0[rdi + 4<64>:word32] = r12d
	rsi = rsi + 1<64>
	SCZO = cond(rsi)
	edx = Mem0[rax + 0xC<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	rbx = rbx + 0xC<64>
	SCZO = cond(rbx)
	Mem0[rbx - 0xC<64>:word32] = edx
	edx = edx + Mem0[rax + 8<64>:word32]
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rax = rdi
	rax = rax - rbp
	SCZO = cond(rax)
	rdi = rdi + 8<64>
	SCZO = cond(rdi)
	Mem0[rbx - 4<64>:word32] = eax
	Mem0[rbx - 8<64>:word32] = edx
	SCZO = cond(rsi - 0x20<64>)
	branch Test(EQ,Z) l0000000000410615
	// succ:  l00000000004105E0 l0000000000410615
l00000000004105E0:
	rcx = rsi
	call fn0000000000410DE0 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l00000000004105B2
	// succ:  l00000000004105ED l00000000004105B2
l00000000004105ED:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000041056C
	// succ:  l00000000004105F6 l000000000041056C
l00000000004105F6:
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	// succ:  l0000000000410600
l0000000000410600:
	r8 = rbp
	rcx = 0x00000000004AD200<p64>
	call KERNEL32.dll!RtlAddFunctionTable (retsize: 8;)
	goto l000000000041056C
	// succ:  l000000000041056C
l0000000000410615:
	edx = 0x20<32>
	rdx = CONVERT(edx, word32, uint64)
	goto l0000000000410600
	// succ:  l0000000000410600
fn0000000000410530_exit:


// fn0000000000410620
// Return size: 8
define fn0000000000410620
fn0000000000410620_entry:
	rsp = fp
	// succ:  l0000000000410620
l0000000000410620:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rdx = Mem0[rcx:word64]
	eax = Mem0[rdx:word32]
	rax = CONVERT(eax, word32, uint64)
	r8d = eax
	r8 = CONVERT(r8d, word32, uint64)
	r8d = r8d & 0x20FFFFFF<32>
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	SCZO = cond(r8d - 0x20474343<32>)
	branch Test(EQ,Z) l0000000000410740
	// succ:  l0000000000410641 l0000000000410740
l0000000000410641:
	SCZO = cond(eax - 0xC0000091<32>)
	rbx = rcx
	branch Test(UGT,CZ) l00000000004106D0
	// succ:  l000000000041064F l00000000004106D0
l000000000041064F:
	SCZO = cond(eax - 0xC000008D<32>)
	branch Test(UGE,C) l00000000004106E7
	// succ:  l000000000041065A l00000000004106E7
l000000000041065A:
	SCZO = cond(eax - 0xC0000008<32>)
	branch Test(EQ,Z) l0000000000410693
	// succ:  l0000000000410661 l0000000000410693
l0000000000410661:
	branch Test(UGT,CZ) l00000000004106A0
	// succ:  l0000000000410663 l00000000004106A0
l0000000000410663:
	SCZO = cond(eax - 0x80000002<32>)
	branch Test(EQ,Z) l0000000000410693
	// succ:  l000000000041066A l0000000000410693
l000000000041066A:
	SCZO = cond(eax - 0xC0000005<32>)
	branch Test(NE,Z) l00000000004106B2
	// succ:  l0000000000410671 l00000000004106B2
l0000000000410671:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = 0xB<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = signal(rcx, rdx)
	SCZO = cond(rax - 1<64>)
	branch Test(EQ,Z) l00000000004107B0
	// succ:  l0000000000410687 l00000000004107B0
l0000000000410687:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004106B2
	// succ:  l000000000041068C l00000000004106B2
l000000000041068C:
	ecx = 0xB<32>
	rcx = CONVERT(ecx, word32, uint64)
	call rax (retsize: 8;)
	// succ:  l0000000000410693
l0000000000410693:
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	// succ:  l0000000000410698
l0000000000410698:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410620_exit
l00000000004106A0:
	SCZO = cond(eax - 0xC000001D<32>)
	branch Test(EQ,Z) l0000000000410766
	// succ:  l00000000004106AB l0000000000410766
l00000000004106AB:
	SCZO = cond(eax - 0xC000008C<32>)
	branch Test(EQ,Z) l0000000000410693
	// succ:  l00000000004106B2 l0000000000410693
l00000000004106B2:
	rax = Mem0[0x00000000004AD0C0<p64>:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000410698
	// succ:  l00000000004106BE l0000000000410698
l00000000004106BE:
	rcx = rbx
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000410620_exit
l00000000004106D0:
	SCZO = cond(eax - 0xC0000094<32>)
	branch Test(EQ,Z) l0000000000410712
	// succ:  l00000000004106D7 l0000000000410712
l00000000004106D7:
	branch Test(UGT,CZ) l0000000000410750
	// succ:  l00000000004106D9 l0000000000410750
l00000000004106D9:
	SCZO = cond(eax - 0xC0000092<32>)
	branch Test(EQ,Z) l0000000000410693
	// succ:  l00000000004106E0 l0000000000410693
l00000000004106E0:
	SCZO = cond(eax - 0xC0000093<32>)
	branch Test(NE,Z) l00000000004106B2
	// succ:  l00000000004106E7 l00000000004106B2
l00000000004106E7:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = signal(rcx, rdx)
	SCZO = cond(rax - 1<64>)
	branch Test(NE,Z) l0000000000410724
	// succ:  l00000000004106F9 l0000000000410724
l00000000004106F9:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = signal(rcx, rdx)
	call fn00000000004107E0 (retsize: 8;)
	goto l0000000000410693
	// succ:  l0000000000410693
l0000000000410712:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = signal(rcx, rdx)
	SCZO = cond(rax - 1<64>)
	branch Test(EQ,Z) l0000000000410792
	// succ:  l0000000000410724 l0000000000410792
l0000000000410724:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004106B2
	// succ:  l0000000000410729 l00000000004106B2
l0000000000410729:
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call rax (retsize: 8;)
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000410698
	// succ:  l0000000000410698
l0000000000410740:
	SZO = cond(Mem0[rdx + 4<64>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l0000000000410641
	// succ:  l000000000041074A l0000000000410641
l000000000041074A:
	goto l0000000000410693
	// succ:  l0000000000410693
l0000000000410750:
	SCZO = cond(eax - 0xC0000095<32>)
	branch Test(EQ,Z) l0000000000410693
	// succ:  l000000000041075B l0000000000410693
l000000000041075B:
	SCZO = cond(eax - 0xC0000096<32>)
	branch Test(NE,Z) l00000000004106B2
	// succ:  l0000000000410766 l00000000004106B2
l0000000000410766:
	edx = edx ^ edx
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx)
	C = false
	ecx = 4<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = signal(rcx, rdx)
	SCZO = cond(rax - 1<64>)
	branch Test(EQ,Z) l00000000004107C4
	// succ:  l0000000000410778 l00000000004107C4
l0000000000410778:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004106B2
	// succ:  l0000000000410781 l00000000004106B2
l0000000000410781:
	ecx = 4<32>
	rcx = CONVERT(ecx, word32, uint64)
	call rax (retsize: 8;)
	eax = 0xFFFFFFFF<32>
	rax = CONVERT(eax, word32, uint64)
	goto l0000000000410698
	// succ:  l0000000000410698
l0000000000410792:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = signal(rcx, rdx)
	goto l0000000000410693
	// succ:  l0000000000410693
l00000000004107B0:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 0xB<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = signal(rcx, rdx)
	goto l0000000000410693
	// succ:  l0000000000410693
l00000000004107C4:
	edx = 1<32>
	rdx = CONVERT(edx, word32, uint64)
	ecx = 4<32>
	rcx = CONVERT(ecx, word32, uint64)
	rax = signal(rcx, rdx)
	goto l0000000000410693
	// succ:  l0000000000410693
fn0000000000410620_exit:


// fn00000000004107E0
// Return size: 8
define fn00000000004107E0
fn00000000004107E0_entry:
	rsp = fp
	// succ:  l00000000004107E0
l00000000004107E0:
	__fninit()
	return
	// succ:  fn00000000004107E0_exit
fn00000000004107E0_exit:


// fn00000000004107F0
// Return size: 8
define fn00000000004107F0
fn00000000004107F0_entry:
	rsp = fp
	// succ:  l00000000004107F0
l00000000004107F0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000477020<p64>:word64]
	rax = Mem0[rax:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000410820
	// succ:  l0000000000410803 l0000000000410820
l0000000000410803:
	call rax (retsize: 8;)
	rax = Mem0[0x0000000000477020<p64>:word64]
	rdx = rax + 8<64>
	rax = Mem0[rax + 8<64>:word64]
	Mem0[0x0000000000477020<p64>:word64] = rdx
	SZO = cond(rax & rax)
	C = false
	branch Test(NE,Z) l0000000000410803
	// succ:  l0000000000410820 l0000000000410803
l0000000000410820:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn00000000004107F0_exit
fn00000000004107F0_exit:


// fn0000000000410830
// Return size: 0
define fn0000000000410830
fn0000000000410830_entry:
	rsp = fp
	// succ:  l0000000000410830
l0000000000410830:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = Mem0[0x0000000000491E80<p64>:word64]
	rax = Mem0[rsi:word64]
	SCZO = cond(eax - 0xFFFFFFFF<32>)
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	branch Test(EQ,Z) l0000000000410870
	// succ:  l0000000000410847 l0000000000410870
l0000000000410847:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(EQ,Z) l000000000041085A
	// succ:  l000000000041084B l000000000041085A
l000000000041084B:
	// succ:  l0000000000410850
l0000000000410850:
	eax = ebx
	rax = CONVERT(eax, word32, uint64)
	call fn90C328C4834890FF (retsize: 8;)
	ebx = ebx - 1<32>
	rbx = CONVERT(ebx, word32, uint64)
	SCZO = cond(ebx)
	branch Test(NE,Z) l0000000000410850
	// succ:  l000000000041085A l0000000000410850
l000000000041085A:
	rcx = 0x00000000004107F0<p64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000410867_thunk_fn0000000000410BF0
l0000000000410867_thunk_fn0000000000410BF0:
	call fn0000000000410BF0 (retsize: 0;)
	return
	// succ:  fn0000000000410830_exit
l0000000000410870:
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	goto l0000000000410876
	// succ:  l0000000000410876
l0000000000410874:
	ebx = eax
	rbx = CONVERT(ebx, word32, uint64)
	// succ:  l0000000000410876
l0000000000410876:
	edx = SLICE(rbx + 1<64>, word32, 0)
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(Mem0[rsi + rdx * 8<64>:word64] - 0<64>)
	rax = rdx
	branch Test(NE,Z) l0000000000410874
	// succ:  l0000000000410883 l0000000000410874
l0000000000410883:
	goto l0000000000410847
	// succ:  l0000000000410847
fn0000000000410830_exit:


// fn0000000000410890
// Return size: 8
define fn0000000000410890
fn0000000000410890_entry:
	rsp = fp
	// succ:  l0000000000410890
l0000000000410890:
	eax = Mem0[0x00000000004AD380<p64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000000004108A0
	// succ:  l000000000041089A l00000000004108A0
l000000000041089A:
	return
	// succ:  fn0000000000410890_exit
l00000000004108A0:
	Mem0[0x00000000004AD380<p64>:word32] = 1<32>
	// succ:  l00000000004108AA_thunk_fn0000000000410830
l00000000004108AA_thunk_fn0000000000410830:
	call fn0000000000410830 (retsize: 0;)
	return
	// succ:  fn0000000000410890_exit
fn0000000000410890_exit:


// fn00000000004108B0
// Return size: 8
define fn00000000004108B0
fn00000000004108B0_entry:
	rsp = fp
	// succ:  l00000000004108B0
l00000000004108B0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = r12
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[0x000000000048C0B0<p64>:word64]
	rax = 0x2B992DDFA232<64>
	Mem0[rsp + 0x20<64>:word64] = 0<64>
	SCZO = cond(rbx - rax)
	branch Test(EQ,Z) l00000000004108F0
	// succ:  l00000000004108D9 l00000000004108F0
l00000000004108D9:
	rbx = ~rbx
	Mem0[0x000000000048C0C0<p64>:word64] = rbx
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004108B0_exit
l00000000004108F0:
	rcx = rsp + 0x20<64>
	GetSystemTimeAsFileTime(rcx)
	r12 = Mem0[rsp + 0x20<64>:word64]
	eax = GetCurrentProcessId()
	ebp = eax
	rbp = CONVERT(ebp, word32, uint64)
	eax = GetCurrentThreadId()
	edi = eax
	rdi = CONVERT(edi, word32, uint64)
	eax = GetTickCount()
	rcx = rsp + 0x30<64>
	esi = eax
	rsi = CONVERT(esi, word32, uint64)
	eax = QueryPerformanceCounter(rcx)
	r12 = r12 ^ Mem0[rsp + 0x30<64>:word64]
	SZO = cond(r12)
	C = false
	edx = edi
	rdx = CONVERT(edx, word32, uint64)
	rax = 0xFFFFFFFFFFFF<64>
	rbp = rbp ^ r12
	SZO = cond(rbp)
	C = false
	rdi = rbp
	rdi = rdi ^ rdx
	SZO = cond(rdi)
	C = false
	edx = esi
	rdx = CONVERT(edx, word32, uint64)
	rdi = rdi ^ rdx
	SZO = cond(rdi)
	C = false
	rsi = rdi
	rsi = rsi & rax
	SZO = cond(rsi)
	C = false
	SCZO = cond(rsi - rbx)
	branch Test(EQ,Z) l0000000000410970
	// succ:  l000000000041094D l0000000000410970
l000000000041094D:
	rax = rsi
	rax = ~rax
	// succ:  l0000000000410953
l0000000000410953:
	Mem0[0x000000000048C0B0<p64>:word64] = rsi
	Mem0[0x000000000048C0C0<p64>:word64] = rax
	rsp = rsp + 0x40<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn00000000004108B0_exit
l0000000000410970:
	rax = 0xFFFFD466D2205DCC<64>
	rsi = 0x2B992DDFA233<64>
	goto l0000000000410953
	// succ:  l0000000000410953
fn00000000004108B0_exit:


// fn0000000000410990
// Return size: 0
define fn0000000000410990
fn0000000000410990_entry:
	rsp = fp
	// succ:  l0000000000410990
l0000000000410990:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rbp = rsp
	rsp = rsp - 0x70<64>
	SCZO = cond(rsp)
	rsi = rcx
	rcx = 0x00000000004AD3C0<p64>
	RtlCaptureContext(rcx)
	rbx = Mem0[0x00000000004AD4B8<p64>:word64]
	r8d = r8d ^ r8d
	r8 = CONVERT(r8d, word32, uint64)
	SZO = cond(r8d)
	C = false
	rdx = rbp - 0x28<64>
	rcx = rbx
	rax = RtlLookupFunctionEntry(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	r9 = rax
	branch Test(EQ,Z) l0000000000410A70
	// succ:  l00000000004109CD l0000000000410A70
l00000000004109CD:
	rax = rbp - 0x20<64>
	Mem0[rsp + 0x38<64>:word64] = 0<64>
	r8 = rbx
	rdx = Mem0[rbp - 0x28<64>:word64]
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	Mem0[rsp + 0x30<64>:word64] = rax
	rax = rbp - 0x18<64>
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = 0x00000000004AD3C0<p64>
	Mem0[rsp + 0x20<64>:word64] = rax
	call KERNEL32.dll!RtlVirtualUnwind (retsize: 8;)
	// succ:  l0000000000410A03
l0000000000410A03:
	rax = Mem0[0x00000000004AD4B8<p64>:word64]
	ecx = ecx ^ ecx
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx)
	C = false
	Mem0[0x00000000004AD440<p64>:word64] = rsi
	Mem0[0x00000000004AD8C0<p64>:word32] = 0xC0000409<32>
	Mem0[0x00000000004AD8C4<p64>:word32] = 1<32>
	Mem0[0x00000000004AD8D0<p64>:word64] = rax
	rax = Mem0[0x000000000048C0B0<p64>:word64]
	Mem0[rbp - 0x10<64>:word64] = rax
	rax = Mem0[0x000000000048C0C0<p64>:word64]
	Mem0[rbp - 8<64>:word64] = rax
	rax = SetUnhandledExceptionFilter(rcx)
	rcx = 0x0000000000490720<p64>
	eax = UnhandledExceptionFilter(rcx)
	eax = GetCurrentProcess()
	edx = 0xC0000409<32>
	rdx = CONVERT(edx, word32, uint64)
	rcx = rax
	eax = TerminateProcess(rcx, rdx)
	abort()
	// succ:  l0000000000410A70
l0000000000410A70:
	rax = Mem0[rbp + 0x18<64>:word64]
	Mem0[0x00000000004AD4B8<p64>:word64] = rax
	rax = rbp + 8<64>
	Mem0[0x00000000004AD458<p64>:word64] = rax
	goto l0000000000410A03
	// succ:  l0000000000410A03
fn0000000000410990_exit:


// fn0000000000410A90
// Return size: 8
define fn0000000000410A90
fn0000000000410A90_entry:
	rsp = fp
	// succ:  l0000000000410A90
l0000000000410A90:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000410AB0
	// succ:  l0000000000410A98 l0000000000410AB0
l0000000000410A98:
	SCZO = cond(edx - 3<32>)
	branch Test(EQ,Z) l0000000000410AB0
	// succ:  l0000000000410A9D l0000000000410AB0
l0000000000410A9D:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000410A90_exit
l0000000000410AB0:
	call fn0000000000411150 (retsize: 8;)
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000410A90_exit
fn0000000000410A90_exit:


// fn0000000000410AC0
// Return size: 8
define fn0000000000410AC0
fn0000000000410AC0_entry:
	rsp = fp
	// succ:  l0000000000410AC0
l0000000000410AC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rax = Mem0[0x00000000004915D0<p64>:word64]
	SCZO = cond(Mem0[rax:word32] - 2<32>)
	branch Test(EQ,Z) l0000000000410AD8
	// succ:  l0000000000410AD2 l0000000000410AD8
l0000000000410AD2:
	Mem0[rax:word32] = 2<32>
	// succ:  l0000000000410AD8
l0000000000410AD8:
	SCZO = cond(edx - 2<32>)
	branch Test(EQ,Z) l0000000000410AF0
	// succ:  l0000000000410ADD l0000000000410AF0
l0000000000410ADD:
	SCZO = cond(edx - 1<32>)
	branch Test(EQ,Z) l0000000000410B22
	// succ:  l0000000000410AE2 l0000000000410B22
l0000000000410AE2:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410AC0_exit
l0000000000410AF0:
	rbx = 0x00000000004B1068<p64>
	rsi = 0x00000000004B1068<p64>
	SCZO = cond(rbx - rsi)
	branch Test(EQ,Z) l0000000000410AE2
	// succ:  l0000000000410B03 l0000000000410AE2
l0000000000410B03:
	rax = Mem0[rbx:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000410B0D
	// succ:  l0000000000410B0B l0000000000410B0D
l0000000000410B0B:
	call rax (retsize: 8;)
	// succ:  l0000000000410B0D
l0000000000410B0D:
	rbx = rbx + 8<64>
	SCZO = cond(rbx)
	SCZO = cond(rbx - rsi)
	branch Test(NE,Z) l0000000000410B03
	// succ:  l0000000000410B16 l0000000000410B03
l0000000000410B16:
	eax = 1<32>
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410AC0_exit
l0000000000410B22:
	call fn0000000000411150 (retsize: 8;)
	goto l0000000000410AE2
	// succ:  l0000000000410AE2
fn0000000000410AC0_exit:


// fn0000000000410B30
// Return size: 8
define fn0000000000410B30
fn0000000000410B30_entry:
	rsp = fp
	// succ:  l0000000000410B30
l0000000000410B30:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000410B30_exit
fn0000000000410B30_exit:


// fn0000000000410B40
// Return size: 8
define fn0000000000410B40
fn0000000000410B40_entry:
	rsp = fp
	// succ:  l0000000000410B40
l0000000000410B40:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x30<64>
	SCZO = cond(rsp)
	rbx = rcx
	rcx = Mem0[0x00000000004AE610<p64>:word64]
	call fn000000000040FD10 (retsize: 8;)
	SCZO = cond(rax - 0xFFFFFFFFFFFFFFFF<64>)
	Mem0[rsp + 0x20<64>:word64] = rax
	branch Test(EQ,Z) l0000000000410BD5
	// succ:  l0000000000410B5F l0000000000410BD5
l0000000000410B5F:
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	call lock (retsize: 8;)
	rcx = Mem0[0x00000000004AE610<p64>:word64]
	call fn000000000040FD10 (retsize: 8;)
	rcx = Mem0[0x00000000004AE618<p64>:word64]
	Mem0[rsp + 0x20<64>:word64] = rax
	call fn000000000040FD10 (retsize: 8;)
	rdx = rsp + 0x20<64>
	r8 = rsp + 0x28<64>
	rcx = rbx
	Mem0[rsp + 0x28<64>:word64] = rax
	rax = __dllonexit(rcx, rdx, r8)
	rcx = Mem0[rsp + 0x20<64>:word64]
	rbx = rax
	call fn000000000040FD20 (retsize: 8;)
	rcx = Mem0[rsp + 0x28<64>:word64]
	Mem0[0x00000000004AE610<p64>:word64] = rax
	call fn000000000040FD20 (retsize: 8;)
	ecx = 8<32>
	rcx = CONVERT(ecx, word32, uint64)
	Mem0[0x00000000004AE618<p64>:word64] = rax
	call unlock (retsize: 8;)
	rax = rbx
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410B40_exit
l0000000000410BD5:
	rax = Mem0[0x0000000000491F40<p64>:word64]
	rcx = rbx
	call Mem0[rax:word64] (retsize: 8;)
	rsp = rsp + 0x30<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410B40_exit
fn0000000000410B40_exit:


// fn0000000000410BF0
// Return size: 0
define fn0000000000410BF0
fn0000000000410BF0_entry:
	rsp = fp
	// succ:  l0000000000410BF0
l0000000000410BF0:
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	call fn0000000000410B40 (retsize: 8;)
	SZO = cond(rax & rax)
	C = false
	al = CONVERT(Test(EQ,Z), bool, int8)
	eax = CONVERT(al, byte, word32)
	rax = CONVERT(eax, word32, uint64)
	eax = -eax
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	C = eax == 0<32>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	return
	// succ:  fn0000000000410BF0_exit
fn0000000000410BF0_exit:


// fn0000000000410C10
// Return size: 0
define fn0000000000410C10
fn0000000000410C10_entry:
	rsp = fp
	// succ:  l0000000000410C10
l0000000000410C10:
	rax = _lconv_init
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000410C10_exit
fn0000000000410C10_exit:


// fn0000000000410C20
// Return size: 8
define fn0000000000410C20
fn0000000000410C20_entry:
	rsp = fp
	// succ:  l0000000000410C20
l0000000000410C20:
	rax = CONVERT(Mem0[rcx + 0x3C<64>:word32], word32, int64)
	rcx = rcx + rax
	SCZO = cond(rcx)
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rcx:word32] - 0x4550<32>)
	branch Test(EQ,Z) l0000000000410C33
	// succ:  l0000000000410C31 l0000000000410C33
l0000000000410C31:
	return
	// succ:  fn0000000000410C20_exit
l0000000000410C33:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rcx + 0x18<64>:word16] - 0x20B<16>)
	al = CONVERT(Test(EQ,Z), bool, int8)
	return
	// succ:  fn0000000000410C20_exit
fn0000000000410C20_exit:


// fn0000000000410C40
// Return size: 8
define fn0000000000410C40
fn0000000000410C40_entry:
	rsp = fp
	// succ:  l0000000000410C40
l0000000000410C40:
	SCZO = cond(Mem0[rcx:word16] - 0x5A4D<16>)
	branch Test(EQ,Z) l0000000000410C50
	// succ:  l0000000000410C47 l0000000000410C50
l0000000000410C47:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	return
	// succ:  fn0000000000410C40_exit
l0000000000410C50:
	// succ:  l0000000000410C50_thunk_fn0000000000410C20
l0000000000410C50_thunk_fn0000000000410C20:
	call fn0000000000410C20 (retsize: 0;)
	return
	// succ:  fn0000000000410C40_exit
fn0000000000410C40_exit:


// fn0000000000410C60
// Return size: 0
define fn0000000000410C60
fn0000000000410C60_entry:
	rsp = fp
	// succ:  l0000000000410C60
l0000000000410C60:
	rax = CONVERT(Mem0[rcx + 0x3C<64>:word32], word32, int64)
	rcx = rcx + rax
	SCZO = cond(rcx)
	eax = CONVERT(Mem0[rcx + 0x14<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rax = rcx + 0x18<64> + rax
	ecx = CONVERT(Mem0[rcx + 6<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0000000000410CA1
	// succ:  l0000000000410C78 l0000000000410CA1
l0000000000410C78:
	ecx = ecx - 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	rcx = rcx + rcx * 4<64>
	r9 = rax + 0x28<64> + rcx * 8<64>
	// succ:  l0000000000410C84
l0000000000410C84:
	r8d = Mem0[rax + 0xC<64>:word32]
	r8 = CONVERT(r8d, word32, uint64)
	SCZO = cond(r8 - rdx)
	rcx = r8
	branch Test(UGT,CZ) l0000000000410C98
	// succ:  l0000000000410C90 l0000000000410C98
l0000000000410C90:
	ecx = ecx + Mem0[rax + 8<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	SCZO = cond(rdx - rcx)
	branch Test(ULT,C) l0000000000410CA3
	// succ:  l0000000000410C98 l0000000000410CA3
l0000000000410C98:
	rax = rax + 0x28<64>
	SCZO = cond(rax)
	SCZO = cond(rax - r9)
	branch Test(NE,Z) l0000000000410C84
	// succ:  l0000000000410CA1 l0000000000410C84
l0000000000410CA1:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	// succ:  l0000000000410CA3
l0000000000410CA3:
	return
	// succ:  fn0000000000410C60_exit
fn0000000000410C60_exit:


// fn0000000000410CB0
// Return size: 8
define fn0000000000410CB0
fn0000000000410CB0_entry:
	rsp = fp
	// succ:  l0000000000410CB0
l0000000000410CB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = rcx
	eax = strlen(rcx)
	SCZO = cond(rax - 8<64>)
	branch Test(UGT,CZ) l0000000000410CE0
	// succ:  l0000000000410CC5 l0000000000410CE0
l0000000000410CC5:
	rbx = Mem0[0x0000000000491EE0<p64>:word64]
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	SCZO = cond(Mem0[rbx:word16] - 0x5A4D<16>)
	branch Test(EQ,Z) l0000000000410CF0
	// succ:  l0000000000410CD5 l0000000000410CF0
l0000000000410CD5:
	rax = rdi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410CB0_exit
l0000000000410CE0:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	rax = rdi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410CB0_exit
l0000000000410CF0:
	rcx = rbx
	call fn0000000000410C20 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000410CD5
	// succ:  l0000000000410CFC l0000000000410CD5
l0000000000410CFC:
	rdx = CONVERT(Mem0[rbx + 0x3C<64>:word32], word32, int64)
	rdx = rdx + rbx
	SCZO = cond(rdx)
	eax = CONVERT(Mem0[rdx + 0x14<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rbx = rdx + 0x18<64> + rax
	edx = CONVERT(Mem0[rdx + 6<64>:word16], word16, word32)
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000410CD5
	// succ:  l0000000000410D14 l0000000000410CD5
l0000000000410D14:
	edx = edx - 1<32>
	rdx = CONVERT(edx, word32, uint64)
	SCZO = cond(edx)
	rax = rdx + rdx * 4<64>
	rdi = rbx + 0x28<64> + rax * 8<64>
	goto l0000000000410D2B
	// succ:  l0000000000410D2B
l0000000000410D22:
	rbx = rbx + 0x28<64>
	SCZO = cond(rbx)
	SCZO = cond(rbx - rdi)
	branch Test(EQ,Z) l0000000000410CE0
	// succ:  l0000000000410D2B l0000000000410CE0
l0000000000410D2B:
	r8d = 8<32>
	r8 = CONVERT(r8d, word32, uint64)
	rdx = rsi
	rcx = rbx
	eax = strncmp(rcx, rdx, r8)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000410D22
	// succ:  l0000000000410D40 l0000000000410D22
l0000000000410D40:
	rdi = rbx
	rax = rdi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410CB0_exit
fn0000000000410CB0_exit:


// fn0000000000410D50
// Return size: 8
define fn0000000000410D50
fn0000000000410D50_entry:
	rsp = fp
	// succ:  l0000000000410D50
l0000000000410D50:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[0x0000000000491EE0<p64>:word64]
	SCZO = cond(Mem0[rbx:word16] - 0x5A4D<16>)
	branch Test(EQ,Z) l0000000000410D70
	// succ:  l0000000000410D64 l0000000000410D70
l0000000000410D64:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410D50_exit
l0000000000410D70:
	rsi = rcx
	rcx = rbx
	call fn0000000000410C20 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000410D64
	// succ:  l0000000000410D7F l0000000000410D64
l0000000000410D7F:
	rsi = rsi - rbx
	SCZO = cond(rsi)
	rcx = rbx
	rdx = rsi
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	// succ:  l0000000000410D8E_thunk_fn0000000000410C60
l0000000000410D8E_thunk_fn0000000000410C60:
	call fn0000000000410C60 (retsize: 0;)
	return
	// succ:  fn0000000000410D50_exit
fn0000000000410D50_exit:


// fn0000000000410DA0
// Return size: 8
define fn0000000000410DA0
fn0000000000410DA0_entry:
	rsp = fp
	// succ:  l0000000000410DA0
l0000000000410DA0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[0x0000000000491EE0<p64>:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbx:word16] - 0x5A4D<16>)
	branch Test(EQ,Z) l0000000000410DC0
	// succ:  l0000000000410DB5 l0000000000410DC0
l0000000000410DB5:
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410DA0_exit
l0000000000410DC0:
	rcx = rbx
	call fn0000000000410C20 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000410DB5
	// succ:  l0000000000410DCC l0000000000410DB5
l0000000000410DCC:
	rax = CONVERT(Mem0[rbx + 0x3C<64>:word32], word32, int64)
	eax = CONVERT(Mem0[rax + 6<64> + rbx:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410DA0_exit
fn0000000000410DA0_exit:


// fn0000000000410DE0
// Return size: 8
define fn0000000000410DE0
fn0000000000410DE0_entry:
	rsp = fp
	// succ:  l0000000000410DE0
l0000000000410DE0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20<64>
	SCZO = cond(rsp)
	rsi = Mem0[0x0000000000491EE0<p64>:word64]
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	rbx = rcx
	SCZO = cond(Mem0[rsi:word16] - 0x5A4D<16>)
	branch Test(EQ,Z) l0000000000410E05
	// succ:  l0000000000410DFA l0000000000410E05
l0000000000410DFA:
	rax = rdi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410DE0_exit
l0000000000410E05:
	rcx = rsi
	call fn0000000000410C20 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000410DFA
	// succ:  l0000000000410E11 l0000000000410DFA
l0000000000410E11:
	rax = CONVERT(Mem0[rsi + 0x3C<64>:word32], word32, int64)
	rsi = rsi + rax
	SCZO = cond(rsi)
	ecx = CONVERT(Mem0[rsi + 6<64>:word16], word16, word32)
	rcx = CONVERT(ecx, word32, uint64)
	eax = CONVERT(Mem0[rsi + 0x14<64>:word16], word16, word32)
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	rdx = rsi + 0x18<64> + rax
	branch Test(EQ,Z) l0000000000410DFA
	// succ:  l0000000000410E29 l0000000000410DFA
l0000000000410E29:
	ecx = ecx - 1<32>
	rcx = CONVERT(ecx, word32, uint64)
	SCZO = cond(ecx)
	rax = rcx + rcx * 4<64>
	rax = rdx + 0x28<64> + rax * 8<64>
	// succ:  l0000000000410E35
l0000000000410E35:
	SZO = cond(Mem0[rdx + 0x27<64>:byte] & 0x20<8>)
	C = false
	branch Test(EQ,Z) l0000000000410E44
	// succ:  l0000000000410E3B l0000000000410E44
l0000000000410E3B:
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000410E60
	// succ:  l0000000000410E40 l0000000000410E60
l0000000000410E40:
	rbx = rbx - 1<64>
	SCZO = cond(rbx)
	// succ:  l0000000000410E44
l0000000000410E44:
	rdx = rdx + 0x28<64>
	SCZO = cond(rdx)
	SCZO = cond(rdx - rax)
	branch Test(NE,Z) l0000000000410E35
	// succ:  l0000000000410E4D l0000000000410E35
l0000000000410E4D:
	edi = edi ^ edi
	rdi = CONVERT(edi, word32, uint64)
	SZO = cond(edi)
	C = false
	rax = rdi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410DE0_exit
l0000000000410E60:
	rdi = rdx
	rax = rdi
	rsp = rsp + 0x20<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410DE0_exit
fn0000000000410DE0_exit:


// fn0000000000410E70
// Return size: 8
define fn0000000000410E70
fn0000000000410E70_entry:
	rsp = fp
	// succ:  l0000000000410E70
l0000000000410E70:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rsi = Mem0[0x0000000000491EE0<p64>:word64]
	ebx = ebx ^ ebx
	rbx = CONVERT(ebx, word32, uint64)
	SZO = cond(ebx)
	C = false
	SCZO = cond(Mem0[rsi:word16] - 0x5A4D<16>)
	branch Test(EQ,Z) l0000000000410E90
	// succ:  l0000000000410E86 l0000000000410E90
l0000000000410E86:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410E70_exit
l0000000000410E90:
	rcx = rsi
	call fn0000000000410C20 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000410E9E
	// succ:  l0000000000410E9A_1 l0000000000410E9E
l0000000000410E9A_1:
	rbx = rsi
	// succ:  l0000000000410E9E
l0000000000410E9E:
	rax = rbx
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410E70_exit
fn0000000000410E70_exit:


// fn0000000000410EB0
// Return size: 8
define fn0000000000410EB0
fn0000000000410EB0_entry:
	rsp = fp
	// succ:  l0000000000410EB0
l0000000000410EB0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[0x0000000000491EE0<p64>:word64]
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[rbx:word16] - 0x5A4D<16>)
	branch Test(EQ,Z) l0000000000410ED0
	// succ:  l0000000000410EC6 l0000000000410ED0
l0000000000410EC6:
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410EB0_exit
l0000000000410ED0:
	rsi = rcx
	rcx = rbx
	call fn0000000000410C20 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000410EC6
	// succ:  l0000000000410EDF l0000000000410EC6
l0000000000410EDF:
	rsi = rsi - rbx
	SCZO = cond(rsi)
	rcx = rbx
	rdx = rsi
	call fn0000000000410C60 (retsize: 8;)
	rsp = rsp + 8<64>
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000410F01
	// succ:  l0000000000410EF2 l0000000000410F01
l0000000000410EF2:
	eax = Mem0[rax + 0x24<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	eax = ~eax
	rax = CONVERT(eax, word32, uint64)
	eax = eax >>u 0x1F<32>
	rax = CONVERT(eax, word32, uint64)
	SCZO = cond(eax)
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410EB0_exit
l0000000000410F01:
	eax = eax ^ eax
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax)
	C = false
	goto l0000000000410EC6
	// succ:  l0000000000410EC6
fn0000000000410EB0_exit:


// fn0000000000410F10
// Return size: 8
define fn0000000000410F10
fn0000000000410F10_entry:
	rsp = fp
	// succ:  l0000000000410F10
l0000000000410F10:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rdi = Mem0[0x0000000000491EE0<p64>:word64]
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	esi = ecx
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(Mem0[rdi:word16] - 0x5A4D<16>)
	branch Test(EQ,Z) l0000000000410F40
	// succ:  l0000000000410F2A l0000000000410F40
l0000000000410F2A:
	rax = rbp
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410F10_exit
l0000000000410F40:
	rcx = rdi
	call fn0000000000410C20 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000410F2A
	// succ:  l0000000000410F4C l0000000000410F2A
l0000000000410F4C:
	rax = CONVERT(Mem0[rdi + 0x3C<64>:word32], word32, int64)
	edx = Mem0[rdi + 0x90<64> + rax:word32]
	rdx = CONVERT(edx, word32, uint64)
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000410F2A
	// succ:  l0000000000410F5B l0000000000410F2A
l0000000000410F5B:
	ebx = edx
	rbx = CONVERT(ebx, word32, uint64)
	rcx = rdi
	rdx = rbx
	call fn0000000000410C60 (retsize: 8;)
	rsp = rsp + 8<64>
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000410F2A
	// succ:  l0000000000410F6D l0000000000410F2A
l0000000000410F6D:
	rbx = rbx + rdi
	SCZO = cond(rbx)
	rdx = rbx
	branch Test(NE,Z) l0000000000410F87
	// succ:  l0000000000410F75 l0000000000410F87
l0000000000410F75:
	goto l0000000000410F2A
	// succ:  l0000000000410F2A
l0000000000410F80:
	esi = esi - 1<32>
	rsi = CONVERT(esi, word32, uint64)
	SCZO = cond(esi)
	rdx = rdx + 0x14<64>
	SCZO = cond(rdx)
	// succ:  l0000000000410F87
l0000000000410F87:
	ecx = Mem0[rdx + 4<64>:word32]
	rcx = CONVERT(ecx, word32, uint64)
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l0000000000410F95
	// succ:  l0000000000410F8E l0000000000410F95
l0000000000410F8E:
	eax = Mem0[rdx + 0xC<64>:word32]
	rax = CONVERT(eax, word32, uint64)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000410FB0
	// succ:  l0000000000410F95 l0000000000410FB0
l0000000000410F95:
	SZO = cond(esi & esi)
	C = false
	branch Test(GT,SZO) l0000000000410F80
	// succ:  l0000000000410F99 l0000000000410F80
l0000000000410F99:
	ebp = Mem0[rdx + 0xC<64>:word32]
	rbp = CONVERT(ebp, word32, uint64)
	rbp = rbp + rdi
	SCZO = cond(rbp)
	rax = rbp
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410F10_exit
l0000000000410FB0:
	ebp = ebp ^ ebp
	rbp = CONVERT(ebp, word32, uint64)
	SZO = cond(ebp)
	C = false
	rax = rbp
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	return
	// succ:  fn0000000000410F10_exit
fn0000000000410F10_exit:


// fn0000000000410FC0
// Return size: 0
define fn0000000000410FC0
fn0000000000410FC0_entry:
	rsp = fp
	// succ:  l0000000000410FC0
l0000000000410FC0:
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbp
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rdi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8<i64>
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x28<64>
	SCZO = cond(rsp)
	rcx = 0x00000000004ADA00<p64>
	EnterCriticalSection(rcx)
	rbx = Mem0[0x00000000004AD9E0<p64>:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(EQ,Z) l0000000000411014
	// succ:  l0000000000410FE1 l0000000000411014
l0000000000410FE1:
	rbp = TlsGetValue
	rdi = GetLastError
	// succ:  l0000000000410FF0
l0000000000410FF0:
	ecx = Mem0[rbx:word32]
	rcx = CONVERT(ecx, word32, uint64)
	rax = TlsGetValue(rcx)
	rsi = rax
	eax = GetLastError()
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000041100B
	// succ:  l0000000000410FFD l000000000041100B
l0000000000410FFD:
	SZO = cond(rsi & rsi)
	C = false
	branch Test(EQ,Z) l000000000041100B
	// succ:  l0000000000411002 l000000000041100B
l0000000000411002:
	rax = Mem0[rbx + 8<64>:word64]
	rcx = rsi
	call rax (retsize: 8;)
	// succ:  l000000000041100B
l000000000041100B:
	rbx = Mem0[rbx + 0x10<64>:word64]
	SZO = cond(rbx & rbx)
	C = false
	branch Test(NE,Z) l0000000000410FF0
	// succ:  l0000000000411014 l0000000000410FF0
l0000000000411014:
	rax = LeaveCriticalSection
	rcx = 0x00000000004ADA00<p64>
	rsp = rsp + 0x28<64>
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8<i64>
	call rax (retsize: 0;)
	return
	// succ:  fn0000000000410FC0_exit
fn0000000000410FC0_exit:


